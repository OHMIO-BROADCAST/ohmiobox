
OHMIO-FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014b48  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005690  08014d18  08014d18  00024d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a3a8  0801a3a8  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  0801a3a8  0801a3a8  0002a3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a3b0  0801a3b0  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a3b0  0801a3b0  0002a3b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a3b4  0801a3b4  0002a3b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0801a3b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000ac  0801a464  000300ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000014c  0801a504  0003014c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000ae84  200001ec  0801a5a4  000301ec  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000b070  0801a5a4  0003b070  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002bdf0  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000067f0  00000000  00000000  0005c00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ef8  00000000  00000000  00062800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001dc0  00000000  00000000  000646f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00034bd1  00000000  00000000  000664b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003219d  00000000  00000000  0009b089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010a20d  00000000  00000000  000cd226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001d7433  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008944  00000000  00000000  001d7484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014d00 	.word	0x08014d00

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	08014d00 	.word	0x08014d00

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005b8:	f3bf 8f4f 	dsb	sy
}
 80005bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005be:	f3bf 8f6f 	isb	sy
}
 80005c2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005c4:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <SCB_EnableICache+0x48>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005cc:	f3bf 8f4f 	dsb	sy
}
 80005d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005d2:	f3bf 8f6f 	isb	sy
}
 80005d6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <SCB_EnableICache+0x48>)
 80005da:	695b      	ldr	r3, [r3, #20]
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <SCB_EnableICache+0x48>)
 80005de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005e4:	f3bf 8f4f 	dsb	sy
}
 80005e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ea:	f3bf 8f6f 	isb	sy
}
 80005ee:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000606:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <SCB_EnableDCache+0x84>)
 8000608:	2200      	movs	r2, #0
 800060a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800060e:	f3bf 8f4f 	dsb	sy
}
 8000612:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <SCB_EnableDCache+0x84>)
 8000616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800061a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	0b5b      	lsrs	r3, r3, #13
 8000620:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000624:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	08db      	lsrs	r3, r3, #3
 800062a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800062e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	015a      	lsls	r2, r3, #5
 8000634:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000638:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800063e:	4911      	ldr	r1, [pc, #68]	; (8000684 <SCB_EnableDCache+0x84>)
 8000640:	4313      	orrs	r3, r2
 8000642:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	1e5a      	subs	r2, r3, #1
 800064a:	60ba      	str	r2, [r7, #8]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1ef      	bne.n	8000630 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	1e5a      	subs	r2, r3, #1
 8000654:	60fa      	str	r2, [r7, #12]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1e5      	bne.n	8000626 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800065a:	f3bf 8f4f 	dsb	sy
}
 800065e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <SCB_EnableDCache+0x84>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <SCB_EnableDCache+0x84>)
 8000666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800066a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800066c:	f3bf 8f4f 	dsb	sy
}
 8000670:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000672:	f3bf 8f6f 	isb	sy
}
 8000676:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000678:	bf00      	nop
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <main>:
extern struct netif gnetif;

static uint32_t last_arriba_time = 0; // keeps track of the last time "ARRIBA" was displayed
unsigned int analog_value_keypad;
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800068c:	f000 fb86 	bl	8000d9c <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000690:	f7ff ff90 	bl	80005b4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000694:	f7ff ffb4 	bl	8000600 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f001 ff6e 	bl	8002578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f926 	bl	80008ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f000 face 	bl	8000c40 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006a4:	f000 fa6e 	bl	8000b84 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006a8:	f000 fa9c 	bl	8000be4 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 80006ac:	f000 fa2a 	bl	8000b04 <MX_I2C2_Init>
  MX_ADC1_Init();
 80006b0:	f000 f984 	bl	80009bc <MX_ADC1_Init>
  MX_ADC3_Init();
 80006b4:	f000 f9d4 	bl	8000a60 <MX_ADC3_Init>
  MX_LWIP_Init();
 80006b8:	f006 fee6 	bl	8007488 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80006bc:	f000 fbb6 	bl	8000e2c <ssd1306_Init>
  //INICIALIZAMOS EL SPLASH
  ssd1306_OhmioSplash();
 80006c0:	f001 fade 	bl	8001c80 <ssd1306_OhmioSplash>
  ssd1306_OhmioMenuPrincipal();
 80006c4:	f001 fae8 	bl	8001c98 <ssd1306_OhmioMenuPrincipal>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //INICIALIZAMOS EL SPLASH
    ethernetif_input(&gnetif);
 80006c8:	487d      	ldr	r0, [pc, #500]	; (80008c0 <main+0x238>)
 80006ca:	f007 f88d 	bl	80077e8 <ethernetif_input>
    sys_check_timeouts();
 80006ce:	f00e fb73 	bl	800edb8 <sys_check_timeouts>
    printf("IP Address: %s\n",
 80006d2:	487c      	ldr	r0, [pc, #496]	; (80008c4 <main+0x23c>)
 80006d4:	f012 fad6 	bl	8012c84 <ip4addr_ntoa>
 80006d8:	4603      	mov	r3, r0
 80006da:	4619      	mov	r1, r3
 80006dc:	487a      	ldr	r0, [pc, #488]	; (80008c8 <main+0x240>)
 80006de:	f013 fabf 	bl	8013c60 <iprintf>
    ip4addr_ntoa(netif_ip4_addr(&gnetif)));
    
    printf("Local Subnet: %s\n",
           ip4_addr_get_u32(netif_ip4_netmask(&gnetif)));
 80006e2:	4b7a      	ldr	r3, [pc, #488]	; (80008cc <main+0x244>)
    printf("Local Subnet: %s\n",
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4619      	mov	r1, r3
 80006e8:	4879      	ldr	r0, [pc, #484]	; (80008d0 <main+0x248>)
 80006ea:	f013 fab9 	bl	8013c60 <iprintf>

    printf("Local Gateway: %s\n",
       ip4_addr_get_u32(netif_ip4_gw(&gnetif)));
 80006ee:	4b79      	ldr	r3, [pc, #484]	; (80008d4 <main+0x24c>)
    printf("Local Gateway: %s\n",
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4619      	mov	r1, r3
 80006f4:	4878      	ldr	r0, [pc, #480]	; (80008d8 <main+0x250>)
 80006f6:	f013 fab3 	bl	8013c60 <iprintf>

	  HAL_ADC_Start(&hadc3);
 80006fa:	4878      	ldr	r0, [pc, #480]	; (80008dc <main+0x254>)
 80006fc:	f002 f80a 	bl	8002714 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc3, 10)==HAL_OK){
 8000700:	210a      	movs	r1, #10
 8000702:	4876      	ldr	r0, [pc, #472]	; (80008dc <main+0x254>)
 8000704:	f002 f908 	bl	8002918 <HAL_ADC_PollForConversion>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d10e      	bne.n	800072c <main+0xa4>
		  analog_value_keypad=HAL_ADC_GetValue(&hadc3);
 800070e:	4873      	ldr	r0, [pc, #460]	; (80008dc <main+0x254>)
 8000710:	f002 f98d 	bl	8002a2e <HAL_ADC_GetValue>
 8000714:	4603      	mov	r3, r0
 8000716:	4a72      	ldr	r2, [pc, #456]	; (80008e0 <main+0x258>)
 8000718:	6013      	str	r3, [r2, #0]
		  ssd1306_DisplayAnalogValue(analog_value_keypad, indexMenu, screen);
 800071a:	4b71      	ldr	r3, [pc, #452]	; (80008e0 <main+0x258>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a71      	ldr	r2, [pc, #452]	; (80008e4 <main+0x25c>)
 8000720:	6811      	ldr	r1, [r2, #0]
 8000722:	4a71      	ldr	r2, [pc, #452]	; (80008e8 <main+0x260>)
 8000724:	6812      	ldr	r2, [r2, #0]
 8000726:	4618      	mov	r0, r3
 8000728:	f001 fa58 	bl	8001bdc <ssd1306_DisplayAnalogValue>
	  }

	  //Displacement vertical
	   if(analog_value_keypad >= 800 && analog_value_keypad <= 900){
 800072c:	4b6c      	ldr	r3, [pc, #432]	; (80008e0 <main+0x258>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000734:	d335      	bcc.n	80007a2 <main+0x11a>
 8000736:	4b6a      	ldr	r3, [pc, #424]	; (80008e0 <main+0x258>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800073e:	d830      	bhi.n	80007a2 <main+0x11a>
        if(screen==1){
 8000740:	4b69      	ldr	r3, [pc, #420]	; (80008e8 <main+0x260>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d10d      	bne.n	8000764 <main+0xdc>
          if (indexMenu==4){
 8000748:	4b66      	ldr	r3, [pc, #408]	; (80008e4 <main+0x25c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b04      	cmp	r3, #4
 800074e:	d103      	bne.n	8000758 <main+0xd0>
            indexMenu=0;
 8000750:	4b64      	ldr	r3, [pc, #400]	; (80008e4 <main+0x25c>)
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	e024      	b.n	80007a2 <main+0x11a>
          }
          else{
            indexMenu++;
 8000758:	4b62      	ldr	r3, [pc, #392]	; (80008e4 <main+0x25c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	3301      	adds	r3, #1
 800075e:	4a61      	ldr	r2, [pc, #388]	; (80008e4 <main+0x25c>)
 8000760:	6013      	str	r3, [r2, #0]
 8000762:	e01e      	b.n	80007a2 <main+0x11a>
          }
        }else if(screen==4){
 8000764:	4b60      	ldr	r3, [pc, #384]	; (80008e8 <main+0x260>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b04      	cmp	r3, #4
 800076a:	d10d      	bne.n	8000788 <main+0x100>
          if (indexMenu==4){
 800076c:	4b5d      	ldr	r3, [pc, #372]	; (80008e4 <main+0x25c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b04      	cmp	r3, #4
 8000772:	d103      	bne.n	800077c <main+0xf4>
            indexMenu=0;
 8000774:	4b5b      	ldr	r3, [pc, #364]	; (80008e4 <main+0x25c>)
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	e012      	b.n	80007a2 <main+0x11a>
          }
          else{
            indexMenu++;
 800077c:	4b59      	ldr	r3, [pc, #356]	; (80008e4 <main+0x25c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	3301      	adds	r3, #1
 8000782:	4a58      	ldr	r2, [pc, #352]	; (80008e4 <main+0x25c>)
 8000784:	6013      	str	r3, [r2, #0]
 8000786:	e00c      	b.n	80007a2 <main+0x11a>
          }
        }
        else{
          if (indexMenu==2){
 8000788:	4b56      	ldr	r3, [pc, #344]	; (80008e4 <main+0x25c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b02      	cmp	r3, #2
 800078e:	d103      	bne.n	8000798 <main+0x110>
            indexMenu=0;
 8000790:	4b54      	ldr	r3, [pc, #336]	; (80008e4 <main+0x25c>)
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	e004      	b.n	80007a2 <main+0x11a>
          }
          else{
            indexMenu++;
 8000798:	4b52      	ldr	r3, [pc, #328]	; (80008e4 <main+0x25c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	3301      	adds	r3, #1
 800079e:	4a51      	ldr	r2, [pc, #324]	; (80008e4 <main+0x25c>)
 80007a0:	6013      	str	r3, [r2, #0]
	   //screen=1 -> DASHBOARD
	   //screen=2 -> ENERGIA
	   //screen=3 -> SETTINGS


	      if(analog_value_keypad >= 0 && analog_value_keypad <= 100){
 80007a2:	4b4f      	ldr	r3, [pc, #316]	; (80008e0 <main+0x258>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2b64      	cmp	r3, #100	; 0x64
 80007a8:	f200 8083 	bhi.w	80008b2 <main+0x22a>
			//Select
	    	//Menu Principal
			if(screen==0){
 80007ac:	4b4e      	ldr	r3, [pc, #312]	; (80008e8 <main+0x260>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d125      	bne.n	8000800 <main+0x178>
				if(indexMenu==0){
 80007b4:	4b4b      	ldr	r3, [pc, #300]	; (80008e4 <main+0x25c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d108      	bne.n	80007ce <main+0x146>
					//option Dashboard
					screen=1;
 80007bc:	4b4a      	ldr	r3, [pc, #296]	; (80008e8 <main+0x260>)
 80007be:	2201      	movs	r2, #1
 80007c0:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 80007c2:	4b48      	ldr	r3, [pc, #288]	; (80008e4 <main+0x25c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 80007c8:	f000 fbbe 	bl	8000f48 <ssd1306_UpdateScreen>
 80007cc:	e018      	b.n	8000800 <main+0x178>
				}else if (indexMenu==1){
 80007ce:	4b45      	ldr	r3, [pc, #276]	; (80008e4 <main+0x25c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d108      	bne.n	80007e8 <main+0x160>
					//option Energy
					screen=2;
 80007d6:	4b44      	ldr	r3, [pc, #272]	; (80008e8 <main+0x260>)
 80007d8:	2202      	movs	r2, #2
 80007da:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 80007dc:	4b41      	ldr	r3, [pc, #260]	; (80008e4 <main+0x25c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 80007e2:	f000 fbb1 	bl	8000f48 <ssd1306_UpdateScreen>
 80007e6:	e00b      	b.n	8000800 <main+0x178>
				}else if (indexMenu==2){
 80007e8:	4b3e      	ldr	r3, [pc, #248]	; (80008e4 <main+0x25c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b02      	cmp	r3, #2
 80007ee:	d107      	bne.n	8000800 <main+0x178>
					screen=3;
 80007f0:	4b3d      	ldr	r3, [pc, #244]	; (80008e8 <main+0x260>)
 80007f2:	2203      	movs	r2, #3
 80007f4:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 80007f6:	4b3b      	ldr	r3, [pc, #236]	; (80008e4 <main+0x25c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 80007fc:	f000 fba4 	bl	8000f48 <ssd1306_UpdateScreen>
				}
			}
			// Dashboard
				if(screen==1){
 8000800:	4b39      	ldr	r3, [pc, #228]	; (80008e8 <main+0x260>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d118      	bne.n	800083a <main+0x1b2>
					if (indexMenu==0){
 8000808:	4b36      	ldr	r3, [pc, #216]	; (80008e4 <main+0x25c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d108      	bne.n	8000822 <main+0x19a>
						//option RF
						screen=4;
 8000810:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <main+0x260>)
 8000812:	2204      	movs	r2, #4
 8000814:	601a      	str	r2, [r3, #0]
						indexMenu=0;
 8000816:	4b33      	ldr	r3, [pc, #204]	; (80008e4 <main+0x25c>)
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
						ssd1306_UpdateScreen();
 800081c:	f000 fb94 	bl	8000f48 <ssd1306_UpdateScreen>
 8000820:	e00b      	b.n	800083a <main+0x1b2>
					}else if (indexMenu==3){
 8000822:	4b30      	ldr	r3, [pc, #192]	; (80008e4 <main+0x25c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b03      	cmp	r3, #3
 8000828:	d107      	bne.n	800083a <main+0x1b2>
						//option Atras back
						screen=0;
 800082a:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <main+0x260>)
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
						indexMenu=0;
 8000830:	4b2c      	ldr	r3, [pc, #176]	; (80008e4 <main+0x25c>)
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
						ssd1306_UpdateScreen();
 8000836:	f000 fb87 	bl	8000f48 <ssd1306_UpdateScreen>
					}
				}
			// Energy
				if(screen==2){
 800083a:	4b2b      	ldr	r3, [pc, #172]	; (80008e8 <main+0x260>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2b02      	cmp	r3, #2
 8000840:	d10f      	bne.n	8000862 <main+0x1da>
					if(indexMenu==0){
 8000842:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <main+0x25c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d00b      	beq.n	8000862 <main+0x1da>
						//option power no hace nada
						//screen=1;
					}else if (indexMenu==2){
 800084a:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <main+0x25c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b02      	cmp	r3, #2
 8000850:	d107      	bne.n	8000862 <main+0x1da>
						//option Atras back
						screen=0;
 8000852:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <main+0x260>)
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
						indexMenu=0;
 8000858:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <main+0x25c>)
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
						ssd1306_UpdateScreen();
 800085e:	f000 fb73 	bl	8000f48 <ssd1306_UpdateScreen>
					}
				}
			// Settings
			if(screen==3){
 8000862:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <main+0x260>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b03      	cmp	r3, #3
 8000868:	d10f      	bne.n	800088a <main+0x202>
				if(indexMenu==0){
 800086a:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <main+0x25c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d00b      	beq.n	800088a <main+0x202>
					//option Version no hace nada
					//screen=1;
				}else if (indexMenu==2){
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <main+0x25c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2b02      	cmp	r3, #2
 8000878:	d107      	bne.n	800088a <main+0x202>
					//option Atras back
					screen=0;
 800087a:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <main+0x260>)
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <main+0x25c>)
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 8000886:	f000 fb5f 	bl	8000f48 <ssd1306_UpdateScreen>
				}
			}
      // RF Statistics
      if(screen==4){
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <main+0x260>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b04      	cmp	r3, #4
 8000890:	d10f      	bne.n	80008b2 <main+0x22a>
        if(indexMenu==0){
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <main+0x25c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d00b      	beq.n	80008b2 <main+0x22a>
					//screen=1;
				}
        else if (indexMenu==4){
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <main+0x25c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b04      	cmp	r3, #4
 80008a0:	d107      	bne.n	80008b2 <main+0x22a>
					//option Atras back
					screen=1;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <main+0x260>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <main+0x25c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 80008ae:	f000 fb4b 	bl	8000f48 <ssd1306_UpdateScreen>
      }
	      }



	  HAL_ADC_Stop(&hadc3);
 80008b2:	480a      	ldr	r0, [pc, #40]	; (80008dc <main+0x254>)
 80008b4:	f001 fffc 	bl	80028b0 <HAL_ADC_Stop>
	  HAL_Delay(50);
 80008b8:	2032      	movs	r0, #50	; 0x32
 80008ba:	f001 fec3 	bl	8002644 <HAL_Delay>
    ethernetif_input(&gnetif);
 80008be:	e703      	b.n	80006c8 <main+0x40>
 80008c0:	20000c98 	.word	0x20000c98
 80008c4:	20000c9c 	.word	0x20000c9c
 80008c8:	08014d18 	.word	0x08014d18
 80008cc:	20000ca0 	.word	0x20000ca0
 80008d0:	08014d28 	.word	0x08014d28
 80008d4:	20000ca4 	.word	0x20000ca4
 80008d8:	08014d3c 	.word	0x08014d3c
 80008dc:	20000250 	.word	0x20000250
 80008e0:	20000884 	.word	0x20000884
 80008e4:	2000087c 	.word	0x2000087c
 80008e8:	20000880 	.word	0x20000880

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b094      	sub	sp, #80	; 0x50
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 0320 	add.w	r3, r7, #32
 80008f6:	2230      	movs	r2, #48	; 0x30
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f013 f9a8 	bl	8013c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000910:	f004 fdaa 	bl	8005468 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000914:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <SystemClock_Config+0xc8>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	4a26      	ldr	r2, [pc, #152]	; (80009b4 <SystemClock_Config+0xc8>)
 800091a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091e:	6413      	str	r3, [r2, #64]	; 0x40
 8000920:	4b24      	ldr	r3, [pc, #144]	; (80009b4 <SystemClock_Config+0xc8>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800092c:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <SystemClock_Config+0xcc>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000934:	4a20      	ldr	r2, [pc, #128]	; (80009b8 <SystemClock_Config+0xcc>)
 8000936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093a:	6013      	str	r3, [r2, #0]
 800093c:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <SystemClock_Config+0xcc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000948:	2301      	movs	r3, #1
 800094a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800094c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000952:	2302      	movs	r3, #2
 8000954:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000956:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800095a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800095c:	2304      	movs	r3, #4
 800095e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000960:	2348      	movs	r3, #72	; 0x48
 8000962:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000964:	2302      	movs	r3, #2
 8000966:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000968:	2303      	movs	r3, #3
 800096a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096c:	f107 0320 	add.w	r3, r7, #32
 8000970:	4618      	mov	r0, r3
 8000972:	f004 fd89 	bl	8005488 <HAL_RCC_OscConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800097c:	f000 fa17 	bl	8000dae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000980:	230f      	movs	r3, #15
 8000982:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000984:	2302      	movs	r3, #2
 8000986:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800098c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000990:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	2102      	movs	r1, #2
 800099c:	4618      	mov	r0, r3
 800099e:	f005 f817 	bl	80059d0 <HAL_RCC_ClockConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009a8:	f000 fa01 	bl	8000dae <Error_Handler>
  }
}
 80009ac:	bf00      	nop
 80009ae:	3750      	adds	r7, #80	; 0x50
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40007000 	.word	0x40007000

080009bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009c2:	463b      	mov	r3, r7
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009ce:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <MX_ADC1_Init+0x98>)
 80009d0:	4a21      	ldr	r2, [pc, #132]	; (8000a58 <MX_ADC1_Init+0x9c>)
 80009d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009d4:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <MX_ADC1_Init+0x98>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009da:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <MX_ADC1_Init+0x98>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009e0:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <MX_ADC1_Init+0x98>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009e6:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_ADC1_Init+0x98>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ec:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <MX_ADC1_Init+0x98>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_ADC1_Init+0x98>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009fa:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <MX_ADC1_Init+0x98>)
 80009fc:	4a17      	ldr	r2, [pc, #92]	; (8000a5c <MX_ADC1_Init+0xa0>)
 80009fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_ADC1_Init+0x98>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <MX_ADC1_Init+0x98>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_ADC1_Init+0x98>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_ADC1_Init+0x98>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a1a:	480e      	ldr	r0, [pc, #56]	; (8000a54 <MX_ADC1_Init+0x98>)
 8000a1c:	f001 fe36 	bl	800268c <HAL_ADC_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a26:	f000 f9c2 	bl	8000dae <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a36:	463b      	mov	r3, r7
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4806      	ldr	r0, [pc, #24]	; (8000a54 <MX_ADC1_Init+0x98>)
 8000a3c:	f002 f804 	bl	8002a48 <HAL_ADC_ConfigChannel>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a46:	f000 f9b2 	bl	8000dae <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000208 	.word	0x20000208
 8000a58:	40012000 	.word	0x40012000
 8000a5c:	0f000001 	.word	0x0f000001

08000a60 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a66:	463b      	mov	r3, r7
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <MX_ADC3_Init+0x98>)
 8000a74:	4a21      	ldr	r2, [pc, #132]	; (8000afc <MX_ADC3_Init+0x9c>)
 8000a76:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a78:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <MX_ADC3_Init+0x98>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <MX_ADC3_Init+0x98>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a84:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <MX_ADC3_Init+0x98>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <MX_ADC3_Init+0x98>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <MX_ADC3_Init+0x98>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_ADC3_Init+0x98>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_ADC3_Init+0x98>)
 8000aa0:	4a17      	ldr	r2, [pc, #92]	; (8000b00 <MX_ADC3_Init+0xa0>)
 8000aa2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_ADC3_Init+0x98>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <MX_ADC3_Init+0x98>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_ADC3_Init+0x98>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_ADC3_Init+0x98>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000abe:	480e      	ldr	r0, [pc, #56]	; (8000af8 <MX_ADC3_Init+0x98>)
 8000ac0:	f001 fde4 	bl	800268c <HAL_ADC_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8000aca:	f000 f970 	bl	8000dae <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ace:	230f      	movs	r3, #15
 8000ad0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ada:	463b      	mov	r3, r7
 8000adc:	4619      	mov	r1, r3
 8000ade:	4806      	ldr	r0, [pc, #24]	; (8000af8 <MX_ADC3_Init+0x98>)
 8000ae0:	f001 ffb2 	bl	8002a48 <HAL_ADC_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000aea:	f000 f960 	bl	8000dae <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000250 	.word	0x20000250
 8000afc:	40012200 	.word	0x40012200
 8000b00:	0f000001 	.word	0x0f000001

08000b04 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <MX_I2C2_Init+0x74>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	; (8000b7c <MX_I2C2_Init+0x78>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301739;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <MX_I2C2_Init+0x74>)
 8000b10:	4a1b      	ldr	r2, [pc, #108]	; (8000b80 <MX_I2C2_Init+0x7c>)
 8000b12:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <MX_I2C2_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <MX_I2C2_Init+0x74>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <MX_I2C2_Init+0x74>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_I2C2_Init+0x74>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <MX_I2C2_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_I2C2_Init+0x74>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_I2C2_Init+0x74>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b3e:	480e      	ldr	r0, [pc, #56]	; (8000b78 <MX_I2C2_Init+0x74>)
 8000b40:	f003 fec8 	bl	80048d4 <HAL_I2C_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b4a:	f000 f930 	bl	8000dae <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4809      	ldr	r0, [pc, #36]	; (8000b78 <MX_I2C2_Init+0x74>)
 8000b52:	f004 faa9 	bl	80050a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b5c:	f000 f927 	bl	8000dae <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b60:	2100      	movs	r1, #0
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_I2C2_Init+0x74>)
 8000b64:	f004 faeb 	bl	800513e <HAL_I2CEx_ConfigDigitalFilter>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b6e:	f000 f91e 	bl	8000dae <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000298 	.word	0x20000298
 8000b7c:	40005800 	.word	0x40005800
 8000b80:	00301739 	.word	0x00301739

08000b84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <MX_USART3_UART_Init+0x58>)
 8000b8a:	4a15      	ldr	r2, [pc, #84]	; (8000be0 <MX_USART3_UART_Init+0x5c>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <MX_USART3_UART_Init+0x58>)
 8000b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_USART3_UART_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <MX_USART3_UART_Init+0x58>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_USART3_UART_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_USART3_UART_Init+0x58>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <MX_USART3_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_USART3_UART_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <MX_USART3_UART_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_USART3_UART_Init+0x58>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_USART3_UART_Init+0x58>)
 8000bc8:	f005 fd18 	bl	80065fc <HAL_UART_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000bd2:	f000 f8ec 	bl	8000dae <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200002ec 	.word	0x200002ec
 8000be0:	40004800 	.word	0x40004800

08000be4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf2:	2206      	movs	r2, #6
 8000bf4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c04:	2202      	movs	r2, #2
 8000c06:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c28:	f004 fad5 	bl	80051d6 <HAL_PCD_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c32:	f000 f8bc 	bl	8000dae <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000374 	.word	0x20000374

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	4b4d      	ldr	r3, [pc, #308]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a4c      	ldr	r2, [pc, #304]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b4a      	ldr	r3, [pc, #296]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	61bb      	str	r3, [r7, #24]
 8000c6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c6e:	4b47      	ldr	r3, [pc, #284]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a46      	ldr	r2, [pc, #280]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000c74:	f043 0320 	orr.w	r3, r3, #32
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b44      	ldr	r3, [pc, #272]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0320 	and.w	r3, r3, #32
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c86:	4b41      	ldr	r3, [pc, #260]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a40      	ldr	r2, [pc, #256]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b3e      	ldr	r3, [pc, #248]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	4b3b      	ldr	r3, [pc, #236]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a3a      	ldr	r2, [pc, #232]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b38      	ldr	r3, [pc, #224]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	4b35      	ldr	r3, [pc, #212]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a34      	ldr	r2, [pc, #208]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b32      	ldr	r3, [pc, #200]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cce:	4b2f      	ldr	r3, [pc, #188]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a2e      	ldr	r2, [pc, #184]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000cd4:	f043 0308 	orr.w	r3, r3, #8
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b2c      	ldr	r3, [pc, #176]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0308 	and.w	r3, r3, #8
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ce6:	4b29      	ldr	r3, [pc, #164]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a28      	ldr	r2, [pc, #160]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b26      	ldr	r3, [pc, #152]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000d04:	4822      	ldr	r0, [pc, #136]	; (8000d90 <MX_GPIO_Init+0x150>)
 8000d06:	f003 fdcb 	bl	80048a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2140      	movs	r1, #64	; 0x40
 8000d0e:	4821      	ldr	r0, [pc, #132]	; (8000d94 <MX_GPIO_Init+0x154>)
 8000d10:	f003 fdc6 	bl	80048a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	4619      	mov	r1, r3
 8000d2a:	481b      	ldr	r0, [pc, #108]	; (8000d98 <MX_GPIO_Init+0x158>)
 8000d2c:	f003 fc0c 	bl	8004548 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000d30:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	4619      	mov	r1, r3
 8000d48:	4811      	ldr	r0, [pc, #68]	; (8000d90 <MX_GPIO_Init+0x150>)
 8000d4a:	f003 fbfd 	bl	8004548 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d4e:	2340      	movs	r3, #64	; 0x40
 8000d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	480b      	ldr	r0, [pc, #44]	; (8000d94 <MX_GPIO_Init+0x154>)
 8000d66:	f003 fbef 	bl	8004548 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_GPIO_Init+0x154>)
 8000d7e:	f003 fbe3 	bl	8004548 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d82:	bf00      	nop
 8000d84:	3730      	adds	r7, #48	; 0x30
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020400 	.word	0x40020400
 8000d94:	40021800 	.word	0x40021800
 8000d98:	40020800 	.word	0x40020800

08000d9c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000da0:	f002 f9b4 	bl	800310c <HAL_MPU_Disable>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000da4:	2004      	movs	r0, #4
 8000da6:	f002 f9c9 	bl	800313c <HAL_MPU_Enable>

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}

08000dae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000db2:	b672      	cpsid	i
}
 8000db4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <Error_Handler+0x8>

08000db8 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af04      	add	r7, sp, #16
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd6:	9302      	str	r3, [sp, #8]
 8000dd8:	2301      	movs	r3, #1
 8000dda:	9301      	str	r3, [sp, #4]
 8000ddc:	1dfb      	adds	r3, r7, #7
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2301      	movs	r3, #1
 8000de2:	2200      	movs	r2, #0
 8000de4:	2178      	movs	r1, #120	; 0x78
 8000de6:	4803      	ldr	r0, [pc, #12]	; (8000df4 <ssd1306_WriteCommand+0x2c>)
 8000de8:	f003 fe04 	bl	80049f4 <HAL_I2C_Mem_Write>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000298 	.word	0x20000298

08000df8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af04      	add	r7, sp, #16
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	f04f 32ff 	mov.w	r2, #4294967295
 8000e0a:	9202      	str	r2, [sp, #8]
 8000e0c:	9301      	str	r3, [sp, #4]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2301      	movs	r3, #1
 8000e14:	2240      	movs	r2, #64	; 0x40
 8000e16:	2178      	movs	r1, #120	; 0x78
 8000e18:	4803      	ldr	r0, [pc, #12]	; (8000e28 <ssd1306_WriteData+0x30>)
 8000e1a:	f003 fdeb 	bl	80049f4 <HAL_I2C_Mem_Write>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000298 	.word	0x20000298

08000e2c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000e30:	f7ff ffc2 	bl	8000db8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000e34:	2064      	movs	r0, #100	; 0x64
 8000e36:	f001 fc05 	bl	8002644 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f000 fa34 	bl	80012a8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000e40:	2020      	movs	r0, #32
 8000e42:	f7ff ffc1 	bl	8000dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000e46:	2000      	movs	r0, #0
 8000e48:	f7ff ffbe 	bl	8000dc8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000e4c:	20b0      	movs	r0, #176	; 0xb0
 8000e4e:	f7ff ffbb 	bl	8000dc8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000e52:	20c8      	movs	r0, #200	; 0xc8
 8000e54:	f7ff ffb8 	bl	8000dc8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f7ff ffb5 	bl	8000dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000e5e:	2010      	movs	r0, #16
 8000e60:	f7ff ffb2 	bl	8000dc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000e64:	2040      	movs	r0, #64	; 0x40
 8000e66:	f7ff ffaf 	bl	8000dc8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000e6a:	20ff      	movs	r0, #255	; 0xff
 8000e6c:	f000 fa09 	bl	8001282 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000e70:	20a1      	movs	r0, #161	; 0xa1
 8000e72:	f7ff ffa9 	bl	8000dc8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000e76:	20a6      	movs	r0, #166	; 0xa6
 8000e78:	f7ff ffa6 	bl	8000dc8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000e7c:	20a8      	movs	r0, #168	; 0xa8
 8000e7e:	f7ff ffa3 	bl	8000dc8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000e82:	203f      	movs	r0, #63	; 0x3f
 8000e84:	f7ff ffa0 	bl	8000dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000e88:	20a4      	movs	r0, #164	; 0xa4
 8000e8a:	f7ff ff9d 	bl	8000dc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000e8e:	20d3      	movs	r0, #211	; 0xd3
 8000e90:	f7ff ff9a 	bl	8000dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000e94:	2000      	movs	r0, #0
 8000e96:	f7ff ff97 	bl	8000dc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000e9a:	20d5      	movs	r0, #213	; 0xd5
 8000e9c:	f7ff ff94 	bl	8000dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000ea0:	20f0      	movs	r0, #240	; 0xf0
 8000ea2:	f7ff ff91 	bl	8000dc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000ea6:	20d9      	movs	r0, #217	; 0xd9
 8000ea8:	f7ff ff8e 	bl	8000dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000eac:	2022      	movs	r0, #34	; 0x22
 8000eae:	f7ff ff8b 	bl	8000dc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000eb2:	20da      	movs	r0, #218	; 0xda
 8000eb4:	f7ff ff88 	bl	8000dc8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000eb8:	2012      	movs	r0, #18
 8000eba:	f7ff ff85 	bl	8000dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000ebe:	20db      	movs	r0, #219	; 0xdb
 8000ec0:	f7ff ff82 	bl	8000dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000ec4:	2020      	movs	r0, #32
 8000ec6:	f7ff ff7f 	bl	8000dc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000eca:	208d      	movs	r0, #141	; 0x8d
 8000ecc:	f7ff ff7c 	bl	8000dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000ed0:	2014      	movs	r0, #20
 8000ed2:	f7ff ff79 	bl	8000dc8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f000 f9e6 	bl	80012a8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000edc:	2000      	movs	r0, #0
 8000ede:	f000 f80f 	bl	8000f00 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000ee2:	f000 f831 	bl	8000f48 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <ssd1306_Init+0xd0>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <ssd1306_Init+0xd0>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000ef2:	4b02      	ldr	r3, [pc, #8]	; (8000efc <ssd1306_Init+0xd0>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	711a      	strb	r2, [r3, #4]
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000c88 	.word	0x20000c88

08000f00 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	e00d      	b.n	8000f2c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <ssd1306_Fill+0x1a>
 8000f16:	2100      	movs	r1, #0
 8000f18:	e000      	b.n	8000f1c <ssd1306_Fill+0x1c>
 8000f1a:	21ff      	movs	r1, #255	; 0xff
 8000f1c:	4a09      	ldr	r2, [pc, #36]	; (8000f44 <ssd1306_Fill+0x44>)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4413      	add	r3, r2
 8000f22:	460a      	mov	r2, r1
 8000f24:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f32:	d3ed      	bcc.n	8000f10 <ssd1306_Fill+0x10>
    }
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000888 	.word	0x20000888

08000f48 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000f4e:	2300      	movs	r3, #0
 8000f50:	71fb      	strb	r3, [r7, #7]
 8000f52:	e016      	b.n	8000f82 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	3b50      	subs	r3, #80	; 0x50
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff ff34 	bl	8000dc8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000f60:	2002      	movs	r0, #2
 8000f62:	f7ff ff31 	bl	8000dc8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000f66:	2010      	movs	r0, #16
 8000f68:	f7ff ff2e 	bl	8000dc8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	01db      	lsls	r3, r3, #7
 8000f70:	4a08      	ldr	r2, [pc, #32]	; (8000f94 <ssd1306_UpdateScreen+0x4c>)
 8000f72:	4413      	add	r3, r2
 8000f74:	2180      	movs	r1, #128	; 0x80
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff3e 	bl	8000df8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	71fb      	strb	r3, [r7, #7]
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2b07      	cmp	r3, #7
 8000f86:	d9e5      	bls.n	8000f54 <ssd1306_UpdateScreen+0xc>
    }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000888 	.word	0x20000888

08000f98 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	71bb      	strb	r3, [r7, #6]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db3d      	blt.n	800102e <ssd1306_DrawPixel+0x96>
 8000fb2:	79bb      	ldrb	r3, [r7, #6]
 8000fb4:	2b3f      	cmp	r3, #63	; 0x3f
 8000fb6:	d83a      	bhi.n	800102e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000fb8:	797b      	ldrb	r3, [r7, #5]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d11a      	bne.n	8000ff4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000fbe:	79fa      	ldrb	r2, [r7, #7]
 8000fc0:	79bb      	ldrb	r3, [r7, #6]
 8000fc2:	08db      	lsrs	r3, r3, #3
 8000fc4:	b2d8      	uxtb	r0, r3
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	01db      	lsls	r3, r3, #7
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a1b      	ldr	r2, [pc, #108]	; (800103c <ssd1306_DrawPixel+0xa4>)
 8000fce:	5cd3      	ldrb	r3, [r2, r3]
 8000fd0:	b25a      	sxtb	r2, r3
 8000fd2:	79bb      	ldrb	r3, [r7, #6]
 8000fd4:	f003 0307 	and.w	r3, r3, #7
 8000fd8:	2101      	movs	r1, #1
 8000fda:	fa01 f303 	lsl.w	r3, r1, r3
 8000fde:	b25b      	sxtb	r3, r3
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	b259      	sxtb	r1, r3
 8000fe4:	79fa      	ldrb	r2, [r7, #7]
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	01db      	lsls	r3, r3, #7
 8000fea:	4413      	add	r3, r2
 8000fec:	b2c9      	uxtb	r1, r1
 8000fee:	4a13      	ldr	r2, [pc, #76]	; (800103c <ssd1306_DrawPixel+0xa4>)
 8000ff0:	54d1      	strb	r1, [r2, r3]
 8000ff2:	e01d      	b.n	8001030 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000ff4:	79fa      	ldrb	r2, [r7, #7]
 8000ff6:	79bb      	ldrb	r3, [r7, #6]
 8000ff8:	08db      	lsrs	r3, r3, #3
 8000ffa:	b2d8      	uxtb	r0, r3
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	01db      	lsls	r3, r3, #7
 8001000:	4413      	add	r3, r2
 8001002:	4a0e      	ldr	r2, [pc, #56]	; (800103c <ssd1306_DrawPixel+0xa4>)
 8001004:	5cd3      	ldrb	r3, [r2, r3]
 8001006:	b25a      	sxtb	r2, r3
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	2101      	movs	r1, #1
 8001010:	fa01 f303 	lsl.w	r3, r1, r3
 8001014:	b25b      	sxtb	r3, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	b25b      	sxtb	r3, r3
 800101a:	4013      	ands	r3, r2
 800101c:	b259      	sxtb	r1, r3
 800101e:	79fa      	ldrb	r2, [r7, #7]
 8001020:	4603      	mov	r3, r0
 8001022:	01db      	lsls	r3, r3, #7
 8001024:	4413      	add	r3, r2
 8001026:	b2c9      	uxtb	r1, r1
 8001028:	4a04      	ldr	r2, [pc, #16]	; (800103c <ssd1306_DrawPixel+0xa4>)
 800102a:	54d1      	strb	r1, [r2, r3]
 800102c:	e000      	b.n	8001030 <ssd1306_DrawPixel+0x98>
        return;
 800102e:	bf00      	nop
    }
}
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000888 	.word	0x20000888

08001040 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	4604      	mov	r4, r0
 8001048:	1d38      	adds	r0, r7, #4
 800104a:	e880 0006 	stmia.w	r0, {r1, r2}
 800104e:	461a      	mov	r2, r3
 8001050:	4623      	mov	r3, r4
 8001052:	73fb      	strb	r3, [r7, #15]
 8001054:	4613      	mov	r3, r2
 8001056:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	2b1f      	cmp	r3, #31
 800105c:	d902      	bls.n	8001064 <ssd1306_WriteChar+0x24>
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	2b7e      	cmp	r3, #126	; 0x7e
 8001062:	d901      	bls.n	8001068 <ssd1306_WriteChar+0x28>
        return 0;
 8001064:	2300      	movs	r3, #0
 8001066:	e06d      	b.n	8001144 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001068:	4b38      	ldr	r3, [pc, #224]	; (800114c <ssd1306_WriteChar+0x10c>)
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	793b      	ldrb	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	2b80      	cmp	r3, #128	; 0x80
 8001074:	dc06      	bgt.n	8001084 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001076:	4b35      	ldr	r3, [pc, #212]	; (800114c <ssd1306_WriteChar+0x10c>)
 8001078:	885b      	ldrh	r3, [r3, #2]
 800107a:	461a      	mov	r2, r3
 800107c:	797b      	ldrb	r3, [r7, #5]
 800107e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001080:	2b40      	cmp	r3, #64	; 0x40
 8001082:	dd01      	ble.n	8001088 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001084:	2300      	movs	r3, #0
 8001086:	e05d      	b.n	8001144 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
 800108c:	e04c      	b.n	8001128 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	3b20      	subs	r3, #32
 8001094:	7979      	ldrb	r1, [r7, #5]
 8001096:	fb01 f303 	mul.w	r3, r1, r3
 800109a:	4619      	mov	r1, r3
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	440b      	add	r3, r1
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80010a8:	2300      	movs	r3, #0
 80010aa:	61bb      	str	r3, [r7, #24]
 80010ac:	e034      	b.n	8001118 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d012      	beq.n	80010e4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80010be:	4b23      	ldr	r3, [pc, #140]	; (800114c <ssd1306_WriteChar+0x10c>)
 80010c0:	881b      	ldrh	r3, [r3, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	4413      	add	r3, r2
 80010ca:	b2d8      	uxtb	r0, r3
 80010cc:	4b1f      	ldr	r3, [pc, #124]	; (800114c <ssd1306_WriteChar+0x10c>)
 80010ce:	885b      	ldrh	r3, [r3, #2]
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	4413      	add	r3, r2
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	7bba      	ldrb	r2, [r7, #14]
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff ff5b 	bl	8000f98 <ssd1306_DrawPixel>
 80010e2:	e016      	b.n	8001112 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <ssd1306_WriteChar+0x10c>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4413      	add	r3, r2
 80010f0:	b2d8      	uxtb	r0, r3
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <ssd1306_WriteChar+0x10c>)
 80010f4:	885b      	ldrh	r3, [r3, #2]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	4413      	add	r3, r2
 80010fe:	b2d9      	uxtb	r1, r3
 8001100:	7bbb      	ldrb	r3, [r7, #14]
 8001102:	2b00      	cmp	r3, #0
 8001104:	bf0c      	ite	eq
 8001106:	2301      	moveq	r3, #1
 8001108:	2300      	movne	r3, #0
 800110a:	b2db      	uxtb	r3, r3
 800110c:	461a      	mov	r2, r3
 800110e:	f7ff ff43 	bl	8000f98 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	3301      	adds	r3, #1
 8001116:	61bb      	str	r3, [r7, #24]
 8001118:	793b      	ldrb	r3, [r7, #4]
 800111a:	461a      	mov	r2, r3
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	4293      	cmp	r3, r2
 8001120:	d3c5      	bcc.n	80010ae <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3301      	adds	r3, #1
 8001126:	61fb      	str	r3, [r7, #28]
 8001128:	797b      	ldrb	r3, [r7, #5]
 800112a:	461a      	mov	r2, r3
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	4293      	cmp	r3, r2
 8001130:	d3ad      	bcc.n	800108e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <ssd1306_WriteChar+0x10c>)
 8001134:	881a      	ldrh	r2, [r3, #0]
 8001136:	793b      	ldrb	r3, [r7, #4]
 8001138:	b29b      	uxth	r3, r3
 800113a:	4413      	add	r3, r2
 800113c:	b29a      	uxth	r2, r3
 800113e:	4b03      	ldr	r3, [pc, #12]	; (800114c <ssd1306_WriteChar+0x10c>)
 8001140:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001142:	7bfb      	ldrb	r3, [r7, #15]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3724      	adds	r7, #36	; 0x24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd90      	pop	{r4, r7, pc}
 800114c:	20000c88 	.word	0x20000c88

08001150 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	1d38      	adds	r0, r7, #4
 800115a:	e880 0006 	stmia.w	r0, {r1, r2}
 800115e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001160:	e012      	b.n	8001188 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	7818      	ldrb	r0, [r3, #0]
 8001166:	78fb      	ldrb	r3, [r7, #3]
 8001168:	1d3a      	adds	r2, r7, #4
 800116a:	ca06      	ldmia	r2, {r1, r2}
 800116c:	f7ff ff68 	bl	8001040 <ssd1306_WriteChar>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	429a      	cmp	r2, r3
 800117a:	d002      	beq.n	8001182 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	e008      	b.n	8001194 <ssd1306_WriteString+0x44>
        }
        str++;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	3301      	adds	r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1e8      	bne.n	8001162 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	781b      	ldrb	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	460a      	mov	r2, r1
 80011a6:	71fb      	strb	r3, [r7, #7]
 80011a8:	4613      	mov	r3, r2
 80011aa:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <ssd1306_SetCursor+0x2c>)
 80011b2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80011b4:	79bb      	ldrb	r3, [r7, #6]
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <ssd1306_SetCursor+0x2c>)
 80011ba:	805a      	strh	r2, [r3, #2]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	20000c88 	.word	0x20000c88

080011cc <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	603a      	str	r2, [r7, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
 80011da:	460b      	mov	r3, r1
 80011dc:	71bb      	strb	r3, [r7, #6]
 80011de:	4613      	mov	r3, r2
 80011e0:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80011e2:	797b      	ldrb	r3, [r7, #5]
 80011e4:	3307      	adds	r3, #7
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	da00      	bge.n	80011ec <ssd1306_DrawBitmap+0x20>
 80011ea:	3307      	adds	r3, #7
 80011ec:	10db      	asrs	r3, r3, #3
 80011ee:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	db3e      	blt.n	800127a <ssd1306_DrawBitmap+0xae>
 80011fc:	79bb      	ldrb	r3, [r7, #6]
 80011fe:	2b3f      	cmp	r3, #63	; 0x3f
 8001200:	d83b      	bhi.n	800127a <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8001202:	2300      	movs	r3, #0
 8001204:	73bb      	strb	r3, [r7, #14]
 8001206:	e033      	b.n	8001270 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8001208:	2300      	movs	r3, #0
 800120a:	737b      	strb	r3, [r7, #13]
 800120c:	e026      	b.n	800125c <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 800120e:	7b7b      	ldrb	r3, [r7, #13]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	73fb      	strb	r3, [r7, #15]
 800121e:	e00d      	b.n	800123c <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001220:	7bbb      	ldrb	r3, [r7, #14]
 8001222:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001226:	fb02 f303 	mul.w	r3, r2, r3
 800122a:	7b7a      	ldrb	r2, [r7, #13]
 800122c:	08d2      	lsrs	r2, r2, #3
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	4413      	add	r3, r2
 8001232:	461a      	mov	r2, r3
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	4413      	add	r3, r2
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 800123c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001240:	2b00      	cmp	r3, #0
 8001242:	da08      	bge.n	8001256 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8001244:	79fa      	ldrb	r2, [r7, #7]
 8001246:	7b7b      	ldrb	r3, [r7, #13]
 8001248:	4413      	add	r3, r2
 800124a:	b2db      	uxtb	r3, r3
 800124c:	7f3a      	ldrb	r2, [r7, #28]
 800124e:	79b9      	ldrb	r1, [r7, #6]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fea1 	bl	8000f98 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8001256:	7b7b      	ldrb	r3, [r7, #13]
 8001258:	3301      	adds	r3, #1
 800125a:	737b      	strb	r3, [r7, #13]
 800125c:	7b7a      	ldrb	r2, [r7, #13]
 800125e:	797b      	ldrb	r3, [r7, #5]
 8001260:	429a      	cmp	r2, r3
 8001262:	d3d4      	bcc.n	800120e <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001264:	7bbb      	ldrb	r3, [r7, #14]
 8001266:	3301      	adds	r3, #1
 8001268:	73bb      	strb	r3, [r7, #14]
 800126a:	79bb      	ldrb	r3, [r7, #6]
 800126c:	3301      	adds	r3, #1
 800126e:	71bb      	strb	r3, [r7, #6]
 8001270:	7bba      	ldrb	r2, [r7, #14]
 8001272:	7e3b      	ldrb	r3, [r7, #24]
 8001274:	429a      	cmp	r2, r3
 8001276:	d3c7      	bcc.n	8001208 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8001278:	e000      	b.n	800127c <ssd1306_DrawBitmap+0xb0>
        return;
 800127a:	bf00      	nop
}
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001282:	b580      	push	{r7, lr}
 8001284:	b084      	sub	sp, #16
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800128c:	2381      	movs	r3, #129	; 0x81
 800128e:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fd98 	bl	8000dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fd94 	bl	8000dc8 <ssd1306_WriteCommand>
}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d005      	beq.n	80012c4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80012b8:	23af      	movs	r3, #175	; 0xaf
 80012ba:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <ssd1306_SetDisplayOn+0x38>)
 80012be:	2201      	movs	r2, #1
 80012c0:	715a      	strb	r2, [r3, #5]
 80012c2:	e004      	b.n	80012ce <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80012c4:	23ae      	movs	r3, #174	; 0xae
 80012c6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <ssd1306_SetDisplayOn+0x38>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fd79 	bl	8000dc8 <ssd1306_WriteCommand>
}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000c88 	.word	0x20000c88

080012e4 <ssd1306_TestFonts1>:
   
    HAL_Delay(1000);
}


void ssd1306_TestFonts1() {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
    uint8_t y = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f7ff fe06 	bl	8000f00 <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	4619      	mov	r1, r3
 80012f8:	2002      	movs	r0, #2
 80012fa:	f7ff ff4f 	bl	800119c <ssd1306_SetCursor>
    ssd1306_WriteString("OHMIO BOX", Font_11x18, White);
 80012fe:	4a1b      	ldr	r2, [pc, #108]	; (800136c <ssd1306_TestFonts1+0x88>)
 8001300:	2301      	movs	r3, #1
 8001302:	ca06      	ldmia	r2, {r1, r2}
 8001304:	481a      	ldr	r0, [pc, #104]	; (8001370 <ssd1306_TestFonts1+0x8c>)
 8001306:	f7ff ff23 	bl	8001150 <ssd1306_WriteString>
    y += 26;
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	331a      	adds	r3, #26
 800130e:	71fb      	strb	r3, [r7, #7]
    #endif



    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	4619      	mov	r1, r3
 8001314:	2002      	movs	r0, #2
 8001316:	f7ff ff41 	bl	800119c <ssd1306_SetCursor>
    ssd1306_WriteString("Web 3.0 for", Font_7x10, White);
 800131a:	4a16      	ldr	r2, [pc, #88]	; (8001374 <ssd1306_TestFonts1+0x90>)
 800131c:	2301      	movs	r3, #1
 800131e:	ca06      	ldmia	r2, {r1, r2}
 8001320:	4815      	ldr	r0, [pc, #84]	; (8001378 <ssd1306_TestFonts1+0x94>)
 8001322:	f7ff ff15 	bl	8001150 <ssd1306_WriteString>
    y += 10;
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	330a      	adds	r3, #10
 800132a:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	4619      	mov	r1, r3
 8001330:	2002      	movs	r0, #2
 8001332:	f7ff ff33 	bl	800119c <ssd1306_SetCursor>
    ssd1306_WriteString("Broadcast Industry", Font_6x8, White);
 8001336:	4a11      	ldr	r2, [pc, #68]	; (800137c <ssd1306_TestFonts1+0x98>)
 8001338:	2301      	movs	r3, #1
 800133a:	ca06      	ldmia	r2, {r1, r2}
 800133c:	4810      	ldr	r0, [pc, #64]	; (8001380 <ssd1306_TestFonts1+0x9c>)
 800133e:	f7ff ff07 	bl	8001150 <ssd1306_WriteString>
    y += 10;
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	330a      	adds	r3, #10
 8001346:	71fb      	strb	r3, [r7, #7]
    #endif

#ifdef SSD1306_INCLUDE_FONT_6x8
   ssd1306_SetCursor(2, y);
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	4619      	mov	r1, r3
 800134c:	2002      	movs	r0, #2
 800134e:	f7ff ff25 	bl	800119c <ssd1306_SetCursor>
   ssd1306_WriteString("Version 1.0", Font_6x8, White);
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <ssd1306_TestFonts1+0x98>)
 8001354:	2301      	movs	r3, #1
 8001356:	ca06      	ldmia	r2, {r1, r2}
 8001358:	480a      	ldr	r0, [pc, #40]	; (8001384 <ssd1306_TestFonts1+0xa0>)
 800135a:	f7ff fef9 	bl	8001150 <ssd1306_WriteString>
   #endif

    ssd1306_UpdateScreen();
 800135e:	f7ff fdf3 	bl	8000f48 <ssd1306_UpdateScreen>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000010 	.word	0x20000010
 8001370:	08014d50 	.word	0x08014d50
 8001374:	20000008 	.word	0x20000008
 8001378:	08014d5c 	.word	0x08014d5c
 800137c:	20000000 	.word	0x20000000
 8001380:	08014d68 	.word	0x08014d68
 8001384:	08014d7c 	.word	0x08014d7c

08001388 <ssd1306_PrintPrincipalMenu>:
void ssd1306_PrintSettingsToolbar(){
	  ssd1306_DrawBitmap(80,0,garfield_128x64,128,64,Black);
	    ssd1306_UpdateScreen();
}

void ssd1306_PrintPrincipalMenu(int value, int indexMenu, int screen){
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af02      	add	r7, sp, #8
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	f107 0318 	add.w	r3, r7, #24
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 80013a6:	2000      	movs	r0, #0
 80013a8:	f7ff fdaa 	bl	8000f00 <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(2, y);
 80013ac:	7ffb      	ldrb	r3, [r7, #31]
 80013ae:	4619      	mov	r1, r3
 80013b0:	2002      	movs	r0, #2
 80013b2:	f7ff fef3 	bl	800119c <ssd1306_SetCursor>
	    ssd1306_WriteString("MENU", Font_11x18, White);
 80013b6:	4a51      	ldr	r2, [pc, #324]	; (80014fc <ssd1306_PrintPrincipalMenu+0x174>)
 80013b8:	2301      	movs	r3, #1
 80013ba:	ca06      	ldmia	r2, {r1, r2}
 80013bc:	4850      	ldr	r0, [pc, #320]	; (8001500 <ssd1306_PrintPrincipalMenu+0x178>)
 80013be:	f7ff fec7 	bl	8001150 <ssd1306_WriteString>
	    //INTERNET
		  ssd1306_DrawBitmap(70,y,icon_rf,15,15,White);
 80013c2:	7ff9      	ldrb	r1, [r7, #31]
 80013c4:	2301      	movs	r3, #1
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	230f      	movs	r3, #15
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	230f      	movs	r3, #15
 80013ce:	4a4d      	ldr	r2, [pc, #308]	; (8001504 <ssd1306_PrintPrincipalMenu+0x17c>)
 80013d0:	2046      	movs	r0, #70	; 0x46
 80013d2:	f7ff fefb 	bl	80011cc <ssd1306_DrawBitmap>

	    //BATERIA
		  ssd1306_DrawBitmap(90,y,icon_cloud,15,15,White);
 80013d6:	7ff9      	ldrb	r1, [r7, #31]
 80013d8:	2301      	movs	r3, #1
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	230f      	movs	r3, #15
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	230f      	movs	r3, #15
 80013e2:	4a49      	ldr	r2, [pc, #292]	; (8001508 <ssd1306_PrintPrincipalMenu+0x180>)
 80013e4:	205a      	movs	r0, #90	; 0x5a
 80013e6:	f7ff fef1 	bl	80011cc <ssd1306_DrawBitmap>

	    //SEÑAL GSM
		  ssd1306_DrawBitmap(110,y,icon_battery_full,15,15,White);
 80013ea:	7ff9      	ldrb	r1, [r7, #31]
 80013ec:	2301      	movs	r3, #1
 80013ee:	9301      	str	r3, [sp, #4]
 80013f0:	230f      	movs	r3, #15
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	230f      	movs	r3, #15
 80013f6:	4a45      	ldr	r2, [pc, #276]	; (800150c <ssd1306_PrintPrincipalMenu+0x184>)
 80013f8:	206e      	movs	r0, #110	; 0x6e
 80013fa:	f7ff fee7 	bl	80011cc <ssd1306_DrawBitmap>



	    y += 20;
 80013fe:	7ffb      	ldrb	r3, [r7, #31]
 8001400:	3314      	adds	r3, #20
 8001402:	77fb      	strb	r3, [r7, #31]
	    #endif

	    #ifdef SSD1306_INCLUDE_FONT_7x10
	    ssd1306_SetCursor(2, y);
 8001404:	7ffb      	ldrb	r3, [r7, #31]
 8001406:	4619      	mov	r1, r3
 8001408:	2002      	movs	r0, #2
 800140a:	f7ff fec7 	bl	800119c <ssd1306_SetCursor>
	    if(indexMenu==0){
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d106      	bne.n	8001422 <ssd1306_PrintPrincipalMenu+0x9a>
	        ssd1306_WriteString("DASHBOARD", Font_7x10, Black);
 8001414:	4a3e      	ldr	r2, [pc, #248]	; (8001510 <ssd1306_PrintPrincipalMenu+0x188>)
 8001416:	2300      	movs	r3, #0
 8001418:	ca06      	ldmia	r2, {r1, r2}
 800141a:	483e      	ldr	r0, [pc, #248]	; (8001514 <ssd1306_PrintPrincipalMenu+0x18c>)
 800141c:	f7ff fe98 	bl	8001150 <ssd1306_WriteString>
 8001420:	e005      	b.n	800142e <ssd1306_PrintPrincipalMenu+0xa6>
	    }else{
	        ssd1306_WriteString("DASHBOARD", Font_7x10, White);
 8001422:	4a3b      	ldr	r2, [pc, #236]	; (8001510 <ssd1306_PrintPrincipalMenu+0x188>)
 8001424:	2301      	movs	r3, #1
 8001426:	ca06      	ldmia	r2, {r1, r2}
 8001428:	483a      	ldr	r0, [pc, #232]	; (8001514 <ssd1306_PrintPrincipalMenu+0x18c>)
 800142a:	f7ff fe91 	bl	8001150 <ssd1306_WriteString>

	    }
	    y += 10;
 800142e:	7ffb      	ldrb	r3, [r7, #31]
 8001430:	330a      	adds	r3, #10
 8001432:	77fb      	strb	r3, [r7, #31]
	    #endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001434:	7ffb      	ldrb	r3, [r7, #31]
 8001436:	4619      	mov	r1, r3
 8001438:	2002      	movs	r0, #2
 800143a:	f7ff feaf 	bl	800119c <ssd1306_SetCursor>
	    if(indexMenu==1){
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d106      	bne.n	8001452 <ssd1306_PrintPrincipalMenu+0xca>
	        ssd1306_WriteString("ENERGY", Font_7x10, Black);
 8001444:	4a32      	ldr	r2, [pc, #200]	; (8001510 <ssd1306_PrintPrincipalMenu+0x188>)
 8001446:	2300      	movs	r3, #0
 8001448:	ca06      	ldmia	r2, {r1, r2}
 800144a:	4833      	ldr	r0, [pc, #204]	; (8001518 <ssd1306_PrintPrincipalMenu+0x190>)
 800144c:	f7ff fe80 	bl	8001150 <ssd1306_WriteString>
 8001450:	e005      	b.n	800145e <ssd1306_PrintPrincipalMenu+0xd6>
	    }
	    else{
	        ssd1306_WriteString("ENERGY", Font_7x10, White);
 8001452:	4a2f      	ldr	r2, [pc, #188]	; (8001510 <ssd1306_PrintPrincipalMenu+0x188>)
 8001454:	2301      	movs	r3, #1
 8001456:	ca06      	ldmia	r2, {r1, r2}
 8001458:	482f      	ldr	r0, [pc, #188]	; (8001518 <ssd1306_PrintPrincipalMenu+0x190>)
 800145a:	f7ff fe79 	bl	8001150 <ssd1306_WriteString>

	    }
		y += 10;
 800145e:	7ffb      	ldrb	r3, [r7, #31]
 8001460:	330a      	adds	r3, #10
 8001462:	77fb      	strb	r3, [r7, #31]

		#endif
		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001464:	7ffb      	ldrb	r3, [r7, #31]
 8001466:	4619      	mov	r1, r3
 8001468:	2002      	movs	r0, #2
 800146a:	f7ff fe97 	bl	800119c <ssd1306_SetCursor>
	    if(indexMenu==2){
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	2b02      	cmp	r3, #2
 8001472:	d106      	bne.n	8001482 <ssd1306_PrintPrincipalMenu+0xfa>
	        ssd1306_WriteString("SETTINGS", Font_7x10, Black);
 8001474:	4a26      	ldr	r2, [pc, #152]	; (8001510 <ssd1306_PrintPrincipalMenu+0x188>)
 8001476:	2300      	movs	r3, #0
 8001478:	ca06      	ldmia	r2, {r1, r2}
 800147a:	4828      	ldr	r0, [pc, #160]	; (800151c <ssd1306_PrintPrincipalMenu+0x194>)
 800147c:	f7ff fe68 	bl	8001150 <ssd1306_WriteString>
 8001480:	e005      	b.n	800148e <ssd1306_PrintPrincipalMenu+0x106>
	    }
	    else{
	        ssd1306_WriteString("SETTINGS", Font_7x10, White);
 8001482:	4a23      	ldr	r2, [pc, #140]	; (8001510 <ssd1306_PrintPrincipalMenu+0x188>)
 8001484:	2301      	movs	r3, #1
 8001486:	ca06      	ldmia	r2, {r1, r2}
 8001488:	4824      	ldr	r0, [pc, #144]	; (800151c <ssd1306_PrintPrincipalMenu+0x194>)
 800148a:	f7ff fe61 	bl	8001150 <ssd1306_WriteString>

	    }
		y += 10;
 800148e:	7ffb      	ldrb	r3, [r7, #31]
 8001490:	330a      	adds	r3, #10
 8001492:	77fb      	strb	r3, [r7, #31]
		#endif




	         if(value >= 2850 && value <= 2950){
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f640 3221 	movw	r2, #2849	; 0xb21
 800149a:	4293      	cmp	r3, r2
 800149c:	dd0c      	ble.n	80014b8 <ssd1306_PrintPrincipalMenu+0x130>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f640 3286 	movw	r2, #2950	; 0xb86
 80014a4:	4293      	cmp	r3, r2
 80014a6:	dc07      	bgt.n	80014b8 <ssd1306_PrintPrincipalMenu+0x130>
	            strcpy(stringDirection, "DERECHA");
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	4a1c      	ldr	r2, [pc, #112]	; (8001520 <ssd1306_PrintPrincipalMenu+0x198>)
 80014ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80014b6:	e01b      	b.n	80014f0 <ssd1306_PrintPrincipalMenu+0x168>
	        }
	        else if(value >= 1850 && value <= 1950){
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f240 7239 	movw	r2, #1849	; 0x739
 80014be:	4293      	cmp	r3, r2
 80014c0:	dd0b      	ble.n	80014da <ssd1306_PrintPrincipalMenu+0x152>
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f240 729e 	movw	r2, #1950	; 0x79e
 80014c8:	4293      	cmp	r3, r2
 80014ca:	dc06      	bgt.n	80014da <ssd1306_PrintPrincipalMenu+0x152>
	            strcpy(stringDirection, "IZQUIERDA");
 80014cc:	4a15      	ldr	r2, [pc, #84]	; (8001524 <ssd1306_PrintPrincipalMenu+0x19c>)
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80014d4:	c303      	stmia	r3!, {r0, r1}
 80014d6:	801a      	strh	r2, [r3, #0]
 80014d8:	e00a      	b.n	80014f0 <ssd1306_PrintPrincipalMenu+0x168>
	        }
	        else {
	            strcpy(stringDirection, "NORMAL");
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4a12      	ldr	r2, [pc, #72]	; (8001528 <ssd1306_PrintPrincipalMenu+0x1a0>)
 80014e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014e4:	6018      	str	r0, [r3, #0]
 80014e6:	3304      	adds	r3, #4
 80014e8:	8019      	strh	r1, [r3, #0]
 80014ea:	3302      	adds	r3, #2
 80014ec:	0c0a      	lsrs	r2, r1, #16
 80014ee:	701a      	strb	r2, [r3, #0]
	         //sprintf(screen_str, "%d", screen); // convert index to a string
	         //ssd1306_SetCursor(20, y); // set the cursor position
	         //ssd1306_WriteString(screen_str, Font_7x10, White); // write the string to the display    y += 10;
	         //   #endif

	    ssd1306_UpdateScreen();
 80014f0:	f7ff fd2a 	bl	8000f48 <ssd1306_UpdateScreen>
}
 80014f4:	bf00      	nop
 80014f6:	3720      	adds	r7, #32
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000010 	.word	0x20000010
 8001500:	08014d88 	.word	0x08014d88
 8001504:	08019714 	.word	0x08019714
 8001508:	080196d4 	.word	0x080196d4
 800150c:	080196f4 	.word	0x080196f4
 8001510:	20000008 	.word	0x20000008
 8001514:	08014d90 	.word	0x08014d90
 8001518:	08014d9c 	.word	0x08014d9c
 800151c:	08014da4 	.word	0x08014da4
 8001520:	08014db0 	.word	0x08014db0
 8001524:	08014db8 	.word	0x08014db8
 8001528:	08014dc4 	.word	0x08014dc4

0800152c <ssd1306_PrintDashboardMenu>:

void ssd1306_PrintDashboardMenu(int value, int indexMenu, int screen){
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	; 0x28
 8001530:	af02      	add	r7, sp, #8
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	f107 0318 	add.w	r3, r7, #24
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 800154a:	2000      	movs	r0, #0
 800154c:	f7ff fcd8 	bl	8000f00 <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(20, y);
 8001550:	7ffb      	ldrb	r3, [r7, #31]
 8001552:	4619      	mov	r1, r3
 8001554:	2014      	movs	r0, #20
 8001556:	f7ff fe21 	bl	800119c <ssd1306_SetCursor>
	    ssd1306_WriteString("OHMIO BOX", Font_11x18, White);
 800155a:	4a73      	ldr	r2, [pc, #460]	; (8001728 <ssd1306_PrintDashboardMenu+0x1fc>)
 800155c:	2301      	movs	r3, #1
 800155e:	ca06      	ldmia	r2, {r1, r2}
 8001560:	4872      	ldr	r0, [pc, #456]	; (800172c <ssd1306_PrintDashboardMenu+0x200>)
 8001562:	f7ff fdf5 	bl	8001150 <ssd1306_WriteString>
	    //ssd1306_DrawRectangle(0,y, 128, 10, White);

	    y += 20;
 8001566:	7ffb      	ldrb	r3, [r7, #31]
 8001568:	3314      	adds	r3, #20
 800156a:	77fb      	strb	r3, [r7, #31]
	    #endif

		ssd1306_SetCursor(2, y);
 800156c:	7ffb      	ldrb	r3, [r7, #31]
 800156e:	4619      	mov	r1, r3
 8001570:	2002      	movs	r0, #2
 8001572:	f7ff fe13 	bl	800119c <ssd1306_SetCursor>
	    if(indexMenu==0){
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d11d      	bne.n	80015b8 <ssd1306_PrintDashboardMenu+0x8c>
			ssd1306_DrawBitmap(2,y,Dashboard_2_BLOCKCHAIN,40,40, White);
 800157c:	7ff9      	ldrb	r1, [r7, #31]
 800157e:	2301      	movs	r3, #1
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	2328      	movs	r3, #40	; 0x28
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2328      	movs	r3, #40	; 0x28
 8001588:	4a69      	ldr	r2, [pc, #420]	; (8001730 <ssd1306_PrintDashboardMenu+0x204>)
 800158a:	2002      	movs	r0, #2
 800158c:	f7ff fe1e 	bl	80011cc <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_1_RF,40,40, White);
 8001590:	7ff9      	ldrb	r1, [r7, #31]
 8001592:	2301      	movs	r3, #1
 8001594:	9301      	str	r3, [sp, #4]
 8001596:	2328      	movs	r3, #40	; 0x28
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2328      	movs	r3, #40	; 0x28
 800159c:	4a65      	ldr	r2, [pc, #404]	; (8001734 <ssd1306_PrintDashboardMenu+0x208>)
 800159e:	202c      	movs	r0, #44	; 0x2c
 80015a0:	f7ff fe14 	bl	80011cc <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_3_CLOUD,40,40, White);
 80015a4:	7ff9      	ldrb	r1, [r7, #31]
 80015a6:	2301      	movs	r3, #1
 80015a8:	9301      	str	r3, [sp, #4]
 80015aa:	2328      	movs	r3, #40	; 0x28
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	2328      	movs	r3, #40	; 0x28
 80015b0:	4a61      	ldr	r2, [pc, #388]	; (8001738 <ssd1306_PrintDashboardMenu+0x20c>)
 80015b2:	2056      	movs	r0, #86	; 0x56
 80015b4:	f7ff fe0a 	bl	80011cc <ssd1306_DrawBitmap>
		}
		if(indexMenu==1){
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d11d      	bne.n	80015fa <ssd1306_PrintDashboardMenu+0xce>
			ssd1306_DrawBitmap(2,y,Dashboard_1_RF,40,40, White);
 80015be:	7ff9      	ldrb	r1, [r7, #31]
 80015c0:	2301      	movs	r3, #1
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	2328      	movs	r3, #40	; 0x28
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2328      	movs	r3, #40	; 0x28
 80015ca:	4a5c      	ldr	r2, [pc, #368]	; (800173c <ssd1306_PrintDashboardMenu+0x210>)
 80015cc:	2002      	movs	r0, #2
 80015ce:	f7ff fdfd 	bl	80011cc <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_3_CLOUD,40,40, White);
 80015d2:	7ff9      	ldrb	r1, [r7, #31]
 80015d4:	2301      	movs	r3, #1
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	2328      	movs	r3, #40	; 0x28
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2328      	movs	r3, #40	; 0x28
 80015de:	4a58      	ldr	r2, [pc, #352]	; (8001740 <ssd1306_PrintDashboardMenu+0x214>)
 80015e0:	202c      	movs	r0, #44	; 0x2c
 80015e2:	f7ff fdf3 	bl	80011cc <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_4_LORA,40,40, White);
 80015e6:	7ff9      	ldrb	r1, [r7, #31]
 80015e8:	2301      	movs	r3, #1
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	2328      	movs	r3, #40	; 0x28
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	2328      	movs	r3, #40	; 0x28
 80015f2:	4a54      	ldr	r2, [pc, #336]	; (8001744 <ssd1306_PrintDashboardMenu+0x218>)
 80015f4:	2056      	movs	r0, #86	; 0x56
 80015f6:	f7ff fde9 	bl	80011cc <ssd1306_DrawBitmap>
		}
		if(indexMenu==2){
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d11d      	bne.n	800163c <ssd1306_PrintDashboardMenu+0x110>
			ssd1306_DrawBitmap(2,y,Dashboard_3_CLOUD,40,40, White);
 8001600:	7ff9      	ldrb	r1, [r7, #31]
 8001602:	2301      	movs	r3, #1
 8001604:	9301      	str	r3, [sp, #4]
 8001606:	2328      	movs	r3, #40	; 0x28
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	2328      	movs	r3, #40	; 0x28
 800160c:	4a4a      	ldr	r2, [pc, #296]	; (8001738 <ssd1306_PrintDashboardMenu+0x20c>)
 800160e:	2002      	movs	r0, #2
 8001610:	f7ff fddc 	bl	80011cc <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_4_LORA,40,40, White);
 8001614:	7ff9      	ldrb	r1, [r7, #31]
 8001616:	2301      	movs	r3, #1
 8001618:	9301      	str	r3, [sp, #4]
 800161a:	2328      	movs	r3, #40	; 0x28
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2328      	movs	r3, #40	; 0x28
 8001620:	4a49      	ldr	r2, [pc, #292]	; (8001748 <ssd1306_PrintDashboardMenu+0x21c>)
 8001622:	202c      	movs	r0, #44	; 0x2c
 8001624:	f7ff fdd2 	bl	80011cc <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_5_BACK,40,40, White);
 8001628:	7ff9      	ldrb	r1, [r7, #31]
 800162a:	2301      	movs	r3, #1
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	2328      	movs	r3, #40	; 0x28
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	2328      	movs	r3, #40	; 0x28
 8001634:	4a45      	ldr	r2, [pc, #276]	; (800174c <ssd1306_PrintDashboardMenu+0x220>)
 8001636:	2056      	movs	r0, #86	; 0x56
 8001638:	f7ff fdc8 	bl	80011cc <ssd1306_DrawBitmap>
		}
		if(indexMenu==3){
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	2b03      	cmp	r3, #3
 8001640:	d11d      	bne.n	800167e <ssd1306_PrintDashboardMenu+0x152>
			ssd1306_DrawBitmap(2,y,Dashboard_3_CLOUD,40,40, White);
 8001642:	7ff9      	ldrb	r1, [r7, #31]
 8001644:	2301      	movs	r3, #1
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	2328      	movs	r3, #40	; 0x28
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	2328      	movs	r3, #40	; 0x28
 800164e:	4a3a      	ldr	r2, [pc, #232]	; (8001738 <ssd1306_PrintDashboardMenu+0x20c>)
 8001650:	2002      	movs	r0, #2
 8001652:	f7ff fdbb 	bl	80011cc <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_5_BACK,40,40, White);
 8001656:	7ff9      	ldrb	r1, [r7, #31]
 8001658:	2301      	movs	r3, #1
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	2328      	movs	r3, #40	; 0x28
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2328      	movs	r3, #40	; 0x28
 8001662:	4a3b      	ldr	r2, [pc, #236]	; (8001750 <ssd1306_PrintDashboardMenu+0x224>)
 8001664:	202c      	movs	r0, #44	; 0x2c
 8001666:	f7ff fdb1 	bl	80011cc <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_2_BLOCKCHAIN,40,40, White);
 800166a:	7ff9      	ldrb	r1, [r7, #31]
 800166c:	2301      	movs	r3, #1
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	2328      	movs	r3, #40	; 0x28
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	2328      	movs	r3, #40	; 0x28
 8001676:	4a2e      	ldr	r2, [pc, #184]	; (8001730 <ssd1306_PrintDashboardMenu+0x204>)
 8001678:	2056      	movs	r0, #86	; 0x56
 800167a:	f7ff fda7 	bl	80011cc <ssd1306_DrawBitmap>
		}
		if(indexMenu==4){
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	2b04      	cmp	r3, #4
 8001682:	d11d      	bne.n	80016c0 <ssd1306_PrintDashboardMenu+0x194>
			ssd1306_DrawBitmap(2,y,Dashboard_5_BACK,40,40, White);
 8001684:	7ff9      	ldrb	r1, [r7, #31]
 8001686:	2301      	movs	r3, #1
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	2328      	movs	r3, #40	; 0x28
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	2328      	movs	r3, #40	; 0x28
 8001690:	4a2e      	ldr	r2, [pc, #184]	; (800174c <ssd1306_PrintDashboardMenu+0x220>)
 8001692:	2002      	movs	r0, #2
 8001694:	f7ff fd9a 	bl	80011cc <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_2_BLOCKCHAIN,40,40, White);
 8001698:	7ff9      	ldrb	r1, [r7, #31]
 800169a:	2301      	movs	r3, #1
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	2328      	movs	r3, #40	; 0x28
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2328      	movs	r3, #40	; 0x28
 80016a4:	4a2b      	ldr	r2, [pc, #172]	; (8001754 <ssd1306_PrintDashboardMenu+0x228>)
 80016a6:	202c      	movs	r0, #44	; 0x2c
 80016a8:	f7ff fd90 	bl	80011cc <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_1_RF,40,40, White);
 80016ac:	7ff9      	ldrb	r1, [r7, #31]
 80016ae:	2301      	movs	r3, #1
 80016b0:	9301      	str	r3, [sp, #4]
 80016b2:	2328      	movs	r3, #40	; 0x28
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	2328      	movs	r3, #40	; 0x28
 80016b8:	4a20      	ldr	r2, [pc, #128]	; (800173c <ssd1306_PrintDashboardMenu+0x210>)
 80016ba:	2056      	movs	r0, #86	; 0x56
 80016bc:	f7ff fd86 	bl	80011cc <ssd1306_DrawBitmap>
		}
		 if(value >= 2850 && value <= 2950){
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f640 3221 	movw	r2, #2849	; 0xb21
 80016c6:	4293      	cmp	r3, r2
 80016c8:	dd0c      	ble.n	80016e4 <ssd1306_PrintDashboardMenu+0x1b8>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f640 3286 	movw	r2, #2950	; 0xb86
 80016d0:	4293      	cmp	r3, r2
 80016d2:	dc07      	bgt.n	80016e4 <ssd1306_PrintDashboardMenu+0x1b8>
			strcpy(stringDirection, "DERECHA");
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4a1f      	ldr	r2, [pc, #124]	; (8001758 <ssd1306_PrintDashboardMenu+0x22c>)
 80016da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016de:	e883 0003 	stmia.w	r3, {r0, r1}
 80016e2:	e01b      	b.n	800171c <ssd1306_PrintDashboardMenu+0x1f0>
		}
		else if(value >= 1850 && value <= 1950){
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f240 7239 	movw	r2, #1849	; 0x739
 80016ea:	4293      	cmp	r3, r2
 80016ec:	dd0b      	ble.n	8001706 <ssd1306_PrintDashboardMenu+0x1da>
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f240 729e 	movw	r2, #1950	; 0x79e
 80016f4:	4293      	cmp	r3, r2
 80016f6:	dc06      	bgt.n	8001706 <ssd1306_PrintDashboardMenu+0x1da>
			strcpy(stringDirection, "IZQUIERDA");
 80016f8:	4a18      	ldr	r2, [pc, #96]	; (800175c <ssd1306_PrintDashboardMenu+0x230>)
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001700:	c303      	stmia	r3!, {r0, r1}
 8001702:	801a      	strh	r2, [r3, #0]
 8001704:	e00a      	b.n	800171c <ssd1306_PrintDashboardMenu+0x1f0>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4a15      	ldr	r2, [pc, #84]	; (8001760 <ssd1306_PrintDashboardMenu+0x234>)
 800170c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001710:	6018      	str	r0, [r3, #0]
 8001712:	3304      	adds	r3, #4
 8001714:	8019      	strh	r1, [r3, #0]
 8001716:	3302      	adds	r3, #2
 8001718:	0c0a      	lsrs	r2, r1, #16
 800171a:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 800171c:	f7ff fc14 	bl	8000f48 <ssd1306_UpdateScreen>
}
 8001720:	bf00      	nop
 8001722:	3720      	adds	r7, #32
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000010 	.word	0x20000010
 800172c:	08014d50 	.word	0x08014d50
 8001730:	080198c4 	.word	0x080198c4
 8001734:	08019be4 	.word	0x08019be4
 8001738:	0801998c 	.word	0x0801998c
 800173c:	080197fc 	.word	0x080197fc
 8001740:	08019d74 	.word	0x08019d74
 8001744:	08019734 	.word	0x08019734
 8001748:	08019b1c 	.word	0x08019b1c
 800174c:	08019a54 	.word	0x08019a54
 8001750:	08019e3c 	.word	0x08019e3c
 8001754:	08019cac 	.word	0x08019cac
 8001758:	08014db0 	.word	0x08014db0
 800175c:	08014db8 	.word	0x08014db8
 8001760:	08014dc4 	.word	0x08014dc4

08001764 <ssd1306_PrintEnergyMenu>:

void ssd1306_PrintEnergyMenu(int value, int indexMenu, int screen){
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	f107 0318 	add.w	r3, r7, #24
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 8001782:	2000      	movs	r0, #0
 8001784:	f7ff fbbc 	bl	8000f00 <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(2, y);
 8001788:	7ffb      	ldrb	r3, [r7, #31]
 800178a:	4619      	mov	r1, r3
 800178c:	2002      	movs	r0, #2
 800178e:	f7ff fd05 	bl	800119c <ssd1306_SetCursor>
	    ssd1306_WriteString("ENERGY", Font_11x18, White);
 8001792:	4a42      	ldr	r2, [pc, #264]	; (800189c <ssd1306_PrintEnergyMenu+0x138>)
 8001794:	2301      	movs	r3, #1
 8001796:	ca06      	ldmia	r2, {r1, r2}
 8001798:	4841      	ldr	r0, [pc, #260]	; (80018a0 <ssd1306_PrintEnergyMenu+0x13c>)
 800179a:	f7ff fcd9 	bl	8001150 <ssd1306_WriteString>
	    //ssd1306_DrawRectangle(0,y, 128, 10, White);

	    y += 20;
 800179e:	7ffb      	ldrb	r3, [r7, #31]
 80017a0:	3314      	adds	r3, #20
 80017a2:	77fb      	strb	r3, [r7, #31]
	    #endif



		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 80017a4:	7ffb      	ldrb	r3, [r7, #31]
 80017a6:	4619      	mov	r1, r3
 80017a8:	2002      	movs	r0, #2
 80017aa:	f7ff fcf7 	bl	800119c <ssd1306_SetCursor>
	    if(indexMenu==0){
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d106      	bne.n	80017c2 <ssd1306_PrintEnergyMenu+0x5e>
	        ssd1306_WriteString("Power Supply", Font_7x10, Black);
 80017b4:	4a3b      	ldr	r2, [pc, #236]	; (80018a4 <ssd1306_PrintEnergyMenu+0x140>)
 80017b6:	2300      	movs	r3, #0
 80017b8:	ca06      	ldmia	r2, {r1, r2}
 80017ba:	483b      	ldr	r0, [pc, #236]	; (80018a8 <ssd1306_PrintEnergyMenu+0x144>)
 80017bc:	f7ff fcc8 	bl	8001150 <ssd1306_WriteString>
 80017c0:	e005      	b.n	80017ce <ssd1306_PrintEnergyMenu+0x6a>
	    }
	    else{
	        ssd1306_WriteString("Power Supply", Font_7x10, White);
 80017c2:	4a38      	ldr	r2, [pc, #224]	; (80018a4 <ssd1306_PrintEnergyMenu+0x140>)
 80017c4:	2301      	movs	r3, #1
 80017c6:	ca06      	ldmia	r2, {r1, r2}
 80017c8:	4837      	ldr	r0, [pc, #220]	; (80018a8 <ssd1306_PrintEnergyMenu+0x144>)
 80017ca:	f7ff fcc1 	bl	8001150 <ssd1306_WriteString>
	    }
		y += 10;
 80017ce:	7ffb      	ldrb	r3, [r7, #31]
 80017d0:	330a      	adds	r3, #10
 80017d2:	77fb      	strb	r3, [r7, #31]
		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 80017d4:	7ffb      	ldrb	r3, [r7, #31]
 80017d6:	4619      	mov	r1, r3
 80017d8:	2002      	movs	r0, #2
 80017da:	f7ff fcdf 	bl	800119c <ssd1306_SetCursor>
		if(indexMenu==1){
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d106      	bne.n	80017f2 <ssd1306_PrintEnergyMenu+0x8e>
	        ssd1306_WriteString("Status: 80%", Font_7x10, Black);
 80017e4:	4a2f      	ldr	r2, [pc, #188]	; (80018a4 <ssd1306_PrintEnergyMenu+0x140>)
 80017e6:	2300      	movs	r3, #0
 80017e8:	ca06      	ldmia	r2, {r1, r2}
 80017ea:	4830      	ldr	r0, [pc, #192]	; (80018ac <ssd1306_PrintEnergyMenu+0x148>)
 80017ec:	f7ff fcb0 	bl	8001150 <ssd1306_WriteString>
 80017f0:	e005      	b.n	80017fe <ssd1306_PrintEnergyMenu+0x9a>
		}
		else{
	        ssd1306_WriteString("Status: 80%", Font_7x10, White);
 80017f2:	4a2c      	ldr	r2, [pc, #176]	; (80018a4 <ssd1306_PrintEnergyMenu+0x140>)
 80017f4:	2301      	movs	r3, #1
 80017f6:	ca06      	ldmia	r2, {r1, r2}
 80017f8:	482c      	ldr	r0, [pc, #176]	; (80018ac <ssd1306_PrintEnergyMenu+0x148>)
 80017fa:	f7ff fca9 	bl	8001150 <ssd1306_WriteString>
		}
		y += 10;
 80017fe:	7ffb      	ldrb	r3, [r7, #31]
 8001800:	330a      	adds	r3, #10
 8001802:	77fb      	strb	r3, [r7, #31]

		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001804:	7ffb      	ldrb	r3, [r7, #31]
 8001806:	4619      	mov	r1, r3
 8001808:	2002      	movs	r0, #2
 800180a:	f7ff fcc7 	bl	800119c <ssd1306_SetCursor>
		if(indexMenu==2){
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d106      	bne.n	8001822 <ssd1306_PrintEnergyMenu+0xbe>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 8001814:	4a23      	ldr	r2, [pc, #140]	; (80018a4 <ssd1306_PrintEnergyMenu+0x140>)
 8001816:	2300      	movs	r3, #0
 8001818:	ca06      	ldmia	r2, {r1, r2}
 800181a:	4825      	ldr	r0, [pc, #148]	; (80018b0 <ssd1306_PrintEnergyMenu+0x14c>)
 800181c:	f7ff fc98 	bl	8001150 <ssd1306_WriteString>
 8001820:	e005      	b.n	800182e <ssd1306_PrintEnergyMenu+0xca>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 8001822:	4a20      	ldr	r2, [pc, #128]	; (80018a4 <ssd1306_PrintEnergyMenu+0x140>)
 8001824:	2301      	movs	r3, #1
 8001826:	ca06      	ldmia	r2, {r1, r2}
 8001828:	4821      	ldr	r0, [pc, #132]	; (80018b0 <ssd1306_PrintEnergyMenu+0x14c>)
 800182a:	f7ff fc91 	bl	8001150 <ssd1306_WriteString>
		}
		y += 10;
 800182e:	7ffb      	ldrb	r3, [r7, #31]
 8001830:	330a      	adds	r3, #10
 8001832:	77fb      	strb	r3, [r7, #31]

		#endif



		 if(value >= 2850 && value <= 2950){
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f640 3221 	movw	r2, #2849	; 0xb21
 800183a:	4293      	cmp	r3, r2
 800183c:	dd0c      	ble.n	8001858 <ssd1306_PrintEnergyMenu+0xf4>
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f640 3286 	movw	r2, #2950	; 0xb86
 8001844:	4293      	cmp	r3, r2
 8001846:	dc07      	bgt.n	8001858 <ssd1306_PrintEnergyMenu+0xf4>
			strcpy(stringDirection, "DERECHA");
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <ssd1306_PrintEnergyMenu+0x150>)
 800184e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001852:	e883 0003 	stmia.w	r3, {r0, r1}
 8001856:	e01b      	b.n	8001890 <ssd1306_PrintEnergyMenu+0x12c>
		}
		else if(value >= 1850 && value <= 1950){
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f240 7239 	movw	r2, #1849	; 0x739
 800185e:	4293      	cmp	r3, r2
 8001860:	dd0b      	ble.n	800187a <ssd1306_PrintEnergyMenu+0x116>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f240 729e 	movw	r2, #1950	; 0x79e
 8001868:	4293      	cmp	r3, r2
 800186a:	dc06      	bgt.n	800187a <ssd1306_PrintEnergyMenu+0x116>
			strcpy(stringDirection, "IZQUIERDA");
 800186c:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <ssd1306_PrintEnergyMenu+0x154>)
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	ca07      	ldmia	r2, {r0, r1, r2}
 8001874:	c303      	stmia	r3!, {r0, r1}
 8001876:	801a      	strh	r2, [r3, #0]
 8001878:	e00a      	b.n	8001890 <ssd1306_PrintEnergyMenu+0x12c>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4a0f      	ldr	r2, [pc, #60]	; (80018bc <ssd1306_PrintEnergyMenu+0x158>)
 8001880:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001884:	6018      	str	r0, [r3, #0]
 8001886:	3304      	adds	r3, #4
 8001888:	8019      	strh	r1, [r3, #0]
 800188a:	3302      	adds	r3, #2
 800188c:	0c0a      	lsrs	r2, r1, #16
 800188e:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8001890:	f7ff fb5a 	bl	8000f48 <ssd1306_UpdateScreen>
}
 8001894:	bf00      	nop
 8001896:	3720      	adds	r7, #32
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000010 	.word	0x20000010
 80018a0:	08014d9c 	.word	0x08014d9c
 80018a4:	20000008 	.word	0x20000008
 80018a8:	08014dcc 	.word	0x08014dcc
 80018ac:	08014ddc 	.word	0x08014ddc
 80018b0:	08014de8 	.word	0x08014de8
 80018b4:	08014db0 	.word	0x08014db0
 80018b8:	08014db8 	.word	0x08014db8
 80018bc:	08014dc4 	.word	0x08014dc4

080018c0 <ssd1306_PrintRFMenu>:

void ssd1306_PrintRFMenu(int value, int indexMenu, int screen){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
		 uint8_t y = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	f107 0318 	add.w	r3, r7, #24
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 80018de:	2000      	movs	r0, #0
 80018e0:	f7ff fb0e 	bl	8000f00 <ssd1306_Fill>

	    ssd1306_SetCursor(35, y);
 80018e4:	7ffb      	ldrb	r3, [r7, #31]
 80018e6:	4619      	mov	r1, r3
 80018e8:	2023      	movs	r0, #35	; 0x23
 80018ea:	f7ff fc57 	bl	800119c <ssd1306_SetCursor>
	    ssd1306_WriteString("BROADCAST", Font_7x10, White);
 80018ee:	4a5a      	ldr	r2, [pc, #360]	; (8001a58 <ssd1306_PrintRFMenu+0x198>)
 80018f0:	2301      	movs	r3, #1
 80018f2:	ca06      	ldmia	r2, {r1, r2}
 80018f4:	4859      	ldr	r0, [pc, #356]	; (8001a5c <ssd1306_PrintRFMenu+0x19c>)
 80018f6:	f7ff fc2b 	bl	8001150 <ssd1306_WriteString>
	    y += 10;
 80018fa:	7ffb      	ldrb	r3, [r7, #31]
 80018fc:	330a      	adds	r3, #10
 80018fe:	77fb      	strb	r3, [r7, #31]


		ssd1306_SetCursor(2, y);
 8001900:	7ffb      	ldrb	r3, [r7, #31]
 8001902:	4619      	mov	r1, r3
 8001904:	2002      	movs	r0, #2
 8001906:	f7ff fc49 	bl	800119c <ssd1306_SetCursor>
			if(indexMenu==0){
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d106      	bne.n	800191e <ssd1306_PrintRFMenu+0x5e>
				ssd1306_WriteString("Channel: 102.9 MHz", Font_7x10, Black);
 8001910:	4a51      	ldr	r2, [pc, #324]	; (8001a58 <ssd1306_PrintRFMenu+0x198>)
 8001912:	2300      	movs	r3, #0
 8001914:	ca06      	ldmia	r2, {r1, r2}
 8001916:	4852      	ldr	r0, [pc, #328]	; (8001a60 <ssd1306_PrintRFMenu+0x1a0>)
 8001918:	f7ff fc1a 	bl	8001150 <ssd1306_WriteString>
 800191c:	e005      	b.n	800192a <ssd1306_PrintRFMenu+0x6a>
			}
			else{
				ssd1306_WriteString("Channel: 102.9 MHz", Font_7x10, White);
 800191e:	4a4e      	ldr	r2, [pc, #312]	; (8001a58 <ssd1306_PrintRFMenu+0x198>)
 8001920:	2301      	movs	r3, #1
 8001922:	ca06      	ldmia	r2, {r1, r2}
 8001924:	484e      	ldr	r0, [pc, #312]	; (8001a60 <ssd1306_PrintRFMenu+0x1a0>)
 8001926:	f7ff fc13 	bl	8001150 <ssd1306_WriteString>
			}
		y += 10;
 800192a:	7ffb      	ldrb	r3, [r7, #31]
 800192c:	330a      	adds	r3, #10
 800192e:	77fb      	strb	r3, [r7, #31]
		

		ssd1306_SetCursor(2, y);
 8001930:	7ffb      	ldrb	r3, [r7, #31]
 8001932:	4619      	mov	r1, r3
 8001934:	2002      	movs	r0, #2
 8001936:	f7ff fc31 	bl	800119c <ssd1306_SetCursor>
		if(indexMenu==1){
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d106      	bne.n	800194e <ssd1306_PrintRFMenu+0x8e>
	        ssd1306_WriteString("Standard: DVB-T2", Font_7x10, Black);
 8001940:	4a45      	ldr	r2, [pc, #276]	; (8001a58 <ssd1306_PrintRFMenu+0x198>)
 8001942:	2300      	movs	r3, #0
 8001944:	ca06      	ldmia	r2, {r1, r2}
 8001946:	4847      	ldr	r0, [pc, #284]	; (8001a64 <ssd1306_PrintRFMenu+0x1a4>)
 8001948:	f7ff fc02 	bl	8001150 <ssd1306_WriteString>
 800194c:	e005      	b.n	800195a <ssd1306_PrintRFMenu+0x9a>
		}
		else{
	        ssd1306_WriteString("Standard: DVB-T2", Font_7x10, White);
 800194e:	4a42      	ldr	r2, [pc, #264]	; (8001a58 <ssd1306_PrintRFMenu+0x198>)
 8001950:	2301      	movs	r3, #1
 8001952:	ca06      	ldmia	r2, {r1, r2}
 8001954:	4843      	ldr	r0, [pc, #268]	; (8001a64 <ssd1306_PrintRFMenu+0x1a4>)
 8001956:	f7ff fbfb 	bl	8001150 <ssd1306_WriteString>
		}
		y += 10;
 800195a:	7ffb      	ldrb	r3, [r7, #31]
 800195c:	330a      	adds	r3, #10
 800195e:	77fb      	strb	r3, [r7, #31]

		ssd1306_SetCursor(2, y);
 8001960:	7ffb      	ldrb	r3, [r7, #31]
 8001962:	4619      	mov	r1, r3
 8001964:	2002      	movs	r0, #2
 8001966:	f7ff fc19 	bl	800119c <ssd1306_SetCursor>
		if(indexMenu==2){
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d106      	bne.n	800197e <ssd1306_PrintRFMenu+0xbe>
	        ssd1306_WriteString("MER: 0.5 dB", Font_7x10, Black);
 8001970:	4a39      	ldr	r2, [pc, #228]	; (8001a58 <ssd1306_PrintRFMenu+0x198>)
 8001972:	2300      	movs	r3, #0
 8001974:	ca06      	ldmia	r2, {r1, r2}
 8001976:	483c      	ldr	r0, [pc, #240]	; (8001a68 <ssd1306_PrintRFMenu+0x1a8>)
 8001978:	f7ff fbea 	bl	8001150 <ssd1306_WriteString>
 800197c:	e005      	b.n	800198a <ssd1306_PrintRFMenu+0xca>
		}
		else{
	        ssd1306_WriteString("MER: 0.5 dB", Font_7x10, White);
 800197e:	4a36      	ldr	r2, [pc, #216]	; (8001a58 <ssd1306_PrintRFMenu+0x198>)
 8001980:	2301      	movs	r3, #1
 8001982:	ca06      	ldmia	r2, {r1, r2}
 8001984:	4838      	ldr	r0, [pc, #224]	; (8001a68 <ssd1306_PrintRFMenu+0x1a8>)
 8001986:	f7ff fbe3 	bl	8001150 <ssd1306_WriteString>
		}
		y += 10;
 800198a:	7ffb      	ldrb	r3, [r7, #31]
 800198c:	330a      	adds	r3, #10
 800198e:	77fb      	strb	r3, [r7, #31]
		

		ssd1306_SetCursor(2, y);
 8001990:	7ffb      	ldrb	r3, [r7, #31]
 8001992:	4619      	mov	r1, r3
 8001994:	2002      	movs	r0, #2
 8001996:	f7ff fc01 	bl	800119c <ssd1306_SetCursor>
		if(indexMenu==3){
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d106      	bne.n	80019ae <ssd1306_PrintRFMenu+0xee>
	        ssd1306_WriteString("BER: 0.5", Font_7x10, Black);
 80019a0:	4a2d      	ldr	r2, [pc, #180]	; (8001a58 <ssd1306_PrintRFMenu+0x198>)
 80019a2:	2300      	movs	r3, #0
 80019a4:	ca06      	ldmia	r2, {r1, r2}
 80019a6:	4831      	ldr	r0, [pc, #196]	; (8001a6c <ssd1306_PrintRFMenu+0x1ac>)
 80019a8:	f7ff fbd2 	bl	8001150 <ssd1306_WriteString>
 80019ac:	e005      	b.n	80019ba <ssd1306_PrintRFMenu+0xfa>
		}
		else{
	        ssd1306_WriteString("BER: 0.5", Font_7x10, White);
 80019ae:	4a2a      	ldr	r2, [pc, #168]	; (8001a58 <ssd1306_PrintRFMenu+0x198>)
 80019b0:	2301      	movs	r3, #1
 80019b2:	ca06      	ldmia	r2, {r1, r2}
 80019b4:	482d      	ldr	r0, [pc, #180]	; (8001a6c <ssd1306_PrintRFMenu+0x1ac>)
 80019b6:	f7ff fbcb 	bl	8001150 <ssd1306_WriteString>
		}
		y += 10;
 80019ba:	7ffb      	ldrb	r3, [r7, #31]
 80019bc:	330a      	adds	r3, #10
 80019be:	77fb      	strb	r3, [r7, #31]

		

		ssd1306_SetCursor(2, y);
 80019c0:	7ffb      	ldrb	r3, [r7, #31]
 80019c2:	4619      	mov	r1, r3
 80019c4:	2002      	movs	r0, #2
 80019c6:	f7ff fbe9 	bl	800119c <ssd1306_SetCursor>
		if(indexMenu==4){
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d106      	bne.n	80019de <ssd1306_PrintRFMenu+0x11e>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 80019d0:	4a21      	ldr	r2, [pc, #132]	; (8001a58 <ssd1306_PrintRFMenu+0x198>)
 80019d2:	2300      	movs	r3, #0
 80019d4:	ca06      	ldmia	r2, {r1, r2}
 80019d6:	4826      	ldr	r0, [pc, #152]	; (8001a70 <ssd1306_PrintRFMenu+0x1b0>)
 80019d8:	f7ff fbba 	bl	8001150 <ssd1306_WriteString>
 80019dc:	e005      	b.n	80019ea <ssd1306_PrintRFMenu+0x12a>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 80019de:	4a1e      	ldr	r2, [pc, #120]	; (8001a58 <ssd1306_PrintRFMenu+0x198>)
 80019e0:	2301      	movs	r3, #1
 80019e2:	ca06      	ldmia	r2, {r1, r2}
 80019e4:	4822      	ldr	r0, [pc, #136]	; (8001a70 <ssd1306_PrintRFMenu+0x1b0>)
 80019e6:	f7ff fbb3 	bl	8001150 <ssd1306_WriteString>
		}
		y += 10;
 80019ea:	7ffb      	ldrb	r3, [r7, #31]
 80019ec:	330a      	adds	r3, #10
 80019ee:	77fb      	strb	r3, [r7, #31]

		



		 if(value >= 2850 && value <= 2950){
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f640 3221 	movw	r2, #2849	; 0xb21
 80019f6:	4293      	cmp	r3, r2
 80019f8:	dd0c      	ble.n	8001a14 <ssd1306_PrintRFMenu+0x154>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f640 3286 	movw	r2, #2950	; 0xb86
 8001a00:	4293      	cmp	r3, r2
 8001a02:	dc07      	bgt.n	8001a14 <ssd1306_PrintRFMenu+0x154>
			strcpy(stringDirection, "DERECHA");
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	4a1a      	ldr	r2, [pc, #104]	; (8001a74 <ssd1306_PrintRFMenu+0x1b4>)
 8001a0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a0e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001a12:	e01b      	b.n	8001a4c <ssd1306_PrintRFMenu+0x18c>
		}
		else if(value >= 1850 && value <= 1950){
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f240 7239 	movw	r2, #1849	; 0x739
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	dd0b      	ble.n	8001a36 <ssd1306_PrintRFMenu+0x176>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f240 729e 	movw	r2, #1950	; 0x79e
 8001a24:	4293      	cmp	r3, r2
 8001a26:	dc06      	bgt.n	8001a36 <ssd1306_PrintRFMenu+0x176>
			strcpy(stringDirection, "IZQUIERDA");
 8001a28:	4a13      	ldr	r2, [pc, #76]	; (8001a78 <ssd1306_PrintRFMenu+0x1b8>)
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a30:	c303      	stmia	r3!, {r0, r1}
 8001a32:	801a      	strh	r2, [r3, #0]
 8001a34:	e00a      	b.n	8001a4c <ssd1306_PrintRFMenu+0x18c>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4a10      	ldr	r2, [pc, #64]	; (8001a7c <ssd1306_PrintRFMenu+0x1bc>)
 8001a3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a40:	6018      	str	r0, [r3, #0]
 8001a42:	3304      	adds	r3, #4
 8001a44:	8019      	strh	r1, [r3, #0]
 8001a46:	3302      	adds	r3, #2
 8001a48:	0c0a      	lsrs	r2, r1, #16
 8001a4a:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8001a4c:	f7ff fa7c 	bl	8000f48 <ssd1306_UpdateScreen>
}
 8001a50:	bf00      	nop
 8001a52:	3720      	adds	r7, #32
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000008 	.word	0x20000008
 8001a5c:	08014df0 	.word	0x08014df0
 8001a60:	08014dfc 	.word	0x08014dfc
 8001a64:	08014e10 	.word	0x08014e10
 8001a68:	08014e24 	.word	0x08014e24
 8001a6c:	08014e30 	.word	0x08014e30
 8001a70:	08014de8 	.word	0x08014de8
 8001a74:	08014db0 	.word	0x08014db0
 8001a78:	08014db8 	.word	0x08014db8
 8001a7c:	08014dc4 	.word	0x08014dc4

08001a80 <ssd1306_PrintSettingsMenu>:

void ssd1306_PrintSettingsMenu(int value, int indexMenu, int screen){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	f107 0318 	add.w	r3, r7, #24
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f7ff fa2e 	bl	8000f00 <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(2, y);
 8001aa4:	7ffb      	ldrb	r3, [r7, #31]
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	2002      	movs	r0, #2
 8001aaa:	f7ff fb77 	bl	800119c <ssd1306_SetCursor>
	    ssd1306_WriteString("SETTINGS", Font_11x18, White);
 8001aae:	4a42      	ldr	r2, [pc, #264]	; (8001bb8 <ssd1306_PrintSettingsMenu+0x138>)
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	ca06      	ldmia	r2, {r1, r2}
 8001ab4:	4841      	ldr	r0, [pc, #260]	; (8001bbc <ssd1306_PrintSettingsMenu+0x13c>)
 8001ab6:	f7ff fb4b 	bl	8001150 <ssd1306_WriteString>
	    //ssd1306_DrawRectangle(0,y, 128, 10, White);

	    y += 20;
 8001aba:	7ffb      	ldrb	r3, [r7, #31]
 8001abc:	3314      	adds	r3, #20
 8001abe:	77fb      	strb	r3, [r7, #31]
	    #endif



		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001ac0:	7ffb      	ldrb	r3, [r7, #31]
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	2002      	movs	r0, #2
 8001ac6:	f7ff fb69 	bl	800119c <ssd1306_SetCursor>
	    if(indexMenu==0){
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d106      	bne.n	8001ade <ssd1306_PrintSettingsMenu+0x5e>
	        ssd1306_WriteString("ID: a23d-4f5g6", Font_7x10, Black);
 8001ad0:	4a3b      	ldr	r2, [pc, #236]	; (8001bc0 <ssd1306_PrintSettingsMenu+0x140>)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	ca06      	ldmia	r2, {r1, r2}
 8001ad6:	483b      	ldr	r0, [pc, #236]	; (8001bc4 <ssd1306_PrintSettingsMenu+0x144>)
 8001ad8:	f7ff fb3a 	bl	8001150 <ssd1306_WriteString>
 8001adc:	e005      	b.n	8001aea <ssd1306_PrintSettingsMenu+0x6a>
	    }
	    else{
	        ssd1306_WriteString("ID: a23d-4f5g6", Font_7x10, White);
 8001ade:	4a38      	ldr	r2, [pc, #224]	; (8001bc0 <ssd1306_PrintSettingsMenu+0x140>)
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	ca06      	ldmia	r2, {r1, r2}
 8001ae4:	4837      	ldr	r0, [pc, #220]	; (8001bc4 <ssd1306_PrintSettingsMenu+0x144>)
 8001ae6:	f7ff fb33 	bl	8001150 <ssd1306_WriteString>
	    }
		y += 10;
 8001aea:	7ffb      	ldrb	r3, [r7, #31]
 8001aec:	330a      	adds	r3, #10
 8001aee:	77fb      	strb	r3, [r7, #31]
		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001af0:	7ffb      	ldrb	r3, [r7, #31]
 8001af2:	4619      	mov	r1, r3
 8001af4:	2002      	movs	r0, #2
 8001af6:	f7ff fb51 	bl	800119c <ssd1306_SetCursor>
		if(indexMenu==1){
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d106      	bne.n	8001b0e <ssd1306_PrintSettingsMenu+0x8e>
	        ssd1306_WriteString("OHMIO Box v1.0", Font_7x10, Black);
 8001b00:	4a2f      	ldr	r2, [pc, #188]	; (8001bc0 <ssd1306_PrintSettingsMenu+0x140>)
 8001b02:	2300      	movs	r3, #0
 8001b04:	ca06      	ldmia	r2, {r1, r2}
 8001b06:	4830      	ldr	r0, [pc, #192]	; (8001bc8 <ssd1306_PrintSettingsMenu+0x148>)
 8001b08:	f7ff fb22 	bl	8001150 <ssd1306_WriteString>
 8001b0c:	e005      	b.n	8001b1a <ssd1306_PrintSettingsMenu+0x9a>
		}
		else{
	        ssd1306_WriteString("OHMIO Box v1.0", Font_7x10, White);
 8001b0e:	4a2c      	ldr	r2, [pc, #176]	; (8001bc0 <ssd1306_PrintSettingsMenu+0x140>)
 8001b10:	2301      	movs	r3, #1
 8001b12:	ca06      	ldmia	r2, {r1, r2}
 8001b14:	482c      	ldr	r0, [pc, #176]	; (8001bc8 <ssd1306_PrintSettingsMenu+0x148>)
 8001b16:	f7ff fb1b 	bl	8001150 <ssd1306_WriteString>
		}
		y += 10;
 8001b1a:	7ffb      	ldrb	r3, [r7, #31]
 8001b1c:	330a      	adds	r3, #10
 8001b1e:	77fb      	strb	r3, [r7, #31]

		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001b20:	7ffb      	ldrb	r3, [r7, #31]
 8001b22:	4619      	mov	r1, r3
 8001b24:	2002      	movs	r0, #2
 8001b26:	f7ff fb39 	bl	800119c <ssd1306_SetCursor>
		if(indexMenu==2){
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d106      	bne.n	8001b3e <ssd1306_PrintSettingsMenu+0xbe>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 8001b30:	4a23      	ldr	r2, [pc, #140]	; (8001bc0 <ssd1306_PrintSettingsMenu+0x140>)
 8001b32:	2300      	movs	r3, #0
 8001b34:	ca06      	ldmia	r2, {r1, r2}
 8001b36:	4825      	ldr	r0, [pc, #148]	; (8001bcc <ssd1306_PrintSettingsMenu+0x14c>)
 8001b38:	f7ff fb0a 	bl	8001150 <ssd1306_WriteString>
 8001b3c:	e005      	b.n	8001b4a <ssd1306_PrintSettingsMenu+0xca>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 8001b3e:	4a20      	ldr	r2, [pc, #128]	; (8001bc0 <ssd1306_PrintSettingsMenu+0x140>)
 8001b40:	2301      	movs	r3, #1
 8001b42:	ca06      	ldmia	r2, {r1, r2}
 8001b44:	4821      	ldr	r0, [pc, #132]	; (8001bcc <ssd1306_PrintSettingsMenu+0x14c>)
 8001b46:	f7ff fb03 	bl	8001150 <ssd1306_WriteString>
		}
		y += 10;
 8001b4a:	7ffb      	ldrb	r3, [r7, #31]
 8001b4c:	330a      	adds	r3, #10
 8001b4e:	77fb      	strb	r3, [r7, #31]

		#endif



		 if(value >= 2850 && value <= 2950){
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f640 3221 	movw	r2, #2849	; 0xb21
 8001b56:	4293      	cmp	r3, r2
 8001b58:	dd0c      	ble.n	8001b74 <ssd1306_PrintSettingsMenu+0xf4>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f640 3286 	movw	r2, #2950	; 0xb86
 8001b60:	4293      	cmp	r3, r2
 8001b62:	dc07      	bgt.n	8001b74 <ssd1306_PrintSettingsMenu+0xf4>
			strcpy(stringDirection, "DERECHA");
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4a19      	ldr	r2, [pc, #100]	; (8001bd0 <ssd1306_PrintSettingsMenu+0x150>)
 8001b6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b6e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001b72:	e01b      	b.n	8001bac <ssd1306_PrintSettingsMenu+0x12c>
		}
		else if(value >= 1850 && value <= 1950){
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f240 7239 	movw	r2, #1849	; 0x739
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	dd0b      	ble.n	8001b96 <ssd1306_PrintSettingsMenu+0x116>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f240 729e 	movw	r2, #1950	; 0x79e
 8001b84:	4293      	cmp	r3, r2
 8001b86:	dc06      	bgt.n	8001b96 <ssd1306_PrintSettingsMenu+0x116>
			strcpy(stringDirection, "IZQUIERDA");
 8001b88:	4a12      	ldr	r2, [pc, #72]	; (8001bd4 <ssd1306_PrintSettingsMenu+0x154>)
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b90:	c303      	stmia	r3!, {r0, r1}
 8001b92:	801a      	strh	r2, [r3, #0]
 8001b94:	e00a      	b.n	8001bac <ssd1306_PrintSettingsMenu+0x12c>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4a0f      	ldr	r2, [pc, #60]	; (8001bd8 <ssd1306_PrintSettingsMenu+0x158>)
 8001b9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ba0:	6018      	str	r0, [r3, #0]
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	8019      	strh	r1, [r3, #0]
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	0c0a      	lsrs	r2, r1, #16
 8001baa:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8001bac:	f7ff f9cc 	bl	8000f48 <ssd1306_UpdateScreen>
}
 8001bb0:	bf00      	nop
 8001bb2:	3720      	adds	r7, #32
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000010 	.word	0x20000010
 8001bbc:	08014da4 	.word	0x08014da4
 8001bc0:	20000008 	.word	0x20000008
 8001bc4:	08014e3c 	.word	0x08014e3c
 8001bc8:	08014e4c 	.word	0x08014e4c
 8001bcc:	08014de8 	.word	0x08014de8
 8001bd0:	08014db0 	.word	0x08014db0
 8001bd4:	08014db8 	.word	0x08014db8
 8001bd8:	08014dc4 	.word	0x08014dc4

08001bdc <ssd1306_DisplayAnalogValue>:

void ssd1306_DisplayAnalogValue(int value, int indexMenu, int screen) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
	if (screen==1){
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d105      	bne.n	8001bfa <ssd1306_DisplayAnalogValue+0x1e>
			   ssd1306_PrintDashboardMenu(value, indexMenu, screen);
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f7ff fc9a 	bl	800152c <ssd1306_PrintDashboardMenu>
 8001bf8:	e01f      	b.n	8001c3a <ssd1306_DisplayAnalogValue+0x5e>
		}
	else if (screen==2){
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d105      	bne.n	8001c0c <ssd1306_DisplayAnalogValue+0x30>
		   ssd1306_PrintEnergyMenu(value, indexMenu, screen);
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	68b9      	ldr	r1, [r7, #8]
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f7ff fdad 	bl	8001764 <ssd1306_PrintEnergyMenu>
 8001c0a:	e016      	b.n	8001c3a <ssd1306_DisplayAnalogValue+0x5e>
	}
	else if (screen==3){
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d105      	bne.n	8001c1e <ssd1306_DisplayAnalogValue+0x42>
		   ssd1306_PrintSettingsMenu(value, indexMenu, screen);
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f7ff ff32 	bl	8001a80 <ssd1306_PrintSettingsMenu>
 8001c1c:	e00d      	b.n	8001c3a <ssd1306_DisplayAnalogValue+0x5e>
	}else if (screen==4){
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d105      	bne.n	8001c30 <ssd1306_DisplayAnalogValue+0x54>
		   ssd1306_PrintRFMenu(value, indexMenu, screen);
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	68b9      	ldr	r1, [r7, #8]
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f7ff fe49 	bl	80018c0 <ssd1306_PrintRFMenu>
 8001c2e:	e004      	b.n	8001c3a <ssd1306_DisplayAnalogValue+0x5e>
	}
	else{
		   ssd1306_PrintPrincipalMenu(value, indexMenu, screen);
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	68b9      	ldr	r1, [r7, #8]
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f7ff fba7 	bl	8001388 <ssd1306_PrintPrincipalMenu>
	}
    HAL_Delay(50);
 8001c3a:	2032      	movs	r0, #50	; 0x32
 8001c3c:	f000 fd02 	bl	8002644 <HAL_Delay>
}
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <ssd1306_TestDrawBitmapOHMIO>:
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
    ssd1306_UpdateScreen();
}

void ssd1306_TestDrawBitmapOHMIO()
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f7ff f956 	bl	8000f00 <ssd1306_Fill>
	    ssd1306_DrawBitmap(32,0,ohmio_logo_fondoblanco,72,64,White);
 8001c54:	2301      	movs	r3, #1
 8001c56:	9301      	str	r3, [sp, #4]
 8001c58:	2340      	movs	r3, #64	; 0x40
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	2348      	movs	r3, #72	; 0x48
 8001c5e:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <ssd1306_TestDrawBitmapOHMIO+0x34>)
 8001c60:	2100      	movs	r1, #0
 8001c62:	2020      	movs	r0, #32
 8001c64:	f7ff fab2 	bl	80011cc <ssd1306_DrawBitmap>
	    ssd1306_UpdateScreen();
 8001c68:	f7ff f96e 	bl	8000f48 <ssd1306_UpdateScreen>
    HAL_Delay(1000);
 8001c6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c70:	f000 fce8 	bl	8002644 <HAL_Delay>

}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	08019f04 	.word	0x08019f04

08001c80 <ssd1306_OhmioSplash>:



void ssd1306_OhmioSplash() {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8001c84:	f7ff f8d2 	bl	8000e2c <ssd1306_Init>
    ssd1306_TestFonts1();
 8001c88:	f7ff fb2c 	bl	80012e4 <ssd1306_TestFonts1>
    HAL_Delay(3000);
 8001c8c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001c90:	f000 fcd8 	bl	8002644 <HAL_Delay>
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <ssd1306_OhmioMenuPrincipal>:

void ssd1306_OhmioMenuPrincipal() {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8001c9c:	f7ff f8c6 	bl	8000e2c <ssd1306_Init>
    ssd1306_TestDrawBitmapOHMIO();
 8001ca0:	f7ff ffd2 	bl	8001c48 <ssd1306_TestDrawBitmapOHMIO>
    HAL_Delay(3000);
 8001ca4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001ca8:	f000 fccc 	bl	8002644 <HAL_Delay>
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	4a0e      	ldr	r2, [pc, #56]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	4a08      	ldr	r2, [pc, #32]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800

08001cf8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08c      	sub	sp, #48	; 0x30
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 031c 	add.w	r3, r7, #28
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a2a      	ldr	r2, [pc, #168]	; (8001dc0 <HAL_ADC_MspInit+0xc8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d124      	bne.n	8001d64 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d1a:	4b2a      	ldr	r3, [pc, #168]	; (8001dc4 <HAL_ADC_MspInit+0xcc>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	4a29      	ldr	r2, [pc, #164]	; (8001dc4 <HAL_ADC_MspInit+0xcc>)
 8001d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d24:	6453      	str	r3, [r2, #68]	; 0x44
 8001d26:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <HAL_ADC_MspInit+0xcc>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	61bb      	str	r3, [r7, #24]
 8001d30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d32:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <HAL_ADC_MspInit+0xcc>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a23      	ldr	r2, [pc, #140]	; (8001dc4 <HAL_ADC_MspInit+0xcc>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <HAL_ADC_MspInit+0xcc>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d4a:	2310      	movs	r3, #16
 8001d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	f107 031c 	add.w	r3, r7, #28
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	481a      	ldr	r0, [pc, #104]	; (8001dc8 <HAL_ADC_MspInit+0xd0>)
 8001d5e:	f002 fbf3 	bl	8004548 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001d62:	e028      	b.n	8001db6 <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC3)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a18      	ldr	r2, [pc, #96]	; (8001dcc <HAL_ADC_MspInit+0xd4>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d123      	bne.n	8001db6 <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <HAL_ADC_MspInit+0xcc>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	4a14      	ldr	r2, [pc, #80]	; (8001dc4 <HAL_ADC_MspInit+0xcc>)
 8001d74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d78:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_ADC_MspInit+0xcc>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d86:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <HAL_ADC_MspInit+0xcc>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <HAL_ADC_MspInit+0xcc>)
 8001d8c:	f043 0320 	orr.w	r3, r3, #32
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <HAL_ADC_MspInit+0xcc>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0320 	and.w	r3, r3, #32
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d9e:	2320      	movs	r3, #32
 8001da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001da2:	2303      	movs	r3, #3
 8001da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001daa:	f107 031c 	add.w	r3, r7, #28
 8001dae:	4619      	mov	r1, r3
 8001db0:	4807      	ldr	r0, [pc, #28]	; (8001dd0 <HAL_ADC_MspInit+0xd8>)
 8001db2:	f002 fbc9 	bl	8004548 <HAL_GPIO_Init>
}
 8001db6:	bf00      	nop
 8001db8:	3730      	adds	r7, #48	; 0x30
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40012000 	.word	0x40012000
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	40012200 	.word	0x40012200
 8001dd0:	40021400 	.word	0x40021400

08001dd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b0aa      	sub	sp, #168	; 0xa8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dec:	f107 0310 	add.w	r3, r7, #16
 8001df0:	2284      	movs	r2, #132	; 0x84
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f011 ff2b 	bl	8013c50 <memset>
  if(hi2c->Instance==I2C2)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a21      	ldr	r2, [pc, #132]	; (8001e84 <HAL_I2C_MspInit+0xb0>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d13b      	bne.n	8001e7c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e08:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e0e:	f107 0310 	add.w	r3, r7, #16
 8001e12:	4618      	mov	r0, r3
 8001e14:	f004 f802 	bl	8005e1c <HAL_RCCEx_PeriphCLKConfig>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e1e:	f7fe ffc6 	bl	8000dae <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e22:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <HAL_I2C_MspInit+0xb4>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a18      	ldr	r2, [pc, #96]	; (8001e88 <HAL_I2C_MspInit+0xb4>)
 8001e28:	f043 0320 	orr.w	r3, r3, #32
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <HAL_I2C_MspInit+0xb4>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0320 	and.w	r3, r3, #32
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e40:	2312      	movs	r3, #18
 8001e42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e52:	2304      	movs	r3, #4
 8001e54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e58:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	480b      	ldr	r0, [pc, #44]	; (8001e8c <HAL_I2C_MspInit+0xb8>)
 8001e60:	f002 fb72 	bl	8004548 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <HAL_I2C_MspInit+0xb4>)
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	4a07      	ldr	r2, [pc, #28]	; (8001e88 <HAL_I2C_MspInit+0xb4>)
 8001e6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <HAL_I2C_MspInit+0xb4>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e7c:	bf00      	nop
 8001e7e:	37a8      	adds	r7, #168	; 0xa8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40005800 	.word	0x40005800
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40021400 	.word	0x40021400

08001e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b0aa      	sub	sp, #168	; 0xa8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ea8:	f107 0310 	add.w	r3, r7, #16
 8001eac:	2284      	movs	r2, #132	; 0x84
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f011 fecd 	bl	8013c50 <memset>
  if(huart->Instance==USART3)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a22      	ldr	r2, [pc, #136]	; (8001f44 <HAL_UART_MspInit+0xb4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d13c      	bne.n	8001f3a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ec4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eca:	f107 0310 	add.w	r3, r7, #16
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f003 ffa4 	bl	8005e1c <HAL_RCCEx_PeriphCLKConfig>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001eda:	f7fe ff68 	bl	8000dae <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ede:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <HAL_UART_MspInit+0xb8>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a19      	ldr	r2, [pc, #100]	; (8001f48 <HAL_UART_MspInit+0xb8>)
 8001ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eea:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <HAL_UART_MspInit+0xb8>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <HAL_UART_MspInit+0xb8>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	4a13      	ldr	r2, [pc, #76]	; (8001f48 <HAL_UART_MspInit+0xb8>)
 8001efc:	f043 0308 	orr.w	r3, r3, #8
 8001f00:	6313      	str	r3, [r2, #48]	; 0x30
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <HAL_UART_MspInit+0xb8>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f22:	2303      	movs	r3, #3
 8001f24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f28:	2307      	movs	r3, #7
 8001f2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f2e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f32:	4619      	mov	r1, r3
 8001f34:	4805      	ldr	r0, [pc, #20]	; (8001f4c <HAL_UART_MspInit+0xbc>)
 8001f36:	f002 fb07 	bl	8004548 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f3a:	bf00      	nop
 8001f3c:	37a8      	adds	r7, #168	; 0xa8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40004800 	.word	0x40004800
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40020c00 	.word	0x40020c00

08001f50 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b0ac      	sub	sp, #176	; 0xb0
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f68:	f107 0318 	add.w	r3, r7, #24
 8001f6c:	2284      	movs	r2, #132	; 0x84
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4618      	mov	r0, r3
 8001f72:	f011 fe6d 	bl	8013c50 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f7e:	d159      	bne.n	8002034 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001f80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f84:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f8c:	f107 0318 	add.w	r3, r7, #24
 8001f90:	4618      	mov	r0, r3
 8001f92:	f003 ff43 	bl	8005e1c <HAL_RCCEx_PeriphCLKConfig>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001f9c:	f7fe ff07 	bl	8000dae <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa0:	4b26      	ldr	r3, [pc, #152]	; (800203c <HAL_PCD_MspInit+0xec>)
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	4a25      	ldr	r2, [pc, #148]	; (800203c <HAL_PCD_MspInit+0xec>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6313      	str	r3, [r2, #48]	; 0x30
 8001fac:	4b23      	ldr	r3, [pc, #140]	; (800203c <HAL_PCD_MspInit+0xec>)
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001fb8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001fbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001fd2:	230a      	movs	r3, #10
 8001fd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4818      	ldr	r0, [pc, #96]	; (8002040 <HAL_PCD_MspInit+0xf0>)
 8001fe0:	f002 fab2 	bl	8004548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fe8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ff8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4810      	ldr	r0, [pc, #64]	; (8002040 <HAL_PCD_MspInit+0xf0>)
 8002000:	f002 faa2 	bl	8004548 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002004:	4b0d      	ldr	r3, [pc, #52]	; (800203c <HAL_PCD_MspInit+0xec>)
 8002006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002008:	4a0c      	ldr	r2, [pc, #48]	; (800203c <HAL_PCD_MspInit+0xec>)
 800200a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800200e:	6353      	str	r3, [r2, #52]	; 0x34
 8002010:	4b0a      	ldr	r3, [pc, #40]	; (800203c <HAL_PCD_MspInit+0xec>)
 8002012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4b07      	ldr	r3, [pc, #28]	; (800203c <HAL_PCD_MspInit+0xec>)
 800201e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002020:	4a06      	ldr	r2, [pc, #24]	; (800203c <HAL_PCD_MspInit+0xec>)
 8002022:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002026:	6453      	str	r3, [r2, #68]	; 0x44
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <HAL_PCD_MspInit+0xec>)
 800202a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002034:	bf00      	nop
 8002036:	37b0      	adds	r7, #176	; 0xb0
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40023800 	.word	0x40023800
 8002040:	40020000 	.word	0x40020000

08002044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <NMI_Handler+0x4>

0800204a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <HardFault_Handler+0x4>

08002050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <MemManage_Handler+0x4>

08002056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205a:	e7fe      	b.n	800205a <BusFault_Handler+0x4>

0800205c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002060:	e7fe      	b.n	8002060 <UsageFault_Handler+0x4>

08002062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002090:	f000 fab8 	bl	8002604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}

08002098 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800209c:	4802      	ldr	r0, [pc, #8]	; (80020a8 <ETH_IRQHandler+0x10>)
 800209e:	f001 fb6d 	bl	800377c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20005668 	.word	0x20005668

080020ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return 1;
 80020b0:	2301      	movs	r3, #1
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <_kill>:

int _kill(int pid, int sig)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020c6:	4b05      	ldr	r3, [pc, #20]	; (80020dc <_kill+0x20>)
 80020c8:	2216      	movs	r2, #22
 80020ca:	601a      	str	r2, [r3, #0]
  return -1;
 80020cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	2000b060 	.word	0x2000b060

080020e0 <_exit>:

void _exit (int status)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020e8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ffe5 	bl	80020bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80020f2:	e7fe      	b.n	80020f2 <_exit+0x12>

080020f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	e00a      	b.n	800211c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002106:	f3af 8000 	nop.w
 800210a:	4601      	mov	r1, r0
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	60ba      	str	r2, [r7, #8]
 8002112:	b2ca      	uxtb	r2, r1
 8002114:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	3301      	adds	r3, #1
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	429a      	cmp	r2, r3
 8002122:	dbf0      	blt.n	8002106 <_read+0x12>
  }

  return len;
 8002124:	687b      	ldr	r3, [r7, #4]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	e009      	b.n	8002154 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	1c5a      	adds	r2, r3, #1
 8002144:	60ba      	str	r2, [r7, #8]
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	3301      	adds	r3, #1
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	429a      	cmp	r2, r3
 800215a:	dbf1      	blt.n	8002140 <_write+0x12>
  }
  return len;
 800215c:	687b      	ldr	r3, [r7, #4]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <_close>:

int _close(int file)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800216e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800218e:	605a      	str	r2, [r3, #4]
  return 0;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <_isatty>:

int _isatty(int file)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021a6:	2301      	movs	r3, #1
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b087      	sub	sp, #28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d8:	4a14      	ldr	r2, [pc, #80]	; (800222c <_sbrk+0x5c>)
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <_sbrk+0x60>)
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <_sbrk+0x64>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d102      	bne.n	80021f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <_sbrk+0x64>)
 80021ee:	4a12      	ldr	r2, [pc, #72]	; (8002238 <_sbrk+0x68>)
 80021f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <_sbrk+0x64>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d205      	bcs.n	800220c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002200:	4b0e      	ldr	r3, [pc, #56]	; (800223c <_sbrk+0x6c>)
 8002202:	220c      	movs	r2, #12
 8002204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002206:	f04f 33ff 	mov.w	r3, #4294967295
 800220a:	e009      	b.n	8002220 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800220c:	4b09      	ldr	r3, [pc, #36]	; (8002234 <_sbrk+0x64>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002212:	4b08      	ldr	r3, [pc, #32]	; (8002234 <_sbrk+0x64>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	4a06      	ldr	r2, [pc, #24]	; (8002234 <_sbrk+0x64>)
 800221c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800221e:	68fb      	ldr	r3, [r7, #12]
}
 8002220:	4618      	mov	r0, r3
 8002222:	371c      	adds	r7, #28
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	20050000 	.word	0x20050000
 8002230:	00000400 	.word	0x00000400
 8002234:	20000c90 	.word	0x20000c90
 8002238:	2000b070 	.word	0x2000b070
 800223c:	2000b060 	.word	0x2000b060

08002240 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <SystemInit+0x20>)
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224a:	4a05      	ldr	r2, [pc, #20]	; (8002260 <SystemInit+0x20>)
 800224c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002250:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800229c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002268:	480d      	ldr	r0, [pc, #52]	; (80022a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800226a:	490e      	ldr	r1, [pc, #56]	; (80022a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800226c:	4a0e      	ldr	r2, [pc, #56]	; (80022a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800226e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002270:	e002      	b.n	8002278 <LoopCopyDataInit>

08002272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002276:	3304      	adds	r3, #4

08002278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800227a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800227c:	d3f9      	bcc.n	8002272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800227e:	4a0b      	ldr	r2, [pc, #44]	; (80022ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002280:	4c0b      	ldr	r4, [pc, #44]	; (80022b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002284:	e001      	b.n	800228a <LoopFillZerobss>

08002286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002288:	3204      	adds	r2, #4

0800228a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800228a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800228c:	d3fb      	bcc.n	8002286 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800228e:	f7ff ffd7 	bl	8002240 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002292:	f011 fc9b 	bl	8013bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002296:	f7fe f9f7 	bl	8000688 <main>
  bx  lr    
 800229a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800229c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80022a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022a4:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 80022a8:	0801a3b8 	.word	0x0801a3b8
  ldr r2, =_sbss
 80022ac:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80022b0:	2000b070 	.word	0x2000b070

080022b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022b4:	e7fe      	b.n	80022b4 <ADC_IRQHandler>

080022b6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00b      	beq.n	80022de <LAN8742_RegisterBusIO+0x28>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d007      	beq.n	80022de <LAN8742_RegisterBusIO+0x28>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <LAN8742_RegisterBusIO+0x28>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d102      	bne.n	80022e4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80022de:	f04f 33ff 	mov.w	r3, #4294967295
 80022e2:	e014      	b.n	800230e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800231a:	b580      	push	{r7, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	2300      	movs	r3, #0
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d17c      	bne.n	8002434 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2220      	movs	r2, #32
 800234c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	e01c      	b.n	800238e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	f107 0208 	add.w	r2, r7, #8
 800235c:	2112      	movs	r1, #18
 800235e:	6978      	ldr	r0, [r7, #20]
 8002360:	4798      	blx	r3
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	da03      	bge.n	8002370 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8002368:	f06f 0304 	mvn.w	r3, #4
 800236c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800236e:	e00b      	b.n	8002388 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	429a      	cmp	r2, r3
 800237a:	d105      	bne.n	8002388 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
         break;
 8002386:	e005      	b.n	8002394 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	3301      	adds	r3, #1
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2b1f      	cmp	r3, #31
 8002392:	d9df      	bls.n	8002354 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b1f      	cmp	r3, #31
 800239a:	d902      	bls.n	80023a2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800239c:	f06f 0302 	mvn.w	r3, #2
 80023a0:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d145      	bne.n	8002434 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6810      	ldr	r0, [r2, #0]
 80023b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80023b4:	2100      	movs	r1, #0
 80023b6:	4798      	blx	r3
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	db37      	blt.n	800242e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6810      	ldr	r0, [r2, #0]
 80023c6:	f107 0208 	add.w	r2, r7, #8
 80023ca:	2100      	movs	r1, #0
 80023cc:	4798      	blx	r3
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	db28      	blt.n	8002426 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	4798      	blx	r3
 80023da:	4603      	mov	r3, r0
 80023dc:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80023de:	e01c      	b.n	800241a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	4798      	blx	r3
 80023e6:	4603      	mov	r3, r0
 80023e8:	461a      	mov	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80023f2:	d80e      	bhi.n	8002412 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6810      	ldr	r0, [r2, #0]
 80023fc:	f107 0208 	add.w	r2, r7, #8
 8002400:	2100      	movs	r1, #0
 8002402:	4798      	blx	r3
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	da07      	bge.n	800241a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800240a:	f06f 0304 	mvn.w	r3, #4
 800240e:	613b      	str	r3, [r7, #16]
                 break;
 8002410:	e010      	b.n	8002434 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002412:	f06f 0301 	mvn.w	r3, #1
 8002416:	613b      	str	r3, [r7, #16]
               break;
 8002418:	e00c      	b.n	8002434 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1dd      	bne.n	80023e0 <LAN8742_Init+0xc6>
 8002424:	e006      	b.n	8002434 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002426:	f06f 0304 	mvn.w	r3, #4
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	e002      	b.n	8002434 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800242e:	f06f 0303 	mvn.w	r3, #3
 8002432:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d112      	bne.n	8002460 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	4798      	blx	r3
 8002440:	4603      	mov	r3, r0
 8002442:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002444:	bf00      	nop
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	4798      	blx	r3
 800244c:	4603      	mov	r3, r0
 800244e:	461a      	mov	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002458:	d9f5      	bls.n	8002446 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002460:	693b      	ldr	r3, [r7, #16]
 }
 8002462:	4618      	mov	r0, r3
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b084      	sub	sp, #16
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6810      	ldr	r0, [r2, #0]
 800247e:	f107 020c 	add.w	r2, r7, #12
 8002482:	2101      	movs	r1, #1
 8002484:	4798      	blx	r3
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	da02      	bge.n	8002492 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800248c:	f06f 0304 	mvn.w	r3, #4
 8002490:	e06e      	b.n	8002570 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6810      	ldr	r0, [r2, #0]
 800249a:	f107 020c 	add.w	r2, r7, #12
 800249e:	2101      	movs	r1, #1
 80024a0:	4798      	blx	r3
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	da02      	bge.n	80024ae <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80024a8:	f06f 0304 	mvn.w	r3, #4
 80024ac:	e060      	b.n	8002570 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80024b8:	2301      	movs	r3, #1
 80024ba:	e059      	b.n	8002570 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6810      	ldr	r0, [r2, #0]
 80024c4:	f107 020c 	add.w	r2, r7, #12
 80024c8:	2100      	movs	r1, #0
 80024ca:	4798      	blx	r3
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	da02      	bge.n	80024d8 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80024d2:	f06f 0304 	mvn.w	r3, #4
 80024d6:	e04b      	b.n	8002570 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d11b      	bne.n	800251a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d006      	beq.n	80024fa <LAN8742_GetLinkState+0x90>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80024f6:	2302      	movs	r3, #2
 80024f8:	e03a      	b.n	8002570 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002504:	2303      	movs	r3, #3
 8002506:	e033      	b.n	8002570 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002512:	2304      	movs	r3, #4
 8002514:	e02c      	b.n	8002570 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002516:	2305      	movs	r3, #5
 8002518:	e02a      	b.n	8002570 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6810      	ldr	r0, [r2, #0]
 8002522:	f107 020c 	add.w	r2, r7, #12
 8002526:	211f      	movs	r1, #31
 8002528:	4798      	blx	r3
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	da02      	bge.n	8002536 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002530:	f06f 0304 	mvn.w	r3, #4
 8002534:	e01c      	b.n	8002570 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002540:	2306      	movs	r3, #6
 8002542:	e015      	b.n	8002570 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 031c 	and.w	r3, r3, #28
 800254a:	2b18      	cmp	r3, #24
 800254c:	d101      	bne.n	8002552 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800254e:	2302      	movs	r3, #2
 8002550:	e00e      	b.n	8002570 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f003 031c 	and.w	r3, r3, #28
 8002558:	2b08      	cmp	r3, #8
 800255a:	d101      	bne.n	8002560 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800255c:	2303      	movs	r3, #3
 800255e:	e007      	b.n	8002570 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f003 031c 	and.w	r3, r3, #28
 8002566:	2b14      	cmp	r3, #20
 8002568:	d101      	bne.n	800256e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800256a:	2304      	movs	r3, #4
 800256c:	e000      	b.n	8002570 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800256e:	2305      	movs	r3, #5
    }				
  }
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800257c:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <HAL_Init+0x28>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a07      	ldr	r2, [pc, #28]	; (80025a0 <HAL_Init+0x28>)
 8002582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002586:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002588:	2003      	movs	r0, #3
 800258a:	f000 fd7d 	bl	8003088 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800258e:	2000      	movs	r0, #0
 8002590:	f000 f808 	bl	80025a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002594:	f7ff fb8c 	bl	8001cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40023c00 	.word	0x40023c00

080025a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025ac:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <HAL_InitTick+0x54>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b12      	ldr	r3, [pc, #72]	; (80025fc <HAL_InitTick+0x58>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	4619      	mov	r1, r3
 80025b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80025be:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fd95 	bl	80030f2 <HAL_SYSTICK_Config>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e00e      	b.n	80025f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b0f      	cmp	r3, #15
 80025d6:	d80a      	bhi.n	80025ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025d8:	2200      	movs	r2, #0
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	f04f 30ff 	mov.w	r0, #4294967295
 80025e0:	f000 fd5d 	bl	800309e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025e4:	4a06      	ldr	r2, [pc, #24]	; (8002600 <HAL_InitTick+0x5c>)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	e000      	b.n	80025f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20000018 	.word	0x20000018
 80025fc:	20000020 	.word	0x20000020
 8002600:	2000001c 	.word	0x2000001c

08002604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <HAL_IncTick+0x20>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <HAL_IncTick+0x24>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4413      	add	r3, r2
 8002614:	4a04      	ldr	r2, [pc, #16]	; (8002628 <HAL_IncTick+0x24>)
 8002616:	6013      	str	r3, [r2, #0]
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	20000020 	.word	0x20000020
 8002628:	20000c94 	.word	0x20000c94

0800262c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return uwTick;
 8002630:	4b03      	ldr	r3, [pc, #12]	; (8002640 <HAL_GetTick+0x14>)
 8002632:	681b      	ldr	r3, [r3, #0]
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000c94 	.word	0x20000c94

08002644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800264c:	f7ff ffee 	bl	800262c <HAL_GetTick>
 8002650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265c:	d005      	beq.n	800266a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800265e:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <HAL_Delay+0x44>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4413      	add	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800266a:	bf00      	nop
 800266c:	f7ff ffde 	bl	800262c <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	429a      	cmp	r2, r3
 800267a:	d8f7      	bhi.n	800266c <HAL_Delay+0x28>
  {
  }
}
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000020 	.word	0x20000020

0800268c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e031      	b.n	8002706 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d109      	bne.n	80026be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff fb24 	bl	8001cf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d116      	bne.n	80026f8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ce:	4b10      	ldr	r3, [pc, #64]	; (8002710 <HAL_ADC_Init+0x84>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	f043 0202 	orr.w	r2, r3, #2
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fb0a 	bl	8002cf4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f023 0303 	bic.w	r3, r3, #3
 80026ee:	f043 0201 	orr.w	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	641a      	str	r2, [r3, #64]	; 0x40
 80026f6:	e001      	b.n	80026fc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002704:	7bfb      	ldrb	r3, [r7, #15]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	ffffeefd 	.word	0xffffeefd

08002714 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_ADC_Start+0x1a>
 800272a:	2302      	movs	r3, #2
 800272c:	e0ad      	b.n	800288a <HAL_ADC_Start+0x176>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b01      	cmp	r3, #1
 8002742:	d018      	beq.n	8002776 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002754:	4b50      	ldr	r3, [pc, #320]	; (8002898 <HAL_ADC_Start+0x184>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a50      	ldr	r2, [pc, #320]	; (800289c <HAL_ADC_Start+0x188>)
 800275a:	fba2 2303 	umull	r2, r3, r2, r3
 800275e:	0c9a      	lsrs	r2, r3, #18
 8002760:	4613      	mov	r3, r2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	4413      	add	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002768:	e002      	b.n	8002770 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	3b01      	subs	r3, #1
 800276e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f9      	bne.n	800276a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b01      	cmp	r3, #1
 8002782:	d175      	bne.n	8002870 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002788:	4b45      	ldr	r3, [pc, #276]	; (80028a0 <HAL_ADC_Start+0x18c>)
 800278a:	4013      	ands	r3, r2
 800278c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027be:	d106      	bne.n	80027ce <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c4:	f023 0206 	bic.w	r2, r3, #6
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	645a      	str	r2, [r3, #68]	; 0x44
 80027cc:	e002      	b.n	80027d4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80027e4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80027e6:	4b2f      	ldr	r3, [pc, #188]	; (80028a4 <HAL_ADC_Start+0x190>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 031f 	and.w	r3, r3, #31
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10f      	bne.n	8002812 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d143      	bne.n	8002888 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	e03a      	b.n	8002888 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a24      	ldr	r2, [pc, #144]	; (80028a8 <HAL_ADC_Start+0x194>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d10e      	bne.n	800283a <HAL_ADC_Start+0x126>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d107      	bne.n	800283a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002838:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800283a:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <HAL_ADC_Start+0x190>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	2b00      	cmp	r3, #0
 8002844:	d120      	bne.n	8002888 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a18      	ldr	r2, [pc, #96]	; (80028ac <HAL_ADC_Start+0x198>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d11b      	bne.n	8002888 <HAL_ADC_Start+0x174>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d114      	bne.n	8002888 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	e00b      	b.n	8002888 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	f043 0210 	orr.w	r2, r3, #16
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002880:	f043 0201 	orr.w	r2, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	20000018 	.word	0x20000018
 800289c:	431bde83 	.word	0x431bde83
 80028a0:	fffff8fe 	.word	0xfffff8fe
 80028a4:	40012300 	.word	0x40012300
 80028a8:	40012000 	.word	0x40012000
 80028ac:	40012200 	.word	0x40012200

080028b0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_ADC_Stop+0x16>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e01f      	b.n	8002906 <HAL_ADC_Stop+0x56>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0201 	bic.w	r2, r2, #1
 80028dc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d107      	bne.n	80028fc <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028f0:	4b08      	ldr	r3, [pc, #32]	; (8002914 <HAL_ADC_Stop+0x64>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	f043 0201 	orr.w	r2, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	ffffeefe 	.word	0xffffeefe

08002918 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002934:	d113      	bne.n	800295e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002944:	d10b      	bne.n	800295e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f043 0220 	orr.w	r2, r3, #32
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e063      	b.n	8002a26 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800295e:	f7ff fe65 	bl	800262c <HAL_GetTick>
 8002962:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002964:	e021      	b.n	80029aa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296c:	d01d      	beq.n	80029aa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d007      	beq.n	8002984 <HAL_ADC_PollForConversion+0x6c>
 8002974:	f7ff fe5a 	bl	800262c <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d212      	bcs.n	80029aa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b02      	cmp	r3, #2
 8002990:	d00b      	beq.n	80029aa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f043 0204 	orr.w	r2, r3, #4
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e03d      	b.n	8002a26 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d1d6      	bne.n	8002966 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0212 	mvn.w	r2, #18
 80029c0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d123      	bne.n	8002a24 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d11f      	bne.n	8002a24 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d006      	beq.n	8002a00 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d111      	bne.n	8002a24 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d105      	bne.n	8002a24 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	f043 0201 	orr.w	r2, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x1c>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e136      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x28a>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b09      	cmp	r3, #9
 8002a72:	d93a      	bls.n	8002aea <HAL_ADC_ConfigChannel+0xa2>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a7c:	d035      	beq.n	8002aea <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68d9      	ldr	r1, [r3, #12]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	4413      	add	r3, r2
 8002a92:	3b1e      	subs	r3, #30
 8002a94:	2207      	movs	r2, #7
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43da      	mvns	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	400a      	ands	r2, r1
 8002aa2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a8d      	ldr	r2, [pc, #564]	; (8002ce0 <HAL_ADC_ConfigChannel+0x298>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d10a      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68d9      	ldr	r1, [r3, #12]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	061a      	lsls	r2, r3, #24
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ac2:	e035      	b.n	8002b30 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68d9      	ldr	r1, [r3, #12]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	4403      	add	r3, r0
 8002adc:	3b1e      	subs	r3, #30
 8002ade:	409a      	lsls	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ae8:	e022      	b.n	8002b30 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6919      	ldr	r1, [r3, #16]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	461a      	mov	r2, r3
 8002af8:	4613      	mov	r3, r2
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	4413      	add	r3, r2
 8002afe:	2207      	movs	r2, #7
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43da      	mvns	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	400a      	ands	r2, r1
 8002b0c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6919      	ldr	r1, [r3, #16]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	4618      	mov	r0, r3
 8002b20:	4603      	mov	r3, r0
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4403      	add	r3, r0
 8002b26:	409a      	lsls	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b06      	cmp	r3, #6
 8002b36:	d824      	bhi.n	8002b82 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	3b05      	subs	r3, #5
 8002b4a:	221f      	movs	r2, #31
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43da      	mvns	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	400a      	ands	r2, r1
 8002b58:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	4618      	mov	r0, r3
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	3b05      	subs	r3, #5
 8002b74:	fa00 f203 	lsl.w	r2, r0, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	635a      	str	r2, [r3, #52]	; 0x34
 8002b80:	e04c      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b0c      	cmp	r3, #12
 8002b88:	d824      	bhi.n	8002bd4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	3b23      	subs	r3, #35	; 0x23
 8002b9c:	221f      	movs	r2, #31
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43da      	mvns	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	400a      	ands	r2, r1
 8002baa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	4618      	mov	r0, r3
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3b23      	subs	r3, #35	; 0x23
 8002bc6:	fa00 f203 	lsl.w	r2, r0, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	631a      	str	r2, [r3, #48]	; 0x30
 8002bd2:	e023      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	3b41      	subs	r3, #65	; 0x41
 8002be6:	221f      	movs	r2, #31
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43da      	mvns	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	400a      	ands	r2, r1
 8002bf4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	4618      	mov	r0, r3
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3b41      	subs	r3, #65	; 0x41
 8002c10:	fa00 f203 	lsl.w	r2, r0, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a30      	ldr	r2, [pc, #192]	; (8002ce4 <HAL_ADC_ConfigChannel+0x29c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d10a      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x1f4>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c2e:	d105      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002c30:	4b2d      	ldr	r3, [pc, #180]	; (8002ce8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4a2c      	ldr	r2, [pc, #176]	; (8002ce8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c36:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002c3a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a28      	ldr	r2, [pc, #160]	; (8002ce4 <HAL_ADC_ConfigChannel+0x29c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d10f      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x21e>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b12      	cmp	r3, #18
 8002c4c:	d10b      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002c4e:	4b26      	ldr	r3, [pc, #152]	; (8002ce8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	4a25      	ldr	r2, [pc, #148]	; (8002ce8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c54:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c58:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002c5a:	4b23      	ldr	r3, [pc, #140]	; (8002ce8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4a22      	ldr	r2, [pc, #136]	; (8002ce8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c64:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a1e      	ldr	r2, [pc, #120]	; (8002ce4 <HAL_ADC_ConfigChannel+0x29c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d12b      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x280>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a1a      	ldr	r2, [pc, #104]	; (8002ce0 <HAL_ADC_ConfigChannel+0x298>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d003      	beq.n	8002c82 <HAL_ADC_ConfigChannel+0x23a>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b11      	cmp	r3, #17
 8002c80:	d122      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002c82:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4a18      	ldr	r2, [pc, #96]	; (8002ce8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c88:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002c8c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002c8e:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	4a15      	ldr	r2, [pc, #84]	; (8002ce8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c98:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a10      	ldr	r2, [pc, #64]	; (8002ce0 <HAL_ADC_ConfigChannel+0x298>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d111      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002ca4:	4b11      	ldr	r3, [pc, #68]	; (8002cec <HAL_ADC_ConfigChannel+0x2a4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a11      	ldr	r2, [pc, #68]	; (8002cf0 <HAL_ADC_ConfigChannel+0x2a8>)
 8002caa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cae:	0c9a      	lsrs	r2, r3, #18
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002cba:	e002      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f9      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	10000012 	.word	0x10000012
 8002ce4:	40012000 	.word	0x40012000
 8002ce8:	40012300 	.word	0x40012300
 8002cec:	20000018 	.word	0x20000018
 8002cf0:	431bde83 	.word	0x431bde83

08002cf4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002cfc:	4b78      	ldr	r3, [pc, #480]	; (8002ee0 <ADC_Init+0x1ec>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4a77      	ldr	r2, [pc, #476]	; (8002ee0 <ADC_Init+0x1ec>)
 8002d02:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002d06:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002d08:	4b75      	ldr	r3, [pc, #468]	; (8002ee0 <ADC_Init+0x1ec>)
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	4973      	ldr	r1, [pc, #460]	; (8002ee0 <ADC_Init+0x1ec>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6859      	ldr	r1, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	021a      	lsls	r2, r3, #8
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6859      	ldr	r1, [r3, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6899      	ldr	r1, [r3, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d82:	4a58      	ldr	r2, [pc, #352]	; (8002ee4 <ADC_Init+0x1f0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d022      	beq.n	8002dce <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6899      	ldr	r1, [r3, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002db8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6899      	ldr	r1, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	e00f      	b.n	8002dee <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ddc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002dec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0202 	bic.w	r2, r2, #2
 8002dfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6899      	ldr	r1, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	005a      	lsls	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d01b      	beq.n	8002e54 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6859      	ldr	r1, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	3b01      	subs	r3, #1
 8002e48:	035a      	lsls	r2, r3, #13
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	e007      	b.n	8002e64 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	051a      	lsls	r2, r3, #20
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6899      	ldr	r1, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ea6:	025a      	lsls	r2, r3, #9
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ebe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6899      	ldr	r1, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	029a      	lsls	r2, r3, #10
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	609a      	str	r2, [r3, #8]
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	40012300 	.word	0x40012300
 8002ee4:	0f000001 	.word	0x0f000001

08002ee8 <__NVIC_SetPriorityGrouping>:
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <__NVIC_SetPriorityGrouping+0x40>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f04:	4013      	ands	r3, r2
 8002f06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f10:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <__NVIC_SetPriorityGrouping+0x44>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f16:	4a04      	ldr	r2, [pc, #16]	; (8002f28 <__NVIC_SetPriorityGrouping+0x40>)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	60d3      	str	r3, [r2, #12]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	e000ed00 	.word	0xe000ed00
 8002f2c:	05fa0000 	.word	0x05fa0000

08002f30 <__NVIC_GetPriorityGrouping>:
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f34:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <__NVIC_GetPriorityGrouping+0x18>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	0a1b      	lsrs	r3, r3, #8
 8002f3a:	f003 0307 	and.w	r3, r3, #7
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <__NVIC_EnableIRQ>:
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	db0b      	blt.n	8002f76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	f003 021f 	and.w	r2, r3, #31
 8002f64:	4907      	ldr	r1, [pc, #28]	; (8002f84 <__NVIC_EnableIRQ+0x38>)
 8002f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	2001      	movs	r0, #1
 8002f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	e000e100 	.word	0xe000e100

08002f88 <__NVIC_SetPriority>:
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	6039      	str	r1, [r7, #0]
 8002f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	db0a      	blt.n	8002fb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	490c      	ldr	r1, [pc, #48]	; (8002fd4 <__NVIC_SetPriority+0x4c>)
 8002fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa6:	0112      	lsls	r2, r2, #4
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	440b      	add	r3, r1
 8002fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002fb0:	e00a      	b.n	8002fc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	4908      	ldr	r1, [pc, #32]	; (8002fd8 <__NVIC_SetPriority+0x50>)
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	3b04      	subs	r3, #4
 8002fc0:	0112      	lsls	r2, r2, #4
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	761a      	strb	r2, [r3, #24]
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	e000e100 	.word	0xe000e100
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <NVIC_EncodePriority>:
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b089      	sub	sp, #36	; 0x24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f1c3 0307 	rsb	r3, r3, #7
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	bf28      	it	cs
 8002ffa:	2304      	movcs	r3, #4
 8002ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3304      	adds	r3, #4
 8003002:	2b06      	cmp	r3, #6
 8003004:	d902      	bls.n	800300c <NVIC_EncodePriority+0x30>
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	3b03      	subs	r3, #3
 800300a:	e000      	b.n	800300e <NVIC_EncodePriority+0x32>
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003010:	f04f 32ff 	mov.w	r2, #4294967295
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43da      	mvns	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	401a      	ands	r2, r3
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003024:	f04f 31ff 	mov.w	r1, #4294967295
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	fa01 f303 	lsl.w	r3, r1, r3
 800302e:	43d9      	mvns	r1, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003034:	4313      	orrs	r3, r2
}
 8003036:	4618      	mov	r0, r3
 8003038:	3724      	adds	r7, #36	; 0x24
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
	...

08003044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3b01      	subs	r3, #1
 8003050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003054:	d301      	bcc.n	800305a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003056:	2301      	movs	r3, #1
 8003058:	e00f      	b.n	800307a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800305a:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <SysTick_Config+0x40>)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3b01      	subs	r3, #1
 8003060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003062:	210f      	movs	r1, #15
 8003064:	f04f 30ff 	mov.w	r0, #4294967295
 8003068:	f7ff ff8e 	bl	8002f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800306c:	4b05      	ldr	r3, [pc, #20]	; (8003084 <SysTick_Config+0x40>)
 800306e:	2200      	movs	r2, #0
 8003070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003072:	4b04      	ldr	r3, [pc, #16]	; (8003084 <SysTick_Config+0x40>)
 8003074:	2207      	movs	r2, #7
 8003076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	e000e010 	.word	0xe000e010

08003088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff ff29 	bl	8002ee8 <__NVIC_SetPriorityGrouping>
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800309e:	b580      	push	{r7, lr}
 80030a0:	b086      	sub	sp, #24
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	4603      	mov	r3, r0
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	607a      	str	r2, [r7, #4]
 80030aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030b0:	f7ff ff3e 	bl	8002f30 <__NVIC_GetPriorityGrouping>
 80030b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	6978      	ldr	r0, [r7, #20]
 80030bc:	f7ff ff8e 	bl	8002fdc <NVIC_EncodePriority>
 80030c0:	4602      	mov	r2, r0
 80030c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c6:	4611      	mov	r1, r2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff ff5d 	bl	8002f88 <__NVIC_SetPriority>
}
 80030ce:	bf00      	nop
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	4603      	mov	r3, r0
 80030de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff ff31 	bl	8002f4c <__NVIC_EnableIRQ>
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff ffa2 	bl	8003044 <SysTick_Config>
 8003100:	4603      	mov	r3, r0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003110:	f3bf 8f5f 	dmb	sy
}
 8003114:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003116:	4b07      	ldr	r3, [pc, #28]	; (8003134 <HAL_MPU_Disable+0x28>)
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	4a06      	ldr	r2, [pc, #24]	; (8003134 <HAL_MPU_Disable+0x28>)
 800311c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003120:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003122:	4b05      	ldr	r3, [pc, #20]	; (8003138 <HAL_MPU_Disable+0x2c>)
 8003124:	2200      	movs	r2, #0
 8003126:	605a      	str	r2, [r3, #4]
}
 8003128:	bf00      	nop
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	e000ed00 	.word	0xe000ed00
 8003138:	e000ed90 	.word	0xe000ed90

0800313c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003144:	4a0b      	ldr	r2, [pc, #44]	; (8003174 <HAL_MPU_Enable+0x38>)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <HAL_MPU_Enable+0x3c>)
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	4a09      	ldr	r2, [pc, #36]	; (8003178 <HAL_MPU_Enable+0x3c>)
 8003154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003158:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800315a:	f3bf 8f4f 	dsb	sy
}
 800315e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003160:	f3bf 8f6f 	isb	sy
}
 8003164:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	e000ed90 	.word	0xe000ed90
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e06a      	b.n	8003264 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003194:	2b00      	cmp	r3, #0
 8003196:	d106      	bne.n	80031a6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2223      	movs	r2, #35	; 0x23
 800319c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f004 fb91 	bl	80078c8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031a6:	4b31      	ldr	r3, [pc, #196]	; (800326c <HAL_ETH_Init+0xf0>)
 80031a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031aa:	4a30      	ldr	r2, [pc, #192]	; (800326c <HAL_ETH_Init+0xf0>)
 80031ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031b0:	6453      	str	r3, [r2, #68]	; 0x44
 80031b2:	4b2e      	ldr	r3, [pc, #184]	; (800326c <HAL_ETH_Init+0xf0>)
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80031be:	4b2c      	ldr	r3, [pc, #176]	; (8003270 <HAL_ETH_Init+0xf4>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	4a2b      	ldr	r2, [pc, #172]	; (8003270 <HAL_ETH_Init+0xf4>)
 80031c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80031c8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80031ca:	4b29      	ldr	r3, [pc, #164]	; (8003270 <HAL_ETH_Init+0xf4>)
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	4927      	ldr	r1, [pc, #156]	; (8003270 <HAL_ETH_Init+0xf4>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80031d8:	4b25      	ldr	r3, [pc, #148]	; (8003270 <HAL_ETH_Init+0xf4>)
 80031da:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6812      	ldr	r2, [r2, #0]
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80031f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031f4:	f7ff fa1a 	bl	800262c <HAL_GetTick>
 80031f8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80031fa:	e011      	b.n	8003220 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80031fc:	f7ff fa16 	bl	800262c <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800320a:	d909      	bls.n	8003220 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2204      	movs	r2, #4
 8003210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	22e0      	movs	r2, #224	; 0xe0
 8003218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e021      	b.n	8003264 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1e4      	bne.n	80031fc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fee4 	bl	8004000 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 ff8b 	bl	8004154 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 ffe1 	bl	8004206 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	461a      	mov	r2, r3
 800324a:	2100      	movs	r1, #0
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 ff49 	bl	80040e4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2210      	movs	r2, #16
 800325e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40023800 	.word	0x40023800
 8003270:	40013800 	.word	0x40013800

08003274 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003282:	2b10      	cmp	r3, #16
 8003284:	d150      	bne.n	8003328 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2223      	movs	r2, #35	; 0x23
 800328a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2204      	movs	r2, #4
 8003292:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f9fd 	bl	8003694 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0208 	orr.w	r2, r2, #8
 80032a8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80032b2:	2001      	movs	r0, #1
 80032b4:	f7ff f9c6 	bl	8002644 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0204 	orr.w	r2, r2, #4
 80032ce:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80032d8:	2001      	movs	r0, #1
 80032da:	f7ff f9b3 	bl	8002644 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 fd2a 	bl	8003d40 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6812      	ldr	r2, [r2, #0]
 80032fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003302:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	f043 0302 	orr.w	r3, r3, #2
 8003316:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800331a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2223      	movs	r2, #35	; 0x23
 8003320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	e000      	b.n	800332a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
  }
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003340:	2b23      	cmp	r3, #35	; 0x23
 8003342:	d14a      	bne.n	80033da <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2223      	movs	r2, #35	; 0x23
 8003348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6812      	ldr	r2, [r2, #0]
 800335a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800335e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003362:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6812      	ldr	r2, [r2, #0]
 8003372:	f023 0302 	bic.w	r3, r3, #2
 8003376:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800337a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0204 	bic.w	r2, r2, #4
 800338a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003394:	2001      	movs	r0, #1
 8003396:	f7ff f955 	bl	8002644 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fccc 	bl	8003d40 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0208 	bic.w	r2, r2, #8
 80033b6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80033c0:	2001      	movs	r0, #1
 80033c2:	f7ff f93f 	bl	8002644 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2210      	movs	r2, #16
 80033d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e000      	b.n	80033dc <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
  }
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fc:	f043 0201 	orr.w	r2, r3, #1
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e07c      	b.n	8003504 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003410:	2b23      	cmp	r3, #35	; 0x23
 8003412:	d176      	bne.n	8003502 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8003414:	2200      	movs	r2, #0
 8003416:	68b9      	ldr	r1, [r7, #8]
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 ff61 	bl	80042e0 <ETH_Prepare_Tx_Descriptors>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d009      	beq.n	8003438 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342a:	f043 0202 	orr.w	r2, r3, #2
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e065      	b.n	8003504 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8003438:	f3bf 8f4f 	dsb	sy
}
 800343c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3206      	adds	r2, #6
 8003446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800344a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	629a      	str	r2, [r3, #40]	; 0x28
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345a:	2b03      	cmp	r3, #3
 800345c:	d904      	bls.n	8003468 <HAL_ETH_Transmit+0x84>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	1f1a      	subs	r2, r3, #4
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	3106      	adds	r1, #6
 8003474:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003478:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800347c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800347e:	f7ff f8d5 	bl	800262c <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003484:	e037      	b.n	80034f6 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d011      	beq.n	80034bc <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349e:	f043 0208 	orr.w	r2, r3, #8
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034b0:	695a      	ldr	r2, [r3, #20]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e023      	b.n	8003504 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c2:	d018      	beq.n	80034f6 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034c4:	f7ff f8b2 	bl	800262c <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d302      	bcc.n	80034da <HAL_ETH_Transmit+0xf6>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10d      	bne.n	80034f6 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e0:	f043 0204 	orr.w	r2, r3, #4
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80034f0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e006      	b.n	8003504 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	dbc3      	blt.n	8003486 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	e000      	b.n	8003504 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
  }
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d109      	bne.n	8003538 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	f043 0201 	orr.w	r2, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0a8      	b.n	800368a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800353e:	2b23      	cmp	r3, #35	; 0x23
 8003540:	d001      	beq.n	8003546 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e0a1      	b.n	800368a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69fa      	ldr	r2, [r7, #28]
 8003550:	3212      	adds	r2, #18
 8003552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003556:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800355c:	f1c3 0304 	rsb	r3, r3, #4
 8003560:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003562:	e06a      	b.n	800363a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	d007      	beq.n	8003580 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	699a      	ldr	r2, [r3, #24]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	69da      	ldr	r2, [r3, #28]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003588:	2b00      	cmp	r3, #0
 800358a:	d103      	bne.n	8003594 <HAL_ETH_ReadData+0x88>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003590:	2b00      	cmp	r3, #0
 8003592:	d040      	beq.n	8003616 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00c      	beq.n	80035d8 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	0c1b      	lsrs	r3, r3, #16
 80035c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80035c8:	3b04      	subs	r3, #4
 80035ca:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80035f0:	461a      	mov	r2, r3
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	f004 fb31 	bl	8007c5c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	441a      	add	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	2200      	movs	r2, #0
 8003614:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	3301      	adds	r3, #1
 800361a:	61fb      	str	r3, [r7, #28]
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	2b03      	cmp	r3, #3
 8003620:	d902      	bls.n	8003628 <HAL_ETH_ReadData+0x11c>
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3b04      	subs	r3, #4
 8003626:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	3212      	adds	r2, #18
 800362e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003632:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	3301      	adds	r3, #1
 8003638:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	db06      	blt.n	8003650 <HAL_ETH_ReadData+0x144>
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	429a      	cmp	r2, r3
 8003648:	d202      	bcs.n	8003650 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d089      	beq.n	8003564 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	441a      	add	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f815 	bl	8003694 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d108      	bne.n	8003688 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003684:	2300      	movs	r3, #0
 8003686:	e000      	b.n	800368a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
}
 800368a:	4618      	mov	r0, r3
 800368c:	3720      	adds	r7, #32
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80036a0:	2301      	movs	r3, #1
 80036a2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036a8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69fa      	ldr	r2, [r7, #28]
 80036ae:	3212      	adds	r2, #18
 80036b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ba:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80036bc:	e040      	b.n	8003740 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d112      	bne.n	80036ec <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80036c6:	f107 030c 	add.w	r3, r7, #12
 80036ca:	4618      	mov	r0, r3
 80036cc:	f004 fa96 	bl	8007bfc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d102      	bne.n	80036dc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	74fb      	strb	r3, [r7, #19]
 80036da:	e007      	b.n	80036ec <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	461a      	mov	r2, r3
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	461a      	mov	r2, r3
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80036ec:	7cfb      	ldrb	r3, [r7, #19]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d026      	beq.n	8003740 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d103      	bne.n	8003702 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	4a1e      	ldr	r2, [pc, #120]	; (8003778 <ETH_UpdateDescriptor+0xe4>)
 80036fe:	605a      	str	r2, [r3, #4]
 8003700:	e003      	b.n	800370a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8003708:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 800370a:	f3bf 8f5f 	dmb	sy
}
 800370e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	3301      	adds	r3, #1
 8003720:	61fb      	str	r3, [r7, #28]
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	2b03      	cmp	r3, #3
 8003726:	d902      	bls.n	800372e <ETH_UpdateDescriptor+0x9a>
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	3b04      	subs	r3, #4
 800372c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69fa      	ldr	r2, [r7, #28]
 8003732:	3212      	adds	r2, #18
 8003734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003738:	617b      	str	r3, [r7, #20]
      desccount--;
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	3b01      	subs	r3, #1
 800373e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <ETH_UpdateDescriptor+0xb8>
 8003746:	7cfb      	ldrb	r3, [r7, #19]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1b8      	bne.n	80036be <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	429a      	cmp	r2, r3
 8003754:	d00c      	beq.n	8003770 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800375e:	461a      	mov	r2, r3
 8003760:	2300      	movs	r3, #0
 8003762:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	69fa      	ldr	r2, [r7, #28]
 8003768:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8003770:	bf00      	nop
 8003772:	3720      	adds	r7, #32
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	80004600 	.word	0x80004600

0800377c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003792:	2b40      	cmp	r3, #64	; 0x40
 8003794:	d112      	bne.n	80037bc <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a4:	2b40      	cmp	r3, #64	; 0x40
 80037a6:	d109      	bne.n	80037bc <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037b0:	461a      	mov	r2, r3
 80037b2:	4b50      	ldr	r3, [pc, #320]	; (80038f4 <HAL_ETH_IRQHandler+0x178>)
 80037b4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f8ac 	bl	8003914 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d113      	bne.n	80037f6 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d10a      	bne.n	80037f6 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037e8:	461a      	mov	r2, r3
 80037ea:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80037ee:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f885 	bl	8003900 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003804:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003808:	d14c      	bne.n	80038a4 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800381c:	d142      	bne.n	80038a4 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003824:	f043 0208 	orr.w	r2, r3, #8
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800383c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003840:	d11a      	bne.n	8003878 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800384a:	695a      	ldr	r2, [r3, #20]
 800384c:	4b2a      	ldr	r3, [pc, #168]	; (80038f8 <HAL_ETH_IRQHandler+0x17c>)
 800384e:	4013      	ands	r3, r2
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8003868:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800386c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	22e0      	movs	r2, #224	; 0xe0
 8003872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003876:	e012      	b.n	800389e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003880:	695a      	ldr	r2, [r3, #20]
 8003882:	f248 6380 	movw	r3, #34432	; 0x8680
 8003886:	4013      	ands	r3, r2
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003896:	461a      	mov	r2, r3
 8003898:	f248 6380 	movw	r3, #34432	; 0x8680
 800389c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f842 	bl	8003928 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b08      	cmp	r3, #8
 80038b0:	d10e      	bne.n	80038d0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f83a 	bl	800393c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80038d0:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <HAL_ETH_IRQHandler+0x180>)
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d006      	beq.n	80038ea <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80038dc:	4b07      	ldr	r3, [pc, #28]	; (80038fc <HAL_ETH_IRQHandler+0x180>)
 80038de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80038e2:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f833 	bl	8003950 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	00010040 	.word	0x00010040
 80038f8:	007e2000 	.word	0x007e2000
 80038fc:	40013c00 	.word	0x40013c00

08003900 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f003 031c 	and.w	r3, r3, #28
 8003980:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	02db      	lsls	r3, r3, #11
 8003986:	b29b      	uxth	r3, r3
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	019b      	lsls	r3, r3, #6
 8003992:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	4313      	orrs	r3, r2
 800399a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f023 0302 	bic.w	r3, r3, #2
 80039a2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80039b4:	f7fe fe3a 	bl	800262c <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80039ba:	e00d      	b.n	80039d8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80039bc:	f7fe fe36 	bl	800262c <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ca:	d301      	bcc.n	80039d0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e010      	b.n	80039f2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1ec      	bne.n	80039bc <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	461a      	mov	r2, r3
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b086      	sub	sp, #24
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	60f8      	str	r0, [r7, #12]
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	607a      	str	r2, [r7, #4]
 8003a06:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f003 031c 	and.w	r3, r3, #28
 8003a16:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	02db      	lsls	r3, r3, #11
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	019b      	lsls	r3, r3, #6
 8003a28:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f043 0302 	orr.w	r3, r3, #2
 8003a38:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a54:	f7fe fdea 	bl	800262c <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003a5a:	e00d      	b.n	8003a78 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003a5c:	f7fe fde6 	bl	800262c <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a6a:	d301      	bcc.n	8003a70 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e009      	b.n	8003a84 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1ec      	bne.n	8003a5c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0d9      	b.n	8003c54 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0310 	and.w	r3, r3, #16
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	bf14      	ite	ne
 8003aae:	2301      	movne	r3, #1
 8003ab0:	2300      	moveq	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	bf0c      	ite	eq
 8003ad8:	2301      	moveq	r3, #1
 8003ada:	2300      	movne	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	461a      	mov	r2, r3
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bf14      	ite	ne
 8003af4:	2301      	movne	r3, #1
 8003af6:	2300      	moveq	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	bf0c      	ite	eq
 8003b0e:	2301      	moveq	r3, #1
 8003b10:	2300      	movne	r3, #0
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	461a      	mov	r2, r3
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	bf14      	ite	ne
 8003b28:	2301      	movne	r3, #1
 8003b2a:	2300      	moveq	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	461a      	mov	r2, r3
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	bf0c      	ite	eq
 8003b5e:	2301      	moveq	r3, #1
 8003b60:	2300      	movne	r3, #0
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	461a      	mov	r2, r3
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	bf0c      	ite	eq
 8003b78:	2301      	moveq	r3, #1
 8003b7a:	2300      	movne	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	461a      	mov	r2, r3
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	bf14      	ite	ne
 8003b92:	2301      	movne	r3, #1
 8003b94:	2300      	moveq	r3, #0
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	461a      	mov	r2, r3
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	bf14      	ite	ne
 8003bba:	2301      	movne	r3, #1
 8003bbc:	2300      	moveq	r3, #0
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	bf14      	ite	ne
 8003bd4:	2301      	movne	r3, #1
 8003bd6:	2300      	moveq	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	461a      	mov	r2, r3
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bf0c      	ite	eq
 8003bf0:	2301      	moveq	r3, #1
 8003bf2:	2300      	movne	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	0c1b      	lsrs	r3, r3, #16
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bf14      	ite	ne
 8003c28:	2301      	movne	r3, #1
 8003c2a:	2300      	moveq	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	461a      	mov	r2, r3
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	bf14      	ite	ne
 8003c44:	2301      	movne	r3, #1
 8003c46:	2300      	moveq	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e00b      	b.n	8003c8c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c7a:	2b10      	cmp	r3, #16
 8003c7c:	d105      	bne.n	8003c8a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003c7e:	6839      	ldr	r1, [r7, #0]
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f883 	bl	8003d8c <ETH_SetMACConfig>

    return HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	e000      	b.n	8003c8c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
  }
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 031c 	bic.w	r3, r3, #28
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003cac:	f002 f882 	bl	8005db4 <HAL_RCC_GetHCLKFreq>
 8003cb0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	4a1d      	ldr	r2, [pc, #116]	; (8003d2c <HAL_ETH_SetMDIOClockRange+0x98>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d908      	bls.n	8003ccc <HAL_ETH_SetMDIOClockRange+0x38>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	4a1c      	ldr	r2, [pc, #112]	; (8003d30 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d804      	bhi.n	8003ccc <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f043 0308 	orr.w	r3, r3, #8
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	e027      	b.n	8003d1c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	4a18      	ldr	r2, [pc, #96]	; (8003d30 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d908      	bls.n	8003ce6 <HAL_ETH_SetMDIOClockRange+0x52>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4a17      	ldr	r2, [pc, #92]	; (8003d34 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d204      	bcs.n	8003ce6 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f043 030c 	orr.w	r3, r3, #12
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	e01a      	b.n	8003d1c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	4a12      	ldr	r2, [pc, #72]	; (8003d34 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d303      	bcc.n	8003cf6 <HAL_ETH_SetMDIOClockRange+0x62>
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	4a11      	ldr	r2, [pc, #68]	; (8003d38 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d911      	bls.n	8003d1a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	4a0f      	ldr	r2, [pc, #60]	; (8003d38 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d908      	bls.n	8003d10 <HAL_ETH_SetMDIOClockRange+0x7c>
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	4a0e      	ldr	r2, [pc, #56]	; (8003d3c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d804      	bhi.n	8003d10 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f043 0304 	orr.w	r3, r3, #4
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	e005      	b.n	8003d1c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f043 0310 	orr.w	r3, r3, #16
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	e000      	b.n	8003d1c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003d1a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	611a      	str	r2, [r3, #16]
}
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	01312cff 	.word	0x01312cff
 8003d30:	02160ebf 	.word	0x02160ebf
 8003d34:	03938700 	.word	0x03938700
 8003d38:	05f5e0ff 	.word	0x05f5e0ff
 8003d3c:	08f0d17f 	.word	0x08f0d17f

08003d40 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d62:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d70:	2001      	movs	r0, #1
 8003d72:	f7fe fc67 	bl	8002644 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d80:	6193      	str	r3, [r2, #24]
}
 8003d82:	bf00      	nop
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
	...

08003d8c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4b51      	ldr	r3, [pc, #324]	; (8003ee8 <ETH_SetMACConfig+0x15c>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	7c1b      	ldrb	r3, [r3, #16]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d102      	bne.n	8003db4 <ETH_SetMACConfig+0x28>
 8003dae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003db2:	e000      	b.n	8003db6 <ETH_SetMACConfig+0x2a>
 8003db4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	7c5b      	ldrb	r3, [r3, #17]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d102      	bne.n	8003dc4 <ETH_SetMACConfig+0x38>
 8003dbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003dc2:	e000      	b.n	8003dc6 <ETH_SetMACConfig+0x3a>
 8003dc4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003dc6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003dcc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	7fdb      	ldrb	r3, [r3, #31]
 8003dd2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003dd4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003dda:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	7f92      	ldrb	r2, [r2, #30]
 8003de0:	2a00      	cmp	r2, #0
 8003de2:	d102      	bne.n	8003dea <ETH_SetMACConfig+0x5e>
 8003de4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003de8:	e000      	b.n	8003dec <ETH_SetMACConfig+0x60>
 8003dea:	2200      	movs	r2, #0
                        macconf->Speed |
 8003dec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	7f1b      	ldrb	r3, [r3, #28]
 8003df2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003df4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003dfa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	791b      	ldrb	r3, [r3, #4]
 8003e00:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003e02:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003e0a:	2a00      	cmp	r2, #0
 8003e0c:	d102      	bne.n	8003e14 <ETH_SetMACConfig+0x88>
 8003e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e12:	e000      	b.n	8003e16 <ETH_SetMACConfig+0x8a>
 8003e14:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003e16:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	7bdb      	ldrb	r3, [r3, #15]
 8003e1c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003e1e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003e24:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e2c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e46:	2001      	movs	r0, #1
 8003e48:	f7fe fbfc 	bl	8002644 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003e62:	4013      	ands	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e6a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003e72:	2a00      	cmp	r2, #0
 8003e74:	d101      	bne.n	8003e7a <ETH_SetMACConfig+0xee>
 8003e76:	2280      	movs	r2, #128	; 0x80
 8003e78:	e000      	b.n	8003e7c <ETH_SetMACConfig+0xf0>
 8003e7a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003e7c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003e82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003e8a:	2a01      	cmp	r2, #1
 8003e8c:	d101      	bne.n	8003e92 <ETH_SetMACConfig+0x106>
 8003e8e:	2208      	movs	r2, #8
 8003e90:	e000      	b.n	8003e94 <ETH_SetMACConfig+0x108>
 8003e92:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003e94:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003e9c:	2a01      	cmp	r2, #1
 8003e9e:	d101      	bne.n	8003ea4 <ETH_SetMACConfig+0x118>
 8003ea0:	2204      	movs	r2, #4
 8003ea2:	e000      	b.n	8003ea6 <ETH_SetMACConfig+0x11a>
 8003ea4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003ea6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003eae:	2a01      	cmp	r2, #1
 8003eb0:	d101      	bne.n	8003eb6 <ETH_SetMACConfig+0x12a>
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	e000      	b.n	8003eb8 <ETH_SetMACConfig+0x12c>
 8003eb6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ed0:	2001      	movs	r0, #1
 8003ed2:	f7fe fbb7 	bl	8002644 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	619a      	str	r2, [r3, #24]
}
 8003ede:	bf00      	nop
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	ff20810f 	.word	0xff20810f

08003eec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4b3d      	ldr	r3, [pc, #244]	; (8003ffc <ETH_SetDMAConfig+0x110>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	7b1b      	ldrb	r3, [r3, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d102      	bne.n	8003f18 <ETH_SetDMAConfig+0x2c>
 8003f12:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003f16:	e000      	b.n	8003f1a <ETH_SetDMAConfig+0x2e>
 8003f18:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	7b5b      	ldrb	r3, [r3, #13]
 8003f1e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003f20:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	7f52      	ldrb	r2, [r2, #29]
 8003f26:	2a00      	cmp	r2, #0
 8003f28:	d102      	bne.n	8003f30 <ETH_SetDMAConfig+0x44>
 8003f2a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003f2e:	e000      	b.n	8003f32 <ETH_SetDMAConfig+0x46>
 8003f30:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003f32:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	7b9b      	ldrb	r3, [r3, #14]
 8003f38:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003f3a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003f40:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	7f1b      	ldrb	r3, [r3, #28]
 8003f46:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003f48:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	7f9b      	ldrb	r3, [r3, #30]
 8003f4e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003f50:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003f56:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f5e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003f60:	4313      	orrs	r3, r2
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f70:	461a      	mov	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f82:	2001      	movs	r0, #1
 8003f84:	f7fe fb5e 	bl	8002644 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f90:	461a      	mov	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	791b      	ldrb	r3, [r3, #4]
 8003f9a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003fa0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003fa6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003fac:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003fb4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003fb6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003fbe:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003fc4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fd2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003fe0:	2001      	movs	r0, #1
 8003fe2:	f7fe fb2f 	bl	8002644 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fee:	461a      	mov	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6013      	str	r3, [r2, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	f8de3f23 	.word	0xf8de3f23

08004000 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b0a6      	sub	sp, #152	; 0x98
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004008:	2301      	movs	r3, #1
 800400a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800400e:	2301      	movs	r3, #1
 8004010:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004014:	2300      	movs	r3, #0
 8004016:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004018:	2300      	movs	r3, #0
 800401a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800401e:	2301      	movs	r3, #1
 8004020:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004024:	2300      	movs	r3, #0
 8004026:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800402a:	2301      	movs	r3, #1
 800402c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004030:	2300      	movs	r3, #0
 8004032:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004036:	2300      	movs	r3, #0
 8004038:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800403c:	2300      	movs	r3, #0
 800403e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004040:	2300      	movs	r3, #0
 8004042:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004046:	2300      	movs	r3, #0
 8004048:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800404a:	2300      	movs	r3, #0
 800404c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004050:	2300      	movs	r3, #0
 8004052:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004056:	2300      	movs	r3, #0
 8004058:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800405c:	2300      	movs	r3, #0
 800405e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004062:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004066:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004068:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800406c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800406e:	2300      	movs	r3, #0
 8004070:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004074:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004078:	4619      	mov	r1, r3
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff fe86 	bl	8003d8c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004080:	2301      	movs	r3, #1
 8004082:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004084:	2301      	movs	r3, #1
 8004086:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004088:	2301      	movs	r3, #1
 800408a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800408e:	2301      	movs	r3, #1
 8004090:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004092:	2300      	movs	r3, #0
 8004094:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004096:	2300      	movs	r3, #0
 8004098:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800409c:	2300      	movs	r3, #0
 800409e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80040a2:	2300      	movs	r3, #0
 80040a4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80040a6:	2301      	movs	r3, #1
 80040a8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80040ac:	2301      	movs	r3, #1
 80040ae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80040b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040b4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80040b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040ba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80040bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040c0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80040c2:	2301      	movs	r3, #1
 80040c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80040d0:	f107 0308 	add.w	r3, r7, #8
 80040d4:	4619      	mov	r1, r3
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff ff08 	bl	8003eec <ETH_SetDMAConfig>
}
 80040dc:	bf00      	nop
 80040de:	3798      	adds	r7, #152	; 0x98
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3305      	adds	r3, #5
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	021b      	lsls	r3, r3, #8
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	3204      	adds	r2, #4
 80040fc:	7812      	ldrb	r2, [r2, #0]
 80040fe:	4313      	orrs	r3, r2
 8004100:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	4b11      	ldr	r3, [pc, #68]	; (800414c <ETH_MACAddressConfig+0x68>)
 8004106:	4413      	add	r3, r2
 8004108:	461a      	mov	r2, r3
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3303      	adds	r3, #3
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	061a      	lsls	r2, r3, #24
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	3302      	adds	r3, #2
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	041b      	lsls	r3, r3, #16
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3301      	adds	r3, #1
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	021b      	lsls	r3, r3, #8
 8004128:	4313      	orrs	r3, r2
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	7812      	ldrb	r2, [r2, #0]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	4b06      	ldr	r3, [pc, #24]	; (8004150 <ETH_MACAddressConfig+0x6c>)
 8004136:	4413      	add	r3, r2
 8004138:	461a      	mov	r2, r3
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	6013      	str	r3, [r2, #0]
}
 800413e:	bf00      	nop
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40028040 	.word	0x40028040
 8004150:	40028044 	.word	0x40028044

08004154 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800415c:	2300      	movs	r3, #0
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	e03e      	b.n	80041e0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68d9      	ldr	r1, [r3, #12]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4613      	mov	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	440b      	add	r3, r1
 8004172:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2200      	movs	r2, #0
 800417e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2200      	movs	r2, #0
 8004184:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2200      	movs	r2, #0
 800418a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800418c:	68b9      	ldr	r1, [r7, #8]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	3206      	adds	r2, #6
 8004194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d80c      	bhi.n	80041c4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68d9      	ldr	r1, [r3, #12]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	1c5a      	adds	r2, r3, #1
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	440b      	add	r3, r1
 80041bc:	461a      	mov	r2, r3
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	60da      	str	r2, [r3, #12]
 80041c2:	e004      	b.n	80041ce <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	461a      	mov	r2, r3
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3301      	adds	r3, #1
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d9bd      	bls.n	8004162 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f8:	611a      	str	r2, [r3, #16]
}
 80041fa:	bf00      	nop
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004206:	b480      	push	{r7}
 8004208:	b085      	sub	sp, #20
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	e046      	b.n	80042a2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6919      	ldr	r1, [r3, #16]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4613      	mov	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	440b      	add	r3, r1
 8004224:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2200      	movs	r2, #0
 8004230:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2200      	movs	r2, #0
 8004236:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2200      	movs	r2, #0
 800423c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2200      	movs	r2, #0
 8004242:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2200      	movs	r2, #0
 8004248:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004250:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8004258:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004266:	68b9      	ldr	r1, [r7, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	3212      	adds	r2, #18
 800426e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2b02      	cmp	r3, #2
 8004276:	d80c      	bhi.n	8004292 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6919      	ldr	r1, [r3, #16]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	4613      	mov	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	440b      	add	r3, r1
 800428a:	461a      	mov	r2, r3
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	60da      	str	r2, [r3, #12]
 8004290:	e004      	b.n	800429c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	461a      	mov	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	3301      	adds	r3, #1
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d9b5      	bls.n	8004214 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d2:	60da      	str	r2, [r3, #12]
}
 80042d4:	bf00      	nop
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b08d      	sub	sp, #52	; 0x34
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	3318      	adds	r3, #24
 80042f0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800430a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8004312:	2300      	movs	r3, #0
 8004314:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800431e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004322:	d007      	beq.n	8004334 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004328:	3304      	adds	r3, #4
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004334:	2302      	movs	r3, #2
 8004336:	e0ff      	b.n	8004538 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	3301      	adds	r3, #1
 800433c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	4b7d      	ldr	r3, [pc, #500]	; (8004544 <ETH_Prepare_Tx_Descriptors+0x264>)
 800434e:	4013      	ands	r3, r2
 8004350:	69fa      	ldr	r2, [r7, #28]
 8004352:	6852      	ldr	r2, [r2, #4]
 8004354:	431a      	orrs	r2, r3
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d008      	beq.n	8004378 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	431a      	orrs	r2, r3
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0320 	and.w	r3, r3, #32
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	431a      	orrs	r2, r3
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d005      	beq.n	80043ae <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80043ba:	f3bf 8f5f 	dmb	sy
}
 80043be:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80043cc:	e082      	b.n	80044d4 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d006      	beq.n	80043ee <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	e005      	b.n	80043fa <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80043fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fc:	3301      	adds	r3, #1
 80043fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004402:	2b03      	cmp	r3, #3
 8004404:	d902      	bls.n	800440c <ETH_Prepare_Tx_Descriptors+0x12c>
 8004406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004408:	3b04      	subs	r3, #4
 800440a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004414:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800442a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800442e:	d007      	beq.n	8004440 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004434:	3304      	adds	r3, #4
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d029      	beq.n	8004494 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800444c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800444e:	2300      	movs	r3, #0
 8004450:	62bb      	str	r3, [r7, #40]	; 0x28
 8004452:	e019      	b.n	8004488 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8004454:	f3bf 8f5f 	dmb	sy
}
 8004458:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004468:	3301      	adds	r3, #1
 800446a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800446c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446e:	2b03      	cmp	r3, #3
 8004470:	d902      	bls.n	8004478 <ETH_Prepare_Tx_Descriptors+0x198>
 8004472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004474:	3b04      	subs	r3, #4
 8004476:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800447c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004480:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8004482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004484:	3301      	adds	r3, #1
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28
 8004488:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	429a      	cmp	r2, r3
 800448e:	d3e1      	bcc.n	8004454 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8004490:	2302      	movs	r3, #2
 8004492:	e051      	b.n	8004538 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	3301      	adds	r3, #1
 8004498:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	461a      	mov	r2, r3
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	4b25      	ldr	r3, [pc, #148]	; (8004544 <ETH_Prepare_Tx_Descriptors+0x264>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	6852      	ldr	r2, [r2, #4]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	3301      	adds	r3, #1
 80044c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80044c2:	f3bf 8f5f 	dmb	sy
}
 80044c6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f47f af78 	bne.w	80043ce <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d006      	beq.n	80044f2 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	e005      	b.n	80044fe <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800450e:	6979      	ldr	r1, [r7, #20]
 8004510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004512:	3304      	adds	r3, #4
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	440b      	add	r3, r1
 8004518:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800451e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004520:	b672      	cpsid	i
}
 8004522:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	4413      	add	r3, r2
 800452c:	1c5a      	adds	r2, r3, #1
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004532:	b662      	cpsie	i
}
 8004534:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3734      	adds	r7, #52	; 0x34
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	ffffe000 	.word	0xffffe000

08004548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004548:	b480      	push	{r7}
 800454a:	b089      	sub	sp, #36	; 0x24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004552:	2300      	movs	r3, #0
 8004554:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004556:	2300      	movs	r3, #0
 8004558:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800455a:	2300      	movs	r3, #0
 800455c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800455e:	2300      	movs	r3, #0
 8004560:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004562:	2300      	movs	r3, #0
 8004564:	61fb      	str	r3, [r7, #28]
 8004566:	e175      	b.n	8004854 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004568:	2201      	movs	r2, #1
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	4013      	ands	r3, r2
 800457a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	429a      	cmp	r2, r3
 8004582:	f040 8164 	bne.w	800484e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f003 0303 	and.w	r3, r3, #3
 800458e:	2b01      	cmp	r3, #1
 8004590:	d005      	beq.n	800459e <HAL_GPIO_Init+0x56>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d130      	bne.n	8004600 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	2203      	movs	r2, #3
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	43db      	mvns	r3, r3
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	4013      	ands	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045d4:	2201      	movs	r2, #1
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	43db      	mvns	r3, r3
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	4013      	ands	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	091b      	lsrs	r3, r3, #4
 80045ea:	f003 0201 	and.w	r2, r3, #1
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	2b03      	cmp	r3, #3
 800460a:	d017      	beq.n	800463c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	2203      	movs	r2, #3
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43db      	mvns	r3, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4013      	ands	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	4313      	orrs	r3, r2
 8004634:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f003 0303 	and.w	r3, r3, #3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d123      	bne.n	8004690 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	08da      	lsrs	r2, r3, #3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3208      	adds	r2, #8
 8004650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	220f      	movs	r2, #15
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	43db      	mvns	r3, r3
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	4013      	ands	r3, r2
 800466a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	4313      	orrs	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	08da      	lsrs	r2, r3, #3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3208      	adds	r2, #8
 800468a:	69b9      	ldr	r1, [r7, #24]
 800468c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	2203      	movs	r2, #3
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	43db      	mvns	r3, r3
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	4013      	ands	r3, r2
 80046a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f003 0203 	and.w	r2, r3, #3
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 80be 	beq.w	800484e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046d2:	4b66      	ldr	r3, [pc, #408]	; (800486c <HAL_GPIO_Init+0x324>)
 80046d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d6:	4a65      	ldr	r2, [pc, #404]	; (800486c <HAL_GPIO_Init+0x324>)
 80046d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046dc:	6453      	str	r3, [r2, #68]	; 0x44
 80046de:	4b63      	ldr	r3, [pc, #396]	; (800486c <HAL_GPIO_Init+0x324>)
 80046e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80046ea:	4a61      	ldr	r2, [pc, #388]	; (8004870 <HAL_GPIO_Init+0x328>)
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	089b      	lsrs	r3, r3, #2
 80046f0:	3302      	adds	r3, #2
 80046f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	220f      	movs	r2, #15
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	43db      	mvns	r3, r3
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4013      	ands	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a58      	ldr	r2, [pc, #352]	; (8004874 <HAL_GPIO_Init+0x32c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d037      	beq.n	8004786 <HAL_GPIO_Init+0x23e>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a57      	ldr	r2, [pc, #348]	; (8004878 <HAL_GPIO_Init+0x330>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d031      	beq.n	8004782 <HAL_GPIO_Init+0x23a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a56      	ldr	r2, [pc, #344]	; (800487c <HAL_GPIO_Init+0x334>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d02b      	beq.n	800477e <HAL_GPIO_Init+0x236>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a55      	ldr	r2, [pc, #340]	; (8004880 <HAL_GPIO_Init+0x338>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d025      	beq.n	800477a <HAL_GPIO_Init+0x232>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a54      	ldr	r2, [pc, #336]	; (8004884 <HAL_GPIO_Init+0x33c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d01f      	beq.n	8004776 <HAL_GPIO_Init+0x22e>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a53      	ldr	r2, [pc, #332]	; (8004888 <HAL_GPIO_Init+0x340>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d019      	beq.n	8004772 <HAL_GPIO_Init+0x22a>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a52      	ldr	r2, [pc, #328]	; (800488c <HAL_GPIO_Init+0x344>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d013      	beq.n	800476e <HAL_GPIO_Init+0x226>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a51      	ldr	r2, [pc, #324]	; (8004890 <HAL_GPIO_Init+0x348>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00d      	beq.n	800476a <HAL_GPIO_Init+0x222>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a50      	ldr	r2, [pc, #320]	; (8004894 <HAL_GPIO_Init+0x34c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d007      	beq.n	8004766 <HAL_GPIO_Init+0x21e>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a4f      	ldr	r2, [pc, #316]	; (8004898 <HAL_GPIO_Init+0x350>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d101      	bne.n	8004762 <HAL_GPIO_Init+0x21a>
 800475e:	2309      	movs	r3, #9
 8004760:	e012      	b.n	8004788 <HAL_GPIO_Init+0x240>
 8004762:	230a      	movs	r3, #10
 8004764:	e010      	b.n	8004788 <HAL_GPIO_Init+0x240>
 8004766:	2308      	movs	r3, #8
 8004768:	e00e      	b.n	8004788 <HAL_GPIO_Init+0x240>
 800476a:	2307      	movs	r3, #7
 800476c:	e00c      	b.n	8004788 <HAL_GPIO_Init+0x240>
 800476e:	2306      	movs	r3, #6
 8004770:	e00a      	b.n	8004788 <HAL_GPIO_Init+0x240>
 8004772:	2305      	movs	r3, #5
 8004774:	e008      	b.n	8004788 <HAL_GPIO_Init+0x240>
 8004776:	2304      	movs	r3, #4
 8004778:	e006      	b.n	8004788 <HAL_GPIO_Init+0x240>
 800477a:	2303      	movs	r3, #3
 800477c:	e004      	b.n	8004788 <HAL_GPIO_Init+0x240>
 800477e:	2302      	movs	r3, #2
 8004780:	e002      	b.n	8004788 <HAL_GPIO_Init+0x240>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <HAL_GPIO_Init+0x240>
 8004786:	2300      	movs	r3, #0
 8004788:	69fa      	ldr	r2, [r7, #28]
 800478a:	f002 0203 	and.w	r2, r2, #3
 800478e:	0092      	lsls	r2, r2, #2
 8004790:	4093      	lsls	r3, r2
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4313      	orrs	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004798:	4935      	ldr	r1, [pc, #212]	; (8004870 <HAL_GPIO_Init+0x328>)
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	089b      	lsrs	r3, r3, #2
 800479e:	3302      	adds	r3, #2
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047a6:	4b3d      	ldr	r3, [pc, #244]	; (800489c <HAL_GPIO_Init+0x354>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	43db      	mvns	r3, r3
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	4013      	ands	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047ca:	4a34      	ldr	r2, [pc, #208]	; (800489c <HAL_GPIO_Init+0x354>)
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047d0:	4b32      	ldr	r3, [pc, #200]	; (800489c <HAL_GPIO_Init+0x354>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	43db      	mvns	r3, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4013      	ands	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047f4:	4a29      	ldr	r2, [pc, #164]	; (800489c <HAL_GPIO_Init+0x354>)
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80047fa:	4b28      	ldr	r3, [pc, #160]	; (800489c <HAL_GPIO_Init+0x354>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	43db      	mvns	r3, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	4013      	ands	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800481e:	4a1f      	ldr	r2, [pc, #124]	; (800489c <HAL_GPIO_Init+0x354>)
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004824:	4b1d      	ldr	r3, [pc, #116]	; (800489c <HAL_GPIO_Init+0x354>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	43db      	mvns	r3, r3
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	4013      	ands	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004848:	4a14      	ldr	r2, [pc, #80]	; (800489c <HAL_GPIO_Init+0x354>)
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	3301      	adds	r3, #1
 8004852:	61fb      	str	r3, [r7, #28]
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	2b0f      	cmp	r3, #15
 8004858:	f67f ae86 	bls.w	8004568 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800485c:	bf00      	nop
 800485e:	bf00      	nop
 8004860:	3724      	adds	r7, #36	; 0x24
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40023800 	.word	0x40023800
 8004870:	40013800 	.word	0x40013800
 8004874:	40020000 	.word	0x40020000
 8004878:	40020400 	.word	0x40020400
 800487c:	40020800 	.word	0x40020800
 8004880:	40020c00 	.word	0x40020c00
 8004884:	40021000 	.word	0x40021000
 8004888:	40021400 	.word	0x40021400
 800488c:	40021800 	.word	0x40021800
 8004890:	40021c00 	.word	0x40021c00
 8004894:	40022000 	.word	0x40022000
 8004898:	40022400 	.word	0x40022400
 800489c:	40013c00 	.word	0x40013c00

080048a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	460b      	mov	r3, r1
 80048aa:	807b      	strh	r3, [r7, #2]
 80048ac:	4613      	mov	r3, r2
 80048ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048b0:	787b      	ldrb	r3, [r7, #1]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048b6:	887a      	ldrh	r2, [r7, #2]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80048bc:	e003      	b.n	80048c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80048be:	887b      	ldrh	r3, [r7, #2]
 80048c0:	041a      	lsls	r2, r3, #16
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	619a      	str	r2, [r3, #24]
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
	...

080048d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e07f      	b.n	80049e6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7fd fa6a 	bl	8001dd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2224      	movs	r2, #36	; 0x24
 8004904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0201 	bic.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004924:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004934:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d107      	bne.n	800494e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800494a:	609a      	str	r2, [r3, #8]
 800494c:	e006      	b.n	800495c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689a      	ldr	r2, [r3, #8]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800495a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	2b02      	cmp	r3, #2
 8004962:	d104      	bne.n	800496e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800496c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6859      	ldr	r1, [r3, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	4b1d      	ldr	r3, [pc, #116]	; (80049f0 <HAL_I2C_Init+0x11c>)
 800497a:	430b      	orrs	r3, r1
 800497c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800498c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691a      	ldr	r2, [r3, #16]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	69d9      	ldr	r1, [r3, #28]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a1a      	ldr	r2, [r3, #32]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0201 	orr.w	r2, r2, #1
 80049c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2220      	movs	r2, #32
 80049d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	02008000 	.word	0x02008000

080049f4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af02      	add	r7, sp, #8
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	4608      	mov	r0, r1
 80049fe:	4611      	mov	r1, r2
 8004a00:	461a      	mov	r2, r3
 8004a02:	4603      	mov	r3, r0
 8004a04:	817b      	strh	r3, [r7, #10]
 8004a06:	460b      	mov	r3, r1
 8004a08:	813b      	strh	r3, [r7, #8]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b20      	cmp	r3, #32
 8004a18:	f040 80f9 	bne.w	8004c0e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <HAL_I2C_Mem_Write+0x34>
 8004a22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d105      	bne.n	8004a34 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a2e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0ed      	b.n	8004c10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_I2C_Mem_Write+0x4e>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	e0e6      	b.n	8004c10 <HAL_I2C_Mem_Write+0x21c>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a4a:	f7fd fdef 	bl	800262c <HAL_GetTick>
 8004a4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	2319      	movs	r3, #25
 8004a56:	2201      	movs	r2, #1
 8004a58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f955 	bl	8004d0c <I2C_WaitOnFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e0d1      	b.n	8004c10 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2221      	movs	r2, #33	; 0x21
 8004a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2240      	movs	r2, #64	; 0x40
 8004a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6a3a      	ldr	r2, [r7, #32]
 8004a86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a94:	88f8      	ldrh	r0, [r7, #6]
 8004a96:	893a      	ldrh	r2, [r7, #8]
 8004a98:	8979      	ldrh	r1, [r7, #10]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	9301      	str	r3, [sp, #4]
 8004a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f8b9 	bl	8004c1c <I2C_RequestMemoryWrite>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d005      	beq.n	8004abc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e0a9      	b.n	8004c10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	2bff      	cmp	r3, #255	; 0xff
 8004ac4:	d90e      	bls.n	8004ae4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	22ff      	movs	r2, #255	; 0xff
 8004aca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	8979      	ldrh	r1, [r7, #10]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 fab1 	bl	8005044 <I2C_TransferConfig>
 8004ae2:	e00f      	b.n	8004b04 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	8979      	ldrh	r1, [r7, #10]
 8004af6:	2300      	movs	r3, #0
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 faa0 	bl	8005044 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f93f 	bl	8004d8c <I2C_WaitOnTXISFlagUntilTimeout>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e07b      	b.n	8004c10 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	781a      	ldrb	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	3b01      	subs	r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b40:	3b01      	subs	r3, #1
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d034      	beq.n	8004bbc <HAL_I2C_Mem_Write+0x1c8>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d130      	bne.n	8004bbc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b60:	2200      	movs	r2, #0
 8004b62:	2180      	movs	r1, #128	; 0x80
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 f8d1 	bl	8004d0c <I2C_WaitOnFlagUntilTimeout>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e04d      	b.n	8004c10 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	2bff      	cmp	r3, #255	; 0xff
 8004b7c:	d90e      	bls.n	8004b9c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	22ff      	movs	r2, #255	; 0xff
 8004b82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	8979      	ldrh	r1, [r7, #10]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 fa55 	bl	8005044 <I2C_TransferConfig>
 8004b9a:	e00f      	b.n	8004bbc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	8979      	ldrh	r1, [r7, #10]
 8004bae:	2300      	movs	r3, #0
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 fa44 	bl	8005044 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d19e      	bne.n	8004b04 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 f91e 	bl	8004e0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e01a      	b.n	8004c10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2220      	movs	r2, #32
 8004be0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6859      	ldr	r1, [r3, #4]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	4b0a      	ldr	r3, [pc, #40]	; (8004c18 <HAL_I2C_Mem_Write+0x224>)
 8004bee:	400b      	ands	r3, r1
 8004bf0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	e000      	b.n	8004c10 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004c0e:	2302      	movs	r3, #2
  }
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	fe00e800 	.word	0xfe00e800

08004c1c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af02      	add	r7, sp, #8
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	4608      	mov	r0, r1
 8004c26:	4611      	mov	r1, r2
 8004c28:	461a      	mov	r2, r3
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	817b      	strh	r3, [r7, #10]
 8004c2e:	460b      	mov	r3, r1
 8004c30:	813b      	strh	r3, [r7, #8]
 8004c32:	4613      	mov	r3, r2
 8004c34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004c36:	88fb      	ldrh	r3, [r7, #6]
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	8979      	ldrh	r1, [r7, #10]
 8004c3c:	4b20      	ldr	r3, [pc, #128]	; (8004cc0 <I2C_RequestMemoryWrite+0xa4>)
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 f9fd 	bl	8005044 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c4a:	69fa      	ldr	r2, [r7, #28]
 8004c4c:	69b9      	ldr	r1, [r7, #24]
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 f89c 	bl	8004d8c <I2C_WaitOnTXISFlagUntilTimeout>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e02c      	b.n	8004cb8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c5e:	88fb      	ldrh	r3, [r7, #6]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d105      	bne.n	8004c70 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c64:	893b      	ldrh	r3, [r7, #8]
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	629a      	str	r2, [r3, #40]	; 0x28
 8004c6e:	e015      	b.n	8004c9c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c70:	893b      	ldrh	r3, [r7, #8]
 8004c72:	0a1b      	lsrs	r3, r3, #8
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c7e:	69fa      	ldr	r2, [r7, #28]
 8004c80:	69b9      	ldr	r1, [r7, #24]
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 f882 	bl	8004d8c <I2C_WaitOnTXISFlagUntilTimeout>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e012      	b.n	8004cb8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c92:	893b      	ldrh	r3, [r7, #8]
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	2180      	movs	r1, #128	; 0x80
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f000 f830 	bl	8004d0c <I2C_WaitOnFlagUntilTimeout>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e000      	b.n	8004cb8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	80002000 	.word	0x80002000

08004cc4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d103      	bne.n	8004ce2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d007      	beq.n	8004d00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699a      	ldr	r2, [r3, #24]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0201 	orr.w	r2, r2, #1
 8004cfe:	619a      	str	r2, [r3, #24]
  }
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	603b      	str	r3, [r7, #0]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d1c:	e022      	b.n	8004d64 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d24:	d01e      	beq.n	8004d64 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d26:	f7fd fc81 	bl	800262c <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d302      	bcc.n	8004d3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d113      	bne.n	8004d64 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d40:	f043 0220 	orr.w	r2, r3, #32
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e00f      	b.n	8004d84 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699a      	ldr	r2, [r3, #24]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	bf0c      	ite	eq
 8004d74:	2301      	moveq	r3, #1
 8004d76:	2300      	movne	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	79fb      	ldrb	r3, [r7, #7]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d0cd      	beq.n	8004d1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d98:	e02c      	b.n	8004df4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	68b9      	ldr	r1, [r7, #8]
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 f870 	bl	8004e84 <I2C_IsErrorOccurred>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e02a      	b.n	8004e04 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db4:	d01e      	beq.n	8004df4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db6:	f7fd fc39 	bl	800262c <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d302      	bcc.n	8004dcc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d113      	bne.n	8004df4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd0:	f043 0220 	orr.w	r2, r3, #32
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e007      	b.n	8004e04 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d1cb      	bne.n	8004d9a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e18:	e028      	b.n	8004e6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	68b9      	ldr	r1, [r7, #8]
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f830 	bl	8004e84 <I2C_IsErrorOccurred>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e026      	b.n	8004e7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e2e:	f7fd fbfd 	bl	800262c <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d302      	bcc.n	8004e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d113      	bne.n	8004e6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e48:	f043 0220 	orr.w	r2, r3, #32
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e007      	b.n	8004e7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	f003 0320 	and.w	r3, r3, #32
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	d1cf      	bne.n	8004e1a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08a      	sub	sp, #40	; 0x28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	f003 0310 	and.w	r3, r3, #16
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d068      	beq.n	8004f82 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2210      	movs	r2, #16
 8004eb6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004eb8:	e049      	b.n	8004f4e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec0:	d045      	beq.n	8004f4e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ec2:	f7fd fbb3 	bl	800262c <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d302      	bcc.n	8004ed8 <I2C_IsErrorOccurred+0x54>
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d13a      	bne.n	8004f4e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ee2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004eea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004efa:	d121      	bne.n	8004f40 <I2C_IsErrorOccurred+0xbc>
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f02:	d01d      	beq.n	8004f40 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004f04:	7cfb      	ldrb	r3, [r7, #19]
 8004f06:	2b20      	cmp	r3, #32
 8004f08:	d01a      	beq.n	8004f40 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f18:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004f1a:	f7fd fb87 	bl	800262c <HAL_GetTick>
 8004f1e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f20:	e00e      	b.n	8004f40 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004f22:	f7fd fb83 	bl	800262c <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b19      	cmp	r3, #25
 8004f2e:	d907      	bls.n	8004f40 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	f043 0320 	orr.w	r3, r3, #32
 8004f36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004f3e:	e006      	b.n	8004f4e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b20      	cmp	r3, #32
 8004f4c:	d1e9      	bne.n	8004f22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	f003 0320 	and.w	r3, r3, #32
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d003      	beq.n	8004f64 <I2C_IsErrorOccurred+0xe0>
 8004f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0aa      	beq.n	8004eba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d103      	bne.n	8004f74 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2220      	movs	r2, #32
 8004f72:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004f74:	6a3b      	ldr	r3, [r7, #32]
 8004f76:	f043 0304 	orr.w	r3, r3, #4
 8004f7a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00b      	beq.n	8004fac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	f043 0301 	orr.w	r3, r3, #1
 8004f9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fa4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00b      	beq.n	8004fce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	f043 0308 	orr.w	r3, r3, #8
 8004fbc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fc6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00b      	beq.n	8004ff0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	f043 0302 	orr.w	r3, r3, #2
 8004fde:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fe8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01c      	beq.n	8005032 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f7ff fe63 	bl	8004cc4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6859      	ldr	r1, [r3, #4]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	4b0d      	ldr	r3, [pc, #52]	; (8005040 <I2C_IsErrorOccurred+0x1bc>)
 800500a:	400b      	ands	r3, r1
 800500c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	431a      	orrs	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2220      	movs	r2, #32
 800501e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005032:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005036:	4618      	mov	r0, r3
 8005038:	3728      	adds	r7, #40	; 0x28
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	fe00e800 	.word	0xfe00e800

08005044 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	607b      	str	r3, [r7, #4]
 800504e:	460b      	mov	r3, r1
 8005050:	817b      	strh	r3, [r7, #10]
 8005052:	4613      	mov	r3, r2
 8005054:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005056:	897b      	ldrh	r3, [r7, #10]
 8005058:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800505c:	7a7b      	ldrb	r3, [r7, #9]
 800505e:	041b      	lsls	r3, r3, #16
 8005060:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005064:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	4313      	orrs	r3, r2
 800506e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005072:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	0d5b      	lsrs	r3, r3, #21
 800507e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005082:	4b08      	ldr	r3, [pc, #32]	; (80050a4 <I2C_TransferConfig+0x60>)
 8005084:	430b      	orrs	r3, r1
 8005086:	43db      	mvns	r3, r3
 8005088:	ea02 0103 	and.w	r1, r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	430a      	orrs	r2, r1
 8005094:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005096:	bf00      	nop
 8005098:	371c      	adds	r7, #28
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	03ff63ff 	.word	0x03ff63ff

080050a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b20      	cmp	r3, #32
 80050bc:	d138      	bne.n	8005130 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80050c8:	2302      	movs	r3, #2
 80050ca:	e032      	b.n	8005132 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2224      	movs	r2, #36	; 0x24
 80050d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0201 	bic.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6819      	ldr	r1, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0201 	orr.w	r2, r2, #1
 800511a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2220      	movs	r2, #32
 8005120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	e000      	b.n	8005132 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005130:	2302      	movs	r3, #2
  }
}
 8005132:	4618      	mov	r0, r3
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800513e:	b480      	push	{r7}
 8005140:	b085      	sub	sp, #20
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b20      	cmp	r3, #32
 8005152:	d139      	bne.n	80051c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800515a:	2b01      	cmp	r3, #1
 800515c:	d101      	bne.n	8005162 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800515e:	2302      	movs	r3, #2
 8005160:	e033      	b.n	80051ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2224      	movs	r2, #36	; 0x24
 800516e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0201 	bic.w	r2, r2, #1
 8005180:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005190:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	021b      	lsls	r3, r3, #8
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4313      	orrs	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 0201 	orr.w	r2, r2, #1
 80051b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	e000      	b.n	80051ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80051c8:	2302      	movs	r3, #2
  }
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80051d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051d8:	b08f      	sub	sp, #60	; 0x3c
 80051da:	af0a      	add	r7, sp, #40	; 0x28
 80051dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e116      	b.n	8005416 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7fc fea4 	bl	8001f50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2203      	movs	r2, #3
 800520c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005218:	2b00      	cmp	r3, #0
 800521a:	d102      	bne.n	8005222 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f001 fe92 	bl	8006f50 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	603b      	str	r3, [r7, #0]
 8005232:	687e      	ldr	r6, [r7, #4]
 8005234:	466d      	mov	r5, sp
 8005236:	f106 0410 	add.w	r4, r6, #16
 800523a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800523c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800523e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005240:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005242:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005246:	e885 0003 	stmia.w	r5, {r0, r1}
 800524a:	1d33      	adds	r3, r6, #4
 800524c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800524e:	6838      	ldr	r0, [r7, #0]
 8005250:	f001 fe26 	bl	8006ea0 <USB_CoreInit>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d005      	beq.n	8005266 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2202      	movs	r2, #2
 800525e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e0d7      	b.n	8005416 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2100      	movs	r1, #0
 800526c:	4618      	mov	r0, r3
 800526e:	f001 fe80 	bl	8006f72 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005272:	2300      	movs	r3, #0
 8005274:	73fb      	strb	r3, [r7, #15]
 8005276:	e04a      	b.n	800530e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005278:	7bfa      	ldrb	r2, [r7, #15]
 800527a:	6879      	ldr	r1, [r7, #4]
 800527c:	4613      	mov	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	333d      	adds	r3, #61	; 0x3d
 8005288:	2201      	movs	r2, #1
 800528a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800528c:	7bfa      	ldrb	r2, [r7, #15]
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	4613      	mov	r3, r2
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	4413      	add	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	333c      	adds	r3, #60	; 0x3c
 800529c:	7bfa      	ldrb	r2, [r7, #15]
 800529e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80052a0:	7bfa      	ldrb	r2, [r7, #15]
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
 80052a4:	b298      	uxth	r0, r3
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	4613      	mov	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	3344      	adds	r3, #68	; 0x44
 80052b4:	4602      	mov	r2, r0
 80052b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80052b8:	7bfa      	ldrb	r2, [r7, #15]
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	4613      	mov	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	3340      	adds	r3, #64	; 0x40
 80052c8:	2200      	movs	r2, #0
 80052ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80052cc:	7bfa      	ldrb	r2, [r7, #15]
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	4613      	mov	r3, r2
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	4413      	add	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	3348      	adds	r3, #72	; 0x48
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80052e0:	7bfa      	ldrb	r2, [r7, #15]
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	4613      	mov	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	4413      	add	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	440b      	add	r3, r1
 80052ee:	334c      	adds	r3, #76	; 0x4c
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80052f4:	7bfa      	ldrb	r2, [r7, #15]
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	4613      	mov	r3, r2
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	4413      	add	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	440b      	add	r3, r1
 8005302:	3354      	adds	r3, #84	; 0x54
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005308:	7bfb      	ldrb	r3, [r7, #15]
 800530a:	3301      	adds	r3, #1
 800530c:	73fb      	strb	r3, [r7, #15]
 800530e:	7bfa      	ldrb	r2, [r7, #15]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	429a      	cmp	r2, r3
 8005316:	d3af      	bcc.n	8005278 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005318:	2300      	movs	r3, #0
 800531a:	73fb      	strb	r3, [r7, #15]
 800531c:	e044      	b.n	80053a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800531e:	7bfa      	ldrb	r2, [r7, #15]
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005330:	2200      	movs	r2, #0
 8005332:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005334:	7bfa      	ldrb	r2, [r7, #15]
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	4613      	mov	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	4413      	add	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	440b      	add	r3, r1
 8005342:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005346:	7bfa      	ldrb	r2, [r7, #15]
 8005348:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800534a:	7bfa      	ldrb	r2, [r7, #15]
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	4613      	mov	r3, r2
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	440b      	add	r3, r1
 8005358:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800535c:	2200      	movs	r2, #0
 800535e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005360:	7bfa      	ldrb	r2, [r7, #15]
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	4613      	mov	r3, r2
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	4413      	add	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	440b      	add	r3, r1
 800536e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005376:	7bfa      	ldrb	r2, [r7, #15]
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	4613      	mov	r3, r2
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	440b      	add	r3, r1
 8005384:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800538c:	7bfa      	ldrb	r2, [r7, #15]
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	4613      	mov	r3, r2
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	4413      	add	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	440b      	add	r3, r1
 800539a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800539e:	2200      	movs	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053a2:	7bfb      	ldrb	r3, [r7, #15]
 80053a4:	3301      	adds	r3, #1
 80053a6:	73fb      	strb	r3, [r7, #15]
 80053a8:	7bfa      	ldrb	r2, [r7, #15]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d3b5      	bcc.n	800531e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	603b      	str	r3, [r7, #0]
 80053b8:	687e      	ldr	r6, [r7, #4]
 80053ba:	466d      	mov	r5, sp
 80053bc:	f106 0410 	add.w	r4, r6, #16
 80053c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80053d0:	1d33      	adds	r3, r6, #4
 80053d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053d4:	6838      	ldr	r0, [r7, #0]
 80053d6:	f001 fe19 	bl	800700c <USB_DevInit>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d005      	beq.n	80053ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e014      	b.n	8005416 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	2b01      	cmp	r3, #1
 8005402:	d102      	bne.n	800540a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 f80b 	bl	8005420 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f001 ffd7 	bl	80073c2 <USB_DevDisconnect>

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005420 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800544e:	4b05      	ldr	r3, [pc, #20]	; (8005464 <HAL_PCDEx_ActivateLPM+0x44>)
 8005450:	4313      	orrs	r3, r2
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	10000003 	.word	0x10000003

08005468 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800546c:	4b05      	ldr	r3, [pc, #20]	; (8005484 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a04      	ldr	r2, [pc, #16]	; (8005484 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005476:	6013      	str	r3, [r2, #0]
}
 8005478:	bf00      	nop
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	40007000 	.word	0x40007000

08005488 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005490:	2300      	movs	r3, #0
 8005492:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e291      	b.n	80059c2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 8087 	beq.w	80055ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054ac:	4b96      	ldr	r3, [pc, #600]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f003 030c 	and.w	r3, r3, #12
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d00c      	beq.n	80054d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054b8:	4b93      	ldr	r3, [pc, #588]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f003 030c 	and.w	r3, r3, #12
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d112      	bne.n	80054ea <HAL_RCC_OscConfig+0x62>
 80054c4:	4b90      	ldr	r3, [pc, #576]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054d0:	d10b      	bne.n	80054ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d2:	4b8d      	ldr	r3, [pc, #564]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d06c      	beq.n	80055b8 <HAL_RCC_OscConfig+0x130>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d168      	bne.n	80055b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e26b      	b.n	80059c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f2:	d106      	bne.n	8005502 <HAL_RCC_OscConfig+0x7a>
 80054f4:	4b84      	ldr	r3, [pc, #528]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a83      	ldr	r2, [pc, #524]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 80054fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	e02e      	b.n	8005560 <HAL_RCC_OscConfig+0xd8>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10c      	bne.n	8005524 <HAL_RCC_OscConfig+0x9c>
 800550a:	4b7f      	ldr	r3, [pc, #508]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a7e      	ldr	r2, [pc, #504]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 8005510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	4b7c      	ldr	r3, [pc, #496]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a7b      	ldr	r2, [pc, #492]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 800551c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	e01d      	b.n	8005560 <HAL_RCC_OscConfig+0xd8>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800552c:	d10c      	bne.n	8005548 <HAL_RCC_OscConfig+0xc0>
 800552e:	4b76      	ldr	r3, [pc, #472]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a75      	ldr	r2, [pc, #468]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 8005534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	4b73      	ldr	r3, [pc, #460]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a72      	ldr	r2, [pc, #456]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 8005540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005544:	6013      	str	r3, [r2, #0]
 8005546:	e00b      	b.n	8005560 <HAL_RCC_OscConfig+0xd8>
 8005548:	4b6f      	ldr	r3, [pc, #444]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a6e      	ldr	r2, [pc, #440]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 800554e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	4b6c      	ldr	r3, [pc, #432]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a6b      	ldr	r2, [pc, #428]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 800555a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800555e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d013      	beq.n	8005590 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005568:	f7fd f860 	bl	800262c <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005570:	f7fd f85c 	bl	800262c <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b64      	cmp	r3, #100	; 0x64
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e21f      	b.n	80059c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005582:	4b61      	ldr	r3, [pc, #388]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0f0      	beq.n	8005570 <HAL_RCC_OscConfig+0xe8>
 800558e:	e014      	b.n	80055ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005590:	f7fd f84c 	bl	800262c <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005598:	f7fd f848 	bl	800262c <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b64      	cmp	r3, #100	; 0x64
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e20b      	b.n	80059c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055aa:	4b57      	ldr	r3, [pc, #348]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1f0      	bne.n	8005598 <HAL_RCC_OscConfig+0x110>
 80055b6:	e000      	b.n	80055ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d069      	beq.n	800569a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80055c6:	4b50      	ldr	r3, [pc, #320]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 030c 	and.w	r3, r3, #12
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00b      	beq.n	80055ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055d2:	4b4d      	ldr	r3, [pc, #308]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f003 030c 	and.w	r3, r3, #12
 80055da:	2b08      	cmp	r3, #8
 80055dc:	d11c      	bne.n	8005618 <HAL_RCC_OscConfig+0x190>
 80055de:	4b4a      	ldr	r3, [pc, #296]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d116      	bne.n	8005618 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ea:	4b47      	ldr	r3, [pc, #284]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <HAL_RCC_OscConfig+0x17a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d001      	beq.n	8005602 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e1df      	b.n	80059c2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005602:	4b41      	ldr	r3, [pc, #260]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	493d      	ldr	r1, [pc, #244]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 8005612:	4313      	orrs	r3, r2
 8005614:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005616:	e040      	b.n	800569a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d023      	beq.n	8005668 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005620:	4b39      	ldr	r3, [pc, #228]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a38      	ldr	r2, [pc, #224]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 8005626:	f043 0301 	orr.w	r3, r3, #1
 800562a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562c:	f7fc fffe 	bl	800262c <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005634:	f7fc fffa 	bl	800262c <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e1bd      	b.n	80059c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005646:	4b30      	ldr	r3, [pc, #192]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0f0      	beq.n	8005634 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005652:	4b2d      	ldr	r3, [pc, #180]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	4929      	ldr	r1, [pc, #164]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 8005662:	4313      	orrs	r3, r2
 8005664:	600b      	str	r3, [r1, #0]
 8005666:	e018      	b.n	800569a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005668:	4b27      	ldr	r3, [pc, #156]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a26      	ldr	r2, [pc, #152]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 800566e:	f023 0301 	bic.w	r3, r3, #1
 8005672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005674:	f7fc ffda 	bl	800262c <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800567c:	f7fc ffd6 	bl	800262c <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e199      	b.n	80059c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800568e:	4b1e      	ldr	r3, [pc, #120]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1f0      	bne.n	800567c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0308 	and.w	r3, r3, #8
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d038      	beq.n	8005718 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d019      	beq.n	80056e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056ae:	4b16      	ldr	r3, [pc, #88]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 80056b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056b2:	4a15      	ldr	r2, [pc, #84]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 80056b4:	f043 0301 	orr.w	r3, r3, #1
 80056b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ba:	f7fc ffb7 	bl	800262c <HAL_GetTick>
 80056be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056c2:	f7fc ffb3 	bl	800262c <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e176      	b.n	80059c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056d4:	4b0c      	ldr	r3, [pc, #48]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 80056d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0f0      	beq.n	80056c2 <HAL_RCC_OscConfig+0x23a>
 80056e0:	e01a      	b.n	8005718 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056e2:	4b09      	ldr	r3, [pc, #36]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 80056e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e6:	4a08      	ldr	r2, [pc, #32]	; (8005708 <HAL_RCC_OscConfig+0x280>)
 80056e8:	f023 0301 	bic.w	r3, r3, #1
 80056ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ee:	f7fc ff9d 	bl	800262c <HAL_GetTick>
 80056f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056f4:	e00a      	b.n	800570c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056f6:	f7fc ff99 	bl	800262c <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d903      	bls.n	800570c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e15c      	b.n	80059c2 <HAL_RCC_OscConfig+0x53a>
 8005708:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800570c:	4b91      	ldr	r3, [pc, #580]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 800570e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1ee      	bne.n	80056f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 80a4 	beq.w	800586e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005726:	4b8b      	ldr	r3, [pc, #556]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10d      	bne.n	800574e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005732:	4b88      	ldr	r3, [pc, #544]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	4a87      	ldr	r2, [pc, #540]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 8005738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800573c:	6413      	str	r3, [r2, #64]	; 0x40
 800573e:	4b85      	ldr	r3, [pc, #532]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005746:	60bb      	str	r3, [r7, #8]
 8005748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800574a:	2301      	movs	r3, #1
 800574c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800574e:	4b82      	ldr	r3, [pc, #520]	; (8005958 <HAL_RCC_OscConfig+0x4d0>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005756:	2b00      	cmp	r3, #0
 8005758:	d118      	bne.n	800578c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800575a:	4b7f      	ldr	r3, [pc, #508]	; (8005958 <HAL_RCC_OscConfig+0x4d0>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a7e      	ldr	r2, [pc, #504]	; (8005958 <HAL_RCC_OscConfig+0x4d0>)
 8005760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005766:	f7fc ff61 	bl	800262c <HAL_GetTick>
 800576a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800576c:	e008      	b.n	8005780 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800576e:	f7fc ff5d 	bl	800262c <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b64      	cmp	r3, #100	; 0x64
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e120      	b.n	80059c2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005780:	4b75      	ldr	r3, [pc, #468]	; (8005958 <HAL_RCC_OscConfig+0x4d0>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0f0      	beq.n	800576e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d106      	bne.n	80057a2 <HAL_RCC_OscConfig+0x31a>
 8005794:	4b6f      	ldr	r3, [pc, #444]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 8005796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005798:	4a6e      	ldr	r2, [pc, #440]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 800579a:	f043 0301 	orr.w	r3, r3, #1
 800579e:	6713      	str	r3, [r2, #112]	; 0x70
 80057a0:	e02d      	b.n	80057fe <HAL_RCC_OscConfig+0x376>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10c      	bne.n	80057c4 <HAL_RCC_OscConfig+0x33c>
 80057aa:	4b6a      	ldr	r3, [pc, #424]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 80057ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ae:	4a69      	ldr	r2, [pc, #420]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 80057b0:	f023 0301 	bic.w	r3, r3, #1
 80057b4:	6713      	str	r3, [r2, #112]	; 0x70
 80057b6:	4b67      	ldr	r3, [pc, #412]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 80057b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ba:	4a66      	ldr	r2, [pc, #408]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 80057bc:	f023 0304 	bic.w	r3, r3, #4
 80057c0:	6713      	str	r3, [r2, #112]	; 0x70
 80057c2:	e01c      	b.n	80057fe <HAL_RCC_OscConfig+0x376>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	2b05      	cmp	r3, #5
 80057ca:	d10c      	bne.n	80057e6 <HAL_RCC_OscConfig+0x35e>
 80057cc:	4b61      	ldr	r3, [pc, #388]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 80057ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d0:	4a60      	ldr	r2, [pc, #384]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 80057d2:	f043 0304 	orr.w	r3, r3, #4
 80057d6:	6713      	str	r3, [r2, #112]	; 0x70
 80057d8:	4b5e      	ldr	r3, [pc, #376]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 80057da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057dc:	4a5d      	ldr	r2, [pc, #372]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 80057de:	f043 0301 	orr.w	r3, r3, #1
 80057e2:	6713      	str	r3, [r2, #112]	; 0x70
 80057e4:	e00b      	b.n	80057fe <HAL_RCC_OscConfig+0x376>
 80057e6:	4b5b      	ldr	r3, [pc, #364]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 80057e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ea:	4a5a      	ldr	r2, [pc, #360]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 80057ec:	f023 0301 	bic.w	r3, r3, #1
 80057f0:	6713      	str	r3, [r2, #112]	; 0x70
 80057f2:	4b58      	ldr	r3, [pc, #352]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 80057f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f6:	4a57      	ldr	r2, [pc, #348]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 80057f8:	f023 0304 	bic.w	r3, r3, #4
 80057fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d015      	beq.n	8005832 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005806:	f7fc ff11 	bl	800262c <HAL_GetTick>
 800580a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800580c:	e00a      	b.n	8005824 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800580e:	f7fc ff0d 	bl	800262c <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	f241 3288 	movw	r2, #5000	; 0x1388
 800581c:	4293      	cmp	r3, r2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e0ce      	b.n	80059c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005824:	4b4b      	ldr	r3, [pc, #300]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 8005826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0ee      	beq.n	800580e <HAL_RCC_OscConfig+0x386>
 8005830:	e014      	b.n	800585c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005832:	f7fc fefb 	bl	800262c <HAL_GetTick>
 8005836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005838:	e00a      	b.n	8005850 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800583a:	f7fc fef7 	bl	800262c <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	f241 3288 	movw	r2, #5000	; 0x1388
 8005848:	4293      	cmp	r3, r2
 800584a:	d901      	bls.n	8005850 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e0b8      	b.n	80059c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005850:	4b40      	ldr	r3, [pc, #256]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 8005852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1ee      	bne.n	800583a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800585c:	7dfb      	ldrb	r3, [r7, #23]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d105      	bne.n	800586e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005862:	4b3c      	ldr	r3, [pc, #240]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	4a3b      	ldr	r2, [pc, #236]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 8005868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800586c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 80a4 	beq.w	80059c0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005878:	4b36      	ldr	r3, [pc, #216]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f003 030c 	and.w	r3, r3, #12
 8005880:	2b08      	cmp	r3, #8
 8005882:	d06b      	beq.n	800595c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	2b02      	cmp	r3, #2
 800588a:	d149      	bne.n	8005920 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800588c:	4b31      	ldr	r3, [pc, #196]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a30      	ldr	r2, [pc, #192]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 8005892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005898:	f7fc fec8 	bl	800262c <HAL_GetTick>
 800589c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800589e:	e008      	b.n	80058b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058a0:	f7fc fec4 	bl	800262c <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e087      	b.n	80059c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058b2:	4b28      	ldr	r3, [pc, #160]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1f0      	bne.n	80058a0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	69da      	ldr	r2, [r3, #28]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	019b      	lsls	r3, r3, #6
 80058ce:	431a      	orrs	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d4:	085b      	lsrs	r3, r3, #1
 80058d6:	3b01      	subs	r3, #1
 80058d8:	041b      	lsls	r3, r3, #16
 80058da:	431a      	orrs	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e0:	061b      	lsls	r3, r3, #24
 80058e2:	4313      	orrs	r3, r2
 80058e4:	4a1b      	ldr	r2, [pc, #108]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 80058e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058ea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058ec:	4b19      	ldr	r3, [pc, #100]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a18      	ldr	r2, [pc, #96]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 80058f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f8:	f7fc fe98 	bl	800262c <HAL_GetTick>
 80058fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058fe:	e008      	b.n	8005912 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005900:	f7fc fe94 	bl	800262c <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e057      	b.n	80059c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005912:	4b10      	ldr	r3, [pc, #64]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0f0      	beq.n	8005900 <HAL_RCC_OscConfig+0x478>
 800591e:	e04f      	b.n	80059c0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005920:	4b0c      	ldr	r3, [pc, #48]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a0b      	ldr	r2, [pc, #44]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 8005926:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800592a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800592c:	f7fc fe7e 	bl	800262c <HAL_GetTick>
 8005930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005932:	e008      	b.n	8005946 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005934:	f7fc fe7a 	bl	800262c <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b02      	cmp	r3, #2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e03d      	b.n	80059c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005946:	4b03      	ldr	r3, [pc, #12]	; (8005954 <HAL_RCC_OscConfig+0x4cc>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1f0      	bne.n	8005934 <HAL_RCC_OscConfig+0x4ac>
 8005952:	e035      	b.n	80059c0 <HAL_RCC_OscConfig+0x538>
 8005954:	40023800 	.word	0x40023800
 8005958:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800595c:	4b1b      	ldr	r3, [pc, #108]	; (80059cc <HAL_RCC_OscConfig+0x544>)
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d028      	beq.n	80059bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005974:	429a      	cmp	r2, r3
 8005976:	d121      	bne.n	80059bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005982:	429a      	cmp	r2, r3
 8005984:	d11a      	bne.n	80059bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800598c:	4013      	ands	r3, r2
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005992:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005994:	4293      	cmp	r3, r2
 8005996:	d111      	bne.n	80059bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a2:	085b      	lsrs	r3, r3, #1
 80059a4:	3b01      	subs	r3, #1
 80059a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d107      	bne.n	80059bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d001      	beq.n	80059c0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e000      	b.n	80059c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	40023800 	.word	0x40023800

080059d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80059da:	2300      	movs	r3, #0
 80059dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e0d0      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059e8:	4b6a      	ldr	r3, [pc, #424]	; (8005b94 <HAL_RCC_ClockConfig+0x1c4>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 030f 	and.w	r3, r3, #15
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d910      	bls.n	8005a18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059f6:	4b67      	ldr	r3, [pc, #412]	; (8005b94 <HAL_RCC_ClockConfig+0x1c4>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f023 020f 	bic.w	r2, r3, #15
 80059fe:	4965      	ldr	r1, [pc, #404]	; (8005b94 <HAL_RCC_ClockConfig+0x1c4>)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a06:	4b63      	ldr	r3, [pc, #396]	; (8005b94 <HAL_RCC_ClockConfig+0x1c4>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 030f 	and.w	r3, r3, #15
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d001      	beq.n	8005a18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e0b8      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d020      	beq.n	8005a66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d005      	beq.n	8005a3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a30:	4b59      	ldr	r3, [pc, #356]	; (8005b98 <HAL_RCC_ClockConfig+0x1c8>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	4a58      	ldr	r2, [pc, #352]	; (8005b98 <HAL_RCC_ClockConfig+0x1c8>)
 8005a36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0308 	and.w	r3, r3, #8
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d005      	beq.n	8005a54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a48:	4b53      	ldr	r3, [pc, #332]	; (8005b98 <HAL_RCC_ClockConfig+0x1c8>)
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	4a52      	ldr	r2, [pc, #328]	; (8005b98 <HAL_RCC_ClockConfig+0x1c8>)
 8005a4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a54:	4b50      	ldr	r3, [pc, #320]	; (8005b98 <HAL_RCC_ClockConfig+0x1c8>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	494d      	ldr	r1, [pc, #308]	; (8005b98 <HAL_RCC_ClockConfig+0x1c8>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d040      	beq.n	8005af4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d107      	bne.n	8005a8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a7a:	4b47      	ldr	r3, [pc, #284]	; (8005b98 <HAL_RCC_ClockConfig+0x1c8>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d115      	bne.n	8005ab2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e07f      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d107      	bne.n	8005aa2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a92:	4b41      	ldr	r3, [pc, #260]	; (8005b98 <HAL_RCC_ClockConfig+0x1c8>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d109      	bne.n	8005ab2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e073      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa2:	4b3d      	ldr	r3, [pc, #244]	; (8005b98 <HAL_RCC_ClockConfig+0x1c8>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e06b      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ab2:	4b39      	ldr	r3, [pc, #228]	; (8005b98 <HAL_RCC_ClockConfig+0x1c8>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f023 0203 	bic.w	r2, r3, #3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	4936      	ldr	r1, [pc, #216]	; (8005b98 <HAL_RCC_ClockConfig+0x1c8>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ac4:	f7fc fdb2 	bl	800262c <HAL_GetTick>
 8005ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aca:	e00a      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005acc:	f7fc fdae 	bl	800262c <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e053      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ae2:	4b2d      	ldr	r3, [pc, #180]	; (8005b98 <HAL_RCC_ClockConfig+0x1c8>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f003 020c 	and.w	r2, r3, #12
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d1eb      	bne.n	8005acc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005af4:	4b27      	ldr	r3, [pc, #156]	; (8005b94 <HAL_RCC_ClockConfig+0x1c4>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d210      	bcs.n	8005b24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b02:	4b24      	ldr	r3, [pc, #144]	; (8005b94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f023 020f 	bic.w	r2, r3, #15
 8005b0a:	4922      	ldr	r1, [pc, #136]	; (8005b94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b12:	4b20      	ldr	r3, [pc, #128]	; (8005b94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d001      	beq.n	8005b24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e032      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0304 	and.w	r3, r3, #4
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d008      	beq.n	8005b42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b30:	4b19      	ldr	r3, [pc, #100]	; (8005b98 <HAL_RCC_ClockConfig+0x1c8>)
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	4916      	ldr	r1, [pc, #88]	; (8005b98 <HAL_RCC_ClockConfig+0x1c8>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0308 	and.w	r3, r3, #8
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d009      	beq.n	8005b62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b4e:	4b12      	ldr	r3, [pc, #72]	; (8005b98 <HAL_RCC_ClockConfig+0x1c8>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	490e      	ldr	r1, [pc, #56]	; (8005b98 <HAL_RCC_ClockConfig+0x1c8>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b62:	f000 f821 	bl	8005ba8 <HAL_RCC_GetSysClockFreq>
 8005b66:	4602      	mov	r2, r0
 8005b68:	4b0b      	ldr	r3, [pc, #44]	; (8005b98 <HAL_RCC_ClockConfig+0x1c8>)
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	091b      	lsrs	r3, r3, #4
 8005b6e:	f003 030f 	and.w	r3, r3, #15
 8005b72:	490a      	ldr	r1, [pc, #40]	; (8005b9c <HAL_RCC_ClockConfig+0x1cc>)
 8005b74:	5ccb      	ldrb	r3, [r1, r3]
 8005b76:	fa22 f303 	lsr.w	r3, r2, r3
 8005b7a:	4a09      	ldr	r2, [pc, #36]	; (8005ba0 <HAL_RCC_ClockConfig+0x1d0>)
 8005b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005b7e:	4b09      	ldr	r3, [pc, #36]	; (8005ba4 <HAL_RCC_ClockConfig+0x1d4>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fc fd0e 	bl	80025a4 <HAL_InitTick>

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	40023c00 	.word	0x40023c00
 8005b98:	40023800 	.word	0x40023800
 8005b9c:	0801a144 	.word	0x0801a144
 8005ba0:	20000018 	.word	0x20000018
 8005ba4:	2000001c 	.word	0x2000001c

08005ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bac:	b094      	sub	sp, #80	; 0x50
 8005bae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	647b      	str	r3, [r7, #68]	; 0x44
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bb8:	2300      	movs	r3, #0
 8005bba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bc0:	4b79      	ldr	r3, [pc, #484]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 030c 	and.w	r3, r3, #12
 8005bc8:	2b08      	cmp	r3, #8
 8005bca:	d00d      	beq.n	8005be8 <HAL_RCC_GetSysClockFreq+0x40>
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	f200 80e1 	bhi.w	8005d94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d002      	beq.n	8005bdc <HAL_RCC_GetSysClockFreq+0x34>
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d003      	beq.n	8005be2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005bda:	e0db      	b.n	8005d94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bdc:	4b73      	ldr	r3, [pc, #460]	; (8005dac <HAL_RCC_GetSysClockFreq+0x204>)
 8005bde:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005be0:	e0db      	b.n	8005d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005be2:	4b73      	ldr	r3, [pc, #460]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005be4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005be6:	e0d8      	b.n	8005d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005be8:	4b6f      	ldr	r3, [pc, #444]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bf0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005bf2:	4b6d      	ldr	r3, [pc, #436]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d063      	beq.n	8005cc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bfe:	4b6a      	ldr	r3, [pc, #424]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	099b      	lsrs	r3, r3, #6
 8005c04:	2200      	movs	r2, #0
 8005c06:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c10:	633b      	str	r3, [r7, #48]	; 0x30
 8005c12:	2300      	movs	r3, #0
 8005c14:	637b      	str	r3, [r7, #52]	; 0x34
 8005c16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005c1a:	4622      	mov	r2, r4
 8005c1c:	462b      	mov	r3, r5
 8005c1e:	f04f 0000 	mov.w	r0, #0
 8005c22:	f04f 0100 	mov.w	r1, #0
 8005c26:	0159      	lsls	r1, r3, #5
 8005c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c2c:	0150      	lsls	r0, r2, #5
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	4621      	mov	r1, r4
 8005c34:	1a51      	subs	r1, r2, r1
 8005c36:	6139      	str	r1, [r7, #16]
 8005c38:	4629      	mov	r1, r5
 8005c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	f04f 0200 	mov.w	r2, #0
 8005c44:	f04f 0300 	mov.w	r3, #0
 8005c48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c4c:	4659      	mov	r1, fp
 8005c4e:	018b      	lsls	r3, r1, #6
 8005c50:	4651      	mov	r1, sl
 8005c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c56:	4651      	mov	r1, sl
 8005c58:	018a      	lsls	r2, r1, #6
 8005c5a:	4651      	mov	r1, sl
 8005c5c:	ebb2 0801 	subs.w	r8, r2, r1
 8005c60:	4659      	mov	r1, fp
 8005c62:	eb63 0901 	sbc.w	r9, r3, r1
 8005c66:	f04f 0200 	mov.w	r2, #0
 8005c6a:	f04f 0300 	mov.w	r3, #0
 8005c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c7a:	4690      	mov	r8, r2
 8005c7c:	4699      	mov	r9, r3
 8005c7e:	4623      	mov	r3, r4
 8005c80:	eb18 0303 	adds.w	r3, r8, r3
 8005c84:	60bb      	str	r3, [r7, #8]
 8005c86:	462b      	mov	r3, r5
 8005c88:	eb49 0303 	adc.w	r3, r9, r3
 8005c8c:	60fb      	str	r3, [r7, #12]
 8005c8e:	f04f 0200 	mov.w	r2, #0
 8005c92:	f04f 0300 	mov.w	r3, #0
 8005c96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c9a:	4629      	mov	r1, r5
 8005c9c:	024b      	lsls	r3, r1, #9
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	024a      	lsls	r2, r1, #9
 8005ca8:	4610      	mov	r0, r2
 8005caa:	4619      	mov	r1, r3
 8005cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cae:	2200      	movs	r2, #0
 8005cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cb8:	f7fa fafa 	bl	80002b0 <__aeabi_uldivmod>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cc4:	e058      	b.n	8005d78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cc6:	4b38      	ldr	r3, [pc, #224]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	099b      	lsrs	r3, r3, #6
 8005ccc:	2200      	movs	r2, #0
 8005cce:	4618      	mov	r0, r3
 8005cd0:	4611      	mov	r1, r2
 8005cd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005cd6:	623b      	str	r3, [r7, #32]
 8005cd8:	2300      	movs	r3, #0
 8005cda:	627b      	str	r3, [r7, #36]	; 0x24
 8005cdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ce0:	4642      	mov	r2, r8
 8005ce2:	464b      	mov	r3, r9
 8005ce4:	f04f 0000 	mov.w	r0, #0
 8005ce8:	f04f 0100 	mov.w	r1, #0
 8005cec:	0159      	lsls	r1, r3, #5
 8005cee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cf2:	0150      	lsls	r0, r2, #5
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	4641      	mov	r1, r8
 8005cfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8005cfe:	4649      	mov	r1, r9
 8005d00:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d04:	f04f 0200 	mov.w	r2, #0
 8005d08:	f04f 0300 	mov.w	r3, #0
 8005d0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005d14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005d18:	ebb2 040a 	subs.w	r4, r2, sl
 8005d1c:	eb63 050b 	sbc.w	r5, r3, fp
 8005d20:	f04f 0200 	mov.w	r2, #0
 8005d24:	f04f 0300 	mov.w	r3, #0
 8005d28:	00eb      	lsls	r3, r5, #3
 8005d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d2e:	00e2      	lsls	r2, r4, #3
 8005d30:	4614      	mov	r4, r2
 8005d32:	461d      	mov	r5, r3
 8005d34:	4643      	mov	r3, r8
 8005d36:	18e3      	adds	r3, r4, r3
 8005d38:	603b      	str	r3, [r7, #0]
 8005d3a:	464b      	mov	r3, r9
 8005d3c:	eb45 0303 	adc.w	r3, r5, r3
 8005d40:	607b      	str	r3, [r7, #4]
 8005d42:	f04f 0200 	mov.w	r2, #0
 8005d46:	f04f 0300 	mov.w	r3, #0
 8005d4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d4e:	4629      	mov	r1, r5
 8005d50:	028b      	lsls	r3, r1, #10
 8005d52:	4621      	mov	r1, r4
 8005d54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d58:	4621      	mov	r1, r4
 8005d5a:	028a      	lsls	r2, r1, #10
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	4619      	mov	r1, r3
 8005d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d62:	2200      	movs	r2, #0
 8005d64:	61bb      	str	r3, [r7, #24]
 8005d66:	61fa      	str	r2, [r7, #28]
 8005d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d6c:	f7fa faa0 	bl	80002b0 <__aeabi_uldivmod>
 8005d70:	4602      	mov	r2, r0
 8005d72:	460b      	mov	r3, r1
 8005d74:	4613      	mov	r3, r2
 8005d76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005d78:	4b0b      	ldr	r3, [pc, #44]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	0c1b      	lsrs	r3, r3, #16
 8005d7e:	f003 0303 	and.w	r3, r3, #3
 8005d82:	3301      	adds	r3, #1
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005d88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d92:	e002      	b.n	8005d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d94:	4b05      	ldr	r3, [pc, #20]	; (8005dac <HAL_RCC_GetSysClockFreq+0x204>)
 8005d96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3750      	adds	r7, #80	; 0x50
 8005da0:	46bd      	mov	sp, r7
 8005da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005da6:	bf00      	nop
 8005da8:	40023800 	.word	0x40023800
 8005dac:	00f42400 	.word	0x00f42400
 8005db0:	007a1200 	.word	0x007a1200

08005db4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005db8:	4b03      	ldr	r3, [pc, #12]	; (8005dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005dba:	681b      	ldr	r3, [r3, #0]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	20000018 	.word	0x20000018

08005dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005dd0:	f7ff fff0 	bl	8005db4 <HAL_RCC_GetHCLKFreq>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	4b05      	ldr	r3, [pc, #20]	; (8005dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	0a9b      	lsrs	r3, r3, #10
 8005ddc:	f003 0307 	and.w	r3, r3, #7
 8005de0:	4903      	ldr	r1, [pc, #12]	; (8005df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005de2:	5ccb      	ldrb	r3, [r1, r3]
 8005de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	40023800 	.word	0x40023800
 8005df0:	0801a154 	.word	0x0801a154

08005df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005df8:	f7ff ffdc 	bl	8005db4 <HAL_RCC_GetHCLKFreq>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	0b5b      	lsrs	r3, r3, #13
 8005e04:	f003 0307 	and.w	r3, r3, #7
 8005e08:	4903      	ldr	r1, [pc, #12]	; (8005e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e0a:	5ccb      	ldrb	r3, [r1, r3]
 8005e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	40023800 	.word	0x40023800
 8005e18:	0801a154 	.word	0x0801a154

08005e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b088      	sub	sp, #32
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005e24:	2300      	movs	r3, #0
 8005e26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005e30:	2300      	movs	r3, #0
 8005e32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005e34:	2300      	movs	r3, #0
 8005e36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d012      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e44:	4b69      	ldr	r3, [pc, #420]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	4a68      	ldr	r2, [pc, #416]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005e4e:	6093      	str	r3, [r2, #8]
 8005e50:	4b66      	ldr	r3, [pc, #408]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e52:	689a      	ldr	r2, [r3, #8]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e58:	4964      	ldr	r1, [pc, #400]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005e66:	2301      	movs	r3, #1
 8005e68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d017      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e76:	4b5d      	ldr	r3, [pc, #372]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e84:	4959      	ldr	r1, [pc, #356]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e94:	d101      	bne.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005e96:	2301      	movs	r3, #1
 8005e98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d017      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005eb2:	4b4e      	ldr	r3, [pc, #312]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec0:	494a      	ldr	r1, [pc, #296]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ed0:	d101      	bne.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0320 	and.w	r3, r3, #32
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 808b 	beq.w	8006016 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f00:	4b3a      	ldr	r3, [pc, #232]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f04:	4a39      	ldr	r2, [pc, #228]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8005f0c:	4b37      	ldr	r3, [pc, #220]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f14:	60bb      	str	r3, [r7, #8]
 8005f16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f18:	4b35      	ldr	r3, [pc, #212]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a34      	ldr	r2, [pc, #208]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f24:	f7fc fb82 	bl	800262c <HAL_GetTick>
 8005f28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005f2a:	e008      	b.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f2c:	f7fc fb7e 	bl	800262c <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	2b64      	cmp	r3, #100	; 0x64
 8005f38:	d901      	bls.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e357      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005f3e:	4b2c      	ldr	r3, [pc, #176]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d0f0      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f4a:	4b28      	ldr	r3, [pc, #160]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d035      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d02e      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f68:	4b20      	ldr	r3, [pc, #128]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f72:	4b1e      	ldr	r3, [pc, #120]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f76:	4a1d      	ldr	r2, [pc, #116]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f7c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f7e:	4b1b      	ldr	r3, [pc, #108]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f82:	4a1a      	ldr	r2, [pc, #104]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005f8a:	4a18      	ldr	r2, [pc, #96]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f90:	4b16      	ldr	r3, [pc, #88]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d114      	bne.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9c:	f7fc fb46 	bl	800262c <HAL_GetTick>
 8005fa0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fa2:	e00a      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fa4:	f7fc fb42 	bl	800262c <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d901      	bls.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e319      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fba:	4b0c      	ldr	r3, [pc, #48]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d0ee      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fd2:	d111      	bne.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005fd4:	4b05      	ldr	r3, [pc, #20]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005fe0:	4b04      	ldr	r3, [pc, #16]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005fe2:	400b      	ands	r3, r1
 8005fe4:	4901      	ldr	r1, [pc, #4]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	608b      	str	r3, [r1, #8]
 8005fea:	e00b      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005fec:	40023800 	.word	0x40023800
 8005ff0:	40007000 	.word	0x40007000
 8005ff4:	0ffffcff 	.word	0x0ffffcff
 8005ff8:	4baa      	ldr	r3, [pc, #680]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	4aa9      	ldr	r2, [pc, #676]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ffe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006002:	6093      	str	r3, [r2, #8]
 8006004:	4ba7      	ldr	r3, [pc, #668]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006006:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006010:	49a4      	ldr	r1, [pc, #656]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006012:	4313      	orrs	r3, r2
 8006014:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0310 	and.w	r3, r3, #16
 800601e:	2b00      	cmp	r3, #0
 8006020:	d010      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006022:	4ba0      	ldr	r3, [pc, #640]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006028:	4a9e      	ldr	r2, [pc, #632]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800602a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800602e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006032:	4b9c      	ldr	r3, [pc, #624]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006034:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603c:	4999      	ldr	r1, [pc, #612]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800603e:	4313      	orrs	r3, r2
 8006040:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00a      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006050:	4b94      	ldr	r3, [pc, #592]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006056:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800605e:	4991      	ldr	r1, [pc, #580]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006060:	4313      	orrs	r3, r2
 8006062:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00a      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006072:	4b8c      	ldr	r3, [pc, #560]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006078:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006080:	4988      	ldr	r1, [pc, #544]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006082:	4313      	orrs	r3, r2
 8006084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00a      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006094:	4b83      	ldr	r3, [pc, #524]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060a2:	4980      	ldr	r1, [pc, #512]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00a      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80060b6:	4b7b      	ldr	r3, [pc, #492]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c4:	4977      	ldr	r1, [pc, #476]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00a      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060d8:	4b72      	ldr	r3, [pc, #456]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060de:	f023 0203 	bic.w	r2, r3, #3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e6:	496f      	ldr	r1, [pc, #444]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00a      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060fa:	4b6a      	ldr	r3, [pc, #424]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006100:	f023 020c 	bic.w	r2, r3, #12
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006108:	4966      	ldr	r1, [pc, #408]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800610a:	4313      	orrs	r3, r2
 800610c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00a      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800611c:	4b61      	ldr	r3, [pc, #388]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800611e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006122:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800612a:	495e      	ldr	r1, [pc, #376]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800612c:	4313      	orrs	r3, r2
 800612e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00a      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800613e:	4b59      	ldr	r3, [pc, #356]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006144:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800614c:	4955      	ldr	r1, [pc, #340]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800614e:	4313      	orrs	r3, r2
 8006150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00a      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006160:	4b50      	ldr	r3, [pc, #320]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006166:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616e:	494d      	ldr	r1, [pc, #308]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006170:	4313      	orrs	r3, r2
 8006172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00a      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006182:	4b48      	ldr	r3, [pc, #288]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006188:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006190:	4944      	ldr	r1, [pc, #272]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006192:	4313      	orrs	r3, r2
 8006194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00a      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80061a4:	4b3f      	ldr	r3, [pc, #252]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061b2:	493c      	ldr	r1, [pc, #240]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80061c6:	4b37      	ldr	r3, [pc, #220]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061d4:	4933      	ldr	r1, [pc, #204]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00a      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80061e8:	4b2e      	ldr	r3, [pc, #184]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061f6:	492b      	ldr	r1, [pc, #172]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d011      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800620a:	4b26      	ldr	r3, [pc, #152]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800620c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006210:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006218:	4922      	ldr	r1, [pc, #136]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800621a:	4313      	orrs	r3, r2
 800621c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006224:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006228:	d101      	bne.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800622a:	2301      	movs	r3, #1
 800622c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0308 	and.w	r3, r3, #8
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800623a:	2301      	movs	r3, #1
 800623c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800624a:	4b16      	ldr	r3, [pc, #88]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800624c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006250:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006258:	4912      	ldr	r1, [pc, #72]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800625a:	4313      	orrs	r3, r2
 800625c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00b      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800626c:	4b0d      	ldr	r3, [pc, #52]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800626e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006272:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800627c:	4909      	ldr	r1, [pc, #36]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800627e:	4313      	orrs	r3, r2
 8006280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d006      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 80d9 	beq.w	800644a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006298:	4b02      	ldr	r3, [pc, #8]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a01      	ldr	r2, [pc, #4]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800629e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062a2:	e001      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80062a4:	40023800 	.word	0x40023800
 80062a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062aa:	f7fc f9bf 	bl	800262c <HAL_GetTick>
 80062ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062b0:	e008      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80062b2:	f7fc f9bb 	bl	800262c <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	2b64      	cmp	r3, #100	; 0x64
 80062be:	d901      	bls.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e194      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062c4:	4b6c      	ldr	r3, [pc, #432]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1f0      	bne.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d021      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d11d      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80062e4:	4b64      	ldr	r3, [pc, #400]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062ea:	0c1b      	lsrs	r3, r3, #16
 80062ec:	f003 0303 	and.w	r3, r3, #3
 80062f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80062f2:	4b61      	ldr	r3, [pc, #388]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062f8:	0e1b      	lsrs	r3, r3, #24
 80062fa:	f003 030f 	and.w	r3, r3, #15
 80062fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	019a      	lsls	r2, r3, #6
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	041b      	lsls	r3, r3, #16
 800630a:	431a      	orrs	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	061b      	lsls	r3, r3, #24
 8006310:	431a      	orrs	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	071b      	lsls	r3, r3, #28
 8006318:	4957      	ldr	r1, [pc, #348]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800631a:	4313      	orrs	r3, r2
 800631c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d004      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006334:	d00a      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800633e:	2b00      	cmp	r3, #0
 8006340:	d02e      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800634a:	d129      	bne.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800634c:	4b4a      	ldr	r3, [pc, #296]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800634e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006352:	0c1b      	lsrs	r3, r3, #16
 8006354:	f003 0303 	and.w	r3, r3, #3
 8006358:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800635a:	4b47      	ldr	r3, [pc, #284]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800635c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006360:	0f1b      	lsrs	r3, r3, #28
 8006362:	f003 0307 	and.w	r3, r3, #7
 8006366:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	019a      	lsls	r2, r3, #6
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	041b      	lsls	r3, r3, #16
 8006372:	431a      	orrs	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	061b      	lsls	r3, r3, #24
 800637a:	431a      	orrs	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	071b      	lsls	r3, r3, #28
 8006380:	493d      	ldr	r1, [pc, #244]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006382:	4313      	orrs	r3, r2
 8006384:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006388:	4b3b      	ldr	r3, [pc, #236]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800638a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800638e:	f023 021f 	bic.w	r2, r3, #31
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	3b01      	subs	r3, #1
 8006398:	4937      	ldr	r1, [pc, #220]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800639a:	4313      	orrs	r3, r2
 800639c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d01d      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80063ac:	4b32      	ldr	r3, [pc, #200]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063b2:	0e1b      	lsrs	r3, r3, #24
 80063b4:	f003 030f 	and.w	r3, r3, #15
 80063b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80063ba:	4b2f      	ldr	r3, [pc, #188]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063c0:	0f1b      	lsrs	r3, r3, #28
 80063c2:	f003 0307 	and.w	r3, r3, #7
 80063c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	019a      	lsls	r2, r3, #6
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	041b      	lsls	r3, r3, #16
 80063d4:	431a      	orrs	r2, r3
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	061b      	lsls	r3, r3, #24
 80063da:	431a      	orrs	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	071b      	lsls	r3, r3, #28
 80063e0:	4925      	ldr	r1, [pc, #148]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d011      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	019a      	lsls	r2, r3, #6
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	041b      	lsls	r3, r3, #16
 8006400:	431a      	orrs	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	061b      	lsls	r3, r3, #24
 8006408:	431a      	orrs	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	071b      	lsls	r3, r3, #28
 8006410:	4919      	ldr	r1, [pc, #100]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006412:	4313      	orrs	r3, r2
 8006414:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006418:	4b17      	ldr	r3, [pc, #92]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a16      	ldr	r2, [pc, #88]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800641e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006422:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006424:	f7fc f902 	bl	800262c <HAL_GetTick>
 8006428:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800642a:	e008      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800642c:	f7fc f8fe 	bl	800262c <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b64      	cmp	r3, #100	; 0x64
 8006438:	d901      	bls.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e0d7      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800643e:	4b0e      	ldr	r3, [pc, #56]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d0f0      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	2b01      	cmp	r3, #1
 800644e:	f040 80cd 	bne.w	80065ec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006452:	4b09      	ldr	r3, [pc, #36]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a08      	ldr	r2, [pc, #32]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800645c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800645e:	f7fc f8e5 	bl	800262c <HAL_GetTick>
 8006462:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006464:	e00a      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006466:	f7fc f8e1 	bl	800262c <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b64      	cmp	r3, #100	; 0x64
 8006472:	d903      	bls.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e0ba      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006478:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800647c:	4b5e      	ldr	r3, [pc, #376]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006488:	d0ed      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649a:	2b00      	cmp	r3, #0
 800649c:	d009      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d02e      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d12a      	bne.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80064b2:	4b51      	ldr	r3, [pc, #324]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80064b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b8:	0c1b      	lsrs	r3, r3, #16
 80064ba:	f003 0303 	and.w	r3, r3, #3
 80064be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80064c0:	4b4d      	ldr	r3, [pc, #308]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80064c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c6:	0f1b      	lsrs	r3, r3, #28
 80064c8:	f003 0307 	and.w	r3, r3, #7
 80064cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	019a      	lsls	r2, r3, #6
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	041b      	lsls	r3, r3, #16
 80064d8:	431a      	orrs	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	061b      	lsls	r3, r3, #24
 80064e0:	431a      	orrs	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	071b      	lsls	r3, r3, #28
 80064e6:	4944      	ldr	r1, [pc, #272]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80064ee:	4b42      	ldr	r3, [pc, #264]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80064f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fc:	3b01      	subs	r3, #1
 80064fe:	021b      	lsls	r3, r3, #8
 8006500:	493d      	ldr	r1, [pc, #244]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006502:	4313      	orrs	r3, r2
 8006504:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d022      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006518:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800651c:	d11d      	bne.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800651e:	4b36      	ldr	r3, [pc, #216]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006524:	0e1b      	lsrs	r3, r3, #24
 8006526:	f003 030f 	and.w	r3, r3, #15
 800652a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800652c:	4b32      	ldr	r3, [pc, #200]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800652e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006532:	0f1b      	lsrs	r3, r3, #28
 8006534:	f003 0307 	and.w	r3, r3, #7
 8006538:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	019a      	lsls	r2, r3, #6
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	041b      	lsls	r3, r3, #16
 8006546:	431a      	orrs	r2, r3
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	061b      	lsls	r3, r3, #24
 800654c:	431a      	orrs	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	071b      	lsls	r3, r3, #28
 8006552:	4929      	ldr	r1, [pc, #164]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006554:	4313      	orrs	r3, r2
 8006556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0308 	and.w	r3, r3, #8
 8006562:	2b00      	cmp	r3, #0
 8006564:	d028      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006566:	4b24      	ldr	r3, [pc, #144]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800656c:	0e1b      	lsrs	r3, r3, #24
 800656e:	f003 030f 	and.w	r3, r3, #15
 8006572:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006574:	4b20      	ldr	r3, [pc, #128]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800657a:	0c1b      	lsrs	r3, r3, #16
 800657c:	f003 0303 	and.w	r3, r3, #3
 8006580:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	019a      	lsls	r2, r3, #6
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	041b      	lsls	r3, r3, #16
 800658c:	431a      	orrs	r2, r3
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	061b      	lsls	r3, r3, #24
 8006592:	431a      	orrs	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	071b      	lsls	r3, r3, #28
 800659a:	4917      	ldr	r1, [pc, #92]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800659c:	4313      	orrs	r3, r2
 800659e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80065a2:	4b15      	ldr	r3, [pc, #84]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b0:	4911      	ldr	r1, [pc, #68]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80065b8:	4b0f      	ldr	r3, [pc, #60]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a0e      	ldr	r2, [pc, #56]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065c4:	f7fc f832 	bl	800262c <HAL_GetTick>
 80065c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065ca:	e008      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80065cc:	f7fc f82e 	bl	800262c <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b64      	cmp	r3, #100	; 0x64
 80065d8:	d901      	bls.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e007      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065de:	4b06      	ldr	r3, [pc, #24]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065ea:	d1ef      	bne.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3720      	adds	r7, #32
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	40023800 	.word	0x40023800

080065fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e040      	b.n	8006690 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006612:	2b00      	cmp	r3, #0
 8006614:	d106      	bne.n	8006624 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7fb fc36 	bl	8001e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2224      	movs	r2, #36	; 0x24
 8006628:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 0201 	bic.w	r2, r2, #1
 8006638:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f82c 	bl	8006698 <UART_SetConfig>
 8006640:	4603      	mov	r3, r0
 8006642:	2b01      	cmp	r3, #1
 8006644:	d101      	bne.n	800664a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e022      	b.n	8006690 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fa84 	bl	8006b60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685a      	ldr	r2, [r3, #4]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006666:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689a      	ldr	r2, [r3, #8]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006676:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f042 0201 	orr.w	r2, r2, #1
 8006686:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fb0b 	bl	8006ca4 <UART_CheckIdleState>
 800668e:	4603      	mov	r3, r0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b088      	sub	sp, #32
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689a      	ldr	r2, [r3, #8]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	431a      	orrs	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	431a      	orrs	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	4ba6      	ldr	r3, [pc, #664]	; (800695c <UART_SetConfig+0x2c4>)
 80066c4:	4013      	ands	r3, r2
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	6812      	ldr	r2, [r2, #0]
 80066ca:	6979      	ldr	r1, [r7, #20]
 80066cc:	430b      	orrs	r3, r1
 80066ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68da      	ldr	r2, [r3, #12]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a1b      	ldr	r3, [r3, #32]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	430a      	orrs	r2, r1
 8006708:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a94      	ldr	r2, [pc, #592]	; (8006960 <UART_SetConfig+0x2c8>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d120      	bne.n	8006756 <UART_SetConfig+0xbe>
 8006714:	4b93      	ldr	r3, [pc, #588]	; (8006964 <UART_SetConfig+0x2cc>)
 8006716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800671a:	f003 0303 	and.w	r3, r3, #3
 800671e:	2b03      	cmp	r3, #3
 8006720:	d816      	bhi.n	8006750 <UART_SetConfig+0xb8>
 8006722:	a201      	add	r2, pc, #4	; (adr r2, 8006728 <UART_SetConfig+0x90>)
 8006724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006728:	08006739 	.word	0x08006739
 800672c:	08006745 	.word	0x08006745
 8006730:	0800673f 	.word	0x0800673f
 8006734:	0800674b 	.word	0x0800674b
 8006738:	2301      	movs	r3, #1
 800673a:	77fb      	strb	r3, [r7, #31]
 800673c:	e150      	b.n	80069e0 <UART_SetConfig+0x348>
 800673e:	2302      	movs	r3, #2
 8006740:	77fb      	strb	r3, [r7, #31]
 8006742:	e14d      	b.n	80069e0 <UART_SetConfig+0x348>
 8006744:	2304      	movs	r3, #4
 8006746:	77fb      	strb	r3, [r7, #31]
 8006748:	e14a      	b.n	80069e0 <UART_SetConfig+0x348>
 800674a:	2308      	movs	r3, #8
 800674c:	77fb      	strb	r3, [r7, #31]
 800674e:	e147      	b.n	80069e0 <UART_SetConfig+0x348>
 8006750:	2310      	movs	r3, #16
 8006752:	77fb      	strb	r3, [r7, #31]
 8006754:	e144      	b.n	80069e0 <UART_SetConfig+0x348>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a83      	ldr	r2, [pc, #524]	; (8006968 <UART_SetConfig+0x2d0>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d132      	bne.n	80067c6 <UART_SetConfig+0x12e>
 8006760:	4b80      	ldr	r3, [pc, #512]	; (8006964 <UART_SetConfig+0x2cc>)
 8006762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006766:	f003 030c 	and.w	r3, r3, #12
 800676a:	2b0c      	cmp	r3, #12
 800676c:	d828      	bhi.n	80067c0 <UART_SetConfig+0x128>
 800676e:	a201      	add	r2, pc, #4	; (adr r2, 8006774 <UART_SetConfig+0xdc>)
 8006770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006774:	080067a9 	.word	0x080067a9
 8006778:	080067c1 	.word	0x080067c1
 800677c:	080067c1 	.word	0x080067c1
 8006780:	080067c1 	.word	0x080067c1
 8006784:	080067b5 	.word	0x080067b5
 8006788:	080067c1 	.word	0x080067c1
 800678c:	080067c1 	.word	0x080067c1
 8006790:	080067c1 	.word	0x080067c1
 8006794:	080067af 	.word	0x080067af
 8006798:	080067c1 	.word	0x080067c1
 800679c:	080067c1 	.word	0x080067c1
 80067a0:	080067c1 	.word	0x080067c1
 80067a4:	080067bb 	.word	0x080067bb
 80067a8:	2300      	movs	r3, #0
 80067aa:	77fb      	strb	r3, [r7, #31]
 80067ac:	e118      	b.n	80069e0 <UART_SetConfig+0x348>
 80067ae:	2302      	movs	r3, #2
 80067b0:	77fb      	strb	r3, [r7, #31]
 80067b2:	e115      	b.n	80069e0 <UART_SetConfig+0x348>
 80067b4:	2304      	movs	r3, #4
 80067b6:	77fb      	strb	r3, [r7, #31]
 80067b8:	e112      	b.n	80069e0 <UART_SetConfig+0x348>
 80067ba:	2308      	movs	r3, #8
 80067bc:	77fb      	strb	r3, [r7, #31]
 80067be:	e10f      	b.n	80069e0 <UART_SetConfig+0x348>
 80067c0:	2310      	movs	r3, #16
 80067c2:	77fb      	strb	r3, [r7, #31]
 80067c4:	e10c      	b.n	80069e0 <UART_SetConfig+0x348>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a68      	ldr	r2, [pc, #416]	; (800696c <UART_SetConfig+0x2d4>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d120      	bne.n	8006812 <UART_SetConfig+0x17a>
 80067d0:	4b64      	ldr	r3, [pc, #400]	; (8006964 <UART_SetConfig+0x2cc>)
 80067d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067da:	2b30      	cmp	r3, #48	; 0x30
 80067dc:	d013      	beq.n	8006806 <UART_SetConfig+0x16e>
 80067de:	2b30      	cmp	r3, #48	; 0x30
 80067e0:	d814      	bhi.n	800680c <UART_SetConfig+0x174>
 80067e2:	2b20      	cmp	r3, #32
 80067e4:	d009      	beq.n	80067fa <UART_SetConfig+0x162>
 80067e6:	2b20      	cmp	r3, #32
 80067e8:	d810      	bhi.n	800680c <UART_SetConfig+0x174>
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d002      	beq.n	80067f4 <UART_SetConfig+0x15c>
 80067ee:	2b10      	cmp	r3, #16
 80067f0:	d006      	beq.n	8006800 <UART_SetConfig+0x168>
 80067f2:	e00b      	b.n	800680c <UART_SetConfig+0x174>
 80067f4:	2300      	movs	r3, #0
 80067f6:	77fb      	strb	r3, [r7, #31]
 80067f8:	e0f2      	b.n	80069e0 <UART_SetConfig+0x348>
 80067fa:	2302      	movs	r3, #2
 80067fc:	77fb      	strb	r3, [r7, #31]
 80067fe:	e0ef      	b.n	80069e0 <UART_SetConfig+0x348>
 8006800:	2304      	movs	r3, #4
 8006802:	77fb      	strb	r3, [r7, #31]
 8006804:	e0ec      	b.n	80069e0 <UART_SetConfig+0x348>
 8006806:	2308      	movs	r3, #8
 8006808:	77fb      	strb	r3, [r7, #31]
 800680a:	e0e9      	b.n	80069e0 <UART_SetConfig+0x348>
 800680c:	2310      	movs	r3, #16
 800680e:	77fb      	strb	r3, [r7, #31]
 8006810:	e0e6      	b.n	80069e0 <UART_SetConfig+0x348>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a56      	ldr	r2, [pc, #344]	; (8006970 <UART_SetConfig+0x2d8>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d120      	bne.n	800685e <UART_SetConfig+0x1c6>
 800681c:	4b51      	ldr	r3, [pc, #324]	; (8006964 <UART_SetConfig+0x2cc>)
 800681e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006822:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006826:	2bc0      	cmp	r3, #192	; 0xc0
 8006828:	d013      	beq.n	8006852 <UART_SetConfig+0x1ba>
 800682a:	2bc0      	cmp	r3, #192	; 0xc0
 800682c:	d814      	bhi.n	8006858 <UART_SetConfig+0x1c0>
 800682e:	2b80      	cmp	r3, #128	; 0x80
 8006830:	d009      	beq.n	8006846 <UART_SetConfig+0x1ae>
 8006832:	2b80      	cmp	r3, #128	; 0x80
 8006834:	d810      	bhi.n	8006858 <UART_SetConfig+0x1c0>
 8006836:	2b00      	cmp	r3, #0
 8006838:	d002      	beq.n	8006840 <UART_SetConfig+0x1a8>
 800683a:	2b40      	cmp	r3, #64	; 0x40
 800683c:	d006      	beq.n	800684c <UART_SetConfig+0x1b4>
 800683e:	e00b      	b.n	8006858 <UART_SetConfig+0x1c0>
 8006840:	2300      	movs	r3, #0
 8006842:	77fb      	strb	r3, [r7, #31]
 8006844:	e0cc      	b.n	80069e0 <UART_SetConfig+0x348>
 8006846:	2302      	movs	r3, #2
 8006848:	77fb      	strb	r3, [r7, #31]
 800684a:	e0c9      	b.n	80069e0 <UART_SetConfig+0x348>
 800684c:	2304      	movs	r3, #4
 800684e:	77fb      	strb	r3, [r7, #31]
 8006850:	e0c6      	b.n	80069e0 <UART_SetConfig+0x348>
 8006852:	2308      	movs	r3, #8
 8006854:	77fb      	strb	r3, [r7, #31]
 8006856:	e0c3      	b.n	80069e0 <UART_SetConfig+0x348>
 8006858:	2310      	movs	r3, #16
 800685a:	77fb      	strb	r3, [r7, #31]
 800685c:	e0c0      	b.n	80069e0 <UART_SetConfig+0x348>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a44      	ldr	r2, [pc, #272]	; (8006974 <UART_SetConfig+0x2dc>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d125      	bne.n	80068b4 <UART_SetConfig+0x21c>
 8006868:	4b3e      	ldr	r3, [pc, #248]	; (8006964 <UART_SetConfig+0x2cc>)
 800686a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800686e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006872:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006876:	d017      	beq.n	80068a8 <UART_SetConfig+0x210>
 8006878:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800687c:	d817      	bhi.n	80068ae <UART_SetConfig+0x216>
 800687e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006882:	d00b      	beq.n	800689c <UART_SetConfig+0x204>
 8006884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006888:	d811      	bhi.n	80068ae <UART_SetConfig+0x216>
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <UART_SetConfig+0x1fe>
 800688e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006892:	d006      	beq.n	80068a2 <UART_SetConfig+0x20a>
 8006894:	e00b      	b.n	80068ae <UART_SetConfig+0x216>
 8006896:	2300      	movs	r3, #0
 8006898:	77fb      	strb	r3, [r7, #31]
 800689a:	e0a1      	b.n	80069e0 <UART_SetConfig+0x348>
 800689c:	2302      	movs	r3, #2
 800689e:	77fb      	strb	r3, [r7, #31]
 80068a0:	e09e      	b.n	80069e0 <UART_SetConfig+0x348>
 80068a2:	2304      	movs	r3, #4
 80068a4:	77fb      	strb	r3, [r7, #31]
 80068a6:	e09b      	b.n	80069e0 <UART_SetConfig+0x348>
 80068a8:	2308      	movs	r3, #8
 80068aa:	77fb      	strb	r3, [r7, #31]
 80068ac:	e098      	b.n	80069e0 <UART_SetConfig+0x348>
 80068ae:	2310      	movs	r3, #16
 80068b0:	77fb      	strb	r3, [r7, #31]
 80068b2:	e095      	b.n	80069e0 <UART_SetConfig+0x348>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a2f      	ldr	r2, [pc, #188]	; (8006978 <UART_SetConfig+0x2e0>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d125      	bne.n	800690a <UART_SetConfig+0x272>
 80068be:	4b29      	ldr	r3, [pc, #164]	; (8006964 <UART_SetConfig+0x2cc>)
 80068c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068cc:	d017      	beq.n	80068fe <UART_SetConfig+0x266>
 80068ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068d2:	d817      	bhi.n	8006904 <UART_SetConfig+0x26c>
 80068d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068d8:	d00b      	beq.n	80068f2 <UART_SetConfig+0x25a>
 80068da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068de:	d811      	bhi.n	8006904 <UART_SetConfig+0x26c>
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d003      	beq.n	80068ec <UART_SetConfig+0x254>
 80068e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e8:	d006      	beq.n	80068f8 <UART_SetConfig+0x260>
 80068ea:	e00b      	b.n	8006904 <UART_SetConfig+0x26c>
 80068ec:	2301      	movs	r3, #1
 80068ee:	77fb      	strb	r3, [r7, #31]
 80068f0:	e076      	b.n	80069e0 <UART_SetConfig+0x348>
 80068f2:	2302      	movs	r3, #2
 80068f4:	77fb      	strb	r3, [r7, #31]
 80068f6:	e073      	b.n	80069e0 <UART_SetConfig+0x348>
 80068f8:	2304      	movs	r3, #4
 80068fa:	77fb      	strb	r3, [r7, #31]
 80068fc:	e070      	b.n	80069e0 <UART_SetConfig+0x348>
 80068fe:	2308      	movs	r3, #8
 8006900:	77fb      	strb	r3, [r7, #31]
 8006902:	e06d      	b.n	80069e0 <UART_SetConfig+0x348>
 8006904:	2310      	movs	r3, #16
 8006906:	77fb      	strb	r3, [r7, #31]
 8006908:	e06a      	b.n	80069e0 <UART_SetConfig+0x348>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a1b      	ldr	r2, [pc, #108]	; (800697c <UART_SetConfig+0x2e4>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d138      	bne.n	8006986 <UART_SetConfig+0x2ee>
 8006914:	4b13      	ldr	r3, [pc, #76]	; (8006964 <UART_SetConfig+0x2cc>)
 8006916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800691a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800691e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006922:	d017      	beq.n	8006954 <UART_SetConfig+0x2bc>
 8006924:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006928:	d82a      	bhi.n	8006980 <UART_SetConfig+0x2e8>
 800692a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800692e:	d00b      	beq.n	8006948 <UART_SetConfig+0x2b0>
 8006930:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006934:	d824      	bhi.n	8006980 <UART_SetConfig+0x2e8>
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <UART_SetConfig+0x2aa>
 800693a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800693e:	d006      	beq.n	800694e <UART_SetConfig+0x2b6>
 8006940:	e01e      	b.n	8006980 <UART_SetConfig+0x2e8>
 8006942:	2300      	movs	r3, #0
 8006944:	77fb      	strb	r3, [r7, #31]
 8006946:	e04b      	b.n	80069e0 <UART_SetConfig+0x348>
 8006948:	2302      	movs	r3, #2
 800694a:	77fb      	strb	r3, [r7, #31]
 800694c:	e048      	b.n	80069e0 <UART_SetConfig+0x348>
 800694e:	2304      	movs	r3, #4
 8006950:	77fb      	strb	r3, [r7, #31]
 8006952:	e045      	b.n	80069e0 <UART_SetConfig+0x348>
 8006954:	2308      	movs	r3, #8
 8006956:	77fb      	strb	r3, [r7, #31]
 8006958:	e042      	b.n	80069e0 <UART_SetConfig+0x348>
 800695a:	bf00      	nop
 800695c:	efff69f3 	.word	0xefff69f3
 8006960:	40011000 	.word	0x40011000
 8006964:	40023800 	.word	0x40023800
 8006968:	40004400 	.word	0x40004400
 800696c:	40004800 	.word	0x40004800
 8006970:	40004c00 	.word	0x40004c00
 8006974:	40005000 	.word	0x40005000
 8006978:	40011400 	.word	0x40011400
 800697c:	40007800 	.word	0x40007800
 8006980:	2310      	movs	r3, #16
 8006982:	77fb      	strb	r3, [r7, #31]
 8006984:	e02c      	b.n	80069e0 <UART_SetConfig+0x348>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a72      	ldr	r2, [pc, #456]	; (8006b54 <UART_SetConfig+0x4bc>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d125      	bne.n	80069dc <UART_SetConfig+0x344>
 8006990:	4b71      	ldr	r3, [pc, #452]	; (8006b58 <UART_SetConfig+0x4c0>)
 8006992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006996:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800699a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800699e:	d017      	beq.n	80069d0 <UART_SetConfig+0x338>
 80069a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80069a4:	d817      	bhi.n	80069d6 <UART_SetConfig+0x33e>
 80069a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069aa:	d00b      	beq.n	80069c4 <UART_SetConfig+0x32c>
 80069ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069b0:	d811      	bhi.n	80069d6 <UART_SetConfig+0x33e>
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <UART_SetConfig+0x326>
 80069b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069ba:	d006      	beq.n	80069ca <UART_SetConfig+0x332>
 80069bc:	e00b      	b.n	80069d6 <UART_SetConfig+0x33e>
 80069be:	2300      	movs	r3, #0
 80069c0:	77fb      	strb	r3, [r7, #31]
 80069c2:	e00d      	b.n	80069e0 <UART_SetConfig+0x348>
 80069c4:	2302      	movs	r3, #2
 80069c6:	77fb      	strb	r3, [r7, #31]
 80069c8:	e00a      	b.n	80069e0 <UART_SetConfig+0x348>
 80069ca:	2304      	movs	r3, #4
 80069cc:	77fb      	strb	r3, [r7, #31]
 80069ce:	e007      	b.n	80069e0 <UART_SetConfig+0x348>
 80069d0:	2308      	movs	r3, #8
 80069d2:	77fb      	strb	r3, [r7, #31]
 80069d4:	e004      	b.n	80069e0 <UART_SetConfig+0x348>
 80069d6:	2310      	movs	r3, #16
 80069d8:	77fb      	strb	r3, [r7, #31]
 80069da:	e001      	b.n	80069e0 <UART_SetConfig+0x348>
 80069dc:	2310      	movs	r3, #16
 80069de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	69db      	ldr	r3, [r3, #28]
 80069e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069e8:	d15b      	bne.n	8006aa2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80069ea:	7ffb      	ldrb	r3, [r7, #31]
 80069ec:	2b08      	cmp	r3, #8
 80069ee:	d828      	bhi.n	8006a42 <UART_SetConfig+0x3aa>
 80069f0:	a201      	add	r2, pc, #4	; (adr r2, 80069f8 <UART_SetConfig+0x360>)
 80069f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f6:	bf00      	nop
 80069f8:	08006a1d 	.word	0x08006a1d
 80069fc:	08006a25 	.word	0x08006a25
 8006a00:	08006a2d 	.word	0x08006a2d
 8006a04:	08006a43 	.word	0x08006a43
 8006a08:	08006a33 	.word	0x08006a33
 8006a0c:	08006a43 	.word	0x08006a43
 8006a10:	08006a43 	.word	0x08006a43
 8006a14:	08006a43 	.word	0x08006a43
 8006a18:	08006a3b 	.word	0x08006a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a1c:	f7ff f9d6 	bl	8005dcc <HAL_RCC_GetPCLK1Freq>
 8006a20:	61b8      	str	r0, [r7, #24]
        break;
 8006a22:	e013      	b.n	8006a4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a24:	f7ff f9e6 	bl	8005df4 <HAL_RCC_GetPCLK2Freq>
 8006a28:	61b8      	str	r0, [r7, #24]
        break;
 8006a2a:	e00f      	b.n	8006a4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a2c:	4b4b      	ldr	r3, [pc, #300]	; (8006b5c <UART_SetConfig+0x4c4>)
 8006a2e:	61bb      	str	r3, [r7, #24]
        break;
 8006a30:	e00c      	b.n	8006a4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a32:	f7ff f8b9 	bl	8005ba8 <HAL_RCC_GetSysClockFreq>
 8006a36:	61b8      	str	r0, [r7, #24]
        break;
 8006a38:	e008      	b.n	8006a4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a3e:	61bb      	str	r3, [r7, #24]
        break;
 8006a40:	e004      	b.n	8006a4c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006a42:	2300      	movs	r3, #0
 8006a44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	77bb      	strb	r3, [r7, #30]
        break;
 8006a4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d074      	beq.n	8006b3c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	005a      	lsls	r2, r3, #1
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	085b      	lsrs	r3, r3, #1
 8006a5c:	441a      	add	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	2b0f      	cmp	r3, #15
 8006a6c:	d916      	bls.n	8006a9c <UART_SetConfig+0x404>
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a74:	d212      	bcs.n	8006a9c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f023 030f 	bic.w	r3, r3, #15
 8006a7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	085b      	lsrs	r3, r3, #1
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	89fb      	ldrh	r3, [r7, #14]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	89fa      	ldrh	r2, [r7, #14]
 8006a98:	60da      	str	r2, [r3, #12]
 8006a9a:	e04f      	b.n	8006b3c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	77bb      	strb	r3, [r7, #30]
 8006aa0:	e04c      	b.n	8006b3c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006aa2:	7ffb      	ldrb	r3, [r7, #31]
 8006aa4:	2b08      	cmp	r3, #8
 8006aa6:	d828      	bhi.n	8006afa <UART_SetConfig+0x462>
 8006aa8:	a201      	add	r2, pc, #4	; (adr r2, 8006ab0 <UART_SetConfig+0x418>)
 8006aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aae:	bf00      	nop
 8006ab0:	08006ad5 	.word	0x08006ad5
 8006ab4:	08006add 	.word	0x08006add
 8006ab8:	08006ae5 	.word	0x08006ae5
 8006abc:	08006afb 	.word	0x08006afb
 8006ac0:	08006aeb 	.word	0x08006aeb
 8006ac4:	08006afb 	.word	0x08006afb
 8006ac8:	08006afb 	.word	0x08006afb
 8006acc:	08006afb 	.word	0x08006afb
 8006ad0:	08006af3 	.word	0x08006af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ad4:	f7ff f97a 	bl	8005dcc <HAL_RCC_GetPCLK1Freq>
 8006ad8:	61b8      	str	r0, [r7, #24]
        break;
 8006ada:	e013      	b.n	8006b04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006adc:	f7ff f98a 	bl	8005df4 <HAL_RCC_GetPCLK2Freq>
 8006ae0:	61b8      	str	r0, [r7, #24]
        break;
 8006ae2:	e00f      	b.n	8006b04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ae4:	4b1d      	ldr	r3, [pc, #116]	; (8006b5c <UART_SetConfig+0x4c4>)
 8006ae6:	61bb      	str	r3, [r7, #24]
        break;
 8006ae8:	e00c      	b.n	8006b04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aea:	f7ff f85d 	bl	8005ba8 <HAL_RCC_GetSysClockFreq>
 8006aee:	61b8      	str	r0, [r7, #24]
        break;
 8006af0:	e008      	b.n	8006b04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006af6:	61bb      	str	r3, [r7, #24]
        break;
 8006af8:	e004      	b.n	8006b04 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	77bb      	strb	r3, [r7, #30]
        break;
 8006b02:	bf00      	nop
    }

    if (pclk != 0U)
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d018      	beq.n	8006b3c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	085a      	lsrs	r2, r3, #1
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	441a      	add	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	2b0f      	cmp	r3, #15
 8006b22:	d909      	bls.n	8006b38 <UART_SetConfig+0x4a0>
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b2a:	d205      	bcs.n	8006b38 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60da      	str	r2, [r3, #12]
 8006b36:	e001      	b.n	8006b3c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006b48:	7fbb      	ldrb	r3, [r7, #30]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3720      	adds	r7, #32
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	40007c00 	.word	0x40007c00
 8006b58:	40023800 	.word	0x40023800
 8006b5c:	00f42400 	.word	0x00f42400

08006b60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00a      	beq.n	8006b8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	430a      	orrs	r2, r1
 8006b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00a      	beq.n	8006bac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00a      	beq.n	8006bce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	430a      	orrs	r2, r1
 8006bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd2:	f003 0308 	and.w	r3, r3, #8
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00a      	beq.n	8006bf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	430a      	orrs	r2, r1
 8006bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	f003 0310 	and.w	r3, r3, #16
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00a      	beq.n	8006c12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c16:	f003 0320 	and.w	r3, r3, #32
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00a      	beq.n	8006c34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d01a      	beq.n	8006c76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	430a      	orrs	r2, r1
 8006c54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c5e:	d10a      	bne.n	8006c76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00a      	beq.n	8006c98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	430a      	orrs	r2, r1
 8006c96:	605a      	str	r2, [r3, #4]
  }
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af02      	add	r7, sp, #8
 8006caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cb4:	f7fb fcba 	bl	800262c <HAL_GetTick>
 8006cb8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0308 	and.w	r3, r3, #8
 8006cc4:	2b08      	cmp	r3, #8
 8006cc6:	d10e      	bne.n	8006ce6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f81b 	bl	8006d12 <UART_WaitOnFlagUntilTimeout>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e011      	b.n	8006d0a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b09c      	sub	sp, #112	; 0x70
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	60f8      	str	r0, [r7, #12]
 8006d1a:	60b9      	str	r1, [r7, #8]
 8006d1c:	603b      	str	r3, [r7, #0]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d22:	e0a7      	b.n	8006e74 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2a:	f000 80a3 	beq.w	8006e74 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d2e:	f7fb fc7d 	bl	800262c <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d302      	bcc.n	8006d44 <UART_WaitOnFlagUntilTimeout+0x32>
 8006d3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d13f      	bne.n	8006dc4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d4c:	e853 3f00 	ldrex	r3, [r3]
 8006d50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d58:	667b      	str	r3, [r7, #100]	; 0x64
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d64:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e6      	bne.n	8006d44 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3308      	adds	r3, #8
 8006d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d80:	e853 3f00 	ldrex	r3, [r3]
 8006d84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d88:	f023 0301 	bic.w	r3, r3, #1
 8006d8c:	663b      	str	r3, [r7, #96]	; 0x60
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3308      	adds	r3, #8
 8006d94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d96:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d9e:	e841 2300 	strex	r3, r2, [r1]
 8006da2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1e5      	bne.n	8006d76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2220      	movs	r2, #32
 8006dae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e068      	b.n	8006e96 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0304 	and.w	r3, r3, #4
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d050      	beq.n	8006e74 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006de0:	d148      	bne.n	8006e74 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df4:	e853 3f00 	ldrex	r3, [r3]
 8006df8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	461a      	mov	r2, r3
 8006e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e0a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e0c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e12:	e841 2300 	strex	r3, r2, [r1]
 8006e16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1e6      	bne.n	8006dec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3308      	adds	r3, #8
 8006e24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	e853 3f00 	ldrex	r3, [r3]
 8006e2c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	f023 0301 	bic.w	r3, r3, #1
 8006e34:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3308      	adds	r3, #8
 8006e3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e3e:	623a      	str	r2, [r7, #32]
 8006e40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e42:	69f9      	ldr	r1, [r7, #28]
 8006e44:	6a3a      	ldr	r2, [r7, #32]
 8006e46:	e841 2300 	strex	r3, r2, [r1]
 8006e4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1e5      	bne.n	8006e1e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2220      	movs	r2, #32
 8006e56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2220      	movs	r2, #32
 8006e64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e010      	b.n	8006e96 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	69da      	ldr	r2, [r3, #28]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	bf0c      	ite	eq
 8006e84:	2301      	moveq	r3, #1
 8006e86:	2300      	movne	r3, #0
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	79fb      	ldrb	r3, [r7, #7]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	f43f af48 	beq.w	8006d24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3770      	adds	r7, #112	; 0x70
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
	...

08006ea0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ea0:	b084      	sub	sp, #16
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b084      	sub	sp, #16
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	f107 001c 	add.w	r0, r7, #28
 8006eae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d120      	bne.n	8006efa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	68da      	ldr	r2, [r3, #12]
 8006ec8:	4b20      	ldr	r3, [pc, #128]	; (8006f4c <USB_CoreInit+0xac>)
 8006eca:	4013      	ands	r3, r2
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d105      	bne.n	8006eee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fa96 	bl	8007420 <USB_CoreReset>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	73fb      	strb	r3, [r7, #15]
 8006ef8:	e010      	b.n	8006f1c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fa8a 	bl	8007420 <USB_CoreReset>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f14:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d10b      	bne.n	8006f3a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f043 0206 	orr.w	r2, r3, #6
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f043 0220 	orr.w	r2, r3, #32
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f46:	b004      	add	sp, #16
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	ffbdffbf 	.word	0xffbdffbf

08006f50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f023 0201 	bic.w	r2, r3, #1
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b084      	sub	sp, #16
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f8e:	78fb      	ldrb	r3, [r7, #3]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d115      	bne.n	8006fc0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006fa0:	2001      	movs	r0, #1
 8006fa2:	f7fb fb4f 	bl	8002644 <HAL_Delay>
      ms++;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fa29 	bl	8007404 <USB_GetMode>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d01e      	beq.n	8006ff6 <USB_SetCurrentMode+0x84>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2b31      	cmp	r3, #49	; 0x31
 8006fbc:	d9f0      	bls.n	8006fa0 <USB_SetCurrentMode+0x2e>
 8006fbe:	e01a      	b.n	8006ff6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006fc0:	78fb      	ldrb	r3, [r7, #3]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d115      	bne.n	8006ff2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006fd2:	2001      	movs	r0, #1
 8006fd4:	f7fb fb36 	bl	8002644 <HAL_Delay>
      ms++;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fa10 	bl	8007404 <USB_GetMode>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d005      	beq.n	8006ff6 <USB_SetCurrentMode+0x84>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2b31      	cmp	r3, #49	; 0x31
 8006fee:	d9f0      	bls.n	8006fd2 <USB_SetCurrentMode+0x60>
 8006ff0:	e001      	b.n	8006ff6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e005      	b.n	8007002 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2b32      	cmp	r3, #50	; 0x32
 8006ffa:	d101      	bne.n	8007000 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e000      	b.n	8007002 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
	...

0800700c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800700c:	b084      	sub	sp, #16
 800700e:	b580      	push	{r7, lr}
 8007010:	b086      	sub	sp, #24
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800701a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800701e:	2300      	movs	r3, #0
 8007020:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007026:	2300      	movs	r3, #0
 8007028:	613b      	str	r3, [r7, #16]
 800702a:	e009      	b.n	8007040 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	3340      	adds	r3, #64	; 0x40
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	2200      	movs	r2, #0
 8007038:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	3301      	adds	r3, #1
 800703e:	613b      	str	r3, [r7, #16]
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	2b0e      	cmp	r3, #14
 8007044:	d9f2      	bls.n	800702c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007048:	2b00      	cmp	r3, #0
 800704a:	d11c      	bne.n	8007086 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800705a:	f043 0302 	orr.w	r3, r3, #2
 800705e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007064:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	e005      	b.n	8007092 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007098:	461a      	mov	r2, r3
 800709a:	2300      	movs	r3, #0
 800709c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a4:	4619      	mov	r1, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ac:	461a      	mov	r2, r3
 80070ae:	680b      	ldr	r3, [r1, #0]
 80070b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80070b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d10c      	bne.n	80070d2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80070b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d104      	bne.n	80070c8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80070be:	2100      	movs	r1, #0
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f965 	bl	8007390 <USB_SetDevSpeed>
 80070c6:	e008      	b.n	80070da <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80070c8:	2101      	movs	r1, #1
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f960 	bl	8007390 <USB_SetDevSpeed>
 80070d0:	e003      	b.n	80070da <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80070d2:	2103      	movs	r1, #3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 f95b 	bl	8007390 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80070da:	2110      	movs	r1, #16
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f8f3 	bl	80072c8 <USB_FlushTxFifo>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f91f 	bl	8007330 <USB_FlushRxFifo>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d001      	beq.n	80070fc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007102:	461a      	mov	r2, r3
 8007104:	2300      	movs	r3, #0
 8007106:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800710e:	461a      	mov	r2, r3
 8007110:	2300      	movs	r3, #0
 8007112:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800711a:	461a      	mov	r2, r3
 800711c:	2300      	movs	r3, #0
 800711e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007120:	2300      	movs	r3, #0
 8007122:	613b      	str	r3, [r7, #16]
 8007124:	e043      	b.n	80071ae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	015a      	lsls	r2, r3, #5
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	4413      	add	r3, r2
 800712e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007138:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800713c:	d118      	bne.n	8007170 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10a      	bne.n	800715a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	015a      	lsls	r2, r3, #5
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	4413      	add	r3, r2
 800714c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007150:	461a      	mov	r2, r3
 8007152:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007156:	6013      	str	r3, [r2, #0]
 8007158:	e013      	b.n	8007182 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	4413      	add	r3, r2
 8007162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007166:	461a      	mov	r2, r3
 8007168:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800716c:	6013      	str	r3, [r2, #0]
 800716e:	e008      	b.n	8007182 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4413      	add	r3, r2
 8007178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800717c:	461a      	mov	r2, r3
 800717e:	2300      	movs	r3, #0
 8007180:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	015a      	lsls	r2, r3, #5
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	4413      	add	r3, r2
 800718a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800718e:	461a      	mov	r2, r3
 8007190:	2300      	movs	r3, #0
 8007192:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	4413      	add	r3, r2
 800719c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a0:	461a      	mov	r2, r3
 80071a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80071a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	3301      	adds	r3, #1
 80071ac:	613b      	str	r3, [r7, #16]
 80071ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d3b7      	bcc.n	8007126 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071b6:	2300      	movs	r3, #0
 80071b8:	613b      	str	r3, [r7, #16]
 80071ba:	e043      	b.n	8007244 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	015a      	lsls	r2, r3, #5
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071d2:	d118      	bne.n	8007206 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10a      	bne.n	80071f0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	015a      	lsls	r2, r3, #5
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	4413      	add	r3, r2
 80071e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e6:	461a      	mov	r2, r3
 80071e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80071ec:	6013      	str	r3, [r2, #0]
 80071ee:	e013      	b.n	8007218 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	015a      	lsls	r2, r3, #5
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	4413      	add	r3, r2
 80071f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071fc:	461a      	mov	r2, r3
 80071fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007202:	6013      	str	r3, [r2, #0]
 8007204:	e008      	b.n	8007218 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	4413      	add	r3, r2
 800720e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007212:	461a      	mov	r2, r3
 8007214:	2300      	movs	r3, #0
 8007216:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	4413      	add	r3, r2
 8007220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007224:	461a      	mov	r2, r3
 8007226:	2300      	movs	r3, #0
 8007228:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	015a      	lsls	r2, r3, #5
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	4413      	add	r3, r2
 8007232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007236:	461a      	mov	r2, r3
 8007238:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800723c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	3301      	adds	r3, #1
 8007242:	613b      	str	r3, [r7, #16]
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	429a      	cmp	r2, r3
 800724a:	d3b7      	bcc.n	80071bc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800725a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800725e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800726c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800726e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007270:	2b00      	cmp	r3, #0
 8007272:	d105      	bne.n	8007280 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	f043 0210 	orr.w	r2, r3, #16
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	699a      	ldr	r2, [r3, #24]
 8007284:	4b0e      	ldr	r3, [pc, #56]	; (80072c0 <USB_DevInit+0x2b4>)
 8007286:	4313      	orrs	r3, r2
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800728c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800728e:	2b00      	cmp	r3, #0
 8007290:	d005      	beq.n	800729e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	f043 0208 	orr.w	r2, r3, #8
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800729e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d105      	bne.n	80072b0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	699a      	ldr	r2, [r3, #24]
 80072a8:	4b06      	ldr	r3, [pc, #24]	; (80072c4 <USB_DevInit+0x2b8>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80072b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3718      	adds	r7, #24
 80072b6:	46bd      	mov	sp, r7
 80072b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072bc:	b004      	add	sp, #16
 80072be:	4770      	bx	lr
 80072c0:	803c3800 	.word	0x803c3800
 80072c4:	40000004 	.word	0x40000004

080072c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80072d2:	2300      	movs	r3, #0
 80072d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	3301      	adds	r3, #1
 80072da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	4a13      	ldr	r2, [pc, #76]	; (800732c <USB_FlushTxFifo+0x64>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d901      	bls.n	80072e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e01b      	b.n	8007320 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	daf2      	bge.n	80072d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	019b      	lsls	r3, r3, #6
 80072f8:	f043 0220 	orr.w	r2, r3, #32
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	3301      	adds	r3, #1
 8007304:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	4a08      	ldr	r2, [pc, #32]	; (800732c <USB_FlushTxFifo+0x64>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d901      	bls.n	8007312 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e006      	b.n	8007320 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	f003 0320 	and.w	r3, r3, #32
 800731a:	2b20      	cmp	r3, #32
 800731c:	d0f0      	beq.n	8007300 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3714      	adds	r7, #20
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	00030d40 	.word	0x00030d40

08007330 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007338:	2300      	movs	r3, #0
 800733a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	3301      	adds	r3, #1
 8007340:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	4a11      	ldr	r2, [pc, #68]	; (800738c <USB_FlushRxFifo+0x5c>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d901      	bls.n	800734e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e018      	b.n	8007380 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	2b00      	cmp	r3, #0
 8007354:	daf2      	bge.n	800733c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007356:	2300      	movs	r3, #0
 8007358:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2210      	movs	r2, #16
 800735e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	3301      	adds	r3, #1
 8007364:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	4a08      	ldr	r2, [pc, #32]	; (800738c <USB_FlushRxFifo+0x5c>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d901      	bls.n	8007372 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e006      	b.n	8007380 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	f003 0310 	and.w	r3, r3, #16
 800737a:	2b10      	cmp	r3, #16
 800737c:	d0f0      	beq.n	8007360 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3714      	adds	r7, #20
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	00030d40 	.word	0x00030d40

08007390 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	460b      	mov	r3, r1
 800739a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	78fb      	ldrb	r3, [r7, #3]
 80073aa:	68f9      	ldr	r1, [r7, #12]
 80073ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073b0:	4313      	orrs	r3, r2
 80073b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr

080073c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b085      	sub	sp, #20
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073dc:	f023 0303 	bic.w	r3, r3, #3
 80073e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073f0:	f043 0302 	orr.w	r3, r3, #2
 80073f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	695b      	ldr	r3, [r3, #20]
 8007410:	f003 0301 	and.w	r3, r3, #1
}
 8007414:	4618      	mov	r0, r3
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007428:	2300      	movs	r3, #0
 800742a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	3301      	adds	r3, #1
 8007430:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	4a13      	ldr	r2, [pc, #76]	; (8007484 <USB_CoreReset+0x64>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d901      	bls.n	800743e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e01b      	b.n	8007476 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	2b00      	cmp	r3, #0
 8007444:	daf2      	bge.n	800742c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	f043 0201 	orr.w	r2, r3, #1
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	3301      	adds	r3, #1
 800745a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4a09      	ldr	r2, [pc, #36]	; (8007484 <USB_CoreReset+0x64>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d901      	bls.n	8007468 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	e006      	b.n	8007476 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	f003 0301 	and.w	r3, r3, #1
 8007470:	2b01      	cmp	r3, #1
 8007472:	d0f0      	beq.n	8007456 <USB_CoreReset+0x36>

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	00030d40 	.word	0x00030d40

08007488 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800748e:	f000 fc55 	bl	8007d3c <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8007492:	4b19      	ldr	r3, [pc, #100]	; (80074f8 <MX_LWIP_Init+0x70>)
 8007494:	2200      	movs	r2, #0
 8007496:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8007498:	4b18      	ldr	r3, [pc, #96]	; (80074fc <MX_LWIP_Init+0x74>)
 800749a:	2200      	movs	r2, #0
 800749c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800749e:	4b18      	ldr	r3, [pc, #96]	; (8007500 <MX_LWIP_Init+0x78>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80074a4:	4b17      	ldr	r3, [pc, #92]	; (8007504 <MX_LWIP_Init+0x7c>)
 80074a6:	9302      	str	r3, [sp, #8]
 80074a8:	4b17      	ldr	r3, [pc, #92]	; (8007508 <MX_LWIP_Init+0x80>)
 80074aa:	9301      	str	r3, [sp, #4]
 80074ac:	2300      	movs	r3, #0
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	4b13      	ldr	r3, [pc, #76]	; (8007500 <MX_LWIP_Init+0x78>)
 80074b2:	4a12      	ldr	r2, [pc, #72]	; (80074fc <MX_LWIP_Init+0x74>)
 80074b4:	4910      	ldr	r1, [pc, #64]	; (80074f8 <MX_LWIP_Init+0x70>)
 80074b6:	4815      	ldr	r0, [pc, #84]	; (800750c <MX_LWIP_Init+0x84>)
 80074b8:	f001 f92c 	bl	8008714 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80074bc:	4813      	ldr	r0, [pc, #76]	; (800750c <MX_LWIP_Init+0x84>)
 80074be:	f001 fae3 	bl	8008a88 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80074c2:	4b12      	ldr	r3, [pc, #72]	; (800750c <MX_LWIP_Init+0x84>)
 80074c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80074c8:	089b      	lsrs	r3, r3, #2
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d003      	beq.n	80074dc <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80074d4:	480d      	ldr	r0, [pc, #52]	; (800750c <MX_LWIP_Init+0x84>)
 80074d6:	f001 fae7 	bl	8008aa8 <netif_set_up>
 80074da:	e002      	b.n	80074e2 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80074dc:	480b      	ldr	r0, [pc, #44]	; (800750c <MX_LWIP_Init+0x84>)
 80074de:	f001 fb4f 	bl	8008b80 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80074e2:	490b      	ldr	r1, [pc, #44]	; (8007510 <MX_LWIP_Init+0x88>)
 80074e4:	4809      	ldr	r0, [pc, #36]	; (800750c <MX_LWIP_Init+0x84>)
 80074e6:	f001 fbe5 	bl	8008cb4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80074ea:	4808      	ldr	r0, [pc, #32]	; (800750c <MX_LWIP_Init+0x84>)
 80074ec:	f008 fce0 	bl	800feb0 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80074f0:	bf00      	nop
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20000cd0 	.word	0x20000cd0
 80074fc:	20000cd4 	.word	0x20000cd4
 8007500:	20000cd8 	.word	0x20000cd8
 8007504:	08013a21 	.word	0x08013a21
 8007508:	08007829 	.word	0x08007829
 800750c:	20000c98 	.word	0x20000c98
 8007510:	08007515 	.word	0x08007515

08007514 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <SCB_InvalidateDCache_by_Addr>:
{
 8007528:	b480      	push	{r7}
 800752a:	b087      	sub	sp, #28
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800753a:	2320      	movs	r3, #32
 800753c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800753e:	f3bf 8f4f 	dsb	sy
}
 8007542:	bf00      	nop
    while (op_size > 0) {
 8007544:	e00b      	b.n	800755e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8007546:	4a0d      	ldr	r2, [pc, #52]	; (800757c <SCB_InvalidateDCache_by_Addr+0x54>)
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	4413      	add	r3, r2
 8007554:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	2b00      	cmp	r3, #0
 8007562:	dcf0      	bgt.n	8007546 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8007564:	f3bf 8f4f 	dsb	sy
}
 8007568:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800756a:	f3bf 8f6f 	isb	sy
}
 800756e:	bf00      	nop
}
 8007570:	bf00      	nop
 8007572:	371c      	adds	r7, #28
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	e000ed00 	.word	0xe000ed00

08007580 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007588:	2300      	movs	r3, #0
 800758a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800758c:	4b40      	ldr	r3, [pc, #256]	; (8007690 <low_level_init+0x110>)
 800758e:	4a41      	ldr	r2, [pc, #260]	; (8007694 <low_level_init+0x114>)
 8007590:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007592:	2300      	movs	r3, #0
 8007594:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007596:	2380      	movs	r3, #128	; 0x80
 8007598:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800759a:	23e1      	movs	r3, #225	; 0xe1
 800759c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800759e:	2300      	movs	r3, #0
 80075a0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80075a2:	2300      	movs	r3, #0
 80075a4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80075a6:	2300      	movs	r3, #0
 80075a8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80075aa:	4a39      	ldr	r2, [pc, #228]	; (8007690 <low_level_init+0x110>)
 80075ac:	f107 0308 	add.w	r3, r7, #8
 80075b0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80075b2:	4b37      	ldr	r3, [pc, #220]	; (8007690 <low_level_init+0x110>)
 80075b4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80075b8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80075ba:	4b35      	ldr	r3, [pc, #212]	; (8007690 <low_level_init+0x110>)
 80075bc:	4a36      	ldr	r2, [pc, #216]	; (8007698 <low_level_init+0x118>)
 80075be:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80075c0:	4b33      	ldr	r3, [pc, #204]	; (8007690 <low_level_init+0x110>)
 80075c2:	4a36      	ldr	r2, [pc, #216]	; (800769c <low_level_init+0x11c>)
 80075c4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80075c6:	4b32      	ldr	r3, [pc, #200]	; (8007690 <low_level_init+0x110>)
 80075c8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80075cc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80075ce:	4830      	ldr	r0, [pc, #192]	; (8007690 <low_level_init+0x110>)
 80075d0:	f7fb fdd4 	bl	800317c <HAL_ETH_Init>
 80075d4:	4603      	mov	r3, r0
 80075d6:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80075d8:	2238      	movs	r2, #56	; 0x38
 80075da:	2100      	movs	r1, #0
 80075dc:	4830      	ldr	r0, [pc, #192]	; (80076a0 <low_level_init+0x120>)
 80075de:	f00c fb37 	bl	8013c50 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80075e2:	4b2f      	ldr	r3, [pc, #188]	; (80076a0 <low_level_init+0x120>)
 80075e4:	2221      	movs	r2, #33	; 0x21
 80075e6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80075e8:	4b2d      	ldr	r3, [pc, #180]	; (80076a0 <low_level_init+0x120>)
 80075ea:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80075ee:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80075f0:	4b2b      	ldr	r3, [pc, #172]	; (80076a0 <low_level_init+0x120>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80075f6:	482b      	ldr	r0, [pc, #172]	; (80076a4 <low_level_init+0x124>)
 80075f8:	f000 ff54 	bl	80084a4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2206      	movs	r2, #6
 8007600:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007604:	4b22      	ldr	r3, [pc, #136]	; (8007690 <low_level_init+0x110>)
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	781a      	ldrb	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007610:	4b1f      	ldr	r3, [pc, #124]	; (8007690 <low_level_init+0x110>)
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	785a      	ldrb	r2, [r3, #1]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800761c:	4b1c      	ldr	r3, [pc, #112]	; (8007690 <low_level_init+0x110>)
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	789a      	ldrb	r2, [r3, #2]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007628:	4b19      	ldr	r3, [pc, #100]	; (8007690 <low_level_init+0x110>)
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	78da      	ldrb	r2, [r3, #3]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007634:	4b16      	ldr	r3, [pc, #88]	; (8007690 <low_level_init+0x110>)
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	791a      	ldrb	r2, [r3, #4]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007640:	4b13      	ldr	r3, [pc, #76]	; (8007690 <low_level_init+0x110>)
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	795a      	ldrb	r2, [r3, #5]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007652:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800765a:	f043 030a 	orr.w	r3, r3, #10
 800765e:	b2da      	uxtb	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007666:	4910      	ldr	r1, [pc, #64]	; (80076a8 <low_level_init+0x128>)
 8007668:	4810      	ldr	r0, [pc, #64]	; (80076ac <low_level_init+0x12c>)
 800766a:	f7fa fe24 	bl	80022b6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800766e:	480f      	ldr	r0, [pc, #60]	; (80076ac <low_level_init+0x12c>)
 8007670:	f7fa fe53 	bl	800231a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8007674:	7bfb      	ldrb	r3, [r7, #15]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d103      	bne.n	8007682 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fa32 	bl	8007ae4 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007680:	e001      	b.n	8007686 <low_level_init+0x106>
    Error_Handler();
 8007682:	f7f9 fb94 	bl	8000dae <Error_Handler>
}
 8007686:	bf00      	nop
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	20005668 	.word	0x20005668
 8007694:	40028000 	.word	0x40028000
 8007698:	2000014c 	.word	0x2000014c
 800769c:	200000ac 	.word	0x200000ac
 80076a0:	20005718 	.word	0x20005718
 80076a4:	0801a15c 	.word	0x0801a15c
 80076a8:	20000024 	.word	0x20000024
 80076ac:	20005750 	.word	0x20005750

080076b0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b092      	sub	sp, #72	; 0x48
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80076ba:	2300      	movs	r3, #0
 80076bc:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80076be:	2300      	movs	r3, #0
 80076c0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80076c8:	f107 030c 	add.w	r3, r7, #12
 80076cc:	2230      	movs	r2, #48	; 0x30
 80076ce:	2100      	movs	r1, #0
 80076d0:	4618      	mov	r0, r3
 80076d2:	f00c fabd 	bl	8013c50 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80076d6:	f107 030c 	add.w	r3, r7, #12
 80076da:	2230      	movs	r2, #48	; 0x30
 80076dc:	2100      	movs	r1, #0
 80076de:	4618      	mov	r0, r3
 80076e0:	f00c fab6 	bl	8013c50 <memset>

  for(q = p; q != NULL; q = q->next)
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	643b      	str	r3, [r7, #64]	; 0x40
 80076e8:	e045      	b.n	8007776 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80076ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076ec:	2b03      	cmp	r3, #3
 80076ee:	d902      	bls.n	80076f6 <low_level_output+0x46>
      return ERR_IF;
 80076f0:	f06f 030b 	mvn.w	r3, #11
 80076f4:	e055      	b.n	80077a2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80076f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076f8:	6859      	ldr	r1, [r3, #4]
 80076fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076fc:	4613      	mov	r3, r2
 80076fe:	005b      	lsls	r3, r3, #1
 8007700:	4413      	add	r3, r2
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	3348      	adds	r3, #72	; 0x48
 8007706:	443b      	add	r3, r7
 8007708:	3b3c      	subs	r3, #60	; 0x3c
 800770a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800770c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800770e:	895b      	ldrh	r3, [r3, #10]
 8007710:	4619      	mov	r1, r3
 8007712:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007714:	4613      	mov	r3, r2
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	4413      	add	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	3348      	adds	r3, #72	; 0x48
 800771e:	443b      	add	r3, r7
 8007720:	3b38      	subs	r3, #56	; 0x38
 8007722:	6019      	str	r1, [r3, #0]

    if(i>0)
 8007724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007726:	2b00      	cmp	r3, #0
 8007728:	d011      	beq.n	800774e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800772a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800772c:	1e5a      	subs	r2, r3, #1
 800772e:	f107 000c 	add.w	r0, r7, #12
 8007732:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007734:	460b      	mov	r3, r1
 8007736:	005b      	lsls	r3, r3, #1
 8007738:	440b      	add	r3, r1
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	18c1      	adds	r1, r0, r3
 800773e:	4613      	mov	r3, r2
 8007740:	005b      	lsls	r3, r3, #1
 8007742:	4413      	add	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	3348      	adds	r3, #72	; 0x48
 8007748:	443b      	add	r3, r7
 800774a:	3b34      	subs	r3, #52	; 0x34
 800774c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800774e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d109      	bne.n	800776a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8007756:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007758:	4613      	mov	r3, r2
 800775a:	005b      	lsls	r3, r3, #1
 800775c:	4413      	add	r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	3348      	adds	r3, #72	; 0x48
 8007762:	443b      	add	r3, r7
 8007764:	3b34      	subs	r3, #52	; 0x34
 8007766:	2200      	movs	r2, #0
 8007768:	601a      	str	r2, [r3, #0]
    }

    i++;
 800776a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800776c:	3301      	adds	r3, #1
 800776e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8007770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	643b      	str	r3, [r7, #64]	; 0x40
 8007776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1b6      	bne.n	80076ea <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	891b      	ldrh	r3, [r3, #8]
 8007780:	461a      	mov	r2, r3
 8007782:	4b0a      	ldr	r3, [pc, #40]	; (80077ac <low_level_output+0xfc>)
 8007784:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8007786:	4a09      	ldr	r2, [pc, #36]	; (80077ac <low_level_output+0xfc>)
 8007788:	f107 030c 	add.w	r3, r7, #12
 800778c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800778e:	4a07      	ldr	r2, [pc, #28]	; (80077ac <low_level_output+0xfc>)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8007794:	2214      	movs	r2, #20
 8007796:	4905      	ldr	r1, [pc, #20]	; (80077ac <low_level_output+0xfc>)
 8007798:	4805      	ldr	r0, [pc, #20]	; (80077b0 <low_level_output+0x100>)
 800779a:	f7fb fe23 	bl	80033e4 <HAL_ETH_Transmit>

  return errval;
 800779e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3748      	adds	r7, #72	; 0x48
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	20005718 	.word	0x20005718
 80077b0:	20005668 	.word	0x20005668

080077b4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80077bc:	2300      	movs	r3, #0
 80077be:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80077c0:	4b07      	ldr	r3, [pc, #28]	; (80077e0 <low_level_input+0x2c>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d105      	bne.n	80077d4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80077c8:	f107 030c 	add.w	r3, r7, #12
 80077cc:	4619      	mov	r1, r3
 80077ce:	4805      	ldr	r0, [pc, #20]	; (80077e4 <low_level_input+0x30>)
 80077d0:	f7fb fe9c 	bl	800350c <HAL_ETH_ReadData>
  }

  return p;
 80077d4:	68fb      	ldr	r3, [r7, #12]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	20005664 	.word	0x20005664
 80077e4:	20005668 	.word	0x20005668

080077e8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80077f0:	2300      	movs	r3, #0
 80077f2:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7ff ffdd 	bl	80077b4 <low_level_input>
 80077fa:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00a      	beq.n	8007818 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	6879      	ldr	r1, [r7, #4]
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	4798      	blx	r3
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d002      	beq.n	8007818 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f001 fdce 	bl	80093b4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1ea      	bne.n	80077f4 <ethernetif_input+0xc>
}
 800781e:	bf00      	nop
 8007820:	bf00      	nop
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d106      	bne.n	8007844 <ethernetif_init+0x1c>
 8007836:	4b0e      	ldr	r3, [pc, #56]	; (8007870 <ethernetif_init+0x48>)
 8007838:	f44f 72bd 	mov.w	r2, #378	; 0x17a
 800783c:	490d      	ldr	r1, [pc, #52]	; (8007874 <ethernetif_init+0x4c>)
 800783e:	480e      	ldr	r0, [pc, #56]	; (8007878 <ethernetif_init+0x50>)
 8007840:	f00c fa0e 	bl	8013c60 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2273      	movs	r2, #115	; 0x73
 8007848:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2274      	movs	r2, #116	; 0x74
 8007850:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a09      	ldr	r2, [pc, #36]	; (800787c <ethernetif_init+0x54>)
 8007858:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a08      	ldr	r2, [pc, #32]	; (8007880 <ethernetif_init+0x58>)
 800785e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f7ff fe8d 	bl	8007580 <low_level_init>

  return ERR_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	08014e9c 	.word	0x08014e9c
 8007874:	08014eb8 	.word	0x08014eb8
 8007878:	08014ec8 	.word	0x08014ec8
 800787c:	08011d7d 	.word	0x08011d7d
 8007880:	080076b1 	.word	0x080076b1

08007884 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007890:	68f9      	ldr	r1, [r7, #12]
 8007892:	4807      	ldr	r0, [pc, #28]	; (80078b0 <pbuf_free_custom+0x2c>)
 8007894:	f000 fee8 	bl	8008668 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8007898:	4b06      	ldr	r3, [pc, #24]	; (80078b4 <pbuf_free_custom+0x30>)
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d102      	bne.n	80078a6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80078a0:	4b04      	ldr	r3, [pc, #16]	; (80078b4 <pbuf_free_custom+0x30>)
 80078a2:	2200      	movs	r2, #0
 80078a4:	701a      	strb	r2, [r3, #0]
  }
}
 80078a6:	bf00      	nop
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	0801a15c 	.word	0x0801a15c
 80078b4:	20005664 	.word	0x20005664

080078b8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80078bc:	f7fa feb6 	bl	800262c <HAL_GetTick>
 80078c0:	4603      	mov	r3, r0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	bd80      	pop	{r7, pc}
	...

080078c8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08e      	sub	sp, #56	; 0x38
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078d4:	2200      	movs	r2, #0
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	605a      	str	r2, [r3, #4]
 80078da:	609a      	str	r2, [r3, #8]
 80078dc:	60da      	str	r2, [r3, #12]
 80078de:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a52      	ldr	r2, [pc, #328]	; (8007a30 <HAL_ETH_MspInit+0x168>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	f040 809e 	bne.w	8007a28 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80078ec:	4b51      	ldr	r3, [pc, #324]	; (8007a34 <HAL_ETH_MspInit+0x16c>)
 80078ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f0:	4a50      	ldr	r2, [pc, #320]	; (8007a34 <HAL_ETH_MspInit+0x16c>)
 80078f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80078f6:	6313      	str	r3, [r2, #48]	; 0x30
 80078f8:	4b4e      	ldr	r3, [pc, #312]	; (8007a34 <HAL_ETH_MspInit+0x16c>)
 80078fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007900:	623b      	str	r3, [r7, #32]
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	4b4b      	ldr	r3, [pc, #300]	; (8007a34 <HAL_ETH_MspInit+0x16c>)
 8007906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007908:	4a4a      	ldr	r2, [pc, #296]	; (8007a34 <HAL_ETH_MspInit+0x16c>)
 800790a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800790e:	6313      	str	r3, [r2, #48]	; 0x30
 8007910:	4b48      	ldr	r3, [pc, #288]	; (8007a34 <HAL_ETH_MspInit+0x16c>)
 8007912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007914:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007918:	61fb      	str	r3, [r7, #28]
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	4b45      	ldr	r3, [pc, #276]	; (8007a34 <HAL_ETH_MspInit+0x16c>)
 800791e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007920:	4a44      	ldr	r2, [pc, #272]	; (8007a34 <HAL_ETH_MspInit+0x16c>)
 8007922:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007926:	6313      	str	r3, [r2, #48]	; 0x30
 8007928:	4b42      	ldr	r3, [pc, #264]	; (8007a34 <HAL_ETH_MspInit+0x16c>)
 800792a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007930:	61bb      	str	r3, [r7, #24]
 8007932:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007934:	4b3f      	ldr	r3, [pc, #252]	; (8007a34 <HAL_ETH_MspInit+0x16c>)
 8007936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007938:	4a3e      	ldr	r2, [pc, #248]	; (8007a34 <HAL_ETH_MspInit+0x16c>)
 800793a:	f043 0304 	orr.w	r3, r3, #4
 800793e:	6313      	str	r3, [r2, #48]	; 0x30
 8007940:	4b3c      	ldr	r3, [pc, #240]	; (8007a34 <HAL_ETH_MspInit+0x16c>)
 8007942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007944:	f003 0304 	and.w	r3, r3, #4
 8007948:	617b      	str	r3, [r7, #20]
 800794a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800794c:	4b39      	ldr	r3, [pc, #228]	; (8007a34 <HAL_ETH_MspInit+0x16c>)
 800794e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007950:	4a38      	ldr	r2, [pc, #224]	; (8007a34 <HAL_ETH_MspInit+0x16c>)
 8007952:	f043 0301 	orr.w	r3, r3, #1
 8007956:	6313      	str	r3, [r2, #48]	; 0x30
 8007958:	4b36      	ldr	r3, [pc, #216]	; (8007a34 <HAL_ETH_MspInit+0x16c>)
 800795a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	613b      	str	r3, [r7, #16]
 8007962:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007964:	4b33      	ldr	r3, [pc, #204]	; (8007a34 <HAL_ETH_MspInit+0x16c>)
 8007966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007968:	4a32      	ldr	r2, [pc, #200]	; (8007a34 <HAL_ETH_MspInit+0x16c>)
 800796a:	f043 0302 	orr.w	r3, r3, #2
 800796e:	6313      	str	r3, [r2, #48]	; 0x30
 8007970:	4b30      	ldr	r3, [pc, #192]	; (8007a34 <HAL_ETH_MspInit+0x16c>)
 8007972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007974:	f003 0302 	and.w	r3, r3, #2
 8007978:	60fb      	str	r3, [r7, #12]
 800797a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800797c:	4b2d      	ldr	r3, [pc, #180]	; (8007a34 <HAL_ETH_MspInit+0x16c>)
 800797e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007980:	4a2c      	ldr	r2, [pc, #176]	; (8007a34 <HAL_ETH_MspInit+0x16c>)
 8007982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007986:	6313      	str	r3, [r2, #48]	; 0x30
 8007988:	4b2a      	ldr	r3, [pc, #168]	; (8007a34 <HAL_ETH_MspInit+0x16c>)
 800798a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007990:	60bb      	str	r3, [r7, #8]
 8007992:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8007994:	2332      	movs	r3, #50	; 0x32
 8007996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007998:	2302      	movs	r3, #2
 800799a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800799c:	2300      	movs	r3, #0
 800799e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079a0:	2303      	movs	r3, #3
 80079a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80079a4:	230b      	movs	r3, #11
 80079a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80079a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079ac:	4619      	mov	r1, r3
 80079ae:	4822      	ldr	r0, [pc, #136]	; (8007a38 <HAL_ETH_MspInit+0x170>)
 80079b0:	f7fc fdca 	bl	8004548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80079b4:	2386      	movs	r3, #134	; 0x86
 80079b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079b8:	2302      	movs	r3, #2
 80079ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079bc:	2300      	movs	r3, #0
 80079be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079c0:	2303      	movs	r3, #3
 80079c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80079c4:	230b      	movs	r3, #11
 80079c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079cc:	4619      	mov	r1, r3
 80079ce:	481b      	ldr	r0, [pc, #108]	; (8007a3c <HAL_ETH_MspInit+0x174>)
 80079d0:	f7fc fdba 	bl	8004548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|RMII_TXD1_Pin;
 80079d4:	f242 0301 	movw	r3, #8193	; 0x2001
 80079d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079da:	2302      	movs	r3, #2
 80079dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079de:	2300      	movs	r3, #0
 80079e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079e2:	2303      	movs	r3, #3
 80079e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80079e6:	230b      	movs	r3, #11
 80079e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80079ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079ee:	4619      	mov	r1, r3
 80079f0:	4813      	ldr	r0, [pc, #76]	; (8007a40 <HAL_ETH_MspInit+0x178>)
 80079f2:	f7fc fda9 	bl	8004548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80079f6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80079fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079fc:	2302      	movs	r3, #2
 80079fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a00:	2300      	movs	r3, #0
 8007a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a04:	2303      	movs	r3, #3
 8007a06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007a08:	230b      	movs	r3, #11
 8007a0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a10:	4619      	mov	r1, r3
 8007a12:	480c      	ldr	r0, [pc, #48]	; (8007a44 <HAL_ETH_MspInit+0x17c>)
 8007a14:	f7fc fd98 	bl	8004548 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8007a18:	2200      	movs	r2, #0
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	203d      	movs	r0, #61	; 0x3d
 8007a1e:	f7fb fb3e 	bl	800309e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007a22:	203d      	movs	r0, #61	; 0x3d
 8007a24:	f7fb fb57 	bl	80030d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007a28:	bf00      	nop
 8007a2a:	3738      	adds	r7, #56	; 0x38
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	40028000 	.word	0x40028000
 8007a34:	40023800 	.word	0x40023800
 8007a38:	40020800 	.word	0x40020800
 8007a3c:	40020000 	.word	0x40020000
 8007a40:	40020400 	.word	0x40020400
 8007a44:	40021800 	.word	0x40021800

08007a48 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8007a4c:	4802      	ldr	r0, [pc, #8]	; (8007a58 <ETH_PHY_IO_Init+0x10>)
 8007a4e:	f7fc f921 	bl	8003c94 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	20005668 	.word	0x20005668

08007a5c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	af00      	add	r7, sp, #0
  return 0;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	68f9      	ldr	r1, [r7, #12]
 8007a7e:	4807      	ldr	r0, [pc, #28]	; (8007a9c <ETH_PHY_IO_ReadReg+0x30>)
 8007a80:	f7fb ff70 	bl	8003964 <HAL_ETH_ReadPHYRegister>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d002      	beq.n	8007a90 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8007a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a8e:	e000      	b.n	8007a92 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	20005668 	.word	0x20005668

08007aa0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	68f9      	ldr	r1, [r7, #12]
 8007ab2:	4807      	ldr	r0, [pc, #28]	; (8007ad0 <ETH_PHY_IO_WriteReg+0x30>)
 8007ab4:	f7fb ffa1 	bl	80039fa <HAL_ETH_WritePHYRegister>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d002      	beq.n	8007ac4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8007abe:	f04f 33ff 	mov.w	r3, #4294967295
 8007ac2:	e000      	b.n	8007ac6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	20005668 	.word	0x20005668

08007ad4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007ad8:	f7fa fda8 	bl	800262c <HAL_GetTick>
 8007adc:	4603      	mov	r3, r0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	bd80      	pop	{r7, pc}
	...

08007ae4 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b0a0      	sub	sp, #128	; 0x80
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8007aec:	f107 030c 	add.w	r3, r7, #12
 8007af0:	2264      	movs	r2, #100	; 0x64
 8007af2:	2100      	movs	r1, #0
 8007af4:	4618      	mov	r0, r3
 8007af6:	f00c f8ab 	bl	8013c50 <memset>
  int32_t PHYLinkState = 0;
 8007afa:	2300      	movs	r3, #0
 8007afc:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b02:	2300      	movs	r3, #0
 8007b04:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b06:	2300      	movs	r3, #0
 8007b08:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007b0a:	483a      	ldr	r0, [pc, #232]	; (8007bf4 <ethernet_link_check_state+0x110>)
 8007b0c:	f7fa fcad 	bl	800246a <LAN8742_GetLinkState>
 8007b10:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007b18:	089b      	lsrs	r3, r3, #2
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00c      	beq.n	8007b3e <ethernet_link_check_state+0x5a>
 8007b24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	dc09      	bgt.n	8007b3e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8007b2a:	4833      	ldr	r0, [pc, #204]	; (8007bf8 <ethernet_link_check_state+0x114>)
 8007b2c:	f7fb fc01 	bl	8003332 <HAL_ETH_Stop>
    netif_set_down(netif);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f001 f825 	bl	8008b80 <netif_set_down>
    netif_set_link_down(netif);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f001 f88c 	bl	8008c54 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8007b3c:	e055      	b.n	8007bea <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007b44:	f003 0304 	and.w	r3, r3, #4
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d14e      	bne.n	8007bea <ethernet_link_check_state+0x106>
 8007b4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	dd4b      	ble.n	8007bea <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8007b52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b54:	3b02      	subs	r3, #2
 8007b56:	2b03      	cmp	r3, #3
 8007b58:	d82a      	bhi.n	8007bb0 <ethernet_link_check_state+0xcc>
 8007b5a:	a201      	add	r2, pc, #4	; (adr r2, 8007b60 <ethernet_link_check_state+0x7c>)
 8007b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b60:	08007b71 	.word	0x08007b71
 8007b64:	08007b83 	.word	0x08007b83
 8007b68:	08007b93 	.word	0x08007b93
 8007b6c:	08007ba3 	.word	0x08007ba3
      duplex = ETH_FULLDUPLEX_MODE;
 8007b70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b74:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007b76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007b7a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007b80:	e017      	b.n	8007bb2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8007b82:	2300      	movs	r3, #0
 8007b84:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007b86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007b8a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007b90:	e00f      	b.n	8007bb2 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8007b92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b96:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007ba0:	e007      	b.n	8007bb2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007baa:	2301      	movs	r3, #1
 8007bac:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007bae:	e000      	b.n	8007bb2 <ethernet_link_check_state+0xce>
      break;
 8007bb0:	bf00      	nop
    if(linkchanged)
 8007bb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d018      	beq.n	8007bea <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007bb8:	f107 030c 	add.w	r3, r7, #12
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	480e      	ldr	r0, [pc, #56]	; (8007bf8 <ethernet_link_check_state+0x114>)
 8007bc0:	f7fb ff64 	bl	8003a8c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8007bc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bc6:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8007bc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bca:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007bcc:	f107 030c 	add.w	r3, r7, #12
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	4809      	ldr	r0, [pc, #36]	; (8007bf8 <ethernet_link_check_state+0x114>)
 8007bd4:	f7fc f844 	bl	8003c60 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8007bd8:	4807      	ldr	r0, [pc, #28]	; (8007bf8 <ethernet_link_check_state+0x114>)
 8007bda:	f7fb fb4b 	bl	8003274 <HAL_ETH_Start>
      netif_set_up(netif);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 ff62 	bl	8008aa8 <netif_set_up>
      netif_set_link_up(netif);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 fffd 	bl	8008be4 <netif_set_link_up>
}
 8007bea:	bf00      	nop
 8007bec:	3780      	adds	r7, #128	; 0x80
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	20005750 	.word	0x20005750
 8007bf8:	20005668 	.word	0x20005668

08007bfc <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af02      	add	r7, sp, #8
 8007c02:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007c04:	4812      	ldr	r0, [pc, #72]	; (8007c50 <HAL_ETH_RxAllocateCallback+0x54>)
 8007c06:	f000 fcc1 	bl	800858c <memp_malloc_pool>
 8007c0a:	60f8      	str	r0, [r7, #12]
  if (p)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d014      	beq.n	8007c3c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f103 0220 	add.w	r2, r3, #32
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	4a0d      	ldr	r2, [pc, #52]	; (8007c54 <HAL_ETH_RxAllocateCallback+0x58>)
 8007c20:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007c2a:	9201      	str	r2, [sp, #4]
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2241      	movs	r2, #65	; 0x41
 8007c32:	2100      	movs	r1, #0
 8007c34:	2000      	movs	r0, #0
 8007c36:	f001 fa03 	bl	8009040 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8007c3a:	e005      	b.n	8007c48 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007c3c:	4b06      	ldr	r3, [pc, #24]	; (8007c58 <HAL_ETH_RxAllocateCallback+0x5c>)
 8007c3e:	2201      	movs	r2, #1
 8007c40:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	601a      	str	r2, [r3, #0]
}
 8007c48:	bf00      	nop
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	0801a15c 	.word	0x0801a15c
 8007c54:	08007885 	.word	0x08007885
 8007c58:	20005664 	.word	0x20005664

08007c5c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b088      	sub	sp, #32
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
 8007c68:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8007c72:	2300      	movs	r3, #0
 8007c74:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	3b20      	subs	r3, #32
 8007c7a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	2200      	movs	r2, #0
 8007c86:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	887a      	ldrh	r2, [r7, #2]
 8007c8c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d103      	bne.n	8007c9e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	69fa      	ldr	r2, [r7, #28]
 8007c9a:	601a      	str	r2, [r3, #0]
 8007c9c:	e003      	b.n	8007ca6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	69fa      	ldr	r2, [r7, #28]
 8007ca4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	69fa      	ldr	r2, [r7, #28]
 8007caa:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	61fb      	str	r3, [r7, #28]
 8007cb2:	e009      	b.n	8007cc8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	891a      	ldrh	r2, [r3, #8]
 8007cb8:	887b      	ldrh	r3, [r7, #2]
 8007cba:	4413      	add	r3, r2
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	61fb      	str	r3, [r7, #28]
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1f2      	bne.n	8007cb4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8007cce:	887b      	ldrh	r3, [r7, #2]
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7ff fc28 	bl	8007528 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007cd8:	bf00      	nop
 8007cda:	3720      	adds	r7, #32
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007cea:	88fb      	ldrh	r3, [r7, #6]
 8007cec:	021b      	lsls	r3, r3, #8
 8007cee:	b21a      	sxth	r2, r3
 8007cf0:	88fb      	ldrh	r3, [r7, #6]
 8007cf2:	0a1b      	lsrs	r3, r3, #8
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	b21b      	sxth	r3, r3
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	b21b      	sxth	r3, r3
 8007cfc:	b29b      	uxth	r3, r3
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	370c      	adds	r7, #12
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b083      	sub	sp, #12
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	061a      	lsls	r2, r3, #24
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	021b      	lsls	r3, r3, #8
 8007d1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d1e:	431a      	orrs	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	0a1b      	lsrs	r3, r3, #8
 8007d24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d28:	431a      	orrs	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	0e1b      	lsrs	r3, r3, #24
 8007d2e:	4313      	orrs	r3, r2
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007d42:	2300      	movs	r3, #0
 8007d44:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8007d46:	f000 f8d5 	bl	8007ef4 <mem_init>
  memp_init();
 8007d4a:	f000 fbdb 	bl	8008504 <memp_init>
  pbuf_init();
  netif_init();
 8007d4e:	f000 fcd9 	bl	8008704 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007d52:	f007 f873 	bl	800ee3c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007d56:	f001 fdcb 	bl	80098f0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007d5a:	f006 ffe5 	bl	800ed28 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007d5e:	bf00      	nop
 8007d60:	3708      	adds	r7, #8
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
	...

08007d68 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	4603      	mov	r3, r0
 8007d70:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8007d72:	4b05      	ldr	r3, [pc, #20]	; (8007d88 <ptr_to_mem+0x20>)
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	88fb      	ldrh	r3, [r7, #6]
 8007d78:	4413      	add	r3, r2
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	20007f9c 	.word	0x20007f9c

08007d8c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007d94:	4b05      	ldr	r3, [pc, #20]	; (8007dac <mem_to_ptr+0x20>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	b29b      	uxth	r3, r3
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	20007f9c 	.word	0x20007f9c

08007db0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007db0:	b590      	push	{r4, r7, lr}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007db8:	4b45      	ldr	r3, [pc, #276]	; (8007ed0 <plug_holes+0x120>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d206      	bcs.n	8007dd0 <plug_holes+0x20>
 8007dc2:	4b44      	ldr	r3, [pc, #272]	; (8007ed4 <plug_holes+0x124>)
 8007dc4:	f240 12df 	movw	r2, #479	; 0x1df
 8007dc8:	4943      	ldr	r1, [pc, #268]	; (8007ed8 <plug_holes+0x128>)
 8007dca:	4844      	ldr	r0, [pc, #272]	; (8007edc <plug_holes+0x12c>)
 8007dcc:	f00b ff48 	bl	8013c60 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007dd0:	4b43      	ldr	r3, [pc, #268]	; (8007ee0 <plug_holes+0x130>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d306      	bcc.n	8007de8 <plug_holes+0x38>
 8007dda:	4b3e      	ldr	r3, [pc, #248]	; (8007ed4 <plug_holes+0x124>)
 8007ddc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007de0:	4940      	ldr	r1, [pc, #256]	; (8007ee4 <plug_holes+0x134>)
 8007de2:	483e      	ldr	r0, [pc, #248]	; (8007edc <plug_holes+0x12c>)
 8007de4:	f00b ff3c 	bl	8013c60 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	791b      	ldrb	r3, [r3, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d006      	beq.n	8007dfe <plug_holes+0x4e>
 8007df0:	4b38      	ldr	r3, [pc, #224]	; (8007ed4 <plug_holes+0x124>)
 8007df2:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007df6:	493c      	ldr	r1, [pc, #240]	; (8007ee8 <plug_holes+0x138>)
 8007df8:	4838      	ldr	r0, [pc, #224]	; (8007edc <plug_holes+0x12c>)
 8007dfa:	f00b ff31 	bl	8013c60 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	881b      	ldrh	r3, [r3, #0]
 8007e02:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007e06:	d906      	bls.n	8007e16 <plug_holes+0x66>
 8007e08:	4b32      	ldr	r3, [pc, #200]	; (8007ed4 <plug_holes+0x124>)
 8007e0a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007e0e:	4937      	ldr	r1, [pc, #220]	; (8007eec <plug_holes+0x13c>)
 8007e10:	4832      	ldr	r0, [pc, #200]	; (8007edc <plug_holes+0x12c>)
 8007e12:	f00b ff25 	bl	8013c60 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7ff ffa4 	bl	8007d68 <ptr_to_mem>
 8007e20:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d024      	beq.n	8007e74 <plug_holes+0xc4>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	791b      	ldrb	r3, [r3, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d120      	bne.n	8007e74 <plug_holes+0xc4>
 8007e32:	4b2b      	ldr	r3, [pc, #172]	; (8007ee0 <plug_holes+0x130>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d01b      	beq.n	8007e74 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007e3c:	4b2c      	ldr	r3, [pc, #176]	; (8007ef0 <plug_holes+0x140>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d102      	bne.n	8007e4c <plug_holes+0x9c>
      lfree = mem;
 8007e46:	4a2a      	ldr	r2, [pc, #168]	; (8007ef0 <plug_holes+0x140>)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	881a      	ldrh	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	881b      	ldrh	r3, [r3, #0]
 8007e58:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007e5c:	d00a      	beq.n	8007e74 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	881b      	ldrh	r3, [r3, #0]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7ff ff80 	bl	8007d68 <ptr_to_mem>
 8007e68:	4604      	mov	r4, r0
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7ff ff8e 	bl	8007d8c <mem_to_ptr>
 8007e70:	4603      	mov	r3, r0
 8007e72:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	885b      	ldrh	r3, [r3, #2]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7ff ff75 	bl	8007d68 <ptr_to_mem>
 8007e7e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007e80:	68ba      	ldr	r2, [r7, #8]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d01f      	beq.n	8007ec8 <plug_holes+0x118>
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	791b      	ldrb	r3, [r3, #4]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d11b      	bne.n	8007ec8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007e90:	4b17      	ldr	r3, [pc, #92]	; (8007ef0 <plug_holes+0x140>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d102      	bne.n	8007ea0 <plug_holes+0xf0>
      lfree = pmem;
 8007e9a:	4a15      	ldr	r2, [pc, #84]	; (8007ef0 <plug_holes+0x140>)
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	881a      	ldrh	r2, [r3, #0]
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	881b      	ldrh	r3, [r3, #0]
 8007eac:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007eb0:	d00a      	beq.n	8007ec8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	881b      	ldrh	r3, [r3, #0]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7ff ff56 	bl	8007d68 <ptr_to_mem>
 8007ebc:	4604      	mov	r4, r0
 8007ebe:	68b8      	ldr	r0, [r7, #8]
 8007ec0:	f7ff ff64 	bl	8007d8c <mem_to_ptr>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007ec8:	bf00      	nop
 8007eca:	3714      	adds	r7, #20
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd90      	pop	{r4, r7, pc}
 8007ed0:	20007f9c 	.word	0x20007f9c
 8007ed4:	08014ef0 	.word	0x08014ef0
 8007ed8:	08014f20 	.word	0x08014f20
 8007edc:	08014f38 	.word	0x08014f38
 8007ee0:	20007fa0 	.word	0x20007fa0
 8007ee4:	08014f60 	.word	0x08014f60
 8007ee8:	08014f7c 	.word	0x08014f7c
 8007eec:	08014f98 	.word	0x08014f98
 8007ef0:	20007fa4 	.word	0x20007fa4

08007ef4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007efa:	4b18      	ldr	r3, [pc, #96]	; (8007f5c <mem_init+0x68>)
 8007efc:	3303      	adds	r3, #3
 8007efe:	f023 0303 	bic.w	r3, r3, #3
 8007f02:	461a      	mov	r2, r3
 8007f04:	4b16      	ldr	r3, [pc, #88]	; (8007f60 <mem_init+0x6c>)
 8007f06:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007f08:	4b15      	ldr	r3, [pc, #84]	; (8007f60 <mem_init+0x6c>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8007f14:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007f22:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8007f26:	f7ff ff1f 	bl	8007d68 <ptr_to_mem>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	4a0d      	ldr	r2, [pc, #52]	; (8007f64 <mem_init+0x70>)
 8007f2e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007f30:	4b0c      	ldr	r3, [pc, #48]	; (8007f64 <mem_init+0x70>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2201      	movs	r2, #1
 8007f36:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007f38:	4b0a      	ldr	r3, [pc, #40]	; (8007f64 <mem_init+0x70>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8007f40:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007f42:	4b08      	ldr	r3, [pc, #32]	; (8007f64 <mem_init+0x70>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8007f4a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007f4c:	4b04      	ldr	r3, [pc, #16]	; (8007f60 <mem_init+0x6c>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a05      	ldr	r2, [pc, #20]	; (8007f68 <mem_init+0x74>)
 8007f52:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007f54:	bf00      	nop
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	20005788 	.word	0x20005788
 8007f60:	20007f9c 	.word	0x20007f9c
 8007f64:	20007fa0 	.word	0x20007fa0
 8007f68:	20007fa4 	.word	0x20007fa4

08007f6c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b086      	sub	sp, #24
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f7ff ff09 	bl	8007d8c <mem_to_ptr>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7ff fef0 	bl	8007d68 <ptr_to_mem>
 8007f88:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	885b      	ldrh	r3, [r3, #2]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7ff feea 	bl	8007d68 <ptr_to_mem>
 8007f94:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007f9e:	d818      	bhi.n	8007fd2 <mem_link_valid+0x66>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	885b      	ldrh	r3, [r3, #2]
 8007fa4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007fa8:	d813      	bhi.n	8007fd2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007fae:	8afa      	ldrh	r2, [r7, #22]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d004      	beq.n	8007fbe <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	881b      	ldrh	r3, [r3, #0]
 8007fb8:	8afa      	ldrh	r2, [r7, #22]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d109      	bne.n	8007fd2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007fbe:	4b08      	ldr	r3, [pc, #32]	; (8007fe0 <mem_link_valid+0x74>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d006      	beq.n	8007fd6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	885b      	ldrh	r3, [r3, #2]
 8007fcc:	8afa      	ldrh	r2, [r7, #22]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d001      	beq.n	8007fd6 <mem_link_valid+0x6a>
    return 0;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	e000      	b.n	8007fd8 <mem_link_valid+0x6c>
  }
  return 1;
 8007fd6:	2301      	movs	r3, #1
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3718      	adds	r7, #24
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	20007fa0 	.word	0x20007fa0

08007fe4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d04c      	beq.n	800808c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f003 0303 	and.w	r3, r3, #3
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d007      	beq.n	800800c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007ffc:	4b25      	ldr	r3, [pc, #148]	; (8008094 <mem_free+0xb0>)
 8007ffe:	f240 2273 	movw	r2, #627	; 0x273
 8008002:	4925      	ldr	r1, [pc, #148]	; (8008098 <mem_free+0xb4>)
 8008004:	4825      	ldr	r0, [pc, #148]	; (800809c <mem_free+0xb8>)
 8008006:	f00b fe2b 	bl	8013c60 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800800a:	e040      	b.n	800808e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3b08      	subs	r3, #8
 8008010:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8008012:	4b23      	ldr	r3, [pc, #140]	; (80080a0 <mem_free+0xbc>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	429a      	cmp	r2, r3
 800801a:	d306      	bcc.n	800802a <mem_free+0x46>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f103 020c 	add.w	r2, r3, #12
 8008022:	4b20      	ldr	r3, [pc, #128]	; (80080a4 <mem_free+0xc0>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	429a      	cmp	r2, r3
 8008028:	d907      	bls.n	800803a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800802a:	4b1a      	ldr	r3, [pc, #104]	; (8008094 <mem_free+0xb0>)
 800802c:	f240 227f 	movw	r2, #639	; 0x27f
 8008030:	491d      	ldr	r1, [pc, #116]	; (80080a8 <mem_free+0xc4>)
 8008032:	481a      	ldr	r0, [pc, #104]	; (800809c <mem_free+0xb8>)
 8008034:	f00b fe14 	bl	8013c60 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008038:	e029      	b.n	800808e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	791b      	ldrb	r3, [r3, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d107      	bne.n	8008052 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8008042:	4b14      	ldr	r3, [pc, #80]	; (8008094 <mem_free+0xb0>)
 8008044:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8008048:	4918      	ldr	r1, [pc, #96]	; (80080ac <mem_free+0xc8>)
 800804a:	4814      	ldr	r0, [pc, #80]	; (800809c <mem_free+0xb8>)
 800804c:	f00b fe08 	bl	8013c60 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008050:	e01d      	b.n	800808e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	f7ff ff8a 	bl	8007f6c <mem_link_valid>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d107      	bne.n	800806e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800805e:	4b0d      	ldr	r3, [pc, #52]	; (8008094 <mem_free+0xb0>)
 8008060:	f240 2295 	movw	r2, #661	; 0x295
 8008064:	4912      	ldr	r1, [pc, #72]	; (80080b0 <mem_free+0xcc>)
 8008066:	480d      	ldr	r0, [pc, #52]	; (800809c <mem_free+0xb8>)
 8008068:	f00b fdfa 	bl	8013c60 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800806c:	e00f      	b.n	800808e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008074:	4b0f      	ldr	r3, [pc, #60]	; (80080b4 <mem_free+0xd0>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	429a      	cmp	r2, r3
 800807c:	d202      	bcs.n	8008084 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800807e:	4a0d      	ldr	r2, [pc, #52]	; (80080b4 <mem_free+0xd0>)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f7ff fe93 	bl	8007db0 <plug_holes>
 800808a:	e000      	b.n	800808e <mem_free+0xaa>
    return;
 800808c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	08014ef0 	.word	0x08014ef0
 8008098:	08014fc4 	.word	0x08014fc4
 800809c:	08014f38 	.word	0x08014f38
 80080a0:	20007f9c 	.word	0x20007f9c
 80080a4:	20007fa0 	.word	0x20007fa0
 80080a8:	08014fe8 	.word	0x08014fe8
 80080ac:	08015004 	.word	0x08015004
 80080b0:	0801502c 	.word	0x0801502c
 80080b4:	20007fa4 	.word	0x20007fa4

080080b8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b088      	sub	sp, #32
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	460b      	mov	r3, r1
 80080c2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80080c4:	887b      	ldrh	r3, [r7, #2]
 80080c6:	3303      	adds	r3, #3
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	f023 0303 	bic.w	r3, r3, #3
 80080ce:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80080d0:	8bfb      	ldrh	r3, [r7, #30]
 80080d2:	2b0b      	cmp	r3, #11
 80080d4:	d801      	bhi.n	80080da <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80080d6:	230c      	movs	r3, #12
 80080d8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80080da:	8bfb      	ldrh	r3, [r7, #30]
 80080dc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80080e0:	d803      	bhi.n	80080ea <mem_trim+0x32>
 80080e2:	8bfa      	ldrh	r2, [r7, #30]
 80080e4:	887b      	ldrh	r3, [r7, #2]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d201      	bcs.n	80080ee <mem_trim+0x36>
    return NULL;
 80080ea:	2300      	movs	r3, #0
 80080ec:	e0cc      	b.n	8008288 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80080ee:	4b68      	ldr	r3, [pc, #416]	; (8008290 <mem_trim+0x1d8>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d304      	bcc.n	8008102 <mem_trim+0x4a>
 80080f8:	4b66      	ldr	r3, [pc, #408]	; (8008294 <mem_trim+0x1dc>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d306      	bcc.n	8008110 <mem_trim+0x58>
 8008102:	4b65      	ldr	r3, [pc, #404]	; (8008298 <mem_trim+0x1e0>)
 8008104:	f240 22d1 	movw	r2, #721	; 0x2d1
 8008108:	4964      	ldr	r1, [pc, #400]	; (800829c <mem_trim+0x1e4>)
 800810a:	4865      	ldr	r0, [pc, #404]	; (80082a0 <mem_trim+0x1e8>)
 800810c:	f00b fda8 	bl	8013c60 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008110:	4b5f      	ldr	r3, [pc, #380]	; (8008290 <mem_trim+0x1d8>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	429a      	cmp	r2, r3
 8008118:	d304      	bcc.n	8008124 <mem_trim+0x6c>
 800811a:	4b5e      	ldr	r3, [pc, #376]	; (8008294 <mem_trim+0x1dc>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	429a      	cmp	r2, r3
 8008122:	d301      	bcc.n	8008128 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	e0af      	b.n	8008288 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	3b08      	subs	r3, #8
 800812c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800812e:	69b8      	ldr	r0, [r7, #24]
 8008130:	f7ff fe2c 	bl	8007d8c <mem_to_ptr>
 8008134:	4603      	mov	r3, r0
 8008136:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	881a      	ldrh	r2, [r3, #0]
 800813c:	8afb      	ldrh	r3, [r7, #22]
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	b29b      	uxth	r3, r3
 8008142:	3b08      	subs	r3, #8
 8008144:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008146:	8bfa      	ldrh	r2, [r7, #30]
 8008148:	8abb      	ldrh	r3, [r7, #20]
 800814a:	429a      	cmp	r2, r3
 800814c:	d906      	bls.n	800815c <mem_trim+0xa4>
 800814e:	4b52      	ldr	r3, [pc, #328]	; (8008298 <mem_trim+0x1e0>)
 8008150:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8008154:	4953      	ldr	r1, [pc, #332]	; (80082a4 <mem_trim+0x1ec>)
 8008156:	4852      	ldr	r0, [pc, #328]	; (80082a0 <mem_trim+0x1e8>)
 8008158:	f00b fd82 	bl	8013c60 <iprintf>
  if (newsize > size) {
 800815c:	8bfa      	ldrh	r2, [r7, #30]
 800815e:	8abb      	ldrh	r3, [r7, #20]
 8008160:	429a      	cmp	r2, r3
 8008162:	d901      	bls.n	8008168 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8008164:	2300      	movs	r3, #0
 8008166:	e08f      	b.n	8008288 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8008168:	8bfa      	ldrh	r2, [r7, #30]
 800816a:	8abb      	ldrh	r3, [r7, #20]
 800816c:	429a      	cmp	r2, r3
 800816e:	d101      	bne.n	8008174 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	e089      	b.n	8008288 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	881b      	ldrh	r3, [r3, #0]
 8008178:	4618      	mov	r0, r3
 800817a:	f7ff fdf5 	bl	8007d68 <ptr_to_mem>
 800817e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	791b      	ldrb	r3, [r3, #4]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d13f      	bne.n	8008208 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	881b      	ldrh	r3, [r3, #0]
 800818c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008190:	d106      	bne.n	80081a0 <mem_trim+0xe8>
 8008192:	4b41      	ldr	r3, [pc, #260]	; (8008298 <mem_trim+0x1e0>)
 8008194:	f240 22f5 	movw	r2, #757	; 0x2f5
 8008198:	4943      	ldr	r1, [pc, #268]	; (80082a8 <mem_trim+0x1f0>)
 800819a:	4841      	ldr	r0, [pc, #260]	; (80082a0 <mem_trim+0x1e8>)
 800819c:	f00b fd60 	bl	8013c60 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	881b      	ldrh	r3, [r3, #0]
 80081a4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80081a6:	8afa      	ldrh	r2, [r7, #22]
 80081a8:	8bfb      	ldrh	r3, [r7, #30]
 80081aa:	4413      	add	r3, r2
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	3308      	adds	r3, #8
 80081b0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80081b2:	4b3e      	ldr	r3, [pc, #248]	; (80082ac <mem_trim+0x1f4>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d106      	bne.n	80081ca <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80081bc:	89fb      	ldrh	r3, [r7, #14]
 80081be:	4618      	mov	r0, r3
 80081c0:	f7ff fdd2 	bl	8007d68 <ptr_to_mem>
 80081c4:	4603      	mov	r3, r0
 80081c6:	4a39      	ldr	r2, [pc, #228]	; (80082ac <mem_trim+0x1f4>)
 80081c8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80081ca:	89fb      	ldrh	r3, [r7, #14]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7ff fdcb 	bl	8007d68 <ptr_to_mem>
 80081d2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	2200      	movs	r2, #0
 80081d8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	89ba      	ldrh	r2, [r7, #12]
 80081de:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	8afa      	ldrh	r2, [r7, #22]
 80081e4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	89fa      	ldrh	r2, [r7, #14]
 80081ea:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80081f4:	d047      	beq.n	8008286 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7ff fdb4 	bl	8007d68 <ptr_to_mem>
 8008200:	4602      	mov	r2, r0
 8008202:	89fb      	ldrh	r3, [r7, #14]
 8008204:	8053      	strh	r3, [r2, #2]
 8008206:	e03e      	b.n	8008286 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008208:	8bfb      	ldrh	r3, [r7, #30]
 800820a:	f103 0214 	add.w	r2, r3, #20
 800820e:	8abb      	ldrh	r3, [r7, #20]
 8008210:	429a      	cmp	r2, r3
 8008212:	d838      	bhi.n	8008286 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008214:	8afa      	ldrh	r2, [r7, #22]
 8008216:	8bfb      	ldrh	r3, [r7, #30]
 8008218:	4413      	add	r3, r2
 800821a:	b29b      	uxth	r3, r3
 800821c:	3308      	adds	r3, #8
 800821e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	881b      	ldrh	r3, [r3, #0]
 8008224:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008228:	d106      	bne.n	8008238 <mem_trim+0x180>
 800822a:	4b1b      	ldr	r3, [pc, #108]	; (8008298 <mem_trim+0x1e0>)
 800822c:	f240 3216 	movw	r2, #790	; 0x316
 8008230:	491d      	ldr	r1, [pc, #116]	; (80082a8 <mem_trim+0x1f0>)
 8008232:	481b      	ldr	r0, [pc, #108]	; (80082a0 <mem_trim+0x1e8>)
 8008234:	f00b fd14 	bl	8013c60 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008238:	89fb      	ldrh	r3, [r7, #14]
 800823a:	4618      	mov	r0, r3
 800823c:	f7ff fd94 	bl	8007d68 <ptr_to_mem>
 8008240:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8008242:	4b1a      	ldr	r3, [pc, #104]	; (80082ac <mem_trim+0x1f4>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	429a      	cmp	r2, r3
 800824a:	d202      	bcs.n	8008252 <mem_trim+0x19a>
      lfree = mem2;
 800824c:	4a17      	ldr	r2, [pc, #92]	; (80082ac <mem_trim+0x1f4>)
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	2200      	movs	r2, #0
 8008256:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	881a      	ldrh	r2, [r3, #0]
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	8afa      	ldrh	r2, [r7, #22]
 8008264:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	89fa      	ldrh	r2, [r7, #14]
 800826a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	881b      	ldrh	r3, [r3, #0]
 8008270:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008274:	d007      	beq.n	8008286 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	881b      	ldrh	r3, [r3, #0]
 800827a:	4618      	mov	r0, r3
 800827c:	f7ff fd74 	bl	8007d68 <ptr_to_mem>
 8008280:	4602      	mov	r2, r0
 8008282:	89fb      	ldrh	r3, [r7, #14]
 8008284:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8008286:	687b      	ldr	r3, [r7, #4]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3720      	adds	r7, #32
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	20007f9c 	.word	0x20007f9c
 8008294:	20007fa0 	.word	0x20007fa0
 8008298:	08014ef0 	.word	0x08014ef0
 800829c:	08015060 	.word	0x08015060
 80082a0:	08014f38 	.word	0x08014f38
 80082a4:	08015078 	.word	0x08015078
 80082a8:	08015098 	.word	0x08015098
 80082ac:	20007fa4 	.word	0x20007fa4

080082b0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b088      	sub	sp, #32
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	4603      	mov	r3, r0
 80082b8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80082ba:	88fb      	ldrh	r3, [r7, #6]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d101      	bne.n	80082c4 <mem_malloc+0x14>
    return NULL;
 80082c0:	2300      	movs	r3, #0
 80082c2:	e0d9      	b.n	8008478 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80082c4:	88fb      	ldrh	r3, [r7, #6]
 80082c6:	3303      	adds	r3, #3
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	f023 0303 	bic.w	r3, r3, #3
 80082ce:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80082d0:	8bbb      	ldrh	r3, [r7, #28]
 80082d2:	2b0b      	cmp	r3, #11
 80082d4:	d801      	bhi.n	80082da <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80082d6:	230c      	movs	r3, #12
 80082d8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80082da:	8bbb      	ldrh	r3, [r7, #28]
 80082dc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80082e0:	d803      	bhi.n	80082ea <mem_malloc+0x3a>
 80082e2:	8bba      	ldrh	r2, [r7, #28]
 80082e4:	88fb      	ldrh	r3, [r7, #6]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d201      	bcs.n	80082ee <mem_malloc+0x3e>
    return NULL;
 80082ea:	2300      	movs	r3, #0
 80082ec:	e0c4      	b.n	8008478 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80082ee:	4b64      	ldr	r3, [pc, #400]	; (8008480 <mem_malloc+0x1d0>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7ff fd4a 	bl	8007d8c <mem_to_ptr>
 80082f8:	4603      	mov	r3, r0
 80082fa:	83fb      	strh	r3, [r7, #30]
 80082fc:	e0b4      	b.n	8008468 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80082fe:	8bfb      	ldrh	r3, [r7, #30]
 8008300:	4618      	mov	r0, r3
 8008302:	f7ff fd31 	bl	8007d68 <ptr_to_mem>
 8008306:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	791b      	ldrb	r3, [r3, #4]
 800830c:	2b00      	cmp	r3, #0
 800830e:	f040 80a4 	bne.w	800845a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	881b      	ldrh	r3, [r3, #0]
 8008316:	461a      	mov	r2, r3
 8008318:	8bfb      	ldrh	r3, [r7, #30]
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	f1a3 0208 	sub.w	r2, r3, #8
 8008320:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8008322:	429a      	cmp	r2, r3
 8008324:	f0c0 8099 	bcc.w	800845a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	881b      	ldrh	r3, [r3, #0]
 800832c:	461a      	mov	r2, r3
 800832e:	8bfb      	ldrh	r3, [r7, #30]
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	f1a3 0208 	sub.w	r2, r3, #8
 8008336:	8bbb      	ldrh	r3, [r7, #28]
 8008338:	3314      	adds	r3, #20
 800833a:	429a      	cmp	r2, r3
 800833c:	d333      	bcc.n	80083a6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800833e:	8bfa      	ldrh	r2, [r7, #30]
 8008340:	8bbb      	ldrh	r3, [r7, #28]
 8008342:	4413      	add	r3, r2
 8008344:	b29b      	uxth	r3, r3
 8008346:	3308      	adds	r3, #8
 8008348:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800834a:	8a7b      	ldrh	r3, [r7, #18]
 800834c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008350:	d106      	bne.n	8008360 <mem_malloc+0xb0>
 8008352:	4b4c      	ldr	r3, [pc, #304]	; (8008484 <mem_malloc+0x1d4>)
 8008354:	f240 3287 	movw	r2, #903	; 0x387
 8008358:	494b      	ldr	r1, [pc, #300]	; (8008488 <mem_malloc+0x1d8>)
 800835a:	484c      	ldr	r0, [pc, #304]	; (800848c <mem_malloc+0x1dc>)
 800835c:	f00b fc80 	bl	8013c60 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8008360:	8a7b      	ldrh	r3, [r7, #18]
 8008362:	4618      	mov	r0, r3
 8008364:	f7ff fd00 	bl	8007d68 <ptr_to_mem>
 8008368:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	881a      	ldrh	r2, [r3, #0]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	8bfa      	ldrh	r2, [r7, #30]
 800837c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	8a7a      	ldrh	r2, [r7, #18]
 8008382:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	2201      	movs	r2, #1
 8008388:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	881b      	ldrh	r3, [r3, #0]
 800838e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008392:	d00b      	beq.n	80083ac <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	881b      	ldrh	r3, [r3, #0]
 8008398:	4618      	mov	r0, r3
 800839a:	f7ff fce5 	bl	8007d68 <ptr_to_mem>
 800839e:	4602      	mov	r2, r0
 80083a0:	8a7b      	ldrh	r3, [r7, #18]
 80083a2:	8053      	strh	r3, [r2, #2]
 80083a4:	e002      	b.n	80083ac <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	2201      	movs	r2, #1
 80083aa:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80083ac:	4b34      	ldr	r3, [pc, #208]	; (8008480 <mem_malloc+0x1d0>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	697a      	ldr	r2, [r7, #20]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d127      	bne.n	8008406 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80083b6:	4b32      	ldr	r3, [pc, #200]	; (8008480 <mem_malloc+0x1d0>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80083bc:	e005      	b.n	80083ca <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	881b      	ldrh	r3, [r3, #0]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7ff fcd0 	bl	8007d68 <ptr_to_mem>
 80083c8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	791b      	ldrb	r3, [r3, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d004      	beq.n	80083dc <mem_malloc+0x12c>
 80083d2:	4b2f      	ldr	r3, [pc, #188]	; (8008490 <mem_malloc+0x1e0>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	69ba      	ldr	r2, [r7, #24]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d1f0      	bne.n	80083be <mem_malloc+0x10e>
          }
          lfree = cur;
 80083dc:	4a28      	ldr	r2, [pc, #160]	; (8008480 <mem_malloc+0x1d0>)
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80083e2:	4b27      	ldr	r3, [pc, #156]	; (8008480 <mem_malloc+0x1d0>)
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	4b2a      	ldr	r3, [pc, #168]	; (8008490 <mem_malloc+0x1e0>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d00b      	beq.n	8008406 <mem_malloc+0x156>
 80083ee:	4b24      	ldr	r3, [pc, #144]	; (8008480 <mem_malloc+0x1d0>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	791b      	ldrb	r3, [r3, #4]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d006      	beq.n	8008406 <mem_malloc+0x156>
 80083f8:	4b22      	ldr	r3, [pc, #136]	; (8008484 <mem_malloc+0x1d4>)
 80083fa:	f240 32b5 	movw	r2, #949	; 0x3b5
 80083fe:	4925      	ldr	r1, [pc, #148]	; (8008494 <mem_malloc+0x1e4>)
 8008400:	4822      	ldr	r0, [pc, #136]	; (800848c <mem_malloc+0x1dc>)
 8008402:	f00b fc2d 	bl	8013c60 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008406:	8bba      	ldrh	r2, [r7, #28]
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	4413      	add	r3, r2
 800840c:	3308      	adds	r3, #8
 800840e:	4a20      	ldr	r2, [pc, #128]	; (8008490 <mem_malloc+0x1e0>)
 8008410:	6812      	ldr	r2, [r2, #0]
 8008412:	4293      	cmp	r3, r2
 8008414:	d906      	bls.n	8008424 <mem_malloc+0x174>
 8008416:	4b1b      	ldr	r3, [pc, #108]	; (8008484 <mem_malloc+0x1d4>)
 8008418:	f240 32b9 	movw	r2, #953	; 0x3b9
 800841c:	491e      	ldr	r1, [pc, #120]	; (8008498 <mem_malloc+0x1e8>)
 800841e:	481b      	ldr	r0, [pc, #108]	; (800848c <mem_malloc+0x1dc>)
 8008420:	f00b fc1e 	bl	8013c60 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	f003 0303 	and.w	r3, r3, #3
 800842a:	2b00      	cmp	r3, #0
 800842c:	d006      	beq.n	800843c <mem_malloc+0x18c>
 800842e:	4b15      	ldr	r3, [pc, #84]	; (8008484 <mem_malloc+0x1d4>)
 8008430:	f240 32bb 	movw	r2, #955	; 0x3bb
 8008434:	4919      	ldr	r1, [pc, #100]	; (800849c <mem_malloc+0x1ec>)
 8008436:	4815      	ldr	r0, [pc, #84]	; (800848c <mem_malloc+0x1dc>)
 8008438:	f00b fc12 	bl	8013c60 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	f003 0303 	and.w	r3, r3, #3
 8008442:	2b00      	cmp	r3, #0
 8008444:	d006      	beq.n	8008454 <mem_malloc+0x1a4>
 8008446:	4b0f      	ldr	r3, [pc, #60]	; (8008484 <mem_malloc+0x1d4>)
 8008448:	f240 32bd 	movw	r2, #957	; 0x3bd
 800844c:	4914      	ldr	r1, [pc, #80]	; (80084a0 <mem_malloc+0x1f0>)
 800844e:	480f      	ldr	r0, [pc, #60]	; (800848c <mem_malloc+0x1dc>)
 8008450:	f00b fc06 	bl	8013c60 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	3308      	adds	r3, #8
 8008458:	e00e      	b.n	8008478 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800845a:	8bfb      	ldrh	r3, [r7, #30]
 800845c:	4618      	mov	r0, r3
 800845e:	f7ff fc83 	bl	8007d68 <ptr_to_mem>
 8008462:	4603      	mov	r3, r0
 8008464:	881b      	ldrh	r3, [r3, #0]
 8008466:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008468:	8bfa      	ldrh	r2, [r7, #30]
 800846a:	8bbb      	ldrh	r3, [r7, #28]
 800846c:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8008470:	429a      	cmp	r2, r3
 8008472:	f4ff af44 	bcc.w	80082fe <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3720      	adds	r7, #32
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	20007fa4 	.word	0x20007fa4
 8008484:	08014ef0 	.word	0x08014ef0
 8008488:	08015098 	.word	0x08015098
 800848c:	08014f38 	.word	0x08014f38
 8008490:	20007fa0 	.word	0x20007fa0
 8008494:	080150ac 	.word	0x080150ac
 8008498:	080150c8 	.word	0x080150c8
 800849c:	080150f8 	.word	0x080150f8
 80084a0:	08015128 	.word	0x08015128

080084a4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	2200      	movs	r2, #0
 80084b2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	3303      	adds	r3, #3
 80084ba:	f023 0303 	bic.w	r3, r3, #3
 80084be:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80084c0:	2300      	movs	r3, #0
 80084c2:	60fb      	str	r3, [r7, #12]
 80084c4:	e011      	b.n	80084ea <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	68ba      	ldr	r2, [r7, #8]
 80084d6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	881b      	ldrh	r3, [r3, #0]
 80084dc:	461a      	mov	r2, r3
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	4413      	add	r3, r2
 80084e2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	3301      	adds	r3, #1
 80084e8:	60fb      	str	r3, [r7, #12]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	885b      	ldrh	r3, [r3, #2]
 80084ee:	461a      	mov	r2, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	4293      	cmp	r3, r2
 80084f4:	dbe7      	blt.n	80084c6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80084f6:	bf00      	nop
 80084f8:	bf00      	nop
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800850a:	2300      	movs	r3, #0
 800850c:	80fb      	strh	r3, [r7, #6]
 800850e:	e009      	b.n	8008524 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008510:	88fb      	ldrh	r3, [r7, #6]
 8008512:	4a08      	ldr	r2, [pc, #32]	; (8008534 <memp_init+0x30>)
 8008514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008518:	4618      	mov	r0, r3
 800851a:	f7ff ffc3 	bl	80084a4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800851e:	88fb      	ldrh	r3, [r7, #6]
 8008520:	3301      	adds	r3, #1
 8008522:	80fb      	strh	r3, [r7, #6]
 8008524:	88fb      	ldrh	r3, [r7, #6]
 8008526:	2b08      	cmp	r3, #8
 8008528:	d9f2      	bls.n	8008510 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800852a:	bf00      	nop
 800852c:	bf00      	nop
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	0801a1d4 	.word	0x0801a1d4

08008538 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d012      	beq.n	8008574 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	6812      	ldr	r2, [r2, #0]
 8008556:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f003 0303 	and.w	r3, r3, #3
 800855e:	2b00      	cmp	r3, #0
 8008560:	d006      	beq.n	8008570 <do_memp_malloc_pool+0x38>
 8008562:	4b07      	ldr	r3, [pc, #28]	; (8008580 <do_memp_malloc_pool+0x48>)
 8008564:	f44f 728c 	mov.w	r2, #280	; 0x118
 8008568:	4906      	ldr	r1, [pc, #24]	; (8008584 <do_memp_malloc_pool+0x4c>)
 800856a:	4807      	ldr	r0, [pc, #28]	; (8008588 <do_memp_malloc_pool+0x50>)
 800856c:	f00b fb78 	bl	8013c60 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	e000      	b.n	8008576 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	0801514c 	.word	0x0801514c
 8008584:	0801517c 	.word	0x0801517c
 8008588:	080151a0 	.word	0x080151a0

0800858c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d106      	bne.n	80085a8 <memp_malloc_pool+0x1c>
 800859a:	4b0a      	ldr	r3, [pc, #40]	; (80085c4 <memp_malloc_pool+0x38>)
 800859c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80085a0:	4909      	ldr	r1, [pc, #36]	; (80085c8 <memp_malloc_pool+0x3c>)
 80085a2:	480a      	ldr	r0, [pc, #40]	; (80085cc <memp_malloc_pool+0x40>)
 80085a4:	f00b fb5c 	bl	8013c60 <iprintf>
  if (desc == NULL) {
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d101      	bne.n	80085b2 <memp_malloc_pool+0x26>
    return NULL;
 80085ae:	2300      	movs	r3, #0
 80085b0:	e003      	b.n	80085ba <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7ff ffc0 	bl	8008538 <do_memp_malloc_pool>
 80085b8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	0801514c 	.word	0x0801514c
 80085c8:	080151c8 	.word	0x080151c8
 80085cc:	080151a0 	.word	0x080151a0

080085d0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	4603      	mov	r3, r0
 80085d8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80085da:	79fb      	ldrb	r3, [r7, #7]
 80085dc:	2b08      	cmp	r3, #8
 80085de:	d908      	bls.n	80085f2 <memp_malloc+0x22>
 80085e0:	4b0a      	ldr	r3, [pc, #40]	; (800860c <memp_malloc+0x3c>)
 80085e2:	f240 1257 	movw	r2, #343	; 0x157
 80085e6:	490a      	ldr	r1, [pc, #40]	; (8008610 <memp_malloc+0x40>)
 80085e8:	480a      	ldr	r0, [pc, #40]	; (8008614 <memp_malloc+0x44>)
 80085ea:	f00b fb39 	bl	8013c60 <iprintf>
 80085ee:	2300      	movs	r3, #0
 80085f0:	e008      	b.n	8008604 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80085f2:	79fb      	ldrb	r3, [r7, #7]
 80085f4:	4a08      	ldr	r2, [pc, #32]	; (8008618 <memp_malloc+0x48>)
 80085f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7ff ff9c 	bl	8008538 <do_memp_malloc_pool>
 8008600:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8008602:	68fb      	ldr	r3, [r7, #12]
}
 8008604:	4618      	mov	r0, r3
 8008606:	3710      	adds	r7, #16
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}
 800860c:	0801514c 	.word	0x0801514c
 8008610:	080151dc 	.word	0x080151dc
 8008614:	080151a0 	.word	0x080151a0
 8008618:	0801a1d4 	.word	0x0801a1d4

0800861c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	f003 0303 	and.w	r3, r3, #3
 800862c:	2b00      	cmp	r3, #0
 800862e:	d006      	beq.n	800863e <do_memp_free_pool+0x22>
 8008630:	4b0a      	ldr	r3, [pc, #40]	; (800865c <do_memp_free_pool+0x40>)
 8008632:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008636:	490a      	ldr	r1, [pc, #40]	; (8008660 <do_memp_free_pool+0x44>)
 8008638:	480a      	ldr	r0, [pc, #40]	; (8008664 <do_memp_free_pool+0x48>)
 800863a:	f00b fb11 	bl	8013c60 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8008654:	bf00      	nop
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	0801514c 	.word	0x0801514c
 8008660:	080151fc 	.word	0x080151fc
 8008664:	080151a0 	.word	0x080151a0

08008668 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d106      	bne.n	8008686 <memp_free_pool+0x1e>
 8008678:	4b0a      	ldr	r3, [pc, #40]	; (80086a4 <memp_free_pool+0x3c>)
 800867a:	f240 1295 	movw	r2, #405	; 0x195
 800867e:	490a      	ldr	r1, [pc, #40]	; (80086a8 <memp_free_pool+0x40>)
 8008680:	480a      	ldr	r0, [pc, #40]	; (80086ac <memp_free_pool+0x44>)
 8008682:	f00b faed 	bl	8013c60 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d007      	beq.n	800869c <memp_free_pool+0x34>
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d004      	beq.n	800869c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8008692:	6839      	ldr	r1, [r7, #0]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f7ff ffc1 	bl	800861c <do_memp_free_pool>
 800869a:	e000      	b.n	800869e <memp_free_pool+0x36>
    return;
 800869c:	bf00      	nop
}
 800869e:	3708      	adds	r7, #8
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	0801514c 	.word	0x0801514c
 80086a8:	080151c8 	.word	0x080151c8
 80086ac:	080151a0 	.word	0x080151a0

080086b0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	4603      	mov	r3, r0
 80086b8:	6039      	str	r1, [r7, #0]
 80086ba:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80086bc:	79fb      	ldrb	r3, [r7, #7]
 80086be:	2b08      	cmp	r3, #8
 80086c0:	d907      	bls.n	80086d2 <memp_free+0x22>
 80086c2:	4b0c      	ldr	r3, [pc, #48]	; (80086f4 <memp_free+0x44>)
 80086c4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80086c8:	490b      	ldr	r1, [pc, #44]	; (80086f8 <memp_free+0x48>)
 80086ca:	480c      	ldr	r0, [pc, #48]	; (80086fc <memp_free+0x4c>)
 80086cc:	f00b fac8 	bl	8013c60 <iprintf>
 80086d0:	e00c      	b.n	80086ec <memp_free+0x3c>

  if (mem == NULL) {
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d008      	beq.n	80086ea <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80086d8:	79fb      	ldrb	r3, [r7, #7]
 80086da:	4a09      	ldr	r2, [pc, #36]	; (8008700 <memp_free+0x50>)
 80086dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086e0:	6839      	ldr	r1, [r7, #0]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7ff ff9a 	bl	800861c <do_memp_free_pool>
 80086e8:	e000      	b.n	80086ec <memp_free+0x3c>
    return;
 80086ea:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	0801514c 	.word	0x0801514c
 80086f8:	0801521c 	.word	0x0801521c
 80086fc:	080151a0 	.word	0x080151a0
 8008700:	0801a1d4 	.word	0x0801a1d4

08008704 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008704:	b480      	push	{r7}
 8008706:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008708:	bf00      	nop
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
	...

08008714 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	607a      	str	r2, [r7, #4]
 8008720:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d108      	bne.n	800873a <netif_add+0x26>
 8008728:	4b5b      	ldr	r3, [pc, #364]	; (8008898 <netif_add+0x184>)
 800872a:	f240 1227 	movw	r2, #295	; 0x127
 800872e:	495b      	ldr	r1, [pc, #364]	; (800889c <netif_add+0x188>)
 8008730:	485b      	ldr	r0, [pc, #364]	; (80088a0 <netif_add+0x18c>)
 8008732:	f00b fa95 	bl	8013c60 <iprintf>
 8008736:	2300      	movs	r3, #0
 8008738:	e0a9      	b.n	800888e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	2b00      	cmp	r3, #0
 800873e:	d108      	bne.n	8008752 <netif_add+0x3e>
 8008740:	4b55      	ldr	r3, [pc, #340]	; (8008898 <netif_add+0x184>)
 8008742:	f44f 7294 	mov.w	r2, #296	; 0x128
 8008746:	4957      	ldr	r1, [pc, #348]	; (80088a4 <netif_add+0x190>)
 8008748:	4855      	ldr	r0, [pc, #340]	; (80088a0 <netif_add+0x18c>)
 800874a:	f00b fa89 	bl	8013c60 <iprintf>
 800874e:	2300      	movs	r3, #0
 8008750:	e09d      	b.n	800888e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d101      	bne.n	800875c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008758:	4b53      	ldr	r3, [pc, #332]	; (80088a8 <netif_add+0x194>)
 800875a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d101      	bne.n	8008766 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8008762:	4b51      	ldr	r3, [pc, #324]	; (80088a8 <netif_add+0x194>)
 8008764:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d101      	bne.n	8008770 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800876c:	4b4e      	ldr	r3, [pc, #312]	; (80088a8 <netif_add+0x194>)
 800876e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	4a49      	ldr	r2, [pc, #292]	; (80088ac <netif_add+0x198>)
 8008786:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	3324      	adds	r3, #36	; 0x24
 800879a:	2204      	movs	r2, #4
 800879c:	2100      	movs	r1, #0
 800879e:	4618      	mov	r0, r3
 80087a0:	f00b fa56 	bl	8013c50 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6a3a      	ldr	r2, [r7, #32]
 80087ae:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80087b0:	4b3f      	ldr	r3, [pc, #252]	; (80088b0 <netif_add+0x19c>)
 80087b2:	781a      	ldrb	r2, [r3, #0]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087be:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	68b9      	ldr	r1, [r7, #8]
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f000 f914 	bl	80089f4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80087cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ce:	68f8      	ldr	r0, [r7, #12]
 80087d0:	4798      	blx	r3
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d001      	beq.n	80087dc <netif_add+0xc8>
    return NULL;
 80087d8:	2300      	movs	r3, #0
 80087da:	e058      	b.n	800888e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80087e2:	2bff      	cmp	r3, #255	; 0xff
 80087e4:	d103      	bne.n	80087ee <netif_add+0xda>
        netif->num = 0;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 80087ee:	2300      	movs	r3, #0
 80087f0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80087f2:	4b30      	ldr	r3, [pc, #192]	; (80088b4 <netif_add+0x1a0>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	617b      	str	r3, [r7, #20]
 80087f8:	e02b      	b.n	8008852 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80087fa:	697a      	ldr	r2, [r7, #20]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d106      	bne.n	8008810 <netif_add+0xfc>
 8008802:	4b25      	ldr	r3, [pc, #148]	; (8008898 <netif_add+0x184>)
 8008804:	f240 128b 	movw	r2, #395	; 0x18b
 8008808:	492b      	ldr	r1, [pc, #172]	; (80088b8 <netif_add+0x1a4>)
 800880a:	4825      	ldr	r0, [pc, #148]	; (80088a0 <netif_add+0x18c>)
 800880c:	f00b fa28 	bl	8013c60 <iprintf>
        num_netifs++;
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	3301      	adds	r3, #1
 8008814:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	2bff      	cmp	r3, #255	; 0xff
 800881a:	dd06      	ble.n	800882a <netif_add+0x116>
 800881c:	4b1e      	ldr	r3, [pc, #120]	; (8008898 <netif_add+0x184>)
 800881e:	f240 128d 	movw	r2, #397	; 0x18d
 8008822:	4926      	ldr	r1, [pc, #152]	; (80088bc <netif_add+0x1a8>)
 8008824:	481e      	ldr	r0, [pc, #120]	; (80088a0 <netif_add+0x18c>)
 8008826:	f00b fa1b 	bl	8013c60 <iprintf>
        if (netif2->num == netif->num) {
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008836:	429a      	cmp	r2, r3
 8008838:	d108      	bne.n	800884c <netif_add+0x138>
          netif->num++;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008840:	3301      	adds	r3, #1
 8008842:	b2da      	uxtb	r2, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800884a:	e005      	b.n	8008858 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	617b      	str	r3, [r7, #20]
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d1d0      	bne.n	80087fa <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1be      	bne.n	80087dc <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008864:	2bfe      	cmp	r3, #254	; 0xfe
 8008866:	d103      	bne.n	8008870 <netif_add+0x15c>
    netif_num = 0;
 8008868:	4b11      	ldr	r3, [pc, #68]	; (80088b0 <netif_add+0x19c>)
 800886a:	2200      	movs	r2, #0
 800886c:	701a      	strb	r2, [r3, #0]
 800886e:	e006      	b.n	800887e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008876:	3301      	adds	r3, #1
 8008878:	b2da      	uxtb	r2, r3
 800887a:	4b0d      	ldr	r3, [pc, #52]	; (80088b0 <netif_add+0x19c>)
 800887c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800887e:	4b0d      	ldr	r3, [pc, #52]	; (80088b4 <netif_add+0x1a0>)
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008886:	4a0b      	ldr	r2, [pc, #44]	; (80088b4 <netif_add+0x1a0>)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800888c:	68fb      	ldr	r3, [r7, #12]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3718      	adds	r7, #24
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	08015238 	.word	0x08015238
 800889c:	080152cc 	.word	0x080152cc
 80088a0:	08015288 	.word	0x08015288
 80088a4:	080152e8 	.word	0x080152e8
 80088a8:	0801a248 	.word	0x0801a248
 80088ac:	08008cd7 	.word	0x08008cd7
 80088b0:	2000aebc 	.word	0x2000aebc
 80088b4:	2000aeb4 	.word	0x2000aeb4
 80088b8:	0801530c 	.word	0x0801530c
 80088bc:	08015320 	.word	0x08015320

080088c0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80088ca:	6839      	ldr	r1, [r7, #0]
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f002 fb57 	bl	800af80 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80088d2:	6839      	ldr	r1, [r7, #0]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f006 ff3d 	bl	800f754 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80088da:	bf00      	nop
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
	...

080088e4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b086      	sub	sp, #24
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d106      	bne.n	8008904 <netif_do_set_ipaddr+0x20>
 80088f6:	4b1d      	ldr	r3, [pc, #116]	; (800896c <netif_do_set_ipaddr+0x88>)
 80088f8:	f240 12cb 	movw	r2, #459	; 0x1cb
 80088fc:	491c      	ldr	r1, [pc, #112]	; (8008970 <netif_do_set_ipaddr+0x8c>)
 80088fe:	481d      	ldr	r0, [pc, #116]	; (8008974 <netif_do_set_ipaddr+0x90>)
 8008900:	f00b f9ae 	bl	8013c60 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d106      	bne.n	8008918 <netif_do_set_ipaddr+0x34>
 800890a:	4b18      	ldr	r3, [pc, #96]	; (800896c <netif_do_set_ipaddr+0x88>)
 800890c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8008910:	4917      	ldr	r1, [pc, #92]	; (8008970 <netif_do_set_ipaddr+0x8c>)
 8008912:	4818      	ldr	r0, [pc, #96]	; (8008974 <netif_do_set_ipaddr+0x90>)
 8008914:	f00b f9a4 	bl	8013c60 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	3304      	adds	r3, #4
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	429a      	cmp	r2, r3
 8008924:	d01c      	beq.n	8008960 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	3304      	adds	r3, #4
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8008936:	f107 0314 	add.w	r3, r7, #20
 800893a:	4619      	mov	r1, r3
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f7ff ffbf 	bl	80088c0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d002      	beq.n	800894e <netif_do_set_ipaddr+0x6a>
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	e000      	b.n	8008950 <netif_do_set_ipaddr+0x6c>
 800894e:	2300      	movs	r3, #0
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008954:	2101      	movs	r1, #1
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f000 f8d2 	bl	8008b00 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800895c:	2301      	movs	r3, #1
 800895e:	e000      	b.n	8008962 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3718      	adds	r7, #24
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	08015238 	.word	0x08015238
 8008970:	08015350 	.word	0x08015350
 8008974:	08015288 	.word	0x08015288

08008978 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	3308      	adds	r3, #8
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	429a      	cmp	r2, r3
 8008990:	d00a      	beq.n	80089a8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d002      	beq.n	800899e <netif_do_set_netmask+0x26>
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	e000      	b.n	80089a0 <netif_do_set_netmask+0x28>
 800899e:	2300      	movs	r3, #0
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80089a4:	2301      	movs	r3, #1
 80089a6:	e000      	b.n	80089aa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3714      	adds	r7, #20
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr

080089b6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80089b6:	b480      	push	{r7}
 80089b8:	b085      	sub	sp, #20
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	60f8      	str	r0, [r7, #12]
 80089be:	60b9      	str	r1, [r7, #8]
 80089c0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	330c      	adds	r3, #12
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d00a      	beq.n	80089e6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d002      	beq.n	80089dc <netif_do_set_gw+0x26>
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	e000      	b.n	80089de <netif_do_set_gw+0x28>
 80089dc:	2300      	movs	r3, #0
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80089e2:	2301      	movs	r3, #1
 80089e4:	e000      	b.n	80089e8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3714      	adds	r7, #20
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b088      	sub	sp, #32
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
 8008a00:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8008a02:	2300      	movs	r3, #0
 8008a04:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8008a06:	2300      	movs	r3, #0
 8008a08:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d101      	bne.n	8008a14 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8008a10:	4b1c      	ldr	r3, [pc, #112]	; (8008a84 <netif_set_addr+0x90>)
 8008a12:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d101      	bne.n	8008a1e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8008a1a:	4b1a      	ldr	r3, [pc, #104]	; (8008a84 <netif_set_addr+0x90>)
 8008a1c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d101      	bne.n	8008a28 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8008a24:	4b17      	ldr	r3, [pc, #92]	; (8008a84 <netif_set_addr+0x90>)
 8008a26:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d003      	beq.n	8008a36 <netif_set_addr+0x42>
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d101      	bne.n	8008a3a <netif_set_addr+0x46>
 8008a36:	2301      	movs	r3, #1
 8008a38:	e000      	b.n	8008a3c <netif_set_addr+0x48>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d006      	beq.n	8008a52 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008a44:	f107 0310 	add.w	r3, r7, #16
 8008a48:	461a      	mov	r2, r3
 8008a4a:	68b9      	ldr	r1, [r7, #8]
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f7ff ff49 	bl	80088e4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8008a52:	69fa      	ldr	r2, [r7, #28]
 8008a54:	6879      	ldr	r1, [r7, #4]
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f7ff ff8e 	bl	8008978 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8008a5c:	69ba      	ldr	r2, [r7, #24]
 8008a5e:	6839      	ldr	r1, [r7, #0]
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f7ff ffa8 	bl	80089b6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d106      	bne.n	8008a7a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008a6c:	f107 0310 	add.w	r3, r7, #16
 8008a70:	461a      	mov	r2, r3
 8008a72:	68b9      	ldr	r1, [r7, #8]
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f7ff ff35 	bl	80088e4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8008a7a:	bf00      	nop
 8008a7c:	3720      	adds	r7, #32
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	0801a248 	.word	0x0801a248

08008a88 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008a90:	4a04      	ldr	r2, [pc, #16]	; (8008aa4 <netif_set_default+0x1c>)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008a96:	bf00      	nop
 8008a98:	370c      	adds	r7, #12
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	2000aeb8 	.word	0x2000aeb8

08008aa8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d107      	bne.n	8008ac6 <netif_set_up+0x1e>
 8008ab6:	4b0f      	ldr	r3, [pc, #60]	; (8008af4 <netif_set_up+0x4c>)
 8008ab8:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008abc:	490e      	ldr	r1, [pc, #56]	; (8008af8 <netif_set_up+0x50>)
 8008abe:	480f      	ldr	r0, [pc, #60]	; (8008afc <netif_set_up+0x54>)
 8008ac0:	f00b f8ce 	bl	8013c60 <iprintf>
 8008ac4:	e013      	b.n	8008aee <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008acc:	f003 0301 	and.w	r3, r3, #1
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10c      	bne.n	8008aee <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008ada:	f043 0301 	orr.w	r3, r3, #1
 8008ade:	b2da      	uxtb	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008ae6:	2103      	movs	r1, #3
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f809 	bl	8008b00 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	08015238 	.word	0x08015238
 8008af8:	080153c0 	.word	0x080153c0
 8008afc:	08015288 	.word	0x08015288

08008b00 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d106      	bne.n	8008b20 <netif_issue_reports+0x20>
 8008b12:	4b18      	ldr	r3, [pc, #96]	; (8008b74 <netif_issue_reports+0x74>)
 8008b14:	f240 326d 	movw	r2, #877	; 0x36d
 8008b18:	4917      	ldr	r1, [pc, #92]	; (8008b78 <netif_issue_reports+0x78>)
 8008b1a:	4818      	ldr	r0, [pc, #96]	; (8008b7c <netif_issue_reports+0x7c>)
 8008b1c:	f00b f8a0 	bl	8013c60 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008b26:	f003 0304 	and.w	r3, r3, #4
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d01e      	beq.n	8008b6c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008b34:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d017      	beq.n	8008b6c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008b3c:	78fb      	ldrb	r3, [r7, #3]
 8008b3e:	f003 0301 	and.w	r3, r3, #1
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d013      	beq.n	8008b6e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	3304      	adds	r3, #4
 8008b4a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00e      	beq.n	8008b6e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008b56:	f003 0308 	and.w	r3, r3, #8
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d007      	beq.n	8008b6e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	3304      	adds	r3, #4
 8008b62:	4619      	mov	r1, r3
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f009 fbf7 	bl	8012358 <etharp_request>
 8008b6a:	e000      	b.n	8008b6e <netif_issue_reports+0x6e>
    return;
 8008b6c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8008b6e:	3708      	adds	r7, #8
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	08015238 	.word	0x08015238
 8008b78:	080153dc 	.word	0x080153dc
 8008b7c:	08015288 	.word	0x08015288

08008b80 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d107      	bne.n	8008b9e <netif_set_down+0x1e>
 8008b8e:	4b12      	ldr	r3, [pc, #72]	; (8008bd8 <netif_set_down+0x58>)
 8008b90:	f240 329b 	movw	r2, #923	; 0x39b
 8008b94:	4911      	ldr	r1, [pc, #68]	; (8008bdc <netif_set_down+0x5c>)
 8008b96:	4812      	ldr	r0, [pc, #72]	; (8008be0 <netif_set_down+0x60>)
 8008b98:	f00b f862 	bl	8013c60 <iprintf>
 8008b9c:	e019      	b.n	8008bd2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008ba4:	f003 0301 	and.w	r3, r3, #1
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d012      	beq.n	8008bd2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008bb2:	f023 0301 	bic.w	r3, r3, #1
 8008bb6:	b2da      	uxtb	r2, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008bc4:	f003 0308 	and.w	r3, r3, #8
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d002      	beq.n	8008bd2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f008 ff7d 	bl	8011acc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	08015238 	.word	0x08015238
 8008bdc:	08015400 	.word	0x08015400
 8008be0:	08015288 	.word	0x08015288

08008be4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d107      	bne.n	8008c02 <netif_set_link_up+0x1e>
 8008bf2:	4b15      	ldr	r3, [pc, #84]	; (8008c48 <netif_set_link_up+0x64>)
 8008bf4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8008bf8:	4914      	ldr	r1, [pc, #80]	; (8008c4c <netif_set_link_up+0x68>)
 8008bfa:	4815      	ldr	r0, [pc, #84]	; (8008c50 <netif_set_link_up+0x6c>)
 8008bfc:	f00b f830 	bl	8013c60 <iprintf>
 8008c00:	e01e      	b.n	8008c40 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008c08:	f003 0304 	and.w	r3, r3, #4
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d117      	bne.n	8008c40 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008c16:	f043 0304 	orr.w	r3, r3, #4
 8008c1a:	b2da      	uxtb	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f007 f9c2 	bl	800ffac <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008c28:	2103      	movs	r1, #3
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7ff ff68 	bl	8008b00 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	69db      	ldr	r3, [r3, #28]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d003      	beq.n	8008c40 <netif_set_link_up+0x5c>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	69db      	ldr	r3, [r3, #28]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008c40:	3708      	adds	r7, #8
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	08015238 	.word	0x08015238
 8008c4c:	08015420 	.word	0x08015420
 8008c50:	08015288 	.word	0x08015288

08008c54 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d107      	bne.n	8008c72 <netif_set_link_down+0x1e>
 8008c62:	4b11      	ldr	r3, [pc, #68]	; (8008ca8 <netif_set_link_down+0x54>)
 8008c64:	f240 4206 	movw	r2, #1030	; 0x406
 8008c68:	4910      	ldr	r1, [pc, #64]	; (8008cac <netif_set_link_down+0x58>)
 8008c6a:	4811      	ldr	r0, [pc, #68]	; (8008cb0 <netif_set_link_down+0x5c>)
 8008c6c:	f00a fff8 	bl	8013c60 <iprintf>
 8008c70:	e017      	b.n	8008ca2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008c78:	f003 0304 	and.w	r3, r3, #4
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d010      	beq.n	8008ca2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008c86:	f023 0304 	bic.w	r3, r3, #4
 8008c8a:	b2da      	uxtb	r2, r3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	69db      	ldr	r3, [r3, #28]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d003      	beq.n	8008ca2 <netif_set_link_down+0x4e>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	69db      	ldr	r3, [r3, #28]
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	08015238 	.word	0x08015238
 8008cac:	08015444 	.word	0x08015444
 8008cb0:	08015288 	.word	0x08015288

08008cb4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d002      	beq.n	8008cca <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	61da      	str	r2, [r3, #28]
  }
}
 8008cca:	bf00      	nop
 8008ccc:	370c      	adds	r7, #12
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b085      	sub	sp, #20
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	60f8      	str	r0, [r7, #12]
 8008cde:	60b9      	str	r1, [r7, #8]
 8008ce0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008ce2:	f06f 030b 	mvn.w	r3, #11
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3714      	adds	r7, #20
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
	...

08008cf4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008cfe:	79fb      	ldrb	r3, [r7, #7]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d013      	beq.n	8008d2c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008d04:	4b0d      	ldr	r3, [pc, #52]	; (8008d3c <netif_get_by_index+0x48>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	60fb      	str	r3, [r7, #12]
 8008d0a:	e00c      	b.n	8008d26 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008d12:	3301      	adds	r3, #1
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	79fa      	ldrb	r2, [r7, #7]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d101      	bne.n	8008d20 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	e006      	b.n	8008d2e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	60fb      	str	r3, [r7, #12]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1ef      	bne.n	8008d0c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3714      	adds	r7, #20
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	2000aeb4 	.word	0x2000aeb4

08008d40 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008d46:	4b0c      	ldr	r3, [pc, #48]	; (8008d78 <pbuf_free_ooseq+0x38>)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008d4c:	4b0b      	ldr	r3, [pc, #44]	; (8008d7c <pbuf_free_ooseq+0x3c>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	607b      	str	r3, [r7, #4]
 8008d52:	e00a      	b.n	8008d6a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d003      	beq.n	8008d64 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f002 f94d 	bl	800affc <tcp_free_ooseq>
      return;
 8008d62:	e005      	b.n	8008d70 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	607b      	str	r3, [r7, #4]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1f1      	bne.n	8008d54 <pbuf_free_ooseq+0x14>
    }
  }
}
 8008d70:	3708      	adds	r7, #8
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	2000aebd 	.word	0x2000aebd
 8008d7c:	2000aecc 	.word	0x2000aecc

08008d80 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008d80:	b480      	push	{r7}
 8008d82:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8008d84:	4b03      	ldr	r3, [pc, #12]	; (8008d94 <pbuf_pool_is_empty+0x14>)
 8008d86:	2201      	movs	r2, #1
 8008d88:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008d8a:	bf00      	nop
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr
 8008d94:	2000aebd 	.word	0x2000aebd

08008d98 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	4611      	mov	r1, r2
 8008da4:	461a      	mov	r2, r3
 8008da6:	460b      	mov	r3, r1
 8008da8:	80fb      	strh	r3, [r7, #6]
 8008daa:	4613      	mov	r3, r2
 8008dac:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	88fa      	ldrh	r2, [r7, #6]
 8008dbe:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	88ba      	ldrh	r2, [r7, #4]
 8008dc4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8008dc6:	8b3b      	ldrh	r3, [r7, #24]
 8008dc8:	b2da      	uxtb	r2, r3
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	7f3a      	ldrb	r2, [r7, #28]
 8008dd2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	73da      	strb	r2, [r3, #15]
}
 8008de0:	bf00      	nop
 8008de2:	3714      	adds	r7, #20
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b08c      	sub	sp, #48	; 0x30
 8008df0:	af02      	add	r7, sp, #8
 8008df2:	4603      	mov	r3, r0
 8008df4:	71fb      	strb	r3, [r7, #7]
 8008df6:	460b      	mov	r3, r1
 8008df8:	80bb      	strh	r3, [r7, #4]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008dfe:	79fb      	ldrb	r3, [r7, #7]
 8008e00:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008e02:	887b      	ldrh	r3, [r7, #2]
 8008e04:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008e08:	d07f      	beq.n	8008f0a <pbuf_alloc+0x11e>
 8008e0a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008e0e:	f300 80c8 	bgt.w	8008fa2 <pbuf_alloc+0x1b6>
 8008e12:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008e16:	d010      	beq.n	8008e3a <pbuf_alloc+0x4e>
 8008e18:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008e1c:	f300 80c1 	bgt.w	8008fa2 <pbuf_alloc+0x1b6>
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d002      	beq.n	8008e2a <pbuf_alloc+0x3e>
 8008e24:	2b41      	cmp	r3, #65	; 0x41
 8008e26:	f040 80bc 	bne.w	8008fa2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008e2a:	887a      	ldrh	r2, [r7, #2]
 8008e2c:	88bb      	ldrh	r3, [r7, #4]
 8008e2e:	4619      	mov	r1, r3
 8008e30:	2000      	movs	r0, #0
 8008e32:	f000 f8d1 	bl	8008fd8 <pbuf_alloc_reference>
 8008e36:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8008e38:	e0bd      	b.n	8008fb6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008e42:	88bb      	ldrh	r3, [r7, #4]
 8008e44:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008e46:	2008      	movs	r0, #8
 8008e48:	f7ff fbc2 	bl	80085d0 <memp_malloc>
 8008e4c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d109      	bne.n	8008e68 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8008e54:	f7ff ff94 	bl	8008d80 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d002      	beq.n	8008e64 <pbuf_alloc+0x78>
            pbuf_free(p);
 8008e5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e60:	f000 faa8 	bl	80093b4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008e64:	2300      	movs	r3, #0
 8008e66:	e0a7      	b.n	8008fb8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008e68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e6a:	3303      	adds	r3, #3
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	f023 0303 	bic.w	r3, r3, #3
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	8b7a      	ldrh	r2, [r7, #26]
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	bf28      	it	cs
 8008e80:	4613      	movcs	r3, r2
 8008e82:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008e84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e86:	3310      	adds	r3, #16
 8008e88:	693a      	ldr	r2, [r7, #16]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	3303      	adds	r3, #3
 8008e8e:	f023 0303 	bic.w	r3, r3, #3
 8008e92:	4618      	mov	r0, r3
 8008e94:	89f9      	ldrh	r1, [r7, #14]
 8008e96:	8b7a      	ldrh	r2, [r7, #26]
 8008e98:	2300      	movs	r3, #0
 8008e9a:	9301      	str	r3, [sp, #4]
 8008e9c:	887b      	ldrh	r3, [r7, #2]
 8008e9e:	9300      	str	r3, [sp, #0]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	4601      	mov	r1, r0
 8008ea4:	6938      	ldr	r0, [r7, #16]
 8008ea6:	f7ff ff77 	bl	8008d98 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	f003 0303 	and.w	r3, r3, #3
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d006      	beq.n	8008ec4 <pbuf_alloc+0xd8>
 8008eb6:	4b42      	ldr	r3, [pc, #264]	; (8008fc0 <pbuf_alloc+0x1d4>)
 8008eb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ebc:	4941      	ldr	r1, [pc, #260]	; (8008fc4 <pbuf_alloc+0x1d8>)
 8008ebe:	4842      	ldr	r0, [pc, #264]	; (8008fc8 <pbuf_alloc+0x1dc>)
 8008ec0:	f00a fece 	bl	8013c60 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008ec4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008ec6:	3303      	adds	r3, #3
 8008ec8:	f023 0303 	bic.w	r3, r3, #3
 8008ecc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008ed0:	d106      	bne.n	8008ee0 <pbuf_alloc+0xf4>
 8008ed2:	4b3b      	ldr	r3, [pc, #236]	; (8008fc0 <pbuf_alloc+0x1d4>)
 8008ed4:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008ed8:	493c      	ldr	r1, [pc, #240]	; (8008fcc <pbuf_alloc+0x1e0>)
 8008eda:	483b      	ldr	r0, [pc, #236]	; (8008fc8 <pbuf_alloc+0x1dc>)
 8008edc:	f00a fec0 	bl	8013c60 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d102      	bne.n	8008eec <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8008eea:	e002      	b.n	8008ef2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	693a      	ldr	r2, [r7, #16]
 8008ef0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8008ef6:	8b7a      	ldrh	r2, [r7, #26]
 8008ef8:	89fb      	ldrh	r3, [r7, #14]
 8008efa:	1ad3      	subs	r3, r2, r3
 8008efc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8008f02:	8b7b      	ldrh	r3, [r7, #26]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d19e      	bne.n	8008e46 <pbuf_alloc+0x5a>
      break;
 8008f08:	e055      	b.n	8008fb6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008f0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008f0c:	3303      	adds	r3, #3
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	f023 0303 	bic.w	r3, r3, #3
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	88bb      	ldrh	r3, [r7, #4]
 8008f18:	3303      	adds	r3, #3
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	f023 0303 	bic.w	r3, r3, #3
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	4413      	add	r3, r2
 8008f24:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008f26:	8b3b      	ldrh	r3, [r7, #24]
 8008f28:	3310      	adds	r3, #16
 8008f2a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008f2c:	8b3a      	ldrh	r2, [r7, #24]
 8008f2e:	88bb      	ldrh	r3, [r7, #4]
 8008f30:	3303      	adds	r3, #3
 8008f32:	f023 0303 	bic.w	r3, r3, #3
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d306      	bcc.n	8008f48 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008f3a:	8afa      	ldrh	r2, [r7, #22]
 8008f3c:	88bb      	ldrh	r3, [r7, #4]
 8008f3e:	3303      	adds	r3, #3
 8008f40:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d201      	bcs.n	8008f4c <pbuf_alloc+0x160>
        return NULL;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	e035      	b.n	8008fb8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008f4c:	8afb      	ldrh	r3, [r7, #22]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7ff f9ae 	bl	80082b0 <mem_malloc>
 8008f54:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8008f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d101      	bne.n	8008f60 <pbuf_alloc+0x174>
        return NULL;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	e02b      	b.n	8008fb8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008f60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008f62:	3310      	adds	r3, #16
 8008f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f66:	4413      	add	r3, r2
 8008f68:	3303      	adds	r3, #3
 8008f6a:	f023 0303 	bic.w	r3, r3, #3
 8008f6e:	4618      	mov	r0, r3
 8008f70:	88b9      	ldrh	r1, [r7, #4]
 8008f72:	88ba      	ldrh	r2, [r7, #4]
 8008f74:	2300      	movs	r3, #0
 8008f76:	9301      	str	r3, [sp, #4]
 8008f78:	887b      	ldrh	r3, [r7, #2]
 8008f7a:	9300      	str	r3, [sp, #0]
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	4601      	mov	r1, r0
 8008f80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f82:	f7ff ff09 	bl	8008d98 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	f003 0303 	and.w	r3, r3, #3
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d010      	beq.n	8008fb4 <pbuf_alloc+0x1c8>
 8008f92:	4b0b      	ldr	r3, [pc, #44]	; (8008fc0 <pbuf_alloc+0x1d4>)
 8008f94:	f44f 7291 	mov.w	r2, #290	; 0x122
 8008f98:	490d      	ldr	r1, [pc, #52]	; (8008fd0 <pbuf_alloc+0x1e4>)
 8008f9a:	480b      	ldr	r0, [pc, #44]	; (8008fc8 <pbuf_alloc+0x1dc>)
 8008f9c:	f00a fe60 	bl	8013c60 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008fa0:	e008      	b.n	8008fb4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008fa2:	4b07      	ldr	r3, [pc, #28]	; (8008fc0 <pbuf_alloc+0x1d4>)
 8008fa4:	f240 1227 	movw	r2, #295	; 0x127
 8008fa8:	490a      	ldr	r1, [pc, #40]	; (8008fd4 <pbuf_alloc+0x1e8>)
 8008faa:	4807      	ldr	r0, [pc, #28]	; (8008fc8 <pbuf_alloc+0x1dc>)
 8008fac:	f00a fe58 	bl	8013c60 <iprintf>
      return NULL;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	e001      	b.n	8008fb8 <pbuf_alloc+0x1cc>
      break;
 8008fb4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3728      	adds	r7, #40	; 0x28
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	08015468 	.word	0x08015468
 8008fc4:	08015498 	.word	0x08015498
 8008fc8:	080154c8 	.word	0x080154c8
 8008fcc:	080154f0 	.word	0x080154f0
 8008fd0:	08015524 	.word	0x08015524
 8008fd4:	08015550 	.word	0x08015550

08008fd8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b086      	sub	sp, #24
 8008fdc:	af02      	add	r7, sp, #8
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	807b      	strh	r3, [r7, #2]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008fe8:	883b      	ldrh	r3, [r7, #0]
 8008fea:	2b41      	cmp	r3, #65	; 0x41
 8008fec:	d009      	beq.n	8009002 <pbuf_alloc_reference+0x2a>
 8008fee:	883b      	ldrh	r3, [r7, #0]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d006      	beq.n	8009002 <pbuf_alloc_reference+0x2a>
 8008ff4:	4b0f      	ldr	r3, [pc, #60]	; (8009034 <pbuf_alloc_reference+0x5c>)
 8008ff6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008ffa:	490f      	ldr	r1, [pc, #60]	; (8009038 <pbuf_alloc_reference+0x60>)
 8008ffc:	480f      	ldr	r0, [pc, #60]	; (800903c <pbuf_alloc_reference+0x64>)
 8008ffe:	f00a fe2f 	bl	8013c60 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009002:	2007      	movs	r0, #7
 8009004:	f7ff fae4 	bl	80085d0 <memp_malloc>
 8009008:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d101      	bne.n	8009014 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8009010:	2300      	movs	r3, #0
 8009012:	e00b      	b.n	800902c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8009014:	8879      	ldrh	r1, [r7, #2]
 8009016:	887a      	ldrh	r2, [r7, #2]
 8009018:	2300      	movs	r3, #0
 800901a:	9301      	str	r3, [sp, #4]
 800901c:	883b      	ldrh	r3, [r7, #0]
 800901e:	9300      	str	r3, [sp, #0]
 8009020:	460b      	mov	r3, r1
 8009022:	6879      	ldr	r1, [r7, #4]
 8009024:	68f8      	ldr	r0, [r7, #12]
 8009026:	f7ff feb7 	bl	8008d98 <pbuf_init_alloced_pbuf>
  return p;
 800902a:	68fb      	ldr	r3, [r7, #12]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	08015468 	.word	0x08015468
 8009038:	0801556c 	.word	0x0801556c
 800903c:	080154c8 	.word	0x080154c8

08009040 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b088      	sub	sp, #32
 8009044:	af02      	add	r7, sp, #8
 8009046:	607b      	str	r3, [r7, #4]
 8009048:	4603      	mov	r3, r0
 800904a:	73fb      	strb	r3, [r7, #15]
 800904c:	460b      	mov	r3, r1
 800904e:	81bb      	strh	r3, [r7, #12]
 8009050:	4613      	mov	r3, r2
 8009052:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009054:	7bfb      	ldrb	r3, [r7, #15]
 8009056:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009058:	8a7b      	ldrh	r3, [r7, #18]
 800905a:	3303      	adds	r3, #3
 800905c:	f023 0203 	bic.w	r2, r3, #3
 8009060:	89bb      	ldrh	r3, [r7, #12]
 8009062:	441a      	add	r2, r3
 8009064:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009066:	429a      	cmp	r2, r3
 8009068:	d901      	bls.n	800906e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800906a:	2300      	movs	r3, #0
 800906c:	e018      	b.n	80090a0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800906e:	6a3b      	ldr	r3, [r7, #32]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d007      	beq.n	8009084 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009074:	8a7b      	ldrh	r3, [r7, #18]
 8009076:	3303      	adds	r3, #3
 8009078:	f023 0303 	bic.w	r3, r3, #3
 800907c:	6a3a      	ldr	r2, [r7, #32]
 800907e:	4413      	add	r3, r2
 8009080:	617b      	str	r3, [r7, #20]
 8009082:	e001      	b.n	8009088 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009084:	2300      	movs	r3, #0
 8009086:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	89b9      	ldrh	r1, [r7, #12]
 800908c:	89ba      	ldrh	r2, [r7, #12]
 800908e:	2302      	movs	r3, #2
 8009090:	9301      	str	r3, [sp, #4]
 8009092:	897b      	ldrh	r3, [r7, #10]
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	460b      	mov	r3, r1
 8009098:	6979      	ldr	r1, [r7, #20]
 800909a:	f7ff fe7d 	bl	8008d98 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800909e:	687b      	ldr	r3, [r7, #4]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3718      	adds	r7, #24
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	460b      	mov	r3, r1
 80090b2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d106      	bne.n	80090c8 <pbuf_realloc+0x20>
 80090ba:	4b3a      	ldr	r3, [pc, #232]	; (80091a4 <pbuf_realloc+0xfc>)
 80090bc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80090c0:	4939      	ldr	r1, [pc, #228]	; (80091a8 <pbuf_realloc+0x100>)
 80090c2:	483a      	ldr	r0, [pc, #232]	; (80091ac <pbuf_realloc+0x104>)
 80090c4:	f00a fdcc 	bl	8013c60 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	891b      	ldrh	r3, [r3, #8]
 80090cc:	887a      	ldrh	r2, [r7, #2]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d263      	bcs.n	800919a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	891a      	ldrh	r2, [r3, #8]
 80090d6:	887b      	ldrh	r3, [r7, #2]
 80090d8:	1ad3      	subs	r3, r2, r3
 80090da:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80090dc:	887b      	ldrh	r3, [r7, #2]
 80090de:	817b      	strh	r3, [r7, #10]
  q = p;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80090e4:	e018      	b.n	8009118 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	895b      	ldrh	r3, [r3, #10]
 80090ea:	897a      	ldrh	r2, [r7, #10]
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	891a      	ldrh	r2, [r3, #8]
 80090f4:	893b      	ldrh	r3, [r7, #8]
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d106      	bne.n	8009118 <pbuf_realloc+0x70>
 800910a:	4b26      	ldr	r3, [pc, #152]	; (80091a4 <pbuf_realloc+0xfc>)
 800910c:	f240 12af 	movw	r2, #431	; 0x1af
 8009110:	4927      	ldr	r1, [pc, #156]	; (80091b0 <pbuf_realloc+0x108>)
 8009112:	4826      	ldr	r0, [pc, #152]	; (80091ac <pbuf_realloc+0x104>)
 8009114:	f00a fda4 	bl	8013c60 <iprintf>
  while (rem_len > q->len) {
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	895b      	ldrh	r3, [r3, #10]
 800911c:	897a      	ldrh	r2, [r7, #10]
 800911e:	429a      	cmp	r2, r3
 8009120:	d8e1      	bhi.n	80090e6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	7b1b      	ldrb	r3, [r3, #12]
 8009126:	f003 030f 	and.w	r3, r3, #15
 800912a:	2b00      	cmp	r3, #0
 800912c:	d121      	bne.n	8009172 <pbuf_realloc+0xca>
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	895b      	ldrh	r3, [r3, #10]
 8009132:	897a      	ldrh	r2, [r7, #10]
 8009134:	429a      	cmp	r2, r3
 8009136:	d01c      	beq.n	8009172 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	7b5b      	ldrb	r3, [r3, #13]
 800913c:	f003 0302 	and.w	r3, r3, #2
 8009140:	2b00      	cmp	r3, #0
 8009142:	d116      	bne.n	8009172 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	685a      	ldr	r2, [r3, #4]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	b29a      	uxth	r2, r3
 800914e:	897b      	ldrh	r3, [r7, #10]
 8009150:	4413      	add	r3, r2
 8009152:	b29b      	uxth	r3, r3
 8009154:	4619      	mov	r1, r3
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f7fe ffae 	bl	80080b8 <mem_trim>
 800915c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d106      	bne.n	8009172 <pbuf_realloc+0xca>
 8009164:	4b0f      	ldr	r3, [pc, #60]	; (80091a4 <pbuf_realloc+0xfc>)
 8009166:	f240 12bd 	movw	r2, #445	; 0x1bd
 800916a:	4912      	ldr	r1, [pc, #72]	; (80091b4 <pbuf_realloc+0x10c>)
 800916c:	480f      	ldr	r0, [pc, #60]	; (80091ac <pbuf_realloc+0x104>)
 800916e:	f00a fd77 	bl	8013c60 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	897a      	ldrh	r2, [r7, #10]
 8009176:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	895a      	ldrh	r2, [r3, #10]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d004      	beq.n	8009192 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4618      	mov	r0, r3
 800918e:	f000 f911 	bl	80093b4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	601a      	str	r2, [r3, #0]
 8009198:	e000      	b.n	800919c <pbuf_realloc+0xf4>
    return;
 800919a:	bf00      	nop

}
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	08015468 	.word	0x08015468
 80091a8:	08015580 	.word	0x08015580
 80091ac:	080154c8 	.word	0x080154c8
 80091b0:	08015598 	.word	0x08015598
 80091b4:	080155b0 	.word	0x080155b0

080091b8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b086      	sub	sp, #24
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	4613      	mov	r3, r2
 80091c4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d106      	bne.n	80091da <pbuf_add_header_impl+0x22>
 80091cc:	4b2b      	ldr	r3, [pc, #172]	; (800927c <pbuf_add_header_impl+0xc4>)
 80091ce:	f240 12df 	movw	r2, #479	; 0x1df
 80091d2:	492b      	ldr	r1, [pc, #172]	; (8009280 <pbuf_add_header_impl+0xc8>)
 80091d4:	482b      	ldr	r0, [pc, #172]	; (8009284 <pbuf_add_header_impl+0xcc>)
 80091d6:	f00a fd43 	bl	8013c60 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d003      	beq.n	80091e8 <pbuf_add_header_impl+0x30>
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091e6:	d301      	bcc.n	80091ec <pbuf_add_header_impl+0x34>
    return 1;
 80091e8:	2301      	movs	r3, #1
 80091ea:	e043      	b.n	8009274 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d101      	bne.n	80091f6 <pbuf_add_header_impl+0x3e>
    return 0;
 80091f2:	2300      	movs	r3, #0
 80091f4:	e03e      	b.n	8009274 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	891a      	ldrh	r2, [r3, #8]
 80091fe:	8a7b      	ldrh	r3, [r7, #18]
 8009200:	4413      	add	r3, r2
 8009202:	b29b      	uxth	r3, r3
 8009204:	8a7a      	ldrh	r2, [r7, #18]
 8009206:	429a      	cmp	r2, r3
 8009208:	d901      	bls.n	800920e <pbuf_add_header_impl+0x56>
    return 1;
 800920a:	2301      	movs	r3, #1
 800920c:	e032      	b.n	8009274 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	7b1b      	ldrb	r3, [r3, #12]
 8009212:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009214:	8a3b      	ldrh	r3, [r7, #16]
 8009216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00c      	beq.n	8009238 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	685a      	ldr	r2, [r3, #4]
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	425b      	negs	r3, r3
 8009226:	4413      	add	r3, r2
 8009228:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	3310      	adds	r3, #16
 800922e:	697a      	ldr	r2, [r7, #20]
 8009230:	429a      	cmp	r2, r3
 8009232:	d20d      	bcs.n	8009250 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009234:	2301      	movs	r3, #1
 8009236:	e01d      	b.n	8009274 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009238:	79fb      	ldrb	r3, [r7, #7]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d006      	beq.n	800924c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	685a      	ldr	r2, [r3, #4]
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	425b      	negs	r3, r3
 8009246:	4413      	add	r3, r2
 8009248:	617b      	str	r3, [r7, #20]
 800924a:	e001      	b.n	8009250 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800924c:	2301      	movs	r3, #1
 800924e:	e011      	b.n	8009274 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	697a      	ldr	r2, [r7, #20]
 8009254:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	895a      	ldrh	r2, [r3, #10]
 800925a:	8a7b      	ldrh	r3, [r7, #18]
 800925c:	4413      	add	r3, r2
 800925e:	b29a      	uxth	r2, r3
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	891a      	ldrh	r2, [r3, #8]
 8009268:	8a7b      	ldrh	r3, [r7, #18]
 800926a:	4413      	add	r3, r2
 800926c:	b29a      	uxth	r2, r3
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	811a      	strh	r2, [r3, #8]


  return 0;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3718      	adds	r7, #24
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	08015468 	.word	0x08015468
 8009280:	080155cc 	.word	0x080155cc
 8009284:	080154c8 	.word	0x080154c8

08009288 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009292:	2200      	movs	r2, #0
 8009294:	6839      	ldr	r1, [r7, #0]
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f7ff ff8e 	bl	80091b8 <pbuf_add_header_impl>
 800929c:	4603      	mov	r3, r0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3708      	adds	r7, #8
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
	...

080092a8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d106      	bne.n	80092c6 <pbuf_remove_header+0x1e>
 80092b8:	4b20      	ldr	r3, [pc, #128]	; (800933c <pbuf_remove_header+0x94>)
 80092ba:	f240 224b 	movw	r2, #587	; 0x24b
 80092be:	4920      	ldr	r1, [pc, #128]	; (8009340 <pbuf_remove_header+0x98>)
 80092c0:	4820      	ldr	r0, [pc, #128]	; (8009344 <pbuf_remove_header+0x9c>)
 80092c2:	f00a fccd 	bl	8013c60 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <pbuf_remove_header+0x2c>
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092d2:	d301      	bcc.n	80092d8 <pbuf_remove_header+0x30>
    return 1;
 80092d4:	2301      	movs	r3, #1
 80092d6:	e02c      	b.n	8009332 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d101      	bne.n	80092e2 <pbuf_remove_header+0x3a>
    return 0;
 80092de:	2300      	movs	r3, #0
 80092e0:	e027      	b.n	8009332 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	895b      	ldrh	r3, [r3, #10]
 80092ea:	89fa      	ldrh	r2, [r7, #14]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d908      	bls.n	8009302 <pbuf_remove_header+0x5a>
 80092f0:	4b12      	ldr	r3, [pc, #72]	; (800933c <pbuf_remove_header+0x94>)
 80092f2:	f240 2255 	movw	r2, #597	; 0x255
 80092f6:	4914      	ldr	r1, [pc, #80]	; (8009348 <pbuf_remove_header+0xa0>)
 80092f8:	4812      	ldr	r0, [pc, #72]	; (8009344 <pbuf_remove_header+0x9c>)
 80092fa:	f00a fcb1 	bl	8013c60 <iprintf>
 80092fe:	2301      	movs	r3, #1
 8009300:	e017      	b.n	8009332 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	685a      	ldr	r2, [r3, #4]
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	441a      	add	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	895a      	ldrh	r2, [r3, #10]
 8009318:	89fb      	ldrh	r3, [r7, #14]
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	b29a      	uxth	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	891a      	ldrh	r2, [r3, #8]
 8009326:	89fb      	ldrh	r3, [r7, #14]
 8009328:	1ad3      	subs	r3, r2, r3
 800932a:	b29a      	uxth	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	08015468 	.word	0x08015468
 8009340:	080155cc 	.word	0x080155cc
 8009344:	080154c8 	.word	0x080154c8
 8009348:	080155d8 	.word	0x080155d8

0800934c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	460b      	mov	r3, r1
 8009356:	807b      	strh	r3, [r7, #2]
 8009358:	4613      	mov	r3, r2
 800935a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800935c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009360:	2b00      	cmp	r3, #0
 8009362:	da08      	bge.n	8009376 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009364:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009368:	425b      	negs	r3, r3
 800936a:	4619      	mov	r1, r3
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f7ff ff9b 	bl	80092a8 <pbuf_remove_header>
 8009372:	4603      	mov	r3, r0
 8009374:	e007      	b.n	8009386 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009376:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800937a:	787a      	ldrb	r2, [r7, #1]
 800937c:	4619      	mov	r1, r3
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f7ff ff1a 	bl	80091b8 <pbuf_add_header_impl>
 8009384:	4603      	mov	r3, r0
  }
}
 8009386:	4618      	mov	r0, r3
 8009388:	3708      	adds	r7, #8
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b082      	sub	sp, #8
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	460b      	mov	r3, r1
 8009398:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800939a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800939e:	2201      	movs	r2, #1
 80093a0:	4619      	mov	r1, r3
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f7ff ffd2 	bl	800934c <pbuf_header_impl>
 80093a8:	4603      	mov	r3, r0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3708      	adds	r7, #8
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
	...

080093b4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b086      	sub	sp, #24
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d10b      	bne.n	80093da <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d106      	bne.n	80093d6 <pbuf_free+0x22>
 80093c8:	4b38      	ldr	r3, [pc, #224]	; (80094ac <pbuf_free+0xf8>)
 80093ca:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80093ce:	4938      	ldr	r1, [pc, #224]	; (80094b0 <pbuf_free+0xfc>)
 80093d0:	4838      	ldr	r0, [pc, #224]	; (80094b4 <pbuf_free+0x100>)
 80093d2:	f00a fc45 	bl	8013c60 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80093d6:	2300      	movs	r3, #0
 80093d8:	e063      	b.n	80094a2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80093da:	2300      	movs	r3, #0
 80093dc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80093de:	e05c      	b.n	800949a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	7b9b      	ldrb	r3, [r3, #14]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d106      	bne.n	80093f6 <pbuf_free+0x42>
 80093e8:	4b30      	ldr	r3, [pc, #192]	; (80094ac <pbuf_free+0xf8>)
 80093ea:	f240 22f1 	movw	r2, #753	; 0x2f1
 80093ee:	4932      	ldr	r1, [pc, #200]	; (80094b8 <pbuf_free+0x104>)
 80093f0:	4830      	ldr	r0, [pc, #192]	; (80094b4 <pbuf_free+0x100>)
 80093f2:	f00a fc35 	bl	8013c60 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	7b9b      	ldrb	r3, [r3, #14]
 80093fa:	3b01      	subs	r3, #1
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	739a      	strb	r2, [r3, #14]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	7b9b      	ldrb	r3, [r3, #14]
 8009406:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009408:	7dbb      	ldrb	r3, [r7, #22]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d143      	bne.n	8009496 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	7b1b      	ldrb	r3, [r3, #12]
 8009418:	f003 030f 	and.w	r3, r3, #15
 800941c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	7b5b      	ldrb	r3, [r3, #13]
 8009422:	f003 0302 	and.w	r3, r3, #2
 8009426:	2b00      	cmp	r3, #0
 8009428:	d011      	beq.n	800944e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d106      	bne.n	8009444 <pbuf_free+0x90>
 8009436:	4b1d      	ldr	r3, [pc, #116]	; (80094ac <pbuf_free+0xf8>)
 8009438:	f240 22ff 	movw	r2, #767	; 0x2ff
 800943c:	491f      	ldr	r1, [pc, #124]	; (80094bc <pbuf_free+0x108>)
 800943e:	481d      	ldr	r0, [pc, #116]	; (80094b4 <pbuf_free+0x100>)
 8009440:	f00a fc0e 	bl	8013c60 <iprintf>
        pc->custom_free_function(p);
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	691b      	ldr	r3, [r3, #16]
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	4798      	blx	r3
 800944c:	e01d      	b.n	800948a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800944e:	7bfb      	ldrb	r3, [r7, #15]
 8009450:	2b02      	cmp	r3, #2
 8009452:	d104      	bne.n	800945e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8009454:	6879      	ldr	r1, [r7, #4]
 8009456:	2008      	movs	r0, #8
 8009458:	f7ff f92a 	bl	80086b0 <memp_free>
 800945c:	e015      	b.n	800948a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800945e:	7bfb      	ldrb	r3, [r7, #15]
 8009460:	2b01      	cmp	r3, #1
 8009462:	d104      	bne.n	800946e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8009464:	6879      	ldr	r1, [r7, #4]
 8009466:	2007      	movs	r0, #7
 8009468:	f7ff f922 	bl	80086b0 <memp_free>
 800946c:	e00d      	b.n	800948a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800946e:	7bfb      	ldrb	r3, [r7, #15]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d103      	bne.n	800947c <pbuf_free+0xc8>
          mem_free(p);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f7fe fdb5 	bl	8007fe4 <mem_free>
 800947a:	e006      	b.n	800948a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800947c:	4b0b      	ldr	r3, [pc, #44]	; (80094ac <pbuf_free+0xf8>)
 800947e:	f240 320f 	movw	r2, #783	; 0x30f
 8009482:	490f      	ldr	r1, [pc, #60]	; (80094c0 <pbuf_free+0x10c>)
 8009484:	480b      	ldr	r0, [pc, #44]	; (80094b4 <pbuf_free+0x100>)
 8009486:	f00a fbeb 	bl	8013c60 <iprintf>
        }
      }
      count++;
 800948a:	7dfb      	ldrb	r3, [r7, #23]
 800948c:	3301      	adds	r3, #1
 800948e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	607b      	str	r3, [r7, #4]
 8009494:	e001      	b.n	800949a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8009496:	2300      	movs	r3, #0
 8009498:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d19f      	bne.n	80093e0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80094a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3718      	adds	r7, #24
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	08015468 	.word	0x08015468
 80094b0:	080155cc 	.word	0x080155cc
 80094b4:	080154c8 	.word	0x080154c8
 80094b8:	080155f8 	.word	0x080155f8
 80094bc:	08015610 	.word	0x08015610
 80094c0:	08015634 	.word	0x08015634

080094c4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80094cc:	2300      	movs	r3, #0
 80094ce:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80094d0:	e005      	b.n	80094de <pbuf_clen+0x1a>
    ++len;
 80094d2:	89fb      	ldrh	r3, [r7, #14]
 80094d4:	3301      	adds	r3, #1
 80094d6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1f6      	bne.n	80094d2 <pbuf_clen+0xe>
  }
  return len;
 80094e4:	89fb      	ldrh	r3, [r7, #14]
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3714      	adds	r7, #20
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
	...

080094f4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d010      	beq.n	8009524 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	7b9b      	ldrb	r3, [r3, #14]
 8009506:	3301      	adds	r3, #1
 8009508:	b2da      	uxtb	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	7b9b      	ldrb	r3, [r3, #14]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d106      	bne.n	8009524 <pbuf_ref+0x30>
 8009516:	4b05      	ldr	r3, [pc, #20]	; (800952c <pbuf_ref+0x38>)
 8009518:	f240 3242 	movw	r2, #834	; 0x342
 800951c:	4904      	ldr	r1, [pc, #16]	; (8009530 <pbuf_ref+0x3c>)
 800951e:	4805      	ldr	r0, [pc, #20]	; (8009534 <pbuf_ref+0x40>)
 8009520:	f00a fb9e 	bl	8013c60 <iprintf>
  }
}
 8009524:	bf00      	nop
 8009526:	3708      	adds	r7, #8
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	08015468 	.word	0x08015468
 8009530:	08015648 	.word	0x08015648
 8009534:	080154c8 	.word	0x080154c8

08009538 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d002      	beq.n	800954e <pbuf_cat+0x16>
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d107      	bne.n	800955e <pbuf_cat+0x26>
 800954e:	4b20      	ldr	r3, [pc, #128]	; (80095d0 <pbuf_cat+0x98>)
 8009550:	f240 3259 	movw	r2, #857	; 0x359
 8009554:	491f      	ldr	r1, [pc, #124]	; (80095d4 <pbuf_cat+0x9c>)
 8009556:	4820      	ldr	r0, [pc, #128]	; (80095d8 <pbuf_cat+0xa0>)
 8009558:	f00a fb82 	bl	8013c60 <iprintf>
 800955c:	e034      	b.n	80095c8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	60fb      	str	r3, [r7, #12]
 8009562:	e00a      	b.n	800957a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	891a      	ldrh	r2, [r3, #8]
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	891b      	ldrh	r3, [r3, #8]
 800956c:	4413      	add	r3, r2
 800956e:	b29a      	uxth	r2, r3
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	60fb      	str	r3, [r7, #12]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1f0      	bne.n	8009564 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	891a      	ldrh	r2, [r3, #8]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	895b      	ldrh	r3, [r3, #10]
 800958a:	429a      	cmp	r2, r3
 800958c:	d006      	beq.n	800959c <pbuf_cat+0x64>
 800958e:	4b10      	ldr	r3, [pc, #64]	; (80095d0 <pbuf_cat+0x98>)
 8009590:	f240 3262 	movw	r2, #866	; 0x362
 8009594:	4911      	ldr	r1, [pc, #68]	; (80095dc <pbuf_cat+0xa4>)
 8009596:	4810      	ldr	r0, [pc, #64]	; (80095d8 <pbuf_cat+0xa0>)
 8009598:	f00a fb62 	bl	8013c60 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d006      	beq.n	80095b2 <pbuf_cat+0x7a>
 80095a4:	4b0a      	ldr	r3, [pc, #40]	; (80095d0 <pbuf_cat+0x98>)
 80095a6:	f240 3263 	movw	r2, #867	; 0x363
 80095aa:	490d      	ldr	r1, [pc, #52]	; (80095e0 <pbuf_cat+0xa8>)
 80095ac:	480a      	ldr	r0, [pc, #40]	; (80095d8 <pbuf_cat+0xa0>)
 80095ae:	f00a fb57 	bl	8013c60 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	891a      	ldrh	r2, [r3, #8]
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	891b      	ldrh	r3, [r3, #8]
 80095ba:	4413      	add	r3, r2
 80095bc:	b29a      	uxth	r2, r3
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	683a      	ldr	r2, [r7, #0]
 80095c6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	08015468 	.word	0x08015468
 80095d4:	0801565c 	.word	0x0801565c
 80095d8:	080154c8 	.word	0x080154c8
 80095dc:	08015694 	.word	0x08015694
 80095e0:	080156c4 	.word	0x080156c4

080095e4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80095ee:	6839      	ldr	r1, [r7, #0]
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f7ff ffa1 	bl	8009538 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80095f6:	6838      	ldr	r0, [r7, #0]
 80095f8:	f7ff ff7c 	bl	80094f4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80095fc:	bf00      	nop
 80095fe:	3708      	adds	r7, #8
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800960e:	2300      	movs	r3, #0
 8009610:	617b      	str	r3, [r7, #20]
 8009612:	2300      	movs	r3, #0
 8009614:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d008      	beq.n	800962e <pbuf_copy+0x2a>
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d005      	beq.n	800962e <pbuf_copy+0x2a>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	891a      	ldrh	r2, [r3, #8]
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	891b      	ldrh	r3, [r3, #8]
 800962a:	429a      	cmp	r2, r3
 800962c:	d209      	bcs.n	8009642 <pbuf_copy+0x3e>
 800962e:	4b57      	ldr	r3, [pc, #348]	; (800978c <pbuf_copy+0x188>)
 8009630:	f240 32c9 	movw	r2, #969	; 0x3c9
 8009634:	4956      	ldr	r1, [pc, #344]	; (8009790 <pbuf_copy+0x18c>)
 8009636:	4857      	ldr	r0, [pc, #348]	; (8009794 <pbuf_copy+0x190>)
 8009638:	f00a fb12 	bl	8013c60 <iprintf>
 800963c:	f06f 030f 	mvn.w	r3, #15
 8009640:	e09f      	b.n	8009782 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	895b      	ldrh	r3, [r3, #10]
 8009646:	461a      	mov	r2, r3
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	1ad2      	subs	r2, r2, r3
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	895b      	ldrh	r3, [r3, #10]
 8009650:	4619      	mov	r1, r3
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	1acb      	subs	r3, r1, r3
 8009656:	429a      	cmp	r2, r3
 8009658:	d306      	bcc.n	8009668 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	895b      	ldrh	r3, [r3, #10]
 800965e:	461a      	mov	r2, r3
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	1ad3      	subs	r3, r2, r3
 8009664:	60fb      	str	r3, [r7, #12]
 8009666:	e005      	b.n	8009674 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	895b      	ldrh	r3, [r3, #10]
 800966c:	461a      	mov	r2, r3
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	1ad3      	subs	r3, r2, r3
 8009672:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	685a      	ldr	r2, [r3, #4]
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	18d0      	adds	r0, r2, r3
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	685a      	ldr	r2, [r3, #4]
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	4413      	add	r3, r2
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	4619      	mov	r1, r3
 8009688:	f00a fad4 	bl	8013c34 <memcpy>
    offset_to += len;
 800968c:	697a      	ldr	r2, [r7, #20]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	4413      	add	r3, r2
 8009692:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	4413      	add	r3, r2
 800969a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	895b      	ldrh	r3, [r3, #10]
 80096a0:	461a      	mov	r2, r3
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d906      	bls.n	80096b6 <pbuf_copy+0xb2>
 80096a8:	4b38      	ldr	r3, [pc, #224]	; (800978c <pbuf_copy+0x188>)
 80096aa:	f240 32d9 	movw	r2, #985	; 0x3d9
 80096ae:	493a      	ldr	r1, [pc, #232]	; (8009798 <pbuf_copy+0x194>)
 80096b0:	4838      	ldr	r0, [pc, #224]	; (8009794 <pbuf_copy+0x190>)
 80096b2:	f00a fad5 	bl	8013c60 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	895b      	ldrh	r3, [r3, #10]
 80096ba:	461a      	mov	r2, r3
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	4293      	cmp	r3, r2
 80096c0:	d906      	bls.n	80096d0 <pbuf_copy+0xcc>
 80096c2:	4b32      	ldr	r3, [pc, #200]	; (800978c <pbuf_copy+0x188>)
 80096c4:	f240 32da 	movw	r2, #986	; 0x3da
 80096c8:	4934      	ldr	r1, [pc, #208]	; (800979c <pbuf_copy+0x198>)
 80096ca:	4832      	ldr	r0, [pc, #200]	; (8009794 <pbuf_copy+0x190>)
 80096cc:	f00a fac8 	bl	8013c60 <iprintf>
    if (offset_from >= p_from->len) {
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	895b      	ldrh	r3, [r3, #10]
 80096d4:	461a      	mov	r2, r3
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	4293      	cmp	r3, r2
 80096da:	d304      	bcc.n	80096e6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80096dc:	2300      	movs	r3, #0
 80096de:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	895b      	ldrh	r3, [r3, #10]
 80096ea:	461a      	mov	r2, r3
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d114      	bne.n	800971c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80096f2:	2300      	movs	r3, #0
 80096f4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d10c      	bne.n	800971c <pbuf_copy+0x118>
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d009      	beq.n	800971c <pbuf_copy+0x118>
 8009708:	4b20      	ldr	r3, [pc, #128]	; (800978c <pbuf_copy+0x188>)
 800970a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800970e:	4924      	ldr	r1, [pc, #144]	; (80097a0 <pbuf_copy+0x19c>)
 8009710:	4820      	ldr	r0, [pc, #128]	; (8009794 <pbuf_copy+0x190>)
 8009712:	f00a faa5 	bl	8013c60 <iprintf>
 8009716:	f06f 030f 	mvn.w	r3, #15
 800971a:	e032      	b.n	8009782 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d013      	beq.n	800974a <pbuf_copy+0x146>
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	895a      	ldrh	r2, [r3, #10]
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	891b      	ldrh	r3, [r3, #8]
 800972a:	429a      	cmp	r2, r3
 800972c:	d10d      	bne.n	800974a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d009      	beq.n	800974a <pbuf_copy+0x146>
 8009736:	4b15      	ldr	r3, [pc, #84]	; (800978c <pbuf_copy+0x188>)
 8009738:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800973c:	4919      	ldr	r1, [pc, #100]	; (80097a4 <pbuf_copy+0x1a0>)
 800973e:	4815      	ldr	r0, [pc, #84]	; (8009794 <pbuf_copy+0x190>)
 8009740:	f00a fa8e 	bl	8013c60 <iprintf>
 8009744:	f06f 0305 	mvn.w	r3, #5
 8009748:	e01b      	b.n	8009782 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d013      	beq.n	8009778 <pbuf_copy+0x174>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	895a      	ldrh	r2, [r3, #10]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	891b      	ldrh	r3, [r3, #8]
 8009758:	429a      	cmp	r2, r3
 800975a:	d10d      	bne.n	8009778 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d009      	beq.n	8009778 <pbuf_copy+0x174>
 8009764:	4b09      	ldr	r3, [pc, #36]	; (800978c <pbuf_copy+0x188>)
 8009766:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800976a:	490e      	ldr	r1, [pc, #56]	; (80097a4 <pbuf_copy+0x1a0>)
 800976c:	4809      	ldr	r0, [pc, #36]	; (8009794 <pbuf_copy+0x190>)
 800976e:	f00a fa77 	bl	8013c60 <iprintf>
 8009772:	f06f 0305 	mvn.w	r3, #5
 8009776:	e004      	b.n	8009782 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	f47f af61 	bne.w	8009642 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3718      	adds	r7, #24
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	08015468 	.word	0x08015468
 8009790:	08015710 	.word	0x08015710
 8009794:	080154c8 	.word	0x080154c8
 8009798:	08015740 	.word	0x08015740
 800979c:	08015758 	.word	0x08015758
 80097a0:	08015774 	.word	0x08015774
 80097a4:	08015784 	.word	0x08015784

080097a8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b088      	sub	sp, #32
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	4611      	mov	r1, r2
 80097b4:	461a      	mov	r2, r3
 80097b6:	460b      	mov	r3, r1
 80097b8:	80fb      	strh	r3, [r7, #6]
 80097ba:	4613      	mov	r3, r2
 80097bc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80097be:	2300      	movs	r3, #0
 80097c0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80097c2:	2300      	movs	r3, #0
 80097c4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d108      	bne.n	80097de <pbuf_copy_partial+0x36>
 80097cc:	4b2b      	ldr	r3, [pc, #172]	; (800987c <pbuf_copy_partial+0xd4>)
 80097ce:	f240 420a 	movw	r2, #1034	; 0x40a
 80097d2:	492b      	ldr	r1, [pc, #172]	; (8009880 <pbuf_copy_partial+0xd8>)
 80097d4:	482b      	ldr	r0, [pc, #172]	; (8009884 <pbuf_copy_partial+0xdc>)
 80097d6:	f00a fa43 	bl	8013c60 <iprintf>
 80097da:	2300      	movs	r3, #0
 80097dc:	e04a      	b.n	8009874 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d108      	bne.n	80097f6 <pbuf_copy_partial+0x4e>
 80097e4:	4b25      	ldr	r3, [pc, #148]	; (800987c <pbuf_copy_partial+0xd4>)
 80097e6:	f240 420b 	movw	r2, #1035	; 0x40b
 80097ea:	4927      	ldr	r1, [pc, #156]	; (8009888 <pbuf_copy_partial+0xe0>)
 80097ec:	4825      	ldr	r0, [pc, #148]	; (8009884 <pbuf_copy_partial+0xdc>)
 80097ee:	f00a fa37 	bl	8013c60 <iprintf>
 80097f2:	2300      	movs	r3, #0
 80097f4:	e03e      	b.n	8009874 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	61fb      	str	r3, [r7, #28]
 80097fa:	e034      	b.n	8009866 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80097fc:	88bb      	ldrh	r3, [r7, #4]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00a      	beq.n	8009818 <pbuf_copy_partial+0x70>
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	895b      	ldrh	r3, [r3, #10]
 8009806:	88ba      	ldrh	r2, [r7, #4]
 8009808:	429a      	cmp	r2, r3
 800980a:	d305      	bcc.n	8009818 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	895b      	ldrh	r3, [r3, #10]
 8009810:	88ba      	ldrh	r2, [r7, #4]
 8009812:	1ad3      	subs	r3, r2, r3
 8009814:	80bb      	strh	r3, [r7, #4]
 8009816:	e023      	b.n	8009860 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	895a      	ldrh	r2, [r3, #10]
 800981c:	88bb      	ldrh	r3, [r7, #4]
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8009822:	8b3a      	ldrh	r2, [r7, #24]
 8009824:	88fb      	ldrh	r3, [r7, #6]
 8009826:	429a      	cmp	r2, r3
 8009828:	d901      	bls.n	800982e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800982a:	88fb      	ldrh	r3, [r7, #6]
 800982c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800982e:	8b7b      	ldrh	r3, [r7, #26]
 8009830:	68ba      	ldr	r2, [r7, #8]
 8009832:	18d0      	adds	r0, r2, r3
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	685a      	ldr	r2, [r3, #4]
 8009838:	88bb      	ldrh	r3, [r7, #4]
 800983a:	4413      	add	r3, r2
 800983c:	8b3a      	ldrh	r2, [r7, #24]
 800983e:	4619      	mov	r1, r3
 8009840:	f00a f9f8 	bl	8013c34 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009844:	8afa      	ldrh	r2, [r7, #22]
 8009846:	8b3b      	ldrh	r3, [r7, #24]
 8009848:	4413      	add	r3, r2
 800984a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800984c:	8b7a      	ldrh	r2, [r7, #26]
 800984e:	8b3b      	ldrh	r3, [r7, #24]
 8009850:	4413      	add	r3, r2
 8009852:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8009854:	88fa      	ldrh	r2, [r7, #6]
 8009856:	8b3b      	ldrh	r3, [r7, #24]
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800985c:	2300      	movs	r3, #0
 800985e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	61fb      	str	r3, [r7, #28]
 8009866:	88fb      	ldrh	r3, [r7, #6]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d002      	beq.n	8009872 <pbuf_copy_partial+0xca>
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1c4      	bne.n	80097fc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8009872:	8afb      	ldrh	r3, [r7, #22]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3720      	adds	r7, #32
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}
 800987c:	08015468 	.word	0x08015468
 8009880:	080157b0 	.word	0x080157b0
 8009884:	080154c8 	.word	0x080154c8
 8009888:	080157d0 	.word	0x080157d0

0800988c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	4603      	mov	r3, r0
 8009894:	603a      	str	r2, [r7, #0]
 8009896:	71fb      	strb	r3, [r7, #7]
 8009898:	460b      	mov	r3, r1
 800989a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	8919      	ldrh	r1, [r3, #8]
 80098a0:	88ba      	ldrh	r2, [r7, #4]
 80098a2:	79fb      	ldrb	r3, [r7, #7]
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7ff faa1 	bl	8008dec <pbuf_alloc>
 80098aa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d101      	bne.n	80098b6 <pbuf_clone+0x2a>
    return NULL;
 80098b2:	2300      	movs	r3, #0
 80098b4:	e011      	b.n	80098da <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80098b6:	6839      	ldr	r1, [r7, #0]
 80098b8:	68f8      	ldr	r0, [r7, #12]
 80098ba:	f7ff fea3 	bl	8009604 <pbuf_copy>
 80098be:	4603      	mov	r3, r0
 80098c0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80098c2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d006      	beq.n	80098d8 <pbuf_clone+0x4c>
 80098ca:	4b06      	ldr	r3, [pc, #24]	; (80098e4 <pbuf_clone+0x58>)
 80098cc:	f240 5224 	movw	r2, #1316	; 0x524
 80098d0:	4905      	ldr	r1, [pc, #20]	; (80098e8 <pbuf_clone+0x5c>)
 80098d2:	4806      	ldr	r0, [pc, #24]	; (80098ec <pbuf_clone+0x60>)
 80098d4:	f00a f9c4 	bl	8013c60 <iprintf>
  return q;
 80098d8:	68fb      	ldr	r3, [r7, #12]
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	08015468 	.word	0x08015468
 80098e8:	080158dc 	.word	0x080158dc
 80098ec:	080154c8 	.word	0x080154c8

080098f0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80098f4:	f00a f9cc 	bl	8013c90 <rand>
 80098f8:	4603      	mov	r3, r0
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009900:	b29b      	uxth	r3, r3
 8009902:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8009906:	b29a      	uxth	r2, r3
 8009908:	4b01      	ldr	r3, [pc, #4]	; (8009910 <tcp_init+0x20>)
 800990a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800990c:	bf00      	nop
 800990e:	bd80      	pop	{r7, pc}
 8009910:	20000038 	.word	0x20000038

08009914 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	7d1b      	ldrb	r3, [r3, #20]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d105      	bne.n	8009930 <tcp_free+0x1c>
 8009924:	4b06      	ldr	r3, [pc, #24]	; (8009940 <tcp_free+0x2c>)
 8009926:	22d4      	movs	r2, #212	; 0xd4
 8009928:	4906      	ldr	r1, [pc, #24]	; (8009944 <tcp_free+0x30>)
 800992a:	4807      	ldr	r0, [pc, #28]	; (8009948 <tcp_free+0x34>)
 800992c:	f00a f998 	bl	8013c60 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8009930:	6879      	ldr	r1, [r7, #4]
 8009932:	2001      	movs	r0, #1
 8009934:	f7fe febc 	bl	80086b0 <memp_free>
}
 8009938:	bf00      	nop
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	08015968 	.word	0x08015968
 8009944:	08015998 	.word	0x08015998
 8009948:	080159ac 	.word	0x080159ac

0800994c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	7d1b      	ldrb	r3, [r3, #20]
 8009958:	2b01      	cmp	r3, #1
 800995a:	d105      	bne.n	8009968 <tcp_free_listen+0x1c>
 800995c:	4b06      	ldr	r3, [pc, #24]	; (8009978 <tcp_free_listen+0x2c>)
 800995e:	22df      	movs	r2, #223	; 0xdf
 8009960:	4906      	ldr	r1, [pc, #24]	; (800997c <tcp_free_listen+0x30>)
 8009962:	4807      	ldr	r0, [pc, #28]	; (8009980 <tcp_free_listen+0x34>)
 8009964:	f00a f97c 	bl	8013c60 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009968:	6879      	ldr	r1, [r7, #4]
 800996a:	2002      	movs	r0, #2
 800996c:	f7fe fea0 	bl	80086b0 <memp_free>
}
 8009970:	bf00      	nop
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}
 8009978:	08015968 	.word	0x08015968
 800997c:	080159d4 	.word	0x080159d4
 8009980:	080159ac 	.word	0x080159ac

08009984 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009988:	f000 fea2 	bl	800a6d0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800998c:	4b07      	ldr	r3, [pc, #28]	; (80099ac <tcp_tmr+0x28>)
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	3301      	adds	r3, #1
 8009992:	b2da      	uxtb	r2, r3
 8009994:	4b05      	ldr	r3, [pc, #20]	; (80099ac <tcp_tmr+0x28>)
 8009996:	701a      	strb	r2, [r3, #0]
 8009998:	4b04      	ldr	r3, [pc, #16]	; (80099ac <tcp_tmr+0x28>)
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	f003 0301 	and.w	r3, r3, #1
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d001      	beq.n	80099a8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80099a4:	f000 fb54 	bl	800a050 <tcp_slowtmr>
  }
}
 80099a8:	bf00      	nop
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	2000aed5 	.word	0x2000aed5

080099b0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d105      	bne.n	80099cc <tcp_remove_listener+0x1c>
 80099c0:	4b0d      	ldr	r3, [pc, #52]	; (80099f8 <tcp_remove_listener+0x48>)
 80099c2:	22ff      	movs	r2, #255	; 0xff
 80099c4:	490d      	ldr	r1, [pc, #52]	; (80099fc <tcp_remove_listener+0x4c>)
 80099c6:	480e      	ldr	r0, [pc, #56]	; (8009a00 <tcp_remove_listener+0x50>)
 80099c8:	f00a f94a 	bl	8013c60 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	60fb      	str	r3, [r7, #12]
 80099d0:	e00a      	b.n	80099e8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099d6:	683a      	ldr	r2, [r7, #0]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d102      	bne.n	80099e2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2200      	movs	r2, #0
 80099e0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	60fb      	str	r3, [r7, #12]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1f1      	bne.n	80099d2 <tcp_remove_listener+0x22>
    }
  }
}
 80099ee:	bf00      	nop
 80099f0:	bf00      	nop
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	08015968 	.word	0x08015968
 80099fc:	080159f0 	.word	0x080159f0
 8009a00:	080159ac 	.word	0x080159ac

08009a04 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d106      	bne.n	8009a20 <tcp_listen_closed+0x1c>
 8009a12:	4b14      	ldr	r3, [pc, #80]	; (8009a64 <tcp_listen_closed+0x60>)
 8009a14:	f240 1211 	movw	r2, #273	; 0x111
 8009a18:	4913      	ldr	r1, [pc, #76]	; (8009a68 <tcp_listen_closed+0x64>)
 8009a1a:	4814      	ldr	r0, [pc, #80]	; (8009a6c <tcp_listen_closed+0x68>)
 8009a1c:	f00a f920 	bl	8013c60 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	7d1b      	ldrb	r3, [r3, #20]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d006      	beq.n	8009a36 <tcp_listen_closed+0x32>
 8009a28:	4b0e      	ldr	r3, [pc, #56]	; (8009a64 <tcp_listen_closed+0x60>)
 8009a2a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009a2e:	4910      	ldr	r1, [pc, #64]	; (8009a70 <tcp_listen_closed+0x6c>)
 8009a30:	480e      	ldr	r0, [pc, #56]	; (8009a6c <tcp_listen_closed+0x68>)
 8009a32:	f00a f915 	bl	8013c60 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009a36:	2301      	movs	r3, #1
 8009a38:	60fb      	str	r3, [r7, #12]
 8009a3a:	e00b      	b.n	8009a54 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009a3c:	4a0d      	ldr	r2, [pc, #52]	; (8009a74 <tcp_listen_closed+0x70>)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	6879      	ldr	r1, [r7, #4]
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7ff ffb1 	bl	80099b0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	3301      	adds	r3, #1
 8009a52:	60fb      	str	r3, [r7, #12]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2b03      	cmp	r3, #3
 8009a58:	d9f0      	bls.n	8009a3c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8009a5a:	bf00      	nop
 8009a5c:	bf00      	nop
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	08015968 	.word	0x08015968
 8009a68:	08015a18 	.word	0x08015a18
 8009a6c:	080159ac 	.word	0x080159ac
 8009a70:	08015a24 	.word	0x08015a24
 8009a74:	0801a210 	.word	0x0801a210

08009a78 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009a78:	b5b0      	push	{r4, r5, r7, lr}
 8009a7a:	b088      	sub	sp, #32
 8009a7c:	af04      	add	r7, sp, #16
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	460b      	mov	r3, r1
 8009a82:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d106      	bne.n	8009a98 <tcp_close_shutdown+0x20>
 8009a8a:	4b63      	ldr	r3, [pc, #396]	; (8009c18 <tcp_close_shutdown+0x1a0>)
 8009a8c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009a90:	4962      	ldr	r1, [pc, #392]	; (8009c1c <tcp_close_shutdown+0x1a4>)
 8009a92:	4863      	ldr	r0, [pc, #396]	; (8009c20 <tcp_close_shutdown+0x1a8>)
 8009a94:	f00a f8e4 	bl	8013c60 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009a98:	78fb      	ldrb	r3, [r7, #3]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d066      	beq.n	8009b6c <tcp_close_shutdown+0xf4>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	7d1b      	ldrb	r3, [r3, #20]
 8009aa2:	2b04      	cmp	r3, #4
 8009aa4:	d003      	beq.n	8009aae <tcp_close_shutdown+0x36>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	7d1b      	ldrb	r3, [r3, #20]
 8009aaa:	2b07      	cmp	r3, #7
 8009aac:	d15e      	bne.n	8009b6c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d104      	bne.n	8009ac0 <tcp_close_shutdown+0x48>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aba:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009abe:	d055      	beq.n	8009b6c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	8b5b      	ldrh	r3, [r3, #26]
 8009ac4:	f003 0310 	and.w	r3, r3, #16
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d106      	bne.n	8009ada <tcp_close_shutdown+0x62>
 8009acc:	4b52      	ldr	r3, [pc, #328]	; (8009c18 <tcp_close_shutdown+0x1a0>)
 8009ace:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009ad2:	4954      	ldr	r1, [pc, #336]	; (8009c24 <tcp_close_shutdown+0x1ac>)
 8009ad4:	4852      	ldr	r0, [pc, #328]	; (8009c20 <tcp_close_shutdown+0x1a8>)
 8009ad6:	f00a f8c3 	bl	8013c60 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009ae2:	687d      	ldr	r5, [r7, #4]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	3304      	adds	r3, #4
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	8ad2      	ldrh	r2, [r2, #22]
 8009aec:	6879      	ldr	r1, [r7, #4]
 8009aee:	8b09      	ldrh	r1, [r1, #24]
 8009af0:	9102      	str	r1, [sp, #8]
 8009af2:	9201      	str	r2, [sp, #4]
 8009af4:	9300      	str	r3, [sp, #0]
 8009af6:	462b      	mov	r3, r5
 8009af8:	4622      	mov	r2, r4
 8009afa:	4601      	mov	r1, r0
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f004 fe91 	bl	800e824 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f001 f8c6 	bl	800ac94 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009b08:	4b47      	ldr	r3, [pc, #284]	; (8009c28 <tcp_close_shutdown+0x1b0>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d105      	bne.n	8009b1e <tcp_close_shutdown+0xa6>
 8009b12:	4b45      	ldr	r3, [pc, #276]	; (8009c28 <tcp_close_shutdown+0x1b0>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	4a43      	ldr	r2, [pc, #268]	; (8009c28 <tcp_close_shutdown+0x1b0>)
 8009b1a:	6013      	str	r3, [r2, #0]
 8009b1c:	e013      	b.n	8009b46 <tcp_close_shutdown+0xce>
 8009b1e:	4b42      	ldr	r3, [pc, #264]	; (8009c28 <tcp_close_shutdown+0x1b0>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	60fb      	str	r3, [r7, #12]
 8009b24:	e00c      	b.n	8009b40 <tcp_close_shutdown+0xc8>
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d104      	bne.n	8009b3a <tcp_close_shutdown+0xc2>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	68da      	ldr	r2, [r3, #12]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	60da      	str	r2, [r3, #12]
 8009b38:	e005      	b.n	8009b46 <tcp_close_shutdown+0xce>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	60fb      	str	r3, [r7, #12]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d1ef      	bne.n	8009b26 <tcp_close_shutdown+0xae>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	60da      	str	r2, [r3, #12]
 8009b4c:	4b37      	ldr	r3, [pc, #220]	; (8009c2c <tcp_close_shutdown+0x1b4>)
 8009b4e:	2201      	movs	r2, #1
 8009b50:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8009b52:	4b37      	ldr	r3, [pc, #220]	; (8009c30 <tcp_close_shutdown+0x1b8>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d102      	bne.n	8009b62 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009b5c:	f003 fd5e 	bl	800d61c <tcp_trigger_input_pcb_close>
 8009b60:	e002      	b.n	8009b68 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7ff fed6 	bl	8009914 <tcp_free>
      }
      return ERR_OK;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	e050      	b.n	8009c0e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	7d1b      	ldrb	r3, [r3, #20]
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d03b      	beq.n	8009bec <tcp_close_shutdown+0x174>
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	dc44      	bgt.n	8009c02 <tcp_close_shutdown+0x18a>
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d002      	beq.n	8009b82 <tcp_close_shutdown+0x10a>
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d02a      	beq.n	8009bd6 <tcp_close_shutdown+0x15e>
 8009b80:	e03f      	b.n	8009c02 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	8adb      	ldrh	r3, [r3, #22]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d021      	beq.n	8009bce <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009b8a:	4b2a      	ldr	r3, [pc, #168]	; (8009c34 <tcp_close_shutdown+0x1bc>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d105      	bne.n	8009ba0 <tcp_close_shutdown+0x128>
 8009b94:	4b27      	ldr	r3, [pc, #156]	; (8009c34 <tcp_close_shutdown+0x1bc>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	4a26      	ldr	r2, [pc, #152]	; (8009c34 <tcp_close_shutdown+0x1bc>)
 8009b9c:	6013      	str	r3, [r2, #0]
 8009b9e:	e013      	b.n	8009bc8 <tcp_close_shutdown+0x150>
 8009ba0:	4b24      	ldr	r3, [pc, #144]	; (8009c34 <tcp_close_shutdown+0x1bc>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	60bb      	str	r3, [r7, #8]
 8009ba6:	e00c      	b.n	8009bc2 <tcp_close_shutdown+0x14a>
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d104      	bne.n	8009bbc <tcp_close_shutdown+0x144>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	68da      	ldr	r2, [r3, #12]
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	60da      	str	r2, [r3, #12]
 8009bba:	e005      	b.n	8009bc8 <tcp_close_shutdown+0x150>
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	60bb      	str	r3, [r7, #8]
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d1ef      	bne.n	8009ba8 <tcp_close_shutdown+0x130>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f7ff fea0 	bl	8009914 <tcp_free>
      break;
 8009bd4:	e01a      	b.n	8009c0c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f7ff ff14 	bl	8009a04 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009bdc:	6879      	ldr	r1, [r7, #4]
 8009bde:	4816      	ldr	r0, [pc, #88]	; (8009c38 <tcp_close_shutdown+0x1c0>)
 8009be0:	f001 f8a8 	bl	800ad34 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f7ff feb1 	bl	800994c <tcp_free_listen>
      break;
 8009bea:	e00f      	b.n	8009c0c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009bec:	6879      	ldr	r1, [r7, #4]
 8009bee:	480e      	ldr	r0, [pc, #56]	; (8009c28 <tcp_close_shutdown+0x1b0>)
 8009bf0:	f001 f8a0 	bl	800ad34 <tcp_pcb_remove>
 8009bf4:	4b0d      	ldr	r3, [pc, #52]	; (8009c2c <tcp_close_shutdown+0x1b4>)
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f7ff fe8a 	bl	8009914 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009c00:	e004      	b.n	8009c0c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 f81a 	bl	8009c3c <tcp_close_shutdown_fin>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	e000      	b.n	8009c0e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bdb0      	pop	{r4, r5, r7, pc}
 8009c16:	bf00      	nop
 8009c18:	08015968 	.word	0x08015968
 8009c1c:	08015a3c 	.word	0x08015a3c
 8009c20:	080159ac 	.word	0x080159ac
 8009c24:	08015a5c 	.word	0x08015a5c
 8009c28:	2000aecc 	.word	0x2000aecc
 8009c2c:	2000aed4 	.word	0x2000aed4
 8009c30:	2000af0c 	.word	0x2000af0c
 8009c34:	2000aec4 	.word	0x2000aec4
 8009c38:	2000aec8 	.word	0x2000aec8

08009c3c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d106      	bne.n	8009c58 <tcp_close_shutdown_fin+0x1c>
 8009c4a:	4b2e      	ldr	r3, [pc, #184]	; (8009d04 <tcp_close_shutdown_fin+0xc8>)
 8009c4c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009c50:	492d      	ldr	r1, [pc, #180]	; (8009d08 <tcp_close_shutdown_fin+0xcc>)
 8009c52:	482e      	ldr	r0, [pc, #184]	; (8009d0c <tcp_close_shutdown_fin+0xd0>)
 8009c54:	f00a f804 	bl	8013c60 <iprintf>

  switch (pcb->state) {
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	7d1b      	ldrb	r3, [r3, #20]
 8009c5c:	2b07      	cmp	r3, #7
 8009c5e:	d020      	beq.n	8009ca2 <tcp_close_shutdown_fin+0x66>
 8009c60:	2b07      	cmp	r3, #7
 8009c62:	dc2b      	bgt.n	8009cbc <tcp_close_shutdown_fin+0x80>
 8009c64:	2b03      	cmp	r3, #3
 8009c66:	d002      	beq.n	8009c6e <tcp_close_shutdown_fin+0x32>
 8009c68:	2b04      	cmp	r3, #4
 8009c6a:	d00d      	beq.n	8009c88 <tcp_close_shutdown_fin+0x4c>
 8009c6c:	e026      	b.n	8009cbc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f003 fee6 	bl	800da40 <tcp_send_fin>
 8009c74:	4603      	mov	r3, r0
 8009c76:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d11f      	bne.n	8009cc0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2205      	movs	r2, #5
 8009c84:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009c86:	e01b      	b.n	8009cc0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f003 fed9 	bl	800da40 <tcp_send_fin>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d114      	bne.n	8009cc4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2205      	movs	r2, #5
 8009c9e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009ca0:	e010      	b.n	8009cc4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f003 fecc 	bl	800da40 <tcp_send_fin>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d109      	bne.n	8009cc8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2209      	movs	r2, #9
 8009cb8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009cba:	e005      	b.n	8009cc8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	e01c      	b.n	8009cfa <tcp_close_shutdown_fin+0xbe>
      break;
 8009cc0:	bf00      	nop
 8009cc2:	e002      	b.n	8009cca <tcp_close_shutdown_fin+0x8e>
      break;
 8009cc4:	bf00      	nop
 8009cc6:	e000      	b.n	8009cca <tcp_close_shutdown_fin+0x8e>
      break;
 8009cc8:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d103      	bne.n	8009cda <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f003 fff2 	bl	800dcbc <tcp_output>
 8009cd8:	e00d      	b.n	8009cf6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8009cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce2:	d108      	bne.n	8009cf6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	8b5b      	ldrh	r3, [r3, #26]
 8009ce8:	f043 0308 	orr.w	r3, r3, #8
 8009cec:	b29a      	uxth	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	e001      	b.n	8009cfa <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8009cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	08015968 	.word	0x08015968
 8009d08:	08015a18 	.word	0x08015a18
 8009d0c:	080159ac 	.word	0x080159ac

08009d10 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d109      	bne.n	8009d32 <tcp_close+0x22>
 8009d1e:	4b0f      	ldr	r3, [pc, #60]	; (8009d5c <tcp_close+0x4c>)
 8009d20:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009d24:	490e      	ldr	r1, [pc, #56]	; (8009d60 <tcp_close+0x50>)
 8009d26:	480f      	ldr	r0, [pc, #60]	; (8009d64 <tcp_close+0x54>)
 8009d28:	f009 ff9a 	bl	8013c60 <iprintf>
 8009d2c:	f06f 030f 	mvn.w	r3, #15
 8009d30:	e00f      	b.n	8009d52 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	7d1b      	ldrb	r3, [r3, #20]
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d006      	beq.n	8009d48 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	8b5b      	ldrh	r3, [r3, #26]
 8009d3e:	f043 0310 	orr.w	r3, r3, #16
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009d48:	2101      	movs	r1, #1
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f7ff fe94 	bl	8009a78 <tcp_close_shutdown>
 8009d50:	4603      	mov	r3, r0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	08015968 	.word	0x08015968
 8009d60:	08015a78 	.word	0x08015a78
 8009d64:	080159ac 	.word	0x080159ac

08009d68 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b08e      	sub	sp, #56	; 0x38
 8009d6c:	af04      	add	r7, sp, #16
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d107      	bne.n	8009d88 <tcp_abandon+0x20>
 8009d78:	4b52      	ldr	r3, [pc, #328]	; (8009ec4 <tcp_abandon+0x15c>)
 8009d7a:	f240 223d 	movw	r2, #573	; 0x23d
 8009d7e:	4952      	ldr	r1, [pc, #328]	; (8009ec8 <tcp_abandon+0x160>)
 8009d80:	4852      	ldr	r0, [pc, #328]	; (8009ecc <tcp_abandon+0x164>)
 8009d82:	f009 ff6d 	bl	8013c60 <iprintf>
 8009d86:	e099      	b.n	8009ebc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	7d1b      	ldrb	r3, [r3, #20]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d106      	bne.n	8009d9e <tcp_abandon+0x36>
 8009d90:	4b4c      	ldr	r3, [pc, #304]	; (8009ec4 <tcp_abandon+0x15c>)
 8009d92:	f44f 7210 	mov.w	r2, #576	; 0x240
 8009d96:	494e      	ldr	r1, [pc, #312]	; (8009ed0 <tcp_abandon+0x168>)
 8009d98:	484c      	ldr	r0, [pc, #304]	; (8009ecc <tcp_abandon+0x164>)
 8009d9a:	f009 ff61 	bl	8013c60 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	7d1b      	ldrb	r3, [r3, #20]
 8009da2:	2b0a      	cmp	r3, #10
 8009da4:	d107      	bne.n	8009db6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009da6:	6879      	ldr	r1, [r7, #4]
 8009da8:	484a      	ldr	r0, [pc, #296]	; (8009ed4 <tcp_abandon+0x16c>)
 8009daa:	f000 ffc3 	bl	800ad34 <tcp_pcb_remove>
    tcp_free(pcb);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7ff fdb0 	bl	8009914 <tcp_free>
 8009db4:	e082      	b.n	8009ebc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8009db6:	2300      	movs	r3, #0
 8009db8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dc2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dd0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	7d1b      	ldrb	r3, [r3, #20]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d126      	bne.n	8009e2e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	8adb      	ldrh	r3, [r3, #22]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d02e      	beq.n	8009e46 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009de8:	4b3b      	ldr	r3, [pc, #236]	; (8009ed8 <tcp_abandon+0x170>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d105      	bne.n	8009dfe <tcp_abandon+0x96>
 8009df2:	4b39      	ldr	r3, [pc, #228]	; (8009ed8 <tcp_abandon+0x170>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	4a37      	ldr	r2, [pc, #220]	; (8009ed8 <tcp_abandon+0x170>)
 8009dfa:	6013      	str	r3, [r2, #0]
 8009dfc:	e013      	b.n	8009e26 <tcp_abandon+0xbe>
 8009dfe:	4b36      	ldr	r3, [pc, #216]	; (8009ed8 <tcp_abandon+0x170>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	61fb      	str	r3, [r7, #28]
 8009e04:	e00c      	b.n	8009e20 <tcp_abandon+0xb8>
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d104      	bne.n	8009e1a <tcp_abandon+0xb2>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	68da      	ldr	r2, [r3, #12]
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	60da      	str	r2, [r3, #12]
 8009e18:	e005      	b.n	8009e26 <tcp_abandon+0xbe>
 8009e1a:	69fb      	ldr	r3, [r7, #28]
 8009e1c:	68db      	ldr	r3, [r3, #12]
 8009e1e:	61fb      	str	r3, [r7, #28]
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d1ef      	bne.n	8009e06 <tcp_abandon+0x9e>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	60da      	str	r2, [r3, #12]
 8009e2c:	e00b      	b.n	8009e46 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	8adb      	ldrh	r3, [r3, #22]
 8009e36:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009e38:	6879      	ldr	r1, [r7, #4]
 8009e3a:	4828      	ldr	r0, [pc, #160]	; (8009edc <tcp_abandon+0x174>)
 8009e3c:	f000 ff7a 	bl	800ad34 <tcp_pcb_remove>
 8009e40:	4b27      	ldr	r3, [pc, #156]	; (8009ee0 <tcp_abandon+0x178>)
 8009e42:	2201      	movs	r2, #1
 8009e44:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d004      	beq.n	8009e58 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e52:	4618      	mov	r0, r3
 8009e54:	f000 fd1c 	bl	800a890 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d004      	beq.n	8009e6a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e64:	4618      	mov	r0, r3
 8009e66:	f000 fd13 	bl	800a890 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d004      	beq.n	8009e7c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e76:	4618      	mov	r0, r3
 8009e78:	f000 fd0a 	bl	800a890 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d00e      	beq.n	8009ea0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009e82:	6879      	ldr	r1, [r7, #4]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	3304      	adds	r3, #4
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	8b12      	ldrh	r2, [r2, #24]
 8009e8c:	9202      	str	r2, [sp, #8]
 8009e8e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009e90:	9201      	str	r2, [sp, #4]
 8009e92:	9300      	str	r3, [sp, #0]
 8009e94:	460b      	mov	r3, r1
 8009e96:	697a      	ldr	r2, [r7, #20]
 8009e98:	69b9      	ldr	r1, [r7, #24]
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f004 fcc2 	bl	800e824 <tcp_rst>
    }
    last_state = pcb->state;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	7d1b      	ldrb	r3, [r3, #20]
 8009ea4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7ff fd34 	bl	8009914 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d004      	beq.n	8009ebc <tcp_abandon+0x154>
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	f06f 010c 	mvn.w	r1, #12
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	4798      	blx	r3
  }
}
 8009ebc:	3728      	adds	r7, #40	; 0x28
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	08015968 	.word	0x08015968
 8009ec8:	08015aac 	.word	0x08015aac
 8009ecc:	080159ac 	.word	0x080159ac
 8009ed0:	08015ac8 	.word	0x08015ac8
 8009ed4:	2000aed0 	.word	0x2000aed0
 8009ed8:	2000aec4 	.word	0x2000aec4
 8009edc:	2000aecc 	.word	0x2000aecc
 8009ee0:	2000aed4 	.word	0x2000aed4

08009ee4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009eec:	2101      	movs	r1, #1
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f7ff ff3a 	bl	8009d68 <tcp_abandon>
}
 8009ef4:	bf00      	nop
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d106      	bne.n	8009f18 <tcp_update_rcv_ann_wnd+0x1c>
 8009f0a:	4b25      	ldr	r3, [pc, #148]	; (8009fa0 <tcp_update_rcv_ann_wnd+0xa4>)
 8009f0c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009f10:	4924      	ldr	r1, [pc, #144]	; (8009fa4 <tcp_update_rcv_ann_wnd+0xa8>)
 8009f12:	4825      	ldr	r0, [pc, #148]	; (8009fa8 <tcp_update_rcv_ann_wnd+0xac>)
 8009f14:	f009 fea4 	bl	8013c60 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009f20:	4413      	add	r3, r2
 8009f22:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009f2c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009f30:	bf28      	it	cs
 8009f32:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8009f36:	b292      	uxth	r2, r2
 8009f38:	4413      	add	r3, r2
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	1ad3      	subs	r3, r2, r3
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	db08      	blt.n	8009f54 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4e:	68fa      	ldr	r2, [r7, #12]
 8009f50:	1ad3      	subs	r3, r2, r3
 8009f52:	e020      	b.n	8009f96 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5c:	1ad3      	subs	r3, r2, r3
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	dd03      	ble.n	8009f6a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f68:	e014      	b.n	8009f94 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f7c:	d306      	bcc.n	8009f8c <tcp_update_rcv_ann_wnd+0x90>
 8009f7e:	4b08      	ldr	r3, [pc, #32]	; (8009fa0 <tcp_update_rcv_ann_wnd+0xa4>)
 8009f80:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009f84:	4909      	ldr	r1, [pc, #36]	; (8009fac <tcp_update_rcv_ann_wnd+0xb0>)
 8009f86:	4808      	ldr	r0, [pc, #32]	; (8009fa8 <tcp_update_rcv_ann_wnd+0xac>)
 8009f88:	f009 fe6a 	bl	8013c60 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	b29a      	uxth	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009f94:	2300      	movs	r3, #0
  }
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3710      	adds	r7, #16
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	08015968 	.word	0x08015968
 8009fa4:	08015bc4 	.word	0x08015bc4
 8009fa8:	080159ac 	.word	0x080159ac
 8009fac:	08015be8 	.word	0x08015be8

08009fb0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	460b      	mov	r3, r1
 8009fba:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d107      	bne.n	8009fd2 <tcp_recved+0x22>
 8009fc2:	4b1f      	ldr	r3, [pc, #124]	; (800a040 <tcp_recved+0x90>)
 8009fc4:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009fc8:	491e      	ldr	r1, [pc, #120]	; (800a044 <tcp_recved+0x94>)
 8009fca:	481f      	ldr	r0, [pc, #124]	; (800a048 <tcp_recved+0x98>)
 8009fcc:	f009 fe48 	bl	8013c60 <iprintf>
 8009fd0:	e032      	b.n	800a038 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	7d1b      	ldrb	r3, [r3, #20]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d106      	bne.n	8009fe8 <tcp_recved+0x38>
 8009fda:	4b19      	ldr	r3, [pc, #100]	; (800a040 <tcp_recved+0x90>)
 8009fdc:	f240 32d2 	movw	r2, #978	; 0x3d2
 8009fe0:	491a      	ldr	r1, [pc, #104]	; (800a04c <tcp_recved+0x9c>)
 8009fe2:	4819      	ldr	r0, [pc, #100]	; (800a048 <tcp_recved+0x98>)
 8009fe4:	f009 fe3c 	bl	8013c60 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009fec:	887b      	ldrh	r3, [r7, #2]
 8009fee:	4413      	add	r3, r2
 8009ff0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009ff2:	89fb      	ldrh	r3, [r7, #14]
 8009ff4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009ff8:	d804      	bhi.n	800a004 <tcp_recved+0x54>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ffe:	89fa      	ldrh	r2, [r7, #14]
 800a000:	429a      	cmp	r2, r3
 800a002:	d204      	bcs.n	800a00e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a00a:	851a      	strh	r2, [r3, #40]	; 0x28
 800a00c:	e002      	b.n	800a014 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	89fa      	ldrh	r2, [r7, #14]
 800a012:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f7ff ff71 	bl	8009efc <tcp_update_rcv_ann_wnd>
 800a01a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a022:	d309      	bcc.n	800a038 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	8b5b      	ldrh	r3, [r3, #26]
 800a028:	f043 0302 	orr.w	r3, r3, #2
 800a02c:	b29a      	uxth	r2, r3
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f003 fe42 	bl	800dcbc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	08015968 	.word	0x08015968
 800a044:	08015c04 	.word	0x08015c04
 800a048:	080159ac 	.word	0x080159ac
 800a04c:	08015c1c 	.word	0x08015c1c

0800a050 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a050:	b5b0      	push	{r4, r5, r7, lr}
 800a052:	b090      	sub	sp, #64	; 0x40
 800a054:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a056:	2300      	movs	r3, #0
 800a058:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800a05c:	4b94      	ldr	r3, [pc, #592]	; (800a2b0 <tcp_slowtmr+0x260>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	3301      	adds	r3, #1
 800a062:	4a93      	ldr	r2, [pc, #588]	; (800a2b0 <tcp_slowtmr+0x260>)
 800a064:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a066:	4b93      	ldr	r3, [pc, #588]	; (800a2b4 <tcp_slowtmr+0x264>)
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	3301      	adds	r3, #1
 800a06c:	b2da      	uxtb	r2, r3
 800a06e:	4b91      	ldr	r3, [pc, #580]	; (800a2b4 <tcp_slowtmr+0x264>)
 800a070:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a072:	2300      	movs	r3, #0
 800a074:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800a076:	4b90      	ldr	r3, [pc, #576]	; (800a2b8 <tcp_slowtmr+0x268>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a07c:	e29d      	b.n	800a5ba <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a080:	7d1b      	ldrb	r3, [r3, #20]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d106      	bne.n	800a094 <tcp_slowtmr+0x44>
 800a086:	4b8d      	ldr	r3, [pc, #564]	; (800a2bc <tcp_slowtmr+0x26c>)
 800a088:	f240 42be 	movw	r2, #1214	; 0x4be
 800a08c:	498c      	ldr	r1, [pc, #560]	; (800a2c0 <tcp_slowtmr+0x270>)
 800a08e:	488d      	ldr	r0, [pc, #564]	; (800a2c4 <tcp_slowtmr+0x274>)
 800a090:	f009 fde6 	bl	8013c60 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a096:	7d1b      	ldrb	r3, [r3, #20]
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d106      	bne.n	800a0aa <tcp_slowtmr+0x5a>
 800a09c:	4b87      	ldr	r3, [pc, #540]	; (800a2bc <tcp_slowtmr+0x26c>)
 800a09e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a0a2:	4989      	ldr	r1, [pc, #548]	; (800a2c8 <tcp_slowtmr+0x278>)
 800a0a4:	4887      	ldr	r0, [pc, #540]	; (800a2c4 <tcp_slowtmr+0x274>)
 800a0a6:	f009 fddb 	bl	8013c60 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ac:	7d1b      	ldrb	r3, [r3, #20]
 800a0ae:	2b0a      	cmp	r3, #10
 800a0b0:	d106      	bne.n	800a0c0 <tcp_slowtmr+0x70>
 800a0b2:	4b82      	ldr	r3, [pc, #520]	; (800a2bc <tcp_slowtmr+0x26c>)
 800a0b4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a0b8:	4984      	ldr	r1, [pc, #528]	; (800a2cc <tcp_slowtmr+0x27c>)
 800a0ba:	4882      	ldr	r0, [pc, #520]	; (800a2c4 <tcp_slowtmr+0x274>)
 800a0bc:	f009 fdd0 	bl	8013c60 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c2:	7f9a      	ldrb	r2, [r3, #30]
 800a0c4:	4b7b      	ldr	r3, [pc, #492]	; (800a2b4 <tcp_slowtmr+0x264>)
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d105      	bne.n	800a0d8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800a0d6:	e270      	b.n	800a5ba <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a0d8:	4b76      	ldr	r3, [pc, #472]	; (800a2b4 <tcp_slowtmr+0x264>)
 800a0da:	781a      	ldrb	r2, [r3, #0]
 800a0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0de:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ee:	7d1b      	ldrb	r3, [r3, #20]
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d10a      	bne.n	800a10a <tcp_slowtmr+0xba>
 800a0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a0fa:	2b05      	cmp	r3, #5
 800a0fc:	d905      	bls.n	800a10a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800a0fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a102:	3301      	adds	r3, #1
 800a104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a108:	e11e      	b.n	800a348 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a110:	2b0b      	cmp	r3, #11
 800a112:	d905      	bls.n	800a120 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800a114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a118:	3301      	adds	r3, #1
 800a11a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a11e:	e113      	b.n	800a348 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a122:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a126:	2b00      	cmp	r3, #0
 800a128:	d075      	beq.n	800a216 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a12c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d006      	beq.n	800a140 <tcp_slowtmr+0xf0>
 800a132:	4b62      	ldr	r3, [pc, #392]	; (800a2bc <tcp_slowtmr+0x26c>)
 800a134:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a138:	4965      	ldr	r1, [pc, #404]	; (800a2d0 <tcp_slowtmr+0x280>)
 800a13a:	4862      	ldr	r0, [pc, #392]	; (800a2c4 <tcp_slowtmr+0x274>)
 800a13c:	f009 fd90 	bl	8013c60 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a144:	2b00      	cmp	r3, #0
 800a146:	d106      	bne.n	800a156 <tcp_slowtmr+0x106>
 800a148:	4b5c      	ldr	r3, [pc, #368]	; (800a2bc <tcp_slowtmr+0x26c>)
 800a14a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a14e:	4961      	ldr	r1, [pc, #388]	; (800a2d4 <tcp_slowtmr+0x284>)
 800a150:	485c      	ldr	r0, [pc, #368]	; (800a2c4 <tcp_slowtmr+0x274>)
 800a152:	f009 fd85 	bl	8013c60 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a158:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a15c:	2b0b      	cmp	r3, #11
 800a15e:	d905      	bls.n	800a16c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800a160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a164:	3301      	adds	r3, #1
 800a166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a16a:	e0ed      	b.n	800a348 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a172:	3b01      	subs	r3, #1
 800a174:	4a58      	ldr	r2, [pc, #352]	; (800a2d8 <tcp_slowtmr+0x288>)
 800a176:	5cd3      	ldrb	r3, [r2, r3]
 800a178:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800a17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a180:	7c7a      	ldrb	r2, [r7, #17]
 800a182:	429a      	cmp	r2, r3
 800a184:	d907      	bls.n	800a196 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800a186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a188:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a18c:	3301      	adds	r3, #1
 800a18e:	b2da      	uxtb	r2, r3
 800a190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a192:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800a196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a198:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a19c:	7c7a      	ldrb	r2, [r7, #17]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	f200 80d2 	bhi.w	800a348 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800a1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d108      	bne.n	800a1c4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a1b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1b4:	f004 fc2a 	bl	800ea0c <tcp_zero_window_probe>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d014      	beq.n	800a1e8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800a1be:	2300      	movs	r3, #0
 800a1c0:	623b      	str	r3, [r7, #32]
 800a1c2:	e011      	b.n	800a1e8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1ce:	f003 faef 	bl	800d7b0 <tcp_split_unsent_seg>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d107      	bne.n	800a1e8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800a1d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1da:	f003 fd6f 	bl	800dcbc <tcp_output>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d101      	bne.n	800a1e8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800a1e8:	6a3b      	ldr	r3, [r7, #32]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f000 80ac 	beq.w	800a348 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800a1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a1fe:	2b06      	cmp	r3, #6
 800a200:	f200 80a2 	bhi.w	800a348 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800a204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a206:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a20a:	3301      	adds	r3, #1
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a210:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800a214:	e098      	b.n	800a348 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a218:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	db0f      	blt.n	800a240 <tcp_slowtmr+0x1f0>
 800a220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a222:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a226:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d008      	beq.n	800a240 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800a22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a230:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a234:	b29b      	uxth	r3, r3
 800a236:	3301      	adds	r3, #1
 800a238:	b29b      	uxth	r3, r3
 800a23a:	b21a      	sxth	r2, r3
 800a23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800a240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a242:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a248:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a24c:	429a      	cmp	r2, r3
 800a24e:	db7b      	blt.n	800a348 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a250:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a252:	f004 f825 	bl	800e2a0 <tcp_rexmit_rto_prepare>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d007      	beq.n	800a26c <tcp_slowtmr+0x21c>
 800a25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a25e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a260:	2b00      	cmp	r3, #0
 800a262:	d171      	bne.n	800a348 <tcp_slowtmr+0x2f8>
 800a264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d06d      	beq.n	800a348 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800a26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26e:	7d1b      	ldrb	r3, [r3, #20]
 800a270:	2b02      	cmp	r3, #2
 800a272:	d03a      	beq.n	800a2ea <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a276:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a27a:	2b0c      	cmp	r3, #12
 800a27c:	bf28      	it	cs
 800a27e:	230c      	movcs	r3, #12
 800a280:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a284:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a288:	10db      	asrs	r3, r3, #3
 800a28a:	b21b      	sxth	r3, r3
 800a28c:	461a      	mov	r2, r3
 800a28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a290:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a294:	4413      	add	r3, r2
 800a296:	7efa      	ldrb	r2, [r7, #27]
 800a298:	4910      	ldr	r1, [pc, #64]	; (800a2dc <tcp_slowtmr+0x28c>)
 800a29a:	5c8a      	ldrb	r2, [r1, r2]
 800a29c:	4093      	lsls	r3, r2
 800a29e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	dc1a      	bgt.n	800a2e0 <tcp_slowtmr+0x290>
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	b21a      	sxth	r2, r3
 800a2ae:	e019      	b.n	800a2e4 <tcp_slowtmr+0x294>
 800a2b0:	2000aec0 	.word	0x2000aec0
 800a2b4:	2000aed6 	.word	0x2000aed6
 800a2b8:	2000aecc 	.word	0x2000aecc
 800a2bc:	08015968 	.word	0x08015968
 800a2c0:	08015cac 	.word	0x08015cac
 800a2c4:	080159ac 	.word	0x080159ac
 800a2c8:	08015cd8 	.word	0x08015cd8
 800a2cc:	08015d04 	.word	0x08015d04
 800a2d0:	08015d34 	.word	0x08015d34
 800a2d4:	08015d68 	.word	0x08015d68
 800a2d8:	0801a208 	.word	0x0801a208
 800a2dc:	0801a1f8 	.word	0x0801a1f8
 800a2e0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800a2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	bf28      	it	cs
 800a300:	4613      	movcs	r3, r2
 800a302:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800a304:	8a7b      	ldrh	r3, [r7, #18]
 800a306:	085b      	lsrs	r3, r3, #1
 800a308:	b29a      	uxth	r2, r3
 800a30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a312:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a318:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a31a:	005b      	lsls	r3, r3, #1
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	429a      	cmp	r2, r3
 800a320:	d206      	bcs.n	800a330 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a324:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a326:	005b      	lsls	r3, r3, #1
 800a328:	b29a      	uxth	r2, r3
 800a32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a32c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800a330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a332:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a336:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800a33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33c:	2200      	movs	r2, #0
 800a33e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800a342:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a344:	f004 f81c 	bl	800e380 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34a:	7d1b      	ldrb	r3, [r3, #20]
 800a34c:	2b06      	cmp	r3, #6
 800a34e:	d111      	bne.n	800a374 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a352:	8b5b      	ldrh	r3, [r3, #26]
 800a354:	f003 0310 	and.w	r3, r3, #16
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d00b      	beq.n	800a374 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a35c:	4b9c      	ldr	r3, [pc, #624]	; (800a5d0 <tcp_slowtmr+0x580>)
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a362:	6a1b      	ldr	r3, [r3, #32]
 800a364:	1ad3      	subs	r3, r2, r3
 800a366:	2b28      	cmp	r3, #40	; 0x28
 800a368:	d904      	bls.n	800a374 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800a36a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a36e:	3301      	adds	r3, #1
 800a370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a376:	7a5b      	ldrb	r3, [r3, #9]
 800a378:	f003 0308 	and.w	r3, r3, #8
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d04a      	beq.n	800a416 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800a380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a382:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a384:	2b04      	cmp	r3, #4
 800a386:	d003      	beq.n	800a390 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800a388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800a38c:	2b07      	cmp	r3, #7
 800a38e:	d142      	bne.n	800a416 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a390:	4b8f      	ldr	r3, [pc, #572]	; (800a5d0 <tcp_slowtmr+0x580>)
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a396:	6a1b      	ldr	r3, [r3, #32]
 800a398:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a3a0:	4b8c      	ldr	r3, [pc, #560]	; (800a5d4 <tcp_slowtmr+0x584>)
 800a3a2:	440b      	add	r3, r1
 800a3a4:	498c      	ldr	r1, [pc, #560]	; (800a5d8 <tcp_slowtmr+0x588>)
 800a3a6:	fba1 1303 	umull	r1, r3, r1, r3
 800a3aa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d90a      	bls.n	800a3c6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a3b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800a3ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a3be:	3301      	adds	r3, #1
 800a3c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a3c4:	e027      	b.n	800a416 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a3c6:	4b82      	ldr	r3, [pc, #520]	; (800a5d0 <tcp_slowtmr+0x580>)
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3cc:	6a1b      	ldr	r3, [r3, #32]
 800a3ce:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a3dc:	4618      	mov	r0, r3
 800a3de:	4b7f      	ldr	r3, [pc, #508]	; (800a5dc <tcp_slowtmr+0x58c>)
 800a3e0:	fb00 f303 	mul.w	r3, r0, r3
 800a3e4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800a3e6:	497c      	ldr	r1, [pc, #496]	; (800a5d8 <tcp_slowtmr+0x588>)
 800a3e8:	fba1 1303 	umull	r1, r3, r1, r3
 800a3ec:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d911      	bls.n	800a416 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800a3f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3f4:	f004 faca 	bl	800e98c <tcp_keepalive>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800a3fe:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a402:	2b00      	cmp	r3, #0
 800a404:	d107      	bne.n	800a416 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800a406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a408:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a40c:	3301      	adds	r3, #1
 800a40e:	b2da      	uxtb	r2, r3
 800a410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a412:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d011      	beq.n	800a442 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a41e:	4b6c      	ldr	r3, [pc, #432]	; (800a5d0 <tcp_slowtmr+0x580>)
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a424:	6a1b      	ldr	r3, [r3, #32]
 800a426:	1ad2      	subs	r2, r2, r3
 800a428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a42e:	4619      	mov	r1, r3
 800a430:	460b      	mov	r3, r1
 800a432:	005b      	lsls	r3, r3, #1
 800a434:	440b      	add	r3, r1
 800a436:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a438:	429a      	cmp	r2, r3
 800a43a:	d302      	bcc.n	800a442 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800a43c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a43e:	f000 fddd 	bl	800affc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a444:	7d1b      	ldrb	r3, [r3, #20]
 800a446:	2b03      	cmp	r3, #3
 800a448:	d10b      	bne.n	800a462 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a44a:	4b61      	ldr	r3, [pc, #388]	; (800a5d0 <tcp_slowtmr+0x580>)
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a450:	6a1b      	ldr	r3, [r3, #32]
 800a452:	1ad3      	subs	r3, r2, r3
 800a454:	2b28      	cmp	r3, #40	; 0x28
 800a456:	d904      	bls.n	800a462 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a45c:	3301      	adds	r3, #1
 800a45e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a464:	7d1b      	ldrb	r3, [r3, #20]
 800a466:	2b09      	cmp	r3, #9
 800a468:	d10b      	bne.n	800a482 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a46a:	4b59      	ldr	r3, [pc, #356]	; (800a5d0 <tcp_slowtmr+0x580>)
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a470:	6a1b      	ldr	r3, [r3, #32]
 800a472:	1ad3      	subs	r3, r2, r3
 800a474:	2bf0      	cmp	r3, #240	; 0xf0
 800a476:	d904      	bls.n	800a482 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800a478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a47c:	3301      	adds	r3, #1
 800a47e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a486:	2b00      	cmp	r3, #0
 800a488:	d060      	beq.n	800a54c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a490:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a492:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a494:	f000 fbfe 	bl	800ac94 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d010      	beq.n	800a4c0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a49e:	4b50      	ldr	r3, [pc, #320]	; (800a5e0 <tcp_slowtmr+0x590>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d106      	bne.n	800a4b6 <tcp_slowtmr+0x466>
 800a4a8:	4b4e      	ldr	r3, [pc, #312]	; (800a5e4 <tcp_slowtmr+0x594>)
 800a4aa:	f240 526d 	movw	r2, #1389	; 0x56d
 800a4ae:	494e      	ldr	r1, [pc, #312]	; (800a5e8 <tcp_slowtmr+0x598>)
 800a4b0:	484e      	ldr	r0, [pc, #312]	; (800a5ec <tcp_slowtmr+0x59c>)
 800a4b2:	f009 fbd5 	bl	8013c60 <iprintf>
        prev->next = pcb->next;
 800a4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b8:	68da      	ldr	r2, [r3, #12]
 800a4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4bc:	60da      	str	r2, [r3, #12]
 800a4be:	e00f      	b.n	800a4e0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a4c0:	4b47      	ldr	r3, [pc, #284]	; (800a5e0 <tcp_slowtmr+0x590>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d006      	beq.n	800a4d8 <tcp_slowtmr+0x488>
 800a4ca:	4b46      	ldr	r3, [pc, #280]	; (800a5e4 <tcp_slowtmr+0x594>)
 800a4cc:	f240 5271 	movw	r2, #1393	; 0x571
 800a4d0:	4947      	ldr	r1, [pc, #284]	; (800a5f0 <tcp_slowtmr+0x5a0>)
 800a4d2:	4846      	ldr	r0, [pc, #280]	; (800a5ec <tcp_slowtmr+0x59c>)
 800a4d4:	f009 fbc4 	bl	8013c60 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	4a40      	ldr	r2, [pc, #256]	; (800a5e0 <tcp_slowtmr+0x590>)
 800a4de:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a4e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d013      	beq.n	800a510 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ea:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ee:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a4f0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800a4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f4:	3304      	adds	r3, #4
 800a4f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4f8:	8ad2      	ldrh	r2, [r2, #22]
 800a4fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4fc:	8b09      	ldrh	r1, [r1, #24]
 800a4fe:	9102      	str	r1, [sp, #8]
 800a500:	9201      	str	r2, [sp, #4]
 800a502:	9300      	str	r3, [sp, #0]
 800a504:	462b      	mov	r3, r5
 800a506:	4622      	mov	r2, r4
 800a508:	4601      	mov	r1, r0
 800a50a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a50c:	f004 f98a 	bl	800e824 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a512:	691b      	ldr	r3, [r3, #16]
 800a514:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a518:	7d1b      	ldrb	r3, [r3, #20]
 800a51a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a526:	6838      	ldr	r0, [r7, #0]
 800a528:	f7ff f9f4 	bl	8009914 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800a52c:	4b31      	ldr	r3, [pc, #196]	; (800a5f4 <tcp_slowtmr+0x5a4>)
 800a52e:	2200      	movs	r2, #0
 800a530:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d004      	beq.n	800a542 <tcp_slowtmr+0x4f2>
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f06f 010c 	mvn.w	r1, #12
 800a53e:	68b8      	ldr	r0, [r7, #8]
 800a540:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a542:	4b2c      	ldr	r3, [pc, #176]	; (800a5f4 <tcp_slowtmr+0x5a4>)
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d037      	beq.n	800a5ba <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800a54a:	e592      	b.n	800a072 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a558:	7f1b      	ldrb	r3, [r3, #28]
 800a55a:	3301      	adds	r3, #1
 800a55c:	b2da      	uxtb	r2, r3
 800a55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a560:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a564:	7f1a      	ldrb	r2, [r3, #28]
 800a566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a568:	7f5b      	ldrb	r3, [r3, #29]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d325      	bcc.n	800a5ba <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800a56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a570:	2200      	movs	r2, #0
 800a572:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a574:	4b1f      	ldr	r3, [pc, #124]	; (800a5f4 <tcp_slowtmr+0x5a4>)
 800a576:	2200      	movs	r2, #0
 800a578:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a580:	2b00      	cmp	r3, #0
 800a582:	d00b      	beq.n	800a59c <tcp_slowtmr+0x54c>
 800a584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a586:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a58a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a58c:	6912      	ldr	r2, [r2, #16]
 800a58e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a590:	4610      	mov	r0, r2
 800a592:	4798      	blx	r3
 800a594:	4603      	mov	r3, r0
 800a596:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a59a:	e002      	b.n	800a5a2 <tcp_slowtmr+0x552>
 800a59c:	2300      	movs	r3, #0
 800a59e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800a5a2:	4b14      	ldr	r3, [pc, #80]	; (800a5f4 <tcp_slowtmr+0x5a4>)
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d000      	beq.n	800a5ac <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800a5aa:	e562      	b.n	800a072 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a5ac:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d102      	bne.n	800a5ba <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800a5b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5b6:	f003 fb81 	bl	800dcbc <tcp_output>
  while (pcb != NULL) {
 800a5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f47f ad5e 	bne.w	800a07e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800a5c6:	4b0c      	ldr	r3, [pc, #48]	; (800a5f8 <tcp_slowtmr+0x5a8>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a5cc:	e069      	b.n	800a6a2 <tcp_slowtmr+0x652>
 800a5ce:	bf00      	nop
 800a5d0:	2000aec0 	.word	0x2000aec0
 800a5d4:	000a4cb8 	.word	0x000a4cb8
 800a5d8:	10624dd3 	.word	0x10624dd3
 800a5dc:	000124f8 	.word	0x000124f8
 800a5e0:	2000aecc 	.word	0x2000aecc
 800a5e4:	08015968 	.word	0x08015968
 800a5e8:	08015da0 	.word	0x08015da0
 800a5ec:	080159ac 	.word	0x080159ac
 800a5f0:	08015dcc 	.word	0x08015dcc
 800a5f4:	2000aed4 	.word	0x2000aed4
 800a5f8:	2000aed0 	.word	0x2000aed0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fe:	7d1b      	ldrb	r3, [r3, #20]
 800a600:	2b0a      	cmp	r3, #10
 800a602:	d006      	beq.n	800a612 <tcp_slowtmr+0x5c2>
 800a604:	4b2b      	ldr	r3, [pc, #172]	; (800a6b4 <tcp_slowtmr+0x664>)
 800a606:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a60a:	492b      	ldr	r1, [pc, #172]	; (800a6b8 <tcp_slowtmr+0x668>)
 800a60c:	482b      	ldr	r0, [pc, #172]	; (800a6bc <tcp_slowtmr+0x66c>)
 800a60e:	f009 fb27 	bl	8013c60 <iprintf>
    pcb_remove = 0;
 800a612:	2300      	movs	r3, #0
 800a614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a618:	4b29      	ldr	r3, [pc, #164]	; (800a6c0 <tcp_slowtmr+0x670>)
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61e:	6a1b      	ldr	r3, [r3, #32]
 800a620:	1ad3      	subs	r3, r2, r3
 800a622:	2bf0      	cmp	r3, #240	; 0xf0
 800a624:	d904      	bls.n	800a630 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800a626:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a62a:	3301      	adds	r3, #1
 800a62c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a634:	2b00      	cmp	r3, #0
 800a636:	d02f      	beq.n	800a698 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a638:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a63a:	f000 fb2b 	bl	800ac94 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a640:	2b00      	cmp	r3, #0
 800a642:	d010      	beq.n	800a666 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a644:	4b1f      	ldr	r3, [pc, #124]	; (800a6c4 <tcp_slowtmr+0x674>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d106      	bne.n	800a65c <tcp_slowtmr+0x60c>
 800a64e:	4b19      	ldr	r3, [pc, #100]	; (800a6b4 <tcp_slowtmr+0x664>)
 800a650:	f240 52af 	movw	r2, #1455	; 0x5af
 800a654:	491c      	ldr	r1, [pc, #112]	; (800a6c8 <tcp_slowtmr+0x678>)
 800a656:	4819      	ldr	r0, [pc, #100]	; (800a6bc <tcp_slowtmr+0x66c>)
 800a658:	f009 fb02 	bl	8013c60 <iprintf>
        prev->next = pcb->next;
 800a65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65e:	68da      	ldr	r2, [r3, #12]
 800a660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a662:	60da      	str	r2, [r3, #12]
 800a664:	e00f      	b.n	800a686 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a666:	4b17      	ldr	r3, [pc, #92]	; (800a6c4 <tcp_slowtmr+0x674>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d006      	beq.n	800a67e <tcp_slowtmr+0x62e>
 800a670:	4b10      	ldr	r3, [pc, #64]	; (800a6b4 <tcp_slowtmr+0x664>)
 800a672:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a676:	4915      	ldr	r1, [pc, #84]	; (800a6cc <tcp_slowtmr+0x67c>)
 800a678:	4810      	ldr	r0, [pc, #64]	; (800a6bc <tcp_slowtmr+0x66c>)
 800a67a:	f009 faf1 	bl	8013c60 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	4a10      	ldr	r2, [pc, #64]	; (800a6c4 <tcp_slowtmr+0x674>)
 800a684:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a688:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800a68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a690:	69f8      	ldr	r0, [r7, #28]
 800a692:	f7ff f93f 	bl	8009914 <tcp_free>
 800a696:	e004      	b.n	800a6a2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800a698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a69a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d1a9      	bne.n	800a5fc <tcp_slowtmr+0x5ac>
    }
  }
}
 800a6a8:	bf00      	nop
 800a6aa:	bf00      	nop
 800a6ac:	3730      	adds	r7, #48	; 0x30
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bdb0      	pop	{r4, r5, r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	08015968 	.word	0x08015968
 800a6b8:	08015df8 	.word	0x08015df8
 800a6bc:	080159ac 	.word	0x080159ac
 800a6c0:	2000aec0 	.word	0x2000aec0
 800a6c4:	2000aed0 	.word	0x2000aed0
 800a6c8:	08015e28 	.word	0x08015e28
 800a6cc:	08015e50 	.word	0x08015e50

0800a6d0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a6d6:	4b2d      	ldr	r3, [pc, #180]	; (800a78c <tcp_fasttmr+0xbc>)
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	b2da      	uxtb	r2, r3
 800a6de:	4b2b      	ldr	r3, [pc, #172]	; (800a78c <tcp_fasttmr+0xbc>)
 800a6e0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a6e2:	4b2b      	ldr	r3, [pc, #172]	; (800a790 <tcp_fasttmr+0xc0>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a6e8:	e048      	b.n	800a77c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	7f9a      	ldrb	r2, [r3, #30]
 800a6ee:	4b27      	ldr	r3, [pc, #156]	; (800a78c <tcp_fasttmr+0xbc>)
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d03f      	beq.n	800a776 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a6f6:	4b25      	ldr	r3, [pc, #148]	; (800a78c <tcp_fasttmr+0xbc>)
 800a6f8:	781a      	ldrb	r2, [r3, #0]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	8b5b      	ldrh	r3, [r3, #26]
 800a702:	f003 0301 	and.w	r3, r3, #1
 800a706:	2b00      	cmp	r3, #0
 800a708:	d010      	beq.n	800a72c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	8b5b      	ldrh	r3, [r3, #26]
 800a70e:	f043 0302 	orr.w	r3, r3, #2
 800a712:	b29a      	uxth	r2, r3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f003 facf 	bl	800dcbc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	8b5b      	ldrh	r3, [r3, #26]
 800a722:	f023 0303 	bic.w	r3, r3, #3
 800a726:	b29a      	uxth	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	8b5b      	ldrh	r3, [r3, #26]
 800a730:	f003 0308 	and.w	r3, r3, #8
 800a734:	2b00      	cmp	r3, #0
 800a736:	d009      	beq.n	800a74c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	8b5b      	ldrh	r3, [r3, #26]
 800a73c:	f023 0308 	bic.w	r3, r3, #8
 800a740:	b29a      	uxth	r2, r3
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f7ff fa78 	bl	8009c3c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00a      	beq.n	800a770 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a75a:	4b0e      	ldr	r3, [pc, #56]	; (800a794 <tcp_fasttmr+0xc4>)
 800a75c:	2200      	movs	r2, #0
 800a75e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 f819 	bl	800a798 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a766:	4b0b      	ldr	r3, [pc, #44]	; (800a794 <tcp_fasttmr+0xc4>)
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d000      	beq.n	800a770 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a76e:	e7b8      	b.n	800a6e2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	607b      	str	r3, [r7, #4]
 800a774:	e002      	b.n	800a77c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d1b3      	bne.n	800a6ea <tcp_fasttmr+0x1a>
    }
  }
}
 800a782:	bf00      	nop
 800a784:	bf00      	nop
 800a786:	3708      	adds	r7, #8
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	2000aed6 	.word	0x2000aed6
 800a790:	2000aecc 	.word	0x2000aecc
 800a794:	2000aed4 	.word	0x2000aed4

0800a798 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a798:	b590      	push	{r4, r7, lr}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d109      	bne.n	800a7ba <tcp_process_refused_data+0x22>
 800a7a6:	4b37      	ldr	r3, [pc, #220]	; (800a884 <tcp_process_refused_data+0xec>)
 800a7a8:	f240 6209 	movw	r2, #1545	; 0x609
 800a7ac:	4936      	ldr	r1, [pc, #216]	; (800a888 <tcp_process_refused_data+0xf0>)
 800a7ae:	4837      	ldr	r0, [pc, #220]	; (800a88c <tcp_process_refused_data+0xf4>)
 800a7b0:	f009 fa56 	bl	8013c60 <iprintf>
 800a7b4:	f06f 030f 	mvn.w	r3, #15
 800a7b8:	e060      	b.n	800a87c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7be:	7b5b      	ldrb	r3, [r3, #13]
 800a7c0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7c6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d00b      	beq.n	800a7f0 <tcp_process_refused_data+0x58>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6918      	ldr	r0, [r3, #16]
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	68ba      	ldr	r2, [r7, #8]
 800a7e6:	6879      	ldr	r1, [r7, #4]
 800a7e8:	47a0      	blx	r4
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	73fb      	strb	r3, [r7, #15]
 800a7ee:	e007      	b.n	800a800 <tcp_process_refused_data+0x68>
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	68ba      	ldr	r2, [r7, #8]
 800a7f4:	6879      	ldr	r1, [r7, #4]
 800a7f6:	2000      	movs	r0, #0
 800a7f8:	f000 f8a4 	bl	800a944 <tcp_recv_null>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d12a      	bne.n	800a85e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a808:	7bbb      	ldrb	r3, [r7, #14]
 800a80a:	f003 0320 	and.w	r3, r3, #32
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d033      	beq.n	800a87a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a816:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a81a:	d005      	beq.n	800a828 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a820:	3301      	adds	r3, #1
 800a822:	b29a      	uxth	r2, r3
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d00b      	beq.n	800a84a <tcp_process_refused_data+0xb2>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6918      	ldr	r0, [r3, #16]
 800a83c:	2300      	movs	r3, #0
 800a83e:	2200      	movs	r2, #0
 800a840:	6879      	ldr	r1, [r7, #4]
 800a842:	47a0      	blx	r4
 800a844:	4603      	mov	r3, r0
 800a846:	73fb      	strb	r3, [r7, #15]
 800a848:	e001      	b.n	800a84e <tcp_process_refused_data+0xb6>
 800a84a:	2300      	movs	r3, #0
 800a84c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a84e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a852:	f113 0f0d 	cmn.w	r3, #13
 800a856:	d110      	bne.n	800a87a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800a858:	f06f 030c 	mvn.w	r3, #12
 800a85c:	e00e      	b.n	800a87c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800a85e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a862:	f113 0f0d 	cmn.w	r3, #13
 800a866:	d102      	bne.n	800a86e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a868:	f06f 030c 	mvn.w	r3, #12
 800a86c:	e006      	b.n	800a87c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	68ba      	ldr	r2, [r7, #8]
 800a872:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800a874:	f06f 0304 	mvn.w	r3, #4
 800a878:	e000      	b.n	800a87c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3714      	adds	r7, #20
 800a880:	46bd      	mov	sp, r7
 800a882:	bd90      	pop	{r4, r7, pc}
 800a884:	08015968 	.word	0x08015968
 800a888:	08015e78 	.word	0x08015e78
 800a88c:	080159ac 	.word	0x080159ac

0800a890 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a898:	e007      	b.n	800a8aa <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 f80a 	bl	800a8ba <tcp_seg_free>
    seg = next;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d1f4      	bne.n	800a89a <tcp_segs_free+0xa>
  }
}
 800a8b0:	bf00      	nop
 800a8b2:	bf00      	nop
 800a8b4:	3710      	adds	r7, #16
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b082      	sub	sp, #8
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d00c      	beq.n	800a8e2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d004      	beq.n	800a8da <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7fe fd6d 	bl	80093b4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a8da:	6879      	ldr	r1, [r7, #4]
 800a8dc:	2003      	movs	r0, #3
 800a8de:	f7fd fee7 	bl	80086b0 <memp_free>
  }
}
 800a8e2:	bf00      	nop
 800a8e4:	3708      	adds	r7, #8
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
	...

0800a8ec <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d106      	bne.n	800a908 <tcp_seg_copy+0x1c>
 800a8fa:	4b0f      	ldr	r3, [pc, #60]	; (800a938 <tcp_seg_copy+0x4c>)
 800a8fc:	f240 6282 	movw	r2, #1666	; 0x682
 800a900:	490e      	ldr	r1, [pc, #56]	; (800a93c <tcp_seg_copy+0x50>)
 800a902:	480f      	ldr	r0, [pc, #60]	; (800a940 <tcp_seg_copy+0x54>)
 800a904:	f009 f9ac 	bl	8013c60 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a908:	2003      	movs	r0, #3
 800a90a:	f7fd fe61 	bl	80085d0 <memp_malloc>
 800a90e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d101      	bne.n	800a91a <tcp_seg_copy+0x2e>
    return NULL;
 800a916:	2300      	movs	r3, #0
 800a918:	e00a      	b.n	800a930 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a91a:	2210      	movs	r2, #16
 800a91c:	6879      	ldr	r1, [r7, #4]
 800a91e:	68f8      	ldr	r0, [r7, #12]
 800a920:	f009 f988 	bl	8013c34 <memcpy>
  pbuf_ref(cseg->p);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	4618      	mov	r0, r3
 800a92a:	f7fe fde3 	bl	80094f4 <pbuf_ref>
  return cseg;
 800a92e:	68fb      	ldr	r3, [r7, #12]
}
 800a930:	4618      	mov	r0, r3
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	08015968 	.word	0x08015968
 800a93c:	08015ebc 	.word	0x08015ebc
 800a940:	080159ac 	.word	0x080159ac

0800a944 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	607a      	str	r2, [r7, #4]
 800a950:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d109      	bne.n	800a96c <tcp_recv_null+0x28>
 800a958:	4b12      	ldr	r3, [pc, #72]	; (800a9a4 <tcp_recv_null+0x60>)
 800a95a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a95e:	4912      	ldr	r1, [pc, #72]	; (800a9a8 <tcp_recv_null+0x64>)
 800a960:	4812      	ldr	r0, [pc, #72]	; (800a9ac <tcp_recv_null+0x68>)
 800a962:	f009 f97d 	bl	8013c60 <iprintf>
 800a966:	f06f 030f 	mvn.w	r3, #15
 800a96a:	e016      	b.n	800a99a <tcp_recv_null+0x56>

  if (p != NULL) {
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d009      	beq.n	800a986 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	891b      	ldrh	r3, [r3, #8]
 800a976:	4619      	mov	r1, r3
 800a978:	68b8      	ldr	r0, [r7, #8]
 800a97a:	f7ff fb19 	bl	8009fb0 <tcp_recved>
    pbuf_free(p);
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f7fe fd18 	bl	80093b4 <pbuf_free>
 800a984:	e008      	b.n	800a998 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800a986:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d104      	bne.n	800a998 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800a98e:	68b8      	ldr	r0, [r7, #8]
 800a990:	f7ff f9be 	bl	8009d10 <tcp_close>
 800a994:	4603      	mov	r3, r0
 800a996:	e000      	b.n	800a99a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800a998:	2300      	movs	r3, #0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3710      	adds	r7, #16
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	08015968 	.word	0x08015968
 800a9a8:	08015ed8 	.word	0x08015ed8
 800a9ac:	080159ac 	.word	0x080159ac

0800a9b0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b086      	sub	sp, #24
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a9ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	db01      	blt.n	800a9c6 <tcp_kill_prio+0x16>
 800a9c2:	79fb      	ldrb	r3, [r7, #7]
 800a9c4:	e000      	b.n	800a9c8 <tcp_kill_prio+0x18>
 800a9c6:	237f      	movs	r3, #127	; 0x7f
 800a9c8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800a9ca:	7afb      	ldrb	r3, [r7, #11]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d034      	beq.n	800aa3a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a9d0:	7afb      	ldrb	r3, [r7, #11]
 800a9d2:	3b01      	subs	r3, #1
 800a9d4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a9de:	4b19      	ldr	r3, [pc, #100]	; (800aa44 <tcp_kill_prio+0x94>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	617b      	str	r3, [r7, #20]
 800a9e4:	e01f      	b.n	800aa26 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	7d5b      	ldrb	r3, [r3, #21]
 800a9ea:	7afa      	ldrb	r2, [r7, #11]
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d80c      	bhi.n	800aa0a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a9f4:	7afa      	ldrb	r2, [r7, #11]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d112      	bne.n	800aa20 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a9fa:	4b13      	ldr	r3, [pc, #76]	; (800aa48 <tcp_kill_prio+0x98>)
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	6a1b      	ldr	r3, [r3, #32]
 800aa02:	1ad3      	subs	r3, r2, r3
 800aa04:	68fa      	ldr	r2, [r7, #12]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d80a      	bhi.n	800aa20 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800aa0a:	4b0f      	ldr	r3, [pc, #60]	; (800aa48 <tcp_kill_prio+0x98>)
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	6a1b      	ldr	r3, [r3, #32]
 800aa12:	1ad3      	subs	r3, r2, r3
 800aa14:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	7d5b      	ldrb	r3, [r3, #21]
 800aa1e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	617b      	str	r3, [r7, #20]
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d1dc      	bne.n	800a9e6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d004      	beq.n	800aa3c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800aa32:	6938      	ldr	r0, [r7, #16]
 800aa34:	f7ff fa56 	bl	8009ee4 <tcp_abort>
 800aa38:	e000      	b.n	800aa3c <tcp_kill_prio+0x8c>
    return;
 800aa3a:	bf00      	nop
  }
}
 800aa3c:	3718      	adds	r7, #24
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	2000aecc 	.word	0x2000aecc
 800aa48:	2000aec0 	.word	0x2000aec0

0800aa4c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b086      	sub	sp, #24
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	4603      	mov	r3, r0
 800aa54:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800aa56:	79fb      	ldrb	r3, [r7, #7]
 800aa58:	2b08      	cmp	r3, #8
 800aa5a:	d009      	beq.n	800aa70 <tcp_kill_state+0x24>
 800aa5c:	79fb      	ldrb	r3, [r7, #7]
 800aa5e:	2b09      	cmp	r3, #9
 800aa60:	d006      	beq.n	800aa70 <tcp_kill_state+0x24>
 800aa62:	4b1a      	ldr	r3, [pc, #104]	; (800aacc <tcp_kill_state+0x80>)
 800aa64:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800aa68:	4919      	ldr	r1, [pc, #100]	; (800aad0 <tcp_kill_state+0x84>)
 800aa6a:	481a      	ldr	r0, [pc, #104]	; (800aad4 <tcp_kill_state+0x88>)
 800aa6c:	f009 f8f8 	bl	8013c60 <iprintf>

  inactivity = 0;
 800aa70:	2300      	movs	r3, #0
 800aa72:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800aa74:	2300      	movs	r3, #0
 800aa76:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa78:	4b17      	ldr	r3, [pc, #92]	; (800aad8 <tcp_kill_state+0x8c>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	617b      	str	r3, [r7, #20]
 800aa7e:	e017      	b.n	800aab0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	7d1b      	ldrb	r3, [r3, #20]
 800aa84:	79fa      	ldrb	r2, [r7, #7]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d10f      	bne.n	800aaaa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800aa8a:	4b14      	ldr	r3, [pc, #80]	; (800aadc <tcp_kill_state+0x90>)
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	6a1b      	ldr	r3, [r3, #32]
 800aa92:	1ad3      	subs	r3, r2, r3
 800aa94:	68fa      	ldr	r2, [r7, #12]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d807      	bhi.n	800aaaa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800aa9a:	4b10      	ldr	r3, [pc, #64]	; (800aadc <tcp_kill_state+0x90>)
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	6a1b      	ldr	r3, [r3, #32]
 800aaa2:	1ad3      	subs	r3, r2, r3
 800aaa4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	617b      	str	r3, [r7, #20]
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d1e4      	bne.n	800aa80 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d003      	beq.n	800aac4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800aabc:	2100      	movs	r1, #0
 800aabe:	6938      	ldr	r0, [r7, #16]
 800aac0:	f7ff f952 	bl	8009d68 <tcp_abandon>
  }
}
 800aac4:	bf00      	nop
 800aac6:	3718      	adds	r7, #24
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	08015968 	.word	0x08015968
 800aad0:	08015ef4 	.word	0x08015ef4
 800aad4:	080159ac 	.word	0x080159ac
 800aad8:	2000aecc 	.word	0x2000aecc
 800aadc:	2000aec0 	.word	0x2000aec0

0800aae0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800aae6:	2300      	movs	r3, #0
 800aae8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800aaea:	2300      	movs	r3, #0
 800aaec:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aaee:	4b12      	ldr	r3, [pc, #72]	; (800ab38 <tcp_kill_timewait+0x58>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	60fb      	str	r3, [r7, #12]
 800aaf4:	e012      	b.n	800ab1c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800aaf6:	4b11      	ldr	r3, [pc, #68]	; (800ab3c <tcp_kill_timewait+0x5c>)
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6a1b      	ldr	r3, [r3, #32]
 800aafe:	1ad3      	subs	r3, r2, r3
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d807      	bhi.n	800ab16 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ab06:	4b0d      	ldr	r3, [pc, #52]	; (800ab3c <tcp_kill_timewait+0x5c>)
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6a1b      	ldr	r3, [r3, #32]
 800ab0e:	1ad3      	subs	r3, r2, r3
 800ab10:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	60fb      	str	r3, [r7, #12]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d1e9      	bne.n	800aaf6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d002      	beq.n	800ab2e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ab28:	68b8      	ldr	r0, [r7, #8]
 800ab2a:	f7ff f9db 	bl	8009ee4 <tcp_abort>
  }
}
 800ab2e:	bf00      	nop
 800ab30:	3710      	adds	r7, #16
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	2000aed0 	.word	0x2000aed0
 800ab3c:	2000aec0 	.word	0x2000aec0

0800ab40 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ab46:	4b10      	ldr	r3, [pc, #64]	; (800ab88 <tcp_handle_closepend+0x48>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ab4c:	e014      	b.n	800ab78 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	8b5b      	ldrh	r3, [r3, #26]
 800ab58:	f003 0308 	and.w	r3, r3, #8
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d009      	beq.n	800ab74 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	8b5b      	ldrh	r3, [r3, #26]
 800ab64:	f023 0308 	bic.w	r3, r3, #8
 800ab68:	b29a      	uxth	r2, r3
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f7ff f864 	bl	8009c3c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d1e7      	bne.n	800ab4e <tcp_handle_closepend+0xe>
  }
}
 800ab7e:	bf00      	nop
 800ab80:	bf00      	nop
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	2000aecc 	.word	0x2000aecc

0800ab8c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	4603      	mov	r3, r0
 800ab94:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ab96:	2001      	movs	r0, #1
 800ab98:	f7fd fd1a 	bl	80085d0 <memp_malloc>
 800ab9c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d126      	bne.n	800abf2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800aba4:	f7ff ffcc 	bl	800ab40 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800aba8:	f7ff ff9a 	bl	800aae0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800abac:	2001      	movs	r0, #1
 800abae:	f7fd fd0f 	bl	80085d0 <memp_malloc>
 800abb2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d11b      	bne.n	800abf2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800abba:	2009      	movs	r0, #9
 800abbc:	f7ff ff46 	bl	800aa4c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800abc0:	2001      	movs	r0, #1
 800abc2:	f7fd fd05 	bl	80085d0 <memp_malloc>
 800abc6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d111      	bne.n	800abf2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800abce:	2008      	movs	r0, #8
 800abd0:	f7ff ff3c 	bl	800aa4c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800abd4:	2001      	movs	r0, #1
 800abd6:	f7fd fcfb 	bl	80085d0 <memp_malloc>
 800abda:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d107      	bne.n	800abf2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800abe2:	79fb      	ldrb	r3, [r7, #7]
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7ff fee3 	bl	800a9b0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800abea:	2001      	movs	r0, #1
 800abec:	f7fd fcf0 	bl	80085d0 <memp_malloc>
 800abf0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d03f      	beq.n	800ac78 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800abf8:	229c      	movs	r2, #156	; 0x9c
 800abfa:	2100      	movs	r1, #0
 800abfc:	68f8      	ldr	r0, [r7, #12]
 800abfe:	f009 f827 	bl	8013c50 <memset>
    pcb->prio = prio;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	79fa      	ldrb	r2, [r7, #7]
 800ac06:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ac0e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ac18:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	22ff      	movs	r2, #255	; 0xff
 800ac26:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ac2e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2206      	movs	r2, #6
 800ac34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2206      	movs	r2, #6
 800ac3c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac44:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2201      	movs	r2, #1
 800ac4a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ac4e:	4b0d      	ldr	r3, [pc, #52]	; (800ac84 <tcp_alloc+0xf8>)
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ac56:	4b0c      	ldr	r3, [pc, #48]	; (800ac88 <tcp_alloc+0xfc>)
 800ac58:	781a      	ldrb	r2, [r3, #0]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ac64:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	4a08      	ldr	r2, [pc, #32]	; (800ac8c <tcp_alloc+0x100>)
 800ac6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	4a07      	ldr	r2, [pc, #28]	; (800ac90 <tcp_alloc+0x104>)
 800ac74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ac78:	68fb      	ldr	r3, [r7, #12]
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3710      	adds	r7, #16
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop
 800ac84:	2000aec0 	.word	0x2000aec0
 800ac88:	2000aed6 	.word	0x2000aed6
 800ac8c:	0800a945 	.word	0x0800a945
 800ac90:	006ddd00 	.word	0x006ddd00

0800ac94 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d107      	bne.n	800acb2 <tcp_pcb_purge+0x1e>
 800aca2:	4b21      	ldr	r3, [pc, #132]	; (800ad28 <tcp_pcb_purge+0x94>)
 800aca4:	f640 0251 	movw	r2, #2129	; 0x851
 800aca8:	4920      	ldr	r1, [pc, #128]	; (800ad2c <tcp_pcb_purge+0x98>)
 800acaa:	4821      	ldr	r0, [pc, #132]	; (800ad30 <tcp_pcb_purge+0x9c>)
 800acac:	f008 ffd8 	bl	8013c60 <iprintf>
 800acb0:	e037      	b.n	800ad22 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	7d1b      	ldrb	r3, [r3, #20]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d033      	beq.n	800ad22 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800acbe:	2b0a      	cmp	r3, #10
 800acc0:	d02f      	beq.n	800ad22 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d02b      	beq.n	800ad22 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d007      	beq.n	800ace2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7fe fb6c 	bl	80093b4 <pbuf_free>
      pcb->refused_data = NULL;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d002      	beq.n	800acf0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 f986 	bl	800affc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acf6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7ff fdc7 	bl	800a890 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7ff fdc2 	bl	800a890 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	66da      	str	r2, [r3, #108]	; 0x6c
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	08015968 	.word	0x08015968
 800ad2c:	08015fb4 	.word	0x08015fb4
 800ad30:	080159ac 	.word	0x080159ac

0800ad34 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d106      	bne.n	800ad52 <tcp_pcb_remove+0x1e>
 800ad44:	4b3e      	ldr	r3, [pc, #248]	; (800ae40 <tcp_pcb_remove+0x10c>)
 800ad46:	f640 0283 	movw	r2, #2179	; 0x883
 800ad4a:	493e      	ldr	r1, [pc, #248]	; (800ae44 <tcp_pcb_remove+0x110>)
 800ad4c:	483e      	ldr	r0, [pc, #248]	; (800ae48 <tcp_pcb_remove+0x114>)
 800ad4e:	f008 ff87 	bl	8013c60 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d106      	bne.n	800ad66 <tcp_pcb_remove+0x32>
 800ad58:	4b39      	ldr	r3, [pc, #228]	; (800ae40 <tcp_pcb_remove+0x10c>)
 800ad5a:	f640 0284 	movw	r2, #2180	; 0x884
 800ad5e:	493b      	ldr	r1, [pc, #236]	; (800ae4c <tcp_pcb_remove+0x118>)
 800ad60:	4839      	ldr	r0, [pc, #228]	; (800ae48 <tcp_pcb_remove+0x114>)
 800ad62:	f008 ff7d 	bl	8013c60 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	683a      	ldr	r2, [r7, #0]
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d105      	bne.n	800ad7c <tcp_pcb_remove+0x48>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	68da      	ldr	r2, [r3, #12]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	601a      	str	r2, [r3, #0]
 800ad7a:	e013      	b.n	800ada4 <tcp_pcb_remove+0x70>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	60fb      	str	r3, [r7, #12]
 800ad82:	e00c      	b.n	800ad9e <tcp_pcb_remove+0x6a>
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	683a      	ldr	r2, [r7, #0]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d104      	bne.n	800ad98 <tcp_pcb_remove+0x64>
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	68da      	ldr	r2, [r3, #12]
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	60da      	str	r2, [r3, #12]
 800ad96:	e005      	b.n	800ada4 <tcp_pcb_remove+0x70>
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	60fb      	str	r3, [r7, #12]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d1ef      	bne.n	800ad84 <tcp_pcb_remove+0x50>
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	2200      	movs	r2, #0
 800ada8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800adaa:	6838      	ldr	r0, [r7, #0]
 800adac:	f7ff ff72 	bl	800ac94 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	7d1b      	ldrb	r3, [r3, #20]
 800adb4:	2b0a      	cmp	r3, #10
 800adb6:	d013      	beq.n	800ade0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d00f      	beq.n	800ade0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	8b5b      	ldrh	r3, [r3, #26]
 800adc4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d009      	beq.n	800ade0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	8b5b      	ldrh	r3, [r3, #26]
 800add0:	f043 0302 	orr.w	r3, r3, #2
 800add4:	b29a      	uxth	r2, r3
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800adda:	6838      	ldr	r0, [r7, #0]
 800addc:	f002 ff6e 	bl	800dcbc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	7d1b      	ldrb	r3, [r3, #20]
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d020      	beq.n	800ae2a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adec:	2b00      	cmp	r3, #0
 800adee:	d006      	beq.n	800adfe <tcp_pcb_remove+0xca>
 800adf0:	4b13      	ldr	r3, [pc, #76]	; (800ae40 <tcp_pcb_remove+0x10c>)
 800adf2:	f640 0293 	movw	r2, #2195	; 0x893
 800adf6:	4916      	ldr	r1, [pc, #88]	; (800ae50 <tcp_pcb_remove+0x11c>)
 800adf8:	4813      	ldr	r0, [pc, #76]	; (800ae48 <tcp_pcb_remove+0x114>)
 800adfa:	f008 ff31 	bl	8013c60 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d006      	beq.n	800ae14 <tcp_pcb_remove+0xe0>
 800ae06:	4b0e      	ldr	r3, [pc, #56]	; (800ae40 <tcp_pcb_remove+0x10c>)
 800ae08:	f640 0294 	movw	r2, #2196	; 0x894
 800ae0c:	4911      	ldr	r1, [pc, #68]	; (800ae54 <tcp_pcb_remove+0x120>)
 800ae0e:	480e      	ldr	r0, [pc, #56]	; (800ae48 <tcp_pcb_remove+0x114>)
 800ae10:	f008 ff26 	bl	8013c60 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d006      	beq.n	800ae2a <tcp_pcb_remove+0xf6>
 800ae1c:	4b08      	ldr	r3, [pc, #32]	; (800ae40 <tcp_pcb_remove+0x10c>)
 800ae1e:	f640 0296 	movw	r2, #2198	; 0x896
 800ae22:	490d      	ldr	r1, [pc, #52]	; (800ae58 <tcp_pcb_remove+0x124>)
 800ae24:	4808      	ldr	r0, [pc, #32]	; (800ae48 <tcp_pcb_remove+0x114>)
 800ae26:	f008 ff1b 	bl	8013c60 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	2200      	movs	r2, #0
 800ae34:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ae36:	bf00      	nop
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	08015968 	.word	0x08015968
 800ae44:	08015fd0 	.word	0x08015fd0
 800ae48:	080159ac 	.word	0x080159ac
 800ae4c:	08015fec 	.word	0x08015fec
 800ae50:	0801600c 	.word	0x0801600c
 800ae54:	08016024 	.word	0x08016024
 800ae58:	08016040 	.word	0x08016040

0800ae5c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d106      	bne.n	800ae78 <tcp_next_iss+0x1c>
 800ae6a:	4b0a      	ldr	r3, [pc, #40]	; (800ae94 <tcp_next_iss+0x38>)
 800ae6c:	f640 02af 	movw	r2, #2223	; 0x8af
 800ae70:	4909      	ldr	r1, [pc, #36]	; (800ae98 <tcp_next_iss+0x3c>)
 800ae72:	480a      	ldr	r0, [pc, #40]	; (800ae9c <tcp_next_iss+0x40>)
 800ae74:	f008 fef4 	bl	8013c60 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ae78:	4b09      	ldr	r3, [pc, #36]	; (800aea0 <tcp_next_iss+0x44>)
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	4b09      	ldr	r3, [pc, #36]	; (800aea4 <tcp_next_iss+0x48>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4413      	add	r3, r2
 800ae82:	4a07      	ldr	r2, [pc, #28]	; (800aea0 <tcp_next_iss+0x44>)
 800ae84:	6013      	str	r3, [r2, #0]
  return iss;
 800ae86:	4b06      	ldr	r3, [pc, #24]	; (800aea0 <tcp_next_iss+0x44>)
 800ae88:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3708      	adds	r7, #8
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	08015968 	.word	0x08015968
 800ae98:	08016058 	.word	0x08016058
 800ae9c:	080159ac 	.word	0x080159ac
 800aea0:	2000003c 	.word	0x2000003c
 800aea4:	2000aec0 	.word	0x2000aec0

0800aea8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b086      	sub	sp, #24
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	4603      	mov	r3, r0
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	607a      	str	r2, [r7, #4]
 800aeb4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d106      	bne.n	800aeca <tcp_eff_send_mss_netif+0x22>
 800aebc:	4b14      	ldr	r3, [pc, #80]	; (800af10 <tcp_eff_send_mss_netif+0x68>)
 800aebe:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800aec2:	4914      	ldr	r1, [pc, #80]	; (800af14 <tcp_eff_send_mss_netif+0x6c>)
 800aec4:	4814      	ldr	r0, [pc, #80]	; (800af18 <tcp_eff_send_mss_netif+0x70>)
 800aec6:	f008 fecb 	bl	8013c60 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d101      	bne.n	800aed4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800aed0:	89fb      	ldrh	r3, [r7, #14]
 800aed2:	e019      	b.n	800af08 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aed8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800aeda:	8afb      	ldrh	r3, [r7, #22]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d012      	beq.n	800af06 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800aee0:	2328      	movs	r3, #40	; 0x28
 800aee2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800aee4:	8afa      	ldrh	r2, [r7, #22]
 800aee6:	8abb      	ldrh	r3, [r7, #20]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d904      	bls.n	800aef6 <tcp_eff_send_mss_netif+0x4e>
 800aeec:	8afa      	ldrh	r2, [r7, #22]
 800aeee:	8abb      	ldrh	r3, [r7, #20]
 800aef0:	1ad3      	subs	r3, r2, r3
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	e000      	b.n	800aef8 <tcp_eff_send_mss_netif+0x50>
 800aef6:	2300      	movs	r3, #0
 800aef8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800aefa:	8a7a      	ldrh	r2, [r7, #18]
 800aefc:	89fb      	ldrh	r3, [r7, #14]
 800aefe:	4293      	cmp	r3, r2
 800af00:	bf28      	it	cs
 800af02:	4613      	movcs	r3, r2
 800af04:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800af06:	89fb      	ldrh	r3, [r7, #14]
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3718      	adds	r7, #24
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	08015968 	.word	0x08015968
 800af14:	08016074 	.word	0x08016074
 800af18:	080159ac 	.word	0x080159ac

0800af1c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d119      	bne.n	800af64 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800af30:	4b10      	ldr	r3, [pc, #64]	; (800af74 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800af32:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800af36:	4910      	ldr	r1, [pc, #64]	; (800af78 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800af38:	4810      	ldr	r0, [pc, #64]	; (800af7c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800af3a:	f008 fe91 	bl	8013c60 <iprintf>

  while (pcb != NULL) {
 800af3e:	e011      	b.n	800af64 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d108      	bne.n	800af5e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	68db      	ldr	r3, [r3, #12]
 800af50:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800af52:	68f8      	ldr	r0, [r7, #12]
 800af54:	f7fe ffc6 	bl	8009ee4 <tcp_abort>
      pcb = next;
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	60fb      	str	r3, [r7, #12]
 800af5c:	e002      	b.n	800af64 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	68db      	ldr	r3, [r3, #12]
 800af62:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d1ea      	bne.n	800af40 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800af6a:	bf00      	nop
 800af6c:	bf00      	nop
 800af6e:	3710      	adds	r7, #16
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}
 800af74:	08015968 	.word	0x08015968
 800af78:	0801609c 	.word	0x0801609c
 800af7c:	080159ac 	.word	0x080159ac

0800af80 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d02a      	beq.n	800afe6 <tcp_netif_ip_addr_changed+0x66>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d026      	beq.n	800afe6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800af98:	4b15      	ldr	r3, [pc, #84]	; (800aff0 <tcp_netif_ip_addr_changed+0x70>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4619      	mov	r1, r3
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f7ff ffbc 	bl	800af1c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800afa4:	4b13      	ldr	r3, [pc, #76]	; (800aff4 <tcp_netif_ip_addr_changed+0x74>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4619      	mov	r1, r3
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f7ff ffb6 	bl	800af1c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d017      	beq.n	800afe6 <tcp_netif_ip_addr_changed+0x66>
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d013      	beq.n	800afe6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800afbe:	4b0e      	ldr	r3, [pc, #56]	; (800aff8 <tcp_netif_ip_addr_changed+0x78>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	60fb      	str	r3, [r7, #12]
 800afc4:	e00c      	b.n	800afe0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	429a      	cmp	r2, r3
 800afd0:	d103      	bne.n	800afda <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	60fb      	str	r3, [r7, #12]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d1ef      	bne.n	800afc6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800afe6:	bf00      	nop
 800afe8:	3710      	adds	r7, #16
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	2000aecc 	.word	0x2000aecc
 800aff4:	2000aec4 	.word	0x2000aec4
 800aff8:	2000aec8 	.word	0x2000aec8

0800affc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d007      	beq.n	800b01c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b010:	4618      	mov	r0, r3
 800b012:	f7ff fc3d 	bl	800a890 <tcp_segs_free>
    pcb->ooseq = NULL;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2200      	movs	r2, #0
 800b01a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b01c:	bf00      	nop
 800b01e:	3708      	adds	r7, #8
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b024:	b590      	push	{r4, r7, lr}
 800b026:	b08d      	sub	sp, #52	; 0x34
 800b028:	af04      	add	r7, sp, #16
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d105      	bne.n	800b040 <tcp_input+0x1c>
 800b034:	4b9b      	ldr	r3, [pc, #620]	; (800b2a4 <tcp_input+0x280>)
 800b036:	2283      	movs	r2, #131	; 0x83
 800b038:	499b      	ldr	r1, [pc, #620]	; (800b2a8 <tcp_input+0x284>)
 800b03a:	489c      	ldr	r0, [pc, #624]	; (800b2ac <tcp_input+0x288>)
 800b03c:	f008 fe10 	bl	8013c60 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	4a9a      	ldr	r2, [pc, #616]	; (800b2b0 <tcp_input+0x28c>)
 800b046:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	895b      	ldrh	r3, [r3, #10]
 800b04c:	2b13      	cmp	r3, #19
 800b04e:	f240 83d1 	bls.w	800b7f4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b052:	4b98      	ldr	r3, [pc, #608]	; (800b2b4 <tcp_input+0x290>)
 800b054:	695b      	ldr	r3, [r3, #20]
 800b056:	4a97      	ldr	r2, [pc, #604]	; (800b2b4 <tcp_input+0x290>)
 800b058:	6812      	ldr	r2, [r2, #0]
 800b05a:	4611      	mov	r1, r2
 800b05c:	4618      	mov	r0, r3
 800b05e:	f007 fdcf 	bl	8012c00 <ip4_addr_isbroadcast_u32>
 800b062:	4603      	mov	r3, r0
 800b064:	2b00      	cmp	r3, #0
 800b066:	f040 83c7 	bne.w	800b7f8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b06a:	4b92      	ldr	r3, [pc, #584]	; (800b2b4 <tcp_input+0x290>)
 800b06c:	695b      	ldr	r3, [r3, #20]
 800b06e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b072:	2be0      	cmp	r3, #224	; 0xe0
 800b074:	f000 83c0 	beq.w	800b7f8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b078:	4b8d      	ldr	r3, [pc, #564]	; (800b2b0 <tcp_input+0x28c>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	899b      	ldrh	r3, [r3, #12]
 800b07e:	b29b      	uxth	r3, r3
 800b080:	4618      	mov	r0, r3
 800b082:	f7fc fe2d 	bl	8007ce0 <lwip_htons>
 800b086:	4603      	mov	r3, r0
 800b088:	0b1b      	lsrs	r3, r3, #12
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b092:	7cbb      	ldrb	r3, [r7, #18]
 800b094:	2b13      	cmp	r3, #19
 800b096:	f240 83b1 	bls.w	800b7fc <tcp_input+0x7d8>
 800b09a:	7cbb      	ldrb	r3, [r7, #18]
 800b09c:	b29a      	uxth	r2, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	891b      	ldrh	r3, [r3, #8]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	f200 83aa 	bhi.w	800b7fc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b0a8:	7cbb      	ldrb	r3, [r7, #18]
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	3b14      	subs	r3, #20
 800b0ae:	b29a      	uxth	r2, r3
 800b0b0:	4b81      	ldr	r3, [pc, #516]	; (800b2b8 <tcp_input+0x294>)
 800b0b2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b0b4:	4b81      	ldr	r3, [pc, #516]	; (800b2bc <tcp_input+0x298>)
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	895a      	ldrh	r2, [r3, #10]
 800b0be:	7cbb      	ldrb	r3, [r7, #18]
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d309      	bcc.n	800b0da <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b0c6:	4b7c      	ldr	r3, [pc, #496]	; (800b2b8 <tcp_input+0x294>)
 800b0c8:	881a      	ldrh	r2, [r3, #0]
 800b0ca:	4b7d      	ldr	r3, [pc, #500]	; (800b2c0 <tcp_input+0x29c>)
 800b0cc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b0ce:	7cbb      	ldrb	r3, [r7, #18]
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f7fe f8e8 	bl	80092a8 <pbuf_remove_header>
 800b0d8:	e04e      	b.n	800b178 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d105      	bne.n	800b0ee <tcp_input+0xca>
 800b0e2:	4b70      	ldr	r3, [pc, #448]	; (800b2a4 <tcp_input+0x280>)
 800b0e4:	22c2      	movs	r2, #194	; 0xc2
 800b0e6:	4977      	ldr	r1, [pc, #476]	; (800b2c4 <tcp_input+0x2a0>)
 800b0e8:	4870      	ldr	r0, [pc, #448]	; (800b2ac <tcp_input+0x288>)
 800b0ea:	f008 fdb9 	bl	8013c60 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b0ee:	2114      	movs	r1, #20
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f7fe f8d9 	bl	80092a8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	895a      	ldrh	r2, [r3, #10]
 800b0fa:	4b71      	ldr	r3, [pc, #452]	; (800b2c0 <tcp_input+0x29c>)
 800b0fc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b0fe:	4b6e      	ldr	r3, [pc, #440]	; (800b2b8 <tcp_input+0x294>)
 800b100:	881a      	ldrh	r2, [r3, #0]
 800b102:	4b6f      	ldr	r3, [pc, #444]	; (800b2c0 <tcp_input+0x29c>)
 800b104:	881b      	ldrh	r3, [r3, #0]
 800b106:	1ad3      	subs	r3, r2, r3
 800b108:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b10a:	4b6d      	ldr	r3, [pc, #436]	; (800b2c0 <tcp_input+0x29c>)
 800b10c:	881b      	ldrh	r3, [r3, #0]
 800b10e:	4619      	mov	r1, r3
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f7fe f8c9 	bl	80092a8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	895b      	ldrh	r3, [r3, #10]
 800b11c:	8a3a      	ldrh	r2, [r7, #16]
 800b11e:	429a      	cmp	r2, r3
 800b120:	f200 836e 	bhi.w	800b800 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	4a64      	ldr	r2, [pc, #400]	; (800b2bc <tcp_input+0x298>)
 800b12c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	8a3a      	ldrh	r2, [r7, #16]
 800b134:	4611      	mov	r1, r2
 800b136:	4618      	mov	r0, r3
 800b138:	f7fe f8b6 	bl	80092a8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	891a      	ldrh	r2, [r3, #8]
 800b140:	8a3b      	ldrh	r3, [r7, #16]
 800b142:	1ad3      	subs	r3, r2, r3
 800b144:	b29a      	uxth	r2, r3
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	895b      	ldrh	r3, [r3, #10]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d005      	beq.n	800b15e <tcp_input+0x13a>
 800b152:	4b54      	ldr	r3, [pc, #336]	; (800b2a4 <tcp_input+0x280>)
 800b154:	22df      	movs	r2, #223	; 0xdf
 800b156:	495c      	ldr	r1, [pc, #368]	; (800b2c8 <tcp_input+0x2a4>)
 800b158:	4854      	ldr	r0, [pc, #336]	; (800b2ac <tcp_input+0x288>)
 800b15a:	f008 fd81 	bl	8013c60 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	891a      	ldrh	r2, [r3, #8]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	891b      	ldrh	r3, [r3, #8]
 800b168:	429a      	cmp	r2, r3
 800b16a:	d005      	beq.n	800b178 <tcp_input+0x154>
 800b16c:	4b4d      	ldr	r3, [pc, #308]	; (800b2a4 <tcp_input+0x280>)
 800b16e:	22e0      	movs	r2, #224	; 0xe0
 800b170:	4956      	ldr	r1, [pc, #344]	; (800b2cc <tcp_input+0x2a8>)
 800b172:	484e      	ldr	r0, [pc, #312]	; (800b2ac <tcp_input+0x288>)
 800b174:	f008 fd74 	bl	8013c60 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b178:	4b4d      	ldr	r3, [pc, #308]	; (800b2b0 <tcp_input+0x28c>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	881b      	ldrh	r3, [r3, #0]
 800b17e:	b29b      	uxth	r3, r3
 800b180:	4a4b      	ldr	r2, [pc, #300]	; (800b2b0 <tcp_input+0x28c>)
 800b182:	6814      	ldr	r4, [r2, #0]
 800b184:	4618      	mov	r0, r3
 800b186:	f7fc fdab 	bl	8007ce0 <lwip_htons>
 800b18a:	4603      	mov	r3, r0
 800b18c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b18e:	4b48      	ldr	r3, [pc, #288]	; (800b2b0 <tcp_input+0x28c>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	885b      	ldrh	r3, [r3, #2]
 800b194:	b29b      	uxth	r3, r3
 800b196:	4a46      	ldr	r2, [pc, #280]	; (800b2b0 <tcp_input+0x28c>)
 800b198:	6814      	ldr	r4, [r2, #0]
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fc fda0 	bl	8007ce0 <lwip_htons>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b1a4:	4b42      	ldr	r3, [pc, #264]	; (800b2b0 <tcp_input+0x28c>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	4a41      	ldr	r2, [pc, #260]	; (800b2b0 <tcp_input+0x28c>)
 800b1ac:	6814      	ldr	r4, [r2, #0]
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7fc fdab 	bl	8007d0a <lwip_htonl>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	6063      	str	r3, [r4, #4]
 800b1b8:	6863      	ldr	r3, [r4, #4]
 800b1ba:	4a45      	ldr	r2, [pc, #276]	; (800b2d0 <tcp_input+0x2ac>)
 800b1bc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b1be:	4b3c      	ldr	r3, [pc, #240]	; (800b2b0 <tcp_input+0x28c>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	689b      	ldr	r3, [r3, #8]
 800b1c4:	4a3a      	ldr	r2, [pc, #232]	; (800b2b0 <tcp_input+0x28c>)
 800b1c6:	6814      	ldr	r4, [r2, #0]
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f7fc fd9e 	bl	8007d0a <lwip_htonl>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	60a3      	str	r3, [r4, #8]
 800b1d2:	68a3      	ldr	r3, [r4, #8]
 800b1d4:	4a3f      	ldr	r2, [pc, #252]	; (800b2d4 <tcp_input+0x2b0>)
 800b1d6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b1d8:	4b35      	ldr	r3, [pc, #212]	; (800b2b0 <tcp_input+0x28c>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	89db      	ldrh	r3, [r3, #14]
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	4a33      	ldr	r2, [pc, #204]	; (800b2b0 <tcp_input+0x28c>)
 800b1e2:	6814      	ldr	r4, [r2, #0]
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7fc fd7b 	bl	8007ce0 <lwip_htons>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b1ee:	4b30      	ldr	r3, [pc, #192]	; (800b2b0 <tcp_input+0x28c>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	899b      	ldrh	r3, [r3, #12]
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7fc fd72 	bl	8007ce0 <lwip_htons>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b204:	b2da      	uxtb	r2, r3
 800b206:	4b34      	ldr	r3, [pc, #208]	; (800b2d8 <tcp_input+0x2b4>)
 800b208:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	891a      	ldrh	r2, [r3, #8]
 800b20e:	4b33      	ldr	r3, [pc, #204]	; (800b2dc <tcp_input+0x2b8>)
 800b210:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b212:	4b31      	ldr	r3, [pc, #196]	; (800b2d8 <tcp_input+0x2b4>)
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	f003 0303 	and.w	r3, r3, #3
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d00c      	beq.n	800b238 <tcp_input+0x214>
    tcplen++;
 800b21e:	4b2f      	ldr	r3, [pc, #188]	; (800b2dc <tcp_input+0x2b8>)
 800b220:	881b      	ldrh	r3, [r3, #0]
 800b222:	3301      	adds	r3, #1
 800b224:	b29a      	uxth	r2, r3
 800b226:	4b2d      	ldr	r3, [pc, #180]	; (800b2dc <tcp_input+0x2b8>)
 800b228:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	891a      	ldrh	r2, [r3, #8]
 800b22e:	4b2b      	ldr	r3, [pc, #172]	; (800b2dc <tcp_input+0x2b8>)
 800b230:	881b      	ldrh	r3, [r3, #0]
 800b232:	429a      	cmp	r2, r3
 800b234:	f200 82e6 	bhi.w	800b804 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b238:	2300      	movs	r3, #0
 800b23a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b23c:	4b28      	ldr	r3, [pc, #160]	; (800b2e0 <tcp_input+0x2bc>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	61fb      	str	r3, [r7, #28]
 800b242:	e09d      	b.n	800b380 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	7d1b      	ldrb	r3, [r3, #20]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d105      	bne.n	800b258 <tcp_input+0x234>
 800b24c:	4b15      	ldr	r3, [pc, #84]	; (800b2a4 <tcp_input+0x280>)
 800b24e:	22fb      	movs	r2, #251	; 0xfb
 800b250:	4924      	ldr	r1, [pc, #144]	; (800b2e4 <tcp_input+0x2c0>)
 800b252:	4816      	ldr	r0, [pc, #88]	; (800b2ac <tcp_input+0x288>)
 800b254:	f008 fd04 	bl	8013c60 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b258:	69fb      	ldr	r3, [r7, #28]
 800b25a:	7d1b      	ldrb	r3, [r3, #20]
 800b25c:	2b0a      	cmp	r3, #10
 800b25e:	d105      	bne.n	800b26c <tcp_input+0x248>
 800b260:	4b10      	ldr	r3, [pc, #64]	; (800b2a4 <tcp_input+0x280>)
 800b262:	22fc      	movs	r2, #252	; 0xfc
 800b264:	4920      	ldr	r1, [pc, #128]	; (800b2e8 <tcp_input+0x2c4>)
 800b266:	4811      	ldr	r0, [pc, #68]	; (800b2ac <tcp_input+0x288>)
 800b268:	f008 fcfa 	bl	8013c60 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	7d1b      	ldrb	r3, [r3, #20]
 800b270:	2b01      	cmp	r3, #1
 800b272:	d105      	bne.n	800b280 <tcp_input+0x25c>
 800b274:	4b0b      	ldr	r3, [pc, #44]	; (800b2a4 <tcp_input+0x280>)
 800b276:	22fd      	movs	r2, #253	; 0xfd
 800b278:	491c      	ldr	r1, [pc, #112]	; (800b2ec <tcp_input+0x2c8>)
 800b27a:	480c      	ldr	r0, [pc, #48]	; (800b2ac <tcp_input+0x288>)
 800b27c:	f008 fcf0 	bl	8013c60 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	7a1b      	ldrb	r3, [r3, #8]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d033      	beq.n	800b2f0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	7a1a      	ldrb	r2, [r3, #8]
 800b28c:	4b09      	ldr	r3, [pc, #36]	; (800b2b4 <tcp_input+0x290>)
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b294:	3301      	adds	r3, #1
 800b296:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b298:	429a      	cmp	r2, r3
 800b29a:	d029      	beq.n	800b2f0 <tcp_input+0x2cc>
      prev = pcb;
 800b29c:	69fb      	ldr	r3, [r7, #28]
 800b29e:	61bb      	str	r3, [r7, #24]
      continue;
 800b2a0:	e06b      	b.n	800b37a <tcp_input+0x356>
 800b2a2:	bf00      	nop
 800b2a4:	080160d0 	.word	0x080160d0
 800b2a8:	08016104 	.word	0x08016104
 800b2ac:	0801611c 	.word	0x0801611c
 800b2b0:	2000aee8 	.word	0x2000aee8
 800b2b4:	20005770 	.word	0x20005770
 800b2b8:	2000aeec 	.word	0x2000aeec
 800b2bc:	2000aef0 	.word	0x2000aef0
 800b2c0:	2000aeee 	.word	0x2000aeee
 800b2c4:	08016144 	.word	0x08016144
 800b2c8:	08016154 	.word	0x08016154
 800b2cc:	08016160 	.word	0x08016160
 800b2d0:	2000aef8 	.word	0x2000aef8
 800b2d4:	2000aefc 	.word	0x2000aefc
 800b2d8:	2000af04 	.word	0x2000af04
 800b2dc:	2000af02 	.word	0x2000af02
 800b2e0:	2000aecc 	.word	0x2000aecc
 800b2e4:	08016180 	.word	0x08016180
 800b2e8:	080161a8 	.word	0x080161a8
 800b2ec:	080161d4 	.word	0x080161d4
    }

    if (pcb->remote_port == tcphdr->src &&
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	8b1a      	ldrh	r2, [r3, #24]
 800b2f4:	4b72      	ldr	r3, [pc, #456]	; (800b4c0 <tcp_input+0x49c>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	881b      	ldrh	r3, [r3, #0]
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d13a      	bne.n	800b376 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	8ada      	ldrh	r2, [r3, #22]
 800b304:	4b6e      	ldr	r3, [pc, #440]	; (800b4c0 <tcp_input+0x49c>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	885b      	ldrh	r3, [r3, #2]
 800b30a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d132      	bne.n	800b376 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	685a      	ldr	r2, [r3, #4]
 800b314:	4b6b      	ldr	r3, [pc, #428]	; (800b4c4 <tcp_input+0x4a0>)
 800b316:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b318:	429a      	cmp	r2, r3
 800b31a:	d12c      	bne.n	800b376 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b31c:	69fb      	ldr	r3, [r7, #28]
 800b31e:	681a      	ldr	r2, [r3, #0]
 800b320:	4b68      	ldr	r3, [pc, #416]	; (800b4c4 <tcp_input+0x4a0>)
 800b322:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b324:	429a      	cmp	r2, r3
 800b326:	d126      	bne.n	800b376 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	69fa      	ldr	r2, [r7, #28]
 800b32e:	429a      	cmp	r2, r3
 800b330:	d106      	bne.n	800b340 <tcp_input+0x31c>
 800b332:	4b65      	ldr	r3, [pc, #404]	; (800b4c8 <tcp_input+0x4a4>)
 800b334:	f240 120d 	movw	r2, #269	; 0x10d
 800b338:	4964      	ldr	r1, [pc, #400]	; (800b4cc <tcp_input+0x4a8>)
 800b33a:	4865      	ldr	r0, [pc, #404]	; (800b4d0 <tcp_input+0x4ac>)
 800b33c:	f008 fc90 	bl	8013c60 <iprintf>
      if (prev != NULL) {
 800b340:	69bb      	ldr	r3, [r7, #24]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d00a      	beq.n	800b35c <tcp_input+0x338>
        prev->next = pcb->next;
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	68da      	ldr	r2, [r3, #12]
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b34e:	4b61      	ldr	r3, [pc, #388]	; (800b4d4 <tcp_input+0x4b0>)
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	69fb      	ldr	r3, [r7, #28]
 800b354:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b356:	4a5f      	ldr	r2, [pc, #380]	; (800b4d4 <tcp_input+0x4b0>)
 800b358:	69fb      	ldr	r3, [r7, #28]
 800b35a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b35c:	69fb      	ldr	r3, [r7, #28]
 800b35e:	68db      	ldr	r3, [r3, #12]
 800b360:	69fa      	ldr	r2, [r7, #28]
 800b362:	429a      	cmp	r2, r3
 800b364:	d111      	bne.n	800b38a <tcp_input+0x366>
 800b366:	4b58      	ldr	r3, [pc, #352]	; (800b4c8 <tcp_input+0x4a4>)
 800b368:	f240 1215 	movw	r2, #277	; 0x115
 800b36c:	495a      	ldr	r1, [pc, #360]	; (800b4d8 <tcp_input+0x4b4>)
 800b36e:	4858      	ldr	r0, [pc, #352]	; (800b4d0 <tcp_input+0x4ac>)
 800b370:	f008 fc76 	bl	8013c60 <iprintf>
      break;
 800b374:	e009      	b.n	800b38a <tcp_input+0x366>
    }
    prev = pcb;
 800b376:	69fb      	ldr	r3, [r7, #28]
 800b378:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	68db      	ldr	r3, [r3, #12]
 800b37e:	61fb      	str	r3, [r7, #28]
 800b380:	69fb      	ldr	r3, [r7, #28]
 800b382:	2b00      	cmp	r3, #0
 800b384:	f47f af5e 	bne.w	800b244 <tcp_input+0x220>
 800b388:	e000      	b.n	800b38c <tcp_input+0x368>
      break;
 800b38a:	bf00      	nop
  }

  if (pcb == NULL) {
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	f040 80aa 	bne.w	800b4e8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b394:	4b51      	ldr	r3, [pc, #324]	; (800b4dc <tcp_input+0x4b8>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	61fb      	str	r3, [r7, #28]
 800b39a:	e03f      	b.n	800b41c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	7d1b      	ldrb	r3, [r3, #20]
 800b3a0:	2b0a      	cmp	r3, #10
 800b3a2:	d006      	beq.n	800b3b2 <tcp_input+0x38e>
 800b3a4:	4b48      	ldr	r3, [pc, #288]	; (800b4c8 <tcp_input+0x4a4>)
 800b3a6:	f240 121f 	movw	r2, #287	; 0x11f
 800b3aa:	494d      	ldr	r1, [pc, #308]	; (800b4e0 <tcp_input+0x4bc>)
 800b3ac:	4848      	ldr	r0, [pc, #288]	; (800b4d0 <tcp_input+0x4ac>)
 800b3ae:	f008 fc57 	bl	8013c60 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b3b2:	69fb      	ldr	r3, [r7, #28]
 800b3b4:	7a1b      	ldrb	r3, [r3, #8]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d009      	beq.n	800b3ce <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b3ba:	69fb      	ldr	r3, [r7, #28]
 800b3bc:	7a1a      	ldrb	r2, [r3, #8]
 800b3be:	4b41      	ldr	r3, [pc, #260]	; (800b4c4 <tcp_input+0x4a0>)
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d122      	bne.n	800b414 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	8b1a      	ldrh	r2, [r3, #24]
 800b3d2:	4b3b      	ldr	r3, [pc, #236]	; (800b4c0 <tcp_input+0x49c>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	881b      	ldrh	r3, [r3, #0]
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d11b      	bne.n	800b416 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b3de:	69fb      	ldr	r3, [r7, #28]
 800b3e0:	8ada      	ldrh	r2, [r3, #22]
 800b3e2:	4b37      	ldr	r3, [pc, #220]	; (800b4c0 <tcp_input+0x49c>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	885b      	ldrh	r3, [r3, #2]
 800b3e8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	d113      	bne.n	800b416 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	685a      	ldr	r2, [r3, #4]
 800b3f2:	4b34      	ldr	r3, [pc, #208]	; (800b4c4 <tcp_input+0x4a0>)
 800b3f4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d10d      	bne.n	800b416 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b3fa:	69fb      	ldr	r3, [r7, #28]
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	4b31      	ldr	r3, [pc, #196]	; (800b4c4 <tcp_input+0x4a0>)
 800b400:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b402:	429a      	cmp	r2, r3
 800b404:	d107      	bne.n	800b416 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800b406:	69f8      	ldr	r0, [r7, #28]
 800b408:	f000 fb56 	bl	800bab8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f7fd ffd1 	bl	80093b4 <pbuf_free>
        return;
 800b412:	e1fd      	b.n	800b810 <tcp_input+0x7ec>
        continue;
 800b414:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	68db      	ldr	r3, [r3, #12]
 800b41a:	61fb      	str	r3, [r7, #28]
 800b41c:	69fb      	ldr	r3, [r7, #28]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d1bc      	bne.n	800b39c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b422:	2300      	movs	r3, #0
 800b424:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b426:	4b2f      	ldr	r3, [pc, #188]	; (800b4e4 <tcp_input+0x4c0>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	617b      	str	r3, [r7, #20]
 800b42c:	e02a      	b.n	800b484 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	7a1b      	ldrb	r3, [r3, #8]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d00c      	beq.n	800b450 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	7a1a      	ldrb	r2, [r3, #8]
 800b43a:	4b22      	ldr	r3, [pc, #136]	; (800b4c4 <tcp_input+0x4a0>)
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b442:	3301      	adds	r3, #1
 800b444:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b446:	429a      	cmp	r2, r3
 800b448:	d002      	beq.n	800b450 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	61bb      	str	r3, [r7, #24]
        continue;
 800b44e:	e016      	b.n	800b47e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	8ada      	ldrh	r2, [r3, #22]
 800b454:	4b1a      	ldr	r3, [pc, #104]	; (800b4c0 <tcp_input+0x49c>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	885b      	ldrh	r3, [r3, #2]
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d10c      	bne.n	800b47a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	4b17      	ldr	r3, [pc, #92]	; (800b4c4 <tcp_input+0x4a0>)
 800b466:	695b      	ldr	r3, [r3, #20]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d00f      	beq.n	800b48c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d00d      	beq.n	800b48e <tcp_input+0x46a>
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d009      	beq.n	800b48e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	617b      	str	r3, [r7, #20]
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d1d1      	bne.n	800b42e <tcp_input+0x40a>
 800b48a:	e000      	b.n	800b48e <tcp_input+0x46a>
            break;
 800b48c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d029      	beq.n	800b4e8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b494:	69bb      	ldr	r3, [r7, #24]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d00a      	beq.n	800b4b0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	68da      	ldr	r2, [r3, #12]
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b4a2:	4b10      	ldr	r3, [pc, #64]	; (800b4e4 <tcp_input+0x4c0>)
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b4aa:	4a0e      	ldr	r2, [pc, #56]	; (800b4e4 <tcp_input+0x4c0>)
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800b4b0:	6978      	ldr	r0, [r7, #20]
 800b4b2:	f000 fa03 	bl	800b8bc <tcp_listen_input>
      }
      pbuf_free(p);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f7fd ff7c 	bl	80093b4 <pbuf_free>
      return;
 800b4bc:	e1a8      	b.n	800b810 <tcp_input+0x7ec>
 800b4be:	bf00      	nop
 800b4c0:	2000aee8 	.word	0x2000aee8
 800b4c4:	20005770 	.word	0x20005770
 800b4c8:	080160d0 	.word	0x080160d0
 800b4cc:	080161fc 	.word	0x080161fc
 800b4d0:	0801611c 	.word	0x0801611c
 800b4d4:	2000aecc 	.word	0x2000aecc
 800b4d8:	08016228 	.word	0x08016228
 800b4dc:	2000aed0 	.word	0x2000aed0
 800b4e0:	08016254 	.word	0x08016254
 800b4e4:	2000aec8 	.word	0x2000aec8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800b4e8:	69fb      	ldr	r3, [r7, #28]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	f000 8158 	beq.w	800b7a0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b4f0:	4b95      	ldr	r3, [pc, #596]	; (800b748 <tcp_input+0x724>)
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	891a      	ldrh	r2, [r3, #8]
 800b4fa:	4b93      	ldr	r3, [pc, #588]	; (800b748 <tcp_input+0x724>)
 800b4fc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b4fe:	4a92      	ldr	r2, [pc, #584]	; (800b748 <tcp_input+0x724>)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b504:	4b91      	ldr	r3, [pc, #580]	; (800b74c <tcp_input+0x728>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a8f      	ldr	r2, [pc, #572]	; (800b748 <tcp_input+0x724>)
 800b50a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b50c:	4b90      	ldr	r3, [pc, #576]	; (800b750 <tcp_input+0x72c>)
 800b50e:	2200      	movs	r2, #0
 800b510:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b512:	4b90      	ldr	r3, [pc, #576]	; (800b754 <tcp_input+0x730>)
 800b514:	2200      	movs	r2, #0
 800b516:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b518:	4b8f      	ldr	r3, [pc, #572]	; (800b758 <tcp_input+0x734>)
 800b51a:	2200      	movs	r2, #0
 800b51c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b51e:	4b8f      	ldr	r3, [pc, #572]	; (800b75c <tcp_input+0x738>)
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	f003 0308 	and.w	r3, r3, #8
 800b526:	2b00      	cmp	r3, #0
 800b528:	d006      	beq.n	800b538 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	7b5b      	ldrb	r3, [r3, #13]
 800b52e:	f043 0301 	orr.w	r3, r3, #1
 800b532:	b2da      	uxtb	r2, r3
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b538:	69fb      	ldr	r3, [r7, #28]
 800b53a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d017      	beq.n	800b570 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b540:	69f8      	ldr	r0, [r7, #28]
 800b542:	f7ff f929 	bl	800a798 <tcp_process_refused_data>
 800b546:	4603      	mov	r3, r0
 800b548:	f113 0f0d 	cmn.w	r3, #13
 800b54c:	d007      	beq.n	800b55e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b552:	2b00      	cmp	r3, #0
 800b554:	d00c      	beq.n	800b570 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b556:	4b82      	ldr	r3, [pc, #520]	; (800b760 <tcp_input+0x73c>)
 800b558:	881b      	ldrh	r3, [r3, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d008      	beq.n	800b570 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b562:	2b00      	cmp	r3, #0
 800b564:	f040 80e3 	bne.w	800b72e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b568:	69f8      	ldr	r0, [r7, #28]
 800b56a:	f003 f9ad 	bl	800e8c8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b56e:	e0de      	b.n	800b72e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800b570:	4a7c      	ldr	r2, [pc, #496]	; (800b764 <tcp_input+0x740>)
 800b572:	69fb      	ldr	r3, [r7, #28]
 800b574:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b576:	69f8      	ldr	r0, [r7, #28]
 800b578:	f000 fb18 	bl	800bbac <tcp_process>
 800b57c:	4603      	mov	r3, r0
 800b57e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b580:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b584:	f113 0f0d 	cmn.w	r3, #13
 800b588:	f000 80d3 	beq.w	800b732 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800b58c:	4b71      	ldr	r3, [pc, #452]	; (800b754 <tcp_input+0x730>)
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	f003 0308 	and.w	r3, r3, #8
 800b594:	2b00      	cmp	r3, #0
 800b596:	d015      	beq.n	800b5c4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d008      	beq.n	800b5b4 <tcp_input+0x590>
 800b5a2:	69fb      	ldr	r3, [r7, #28]
 800b5a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5a8:	69fa      	ldr	r2, [r7, #28]
 800b5aa:	6912      	ldr	r2, [r2, #16]
 800b5ac:	f06f 010d 	mvn.w	r1, #13
 800b5b0:	4610      	mov	r0, r2
 800b5b2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b5b4:	69f9      	ldr	r1, [r7, #28]
 800b5b6:	486c      	ldr	r0, [pc, #432]	; (800b768 <tcp_input+0x744>)
 800b5b8:	f7ff fbbc 	bl	800ad34 <tcp_pcb_remove>
        tcp_free(pcb);
 800b5bc:	69f8      	ldr	r0, [r7, #28]
 800b5be:	f7fe f9a9 	bl	8009914 <tcp_free>
 800b5c2:	e0da      	b.n	800b77a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b5c8:	4b63      	ldr	r3, [pc, #396]	; (800b758 <tcp_input+0x734>)
 800b5ca:	881b      	ldrh	r3, [r3, #0]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d01d      	beq.n	800b60c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b5d0:	4b61      	ldr	r3, [pc, #388]	; (800b758 <tcp_input+0x734>)
 800b5d2:	881b      	ldrh	r3, [r3, #0]
 800b5d4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b5d6:	69fb      	ldr	r3, [r7, #28]
 800b5d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00a      	beq.n	800b5f6 <tcp_input+0x5d2>
 800b5e0:	69fb      	ldr	r3, [r7, #28]
 800b5e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5e6:	69fa      	ldr	r2, [r7, #28]
 800b5e8:	6910      	ldr	r0, [r2, #16]
 800b5ea:	89fa      	ldrh	r2, [r7, #14]
 800b5ec:	69f9      	ldr	r1, [r7, #28]
 800b5ee:	4798      	blx	r3
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	74fb      	strb	r3, [r7, #19]
 800b5f4:	e001      	b.n	800b5fa <tcp_input+0x5d6>
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b5fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b5fe:	f113 0f0d 	cmn.w	r3, #13
 800b602:	f000 8098 	beq.w	800b736 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b606:	4b54      	ldr	r3, [pc, #336]	; (800b758 <tcp_input+0x734>)
 800b608:	2200      	movs	r2, #0
 800b60a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b60c:	69f8      	ldr	r0, [r7, #28]
 800b60e:	f000 f915 	bl	800b83c <tcp_input_delayed_close>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	f040 8090 	bne.w	800b73a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b61a:	4b4d      	ldr	r3, [pc, #308]	; (800b750 <tcp_input+0x72c>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d041      	beq.n	800b6a6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b626:	2b00      	cmp	r3, #0
 800b628:	d006      	beq.n	800b638 <tcp_input+0x614>
 800b62a:	4b50      	ldr	r3, [pc, #320]	; (800b76c <tcp_input+0x748>)
 800b62c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b630:	494f      	ldr	r1, [pc, #316]	; (800b770 <tcp_input+0x74c>)
 800b632:	4850      	ldr	r0, [pc, #320]	; (800b774 <tcp_input+0x750>)
 800b634:	f008 fb14 	bl	8013c60 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	8b5b      	ldrh	r3, [r3, #26]
 800b63c:	f003 0310 	and.w	r3, r3, #16
 800b640:	2b00      	cmp	r3, #0
 800b642:	d008      	beq.n	800b656 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b644:	4b42      	ldr	r3, [pc, #264]	; (800b750 <tcp_input+0x72c>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4618      	mov	r0, r3
 800b64a:	f7fd feb3 	bl	80093b4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b64e:	69f8      	ldr	r0, [r7, #28]
 800b650:	f7fe fc48 	bl	8009ee4 <tcp_abort>
            goto aborted;
 800b654:	e091      	b.n	800b77a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d00c      	beq.n	800b67a <tcp_input+0x656>
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b666:	69fb      	ldr	r3, [r7, #28]
 800b668:	6918      	ldr	r0, [r3, #16]
 800b66a:	4b39      	ldr	r3, [pc, #228]	; (800b750 <tcp_input+0x72c>)
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	2300      	movs	r3, #0
 800b670:	69f9      	ldr	r1, [r7, #28]
 800b672:	47a0      	blx	r4
 800b674:	4603      	mov	r3, r0
 800b676:	74fb      	strb	r3, [r7, #19]
 800b678:	e008      	b.n	800b68c <tcp_input+0x668>
 800b67a:	4b35      	ldr	r3, [pc, #212]	; (800b750 <tcp_input+0x72c>)
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	2300      	movs	r3, #0
 800b680:	69f9      	ldr	r1, [r7, #28]
 800b682:	2000      	movs	r0, #0
 800b684:	f7ff f95e 	bl	800a944 <tcp_recv_null>
 800b688:	4603      	mov	r3, r0
 800b68a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b68c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b690:	f113 0f0d 	cmn.w	r3, #13
 800b694:	d053      	beq.n	800b73e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b696:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d003      	beq.n	800b6a6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b69e:	4b2c      	ldr	r3, [pc, #176]	; (800b750 <tcp_input+0x72c>)
 800b6a0:	681a      	ldr	r2, [r3, #0]
 800b6a2:	69fb      	ldr	r3, [r7, #28]
 800b6a4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b6a6:	4b2b      	ldr	r3, [pc, #172]	; (800b754 <tcp_input+0x730>)
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	f003 0320 	and.w	r3, r3, #32
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d030      	beq.n	800b714 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d009      	beq.n	800b6ce <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6be:	7b5a      	ldrb	r2, [r3, #13]
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6c4:	f042 0220 	orr.w	r2, r2, #32
 800b6c8:	b2d2      	uxtb	r2, r2
 800b6ca:	735a      	strb	r2, [r3, #13]
 800b6cc:	e022      	b.n	800b714 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6d2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b6d6:	d005      	beq.n	800b6e4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800b6d8:	69fb      	ldr	r3, [r7, #28]
 800b6da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6dc:	3301      	adds	r3, #1
 800b6de:	b29a      	uxth	r2, r3
 800b6e0:	69fb      	ldr	r3, [r7, #28]
 800b6e2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00b      	beq.n	800b706 <tcp_input+0x6e2>
 800b6ee:	69fb      	ldr	r3, [r7, #28]
 800b6f0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	6918      	ldr	r0, [r3, #16]
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	69f9      	ldr	r1, [r7, #28]
 800b6fe:	47a0      	blx	r4
 800b700:	4603      	mov	r3, r0
 800b702:	74fb      	strb	r3, [r7, #19]
 800b704:	e001      	b.n	800b70a <tcp_input+0x6e6>
 800b706:	2300      	movs	r3, #0
 800b708:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b70a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b70e:	f113 0f0d 	cmn.w	r3, #13
 800b712:	d016      	beq.n	800b742 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b714:	4b13      	ldr	r3, [pc, #76]	; (800b764 <tcp_input+0x740>)
 800b716:	2200      	movs	r2, #0
 800b718:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b71a:	69f8      	ldr	r0, [r7, #28]
 800b71c:	f000 f88e 	bl	800b83c <tcp_input_delayed_close>
 800b720:	4603      	mov	r3, r0
 800b722:	2b00      	cmp	r3, #0
 800b724:	d128      	bne.n	800b778 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b726:	69f8      	ldr	r0, [r7, #28]
 800b728:	f002 fac8 	bl	800dcbc <tcp_output>
 800b72c:	e025      	b.n	800b77a <tcp_input+0x756>
        goto aborted;
 800b72e:	bf00      	nop
 800b730:	e023      	b.n	800b77a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b732:	bf00      	nop
 800b734:	e021      	b.n	800b77a <tcp_input+0x756>
              goto aborted;
 800b736:	bf00      	nop
 800b738:	e01f      	b.n	800b77a <tcp_input+0x756>
          goto aborted;
 800b73a:	bf00      	nop
 800b73c:	e01d      	b.n	800b77a <tcp_input+0x756>
            goto aborted;
 800b73e:	bf00      	nop
 800b740:	e01b      	b.n	800b77a <tcp_input+0x756>
              goto aborted;
 800b742:	bf00      	nop
 800b744:	e019      	b.n	800b77a <tcp_input+0x756>
 800b746:	bf00      	nop
 800b748:	2000aed8 	.word	0x2000aed8
 800b74c:	2000aee8 	.word	0x2000aee8
 800b750:	2000af08 	.word	0x2000af08
 800b754:	2000af05 	.word	0x2000af05
 800b758:	2000af00 	.word	0x2000af00
 800b75c:	2000af04 	.word	0x2000af04
 800b760:	2000af02 	.word	0x2000af02
 800b764:	2000af0c 	.word	0x2000af0c
 800b768:	2000aecc 	.word	0x2000aecc
 800b76c:	080160d0 	.word	0x080160d0
 800b770:	08016284 	.word	0x08016284
 800b774:	0801611c 	.word	0x0801611c
          goto aborted;
 800b778:	bf00      	nop
    tcp_input_pcb = NULL;
 800b77a:	4b27      	ldr	r3, [pc, #156]	; (800b818 <tcp_input+0x7f4>)
 800b77c:	2200      	movs	r2, #0
 800b77e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b780:	4b26      	ldr	r3, [pc, #152]	; (800b81c <tcp_input+0x7f8>)
 800b782:	2200      	movs	r2, #0
 800b784:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b786:	4b26      	ldr	r3, [pc, #152]	; (800b820 <tcp_input+0x7fc>)
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d03f      	beq.n	800b80e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800b78e:	4b24      	ldr	r3, [pc, #144]	; (800b820 <tcp_input+0x7fc>)
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	4618      	mov	r0, r3
 800b794:	f7fd fe0e 	bl	80093b4 <pbuf_free>
      inseg.p = NULL;
 800b798:	4b21      	ldr	r3, [pc, #132]	; (800b820 <tcp_input+0x7fc>)
 800b79a:	2200      	movs	r2, #0
 800b79c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b79e:	e036      	b.n	800b80e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b7a0:	4b20      	ldr	r3, [pc, #128]	; (800b824 <tcp_input+0x800>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	899b      	ldrh	r3, [r3, #12]
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7fc fa99 	bl	8007ce0 <lwip_htons>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	f003 0304 	and.w	r3, r3, #4
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d118      	bne.n	800b7ec <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7ba:	4b1b      	ldr	r3, [pc, #108]	; (800b828 <tcp_input+0x804>)
 800b7bc:	6819      	ldr	r1, [r3, #0]
 800b7be:	4b1b      	ldr	r3, [pc, #108]	; (800b82c <tcp_input+0x808>)
 800b7c0:	881b      	ldrh	r3, [r3, #0]
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	4b1a      	ldr	r3, [pc, #104]	; (800b830 <tcp_input+0x80c>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b7ca:	4b16      	ldr	r3, [pc, #88]	; (800b824 <tcp_input+0x800>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7ce:	885b      	ldrh	r3, [r3, #2]
 800b7d0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b7d2:	4a14      	ldr	r2, [pc, #80]	; (800b824 <tcp_input+0x800>)
 800b7d4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7d6:	8812      	ldrh	r2, [r2, #0]
 800b7d8:	b292      	uxth	r2, r2
 800b7da:	9202      	str	r2, [sp, #8]
 800b7dc:	9301      	str	r3, [sp, #4]
 800b7de:	4b15      	ldr	r3, [pc, #84]	; (800b834 <tcp_input+0x810>)
 800b7e0:	9300      	str	r3, [sp, #0]
 800b7e2:	4b15      	ldr	r3, [pc, #84]	; (800b838 <tcp_input+0x814>)
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	2000      	movs	r0, #0
 800b7e8:	f003 f81c 	bl	800e824 <tcp_rst>
    pbuf_free(p);
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f7fd fde1 	bl	80093b4 <pbuf_free>
  return;
 800b7f2:	e00c      	b.n	800b80e <tcp_input+0x7ea>
    goto dropped;
 800b7f4:	bf00      	nop
 800b7f6:	e006      	b.n	800b806 <tcp_input+0x7e2>
    goto dropped;
 800b7f8:	bf00      	nop
 800b7fa:	e004      	b.n	800b806 <tcp_input+0x7e2>
    goto dropped;
 800b7fc:	bf00      	nop
 800b7fe:	e002      	b.n	800b806 <tcp_input+0x7e2>
      goto dropped;
 800b800:	bf00      	nop
 800b802:	e000      	b.n	800b806 <tcp_input+0x7e2>
      goto dropped;
 800b804:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f7fd fdd4 	bl	80093b4 <pbuf_free>
 800b80c:	e000      	b.n	800b810 <tcp_input+0x7ec>
  return;
 800b80e:	bf00      	nop
}
 800b810:	3724      	adds	r7, #36	; 0x24
 800b812:	46bd      	mov	sp, r7
 800b814:	bd90      	pop	{r4, r7, pc}
 800b816:	bf00      	nop
 800b818:	2000af0c 	.word	0x2000af0c
 800b81c:	2000af08 	.word	0x2000af08
 800b820:	2000aed8 	.word	0x2000aed8
 800b824:	2000aee8 	.word	0x2000aee8
 800b828:	2000aefc 	.word	0x2000aefc
 800b82c:	2000af02 	.word	0x2000af02
 800b830:	2000aef8 	.word	0x2000aef8
 800b834:	20005780 	.word	0x20005780
 800b838:	20005784 	.word	0x20005784

0800b83c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b082      	sub	sp, #8
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d106      	bne.n	800b858 <tcp_input_delayed_close+0x1c>
 800b84a:	4b17      	ldr	r3, [pc, #92]	; (800b8a8 <tcp_input_delayed_close+0x6c>)
 800b84c:	f240 225a 	movw	r2, #602	; 0x25a
 800b850:	4916      	ldr	r1, [pc, #88]	; (800b8ac <tcp_input_delayed_close+0x70>)
 800b852:	4817      	ldr	r0, [pc, #92]	; (800b8b0 <tcp_input_delayed_close+0x74>)
 800b854:	f008 fa04 	bl	8013c60 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b858:	4b16      	ldr	r3, [pc, #88]	; (800b8b4 <tcp_input_delayed_close+0x78>)
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	f003 0310 	and.w	r3, r3, #16
 800b860:	2b00      	cmp	r3, #0
 800b862:	d01c      	beq.n	800b89e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	8b5b      	ldrh	r3, [r3, #26]
 800b868:	f003 0310 	and.w	r3, r3, #16
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d10d      	bne.n	800b88c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b876:	2b00      	cmp	r3, #0
 800b878:	d008      	beq.n	800b88c <tcp_input_delayed_close+0x50>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	6912      	ldr	r2, [r2, #16]
 800b884:	f06f 010e 	mvn.w	r1, #14
 800b888:	4610      	mov	r0, r2
 800b88a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b88c:	6879      	ldr	r1, [r7, #4]
 800b88e:	480a      	ldr	r0, [pc, #40]	; (800b8b8 <tcp_input_delayed_close+0x7c>)
 800b890:	f7ff fa50 	bl	800ad34 <tcp_pcb_remove>
    tcp_free(pcb);
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f7fe f83d 	bl	8009914 <tcp_free>
    return 1;
 800b89a:	2301      	movs	r3, #1
 800b89c:	e000      	b.n	800b8a0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b89e:	2300      	movs	r3, #0
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	080160d0 	.word	0x080160d0
 800b8ac:	080162a0 	.word	0x080162a0
 800b8b0:	0801611c 	.word	0x0801611c
 800b8b4:	2000af05 	.word	0x2000af05
 800b8b8:	2000aecc 	.word	0x2000aecc

0800b8bc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b8bc:	b590      	push	{r4, r7, lr}
 800b8be:	b08b      	sub	sp, #44	; 0x2c
 800b8c0:	af04      	add	r7, sp, #16
 800b8c2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b8c4:	4b6f      	ldr	r3, [pc, #444]	; (800ba84 <tcp_listen_input+0x1c8>)
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	f003 0304 	and.w	r3, r3, #4
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	f040 80d2 	bne.w	800ba76 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d106      	bne.n	800b8e6 <tcp_listen_input+0x2a>
 800b8d8:	4b6b      	ldr	r3, [pc, #428]	; (800ba88 <tcp_listen_input+0x1cc>)
 800b8da:	f240 2281 	movw	r2, #641	; 0x281
 800b8de:	496b      	ldr	r1, [pc, #428]	; (800ba8c <tcp_listen_input+0x1d0>)
 800b8e0:	486b      	ldr	r0, [pc, #428]	; (800ba90 <tcp_listen_input+0x1d4>)
 800b8e2:	f008 f9bd 	bl	8013c60 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b8e6:	4b67      	ldr	r3, [pc, #412]	; (800ba84 <tcp_listen_input+0x1c8>)
 800b8e8:	781b      	ldrb	r3, [r3, #0]
 800b8ea:	f003 0310 	and.w	r3, r3, #16
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d019      	beq.n	800b926 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8f2:	4b68      	ldr	r3, [pc, #416]	; (800ba94 <tcp_listen_input+0x1d8>)
 800b8f4:	6819      	ldr	r1, [r3, #0]
 800b8f6:	4b68      	ldr	r3, [pc, #416]	; (800ba98 <tcp_listen_input+0x1dc>)
 800b8f8:	881b      	ldrh	r3, [r3, #0]
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	4b67      	ldr	r3, [pc, #412]	; (800ba9c <tcp_listen_input+0x1e0>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b902:	4b67      	ldr	r3, [pc, #412]	; (800baa0 <tcp_listen_input+0x1e4>)
 800b904:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b906:	885b      	ldrh	r3, [r3, #2]
 800b908:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b90a:	4a65      	ldr	r2, [pc, #404]	; (800baa0 <tcp_listen_input+0x1e4>)
 800b90c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b90e:	8812      	ldrh	r2, [r2, #0]
 800b910:	b292      	uxth	r2, r2
 800b912:	9202      	str	r2, [sp, #8]
 800b914:	9301      	str	r3, [sp, #4]
 800b916:	4b63      	ldr	r3, [pc, #396]	; (800baa4 <tcp_listen_input+0x1e8>)
 800b918:	9300      	str	r3, [sp, #0]
 800b91a:	4b63      	ldr	r3, [pc, #396]	; (800baa8 <tcp_listen_input+0x1ec>)
 800b91c:	4602      	mov	r2, r0
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f002 ff80 	bl	800e824 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b924:	e0a9      	b.n	800ba7a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800b926:	4b57      	ldr	r3, [pc, #348]	; (800ba84 <tcp_listen_input+0x1c8>)
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	f003 0302 	and.w	r3, r3, #2
 800b92e:	2b00      	cmp	r3, #0
 800b930:	f000 80a3 	beq.w	800ba7a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	7d5b      	ldrb	r3, [r3, #21]
 800b938:	4618      	mov	r0, r3
 800b93a:	f7ff f927 	bl	800ab8c <tcp_alloc>
 800b93e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d111      	bne.n	800b96a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	699b      	ldr	r3, [r3, #24]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d00a      	beq.n	800b964 <tcp_listen_input+0xa8>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	699b      	ldr	r3, [r3, #24]
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	6910      	ldr	r0, [r2, #16]
 800b956:	f04f 32ff 	mov.w	r2, #4294967295
 800b95a:	2100      	movs	r1, #0
 800b95c:	4798      	blx	r3
 800b95e:	4603      	mov	r3, r0
 800b960:	73bb      	strb	r3, [r7, #14]
      return;
 800b962:	e08b      	b.n	800ba7c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b964:	23f0      	movs	r3, #240	; 0xf0
 800b966:	73bb      	strb	r3, [r7, #14]
      return;
 800b968:	e088      	b.n	800ba7c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b96a:	4b50      	ldr	r3, [pc, #320]	; (800baac <tcp_listen_input+0x1f0>)
 800b96c:	695a      	ldr	r2, [r3, #20]
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b972:	4b4e      	ldr	r3, [pc, #312]	; (800baac <tcp_listen_input+0x1f0>)
 800b974:	691a      	ldr	r2, [r3, #16]
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	8ada      	ldrh	r2, [r3, #22]
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b982:	4b47      	ldr	r3, [pc, #284]	; (800baa0 <tcp_listen_input+0x1e4>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	881b      	ldrh	r3, [r3, #0]
 800b988:	b29a      	uxth	r2, r3
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	2203      	movs	r2, #3
 800b992:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b994:	4b41      	ldr	r3, [pc, #260]	; (800ba9c <tcp_listen_input+0x1e0>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	1c5a      	adds	r2, r3, #1
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800b9a6:	6978      	ldr	r0, [r7, #20]
 800b9a8:	f7ff fa58 	bl	800ae5c <tcp_next_iss>
 800b9ac:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	693a      	ldr	r2, [r7, #16]
 800b9b2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	693a      	ldr	r2, [r7, #16]
 800b9b8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	693a      	ldr	r2, [r7, #16]
 800b9be:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	693a      	ldr	r2, [r7, #16]
 800b9c4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b9c6:	4b35      	ldr	r3, [pc, #212]	; (800ba9c <tcp_listen_input+0x1e0>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	1e5a      	subs	r2, r3, #1
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	691a      	ldr	r2, [r3, #16]
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	7a5b      	ldrb	r3, [r3, #9]
 800b9e2:	f003 030c 	and.w	r3, r3, #12
 800b9e6:	b2da      	uxtb	r2, r3
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	7a1a      	ldrb	r2, [r3, #8]
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b9f4:	4b2e      	ldr	r3, [pc, #184]	; (800bab0 <tcp_listen_input+0x1f4>)
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	60da      	str	r2, [r3, #12]
 800b9fc:	4a2c      	ldr	r2, [pc, #176]	; (800bab0 <tcp_listen_input+0x1f4>)
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	6013      	str	r3, [r2, #0]
 800ba02:	f003 f8d1 	bl	800eba8 <tcp_timer_needed>
 800ba06:	4b2b      	ldr	r3, [pc, #172]	; (800bab4 <tcp_listen_input+0x1f8>)
 800ba08:	2201      	movs	r2, #1
 800ba0a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ba0c:	6978      	ldr	r0, [r7, #20]
 800ba0e:	f001 fd8f 	bl	800d530 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ba12:	4b23      	ldr	r3, [pc, #140]	; (800baa0 <tcp_listen_input+0x1e4>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	89db      	ldrh	r3, [r3, #14]
 800ba18:	b29a      	uxth	r2, r3
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	3304      	adds	r3, #4
 800ba34:	4618      	mov	r0, r3
 800ba36:	f006 fe2f 	bl	8012698 <ip4_route>
 800ba3a:	4601      	mov	r1, r0
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	3304      	adds	r3, #4
 800ba40:	461a      	mov	r2, r3
 800ba42:	4620      	mov	r0, r4
 800ba44:	f7ff fa30 	bl	800aea8 <tcp_eff_send_mss_netif>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ba50:	2112      	movs	r1, #18
 800ba52:	6978      	ldr	r0, [r7, #20]
 800ba54:	f002 f844 	bl	800dae0 <tcp_enqueue_flags>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ba5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d004      	beq.n	800ba6e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ba64:	2100      	movs	r1, #0
 800ba66:	6978      	ldr	r0, [r7, #20]
 800ba68:	f7fe f97e 	bl	8009d68 <tcp_abandon>
      return;
 800ba6c:	e006      	b.n	800ba7c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ba6e:	6978      	ldr	r0, [r7, #20]
 800ba70:	f002 f924 	bl	800dcbc <tcp_output>
  return;
 800ba74:	e001      	b.n	800ba7a <tcp_listen_input+0x1be>
    return;
 800ba76:	bf00      	nop
 800ba78:	e000      	b.n	800ba7c <tcp_listen_input+0x1c0>
  return;
 800ba7a:	bf00      	nop
}
 800ba7c:	371c      	adds	r7, #28
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd90      	pop	{r4, r7, pc}
 800ba82:	bf00      	nop
 800ba84:	2000af04 	.word	0x2000af04
 800ba88:	080160d0 	.word	0x080160d0
 800ba8c:	080162c8 	.word	0x080162c8
 800ba90:	0801611c 	.word	0x0801611c
 800ba94:	2000aefc 	.word	0x2000aefc
 800ba98:	2000af02 	.word	0x2000af02
 800ba9c:	2000aef8 	.word	0x2000aef8
 800baa0:	2000aee8 	.word	0x2000aee8
 800baa4:	20005780 	.word	0x20005780
 800baa8:	20005784 	.word	0x20005784
 800baac:	20005770 	.word	0x20005770
 800bab0:	2000aecc 	.word	0x2000aecc
 800bab4:	2000aed4 	.word	0x2000aed4

0800bab8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b086      	sub	sp, #24
 800babc:	af04      	add	r7, sp, #16
 800babe:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800bac0:	4b2f      	ldr	r3, [pc, #188]	; (800bb80 <tcp_timewait_input+0xc8>)
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	f003 0304 	and.w	r3, r3, #4
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d153      	bne.n	800bb74 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d106      	bne.n	800bae0 <tcp_timewait_input+0x28>
 800bad2:	4b2c      	ldr	r3, [pc, #176]	; (800bb84 <tcp_timewait_input+0xcc>)
 800bad4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800bad8:	492b      	ldr	r1, [pc, #172]	; (800bb88 <tcp_timewait_input+0xd0>)
 800bada:	482c      	ldr	r0, [pc, #176]	; (800bb8c <tcp_timewait_input+0xd4>)
 800badc:	f008 f8c0 	bl	8013c60 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800bae0:	4b27      	ldr	r3, [pc, #156]	; (800bb80 <tcp_timewait_input+0xc8>)
 800bae2:	781b      	ldrb	r3, [r3, #0]
 800bae4:	f003 0302 	and.w	r3, r3, #2
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d02a      	beq.n	800bb42 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800baec:	4b28      	ldr	r3, [pc, #160]	; (800bb90 <tcp_timewait_input+0xd8>)
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf4:	1ad3      	subs	r3, r2, r3
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	db2d      	blt.n	800bb56 <tcp_timewait_input+0x9e>
 800bafa:	4b25      	ldr	r3, [pc, #148]	; (800bb90 <tcp_timewait_input+0xd8>)
 800bafc:	681a      	ldr	r2, [r3, #0]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb02:	6879      	ldr	r1, [r7, #4]
 800bb04:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bb06:	440b      	add	r3, r1
 800bb08:	1ad3      	subs	r3, r2, r3
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	dc23      	bgt.n	800bb56 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb0e:	4b21      	ldr	r3, [pc, #132]	; (800bb94 <tcp_timewait_input+0xdc>)
 800bb10:	6819      	ldr	r1, [r3, #0]
 800bb12:	4b21      	ldr	r3, [pc, #132]	; (800bb98 <tcp_timewait_input+0xe0>)
 800bb14:	881b      	ldrh	r3, [r3, #0]
 800bb16:	461a      	mov	r2, r3
 800bb18:	4b1d      	ldr	r3, [pc, #116]	; (800bb90 <tcp_timewait_input+0xd8>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb1e:	4b1f      	ldr	r3, [pc, #124]	; (800bb9c <tcp_timewait_input+0xe4>)
 800bb20:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb22:	885b      	ldrh	r3, [r3, #2]
 800bb24:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb26:	4a1d      	ldr	r2, [pc, #116]	; (800bb9c <tcp_timewait_input+0xe4>)
 800bb28:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb2a:	8812      	ldrh	r2, [r2, #0]
 800bb2c:	b292      	uxth	r2, r2
 800bb2e:	9202      	str	r2, [sp, #8]
 800bb30:	9301      	str	r3, [sp, #4]
 800bb32:	4b1b      	ldr	r3, [pc, #108]	; (800bba0 <tcp_timewait_input+0xe8>)
 800bb34:	9300      	str	r3, [sp, #0]
 800bb36:	4b1b      	ldr	r3, [pc, #108]	; (800bba4 <tcp_timewait_input+0xec>)
 800bb38:	4602      	mov	r2, r0
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f002 fe72 	bl	800e824 <tcp_rst>
      return;
 800bb40:	e01b      	b.n	800bb7a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800bb42:	4b0f      	ldr	r3, [pc, #60]	; (800bb80 <tcp_timewait_input+0xc8>)
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	f003 0301 	and.w	r3, r3, #1
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d003      	beq.n	800bb56 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800bb4e:	4b16      	ldr	r3, [pc, #88]	; (800bba8 <tcp_timewait_input+0xf0>)
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800bb56:	4b10      	ldr	r3, [pc, #64]	; (800bb98 <tcp_timewait_input+0xe0>)
 800bb58:	881b      	ldrh	r3, [r3, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00c      	beq.n	800bb78 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	8b5b      	ldrh	r3, [r3, #26]
 800bb62:	f043 0302 	orr.w	r3, r3, #2
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f002 f8a5 	bl	800dcbc <tcp_output>
  }
  return;
 800bb72:	e001      	b.n	800bb78 <tcp_timewait_input+0xc0>
    return;
 800bb74:	bf00      	nop
 800bb76:	e000      	b.n	800bb7a <tcp_timewait_input+0xc2>
  return;
 800bb78:	bf00      	nop
}
 800bb7a:	3708      	adds	r7, #8
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	2000af04 	.word	0x2000af04
 800bb84:	080160d0 	.word	0x080160d0
 800bb88:	080162e8 	.word	0x080162e8
 800bb8c:	0801611c 	.word	0x0801611c
 800bb90:	2000aef8 	.word	0x2000aef8
 800bb94:	2000aefc 	.word	0x2000aefc
 800bb98:	2000af02 	.word	0x2000af02
 800bb9c:	2000aee8 	.word	0x2000aee8
 800bba0:	20005780 	.word	0x20005780
 800bba4:	20005784 	.word	0x20005784
 800bba8:	2000aec0 	.word	0x2000aec0

0800bbac <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800bbac:	b590      	push	{r4, r7, lr}
 800bbae:	b08d      	sub	sp, #52	; 0x34
 800bbb0:	af04      	add	r7, sp, #16
 800bbb2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d106      	bne.n	800bbd0 <tcp_process+0x24>
 800bbc2:	4b9d      	ldr	r3, [pc, #628]	; (800be38 <tcp_process+0x28c>)
 800bbc4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800bbc8:	499c      	ldr	r1, [pc, #624]	; (800be3c <tcp_process+0x290>)
 800bbca:	489d      	ldr	r0, [pc, #628]	; (800be40 <tcp_process+0x294>)
 800bbcc:	f008 f848 	bl	8013c60 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800bbd0:	4b9c      	ldr	r3, [pc, #624]	; (800be44 <tcp_process+0x298>)
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	f003 0304 	and.w	r3, r3, #4
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d04e      	beq.n	800bc7a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	7d1b      	ldrb	r3, [r3, #20]
 800bbe0:	2b02      	cmp	r3, #2
 800bbe2:	d108      	bne.n	800bbf6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bbe8:	4b97      	ldr	r3, [pc, #604]	; (800be48 <tcp_process+0x29c>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d123      	bne.n	800bc38 <tcp_process+0x8c>
        acceptable = 1;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	76fb      	strb	r3, [r7, #27]
 800bbf4:	e020      	b.n	800bc38 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bbfa:	4b94      	ldr	r3, [pc, #592]	; (800be4c <tcp_process+0x2a0>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d102      	bne.n	800bc08 <tcp_process+0x5c>
        acceptable = 1;
 800bc02:	2301      	movs	r3, #1
 800bc04:	76fb      	strb	r3, [r7, #27]
 800bc06:	e017      	b.n	800bc38 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bc08:	4b90      	ldr	r3, [pc, #576]	; (800be4c <tcp_process+0x2a0>)
 800bc0a:	681a      	ldr	r2, [r3, #0]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc10:	1ad3      	subs	r3, r2, r3
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	db10      	blt.n	800bc38 <tcp_process+0x8c>
 800bc16:	4b8d      	ldr	r3, [pc, #564]	; (800be4c <tcp_process+0x2a0>)
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1e:	6879      	ldr	r1, [r7, #4]
 800bc20:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bc22:	440b      	add	r3, r1
 800bc24:	1ad3      	subs	r3, r2, r3
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	dc06      	bgt.n	800bc38 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	8b5b      	ldrh	r3, [r3, #26]
 800bc2e:	f043 0302 	orr.w	r3, r3, #2
 800bc32:	b29a      	uxth	r2, r3
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800bc38:	7efb      	ldrb	r3, [r7, #27]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d01b      	beq.n	800bc76 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	7d1b      	ldrb	r3, [r3, #20]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d106      	bne.n	800bc54 <tcp_process+0xa8>
 800bc46:	4b7c      	ldr	r3, [pc, #496]	; (800be38 <tcp_process+0x28c>)
 800bc48:	f44f 724e 	mov.w	r2, #824	; 0x338
 800bc4c:	4980      	ldr	r1, [pc, #512]	; (800be50 <tcp_process+0x2a4>)
 800bc4e:	487c      	ldr	r0, [pc, #496]	; (800be40 <tcp_process+0x294>)
 800bc50:	f008 f806 	bl	8013c60 <iprintf>
      recv_flags |= TF_RESET;
 800bc54:	4b7f      	ldr	r3, [pc, #508]	; (800be54 <tcp_process+0x2a8>)
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	f043 0308 	orr.w	r3, r3, #8
 800bc5c:	b2da      	uxtb	r2, r3
 800bc5e:	4b7d      	ldr	r3, [pc, #500]	; (800be54 <tcp_process+0x2a8>)
 800bc60:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	8b5b      	ldrh	r3, [r3, #26]
 800bc66:	f023 0301 	bic.w	r3, r3, #1
 800bc6a:	b29a      	uxth	r2, r3
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800bc70:	f06f 030d 	mvn.w	r3, #13
 800bc74:	e37a      	b.n	800c36c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800bc76:	2300      	movs	r3, #0
 800bc78:	e378      	b.n	800c36c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800bc7a:	4b72      	ldr	r3, [pc, #456]	; (800be44 <tcp_process+0x298>)
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	f003 0302 	and.w	r3, r3, #2
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d010      	beq.n	800bca8 <tcp_process+0xfc>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	7d1b      	ldrb	r3, [r3, #20]
 800bc8a:	2b02      	cmp	r3, #2
 800bc8c:	d00c      	beq.n	800bca8 <tcp_process+0xfc>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	7d1b      	ldrb	r3, [r3, #20]
 800bc92:	2b03      	cmp	r3, #3
 800bc94:	d008      	beq.n	800bca8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	8b5b      	ldrh	r3, [r3, #26]
 800bc9a:	f043 0302 	orr.w	r3, r3, #2
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800bca4:	2300      	movs	r3, #0
 800bca6:	e361      	b.n	800c36c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	8b5b      	ldrh	r3, [r3, #26]
 800bcac:	f003 0310 	and.w	r3, r3, #16
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d103      	bne.n	800bcbc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800bcb4:	4b68      	ldr	r3, [pc, #416]	; (800be58 <tcp_process+0x2ac>)
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f001 fc2f 	bl	800d530 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	7d1b      	ldrb	r3, [r3, #20]
 800bcd6:	3b02      	subs	r3, #2
 800bcd8:	2b07      	cmp	r3, #7
 800bcda:	f200 8337 	bhi.w	800c34c <tcp_process+0x7a0>
 800bcde:	a201      	add	r2, pc, #4	; (adr r2, 800bce4 <tcp_process+0x138>)
 800bce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce4:	0800bd05 	.word	0x0800bd05
 800bce8:	0800bf35 	.word	0x0800bf35
 800bcec:	0800c0ad 	.word	0x0800c0ad
 800bcf0:	0800c0d7 	.word	0x0800c0d7
 800bcf4:	0800c1fb 	.word	0x0800c1fb
 800bcf8:	0800c0ad 	.word	0x0800c0ad
 800bcfc:	0800c287 	.word	0x0800c287
 800bd00:	0800c317 	.word	0x0800c317
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800bd04:	4b4f      	ldr	r3, [pc, #316]	; (800be44 <tcp_process+0x298>)
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	f003 0310 	and.w	r3, r3, #16
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	f000 80e4 	beq.w	800beda <tcp_process+0x32e>
 800bd12:	4b4c      	ldr	r3, [pc, #304]	; (800be44 <tcp_process+0x298>)
 800bd14:	781b      	ldrb	r3, [r3, #0]
 800bd16:	f003 0302 	and.w	r3, r3, #2
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	f000 80dd 	beq.w	800beda <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd24:	1c5a      	adds	r2, r3, #1
 800bd26:	4b48      	ldr	r3, [pc, #288]	; (800be48 <tcp_process+0x29c>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	f040 80d5 	bne.w	800beda <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800bd30:	4b46      	ldr	r3, [pc, #280]	; (800be4c <tcp_process+0x2a0>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	1c5a      	adds	r2, r3, #1
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800bd42:	4b41      	ldr	r3, [pc, #260]	; (800be48 <tcp_process+0x29c>)
 800bd44:	681a      	ldr	r2, [r3, #0]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800bd4a:	4b44      	ldr	r3, [pc, #272]	; (800be5c <tcp_process+0x2b0>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	89db      	ldrh	r3, [r3, #14]
 800bd50:	b29a      	uxth	r2, r3
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800bd64:	4b39      	ldr	r3, [pc, #228]	; (800be4c <tcp_process+0x2a0>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	1e5a      	subs	r2, r3, #1
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2204      	movs	r2, #4
 800bd72:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	3304      	adds	r3, #4
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f006 fc8b 	bl	8012698 <ip4_route>
 800bd82:	4601      	mov	r1, r0
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	3304      	adds	r3, #4
 800bd88:	461a      	mov	r2, r3
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	f7ff f88c 	bl	800aea8 <tcp_eff_send_mss_netif>
 800bd90:	4603      	mov	r3, r0
 800bd92:	461a      	mov	r2, r3
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd9c:	009a      	lsls	r2, r3, #2
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bda2:	005b      	lsls	r3, r3, #1
 800bda4:	f241 111c 	movw	r1, #4380	; 0x111c
 800bda8:	428b      	cmp	r3, r1
 800bdaa:	bf38      	it	cc
 800bdac:	460b      	movcc	r3, r1
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d204      	bcs.n	800bdbc <tcp_process+0x210>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bdb6:	009b      	lsls	r3, r3, #2
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	e00d      	b.n	800bdd8 <tcp_process+0x22c>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bdc0:	005b      	lsls	r3, r3, #1
 800bdc2:	f241 121c 	movw	r2, #4380	; 0x111c
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d904      	bls.n	800bdd4 <tcp_process+0x228>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bdce:	005b      	lsls	r3, r3, #1
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	e001      	b.n	800bdd8 <tcp_process+0x22c>
 800bdd4:	f241 131c 	movw	r3, #4380	; 0x111c
 800bdd8:	687a      	ldr	r2, [r7, #4]
 800bdda:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d106      	bne.n	800bdf6 <tcp_process+0x24a>
 800bde8:	4b13      	ldr	r3, [pc, #76]	; (800be38 <tcp_process+0x28c>)
 800bdea:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800bdee:	491c      	ldr	r1, [pc, #112]	; (800be60 <tcp_process+0x2b4>)
 800bdf0:	4813      	ldr	r0, [pc, #76]	; (800be40 <tcp_process+0x294>)
 800bdf2:	f007 ff35 	bl	8013c60 <iprintf>
        --pcb->snd_queuelen;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	b29a      	uxth	r2, r3
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be0a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d12a      	bne.n	800be68 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be16:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d106      	bne.n	800be2c <tcp_process+0x280>
 800be1e:	4b06      	ldr	r3, [pc, #24]	; (800be38 <tcp_process+0x28c>)
 800be20:	f44f 725d 	mov.w	r2, #884	; 0x374
 800be24:	490f      	ldr	r1, [pc, #60]	; (800be64 <tcp_process+0x2b8>)
 800be26:	4806      	ldr	r0, [pc, #24]	; (800be40 <tcp_process+0x294>)
 800be28:	f007 ff1a 	bl	8013c60 <iprintf>
          pcb->unsent = rseg->next;
 800be2c:	69fb      	ldr	r3, [r7, #28]
 800be2e:	681a      	ldr	r2, [r3, #0]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	66da      	str	r2, [r3, #108]	; 0x6c
 800be34:	e01c      	b.n	800be70 <tcp_process+0x2c4>
 800be36:	bf00      	nop
 800be38:	080160d0 	.word	0x080160d0
 800be3c:	08016308 	.word	0x08016308
 800be40:	0801611c 	.word	0x0801611c
 800be44:	2000af04 	.word	0x2000af04
 800be48:	2000aefc 	.word	0x2000aefc
 800be4c:	2000aef8 	.word	0x2000aef8
 800be50:	08016324 	.word	0x08016324
 800be54:	2000af05 	.word	0x2000af05
 800be58:	2000aec0 	.word	0x2000aec0
 800be5c:	2000aee8 	.word	0x2000aee8
 800be60:	08016344 	.word	0x08016344
 800be64:	0801635c 	.word	0x0801635c
        } else {
          pcb->unacked = rseg->next;
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800be70:	69f8      	ldr	r0, [r7, #28]
 800be72:	f7fe fd22 	bl	800a8ba <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d104      	bne.n	800be88 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be84:	861a      	strh	r2, [r3, #48]	; 0x30
 800be86:	e006      	b.n	800be96 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2200      	movs	r2, #0
 800be92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d00a      	beq.n	800beb6 <tcp_process+0x30a>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	6910      	ldr	r0, [r2, #16]
 800beaa:	2200      	movs	r2, #0
 800beac:	6879      	ldr	r1, [r7, #4]
 800beae:	4798      	blx	r3
 800beb0:	4603      	mov	r3, r0
 800beb2:	76bb      	strb	r3, [r7, #26]
 800beb4:	e001      	b.n	800beba <tcp_process+0x30e>
 800beb6:	2300      	movs	r3, #0
 800beb8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800beba:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bebe:	f113 0f0d 	cmn.w	r3, #13
 800bec2:	d102      	bne.n	800beca <tcp_process+0x31e>
          return ERR_ABRT;
 800bec4:	f06f 030c 	mvn.w	r3, #12
 800bec8:	e250      	b.n	800c36c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	8b5b      	ldrh	r3, [r3, #26]
 800bece:	f043 0302 	orr.w	r3, r3, #2
 800bed2:	b29a      	uxth	r2, r3
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800bed8:	e23a      	b.n	800c350 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800beda:	4b98      	ldr	r3, [pc, #608]	; (800c13c <tcp_process+0x590>)
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	f003 0310 	and.w	r3, r3, #16
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	f000 8234 	beq.w	800c350 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bee8:	4b95      	ldr	r3, [pc, #596]	; (800c140 <tcp_process+0x594>)
 800beea:	6819      	ldr	r1, [r3, #0]
 800beec:	4b95      	ldr	r3, [pc, #596]	; (800c144 <tcp_process+0x598>)
 800beee:	881b      	ldrh	r3, [r3, #0]
 800bef0:	461a      	mov	r2, r3
 800bef2:	4b95      	ldr	r3, [pc, #596]	; (800c148 <tcp_process+0x59c>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bef8:	4b94      	ldr	r3, [pc, #592]	; (800c14c <tcp_process+0x5a0>)
 800befa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800befc:	885b      	ldrh	r3, [r3, #2]
 800befe:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bf00:	4a92      	ldr	r2, [pc, #584]	; (800c14c <tcp_process+0x5a0>)
 800bf02:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf04:	8812      	ldrh	r2, [r2, #0]
 800bf06:	b292      	uxth	r2, r2
 800bf08:	9202      	str	r2, [sp, #8]
 800bf0a:	9301      	str	r3, [sp, #4]
 800bf0c:	4b90      	ldr	r3, [pc, #576]	; (800c150 <tcp_process+0x5a4>)
 800bf0e:	9300      	str	r3, [sp, #0]
 800bf10:	4b90      	ldr	r3, [pc, #576]	; (800c154 <tcp_process+0x5a8>)
 800bf12:	4602      	mov	r2, r0
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f002 fc85 	bl	800e824 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf20:	2b05      	cmp	r3, #5
 800bf22:	f200 8215 	bhi.w	800c350 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f002 fa4f 	bl	800e3d0 <tcp_rexmit_rto>
      break;
 800bf32:	e20d      	b.n	800c350 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800bf34:	4b81      	ldr	r3, [pc, #516]	; (800c13c <tcp_process+0x590>)
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	f003 0310 	and.w	r3, r3, #16
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	f000 80a1 	beq.w	800c084 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bf42:	4b7f      	ldr	r3, [pc, #508]	; (800c140 <tcp_process+0x594>)
 800bf44:	681a      	ldr	r2, [r3, #0]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf4a:	1ad3      	subs	r3, r2, r3
 800bf4c:	3b01      	subs	r3, #1
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	db7e      	blt.n	800c050 <tcp_process+0x4a4>
 800bf52:	4b7b      	ldr	r3, [pc, #492]	; (800c140 <tcp_process+0x594>)
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf5a:	1ad3      	subs	r3, r2, r3
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	dc77      	bgt.n	800c050 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2204      	movs	r2, #4
 800bf64:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d102      	bne.n	800bf74 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800bf6e:	23fa      	movs	r3, #250	; 0xfa
 800bf70:	76bb      	strb	r3, [r7, #26]
 800bf72:	e01d      	b.n	800bfb0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf78:	699b      	ldr	r3, [r3, #24]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d106      	bne.n	800bf8c <tcp_process+0x3e0>
 800bf7e:	4b76      	ldr	r3, [pc, #472]	; (800c158 <tcp_process+0x5ac>)
 800bf80:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800bf84:	4975      	ldr	r1, [pc, #468]	; (800c15c <tcp_process+0x5b0>)
 800bf86:	4876      	ldr	r0, [pc, #472]	; (800c160 <tcp_process+0x5b4>)
 800bf88:	f007 fe6a 	bl	8013c60 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf90:	699b      	ldr	r3, [r3, #24]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00a      	beq.n	800bfac <tcp_process+0x400>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf9a:	699b      	ldr	r3, [r3, #24]
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	6910      	ldr	r0, [r2, #16]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	6879      	ldr	r1, [r7, #4]
 800bfa4:	4798      	blx	r3
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	76bb      	strb	r3, [r7, #26]
 800bfaa:	e001      	b.n	800bfb0 <tcp_process+0x404>
 800bfac:	23f0      	movs	r3, #240	; 0xf0
 800bfae:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800bfb0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d00a      	beq.n	800bfce <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800bfb8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bfbc:	f113 0f0d 	cmn.w	r3, #13
 800bfc0:	d002      	beq.n	800bfc8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f7fd ff8e 	bl	8009ee4 <tcp_abort>
            }
            return ERR_ABRT;
 800bfc8:	f06f 030c 	mvn.w	r3, #12
 800bfcc:	e1ce      	b.n	800c36c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f000 fae0 	bl	800c594 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800bfd4:	4b63      	ldr	r3, [pc, #396]	; (800c164 <tcp_process+0x5b8>)
 800bfd6:	881b      	ldrh	r3, [r3, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d005      	beq.n	800bfe8 <tcp_process+0x43c>
            recv_acked--;
 800bfdc:	4b61      	ldr	r3, [pc, #388]	; (800c164 <tcp_process+0x5b8>)
 800bfde:	881b      	ldrh	r3, [r3, #0]
 800bfe0:	3b01      	subs	r3, #1
 800bfe2:	b29a      	uxth	r2, r3
 800bfe4:	4b5f      	ldr	r3, [pc, #380]	; (800c164 <tcp_process+0x5b8>)
 800bfe6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bfec:	009a      	lsls	r2, r3, #2
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bff2:	005b      	lsls	r3, r3, #1
 800bff4:	f241 111c 	movw	r1, #4380	; 0x111c
 800bff8:	428b      	cmp	r3, r1
 800bffa:	bf38      	it	cc
 800bffc:	460b      	movcc	r3, r1
 800bffe:	429a      	cmp	r2, r3
 800c000:	d204      	bcs.n	800c00c <tcp_process+0x460>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	b29b      	uxth	r3, r3
 800c00a:	e00d      	b.n	800c028 <tcp_process+0x47c>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c010:	005b      	lsls	r3, r3, #1
 800c012:	f241 121c 	movw	r2, #4380	; 0x111c
 800c016:	4293      	cmp	r3, r2
 800c018:	d904      	bls.n	800c024 <tcp_process+0x478>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c01e:	005b      	lsls	r3, r3, #1
 800c020:	b29b      	uxth	r3, r3
 800c022:	e001      	b.n	800c028 <tcp_process+0x47c>
 800c024:	f241 131c 	movw	r3, #4380	; 0x111c
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c02e:	4b4e      	ldr	r3, [pc, #312]	; (800c168 <tcp_process+0x5bc>)
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	f003 0320 	and.w	r3, r3, #32
 800c036:	2b00      	cmp	r3, #0
 800c038:	d037      	beq.n	800c0aa <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	8b5b      	ldrh	r3, [r3, #26]
 800c03e:	f043 0302 	orr.w	r3, r3, #2
 800c042:	b29a      	uxth	r2, r3
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2207      	movs	r2, #7
 800c04c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c04e:	e02c      	b.n	800c0aa <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c050:	4b3b      	ldr	r3, [pc, #236]	; (800c140 <tcp_process+0x594>)
 800c052:	6819      	ldr	r1, [r3, #0]
 800c054:	4b3b      	ldr	r3, [pc, #236]	; (800c144 <tcp_process+0x598>)
 800c056:	881b      	ldrh	r3, [r3, #0]
 800c058:	461a      	mov	r2, r3
 800c05a:	4b3b      	ldr	r3, [pc, #236]	; (800c148 <tcp_process+0x59c>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c060:	4b3a      	ldr	r3, [pc, #232]	; (800c14c <tcp_process+0x5a0>)
 800c062:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c064:	885b      	ldrh	r3, [r3, #2]
 800c066:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c068:	4a38      	ldr	r2, [pc, #224]	; (800c14c <tcp_process+0x5a0>)
 800c06a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c06c:	8812      	ldrh	r2, [r2, #0]
 800c06e:	b292      	uxth	r2, r2
 800c070:	9202      	str	r2, [sp, #8]
 800c072:	9301      	str	r3, [sp, #4]
 800c074:	4b36      	ldr	r3, [pc, #216]	; (800c150 <tcp_process+0x5a4>)
 800c076:	9300      	str	r3, [sp, #0]
 800c078:	4b36      	ldr	r3, [pc, #216]	; (800c154 <tcp_process+0x5a8>)
 800c07a:	4602      	mov	r2, r0
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f002 fbd1 	bl	800e824 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c082:	e167      	b.n	800c354 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c084:	4b2d      	ldr	r3, [pc, #180]	; (800c13c <tcp_process+0x590>)
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	f003 0302 	and.w	r3, r3, #2
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	f000 8161 	beq.w	800c354 <tcp_process+0x7a8>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c096:	1e5a      	subs	r2, r3, #1
 800c098:	4b2b      	ldr	r3, [pc, #172]	; (800c148 <tcp_process+0x59c>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	f040 8159 	bne.w	800c354 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f002 f9b6 	bl	800e414 <tcp_rexmit>
      break;
 800c0a8:	e154      	b.n	800c354 <tcp_process+0x7a8>
 800c0aa:	e153      	b.n	800c354 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f000 fa71 	bl	800c594 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c0b2:	4b2d      	ldr	r3, [pc, #180]	; (800c168 <tcp_process+0x5bc>)
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	f003 0320 	and.w	r3, r3, #32
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	f000 814c 	beq.w	800c358 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	8b5b      	ldrh	r3, [r3, #26]
 800c0c4:	f043 0302 	orr.w	r3, r3, #2
 800c0c8:	b29a      	uxth	r2, r3
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2207      	movs	r2, #7
 800c0d2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c0d4:	e140      	b.n	800c358 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 fa5c 	bl	800c594 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c0dc:	4b22      	ldr	r3, [pc, #136]	; (800c168 <tcp_process+0x5bc>)
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	f003 0320 	and.w	r3, r3, #32
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d071      	beq.n	800c1cc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c0e8:	4b14      	ldr	r3, [pc, #80]	; (800c13c <tcp_process+0x590>)
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	f003 0310 	and.w	r3, r3, #16
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d060      	beq.n	800c1b6 <tcp_process+0x60a>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c0f8:	4b11      	ldr	r3, [pc, #68]	; (800c140 <tcp_process+0x594>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d15a      	bne.n	800c1b6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c104:	2b00      	cmp	r3, #0
 800c106:	d156      	bne.n	800c1b6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	8b5b      	ldrh	r3, [r3, #26]
 800c10c:	f043 0302 	orr.w	r3, r3, #2
 800c110:	b29a      	uxth	r2, r3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f7fe fdbc 	bl	800ac94 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c11c:	4b13      	ldr	r3, [pc, #76]	; (800c16c <tcp_process+0x5c0>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	429a      	cmp	r2, r3
 800c124:	d105      	bne.n	800c132 <tcp_process+0x586>
 800c126:	4b11      	ldr	r3, [pc, #68]	; (800c16c <tcp_process+0x5c0>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	68db      	ldr	r3, [r3, #12]
 800c12c:	4a0f      	ldr	r2, [pc, #60]	; (800c16c <tcp_process+0x5c0>)
 800c12e:	6013      	str	r3, [r2, #0]
 800c130:	e02e      	b.n	800c190 <tcp_process+0x5e4>
 800c132:	4b0e      	ldr	r3, [pc, #56]	; (800c16c <tcp_process+0x5c0>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	617b      	str	r3, [r7, #20]
 800c138:	e027      	b.n	800c18a <tcp_process+0x5de>
 800c13a:	bf00      	nop
 800c13c:	2000af04 	.word	0x2000af04
 800c140:	2000aefc 	.word	0x2000aefc
 800c144:	2000af02 	.word	0x2000af02
 800c148:	2000aef8 	.word	0x2000aef8
 800c14c:	2000aee8 	.word	0x2000aee8
 800c150:	20005780 	.word	0x20005780
 800c154:	20005784 	.word	0x20005784
 800c158:	080160d0 	.word	0x080160d0
 800c15c:	08016370 	.word	0x08016370
 800c160:	0801611c 	.word	0x0801611c
 800c164:	2000af00 	.word	0x2000af00
 800c168:	2000af05 	.word	0x2000af05
 800c16c:	2000aecc 	.word	0x2000aecc
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	68db      	ldr	r3, [r3, #12]
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	429a      	cmp	r2, r3
 800c178:	d104      	bne.n	800c184 <tcp_process+0x5d8>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	68da      	ldr	r2, [r3, #12]
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	60da      	str	r2, [r3, #12]
 800c182:	e005      	b.n	800c190 <tcp_process+0x5e4>
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	68db      	ldr	r3, [r3, #12]
 800c188:	617b      	str	r3, [r7, #20]
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d1ef      	bne.n	800c170 <tcp_process+0x5c4>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2200      	movs	r2, #0
 800c194:	60da      	str	r2, [r3, #12]
 800c196:	4b77      	ldr	r3, [pc, #476]	; (800c374 <tcp_process+0x7c8>)
 800c198:	2201      	movs	r2, #1
 800c19a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	220a      	movs	r2, #10
 800c1a0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c1a2:	4b75      	ldr	r3, [pc, #468]	; (800c378 <tcp_process+0x7cc>)
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	60da      	str	r2, [r3, #12]
 800c1aa:	4a73      	ldr	r2, [pc, #460]	; (800c378 <tcp_process+0x7cc>)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6013      	str	r3, [r2, #0]
 800c1b0:	f002 fcfa 	bl	800eba8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c1b4:	e0d2      	b.n	800c35c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	8b5b      	ldrh	r3, [r3, #26]
 800c1ba:	f043 0302 	orr.w	r3, r3, #2
 800c1be:	b29a      	uxth	r2, r3
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2208      	movs	r2, #8
 800c1c8:	751a      	strb	r2, [r3, #20]
      break;
 800c1ca:	e0c7      	b.n	800c35c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c1cc:	4b6b      	ldr	r3, [pc, #428]	; (800c37c <tcp_process+0x7d0>)
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	f003 0310 	and.w	r3, r3, #16
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	f000 80c1 	beq.w	800c35c <tcp_process+0x7b0>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c1de:	4b68      	ldr	r3, [pc, #416]	; (800c380 <tcp_process+0x7d4>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	f040 80ba 	bne.w	800c35c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	f040 80b5 	bne.w	800c35c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2206      	movs	r2, #6
 800c1f6:	751a      	strb	r2, [r3, #20]
      break;
 800c1f8:	e0b0      	b.n	800c35c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 f9ca 	bl	800c594 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c200:	4b60      	ldr	r3, [pc, #384]	; (800c384 <tcp_process+0x7d8>)
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	f003 0320 	and.w	r3, r3, #32
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f000 80a9 	beq.w	800c360 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	8b5b      	ldrh	r3, [r3, #26]
 800c212:	f043 0302 	orr.w	r3, r3, #2
 800c216:	b29a      	uxth	r2, r3
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f7fe fd39 	bl	800ac94 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c222:	4b59      	ldr	r3, [pc, #356]	; (800c388 <tcp_process+0x7dc>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	429a      	cmp	r2, r3
 800c22a:	d105      	bne.n	800c238 <tcp_process+0x68c>
 800c22c:	4b56      	ldr	r3, [pc, #344]	; (800c388 <tcp_process+0x7dc>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	68db      	ldr	r3, [r3, #12]
 800c232:	4a55      	ldr	r2, [pc, #340]	; (800c388 <tcp_process+0x7dc>)
 800c234:	6013      	str	r3, [r2, #0]
 800c236:	e013      	b.n	800c260 <tcp_process+0x6b4>
 800c238:	4b53      	ldr	r3, [pc, #332]	; (800c388 <tcp_process+0x7dc>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	613b      	str	r3, [r7, #16]
 800c23e:	e00c      	b.n	800c25a <tcp_process+0x6ae>
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	687a      	ldr	r2, [r7, #4]
 800c246:	429a      	cmp	r2, r3
 800c248:	d104      	bne.n	800c254 <tcp_process+0x6a8>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	68da      	ldr	r2, [r3, #12]
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	60da      	str	r2, [r3, #12]
 800c252:	e005      	b.n	800c260 <tcp_process+0x6b4>
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	68db      	ldr	r3, [r3, #12]
 800c258:	613b      	str	r3, [r7, #16]
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d1ef      	bne.n	800c240 <tcp_process+0x694>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2200      	movs	r2, #0
 800c264:	60da      	str	r2, [r3, #12]
 800c266:	4b43      	ldr	r3, [pc, #268]	; (800c374 <tcp_process+0x7c8>)
 800c268:	2201      	movs	r2, #1
 800c26a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	220a      	movs	r2, #10
 800c270:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c272:	4b41      	ldr	r3, [pc, #260]	; (800c378 <tcp_process+0x7cc>)
 800c274:	681a      	ldr	r2, [r3, #0]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	60da      	str	r2, [r3, #12]
 800c27a:	4a3f      	ldr	r2, [pc, #252]	; (800c378 <tcp_process+0x7cc>)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6013      	str	r3, [r2, #0]
 800c280:	f002 fc92 	bl	800eba8 <tcp_timer_needed>
      }
      break;
 800c284:	e06c      	b.n	800c360 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f000 f984 	bl	800c594 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c28c:	4b3b      	ldr	r3, [pc, #236]	; (800c37c <tcp_process+0x7d0>)
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	f003 0310 	and.w	r3, r3, #16
 800c294:	2b00      	cmp	r3, #0
 800c296:	d065      	beq.n	800c364 <tcp_process+0x7b8>
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c29c:	4b38      	ldr	r3, [pc, #224]	; (800c380 <tcp_process+0x7d4>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d15f      	bne.n	800c364 <tcp_process+0x7b8>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d15b      	bne.n	800c364 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f7fe fcf1 	bl	800ac94 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c2b2:	4b35      	ldr	r3, [pc, #212]	; (800c388 <tcp_process+0x7dc>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d105      	bne.n	800c2c8 <tcp_process+0x71c>
 800c2bc:	4b32      	ldr	r3, [pc, #200]	; (800c388 <tcp_process+0x7dc>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	4a31      	ldr	r2, [pc, #196]	; (800c388 <tcp_process+0x7dc>)
 800c2c4:	6013      	str	r3, [r2, #0]
 800c2c6:	e013      	b.n	800c2f0 <tcp_process+0x744>
 800c2c8:	4b2f      	ldr	r3, [pc, #188]	; (800c388 <tcp_process+0x7dc>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	60fb      	str	r3, [r7, #12]
 800c2ce:	e00c      	b.n	800c2ea <tcp_process+0x73e>
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d104      	bne.n	800c2e4 <tcp_process+0x738>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	68da      	ldr	r2, [r3, #12]
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	60da      	str	r2, [r3, #12]
 800c2e2:	e005      	b.n	800c2f0 <tcp_process+0x744>
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	68db      	ldr	r3, [r3, #12]
 800c2e8:	60fb      	str	r3, [r7, #12]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d1ef      	bne.n	800c2d0 <tcp_process+0x724>
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	60da      	str	r2, [r3, #12]
 800c2f6:	4b1f      	ldr	r3, [pc, #124]	; (800c374 <tcp_process+0x7c8>)
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	220a      	movs	r2, #10
 800c300:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c302:	4b1d      	ldr	r3, [pc, #116]	; (800c378 <tcp_process+0x7cc>)
 800c304:	681a      	ldr	r2, [r3, #0]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	60da      	str	r2, [r3, #12]
 800c30a:	4a1b      	ldr	r2, [pc, #108]	; (800c378 <tcp_process+0x7cc>)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6013      	str	r3, [r2, #0]
 800c310:	f002 fc4a 	bl	800eba8 <tcp_timer_needed>
      }
      break;
 800c314:	e026      	b.n	800c364 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 f93c 	bl	800c594 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c31c:	4b17      	ldr	r3, [pc, #92]	; (800c37c <tcp_process+0x7d0>)
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	f003 0310 	and.w	r3, r3, #16
 800c324:	2b00      	cmp	r3, #0
 800c326:	d01f      	beq.n	800c368 <tcp_process+0x7bc>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c32c:	4b14      	ldr	r3, [pc, #80]	; (800c380 <tcp_process+0x7d4>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	429a      	cmp	r2, r3
 800c332:	d119      	bne.n	800c368 <tcp_process+0x7bc>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d115      	bne.n	800c368 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800c33c:	4b11      	ldr	r3, [pc, #68]	; (800c384 <tcp_process+0x7d8>)
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	f043 0310 	orr.w	r3, r3, #16
 800c344:	b2da      	uxtb	r2, r3
 800c346:	4b0f      	ldr	r3, [pc, #60]	; (800c384 <tcp_process+0x7d8>)
 800c348:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c34a:	e00d      	b.n	800c368 <tcp_process+0x7bc>
    default:
      break;
 800c34c:	bf00      	nop
 800c34e:	e00c      	b.n	800c36a <tcp_process+0x7be>
      break;
 800c350:	bf00      	nop
 800c352:	e00a      	b.n	800c36a <tcp_process+0x7be>
      break;
 800c354:	bf00      	nop
 800c356:	e008      	b.n	800c36a <tcp_process+0x7be>
      break;
 800c358:	bf00      	nop
 800c35a:	e006      	b.n	800c36a <tcp_process+0x7be>
      break;
 800c35c:	bf00      	nop
 800c35e:	e004      	b.n	800c36a <tcp_process+0x7be>
      break;
 800c360:	bf00      	nop
 800c362:	e002      	b.n	800c36a <tcp_process+0x7be>
      break;
 800c364:	bf00      	nop
 800c366:	e000      	b.n	800c36a <tcp_process+0x7be>
      break;
 800c368:	bf00      	nop
  }
  return ERR_OK;
 800c36a:	2300      	movs	r3, #0
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3724      	adds	r7, #36	; 0x24
 800c370:	46bd      	mov	sp, r7
 800c372:	bd90      	pop	{r4, r7, pc}
 800c374:	2000aed4 	.word	0x2000aed4
 800c378:	2000aed0 	.word	0x2000aed0
 800c37c:	2000af04 	.word	0x2000af04
 800c380:	2000aefc 	.word	0x2000aefc
 800c384:	2000af05 	.word	0x2000af05
 800c388:	2000aecc 	.word	0x2000aecc

0800c38c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c38c:	b590      	push	{r4, r7, lr}
 800c38e:	b085      	sub	sp, #20
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d106      	bne.n	800c3aa <tcp_oos_insert_segment+0x1e>
 800c39c:	4b3b      	ldr	r3, [pc, #236]	; (800c48c <tcp_oos_insert_segment+0x100>)
 800c39e:	f240 421f 	movw	r2, #1055	; 0x41f
 800c3a2:	493b      	ldr	r1, [pc, #236]	; (800c490 <tcp_oos_insert_segment+0x104>)
 800c3a4:	483b      	ldr	r0, [pc, #236]	; (800c494 <tcp_oos_insert_segment+0x108>)
 800c3a6:	f007 fc5b 	bl	8013c60 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	68db      	ldr	r3, [r3, #12]
 800c3ae:	899b      	ldrh	r3, [r3, #12]
 800c3b0:	b29b      	uxth	r3, r3
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7fb fc94 	bl	8007ce0 <lwip_htons>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	b2db      	uxtb	r3, r3
 800c3bc:	f003 0301 	and.w	r3, r3, #1
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d028      	beq.n	800c416 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c3c4:	6838      	ldr	r0, [r7, #0]
 800c3c6:	f7fe fa63 	bl	800a890 <tcp_segs_free>
    next = NULL;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	603b      	str	r3, [r7, #0]
 800c3ce:	e056      	b.n	800c47e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	68db      	ldr	r3, [r3, #12]
 800c3d4:	899b      	ldrh	r3, [r3, #12]
 800c3d6:	b29b      	uxth	r3, r3
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7fb fc81 	bl	8007ce0 <lwip_htons>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	f003 0301 	and.w	r3, r3, #1
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d00d      	beq.n	800c406 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	68db      	ldr	r3, [r3, #12]
 800c3ee:	899b      	ldrh	r3, [r3, #12]
 800c3f0:	b29c      	uxth	r4, r3
 800c3f2:	2001      	movs	r0, #1
 800c3f4:	f7fb fc74 	bl	8007ce0 <lwip_htons>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	4322      	orrs	r2, r4
 800c402:	b292      	uxth	r2, r2
 800c404:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c410:	68f8      	ldr	r0, [r7, #12]
 800c412:	f7fe fa52 	bl	800a8ba <tcp_seg_free>
    while (next &&
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d00e      	beq.n	800c43a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	891b      	ldrh	r3, [r3, #8]
 800c420:	461a      	mov	r2, r3
 800c422:	4b1d      	ldr	r3, [pc, #116]	; (800c498 <tcp_oos_insert_segment+0x10c>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	441a      	add	r2, r3
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	68db      	ldr	r3, [r3, #12]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	6839      	ldr	r1, [r7, #0]
 800c430:	8909      	ldrh	r1, [r1, #8]
 800c432:	440b      	add	r3, r1
 800c434:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c436:	2b00      	cmp	r3, #0
 800c438:	daca      	bge.n	800c3d0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d01e      	beq.n	800c47e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	891b      	ldrh	r3, [r3, #8]
 800c444:	461a      	mov	r2, r3
 800c446:	4b14      	ldr	r3, [pc, #80]	; (800c498 <tcp_oos_insert_segment+0x10c>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	441a      	add	r2, r3
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c454:	2b00      	cmp	r3, #0
 800c456:	dd12      	ble.n	800c47e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	b29a      	uxth	r2, r3
 800c460:	4b0d      	ldr	r3, [pc, #52]	; (800c498 <tcp_oos_insert_segment+0x10c>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	b29b      	uxth	r3, r3
 800c466:	1ad3      	subs	r3, r2, r3
 800c468:	b29a      	uxth	r2, r3
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	685a      	ldr	r2, [r3, #4]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	891b      	ldrh	r3, [r3, #8]
 800c476:	4619      	mov	r1, r3
 800c478:	4610      	mov	r0, r2
 800c47a:	f7fc fe15 	bl	80090a8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	683a      	ldr	r2, [r7, #0]
 800c482:	601a      	str	r2, [r3, #0]
}
 800c484:	bf00      	nop
 800c486:	3714      	adds	r7, #20
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd90      	pop	{r4, r7, pc}
 800c48c:	080160d0 	.word	0x080160d0
 800c490:	08016390 	.word	0x08016390
 800c494:	0801611c 	.word	0x0801611c
 800c498:	2000aef8 	.word	0x2000aef8

0800c49c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800c49c:	b5b0      	push	{r4, r5, r7, lr}
 800c49e:	b086      	sub	sp, #24
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	607a      	str	r2, [r7, #4]
 800c4a8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c4aa:	e03e      	b.n	800c52a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7fd f802 	bl	80094c4 <pbuf_clen>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c4ca:	8a7a      	ldrh	r2, [r7, #18]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d906      	bls.n	800c4de <tcp_free_acked_segments+0x42>
 800c4d0:	4b2a      	ldr	r3, [pc, #168]	; (800c57c <tcp_free_acked_segments+0xe0>)
 800c4d2:	f240 4257 	movw	r2, #1111	; 0x457
 800c4d6:	492a      	ldr	r1, [pc, #168]	; (800c580 <tcp_free_acked_segments+0xe4>)
 800c4d8:	482a      	ldr	r0, [pc, #168]	; (800c584 <tcp_free_acked_segments+0xe8>)
 800c4da:	f007 fbc1 	bl	8013c60 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800c4e4:	8a7b      	ldrh	r3, [r7, #18]
 800c4e6:	1ad3      	subs	r3, r2, r3
 800c4e8:	b29a      	uxth	r2, r3
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	891a      	ldrh	r2, [r3, #8]
 800c4f4:	4b24      	ldr	r3, [pc, #144]	; (800c588 <tcp_free_acked_segments+0xec>)
 800c4f6:	881b      	ldrh	r3, [r3, #0]
 800c4f8:	4413      	add	r3, r2
 800c4fa:	b29a      	uxth	r2, r3
 800c4fc:	4b22      	ldr	r3, [pc, #136]	; (800c588 <tcp_free_acked_segments+0xec>)
 800c4fe:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c500:	6978      	ldr	r0, [r7, #20]
 800c502:	f7fe f9da 	bl	800a8ba <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d00c      	beq.n	800c52a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d109      	bne.n	800c52a <tcp_free_acked_segments+0x8e>
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d106      	bne.n	800c52a <tcp_free_acked_segments+0x8e>
 800c51c:	4b17      	ldr	r3, [pc, #92]	; (800c57c <tcp_free_acked_segments+0xe0>)
 800c51e:	f240 4261 	movw	r2, #1121	; 0x461
 800c522:	491a      	ldr	r1, [pc, #104]	; (800c58c <tcp_free_acked_segments+0xf0>)
 800c524:	4817      	ldr	r0, [pc, #92]	; (800c584 <tcp_free_acked_segments+0xe8>)
 800c526:	f007 fb9b 	bl	8013c60 <iprintf>
  while (seg_list != NULL &&
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d020      	beq.n	800c572 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	68db      	ldr	r3, [r3, #12]
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	4618      	mov	r0, r3
 800c538:	f7fb fbe7 	bl	8007d0a <lwip_htonl>
 800c53c:	4604      	mov	r4, r0
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	891b      	ldrh	r3, [r3, #8]
 800c542:	461d      	mov	r5, r3
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	899b      	ldrh	r3, [r3, #12]
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	4618      	mov	r0, r3
 800c54e:	f7fb fbc7 	bl	8007ce0 <lwip_htons>
 800c552:	4603      	mov	r3, r0
 800c554:	b2db      	uxtb	r3, r3
 800c556:	f003 0303 	and.w	r3, r3, #3
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d001      	beq.n	800c562 <tcp_free_acked_segments+0xc6>
 800c55e:	2301      	movs	r3, #1
 800c560:	e000      	b.n	800c564 <tcp_free_acked_segments+0xc8>
 800c562:	2300      	movs	r3, #0
 800c564:	442b      	add	r3, r5
 800c566:	18e2      	adds	r2, r4, r3
 800c568:	4b09      	ldr	r3, [pc, #36]	; (800c590 <tcp_free_acked_segments+0xf4>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800c56e:	2b00      	cmp	r3, #0
 800c570:	dd9c      	ble.n	800c4ac <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800c572:	68bb      	ldr	r3, [r7, #8]
}
 800c574:	4618      	mov	r0, r3
 800c576:	3718      	adds	r7, #24
 800c578:	46bd      	mov	sp, r7
 800c57a:	bdb0      	pop	{r4, r5, r7, pc}
 800c57c:	080160d0 	.word	0x080160d0
 800c580:	080163b8 	.word	0x080163b8
 800c584:	0801611c 	.word	0x0801611c
 800c588:	2000af00 	.word	0x2000af00
 800c58c:	080163e0 	.word	0x080163e0
 800c590:	2000aefc 	.word	0x2000aefc

0800c594 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c594:	b5b0      	push	{r4, r5, r7, lr}
 800c596:	b094      	sub	sp, #80	; 0x50
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800c59c:	2300      	movs	r3, #0
 800c59e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d106      	bne.n	800c5b4 <tcp_receive+0x20>
 800c5a6:	4b91      	ldr	r3, [pc, #580]	; (800c7ec <tcp_receive+0x258>)
 800c5a8:	f240 427b 	movw	r2, #1147	; 0x47b
 800c5ac:	4990      	ldr	r1, [pc, #576]	; (800c7f0 <tcp_receive+0x25c>)
 800c5ae:	4891      	ldr	r0, [pc, #580]	; (800c7f4 <tcp_receive+0x260>)
 800c5b0:	f007 fb56 	bl	8013c60 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	7d1b      	ldrb	r3, [r3, #20]
 800c5b8:	2b03      	cmp	r3, #3
 800c5ba:	d806      	bhi.n	800c5ca <tcp_receive+0x36>
 800c5bc:	4b8b      	ldr	r3, [pc, #556]	; (800c7ec <tcp_receive+0x258>)
 800c5be:	f240 427c 	movw	r2, #1148	; 0x47c
 800c5c2:	498d      	ldr	r1, [pc, #564]	; (800c7f8 <tcp_receive+0x264>)
 800c5c4:	488b      	ldr	r0, [pc, #556]	; (800c7f4 <tcp_receive+0x260>)
 800c5c6:	f007 fb4b 	bl	8013c60 <iprintf>

  if (flags & TCP_ACK) {
 800c5ca:	4b8c      	ldr	r3, [pc, #560]	; (800c7fc <tcp_receive+0x268>)
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	f003 0310 	and.w	r3, r3, #16
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	f000 8264 	beq.w	800caa0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c5de:	461a      	mov	r2, r3
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5e4:	4413      	add	r3, r2
 800c5e6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5ec:	4b84      	ldr	r3, [pc, #528]	; (800c800 <tcp_receive+0x26c>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	1ad3      	subs	r3, r2, r3
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	db1b      	blt.n	800c62e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5fa:	4b81      	ldr	r3, [pc, #516]	; (800c800 <tcp_receive+0x26c>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d106      	bne.n	800c610 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c606:	4b7f      	ldr	r3, [pc, #508]	; (800c804 <tcp_receive+0x270>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	1ad3      	subs	r3, r2, r3
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	db0e      	blt.n	800c62e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c614:	4b7b      	ldr	r3, [pc, #492]	; (800c804 <tcp_receive+0x270>)
 800c616:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c618:	429a      	cmp	r2, r3
 800c61a:	d125      	bne.n	800c668 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c61c:	4b7a      	ldr	r3, [pc, #488]	; (800c808 <tcp_receive+0x274>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	89db      	ldrh	r3, [r3, #14]
 800c622:	b29a      	uxth	r2, r3
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d91c      	bls.n	800c668 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c62e:	4b76      	ldr	r3, [pc, #472]	; (800c808 <tcp_receive+0x274>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	89db      	ldrh	r3, [r3, #14]
 800c634:	b29a      	uxth	r2, r3
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c648:	429a      	cmp	r2, r3
 800c64a:	d205      	bcs.n	800c658 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800c658:	4b69      	ldr	r3, [pc, #420]	; (800c800 <tcp_receive+0x26c>)
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800c660:	4b68      	ldr	r3, [pc, #416]	; (800c804 <tcp_receive+0x270>)
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c668:	4b66      	ldr	r3, [pc, #408]	; (800c804 <tcp_receive+0x270>)
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c670:	1ad3      	subs	r3, r2, r3
 800c672:	2b00      	cmp	r3, #0
 800c674:	dc58      	bgt.n	800c728 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c676:	4b65      	ldr	r3, [pc, #404]	; (800c80c <tcp_receive+0x278>)
 800c678:	881b      	ldrh	r3, [r3, #0]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d14b      	bne.n	800c716 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c682:	687a      	ldr	r2, [r7, #4]
 800c684:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800c688:	4413      	add	r3, r2
 800c68a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d142      	bne.n	800c716 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c696:	2b00      	cmp	r3, #0
 800c698:	db3d      	blt.n	800c716 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c69e:	4b59      	ldr	r3, [pc, #356]	; (800c804 <tcp_receive+0x270>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d137      	bne.n	800c716 <tcp_receive+0x182>
              found_dupack = 1;
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c6b0:	2bff      	cmp	r3, #255	; 0xff
 800c6b2:	d007      	beq.n	800c6c4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	b2da      	uxtb	r2, r3
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c6ca:	2b03      	cmp	r3, #3
 800c6cc:	d91b      	bls.n	800c706 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6d8:	4413      	add	r3, r2
 800c6da:	b29a      	uxth	r2, r3
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d30a      	bcc.n	800c6fc <tcp_receive+0x168>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6f0:	4413      	add	r3, r2
 800c6f2:	b29a      	uxth	r2, r3
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c6fa:	e004      	b.n	800c706 <tcp_receive+0x172>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c702:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c70c:	2b02      	cmp	r3, #2
 800c70e:	d902      	bls.n	800c716 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f001 feeb 	bl	800e4ec <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c718:	2b00      	cmp	r3, #0
 800c71a:	f040 8161 	bne.w	800c9e0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2200      	movs	r2, #0
 800c722:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c726:	e15b      	b.n	800c9e0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c728:	4b36      	ldr	r3, [pc, #216]	; (800c804 <tcp_receive+0x270>)
 800c72a:	681a      	ldr	r2, [r3, #0]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c730:	1ad3      	subs	r3, r2, r3
 800c732:	3b01      	subs	r3, #1
 800c734:	2b00      	cmp	r3, #0
 800c736:	f2c0 814e 	blt.w	800c9d6 <tcp_receive+0x442>
 800c73a:	4b32      	ldr	r3, [pc, #200]	; (800c804 <tcp_receive+0x270>)
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c742:	1ad3      	subs	r3, r2, r3
 800c744:	2b00      	cmp	r3, #0
 800c746:	f300 8146 	bgt.w	800c9d6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	8b5b      	ldrh	r3, [r3, #26]
 800c74e:	f003 0304 	and.w	r3, r3, #4
 800c752:	2b00      	cmp	r3, #0
 800c754:	d010      	beq.n	800c778 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	8b5b      	ldrh	r3, [r3, #26]
 800c75a:	f023 0304 	bic.w	r3, r3, #4
 800c75e:	b29a      	uxth	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2200      	movs	r2, #0
 800c774:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2200      	movs	r2, #0
 800c77c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c786:	10db      	asrs	r3, r3, #3
 800c788:	b21b      	sxth	r3, r3
 800c78a:	b29a      	uxth	r2, r3
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c792:	b29b      	uxth	r3, r3
 800c794:	4413      	add	r3, r2
 800c796:	b29b      	uxth	r3, r3
 800c798:	b21a      	sxth	r2, r3
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c7a0:	4b18      	ldr	r3, [pc, #96]	; (800c804 <tcp_receive+0x270>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	b29a      	uxth	r2, r3
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	1ad3      	subs	r3, r2, r3
 800c7ae:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800c7b8:	4b12      	ldr	r3, [pc, #72]	; (800c804 <tcp_receive+0x270>)
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	7d1b      	ldrb	r3, [r3, #20]
 800c7c4:	2b03      	cmp	r3, #3
 800c7c6:	f240 8097 	bls.w	800c8f8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d245      	bcs.n	800c866 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	8b5b      	ldrh	r3, [r3, #26]
 800c7de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d014      	beq.n	800c810 <tcp_receive+0x27c>
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	e013      	b.n	800c812 <tcp_receive+0x27e>
 800c7ea:	bf00      	nop
 800c7ec:	080160d0 	.word	0x080160d0
 800c7f0:	08016400 	.word	0x08016400
 800c7f4:	0801611c 	.word	0x0801611c
 800c7f8:	0801641c 	.word	0x0801641c
 800c7fc:	2000af04 	.word	0x2000af04
 800c800:	2000aef8 	.word	0x2000aef8
 800c804:	2000aefc 	.word	0x2000aefc
 800c808:	2000aee8 	.word	0x2000aee8
 800c80c:	2000af02 	.word	0x2000af02
 800c810:	2302      	movs	r3, #2
 800c812:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c816:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c81a:	b29a      	uxth	r2, r3
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c820:	fb12 f303 	smulbb	r3, r2, r3
 800c824:	b29b      	uxth	r3, r3
 800c826:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c828:	4293      	cmp	r3, r2
 800c82a:	bf28      	it	cs
 800c82c:	4613      	movcs	r3, r2
 800c82e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c836:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c838:	4413      	add	r3, r2
 800c83a:	b29a      	uxth	r2, r3
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c842:	429a      	cmp	r2, r3
 800c844:	d309      	bcc.n	800c85a <tcp_receive+0x2c6>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c84c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c84e:	4413      	add	r3, r2
 800c850:	b29a      	uxth	r2, r3
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c858:	e04e      	b.n	800c8f8 <tcp_receive+0x364>
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c860:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c864:	e048      	b.n	800c8f8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c86c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c86e:	4413      	add	r3, r2
 800c870:	b29a      	uxth	r2, r3
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c878:	429a      	cmp	r2, r3
 800c87a:	d309      	bcc.n	800c890 <tcp_receive+0x2fc>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c882:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c884:	4413      	add	r3, r2
 800c886:	b29a      	uxth	r2, r3
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c88e:	e004      	b.n	800c89a <tcp_receive+0x306>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c896:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d326      	bcc.n	800c8f8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c8b6:	1ad3      	subs	r3, r2, r3
 800c8b8:	b29a      	uxth	r2, r3
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8ca:	4413      	add	r3, r2
 800c8cc:	b29a      	uxth	r2, r3
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d30a      	bcc.n	800c8ee <tcp_receive+0x35a>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8e2:	4413      	add	r3, r2
 800c8e4:	b29a      	uxth	r2, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c8ec:	e004      	b.n	800c8f8 <tcp_receive+0x364>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c8f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c900:	4a98      	ldr	r2, [pc, #608]	; (800cb64 <tcp_receive+0x5d0>)
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f7ff fdca 	bl	800c49c <tcp_free_acked_segments>
 800c908:	4602      	mov	r2, r0
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c916:	4a94      	ldr	r2, [pc, #592]	; (800cb68 <tcp_receive+0x5d4>)
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f7ff fdbf 	bl	800c49c <tcp_free_acked_segments>
 800c91e:	4602      	mov	r2, r0
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d104      	bne.n	800c936 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c932:	861a      	strh	r2, [r3, #48]	; 0x30
 800c934:	e002      	b.n	800c93c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2200      	movs	r2, #0
 800c93a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2200      	movs	r2, #0
 800c940:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c946:	2b00      	cmp	r3, #0
 800c948:	d103      	bne.n	800c952 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2200      	movs	r2, #0
 800c94e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c958:	4b84      	ldr	r3, [pc, #528]	; (800cb6c <tcp_receive+0x5d8>)
 800c95a:	881b      	ldrh	r3, [r3, #0]
 800c95c:	4413      	add	r3, r2
 800c95e:	b29a      	uxth	r2, r3
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	8b5b      	ldrh	r3, [r3, #26]
 800c96a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d035      	beq.n	800c9de <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c976:	2b00      	cmp	r3, #0
 800c978:	d118      	bne.n	800c9ac <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d00c      	beq.n	800c99c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c98a:	68db      	ldr	r3, [r3, #12]
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	4618      	mov	r0, r3
 800c990:	f7fb f9bb 	bl	8007d0a <lwip_htonl>
 800c994:	4603      	mov	r3, r0
 800c996:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800c998:	2b00      	cmp	r3, #0
 800c99a:	dc20      	bgt.n	800c9de <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	8b5b      	ldrh	r3, [r3, #26]
 800c9a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c9a4:	b29a      	uxth	r2, r3
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c9aa:	e018      	b.n	800c9de <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9b4:	68db      	ldr	r3, [r3, #12]
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f7fb f9a6 	bl	8007d0a <lwip_htonl>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	1ae3      	subs	r3, r4, r3
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	dc0b      	bgt.n	800c9de <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	8b5b      	ldrh	r3, [r3, #26]
 800c9ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c9d4:	e003      	b.n	800c9de <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f001 ff76 	bl	800e8c8 <tcp_send_empty_ack>
 800c9dc:	e000      	b.n	800c9e0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c9de:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d05b      	beq.n	800caa0 <tcp_receive+0x50c>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9ec:	4b60      	ldr	r3, [pc, #384]	; (800cb70 <tcp_receive+0x5dc>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	1ad3      	subs	r3, r2, r3
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	da54      	bge.n	800caa0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c9f6:	4b5f      	ldr	r3, [pc, #380]	; (800cb74 <tcp_receive+0x5e0>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	b29a      	uxth	r2, r3
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca00:	b29b      	uxth	r3, r3
 800ca02:	1ad3      	subs	r3, r2, r3
 800ca04:	b29b      	uxth	r3, r3
 800ca06:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800ca0a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ca14:	10db      	asrs	r3, r3, #3
 800ca16:	b21b      	sxth	r3, r3
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	1ad3      	subs	r3, r2, r3
 800ca1c:	b29b      	uxth	r3, r3
 800ca1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ca28:	b29a      	uxth	r2, r3
 800ca2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ca2e:	4413      	add	r3, r2
 800ca30:	b29b      	uxth	r3, r3
 800ca32:	b21a      	sxth	r2, r3
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ca38:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	da05      	bge.n	800ca4c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800ca40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ca44:	425b      	negs	r3, r3
 800ca46:	b29b      	uxth	r3, r3
 800ca48:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ca4c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ca56:	109b      	asrs	r3, r3, #2
 800ca58:	b21b      	sxth	r3, r3
 800ca5a:	b29b      	uxth	r3, r3
 800ca5c:	1ad3      	subs	r3, r2, r3
 800ca5e:	b29b      	uxth	r3, r3
 800ca60:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ca6a:	b29a      	uxth	r2, r3
 800ca6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ca70:	4413      	add	r3, r2
 800ca72:	b29b      	uxth	r3, r3
 800ca74:	b21a      	sxth	r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ca80:	10db      	asrs	r3, r3, #3
 800ca82:	b21b      	sxth	r3, r3
 800ca84:	b29a      	uxth	r2, r3
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ca8c:	b29b      	uxth	r3, r3
 800ca8e:	4413      	add	r3, r2
 800ca90:	b29b      	uxth	r3, r3
 800ca92:	b21a      	sxth	r2, r3
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800caa0:	4b35      	ldr	r3, [pc, #212]	; (800cb78 <tcp_receive+0x5e4>)
 800caa2:	881b      	ldrh	r3, [r3, #0]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	f000 84e2 	beq.w	800d46e <tcp_receive+0xeda>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	7d1b      	ldrb	r3, [r3, #20]
 800caae:	2b06      	cmp	r3, #6
 800cab0:	f200 84dd 	bhi.w	800d46e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cab8:	4b30      	ldr	r3, [pc, #192]	; (800cb7c <tcp_receive+0x5e8>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	1ad3      	subs	r3, r2, r3
 800cabe:	3b01      	subs	r3, #1
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	f2c0 808f 	blt.w	800cbe4 <tcp_receive+0x650>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800caca:	4b2b      	ldr	r3, [pc, #172]	; (800cb78 <tcp_receive+0x5e4>)
 800cacc:	881b      	ldrh	r3, [r3, #0]
 800cace:	4619      	mov	r1, r3
 800cad0:	4b2a      	ldr	r3, [pc, #168]	; (800cb7c <tcp_receive+0x5e8>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	440b      	add	r3, r1
 800cad6:	1ad3      	subs	r3, r2, r3
 800cad8:	3301      	adds	r3, #1
 800cada:	2b00      	cmp	r3, #0
 800cadc:	f300 8082 	bgt.w	800cbe4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800cae0:	4b27      	ldr	r3, [pc, #156]	; (800cb80 <tcp_receive+0x5ec>)
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800caea:	4b24      	ldr	r3, [pc, #144]	; (800cb7c <tcp_receive+0x5e8>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	1ad3      	subs	r3, r2, r3
 800caf0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800caf2:	4b23      	ldr	r3, [pc, #140]	; (800cb80 <tcp_receive+0x5ec>)
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d106      	bne.n	800cb08 <tcp_receive+0x574>
 800cafa:	4b22      	ldr	r3, [pc, #136]	; (800cb84 <tcp_receive+0x5f0>)
 800cafc:	f240 5294 	movw	r2, #1428	; 0x594
 800cb00:	4921      	ldr	r1, [pc, #132]	; (800cb88 <tcp_receive+0x5f4>)
 800cb02:	4822      	ldr	r0, [pc, #136]	; (800cb8c <tcp_receive+0x5f8>)
 800cb04:	f007 f8ac 	bl	8013c60 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800cb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d906      	bls.n	800cb20 <tcp_receive+0x58c>
 800cb12:	4b1c      	ldr	r3, [pc, #112]	; (800cb84 <tcp_receive+0x5f0>)
 800cb14:	f240 5295 	movw	r2, #1429	; 0x595
 800cb18:	491d      	ldr	r1, [pc, #116]	; (800cb90 <tcp_receive+0x5fc>)
 800cb1a:	481c      	ldr	r0, [pc, #112]	; (800cb8c <tcp_receive+0x5f8>)
 800cb1c:	f007 f8a0 	bl	8013c60 <iprintf>
      off = (u16_t)off32;
 800cb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb22:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800cb26:	4b16      	ldr	r3, [pc, #88]	; (800cb80 <tcp_receive+0x5ec>)
 800cb28:	685b      	ldr	r3, [r3, #4]
 800cb2a:	891b      	ldrh	r3, [r3, #8]
 800cb2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d906      	bls.n	800cb42 <tcp_receive+0x5ae>
 800cb34:	4b13      	ldr	r3, [pc, #76]	; (800cb84 <tcp_receive+0x5f0>)
 800cb36:	f240 5297 	movw	r2, #1431	; 0x597
 800cb3a:	4916      	ldr	r1, [pc, #88]	; (800cb94 <tcp_receive+0x600>)
 800cb3c:	4813      	ldr	r0, [pc, #76]	; (800cb8c <tcp_receive+0x5f8>)
 800cb3e:	f007 f88f 	bl	8013c60 <iprintf>
      inseg.len -= off;
 800cb42:	4b0f      	ldr	r3, [pc, #60]	; (800cb80 <tcp_receive+0x5ec>)
 800cb44:	891a      	ldrh	r2, [r3, #8]
 800cb46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cb4a:	1ad3      	subs	r3, r2, r3
 800cb4c:	b29a      	uxth	r2, r3
 800cb4e:	4b0c      	ldr	r3, [pc, #48]	; (800cb80 <tcp_receive+0x5ec>)
 800cb50:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800cb52:	4b0b      	ldr	r3, [pc, #44]	; (800cb80 <tcp_receive+0x5ec>)
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	891a      	ldrh	r2, [r3, #8]
 800cb58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cb5c:	1ad3      	subs	r3, r2, r3
 800cb5e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800cb60:	e02a      	b.n	800cbb8 <tcp_receive+0x624>
 800cb62:	bf00      	nop
 800cb64:	08016438 	.word	0x08016438
 800cb68:	08016440 	.word	0x08016440
 800cb6c:	2000af00 	.word	0x2000af00
 800cb70:	2000aefc 	.word	0x2000aefc
 800cb74:	2000aec0 	.word	0x2000aec0
 800cb78:	2000af02 	.word	0x2000af02
 800cb7c:	2000aef8 	.word	0x2000aef8
 800cb80:	2000aed8 	.word	0x2000aed8
 800cb84:	080160d0 	.word	0x080160d0
 800cb88:	08016448 	.word	0x08016448
 800cb8c:	0801611c 	.word	0x0801611c
 800cb90:	08016458 	.word	0x08016458
 800cb94:	08016468 	.word	0x08016468
        off -= p->len;
 800cb98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb9a:	895b      	ldrh	r3, [r3, #10]
 800cb9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cba0:	1ad3      	subs	r3, r2, r3
 800cba2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800cba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cba8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cbaa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800cbac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbae:	2200      	movs	r2, #0
 800cbb0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800cbb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800cbb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbba:	895b      	ldrh	r3, [r3, #10]
 800cbbc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d8e9      	bhi.n	800cb98 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800cbc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cbc8:	4619      	mov	r1, r3
 800cbca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cbcc:	f7fc fb6c 	bl	80092a8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd4:	4a91      	ldr	r2, [pc, #580]	; (800ce1c <tcp_receive+0x888>)
 800cbd6:	6013      	str	r3, [r2, #0]
 800cbd8:	4b91      	ldr	r3, [pc, #580]	; (800ce20 <tcp_receive+0x88c>)
 800cbda:	68db      	ldr	r3, [r3, #12]
 800cbdc:	4a8f      	ldr	r2, [pc, #572]	; (800ce1c <tcp_receive+0x888>)
 800cbde:	6812      	ldr	r2, [r2, #0]
 800cbe0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cbe2:	e00d      	b.n	800cc00 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800cbe4:	4b8d      	ldr	r3, [pc, #564]	; (800ce1c <tcp_receive+0x888>)
 800cbe6:	681a      	ldr	r2, [r3, #0]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbec:	1ad3      	subs	r3, r2, r3
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	da06      	bge.n	800cc00 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	8b5b      	ldrh	r3, [r3, #26]
 800cbf6:	f043 0302 	orr.w	r3, r3, #2
 800cbfa:	b29a      	uxth	r2, r3
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cc00:	4b86      	ldr	r3, [pc, #536]	; (800ce1c <tcp_receive+0x888>)
 800cc02:	681a      	ldr	r2, [r3, #0]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc08:	1ad3      	subs	r3, r2, r3
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	f2c0 842a 	blt.w	800d464 <tcp_receive+0xed0>
 800cc10:	4b82      	ldr	r3, [pc, #520]	; (800ce1c <tcp_receive+0x888>)
 800cc12:	681a      	ldr	r2, [r3, #0]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc18:	6879      	ldr	r1, [r7, #4]
 800cc1a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cc1c:	440b      	add	r3, r1
 800cc1e:	1ad3      	subs	r3, r2, r3
 800cc20:	3301      	adds	r3, #1
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	f300 841e 	bgt.w	800d464 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc2c:	4b7b      	ldr	r3, [pc, #492]	; (800ce1c <tcp_receive+0x888>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	f040 829a 	bne.w	800d16a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800cc36:	4b7a      	ldr	r3, [pc, #488]	; (800ce20 <tcp_receive+0x88c>)
 800cc38:	891c      	ldrh	r4, [r3, #8]
 800cc3a:	4b79      	ldr	r3, [pc, #484]	; (800ce20 <tcp_receive+0x88c>)
 800cc3c:	68db      	ldr	r3, [r3, #12]
 800cc3e:	899b      	ldrh	r3, [r3, #12]
 800cc40:	b29b      	uxth	r3, r3
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7fb f84c 	bl	8007ce0 <lwip_htons>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	f003 0303 	and.w	r3, r3, #3
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d001      	beq.n	800cc58 <tcp_receive+0x6c4>
 800cc54:	2301      	movs	r3, #1
 800cc56:	e000      	b.n	800cc5a <tcp_receive+0x6c6>
 800cc58:	2300      	movs	r3, #0
 800cc5a:	4423      	add	r3, r4
 800cc5c:	b29a      	uxth	r2, r3
 800cc5e:	4b71      	ldr	r3, [pc, #452]	; (800ce24 <tcp_receive+0x890>)
 800cc60:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cc66:	4b6f      	ldr	r3, [pc, #444]	; (800ce24 <tcp_receive+0x890>)
 800cc68:	881b      	ldrh	r3, [r3, #0]
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d275      	bcs.n	800cd5a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cc6e:	4b6c      	ldr	r3, [pc, #432]	; (800ce20 <tcp_receive+0x88c>)
 800cc70:	68db      	ldr	r3, [r3, #12]
 800cc72:	899b      	ldrh	r3, [r3, #12]
 800cc74:	b29b      	uxth	r3, r3
 800cc76:	4618      	mov	r0, r3
 800cc78:	f7fb f832 	bl	8007ce0 <lwip_htons>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	f003 0301 	and.w	r3, r3, #1
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d01f      	beq.n	800ccc8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800cc88:	4b65      	ldr	r3, [pc, #404]	; (800ce20 <tcp_receive+0x88c>)
 800cc8a:	68db      	ldr	r3, [r3, #12]
 800cc8c:	899b      	ldrh	r3, [r3, #12]
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	b21b      	sxth	r3, r3
 800cc92:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cc96:	b21c      	sxth	r4, r3
 800cc98:	4b61      	ldr	r3, [pc, #388]	; (800ce20 <tcp_receive+0x88c>)
 800cc9a:	68db      	ldr	r3, [r3, #12]
 800cc9c:	899b      	ldrh	r3, [r3, #12]
 800cc9e:	b29b      	uxth	r3, r3
 800cca0:	4618      	mov	r0, r3
 800cca2:	f7fb f81d 	bl	8007ce0 <lwip_htons>
 800cca6:	4603      	mov	r3, r0
 800cca8:	b2db      	uxtb	r3, r3
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ccb0:	b29b      	uxth	r3, r3
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7fb f814 	bl	8007ce0 <lwip_htons>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	b21b      	sxth	r3, r3
 800ccbc:	4323      	orrs	r3, r4
 800ccbe:	b21a      	sxth	r2, r3
 800ccc0:	4b57      	ldr	r3, [pc, #348]	; (800ce20 <tcp_receive+0x88c>)
 800ccc2:	68db      	ldr	r3, [r3, #12]
 800ccc4:	b292      	uxth	r2, r2
 800ccc6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cccc:	4b54      	ldr	r3, [pc, #336]	; (800ce20 <tcp_receive+0x88c>)
 800ccce:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ccd0:	4b53      	ldr	r3, [pc, #332]	; (800ce20 <tcp_receive+0x88c>)
 800ccd2:	68db      	ldr	r3, [r3, #12]
 800ccd4:	899b      	ldrh	r3, [r3, #12]
 800ccd6:	b29b      	uxth	r3, r3
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f7fb f801 	bl	8007ce0 <lwip_htons>
 800ccde:	4603      	mov	r3, r0
 800cce0:	b2db      	uxtb	r3, r3
 800cce2:	f003 0302 	and.w	r3, r3, #2
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d005      	beq.n	800ccf6 <tcp_receive+0x762>
            inseg.len -= 1;
 800ccea:	4b4d      	ldr	r3, [pc, #308]	; (800ce20 <tcp_receive+0x88c>)
 800ccec:	891b      	ldrh	r3, [r3, #8]
 800ccee:	3b01      	subs	r3, #1
 800ccf0:	b29a      	uxth	r2, r3
 800ccf2:	4b4b      	ldr	r3, [pc, #300]	; (800ce20 <tcp_receive+0x88c>)
 800ccf4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ccf6:	4b4a      	ldr	r3, [pc, #296]	; (800ce20 <tcp_receive+0x88c>)
 800ccf8:	685b      	ldr	r3, [r3, #4]
 800ccfa:	4a49      	ldr	r2, [pc, #292]	; (800ce20 <tcp_receive+0x88c>)
 800ccfc:	8912      	ldrh	r2, [r2, #8]
 800ccfe:	4611      	mov	r1, r2
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7fc f9d1 	bl	80090a8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800cd06:	4b46      	ldr	r3, [pc, #280]	; (800ce20 <tcp_receive+0x88c>)
 800cd08:	891c      	ldrh	r4, [r3, #8]
 800cd0a:	4b45      	ldr	r3, [pc, #276]	; (800ce20 <tcp_receive+0x88c>)
 800cd0c:	68db      	ldr	r3, [r3, #12]
 800cd0e:	899b      	ldrh	r3, [r3, #12]
 800cd10:	b29b      	uxth	r3, r3
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7fa ffe4 	bl	8007ce0 <lwip_htons>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	f003 0303 	and.w	r3, r3, #3
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d001      	beq.n	800cd28 <tcp_receive+0x794>
 800cd24:	2301      	movs	r3, #1
 800cd26:	e000      	b.n	800cd2a <tcp_receive+0x796>
 800cd28:	2300      	movs	r3, #0
 800cd2a:	4423      	add	r3, r4
 800cd2c:	b29a      	uxth	r2, r3
 800cd2e:	4b3d      	ldr	r3, [pc, #244]	; (800ce24 <tcp_receive+0x890>)
 800cd30:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cd32:	4b3c      	ldr	r3, [pc, #240]	; (800ce24 <tcp_receive+0x890>)
 800cd34:	881b      	ldrh	r3, [r3, #0]
 800cd36:	461a      	mov	r2, r3
 800cd38:	4b38      	ldr	r3, [pc, #224]	; (800ce1c <tcp_receive+0x888>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	441a      	add	r2, r3
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd42:	6879      	ldr	r1, [r7, #4]
 800cd44:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cd46:	440b      	add	r3, r1
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d006      	beq.n	800cd5a <tcp_receive+0x7c6>
 800cd4c:	4b36      	ldr	r3, [pc, #216]	; (800ce28 <tcp_receive+0x894>)
 800cd4e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800cd52:	4936      	ldr	r1, [pc, #216]	; (800ce2c <tcp_receive+0x898>)
 800cd54:	4836      	ldr	r0, [pc, #216]	; (800ce30 <tcp_receive+0x89c>)
 800cd56:	f006 ff83 	bl	8013c60 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	f000 80e7 	beq.w	800cf32 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cd64:	4b2e      	ldr	r3, [pc, #184]	; (800ce20 <tcp_receive+0x88c>)
 800cd66:	68db      	ldr	r3, [r3, #12]
 800cd68:	899b      	ldrh	r3, [r3, #12]
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f7fa ffb7 	bl	8007ce0 <lwip_htons>
 800cd72:	4603      	mov	r3, r0
 800cd74:	b2db      	uxtb	r3, r3
 800cd76:	f003 0301 	and.w	r3, r3, #1
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d010      	beq.n	800cda0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800cd7e:	e00a      	b.n	800cd96 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd84:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd8a:	681a      	ldr	r2, [r3, #0]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800cd90:	68f8      	ldr	r0, [r7, #12]
 800cd92:	f7fd fd92 	bl	800a8ba <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d1f0      	bne.n	800cd80 <tcp_receive+0x7ec>
 800cd9e:	e0c8      	b.n	800cf32 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cda4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800cda6:	e052      	b.n	800ce4e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cda8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdaa:	68db      	ldr	r3, [r3, #12]
 800cdac:	899b      	ldrh	r3, [r3, #12]
 800cdae:	b29b      	uxth	r3, r3
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f7fa ff95 	bl	8007ce0 <lwip_htons>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	f003 0301 	and.w	r3, r3, #1
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d03d      	beq.n	800ce3e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800cdc2:	4b17      	ldr	r3, [pc, #92]	; (800ce20 <tcp_receive+0x88c>)
 800cdc4:	68db      	ldr	r3, [r3, #12]
 800cdc6:	899b      	ldrh	r3, [r3, #12]
 800cdc8:	b29b      	uxth	r3, r3
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7fa ff88 	bl	8007ce0 <lwip_htons>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	b2db      	uxtb	r3, r3
 800cdd4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d130      	bne.n	800ce3e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800cddc:	4b10      	ldr	r3, [pc, #64]	; (800ce20 <tcp_receive+0x88c>)
 800cdde:	68db      	ldr	r3, [r3, #12]
 800cde0:	899b      	ldrh	r3, [r3, #12]
 800cde2:	b29c      	uxth	r4, r3
 800cde4:	2001      	movs	r0, #1
 800cde6:	f7fa ff7b 	bl	8007ce0 <lwip_htons>
 800cdea:	4603      	mov	r3, r0
 800cdec:	461a      	mov	r2, r3
 800cdee:	4b0c      	ldr	r3, [pc, #48]	; (800ce20 <tcp_receive+0x88c>)
 800cdf0:	68db      	ldr	r3, [r3, #12]
 800cdf2:	4322      	orrs	r2, r4
 800cdf4:	b292      	uxth	r2, r2
 800cdf6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800cdf8:	4b09      	ldr	r3, [pc, #36]	; (800ce20 <tcp_receive+0x88c>)
 800cdfa:	891c      	ldrh	r4, [r3, #8]
 800cdfc:	4b08      	ldr	r3, [pc, #32]	; (800ce20 <tcp_receive+0x88c>)
 800cdfe:	68db      	ldr	r3, [r3, #12]
 800ce00:	899b      	ldrh	r3, [r3, #12]
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7fa ff6b 	bl	8007ce0 <lwip_htons>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	b2db      	uxtb	r3, r3
 800ce0e:	f003 0303 	and.w	r3, r3, #3
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d00e      	beq.n	800ce34 <tcp_receive+0x8a0>
 800ce16:	2301      	movs	r3, #1
 800ce18:	e00d      	b.n	800ce36 <tcp_receive+0x8a2>
 800ce1a:	bf00      	nop
 800ce1c:	2000aef8 	.word	0x2000aef8
 800ce20:	2000aed8 	.word	0x2000aed8
 800ce24:	2000af02 	.word	0x2000af02
 800ce28:	080160d0 	.word	0x080160d0
 800ce2c:	08016478 	.word	0x08016478
 800ce30:	0801611c 	.word	0x0801611c
 800ce34:	2300      	movs	r3, #0
 800ce36:	4423      	add	r3, r4
 800ce38:	b29a      	uxth	r2, r3
 800ce3a:	4b98      	ldr	r3, [pc, #608]	; (800d09c <tcp_receive+0xb08>)
 800ce3c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ce3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce40:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ce42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800ce48:	6938      	ldr	r0, [r7, #16]
 800ce4a:	f7fd fd36 	bl	800a8ba <tcp_seg_free>
            while (next &&
 800ce4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d00e      	beq.n	800ce72 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ce54:	4b91      	ldr	r3, [pc, #580]	; (800d09c <tcp_receive+0xb08>)
 800ce56:	881b      	ldrh	r3, [r3, #0]
 800ce58:	461a      	mov	r2, r3
 800ce5a:	4b91      	ldr	r3, [pc, #580]	; (800d0a0 <tcp_receive+0xb0c>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	441a      	add	r2, r3
 800ce60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce62:	68db      	ldr	r3, [r3, #12]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ce68:	8909      	ldrh	r1, [r1, #8]
 800ce6a:	440b      	add	r3, r1
 800ce6c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	da9a      	bge.n	800cda8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ce72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d059      	beq.n	800cf2c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800ce78:	4b88      	ldr	r3, [pc, #544]	; (800d09c <tcp_receive+0xb08>)
 800ce7a:	881b      	ldrh	r3, [r3, #0]
 800ce7c:	461a      	mov	r2, r3
 800ce7e:	4b88      	ldr	r3, [pc, #544]	; (800d0a0 <tcp_receive+0xb0c>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	441a      	add	r2, r3
 800ce84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce86:	68db      	ldr	r3, [r3, #12]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	dd4d      	ble.n	800cf2c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ce90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	685b      	ldr	r3, [r3, #4]
 800ce96:	b29a      	uxth	r2, r3
 800ce98:	4b81      	ldr	r3, [pc, #516]	; (800d0a0 <tcp_receive+0xb0c>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	b29b      	uxth	r3, r3
 800ce9e:	1ad3      	subs	r3, r2, r3
 800cea0:	b29a      	uxth	r2, r3
 800cea2:	4b80      	ldr	r3, [pc, #512]	; (800d0a4 <tcp_receive+0xb10>)
 800cea4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cea6:	4b7f      	ldr	r3, [pc, #508]	; (800d0a4 <tcp_receive+0xb10>)
 800cea8:	68db      	ldr	r3, [r3, #12]
 800ceaa:	899b      	ldrh	r3, [r3, #12]
 800ceac:	b29b      	uxth	r3, r3
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7fa ff16 	bl	8007ce0 <lwip_htons>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	b2db      	uxtb	r3, r3
 800ceb8:	f003 0302 	and.w	r3, r3, #2
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d005      	beq.n	800cecc <tcp_receive+0x938>
                inseg.len -= 1;
 800cec0:	4b78      	ldr	r3, [pc, #480]	; (800d0a4 <tcp_receive+0xb10>)
 800cec2:	891b      	ldrh	r3, [r3, #8]
 800cec4:	3b01      	subs	r3, #1
 800cec6:	b29a      	uxth	r2, r3
 800cec8:	4b76      	ldr	r3, [pc, #472]	; (800d0a4 <tcp_receive+0xb10>)
 800ceca:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800cecc:	4b75      	ldr	r3, [pc, #468]	; (800d0a4 <tcp_receive+0xb10>)
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	4a74      	ldr	r2, [pc, #464]	; (800d0a4 <tcp_receive+0xb10>)
 800ced2:	8912      	ldrh	r2, [r2, #8]
 800ced4:	4611      	mov	r1, r2
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7fc f8e6 	bl	80090a8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800cedc:	4b71      	ldr	r3, [pc, #452]	; (800d0a4 <tcp_receive+0xb10>)
 800cede:	891c      	ldrh	r4, [r3, #8]
 800cee0:	4b70      	ldr	r3, [pc, #448]	; (800d0a4 <tcp_receive+0xb10>)
 800cee2:	68db      	ldr	r3, [r3, #12]
 800cee4:	899b      	ldrh	r3, [r3, #12]
 800cee6:	b29b      	uxth	r3, r3
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7fa fef9 	bl	8007ce0 <lwip_htons>
 800ceee:	4603      	mov	r3, r0
 800cef0:	b2db      	uxtb	r3, r3
 800cef2:	f003 0303 	and.w	r3, r3, #3
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d001      	beq.n	800cefe <tcp_receive+0x96a>
 800cefa:	2301      	movs	r3, #1
 800cefc:	e000      	b.n	800cf00 <tcp_receive+0x96c>
 800cefe:	2300      	movs	r3, #0
 800cf00:	4423      	add	r3, r4
 800cf02:	b29a      	uxth	r2, r3
 800cf04:	4b65      	ldr	r3, [pc, #404]	; (800d09c <tcp_receive+0xb08>)
 800cf06:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800cf08:	4b64      	ldr	r3, [pc, #400]	; (800d09c <tcp_receive+0xb08>)
 800cf0a:	881b      	ldrh	r3, [r3, #0]
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	4b64      	ldr	r3, [pc, #400]	; (800d0a0 <tcp_receive+0xb0c>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	441a      	add	r2, r3
 800cf14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf16:	68db      	ldr	r3, [r3, #12]
 800cf18:	685b      	ldr	r3, [r3, #4]
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d006      	beq.n	800cf2c <tcp_receive+0x998>
 800cf1e:	4b62      	ldr	r3, [pc, #392]	; (800d0a8 <tcp_receive+0xb14>)
 800cf20:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800cf24:	4961      	ldr	r1, [pc, #388]	; (800d0ac <tcp_receive+0xb18>)
 800cf26:	4862      	ldr	r0, [pc, #392]	; (800d0b0 <tcp_receive+0xb1c>)
 800cf28:	f006 fe9a 	bl	8013c60 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf30:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800cf32:	4b5a      	ldr	r3, [pc, #360]	; (800d09c <tcp_receive+0xb08>)
 800cf34:	881b      	ldrh	r3, [r3, #0]
 800cf36:	461a      	mov	r2, r3
 800cf38:	4b59      	ldr	r3, [pc, #356]	; (800d0a0 <tcp_receive+0xb0c>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	441a      	add	r2, r3
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cf46:	4b55      	ldr	r3, [pc, #340]	; (800d09c <tcp_receive+0xb08>)
 800cf48:	881b      	ldrh	r3, [r3, #0]
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d206      	bcs.n	800cf5c <tcp_receive+0x9c8>
 800cf4e:	4b56      	ldr	r3, [pc, #344]	; (800d0a8 <tcp_receive+0xb14>)
 800cf50:	f240 6207 	movw	r2, #1543	; 0x607
 800cf54:	4957      	ldr	r1, [pc, #348]	; (800d0b4 <tcp_receive+0xb20>)
 800cf56:	4856      	ldr	r0, [pc, #344]	; (800d0b0 <tcp_receive+0xb1c>)
 800cf58:	f006 fe82 	bl	8013c60 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cf60:	4b4e      	ldr	r3, [pc, #312]	; (800d09c <tcp_receive+0xb08>)
 800cf62:	881b      	ldrh	r3, [r3, #0]
 800cf64:	1ad3      	subs	r3, r2, r3
 800cf66:	b29a      	uxth	r2, r3
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f7fc ffc5 	bl	8009efc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800cf72:	4b4c      	ldr	r3, [pc, #304]	; (800d0a4 <tcp_receive+0xb10>)
 800cf74:	685b      	ldr	r3, [r3, #4]
 800cf76:	891b      	ldrh	r3, [r3, #8]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d006      	beq.n	800cf8a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800cf7c:	4b49      	ldr	r3, [pc, #292]	; (800d0a4 <tcp_receive+0xb10>)
 800cf7e:	685b      	ldr	r3, [r3, #4]
 800cf80:	4a4d      	ldr	r2, [pc, #308]	; (800d0b8 <tcp_receive+0xb24>)
 800cf82:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800cf84:	4b47      	ldr	r3, [pc, #284]	; (800d0a4 <tcp_receive+0xb10>)
 800cf86:	2200      	movs	r2, #0
 800cf88:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cf8a:	4b46      	ldr	r3, [pc, #280]	; (800d0a4 <tcp_receive+0xb10>)
 800cf8c:	68db      	ldr	r3, [r3, #12]
 800cf8e:	899b      	ldrh	r3, [r3, #12]
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7fa fea4 	bl	8007ce0 <lwip_htons>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	b2db      	uxtb	r3, r3
 800cf9c:	f003 0301 	and.w	r3, r3, #1
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	f000 80b8 	beq.w	800d116 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800cfa6:	4b45      	ldr	r3, [pc, #276]	; (800d0bc <tcp_receive+0xb28>)
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	f043 0320 	orr.w	r3, r3, #32
 800cfae:	b2da      	uxtb	r2, r3
 800cfb0:	4b42      	ldr	r3, [pc, #264]	; (800d0bc <tcp_receive+0xb28>)
 800cfb2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800cfb4:	e0af      	b.n	800d116 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfba:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfc0:	68db      	ldr	r3, [r3, #12]
 800cfc2:	685b      	ldr	r3, [r3, #4]
 800cfc4:	4a36      	ldr	r2, [pc, #216]	; (800d0a0 <tcp_receive+0xb0c>)
 800cfc6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	891b      	ldrh	r3, [r3, #8]
 800cfcc:	461c      	mov	r4, r3
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	68db      	ldr	r3, [r3, #12]
 800cfd2:	899b      	ldrh	r3, [r3, #12]
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7fa fe82 	bl	8007ce0 <lwip_htons>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	f003 0303 	and.w	r3, r3, #3
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d001      	beq.n	800cfec <tcp_receive+0xa58>
 800cfe8:	2301      	movs	r3, #1
 800cfea:	e000      	b.n	800cfee <tcp_receive+0xa5a>
 800cfec:	2300      	movs	r3, #0
 800cfee:	191a      	adds	r2, r3, r4
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cff4:	441a      	add	r2, r3
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cffe:	461c      	mov	r4, r3
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	891b      	ldrh	r3, [r3, #8]
 800d004:	461d      	mov	r5, r3
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	68db      	ldr	r3, [r3, #12]
 800d00a:	899b      	ldrh	r3, [r3, #12]
 800d00c:	b29b      	uxth	r3, r3
 800d00e:	4618      	mov	r0, r3
 800d010:	f7fa fe66 	bl	8007ce0 <lwip_htons>
 800d014:	4603      	mov	r3, r0
 800d016:	b2db      	uxtb	r3, r3
 800d018:	f003 0303 	and.w	r3, r3, #3
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d001      	beq.n	800d024 <tcp_receive+0xa90>
 800d020:	2301      	movs	r3, #1
 800d022:	e000      	b.n	800d026 <tcp_receive+0xa92>
 800d024:	2300      	movs	r3, #0
 800d026:	442b      	add	r3, r5
 800d028:	429c      	cmp	r4, r3
 800d02a:	d206      	bcs.n	800d03a <tcp_receive+0xaa6>
 800d02c:	4b1e      	ldr	r3, [pc, #120]	; (800d0a8 <tcp_receive+0xb14>)
 800d02e:	f240 622b 	movw	r2, #1579	; 0x62b
 800d032:	4923      	ldr	r1, [pc, #140]	; (800d0c0 <tcp_receive+0xb2c>)
 800d034:	481e      	ldr	r0, [pc, #120]	; (800d0b0 <tcp_receive+0xb1c>)
 800d036:	f006 fe13 	bl	8013c60 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	891b      	ldrh	r3, [r3, #8]
 800d03e:	461c      	mov	r4, r3
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	68db      	ldr	r3, [r3, #12]
 800d044:	899b      	ldrh	r3, [r3, #12]
 800d046:	b29b      	uxth	r3, r3
 800d048:	4618      	mov	r0, r3
 800d04a:	f7fa fe49 	bl	8007ce0 <lwip_htons>
 800d04e:	4603      	mov	r3, r0
 800d050:	b2db      	uxtb	r3, r3
 800d052:	f003 0303 	and.w	r3, r3, #3
 800d056:	2b00      	cmp	r3, #0
 800d058:	d001      	beq.n	800d05e <tcp_receive+0xaca>
 800d05a:	2301      	movs	r3, #1
 800d05c:	e000      	b.n	800d060 <tcp_receive+0xacc>
 800d05e:	2300      	movs	r3, #0
 800d060:	1919      	adds	r1, r3, r4
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d066:	b28b      	uxth	r3, r1
 800d068:	1ad3      	subs	r3, r2, r3
 800d06a:	b29a      	uxth	r2, r3
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f7fc ff43 	bl	8009efc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	685b      	ldr	r3, [r3, #4]
 800d07a:	891b      	ldrh	r3, [r3, #8]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d028      	beq.n	800d0d2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d080:	4b0d      	ldr	r3, [pc, #52]	; (800d0b8 <tcp_receive+0xb24>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d01d      	beq.n	800d0c4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800d088:	4b0b      	ldr	r3, [pc, #44]	; (800d0b8 <tcp_receive+0xb24>)
 800d08a:	681a      	ldr	r2, [r3, #0]
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	685b      	ldr	r3, [r3, #4]
 800d090:	4619      	mov	r1, r3
 800d092:	4610      	mov	r0, r2
 800d094:	f7fc fa50 	bl	8009538 <pbuf_cat>
 800d098:	e018      	b.n	800d0cc <tcp_receive+0xb38>
 800d09a:	bf00      	nop
 800d09c:	2000af02 	.word	0x2000af02
 800d0a0:	2000aef8 	.word	0x2000aef8
 800d0a4:	2000aed8 	.word	0x2000aed8
 800d0a8:	080160d0 	.word	0x080160d0
 800d0ac:	080164b0 	.word	0x080164b0
 800d0b0:	0801611c 	.word	0x0801611c
 800d0b4:	080164ec 	.word	0x080164ec
 800d0b8:	2000af08 	.word	0x2000af08
 800d0bc:	2000af05 	.word	0x2000af05
 800d0c0:	0801650c 	.word	0x0801650c
            } else {
              recv_data = cseg->p;
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	685b      	ldr	r3, [r3, #4]
 800d0c8:	4a70      	ldr	r2, [pc, #448]	; (800d28c <tcp_receive+0xcf8>)
 800d0ca:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	68db      	ldr	r3, [r3, #12]
 800d0d6:	899b      	ldrh	r3, [r3, #12]
 800d0d8:	b29b      	uxth	r3, r3
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7fa fe00 	bl	8007ce0 <lwip_htons>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	b2db      	uxtb	r3, r3
 800d0e4:	f003 0301 	and.w	r3, r3, #1
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d00d      	beq.n	800d108 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d0ec:	4b68      	ldr	r3, [pc, #416]	; (800d290 <tcp_receive+0xcfc>)
 800d0ee:	781b      	ldrb	r3, [r3, #0]
 800d0f0:	f043 0320 	orr.w	r3, r3, #32
 800d0f4:	b2da      	uxtb	r2, r3
 800d0f6:	4b66      	ldr	r3, [pc, #408]	; (800d290 <tcp_receive+0xcfc>)
 800d0f8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	7d1b      	ldrb	r3, [r3, #20]
 800d0fe:	2b04      	cmp	r3, #4
 800d100:	d102      	bne.n	800d108 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2207      	movs	r2, #7
 800d106:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	681a      	ldr	r2, [r3, #0]
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800d110:	68b8      	ldr	r0, [r7, #8]
 800d112:	f7fd fbd2 	bl	800a8ba <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d008      	beq.n	800d130 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d122:	68db      	ldr	r3, [r3, #12]
 800d124:	685a      	ldr	r2, [r3, #4]
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d12a:	429a      	cmp	r2, r3
 800d12c:	f43f af43 	beq.w	800cfb6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	8b5b      	ldrh	r3, [r3, #26]
 800d134:	f003 0301 	and.w	r3, r3, #1
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d00e      	beq.n	800d15a <tcp_receive+0xbc6>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	8b5b      	ldrh	r3, [r3, #26]
 800d140:	f023 0301 	bic.w	r3, r3, #1
 800d144:	b29a      	uxth	r2, r3
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	835a      	strh	r2, [r3, #26]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	8b5b      	ldrh	r3, [r3, #26]
 800d14e:	f043 0302 	orr.w	r3, r3, #2
 800d152:	b29a      	uxth	r2, r3
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d158:	e188      	b.n	800d46c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	8b5b      	ldrh	r3, [r3, #26]
 800d15e:	f043 0301 	orr.w	r3, r3, #1
 800d162:	b29a      	uxth	r2, r3
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d168:	e180      	b.n	800d46c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d106      	bne.n	800d180 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d172:	4848      	ldr	r0, [pc, #288]	; (800d294 <tcp_receive+0xd00>)
 800d174:	f7fd fbba 	bl	800a8ec <tcp_seg_copy>
 800d178:	4602      	mov	r2, r0
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	675a      	str	r2, [r3, #116]	; 0x74
 800d17e:	e16d      	b.n	800d45c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d180:	2300      	movs	r3, #0
 800d182:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d188:	63bb      	str	r3, [r7, #56]	; 0x38
 800d18a:	e157      	b.n	800d43c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800d18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d18e:	68db      	ldr	r3, [r3, #12]
 800d190:	685a      	ldr	r2, [r3, #4]
 800d192:	4b41      	ldr	r3, [pc, #260]	; (800d298 <tcp_receive+0xd04>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	429a      	cmp	r2, r3
 800d198:	d11d      	bne.n	800d1d6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d19a:	4b3e      	ldr	r3, [pc, #248]	; (800d294 <tcp_receive+0xd00>)
 800d19c:	891a      	ldrh	r2, [r3, #8]
 800d19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a0:	891b      	ldrh	r3, [r3, #8]
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	f240 814f 	bls.w	800d446 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d1a8:	483a      	ldr	r0, [pc, #232]	; (800d294 <tcp_receive+0xd00>)
 800d1aa:	f7fd fb9f 	bl	800a8ec <tcp_seg_copy>
 800d1ae:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	f000 8149 	beq.w	800d44a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800d1b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d003      	beq.n	800d1c6 <tcp_receive+0xc32>
                    prev->next = cseg;
 800d1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1c0:	697a      	ldr	r2, [r7, #20]
 800d1c2:	601a      	str	r2, [r3, #0]
 800d1c4:	e002      	b.n	800d1cc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	697a      	ldr	r2, [r7, #20]
 800d1ca:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d1cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d1ce:	6978      	ldr	r0, [r7, #20]
 800d1d0:	f7ff f8dc 	bl	800c38c <tcp_oos_insert_segment>
                }
                break;
 800d1d4:	e139      	b.n	800d44a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d1d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d117      	bne.n	800d20c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d1dc:	4b2e      	ldr	r3, [pc, #184]	; (800d298 <tcp_receive+0xd04>)
 800d1de:	681a      	ldr	r2, [r3, #0]
 800d1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	1ad3      	subs	r3, r2, r3
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	da57      	bge.n	800d29c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d1ec:	4829      	ldr	r0, [pc, #164]	; (800d294 <tcp_receive+0xd00>)
 800d1ee:	f7fd fb7d 	bl	800a8ec <tcp_seg_copy>
 800d1f2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d1f4:	69bb      	ldr	r3, [r7, #24]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	f000 8129 	beq.w	800d44e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	69ba      	ldr	r2, [r7, #24]
 800d200:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d202:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d204:	69b8      	ldr	r0, [r7, #24]
 800d206:	f7ff f8c1 	bl	800c38c <tcp_oos_insert_segment>
                  }
                  break;
 800d20a:	e120      	b.n	800d44e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d20c:	4b22      	ldr	r3, [pc, #136]	; (800d298 <tcp_receive+0xd04>)
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d212:	68db      	ldr	r3, [r3, #12]
 800d214:	685b      	ldr	r3, [r3, #4]
 800d216:	1ad3      	subs	r3, r2, r3
 800d218:	3b01      	subs	r3, #1
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	db3e      	blt.n	800d29c <tcp_receive+0xd08>
 800d21e:	4b1e      	ldr	r3, [pc, #120]	; (800d298 <tcp_receive+0xd04>)
 800d220:	681a      	ldr	r2, [r3, #0]
 800d222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d224:	68db      	ldr	r3, [r3, #12]
 800d226:	685b      	ldr	r3, [r3, #4]
 800d228:	1ad3      	subs	r3, r2, r3
 800d22a:	3301      	adds	r3, #1
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	dc35      	bgt.n	800d29c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d230:	4818      	ldr	r0, [pc, #96]	; (800d294 <tcp_receive+0xd00>)
 800d232:	f7fd fb5b 	bl	800a8ec <tcp_seg_copy>
 800d236:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800d238:	69fb      	ldr	r3, [r7, #28]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	f000 8109 	beq.w	800d452 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d242:	68db      	ldr	r3, [r3, #12]
 800d244:	685b      	ldr	r3, [r3, #4]
 800d246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d248:	8912      	ldrh	r2, [r2, #8]
 800d24a:	441a      	add	r2, r3
 800d24c:	4b12      	ldr	r3, [pc, #72]	; (800d298 <tcp_receive+0xd04>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	1ad3      	subs	r3, r2, r3
 800d252:	2b00      	cmp	r3, #0
 800d254:	dd12      	ble.n	800d27c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d256:	4b10      	ldr	r3, [pc, #64]	; (800d298 <tcp_receive+0xd04>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	b29a      	uxth	r2, r3
 800d25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d25e:	68db      	ldr	r3, [r3, #12]
 800d260:	685b      	ldr	r3, [r3, #4]
 800d262:	b29b      	uxth	r3, r3
 800d264:	1ad3      	subs	r3, r2, r3
 800d266:	b29a      	uxth	r2, r3
 800d268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d26a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d26c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d26e:	685a      	ldr	r2, [r3, #4]
 800d270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d272:	891b      	ldrh	r3, [r3, #8]
 800d274:	4619      	mov	r1, r3
 800d276:	4610      	mov	r0, r2
 800d278:	f7fb ff16 	bl	80090a8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d27c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d27e:	69fa      	ldr	r2, [r7, #28]
 800d280:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d282:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d284:	69f8      	ldr	r0, [r7, #28]
 800d286:	f7ff f881 	bl	800c38c <tcp_oos_insert_segment>
                  }
                  break;
 800d28a:	e0e2      	b.n	800d452 <tcp_receive+0xebe>
 800d28c:	2000af08 	.word	0x2000af08
 800d290:	2000af05 	.word	0x2000af05
 800d294:	2000aed8 	.word	0x2000aed8
 800d298:	2000aef8 	.word	0x2000aef8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800d29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d29e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	f040 80c6 	bne.w	800d436 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d2aa:	4b80      	ldr	r3, [pc, #512]	; (800d4ac <tcp_receive+0xf18>)
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	f340 80bd 	ble.w	800d436 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2be:	68db      	ldr	r3, [r3, #12]
 800d2c0:	899b      	ldrh	r3, [r3, #12]
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f7fa fd0b 	bl	8007ce0 <lwip_htons>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	b2db      	uxtb	r3, r3
 800d2ce:	f003 0301 	and.w	r3, r3, #1
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	f040 80bf 	bne.w	800d456 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d2d8:	4875      	ldr	r0, [pc, #468]	; (800d4b0 <tcp_receive+0xf1c>)
 800d2da:	f7fd fb07 	bl	800a8ec <tcp_seg_copy>
 800d2de:	4602      	mov	r2, r0
 800d2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	f000 80b6 	beq.w	800d45a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f0:	68db      	ldr	r3, [r3, #12]
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d2f6:	8912      	ldrh	r2, [r2, #8]
 800d2f8:	441a      	add	r2, r3
 800d2fa:	4b6c      	ldr	r3, [pc, #432]	; (800d4ac <tcp_receive+0xf18>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	1ad3      	subs	r3, r2, r3
 800d300:	2b00      	cmp	r3, #0
 800d302:	dd12      	ble.n	800d32a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d304:	4b69      	ldr	r3, [pc, #420]	; (800d4ac <tcp_receive+0xf18>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	b29a      	uxth	r2, r3
 800d30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d30c:	68db      	ldr	r3, [r3, #12]
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	b29b      	uxth	r3, r3
 800d312:	1ad3      	subs	r3, r2, r3
 800d314:	b29a      	uxth	r2, r3
 800d316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d318:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d31c:	685a      	ldr	r2, [r3, #4]
 800d31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d320:	891b      	ldrh	r3, [r3, #8]
 800d322:	4619      	mov	r1, r3
 800d324:	4610      	mov	r0, r2
 800d326:	f7fb febf 	bl	80090a8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d32a:	4b62      	ldr	r3, [pc, #392]	; (800d4b4 <tcp_receive+0xf20>)
 800d32c:	881b      	ldrh	r3, [r3, #0]
 800d32e:	461a      	mov	r2, r3
 800d330:	4b5e      	ldr	r3, [pc, #376]	; (800d4ac <tcp_receive+0xf18>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	441a      	add	r2, r3
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d33a:	6879      	ldr	r1, [r7, #4]
 800d33c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d33e:	440b      	add	r3, r1
 800d340:	1ad3      	subs	r3, r2, r3
 800d342:	2b00      	cmp	r3, #0
 800d344:	f340 8089 	ble.w	800d45a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	68db      	ldr	r3, [r3, #12]
 800d34e:	899b      	ldrh	r3, [r3, #12]
 800d350:	b29b      	uxth	r3, r3
 800d352:	4618      	mov	r0, r3
 800d354:	f7fa fcc4 	bl	8007ce0 <lwip_htons>
 800d358:	4603      	mov	r3, r0
 800d35a:	b2db      	uxtb	r3, r3
 800d35c:	f003 0301 	and.w	r3, r3, #1
 800d360:	2b00      	cmp	r3, #0
 800d362:	d022      	beq.n	800d3aa <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	68db      	ldr	r3, [r3, #12]
 800d36a:	899b      	ldrh	r3, [r3, #12]
 800d36c:	b29b      	uxth	r3, r3
 800d36e:	b21b      	sxth	r3, r3
 800d370:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d374:	b21c      	sxth	r4, r3
 800d376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	68db      	ldr	r3, [r3, #12]
 800d37c:	899b      	ldrh	r3, [r3, #12]
 800d37e:	b29b      	uxth	r3, r3
 800d380:	4618      	mov	r0, r3
 800d382:	f7fa fcad 	bl	8007ce0 <lwip_htons>
 800d386:	4603      	mov	r3, r0
 800d388:	b2db      	uxtb	r3, r3
 800d38a:	b29b      	uxth	r3, r3
 800d38c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d390:	b29b      	uxth	r3, r3
 800d392:	4618      	mov	r0, r3
 800d394:	f7fa fca4 	bl	8007ce0 <lwip_htons>
 800d398:	4603      	mov	r3, r0
 800d39a:	b21b      	sxth	r3, r3
 800d39c:	4323      	orrs	r3, r4
 800d39e:	b21a      	sxth	r2, r3
 800d3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	68db      	ldr	r3, [r3, #12]
 800d3a6:	b292      	uxth	r2, r2
 800d3a8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ae:	b29a      	uxth	r2, r3
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3b4:	4413      	add	r3, r2
 800d3b6:	b299      	uxth	r1, r3
 800d3b8:	4b3c      	ldr	r3, [pc, #240]	; (800d4ac <tcp_receive+0xf18>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	b29a      	uxth	r2, r3
 800d3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	1a8a      	subs	r2, r1, r2
 800d3c4:	b292      	uxth	r2, r2
 800d3c6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	685a      	ldr	r2, [r3, #4]
 800d3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	891b      	ldrh	r3, [r3, #8]
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	4610      	mov	r0, r2
 800d3d8:	f7fb fe66 	bl	80090a8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	891c      	ldrh	r4, [r3, #8]
 800d3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	68db      	ldr	r3, [r3, #12]
 800d3e8:	899b      	ldrh	r3, [r3, #12]
 800d3ea:	b29b      	uxth	r3, r3
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7fa fc77 	bl	8007ce0 <lwip_htons>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	b2db      	uxtb	r3, r3
 800d3f6:	f003 0303 	and.w	r3, r3, #3
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d001      	beq.n	800d402 <tcp_receive+0xe6e>
 800d3fe:	2301      	movs	r3, #1
 800d400:	e000      	b.n	800d404 <tcp_receive+0xe70>
 800d402:	2300      	movs	r3, #0
 800d404:	4423      	add	r3, r4
 800d406:	b29a      	uxth	r2, r3
 800d408:	4b2a      	ldr	r3, [pc, #168]	; (800d4b4 <tcp_receive+0xf20>)
 800d40a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d40c:	4b29      	ldr	r3, [pc, #164]	; (800d4b4 <tcp_receive+0xf20>)
 800d40e:	881b      	ldrh	r3, [r3, #0]
 800d410:	461a      	mov	r2, r3
 800d412:	4b26      	ldr	r3, [pc, #152]	; (800d4ac <tcp_receive+0xf18>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	441a      	add	r2, r3
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d41c:	6879      	ldr	r1, [r7, #4]
 800d41e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d420:	440b      	add	r3, r1
 800d422:	429a      	cmp	r2, r3
 800d424:	d019      	beq.n	800d45a <tcp_receive+0xec6>
 800d426:	4b24      	ldr	r3, [pc, #144]	; (800d4b8 <tcp_receive+0xf24>)
 800d428:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800d42c:	4923      	ldr	r1, [pc, #140]	; (800d4bc <tcp_receive+0xf28>)
 800d42e:	4824      	ldr	r0, [pc, #144]	; (800d4c0 <tcp_receive+0xf2c>)
 800d430:	f006 fc16 	bl	8013c60 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d434:	e011      	b.n	800d45a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43e:	2b00      	cmp	r3, #0
 800d440:	f47f aea4 	bne.w	800d18c <tcp_receive+0xbf8>
 800d444:	e00a      	b.n	800d45c <tcp_receive+0xec8>
                break;
 800d446:	bf00      	nop
 800d448:	e008      	b.n	800d45c <tcp_receive+0xec8>
                break;
 800d44a:	bf00      	nop
 800d44c:	e006      	b.n	800d45c <tcp_receive+0xec8>
                  break;
 800d44e:	bf00      	nop
 800d450:	e004      	b.n	800d45c <tcp_receive+0xec8>
                  break;
 800d452:	bf00      	nop
 800d454:	e002      	b.n	800d45c <tcp_receive+0xec8>
                  break;
 800d456:	bf00      	nop
 800d458:	e000      	b.n	800d45c <tcp_receive+0xec8>
                break;
 800d45a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f001 fa33 	bl	800e8c8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800d462:	e003      	b.n	800d46c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f001 fa2f 	bl	800e8c8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d46a:	e01a      	b.n	800d4a2 <tcp_receive+0xf0e>
 800d46c:	e019      	b.n	800d4a2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d46e:	4b0f      	ldr	r3, [pc, #60]	; (800d4ac <tcp_receive+0xf18>)
 800d470:	681a      	ldr	r2, [r3, #0]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d476:	1ad3      	subs	r3, r2, r3
 800d478:	2b00      	cmp	r3, #0
 800d47a:	db0a      	blt.n	800d492 <tcp_receive+0xefe>
 800d47c:	4b0b      	ldr	r3, [pc, #44]	; (800d4ac <tcp_receive+0xf18>)
 800d47e:	681a      	ldr	r2, [r3, #0]
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d484:	6879      	ldr	r1, [r7, #4]
 800d486:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d488:	440b      	add	r3, r1
 800d48a:	1ad3      	subs	r3, r2, r3
 800d48c:	3301      	adds	r3, #1
 800d48e:	2b00      	cmp	r3, #0
 800d490:	dd07      	ble.n	800d4a2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	8b5b      	ldrh	r3, [r3, #26]
 800d496:	f043 0302 	orr.w	r3, r3, #2
 800d49a:	b29a      	uxth	r2, r3
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800d4a0:	e7ff      	b.n	800d4a2 <tcp_receive+0xf0e>
 800d4a2:	bf00      	nop
 800d4a4:	3750      	adds	r7, #80	; 0x50
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bdb0      	pop	{r4, r5, r7, pc}
 800d4aa:	bf00      	nop
 800d4ac:	2000aef8 	.word	0x2000aef8
 800d4b0:	2000aed8 	.word	0x2000aed8
 800d4b4:	2000af02 	.word	0x2000af02
 800d4b8:	080160d0 	.word	0x080160d0
 800d4bc:	08016478 	.word	0x08016478
 800d4c0:	0801611c 	.word	0x0801611c

0800d4c4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800d4ca:	4b15      	ldr	r3, [pc, #84]	; (800d520 <tcp_get_next_optbyte+0x5c>)
 800d4cc:	881b      	ldrh	r3, [r3, #0]
 800d4ce:	1c5a      	adds	r2, r3, #1
 800d4d0:	b291      	uxth	r1, r2
 800d4d2:	4a13      	ldr	r2, [pc, #76]	; (800d520 <tcp_get_next_optbyte+0x5c>)
 800d4d4:	8011      	strh	r1, [r2, #0]
 800d4d6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800d4d8:	4b12      	ldr	r3, [pc, #72]	; (800d524 <tcp_get_next_optbyte+0x60>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d004      	beq.n	800d4ea <tcp_get_next_optbyte+0x26>
 800d4e0:	4b11      	ldr	r3, [pc, #68]	; (800d528 <tcp_get_next_optbyte+0x64>)
 800d4e2:	881b      	ldrh	r3, [r3, #0]
 800d4e4:	88fa      	ldrh	r2, [r7, #6]
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d208      	bcs.n	800d4fc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d4ea:	4b10      	ldr	r3, [pc, #64]	; (800d52c <tcp_get_next_optbyte+0x68>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	3314      	adds	r3, #20
 800d4f0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800d4f2:	88fb      	ldrh	r3, [r7, #6]
 800d4f4:	683a      	ldr	r2, [r7, #0]
 800d4f6:	4413      	add	r3, r2
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	e00b      	b.n	800d514 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d4fc:	88fb      	ldrh	r3, [r7, #6]
 800d4fe:	b2da      	uxtb	r2, r3
 800d500:	4b09      	ldr	r3, [pc, #36]	; (800d528 <tcp_get_next_optbyte+0x64>)
 800d502:	881b      	ldrh	r3, [r3, #0]
 800d504:	b2db      	uxtb	r3, r3
 800d506:	1ad3      	subs	r3, r2, r3
 800d508:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d50a:	4b06      	ldr	r3, [pc, #24]	; (800d524 <tcp_get_next_optbyte+0x60>)
 800d50c:	681a      	ldr	r2, [r3, #0]
 800d50e:	797b      	ldrb	r3, [r7, #5]
 800d510:	4413      	add	r3, r2
 800d512:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d514:	4618      	mov	r0, r3
 800d516:	370c      	adds	r7, #12
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr
 800d520:	2000aef4 	.word	0x2000aef4
 800d524:	2000aef0 	.word	0x2000aef0
 800d528:	2000aeee 	.word	0x2000aeee
 800d52c:	2000aee8 	.word	0x2000aee8

0800d530 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b084      	sub	sp, #16
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d106      	bne.n	800d54c <tcp_parseopt+0x1c>
 800d53e:	4b32      	ldr	r3, [pc, #200]	; (800d608 <tcp_parseopt+0xd8>)
 800d540:	f240 727d 	movw	r2, #1917	; 0x77d
 800d544:	4931      	ldr	r1, [pc, #196]	; (800d60c <tcp_parseopt+0xdc>)
 800d546:	4832      	ldr	r0, [pc, #200]	; (800d610 <tcp_parseopt+0xe0>)
 800d548:	f006 fb8a 	bl	8013c60 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d54c:	4b31      	ldr	r3, [pc, #196]	; (800d614 <tcp_parseopt+0xe4>)
 800d54e:	881b      	ldrh	r3, [r3, #0]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d055      	beq.n	800d600 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d554:	4b30      	ldr	r3, [pc, #192]	; (800d618 <tcp_parseopt+0xe8>)
 800d556:	2200      	movs	r2, #0
 800d558:	801a      	strh	r2, [r3, #0]
 800d55a:	e045      	b.n	800d5e8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800d55c:	f7ff ffb2 	bl	800d4c4 <tcp_get_next_optbyte>
 800d560:	4603      	mov	r3, r0
 800d562:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d564:	7bfb      	ldrb	r3, [r7, #15]
 800d566:	2b02      	cmp	r3, #2
 800d568:	d006      	beq.n	800d578 <tcp_parseopt+0x48>
 800d56a:	2b02      	cmp	r3, #2
 800d56c:	dc2b      	bgt.n	800d5c6 <tcp_parseopt+0x96>
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d041      	beq.n	800d5f6 <tcp_parseopt+0xc6>
 800d572:	2b01      	cmp	r3, #1
 800d574:	d127      	bne.n	800d5c6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800d576:	e037      	b.n	800d5e8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d578:	f7ff ffa4 	bl	800d4c4 <tcp_get_next_optbyte>
 800d57c:	4603      	mov	r3, r0
 800d57e:	2b04      	cmp	r3, #4
 800d580:	d13b      	bne.n	800d5fa <tcp_parseopt+0xca>
 800d582:	4b25      	ldr	r3, [pc, #148]	; (800d618 <tcp_parseopt+0xe8>)
 800d584:	881b      	ldrh	r3, [r3, #0]
 800d586:	3301      	adds	r3, #1
 800d588:	4a22      	ldr	r2, [pc, #136]	; (800d614 <tcp_parseopt+0xe4>)
 800d58a:	8812      	ldrh	r2, [r2, #0]
 800d58c:	4293      	cmp	r3, r2
 800d58e:	da34      	bge.n	800d5fa <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d590:	f7ff ff98 	bl	800d4c4 <tcp_get_next_optbyte>
 800d594:	4603      	mov	r3, r0
 800d596:	b29b      	uxth	r3, r3
 800d598:	021b      	lsls	r3, r3, #8
 800d59a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800d59c:	f7ff ff92 	bl	800d4c4 <tcp_get_next_optbyte>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	b29a      	uxth	r2, r3
 800d5a4:	89bb      	ldrh	r3, [r7, #12]
 800d5a6:	4313      	orrs	r3, r2
 800d5a8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d5aa:	89bb      	ldrh	r3, [r7, #12]
 800d5ac:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d5b0:	d804      	bhi.n	800d5bc <tcp_parseopt+0x8c>
 800d5b2:	89bb      	ldrh	r3, [r7, #12]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d001      	beq.n	800d5bc <tcp_parseopt+0x8c>
 800d5b8:	89ba      	ldrh	r2, [r7, #12]
 800d5ba:	e001      	b.n	800d5c0 <tcp_parseopt+0x90>
 800d5bc:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800d5c4:	e010      	b.n	800d5e8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d5c6:	f7ff ff7d 	bl	800d4c4 <tcp_get_next_optbyte>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800d5ce:	7afb      	ldrb	r3, [r7, #11]
 800d5d0:	2b01      	cmp	r3, #1
 800d5d2:	d914      	bls.n	800d5fe <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d5d4:	7afb      	ldrb	r3, [r7, #11]
 800d5d6:	b29a      	uxth	r2, r3
 800d5d8:	4b0f      	ldr	r3, [pc, #60]	; (800d618 <tcp_parseopt+0xe8>)
 800d5da:	881b      	ldrh	r3, [r3, #0]
 800d5dc:	4413      	add	r3, r2
 800d5de:	b29b      	uxth	r3, r3
 800d5e0:	3b02      	subs	r3, #2
 800d5e2:	b29a      	uxth	r2, r3
 800d5e4:	4b0c      	ldr	r3, [pc, #48]	; (800d618 <tcp_parseopt+0xe8>)
 800d5e6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d5e8:	4b0b      	ldr	r3, [pc, #44]	; (800d618 <tcp_parseopt+0xe8>)
 800d5ea:	881a      	ldrh	r2, [r3, #0]
 800d5ec:	4b09      	ldr	r3, [pc, #36]	; (800d614 <tcp_parseopt+0xe4>)
 800d5ee:	881b      	ldrh	r3, [r3, #0]
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d3b3      	bcc.n	800d55c <tcp_parseopt+0x2c>
 800d5f4:	e004      	b.n	800d600 <tcp_parseopt+0xd0>
          return;
 800d5f6:	bf00      	nop
 800d5f8:	e002      	b.n	800d600 <tcp_parseopt+0xd0>
            return;
 800d5fa:	bf00      	nop
 800d5fc:	e000      	b.n	800d600 <tcp_parseopt+0xd0>
            return;
 800d5fe:	bf00      	nop
      }
    }
  }
}
 800d600:	3710      	adds	r7, #16
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
 800d606:	bf00      	nop
 800d608:	080160d0 	.word	0x080160d0
 800d60c:	08016534 	.word	0x08016534
 800d610:	0801611c 	.word	0x0801611c
 800d614:	2000aeec 	.word	0x2000aeec
 800d618:	2000aef4 	.word	0x2000aef4

0800d61c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d61c:	b480      	push	{r7}
 800d61e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d620:	4b05      	ldr	r3, [pc, #20]	; (800d638 <tcp_trigger_input_pcb_close+0x1c>)
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	f043 0310 	orr.w	r3, r3, #16
 800d628:	b2da      	uxtb	r2, r3
 800d62a:	4b03      	ldr	r3, [pc, #12]	; (800d638 <tcp_trigger_input_pcb_close+0x1c>)
 800d62c:	701a      	strb	r2, [r3, #0]
}
 800d62e:	bf00      	nop
 800d630:	46bd      	mov	sp, r7
 800d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d636:	4770      	bx	lr
 800d638:	2000af05 	.word	0x2000af05

0800d63c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b084      	sub	sp, #16
 800d640:	af00      	add	r7, sp, #0
 800d642:	60f8      	str	r0, [r7, #12]
 800d644:	60b9      	str	r1, [r7, #8]
 800d646:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d00a      	beq.n	800d664 <tcp_route+0x28>
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	7a1b      	ldrb	r3, [r3, #8]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d006      	beq.n	800d664 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	7a1b      	ldrb	r3, [r3, #8]
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7fb fb4a 	bl	8008cf4 <netif_get_by_index>
 800d660:	4603      	mov	r3, r0
 800d662:	e003      	b.n	800d66c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f005 f817 	bl	8012698 <ip4_route>
 800d66a:	4603      	mov	r3, r0
  }
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3710      	adds	r7, #16
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}

0800d674 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d674:	b590      	push	{r4, r7, lr}
 800d676:	b087      	sub	sp, #28
 800d678:	af00      	add	r7, sp, #0
 800d67a:	60f8      	str	r0, [r7, #12]
 800d67c:	60b9      	str	r1, [r7, #8]
 800d67e:	603b      	str	r3, [r7, #0]
 800d680:	4613      	mov	r3, r2
 800d682:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d105      	bne.n	800d696 <tcp_create_segment+0x22>
 800d68a:	4b44      	ldr	r3, [pc, #272]	; (800d79c <tcp_create_segment+0x128>)
 800d68c:	22a3      	movs	r2, #163	; 0xa3
 800d68e:	4944      	ldr	r1, [pc, #272]	; (800d7a0 <tcp_create_segment+0x12c>)
 800d690:	4844      	ldr	r0, [pc, #272]	; (800d7a4 <tcp_create_segment+0x130>)
 800d692:	f006 fae5 	bl	8013c60 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d105      	bne.n	800d6a8 <tcp_create_segment+0x34>
 800d69c:	4b3f      	ldr	r3, [pc, #252]	; (800d79c <tcp_create_segment+0x128>)
 800d69e:	22a4      	movs	r2, #164	; 0xa4
 800d6a0:	4941      	ldr	r1, [pc, #260]	; (800d7a8 <tcp_create_segment+0x134>)
 800d6a2:	4840      	ldr	r0, [pc, #256]	; (800d7a4 <tcp_create_segment+0x130>)
 800d6a4:	f006 fadc 	bl	8013c60 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d6a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d6ac:	009b      	lsls	r3, r3, #2
 800d6ae:	b2db      	uxtb	r3, r3
 800d6b0:	f003 0304 	and.w	r3, r3, #4
 800d6b4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d6b6:	2003      	movs	r0, #3
 800d6b8:	f7fa ff8a 	bl	80085d0 <memp_malloc>
 800d6bc:	6138      	str	r0, [r7, #16]
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d104      	bne.n	800d6ce <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d6c4:	68b8      	ldr	r0, [r7, #8]
 800d6c6:	f7fb fe75 	bl	80093b4 <pbuf_free>
    return NULL;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	e061      	b.n	800d792 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d6d4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d6d6:	693b      	ldr	r3, [r7, #16]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	68ba      	ldr	r2, [r7, #8]
 800d6e0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	891a      	ldrh	r2, [r3, #8]
 800d6e6:	7dfb      	ldrb	r3, [r7, #23]
 800d6e8:	b29b      	uxth	r3, r3
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d205      	bcs.n	800d6fa <tcp_create_segment+0x86>
 800d6ee:	4b2b      	ldr	r3, [pc, #172]	; (800d79c <tcp_create_segment+0x128>)
 800d6f0:	22b0      	movs	r2, #176	; 0xb0
 800d6f2:	492e      	ldr	r1, [pc, #184]	; (800d7ac <tcp_create_segment+0x138>)
 800d6f4:	482b      	ldr	r0, [pc, #172]	; (800d7a4 <tcp_create_segment+0x130>)
 800d6f6:	f006 fab3 	bl	8013c60 <iprintf>
  seg->len = p->tot_len - optlen;
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	891a      	ldrh	r2, [r3, #8]
 800d6fe:	7dfb      	ldrb	r3, [r7, #23]
 800d700:	b29b      	uxth	r3, r3
 800d702:	1ad3      	subs	r3, r2, r3
 800d704:	b29a      	uxth	r2, r3
 800d706:	693b      	ldr	r3, [r7, #16]
 800d708:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d70a:	2114      	movs	r1, #20
 800d70c:	68b8      	ldr	r0, [r7, #8]
 800d70e:	f7fb fdbb 	bl	8009288 <pbuf_add_header>
 800d712:	4603      	mov	r3, r0
 800d714:	2b00      	cmp	r3, #0
 800d716:	d004      	beq.n	800d722 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d718:	6938      	ldr	r0, [r7, #16]
 800d71a:	f7fd f8ce 	bl	800a8ba <tcp_seg_free>
    return NULL;
 800d71e:	2300      	movs	r3, #0
 800d720:	e037      	b.n	800d792 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	685b      	ldr	r3, [r3, #4]
 800d726:	685a      	ldr	r2, [r3, #4]
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	8ada      	ldrh	r2, [r3, #22]
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	68dc      	ldr	r4, [r3, #12]
 800d734:	4610      	mov	r0, r2
 800d736:	f7fa fad3 	bl	8007ce0 <lwip_htons>
 800d73a:	4603      	mov	r3, r0
 800d73c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	8b1a      	ldrh	r2, [r3, #24]
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	68dc      	ldr	r4, [r3, #12]
 800d746:	4610      	mov	r0, r2
 800d748:	f7fa faca 	bl	8007ce0 <lwip_htons>
 800d74c:	4603      	mov	r3, r0
 800d74e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	68dc      	ldr	r4, [r3, #12]
 800d754:	6838      	ldr	r0, [r7, #0]
 800d756:	f7fa fad8 	bl	8007d0a <lwip_htonl>
 800d75a:	4603      	mov	r3, r0
 800d75c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d75e:	7dfb      	ldrb	r3, [r7, #23]
 800d760:	089b      	lsrs	r3, r3, #2
 800d762:	b2db      	uxtb	r3, r3
 800d764:	b29b      	uxth	r3, r3
 800d766:	3305      	adds	r3, #5
 800d768:	b29b      	uxth	r3, r3
 800d76a:	031b      	lsls	r3, r3, #12
 800d76c:	b29a      	uxth	r2, r3
 800d76e:	79fb      	ldrb	r3, [r7, #7]
 800d770:	b29b      	uxth	r3, r3
 800d772:	4313      	orrs	r3, r2
 800d774:	b29a      	uxth	r2, r3
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	68dc      	ldr	r4, [r3, #12]
 800d77a:	4610      	mov	r0, r2
 800d77c:	f7fa fab0 	bl	8007ce0 <lwip_htons>
 800d780:	4603      	mov	r3, r0
 800d782:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	68db      	ldr	r3, [r3, #12]
 800d788:	2200      	movs	r2, #0
 800d78a:	749a      	strb	r2, [r3, #18]
 800d78c:	2200      	movs	r2, #0
 800d78e:	74da      	strb	r2, [r3, #19]
  return seg;
 800d790:	693b      	ldr	r3, [r7, #16]
}
 800d792:	4618      	mov	r0, r3
 800d794:	371c      	adds	r7, #28
 800d796:	46bd      	mov	sp, r7
 800d798:	bd90      	pop	{r4, r7, pc}
 800d79a:	bf00      	nop
 800d79c:	08016550 	.word	0x08016550
 800d7a0:	08016584 	.word	0x08016584
 800d7a4:	080165a4 	.word	0x080165a4
 800d7a8:	080165cc 	.word	0x080165cc
 800d7ac:	080165f0 	.word	0x080165f0

0800d7b0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d7b0:	b590      	push	{r4, r7, lr}
 800d7b2:	b08b      	sub	sp, #44	; 0x2c
 800d7b4:	af02      	add	r7, sp, #8
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	61fb      	str	r3, [r7, #28]
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d106      	bne.n	800d7dc <tcp_split_unsent_seg+0x2c>
 800d7ce:	4b95      	ldr	r3, [pc, #596]	; (800da24 <tcp_split_unsent_seg+0x274>)
 800d7d0:	f240 324b 	movw	r2, #843	; 0x34b
 800d7d4:	4994      	ldr	r1, [pc, #592]	; (800da28 <tcp_split_unsent_seg+0x278>)
 800d7d6:	4895      	ldr	r0, [pc, #596]	; (800da2c <tcp_split_unsent_seg+0x27c>)
 800d7d8:	f006 fa42 	bl	8013c60 <iprintf>

  useg = pcb->unsent;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7e0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d102      	bne.n	800d7ee <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800d7e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d7ec:	e116      	b.n	800da1c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800d7ee:	887b      	ldrh	r3, [r7, #2]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d109      	bne.n	800d808 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d7f4:	4b8b      	ldr	r3, [pc, #556]	; (800da24 <tcp_split_unsent_seg+0x274>)
 800d7f6:	f240 3253 	movw	r2, #851	; 0x353
 800d7fa:	498d      	ldr	r1, [pc, #564]	; (800da30 <tcp_split_unsent_seg+0x280>)
 800d7fc:	488b      	ldr	r0, [pc, #556]	; (800da2c <tcp_split_unsent_seg+0x27c>)
 800d7fe:	f006 fa2f 	bl	8013c60 <iprintf>
    return ERR_VAL;
 800d802:	f06f 0305 	mvn.w	r3, #5
 800d806:	e109      	b.n	800da1c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	891b      	ldrh	r3, [r3, #8]
 800d80c:	887a      	ldrh	r2, [r7, #2]
 800d80e:	429a      	cmp	r2, r3
 800d810:	d301      	bcc.n	800d816 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800d812:	2300      	movs	r3, #0
 800d814:	e102      	b.n	800da1c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d81a:	887a      	ldrh	r2, [r7, #2]
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d906      	bls.n	800d82e <tcp_split_unsent_seg+0x7e>
 800d820:	4b80      	ldr	r3, [pc, #512]	; (800da24 <tcp_split_unsent_seg+0x274>)
 800d822:	f240 325b 	movw	r2, #859	; 0x35b
 800d826:	4983      	ldr	r1, [pc, #524]	; (800da34 <tcp_split_unsent_seg+0x284>)
 800d828:	4880      	ldr	r0, [pc, #512]	; (800da2c <tcp_split_unsent_seg+0x27c>)
 800d82a:	f006 fa19 	bl	8013c60 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	891b      	ldrh	r3, [r3, #8]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d106      	bne.n	800d844 <tcp_split_unsent_seg+0x94>
 800d836:	4b7b      	ldr	r3, [pc, #492]	; (800da24 <tcp_split_unsent_seg+0x274>)
 800d838:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800d83c:	497e      	ldr	r1, [pc, #504]	; (800da38 <tcp_split_unsent_seg+0x288>)
 800d83e:	487b      	ldr	r0, [pc, #492]	; (800da2c <tcp_split_unsent_seg+0x27c>)
 800d840:	f006 fa0e 	bl	8013c60 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	7a9b      	ldrb	r3, [r3, #10]
 800d848:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d84a:	7bfb      	ldrb	r3, [r7, #15]
 800d84c:	009b      	lsls	r3, r3, #2
 800d84e:	b2db      	uxtb	r3, r3
 800d850:	f003 0304 	and.w	r3, r3, #4
 800d854:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	891a      	ldrh	r2, [r3, #8]
 800d85a:	887b      	ldrh	r3, [r7, #2]
 800d85c:	1ad3      	subs	r3, r2, r3
 800d85e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d860:	7bbb      	ldrb	r3, [r7, #14]
 800d862:	b29a      	uxth	r2, r3
 800d864:	89bb      	ldrh	r3, [r7, #12]
 800d866:	4413      	add	r3, r2
 800d868:	b29b      	uxth	r3, r3
 800d86a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d86e:	4619      	mov	r1, r3
 800d870:	2036      	movs	r0, #54	; 0x36
 800d872:	f7fb fabb 	bl	8008dec <pbuf_alloc>
 800d876:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	f000 80b7 	beq.w	800d9ee <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	891a      	ldrh	r2, [r3, #8]
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	891b      	ldrh	r3, [r3, #8]
 800d88a:	1ad3      	subs	r3, r2, r3
 800d88c:	b29a      	uxth	r2, r3
 800d88e:	887b      	ldrh	r3, [r7, #2]
 800d890:	4413      	add	r3, r2
 800d892:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	6858      	ldr	r0, [r3, #4]
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	685a      	ldr	r2, [r3, #4]
 800d89c:	7bbb      	ldrb	r3, [r7, #14]
 800d89e:	18d1      	adds	r1, r2, r3
 800d8a0:	897b      	ldrh	r3, [r7, #10]
 800d8a2:	89ba      	ldrh	r2, [r7, #12]
 800d8a4:	f7fb ff80 	bl	80097a8 <pbuf_copy_partial>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	89bb      	ldrh	r3, [r7, #12]
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	f040 809f 	bne.w	800d9f2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	68db      	ldr	r3, [r3, #12]
 800d8b8:	899b      	ldrh	r3, [r3, #12]
 800d8ba:	b29b      	uxth	r3, r3
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7fa fa0f 	bl	8007ce0 <lwip_htons>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	b2db      	uxtb	r3, r3
 800d8c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d8ca:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800d8d0:	7efb      	ldrb	r3, [r7, #27]
 800d8d2:	f003 0308 	and.w	r3, r3, #8
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d007      	beq.n	800d8ea <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800d8da:	7efb      	ldrb	r3, [r7, #27]
 800d8dc:	f023 0308 	bic.w	r3, r3, #8
 800d8e0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800d8e2:	7ebb      	ldrb	r3, [r7, #26]
 800d8e4:	f043 0308 	orr.w	r3, r3, #8
 800d8e8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800d8ea:	7efb      	ldrb	r3, [r7, #27]
 800d8ec:	f003 0301 	and.w	r3, r3, #1
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d007      	beq.n	800d904 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800d8f4:	7efb      	ldrb	r3, [r7, #27]
 800d8f6:	f023 0301 	bic.w	r3, r3, #1
 800d8fa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800d8fc:	7ebb      	ldrb	r3, [r7, #26]
 800d8fe:	f043 0301 	orr.w	r3, r3, #1
 800d902:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	68db      	ldr	r3, [r3, #12]
 800d908:	685b      	ldr	r3, [r3, #4]
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7fa f9fd 	bl	8007d0a <lwip_htonl>
 800d910:	4602      	mov	r2, r0
 800d912:	887b      	ldrh	r3, [r7, #2]
 800d914:	18d1      	adds	r1, r2, r3
 800d916:	7eba      	ldrb	r2, [r7, #26]
 800d918:	7bfb      	ldrb	r3, [r7, #15]
 800d91a:	9300      	str	r3, [sp, #0]
 800d91c:	460b      	mov	r3, r1
 800d91e:	6939      	ldr	r1, [r7, #16]
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f7ff fea7 	bl	800d674 <tcp_create_segment>
 800d926:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800d928:	69fb      	ldr	r3, [r7, #28]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d063      	beq.n	800d9f6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	685b      	ldr	r3, [r3, #4]
 800d932:	4618      	mov	r0, r3
 800d934:	f7fb fdc6 	bl	80094c4 <pbuf_clen>
 800d938:	4603      	mov	r3, r0
 800d93a:	461a      	mov	r2, r3
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d942:	1a9b      	subs	r3, r3, r2
 800d944:	b29a      	uxth	r2, r3
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	6858      	ldr	r0, [r3, #4]
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	685b      	ldr	r3, [r3, #4]
 800d954:	891a      	ldrh	r2, [r3, #8]
 800d956:	89bb      	ldrh	r3, [r7, #12]
 800d958:	1ad3      	subs	r3, r2, r3
 800d95a:	b29b      	uxth	r3, r3
 800d95c:	4619      	mov	r1, r3
 800d95e:	f7fb fba3 	bl	80090a8 <pbuf_realloc>
  useg->len -= remainder;
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	891a      	ldrh	r2, [r3, #8]
 800d966:	89bb      	ldrh	r3, [r7, #12]
 800d968:	1ad3      	subs	r3, r2, r3
 800d96a:	b29a      	uxth	r2, r3
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	68db      	ldr	r3, [r3, #12]
 800d974:	899b      	ldrh	r3, [r3, #12]
 800d976:	b29c      	uxth	r4, r3
 800d978:	7efb      	ldrb	r3, [r7, #27]
 800d97a:	b29b      	uxth	r3, r3
 800d97c:	4618      	mov	r0, r3
 800d97e:	f7fa f9af 	bl	8007ce0 <lwip_htons>
 800d982:	4603      	mov	r3, r0
 800d984:	461a      	mov	r2, r3
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	68db      	ldr	r3, [r3, #12]
 800d98a:	4322      	orrs	r2, r4
 800d98c:	b292      	uxth	r2, r2
 800d98e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	685b      	ldr	r3, [r3, #4]
 800d994:	4618      	mov	r0, r3
 800d996:	f7fb fd95 	bl	80094c4 <pbuf_clen>
 800d99a:	4603      	mov	r3, r0
 800d99c:	461a      	mov	r2, r3
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d9a4:	4413      	add	r3, r2
 800d9a6:	b29a      	uxth	r2, r3
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d9ae:	69fb      	ldr	r3, [r7, #28]
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7fb fd86 	bl	80094c4 <pbuf_clen>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d9c2:	4413      	add	r3, r2
 800d9c4:	b29a      	uxth	r2, r3
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	681a      	ldr	r2, [r3, #0]
 800d9d0:	69fb      	ldr	r3, [r7, #28]
 800d9d2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	69fa      	ldr	r2, [r7, #28]
 800d9d8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d9da:	69fb      	ldr	r3, [r7, #28]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d103      	bne.n	800d9ea <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	e016      	b.n	800da1c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800d9ee:	bf00      	nop
 800d9f0:	e002      	b.n	800d9f8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d9f2:	bf00      	nop
 800d9f4:	e000      	b.n	800d9f8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d9f6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d006      	beq.n	800da0c <tcp_split_unsent_seg+0x25c>
 800d9fe:	4b09      	ldr	r3, [pc, #36]	; (800da24 <tcp_split_unsent_seg+0x274>)
 800da00:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800da04:	490d      	ldr	r1, [pc, #52]	; (800da3c <tcp_split_unsent_seg+0x28c>)
 800da06:	4809      	ldr	r0, [pc, #36]	; (800da2c <tcp_split_unsent_seg+0x27c>)
 800da08:	f006 f92a 	bl	8013c60 <iprintf>
  if (p != NULL) {
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d002      	beq.n	800da18 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800da12:	6938      	ldr	r0, [r7, #16]
 800da14:	f7fb fcce 	bl	80093b4 <pbuf_free>
  }

  return ERR_MEM;
 800da18:	f04f 33ff 	mov.w	r3, #4294967295
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3724      	adds	r7, #36	; 0x24
 800da20:	46bd      	mov	sp, r7
 800da22:	bd90      	pop	{r4, r7, pc}
 800da24:	08016550 	.word	0x08016550
 800da28:	080168e4 	.word	0x080168e4
 800da2c:	080165a4 	.word	0x080165a4
 800da30:	08016908 	.word	0x08016908
 800da34:	0801692c 	.word	0x0801692c
 800da38:	0801693c 	.word	0x0801693c
 800da3c:	0801694c 	.word	0x0801694c

0800da40 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800da40:	b590      	push	{r4, r7, lr}
 800da42:	b085      	sub	sp, #20
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d106      	bne.n	800da5c <tcp_send_fin+0x1c>
 800da4e:	4b21      	ldr	r3, [pc, #132]	; (800dad4 <tcp_send_fin+0x94>)
 800da50:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800da54:	4920      	ldr	r1, [pc, #128]	; (800dad8 <tcp_send_fin+0x98>)
 800da56:	4821      	ldr	r0, [pc, #132]	; (800dadc <tcp_send_fin+0x9c>)
 800da58:	f006 f902 	bl	8013c60 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da60:	2b00      	cmp	r3, #0
 800da62:	d02e      	beq.n	800dac2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da68:	60fb      	str	r3, [r7, #12]
 800da6a:	e002      	b.n	800da72 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d1f8      	bne.n	800da6c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	68db      	ldr	r3, [r3, #12]
 800da7e:	899b      	ldrh	r3, [r3, #12]
 800da80:	b29b      	uxth	r3, r3
 800da82:	4618      	mov	r0, r3
 800da84:	f7fa f92c 	bl	8007ce0 <lwip_htons>
 800da88:	4603      	mov	r3, r0
 800da8a:	b2db      	uxtb	r3, r3
 800da8c:	f003 0307 	and.w	r3, r3, #7
 800da90:	2b00      	cmp	r3, #0
 800da92:	d116      	bne.n	800dac2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	68db      	ldr	r3, [r3, #12]
 800da98:	899b      	ldrh	r3, [r3, #12]
 800da9a:	b29c      	uxth	r4, r3
 800da9c:	2001      	movs	r0, #1
 800da9e:	f7fa f91f 	bl	8007ce0 <lwip_htons>
 800daa2:	4603      	mov	r3, r0
 800daa4:	461a      	mov	r2, r3
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	68db      	ldr	r3, [r3, #12]
 800daaa:	4322      	orrs	r2, r4
 800daac:	b292      	uxth	r2, r2
 800daae:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	8b5b      	ldrh	r3, [r3, #26]
 800dab4:	f043 0320 	orr.w	r3, r3, #32
 800dab8:	b29a      	uxth	r2, r3
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800dabe:	2300      	movs	r3, #0
 800dac0:	e004      	b.n	800dacc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800dac2:	2101      	movs	r1, #1
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f000 f80b 	bl	800dae0 <tcp_enqueue_flags>
 800daca:	4603      	mov	r3, r0
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3714      	adds	r7, #20
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd90      	pop	{r4, r7, pc}
 800dad4:	08016550 	.word	0x08016550
 800dad8:	08016958 	.word	0x08016958
 800dadc:	080165a4 	.word	0x080165a4

0800dae0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b08a      	sub	sp, #40	; 0x28
 800dae4:	af02      	add	r7, sp, #8
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	460b      	mov	r3, r1
 800daea:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800daec:	2300      	movs	r3, #0
 800daee:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800daf0:	2300      	movs	r3, #0
 800daf2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800daf4:	78fb      	ldrb	r3, [r7, #3]
 800daf6:	f003 0303 	and.w	r3, r3, #3
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d106      	bne.n	800db0c <tcp_enqueue_flags+0x2c>
 800dafe:	4b67      	ldr	r3, [pc, #412]	; (800dc9c <tcp_enqueue_flags+0x1bc>)
 800db00:	f240 4211 	movw	r2, #1041	; 0x411
 800db04:	4966      	ldr	r1, [pc, #408]	; (800dca0 <tcp_enqueue_flags+0x1c0>)
 800db06:	4867      	ldr	r0, [pc, #412]	; (800dca4 <tcp_enqueue_flags+0x1c4>)
 800db08:	f006 f8aa 	bl	8013c60 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d106      	bne.n	800db20 <tcp_enqueue_flags+0x40>
 800db12:	4b62      	ldr	r3, [pc, #392]	; (800dc9c <tcp_enqueue_flags+0x1bc>)
 800db14:	f240 4213 	movw	r2, #1043	; 0x413
 800db18:	4963      	ldr	r1, [pc, #396]	; (800dca8 <tcp_enqueue_flags+0x1c8>)
 800db1a:	4862      	ldr	r0, [pc, #392]	; (800dca4 <tcp_enqueue_flags+0x1c4>)
 800db1c:	f006 f8a0 	bl	8013c60 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800db20:	78fb      	ldrb	r3, [r7, #3]
 800db22:	f003 0302 	and.w	r3, r3, #2
 800db26:	2b00      	cmp	r3, #0
 800db28:	d001      	beq.n	800db2e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800db2a:	2301      	movs	r3, #1
 800db2c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800db2e:	7ffb      	ldrb	r3, [r7, #31]
 800db30:	009b      	lsls	r3, r3, #2
 800db32:	b2db      	uxtb	r3, r3
 800db34:	f003 0304 	and.w	r3, r3, #4
 800db38:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800db3a:	7dfb      	ldrb	r3, [r7, #23]
 800db3c:	b29b      	uxth	r3, r3
 800db3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800db42:	4619      	mov	r1, r3
 800db44:	2036      	movs	r0, #54	; 0x36
 800db46:	f7fb f951 	bl	8008dec <pbuf_alloc>
 800db4a:	6138      	str	r0, [r7, #16]
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d109      	bne.n	800db66 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	8b5b      	ldrh	r3, [r3, #26]
 800db56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db5a:	b29a      	uxth	r2, r3
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800db60:	f04f 33ff 	mov.w	r3, #4294967295
 800db64:	e095      	b.n	800dc92 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	895a      	ldrh	r2, [r3, #10]
 800db6a:	7dfb      	ldrb	r3, [r7, #23]
 800db6c:	b29b      	uxth	r3, r3
 800db6e:	429a      	cmp	r2, r3
 800db70:	d206      	bcs.n	800db80 <tcp_enqueue_flags+0xa0>
 800db72:	4b4a      	ldr	r3, [pc, #296]	; (800dc9c <tcp_enqueue_flags+0x1bc>)
 800db74:	f240 4239 	movw	r2, #1081	; 0x439
 800db78:	494c      	ldr	r1, [pc, #304]	; (800dcac <tcp_enqueue_flags+0x1cc>)
 800db7a:	484a      	ldr	r0, [pc, #296]	; (800dca4 <tcp_enqueue_flags+0x1c4>)
 800db7c:	f006 f870 	bl	8013c60 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800db84:	78fa      	ldrb	r2, [r7, #3]
 800db86:	7ffb      	ldrb	r3, [r7, #31]
 800db88:	9300      	str	r3, [sp, #0]
 800db8a:	460b      	mov	r3, r1
 800db8c:	6939      	ldr	r1, [r7, #16]
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f7ff fd70 	bl	800d674 <tcp_create_segment>
 800db94:	60f8      	str	r0, [r7, #12]
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d109      	bne.n	800dbb0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	8b5b      	ldrh	r3, [r3, #26]
 800dba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dba4:	b29a      	uxth	r2, r3
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800dbaa:	f04f 33ff 	mov.w	r3, #4294967295
 800dbae:	e070      	b.n	800dc92 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	68db      	ldr	r3, [r3, #12]
 800dbb4:	f003 0303 	and.w	r3, r3, #3
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d006      	beq.n	800dbca <tcp_enqueue_flags+0xea>
 800dbbc:	4b37      	ldr	r3, [pc, #220]	; (800dc9c <tcp_enqueue_flags+0x1bc>)
 800dbbe:	f240 4242 	movw	r2, #1090	; 0x442
 800dbc2:	493b      	ldr	r1, [pc, #236]	; (800dcb0 <tcp_enqueue_flags+0x1d0>)
 800dbc4:	4837      	ldr	r0, [pc, #220]	; (800dca4 <tcp_enqueue_flags+0x1c4>)
 800dbc6:	f006 f84b 	bl	8013c60 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	891b      	ldrh	r3, [r3, #8]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d006      	beq.n	800dbe0 <tcp_enqueue_flags+0x100>
 800dbd2:	4b32      	ldr	r3, [pc, #200]	; (800dc9c <tcp_enqueue_flags+0x1bc>)
 800dbd4:	f240 4243 	movw	r2, #1091	; 0x443
 800dbd8:	4936      	ldr	r1, [pc, #216]	; (800dcb4 <tcp_enqueue_flags+0x1d4>)
 800dbda:	4832      	ldr	r0, [pc, #200]	; (800dca4 <tcp_enqueue_flags+0x1c4>)
 800dbdc:	f006 f840 	bl	8013c60 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d103      	bne.n	800dbf0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	68fa      	ldr	r2, [r7, #12]
 800dbec:	66da      	str	r2, [r3, #108]	; 0x6c
 800dbee:	e00d      	b.n	800dc0c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbf4:	61bb      	str	r3, [r7, #24]
 800dbf6:	e002      	b.n	800dbfe <tcp_enqueue_flags+0x11e>
 800dbf8:	69bb      	ldr	r3, [r7, #24]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	61bb      	str	r3, [r7, #24]
 800dbfe:	69bb      	ldr	r3, [r7, #24]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d1f8      	bne.n	800dbf8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800dc06:	69bb      	ldr	r3, [r7, #24]
 800dc08:	68fa      	ldr	r2, [r7, #12]
 800dc0a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800dc14:	78fb      	ldrb	r3, [r7, #3]
 800dc16:	f003 0302 	and.w	r3, r3, #2
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d104      	bne.n	800dc28 <tcp_enqueue_flags+0x148>
 800dc1e:	78fb      	ldrb	r3, [r7, #3]
 800dc20:	f003 0301 	and.w	r3, r3, #1
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d004      	beq.n	800dc32 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc2c:	1c5a      	adds	r2, r3, #1
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800dc32:	78fb      	ldrb	r3, [r7, #3]
 800dc34:	f003 0301 	and.w	r3, r3, #1
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d006      	beq.n	800dc4a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	8b5b      	ldrh	r3, [r3, #26]
 800dc40:	f043 0320 	orr.w	r3, r3, #32
 800dc44:	b29a      	uxth	r2, r3
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	685b      	ldr	r3, [r3, #4]
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7fb fc38 	bl	80094c4 <pbuf_clen>
 800dc54:	4603      	mov	r3, r0
 800dc56:	461a      	mov	r2, r3
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc5e:	4413      	add	r3, r2
 800dc60:	b29a      	uxth	r2, r3
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d00e      	beq.n	800dc90 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d10a      	bne.n	800dc90 <tcp_enqueue_flags+0x1b0>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d106      	bne.n	800dc90 <tcp_enqueue_flags+0x1b0>
 800dc82:	4b06      	ldr	r3, [pc, #24]	; (800dc9c <tcp_enqueue_flags+0x1bc>)
 800dc84:	f240 4265 	movw	r2, #1125	; 0x465
 800dc88:	490b      	ldr	r1, [pc, #44]	; (800dcb8 <tcp_enqueue_flags+0x1d8>)
 800dc8a:	4806      	ldr	r0, [pc, #24]	; (800dca4 <tcp_enqueue_flags+0x1c4>)
 800dc8c:	f005 ffe8 	bl	8013c60 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800dc90:	2300      	movs	r3, #0
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3720      	adds	r7, #32
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	08016550 	.word	0x08016550
 800dca0:	08016974 	.word	0x08016974
 800dca4:	080165a4 	.word	0x080165a4
 800dca8:	080169cc 	.word	0x080169cc
 800dcac:	080169ec 	.word	0x080169ec
 800dcb0:	08016a28 	.word	0x08016a28
 800dcb4:	08016a40 	.word	0x08016a40
 800dcb8:	08016a6c 	.word	0x08016a6c

0800dcbc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800dcbc:	b5b0      	push	{r4, r5, r7, lr}
 800dcbe:	b08a      	sub	sp, #40	; 0x28
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d106      	bne.n	800dcd8 <tcp_output+0x1c>
 800dcca:	4b8a      	ldr	r3, [pc, #552]	; (800def4 <tcp_output+0x238>)
 800dccc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800dcd0:	4989      	ldr	r1, [pc, #548]	; (800def8 <tcp_output+0x23c>)
 800dcd2:	488a      	ldr	r0, [pc, #552]	; (800defc <tcp_output+0x240>)
 800dcd4:	f005 ffc4 	bl	8013c60 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	7d1b      	ldrb	r3, [r3, #20]
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	d106      	bne.n	800dcee <tcp_output+0x32>
 800dce0:	4b84      	ldr	r3, [pc, #528]	; (800def4 <tcp_output+0x238>)
 800dce2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800dce6:	4986      	ldr	r1, [pc, #536]	; (800df00 <tcp_output+0x244>)
 800dce8:	4884      	ldr	r0, [pc, #528]	; (800defc <tcp_output+0x240>)
 800dcea:	f005 ffb9 	bl	8013c60 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800dcee:	4b85      	ldr	r3, [pc, #532]	; (800df04 <tcp_output+0x248>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	687a      	ldr	r2, [r7, #4]
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d101      	bne.n	800dcfc <tcp_output+0x40>
    return ERR_OK;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	e1ce      	b.n	800e09a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd08:	4293      	cmp	r3, r2
 800dd0a:	bf28      	it	cs
 800dd0c:	4613      	movcs	r3, r2
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd16:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800dd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d10b      	bne.n	800dd36 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	8b5b      	ldrh	r3, [r3, #26]
 800dd22:	f003 0302 	and.w	r3, r3, #2
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	f000 81aa 	beq.w	800e080 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f000 fdcb 	bl	800e8c8 <tcp_send_empty_ack>
 800dd32:	4603      	mov	r3, r0
 800dd34:	e1b1      	b.n	800e09a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800dd36:	6879      	ldr	r1, [r7, #4]
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	3304      	adds	r3, #4
 800dd3c:	461a      	mov	r2, r3
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f7ff fc7c 	bl	800d63c <tcp_route>
 800dd44:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d102      	bne.n	800dd52 <tcp_output+0x96>
    return ERR_RTE;
 800dd4c:	f06f 0303 	mvn.w	r3, #3
 800dd50:	e1a3      	b.n	800e09a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d003      	beq.n	800dd60 <tcp_output+0xa4>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d111      	bne.n	800dd84 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d002      	beq.n	800dd6c <tcp_output+0xb0>
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	3304      	adds	r3, #4
 800dd6a:	e000      	b.n	800dd6e <tcp_output+0xb2>
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d102      	bne.n	800dd7c <tcp_output+0xc0>
      return ERR_RTE;
 800dd76:	f06f 0303 	mvn.w	r3, #3
 800dd7a:	e18e      	b.n	800e09a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	681a      	ldr	r2, [r3, #0]
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800dd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd86:	68db      	ldr	r3, [r3, #12]
 800dd88:	685b      	ldr	r3, [r3, #4]
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f7f9 ffbd 	bl	8007d0a <lwip_htonl>
 800dd90:	4602      	mov	r2, r0
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd96:	1ad3      	subs	r3, r2, r3
 800dd98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd9a:	8912      	ldrh	r2, [r2, #8]
 800dd9c:	4413      	add	r3, r2
 800dd9e:	69ba      	ldr	r2, [r7, #24]
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d227      	bcs.n	800ddf4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ddaa:	461a      	mov	r2, r3
 800ddac:	69bb      	ldr	r3, [r7, #24]
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	d114      	bne.n	800dddc <tcp_output+0x120>
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d110      	bne.n	800dddc <tcp_output+0x120>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d10b      	bne.n	800dddc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2201      	movs	r2, #1
 800ddd0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	8b5b      	ldrh	r3, [r3, #26]
 800dde0:	f003 0302 	and.w	r3, r3, #2
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	f000 814d 	beq.w	800e084 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f000 fd6c 	bl	800e8c8 <tcp_send_empty_ack>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	e152      	b.n	800e09a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de00:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800de02:	6a3b      	ldr	r3, [r7, #32]
 800de04:	2b00      	cmp	r3, #0
 800de06:	f000 811c 	beq.w	800e042 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800de0a:	e002      	b.n	800de12 <tcp_output+0x156>
 800de0c:	6a3b      	ldr	r3, [r7, #32]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	623b      	str	r3, [r7, #32]
 800de12:	6a3b      	ldr	r3, [r7, #32]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d1f8      	bne.n	800de0c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800de1a:	e112      	b.n	800e042 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800de1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de1e:	68db      	ldr	r3, [r3, #12]
 800de20:	899b      	ldrh	r3, [r3, #12]
 800de22:	b29b      	uxth	r3, r3
 800de24:	4618      	mov	r0, r3
 800de26:	f7f9 ff5b 	bl	8007ce0 <lwip_htons>
 800de2a:	4603      	mov	r3, r0
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	f003 0304 	and.w	r3, r3, #4
 800de32:	2b00      	cmp	r3, #0
 800de34:	d006      	beq.n	800de44 <tcp_output+0x188>
 800de36:	4b2f      	ldr	r3, [pc, #188]	; (800def4 <tcp_output+0x238>)
 800de38:	f240 5236 	movw	r2, #1334	; 0x536
 800de3c:	4932      	ldr	r1, [pc, #200]	; (800df08 <tcp_output+0x24c>)
 800de3e:	482f      	ldr	r0, [pc, #188]	; (800defc <tcp_output+0x240>)
 800de40:	f005 ff0e 	bl	8013c60 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d01f      	beq.n	800de8c <tcp_output+0x1d0>
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	8b5b      	ldrh	r3, [r3, #26]
 800de50:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800de54:	2b00      	cmp	r3, #0
 800de56:	d119      	bne.n	800de8c <tcp_output+0x1d0>
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d00b      	beq.n	800de78 <tcp_output+0x1bc>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d110      	bne.n	800de8c <tcp_output+0x1d0>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de6e:	891a      	ldrh	r2, [r3, #8]
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de74:	429a      	cmp	r2, r3
 800de76:	d209      	bcs.n	800de8c <tcp_output+0x1d0>
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d004      	beq.n	800de8c <tcp_output+0x1d0>
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800de88:	2b08      	cmp	r3, #8
 800de8a:	d901      	bls.n	800de90 <tcp_output+0x1d4>
 800de8c:	2301      	movs	r3, #1
 800de8e:	e000      	b.n	800de92 <tcp_output+0x1d6>
 800de90:	2300      	movs	r3, #0
 800de92:	2b00      	cmp	r3, #0
 800de94:	d106      	bne.n	800dea4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	8b5b      	ldrh	r3, [r3, #26]
 800de9a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	f000 80e4 	beq.w	800e06c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	7d1b      	ldrb	r3, [r3, #20]
 800dea8:	2b02      	cmp	r3, #2
 800deaa:	d00d      	beq.n	800dec8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800deac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deae:	68db      	ldr	r3, [r3, #12]
 800deb0:	899b      	ldrh	r3, [r3, #12]
 800deb2:	b29c      	uxth	r4, r3
 800deb4:	2010      	movs	r0, #16
 800deb6:	f7f9 ff13 	bl	8007ce0 <lwip_htons>
 800deba:	4603      	mov	r3, r0
 800debc:	461a      	mov	r2, r3
 800debe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec0:	68db      	ldr	r3, [r3, #12]
 800dec2:	4322      	orrs	r2, r4
 800dec4:	b292      	uxth	r2, r2
 800dec6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800dec8:	697a      	ldr	r2, [r7, #20]
 800deca:	6879      	ldr	r1, [r7, #4]
 800decc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dece:	f000 f909 	bl	800e0e4 <tcp_output_segment>
 800ded2:	4603      	mov	r3, r0
 800ded4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ded6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d016      	beq.n	800df0c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	8b5b      	ldrh	r3, [r3, #26]
 800dee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dee6:	b29a      	uxth	r2, r3
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	835a      	strh	r2, [r3, #26]
      return err;
 800deec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800def0:	e0d3      	b.n	800e09a <tcp_output+0x3de>
 800def2:	bf00      	nop
 800def4:	08016550 	.word	0x08016550
 800def8:	08016a94 	.word	0x08016a94
 800defc:	080165a4 	.word	0x080165a4
 800df00:	08016aac 	.word	0x08016aac
 800df04:	2000af0c 	.word	0x2000af0c
 800df08:	08016ad4 	.word	0x08016ad4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800df0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0e:	681a      	ldr	r2, [r3, #0]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	7d1b      	ldrb	r3, [r3, #20]
 800df18:	2b02      	cmp	r3, #2
 800df1a:	d006      	beq.n	800df2a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	8b5b      	ldrh	r3, [r3, #26]
 800df20:	f023 0303 	bic.w	r3, r3, #3
 800df24:	b29a      	uxth	r2, r3
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800df2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2c:	68db      	ldr	r3, [r3, #12]
 800df2e:	685b      	ldr	r3, [r3, #4]
 800df30:	4618      	mov	r0, r3
 800df32:	f7f9 feea 	bl	8007d0a <lwip_htonl>
 800df36:	4604      	mov	r4, r0
 800df38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3a:	891b      	ldrh	r3, [r3, #8]
 800df3c:	461d      	mov	r5, r3
 800df3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df40:	68db      	ldr	r3, [r3, #12]
 800df42:	899b      	ldrh	r3, [r3, #12]
 800df44:	b29b      	uxth	r3, r3
 800df46:	4618      	mov	r0, r3
 800df48:	f7f9 feca 	bl	8007ce0 <lwip_htons>
 800df4c:	4603      	mov	r3, r0
 800df4e:	b2db      	uxtb	r3, r3
 800df50:	f003 0303 	and.w	r3, r3, #3
 800df54:	2b00      	cmp	r3, #0
 800df56:	d001      	beq.n	800df5c <tcp_output+0x2a0>
 800df58:	2301      	movs	r3, #1
 800df5a:	e000      	b.n	800df5e <tcp_output+0x2a2>
 800df5c:	2300      	movs	r3, #0
 800df5e:	442b      	add	r3, r5
 800df60:	4423      	add	r3, r4
 800df62:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	1ad3      	subs	r3, r2, r3
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	da02      	bge.n	800df76 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	68ba      	ldr	r2, [r7, #8]
 800df74:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800df76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df78:	891b      	ldrh	r3, [r3, #8]
 800df7a:	461c      	mov	r4, r3
 800df7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7e:	68db      	ldr	r3, [r3, #12]
 800df80:	899b      	ldrh	r3, [r3, #12]
 800df82:	b29b      	uxth	r3, r3
 800df84:	4618      	mov	r0, r3
 800df86:	f7f9 feab 	bl	8007ce0 <lwip_htons>
 800df8a:	4603      	mov	r3, r0
 800df8c:	b2db      	uxtb	r3, r3
 800df8e:	f003 0303 	and.w	r3, r3, #3
 800df92:	2b00      	cmp	r3, #0
 800df94:	d001      	beq.n	800df9a <tcp_output+0x2de>
 800df96:	2301      	movs	r3, #1
 800df98:	e000      	b.n	800df9c <tcp_output+0x2e0>
 800df9a:	2300      	movs	r3, #0
 800df9c:	4423      	add	r3, r4
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d049      	beq.n	800e036 <tcp_output+0x37a>
      seg->next = NULL;
 800dfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d105      	bne.n	800dfbc <tcp_output+0x300>
        pcb->unacked = seg;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfb4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800dfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb8:	623b      	str	r3, [r7, #32]
 800dfba:	e03f      	b.n	800e03c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800dfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfbe:	68db      	ldr	r3, [r3, #12]
 800dfc0:	685b      	ldr	r3, [r3, #4]
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7f9 fea1 	bl	8007d0a <lwip_htonl>
 800dfc8:	4604      	mov	r4, r0
 800dfca:	6a3b      	ldr	r3, [r7, #32]
 800dfcc:	68db      	ldr	r3, [r3, #12]
 800dfce:	685b      	ldr	r3, [r3, #4]
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7f9 fe9a 	bl	8007d0a <lwip_htonl>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	1ae3      	subs	r3, r4, r3
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	da24      	bge.n	800e028 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	3370      	adds	r3, #112	; 0x70
 800dfe2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800dfe4:	e002      	b.n	800dfec <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800dfe6:	69fb      	ldr	r3, [r7, #28]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800dfec:	69fb      	ldr	r3, [r7, #28]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d011      	beq.n	800e018 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800dff4:	69fb      	ldr	r3, [r7, #28]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	68db      	ldr	r3, [r3, #12]
 800dffa:	685b      	ldr	r3, [r3, #4]
 800dffc:	4618      	mov	r0, r3
 800dffe:	f7f9 fe84 	bl	8007d0a <lwip_htonl>
 800e002:	4604      	mov	r4, r0
 800e004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e006:	68db      	ldr	r3, [r3, #12]
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7f9 fe7d 	bl	8007d0a <lwip_htonl>
 800e010:	4603      	mov	r3, r0
 800e012:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e014:	2b00      	cmp	r3, #0
 800e016:	dbe6      	blt.n	800dfe6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e018:	69fb      	ldr	r3, [r7, #28]
 800e01a:	681a      	ldr	r2, [r3, #0]
 800e01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e020:	69fb      	ldr	r3, [r7, #28]
 800e022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e024:	601a      	str	r2, [r3, #0]
 800e026:	e009      	b.n	800e03c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e028:	6a3b      	ldr	r3, [r7, #32]
 800e02a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e02c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e02e:	6a3b      	ldr	r3, [r7, #32]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	623b      	str	r3, [r7, #32]
 800e034:	e002      	b.n	800e03c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e036:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e038:	f7fc fc3f 	bl	800a8ba <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e040:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e044:	2b00      	cmp	r3, #0
 800e046:	d012      	beq.n	800e06e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e04a:	68db      	ldr	r3, [r3, #12]
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	4618      	mov	r0, r3
 800e050:	f7f9 fe5b 	bl	8007d0a <lwip_htonl>
 800e054:	4602      	mov	r2, r0
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e05a:	1ad3      	subs	r3, r2, r3
 800e05c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e05e:	8912      	ldrh	r2, [r2, #8]
 800e060:	4413      	add	r3, r2
  while (seg != NULL &&
 800e062:	69ba      	ldr	r2, [r7, #24]
 800e064:	429a      	cmp	r2, r3
 800e066:	f4bf aed9 	bcs.w	800de1c <tcp_output+0x160>
 800e06a:	e000      	b.n	800e06e <tcp_output+0x3b2>
      break;
 800e06c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e072:	2b00      	cmp	r3, #0
 800e074:	d108      	bne.n	800e088 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2200      	movs	r2, #0
 800e07a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800e07e:	e004      	b.n	800e08a <tcp_output+0x3ce>
    goto output_done;
 800e080:	bf00      	nop
 800e082:	e002      	b.n	800e08a <tcp_output+0x3ce>
    goto output_done;
 800e084:	bf00      	nop
 800e086:	e000      	b.n	800e08a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e088:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	8b5b      	ldrh	r3, [r3, #26]
 800e08e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e092:	b29a      	uxth	r2, r3
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e098:	2300      	movs	r3, #0
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	3728      	adds	r7, #40	; 0x28
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bdb0      	pop	{r4, r5, r7, pc}
 800e0a2:	bf00      	nop

0800e0a4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d106      	bne.n	800e0c0 <tcp_output_segment_busy+0x1c>
 800e0b2:	4b09      	ldr	r3, [pc, #36]	; (800e0d8 <tcp_output_segment_busy+0x34>)
 800e0b4:	f240 529a 	movw	r2, #1434	; 0x59a
 800e0b8:	4908      	ldr	r1, [pc, #32]	; (800e0dc <tcp_output_segment_busy+0x38>)
 800e0ba:	4809      	ldr	r0, [pc, #36]	; (800e0e0 <tcp_output_segment_busy+0x3c>)
 800e0bc:	f005 fdd0 	bl	8013c60 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	685b      	ldr	r3, [r3, #4]
 800e0c4:	7b9b      	ldrb	r3, [r3, #14]
 800e0c6:	2b01      	cmp	r3, #1
 800e0c8:	d001      	beq.n	800e0ce <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	e000      	b.n	800e0d0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e0ce:	2300      	movs	r3, #0
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3708      	adds	r7, #8
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}
 800e0d8:	08016550 	.word	0x08016550
 800e0dc:	08016aec 	.word	0x08016aec
 800e0e0:	080165a4 	.word	0x080165a4

0800e0e4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e0e4:	b5b0      	push	{r4, r5, r7, lr}
 800e0e6:	b08c      	sub	sp, #48	; 0x30
 800e0e8:	af04      	add	r7, sp, #16
 800e0ea:	60f8      	str	r0, [r7, #12]
 800e0ec:	60b9      	str	r1, [r7, #8]
 800e0ee:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d106      	bne.n	800e104 <tcp_output_segment+0x20>
 800e0f6:	4b63      	ldr	r3, [pc, #396]	; (800e284 <tcp_output_segment+0x1a0>)
 800e0f8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800e0fc:	4962      	ldr	r1, [pc, #392]	; (800e288 <tcp_output_segment+0x1a4>)
 800e0fe:	4863      	ldr	r0, [pc, #396]	; (800e28c <tcp_output_segment+0x1a8>)
 800e100:	f005 fdae 	bl	8013c60 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d106      	bne.n	800e118 <tcp_output_segment+0x34>
 800e10a:	4b5e      	ldr	r3, [pc, #376]	; (800e284 <tcp_output_segment+0x1a0>)
 800e10c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800e110:	495f      	ldr	r1, [pc, #380]	; (800e290 <tcp_output_segment+0x1ac>)
 800e112:	485e      	ldr	r0, [pc, #376]	; (800e28c <tcp_output_segment+0x1a8>)
 800e114:	f005 fda4 	bl	8013c60 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d106      	bne.n	800e12c <tcp_output_segment+0x48>
 800e11e:	4b59      	ldr	r3, [pc, #356]	; (800e284 <tcp_output_segment+0x1a0>)
 800e120:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800e124:	495b      	ldr	r1, [pc, #364]	; (800e294 <tcp_output_segment+0x1b0>)
 800e126:	4859      	ldr	r0, [pc, #356]	; (800e28c <tcp_output_segment+0x1a8>)
 800e128:	f005 fd9a 	bl	8013c60 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e12c:	68f8      	ldr	r0, [r7, #12]
 800e12e:	f7ff ffb9 	bl	800e0a4 <tcp_output_segment_busy>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	d001      	beq.n	800e13c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e138:	2300      	movs	r3, #0
 800e13a:	e09f      	b.n	800e27c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	68dc      	ldr	r4, [r3, #12]
 800e144:	4610      	mov	r0, r2
 800e146:	f7f9 fde0 	bl	8007d0a <lwip_htonl>
 800e14a:	4603      	mov	r3, r0
 800e14c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	68dc      	ldr	r4, [r3, #12]
 800e156:	4610      	mov	r0, r2
 800e158:	f7f9 fdc2 	bl	8007ce0 <lwip_htons>
 800e15c:	4603      	mov	r3, r0
 800e15e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e164:	68ba      	ldr	r2, [r7, #8]
 800e166:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e168:	441a      	add	r2, r3
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	68db      	ldr	r3, [r3, #12]
 800e172:	3314      	adds	r3, #20
 800e174:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	7a9b      	ldrb	r3, [r3, #10]
 800e17a:	f003 0301 	and.w	r3, r3, #1
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d015      	beq.n	800e1ae <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	3304      	adds	r3, #4
 800e186:	461a      	mov	r2, r3
 800e188:	6879      	ldr	r1, [r7, #4]
 800e18a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e18e:	f7fc fe8b 	bl	800aea8 <tcp_eff_send_mss_netif>
 800e192:	4603      	mov	r3, r0
 800e194:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e196:	8b7b      	ldrh	r3, [r7, #26]
 800e198:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800e19c:	4618      	mov	r0, r3
 800e19e:	f7f9 fdb4 	bl	8007d0a <lwip_htonl>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	69fb      	ldr	r3, [r7, #28]
 800e1a6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e1a8:	69fb      	ldr	r3, [r7, #28]
 800e1aa:	3304      	adds	r3, #4
 800e1ac:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	da02      	bge.n	800e1be <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d10c      	bne.n	800e1e0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e1c6:	4b34      	ldr	r3, [pc, #208]	; (800e298 <tcp_output_segment+0x1b4>)
 800e1c8:	681a      	ldr	r2, [r3, #0]
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	68db      	ldr	r3, [r3, #12]
 800e1d2:	685b      	ldr	r3, [r3, #4]
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f7f9 fd98 	bl	8007d0a <lwip_htonl>
 800e1da:	4602      	mov	r2, r0
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	68da      	ldr	r2, [r3, #12]
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	685b      	ldr	r3, [r3, #4]
 800e1ea:	1ad3      	subs	r3, r2, r3
 800e1ec:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	685b      	ldr	r3, [r3, #4]
 800e1f2:	8959      	ldrh	r1, [r3, #10]
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	685b      	ldr	r3, [r3, #4]
 800e1f8:	8b3a      	ldrh	r2, [r7, #24]
 800e1fa:	1a8a      	subs	r2, r1, r2
 800e1fc:	b292      	uxth	r2, r2
 800e1fe:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	685b      	ldr	r3, [r3, #4]
 800e204:	8919      	ldrh	r1, [r3, #8]
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	685b      	ldr	r3, [r3, #4]
 800e20a:	8b3a      	ldrh	r2, [r7, #24]
 800e20c:	1a8a      	subs	r2, r1, r2
 800e20e:	b292      	uxth	r2, r2
 800e210:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	685b      	ldr	r3, [r3, #4]
 800e216:	68fa      	ldr	r2, [r7, #12]
 800e218:	68d2      	ldr	r2, [r2, #12]
 800e21a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	68db      	ldr	r3, [r3, #12]
 800e220:	2200      	movs	r2, #0
 800e222:	741a      	strb	r2, [r3, #16]
 800e224:	2200      	movs	r2, #0
 800e226:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	68db      	ldr	r3, [r3, #12]
 800e22c:	f103 0214 	add.w	r2, r3, #20
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	7a9b      	ldrb	r3, [r3, #10]
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	f003 0304 	and.w	r3, r3, #4
 800e23a:	4413      	add	r3, r2
 800e23c:	69fa      	ldr	r2, [r7, #28]
 800e23e:	429a      	cmp	r2, r3
 800e240:	d006      	beq.n	800e250 <tcp_output_segment+0x16c>
 800e242:	4b10      	ldr	r3, [pc, #64]	; (800e284 <tcp_output_segment+0x1a0>)
 800e244:	f240 621c 	movw	r2, #1564	; 0x61c
 800e248:	4914      	ldr	r1, [pc, #80]	; (800e29c <tcp_output_segment+0x1b8>)
 800e24a:	4810      	ldr	r0, [pc, #64]	; (800e28c <tcp_output_segment+0x1a8>)
 800e24c:	f005 fd08 	bl	8013c60 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	6858      	ldr	r0, [r3, #4]
 800e254:	68b9      	ldr	r1, [r7, #8]
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	1d1c      	adds	r4, r3, #4
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	7add      	ldrb	r5, [r3, #11]
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	7a9b      	ldrb	r3, [r3, #10]
 800e262:	687a      	ldr	r2, [r7, #4]
 800e264:	9202      	str	r2, [sp, #8]
 800e266:	2206      	movs	r2, #6
 800e268:	9201      	str	r2, [sp, #4]
 800e26a:	9300      	str	r3, [sp, #0]
 800e26c:	462b      	mov	r3, r5
 800e26e:	4622      	mov	r2, r4
 800e270:	f004 fbee 	bl	8012a50 <ip4_output_if>
 800e274:	4603      	mov	r3, r0
 800e276:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e278:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3720      	adds	r7, #32
 800e280:	46bd      	mov	sp, r7
 800e282:	bdb0      	pop	{r4, r5, r7, pc}
 800e284:	08016550 	.word	0x08016550
 800e288:	08016b14 	.word	0x08016b14
 800e28c:	080165a4 	.word	0x080165a4
 800e290:	08016b34 	.word	0x08016b34
 800e294:	08016b54 	.word	0x08016b54
 800e298:	2000aec0 	.word	0x2000aec0
 800e29c:	08016b78 	.word	0x08016b78

0800e2a0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e2a0:	b5b0      	push	{r4, r5, r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d106      	bne.n	800e2bc <tcp_rexmit_rto_prepare+0x1c>
 800e2ae:	4b31      	ldr	r3, [pc, #196]	; (800e374 <tcp_rexmit_rto_prepare+0xd4>)
 800e2b0:	f240 6263 	movw	r2, #1635	; 0x663
 800e2b4:	4930      	ldr	r1, [pc, #192]	; (800e378 <tcp_rexmit_rto_prepare+0xd8>)
 800e2b6:	4831      	ldr	r0, [pc, #196]	; (800e37c <tcp_rexmit_rto_prepare+0xdc>)
 800e2b8:	f005 fcd2 	bl	8013c60 <iprintf>

  if (pcb->unacked == NULL) {
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d102      	bne.n	800e2ca <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e2c4:	f06f 0305 	mvn.w	r3, #5
 800e2c8:	e050      	b.n	800e36c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2ce:	60fb      	str	r3, [r7, #12]
 800e2d0:	e00b      	b.n	800e2ea <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e2d2:	68f8      	ldr	r0, [r7, #12]
 800e2d4:	f7ff fee6 	bl	800e0a4 <tcp_output_segment_busy>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d002      	beq.n	800e2e4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e2de:	f06f 0305 	mvn.w	r3, #5
 800e2e2:	e043      	b.n	800e36c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	60fb      	str	r3, [r7, #12]
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d1ef      	bne.n	800e2d2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e2f2:	68f8      	ldr	r0, [r7, #12]
 800e2f4:	f7ff fed6 	bl	800e0a4 <tcp_output_segment_busy>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d002      	beq.n	800e304 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e2fe:	f06f 0305 	mvn.w	r3, #5
 800e302:	e033      	b.n	800e36c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2200      	movs	r2, #0
 800e318:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	8b5b      	ldrh	r3, [r3, #26]
 800e31e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e322:	b29a      	uxth	r2, r3
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	68db      	ldr	r3, [r3, #12]
 800e32c:	685b      	ldr	r3, [r3, #4]
 800e32e:	4618      	mov	r0, r3
 800e330:	f7f9 fceb 	bl	8007d0a <lwip_htonl>
 800e334:	4604      	mov	r4, r0
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	891b      	ldrh	r3, [r3, #8]
 800e33a:	461d      	mov	r5, r3
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	68db      	ldr	r3, [r3, #12]
 800e340:	899b      	ldrh	r3, [r3, #12]
 800e342:	b29b      	uxth	r3, r3
 800e344:	4618      	mov	r0, r3
 800e346:	f7f9 fccb 	bl	8007ce0 <lwip_htons>
 800e34a:	4603      	mov	r3, r0
 800e34c:	b2db      	uxtb	r3, r3
 800e34e:	f003 0303 	and.w	r3, r3, #3
 800e352:	2b00      	cmp	r3, #0
 800e354:	d001      	beq.n	800e35a <tcp_rexmit_rto_prepare+0xba>
 800e356:	2301      	movs	r3, #1
 800e358:	e000      	b.n	800e35c <tcp_rexmit_rto_prepare+0xbc>
 800e35a:	2300      	movs	r3, #0
 800e35c:	442b      	add	r3, r5
 800e35e:	18e2      	adds	r2, r4, r3
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2200      	movs	r2, #0
 800e368:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800e36a:	2300      	movs	r3, #0
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3710      	adds	r7, #16
 800e370:	46bd      	mov	sp, r7
 800e372:	bdb0      	pop	{r4, r5, r7, pc}
 800e374:	08016550 	.word	0x08016550
 800e378:	08016b8c 	.word	0x08016b8c
 800e37c:	080165a4 	.word	0x080165a4

0800e380 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b082      	sub	sp, #8
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d106      	bne.n	800e39c <tcp_rexmit_rto_commit+0x1c>
 800e38e:	4b0d      	ldr	r3, [pc, #52]	; (800e3c4 <tcp_rexmit_rto_commit+0x44>)
 800e390:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e394:	490c      	ldr	r1, [pc, #48]	; (800e3c8 <tcp_rexmit_rto_commit+0x48>)
 800e396:	480d      	ldr	r0, [pc, #52]	; (800e3cc <tcp_rexmit_rto_commit+0x4c>)
 800e398:	f005 fc62 	bl	8013c60 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e3a2:	2bff      	cmp	r3, #255	; 0xff
 800e3a4:	d007      	beq.n	800e3b6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	b2da      	uxtb	r2, r3
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f7ff fc80 	bl	800dcbc <tcp_output>
}
 800e3bc:	bf00      	nop
 800e3be:	3708      	adds	r7, #8
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}
 800e3c4:	08016550 	.word	0x08016550
 800e3c8:	08016bb0 	.word	0x08016bb0
 800e3cc:	080165a4 	.word	0x080165a4

0800e3d0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b082      	sub	sp, #8
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d106      	bne.n	800e3ec <tcp_rexmit_rto+0x1c>
 800e3de:	4b0a      	ldr	r3, [pc, #40]	; (800e408 <tcp_rexmit_rto+0x38>)
 800e3e0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800e3e4:	4909      	ldr	r1, [pc, #36]	; (800e40c <tcp_rexmit_rto+0x3c>)
 800e3e6:	480a      	ldr	r0, [pc, #40]	; (800e410 <tcp_rexmit_rto+0x40>)
 800e3e8:	f005 fc3a 	bl	8013c60 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f7ff ff57 	bl	800e2a0 <tcp_rexmit_rto_prepare>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d102      	bne.n	800e3fe <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	f7ff ffc1 	bl	800e380 <tcp_rexmit_rto_commit>
  }
}
 800e3fe:	bf00      	nop
 800e400:	3708      	adds	r7, #8
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}
 800e406:	bf00      	nop
 800e408:	08016550 	.word	0x08016550
 800e40c:	08016bd4 	.word	0x08016bd4
 800e410:	080165a4 	.word	0x080165a4

0800e414 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e414:	b590      	push	{r4, r7, lr}
 800e416:	b085      	sub	sp, #20
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d106      	bne.n	800e430 <tcp_rexmit+0x1c>
 800e422:	4b2f      	ldr	r3, [pc, #188]	; (800e4e0 <tcp_rexmit+0xcc>)
 800e424:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e428:	492e      	ldr	r1, [pc, #184]	; (800e4e4 <tcp_rexmit+0xd0>)
 800e42a:	482f      	ldr	r0, [pc, #188]	; (800e4e8 <tcp_rexmit+0xd4>)
 800e42c:	f005 fc18 	bl	8013c60 <iprintf>

  if (pcb->unacked == NULL) {
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e434:	2b00      	cmp	r3, #0
 800e436:	d102      	bne.n	800e43e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e438:	f06f 0305 	mvn.w	r3, #5
 800e43c:	e04c      	b.n	800e4d8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e442:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e444:	68b8      	ldr	r0, [r7, #8]
 800e446:	f7ff fe2d 	bl	800e0a4 <tcp_output_segment_busy>
 800e44a:	4603      	mov	r3, r0
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d002      	beq.n	800e456 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e450:	f06f 0305 	mvn.w	r3, #5
 800e454:	e040      	b.n	800e4d8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	681a      	ldr	r2, [r3, #0]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	336c      	adds	r3, #108	; 0x6c
 800e462:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e464:	e002      	b.n	800e46c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d011      	beq.n	800e498 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	68db      	ldr	r3, [r3, #12]
 800e47a:	685b      	ldr	r3, [r3, #4]
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7f9 fc44 	bl	8007d0a <lwip_htonl>
 800e482:	4604      	mov	r4, r0
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	68db      	ldr	r3, [r3, #12]
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7f9 fc3d 	bl	8007d0a <lwip_htonl>
 800e490:	4603      	mov	r3, r0
 800e492:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e494:	2b00      	cmp	r3, #0
 800e496:	dbe6      	blt.n	800e466 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	681a      	ldr	r2, [r3, #0]
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	68ba      	ldr	r2, [r7, #8]
 800e4a4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d103      	bne.n	800e4b6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e4bc:	2bff      	cmp	r3, #255	; 0xff
 800e4be:	d007      	beq.n	800e4d0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e4c6:	3301      	adds	r3, #1
 800e4c8:	b2da      	uxtb	r2, r3
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e4d6:	2300      	movs	r3, #0
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3714      	adds	r7, #20
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd90      	pop	{r4, r7, pc}
 800e4e0:	08016550 	.word	0x08016550
 800e4e4:	08016bf0 	.word	0x08016bf0
 800e4e8:	080165a4 	.word	0x080165a4

0800e4ec <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b082      	sub	sp, #8
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d106      	bne.n	800e508 <tcp_rexmit_fast+0x1c>
 800e4fa:	4b2a      	ldr	r3, [pc, #168]	; (800e5a4 <tcp_rexmit_fast+0xb8>)
 800e4fc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e500:	4929      	ldr	r1, [pc, #164]	; (800e5a8 <tcp_rexmit_fast+0xbc>)
 800e502:	482a      	ldr	r0, [pc, #168]	; (800e5ac <tcp_rexmit_fast+0xc0>)
 800e504:	f005 fbac 	bl	8013c60 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d045      	beq.n	800e59c <tcp_rexmit_fast+0xb0>
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	8b5b      	ldrh	r3, [r3, #26]
 800e514:	f003 0304 	and.w	r3, r3, #4
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d13f      	bne.n	800e59c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f7ff ff79 	bl	800e414 <tcp_rexmit>
 800e522:	4603      	mov	r3, r0
 800e524:	2b00      	cmp	r3, #0
 800e526:	d139      	bne.n	800e59c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e534:	4293      	cmp	r3, r2
 800e536:	bf28      	it	cs
 800e538:	4613      	movcs	r3, r2
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	da00      	bge.n	800e542 <tcp_rexmit_fast+0x56>
 800e540:	3301      	adds	r3, #1
 800e542:	105b      	asrs	r3, r3, #1
 800e544:	b29a      	uxth	r2, r3
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e552:	461a      	mov	r2, r3
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e558:	005b      	lsls	r3, r3, #1
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d206      	bcs.n	800e56c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e562:	005b      	lsls	r3, r3, #1
 800e564:	b29a      	uxth	r2, r3
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e576:	4619      	mov	r1, r3
 800e578:	0049      	lsls	r1, r1, #1
 800e57a:	440b      	add	r3, r1
 800e57c:	b29b      	uxth	r3, r3
 800e57e:	4413      	add	r3, r2
 800e580:	b29a      	uxth	r2, r3
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	8b5b      	ldrh	r3, [r3, #26]
 800e58c:	f043 0304 	orr.w	r3, r3, #4
 800e590:	b29a      	uxth	r2, r3
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2200      	movs	r2, #0
 800e59a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800e59c:	bf00      	nop
 800e59e:	3708      	adds	r7, #8
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}
 800e5a4:	08016550 	.word	0x08016550
 800e5a8:	08016c08 	.word	0x08016c08
 800e5ac:	080165a4 	.word	0x080165a4

0800e5b0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b086      	sub	sp, #24
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	60f8      	str	r0, [r7, #12]
 800e5b8:	607b      	str	r3, [r7, #4]
 800e5ba:	460b      	mov	r3, r1
 800e5bc:	817b      	strh	r3, [r7, #10]
 800e5be:	4613      	mov	r3, r2
 800e5c0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e5c2:	897a      	ldrh	r2, [r7, #10]
 800e5c4:	893b      	ldrh	r3, [r7, #8]
 800e5c6:	4413      	add	r3, r2
 800e5c8:	b29b      	uxth	r3, r3
 800e5ca:	3314      	adds	r3, #20
 800e5cc:	b29b      	uxth	r3, r3
 800e5ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	2022      	movs	r0, #34	; 0x22
 800e5d6:	f7fa fc09 	bl	8008dec <pbuf_alloc>
 800e5da:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d04d      	beq.n	800e67e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e5e2:	897b      	ldrh	r3, [r7, #10]
 800e5e4:	3313      	adds	r3, #19
 800e5e6:	697a      	ldr	r2, [r7, #20]
 800e5e8:	8952      	ldrh	r2, [r2, #10]
 800e5ea:	4293      	cmp	r3, r2
 800e5ec:	db06      	blt.n	800e5fc <tcp_output_alloc_header_common+0x4c>
 800e5ee:	4b26      	ldr	r3, [pc, #152]	; (800e688 <tcp_output_alloc_header_common+0xd8>)
 800e5f0:	f240 7223 	movw	r2, #1827	; 0x723
 800e5f4:	4925      	ldr	r1, [pc, #148]	; (800e68c <tcp_output_alloc_header_common+0xdc>)
 800e5f6:	4826      	ldr	r0, [pc, #152]	; (800e690 <tcp_output_alloc_header_common+0xe0>)
 800e5f8:	f005 fb32 	bl	8013c60 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e5fc:	697b      	ldr	r3, [r7, #20]
 800e5fe:	685b      	ldr	r3, [r3, #4]
 800e600:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e602:	8c3b      	ldrh	r3, [r7, #32]
 800e604:	4618      	mov	r0, r3
 800e606:	f7f9 fb6b 	bl	8007ce0 <lwip_htons>
 800e60a:	4603      	mov	r3, r0
 800e60c:	461a      	mov	r2, r3
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e612:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e614:	4618      	mov	r0, r3
 800e616:	f7f9 fb63 	bl	8007ce0 <lwip_htons>
 800e61a:	4603      	mov	r3, r0
 800e61c:	461a      	mov	r2, r3
 800e61e:	693b      	ldr	r3, [r7, #16]
 800e620:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	687a      	ldr	r2, [r7, #4]
 800e626:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e628:	68f8      	ldr	r0, [r7, #12]
 800e62a:	f7f9 fb6e 	bl	8007d0a <lwip_htonl>
 800e62e:	4602      	mov	r2, r0
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e634:	897b      	ldrh	r3, [r7, #10]
 800e636:	089b      	lsrs	r3, r3, #2
 800e638:	b29b      	uxth	r3, r3
 800e63a:	3305      	adds	r3, #5
 800e63c:	b29b      	uxth	r3, r3
 800e63e:	031b      	lsls	r3, r3, #12
 800e640:	b29a      	uxth	r2, r3
 800e642:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e646:	b29b      	uxth	r3, r3
 800e648:	4313      	orrs	r3, r2
 800e64a:	b29b      	uxth	r3, r3
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7f9 fb47 	bl	8007ce0 <lwip_htons>
 800e652:	4603      	mov	r3, r0
 800e654:	461a      	mov	r2, r3
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e65a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e65c:	4618      	mov	r0, r3
 800e65e:	f7f9 fb3f 	bl	8007ce0 <lwip_htons>
 800e662:	4603      	mov	r3, r0
 800e664:	461a      	mov	r2, r3
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e66a:	693b      	ldr	r3, [r7, #16]
 800e66c:	2200      	movs	r2, #0
 800e66e:	741a      	strb	r2, [r3, #16]
 800e670:	2200      	movs	r2, #0
 800e672:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	2200      	movs	r2, #0
 800e678:	749a      	strb	r2, [r3, #18]
 800e67a:	2200      	movs	r2, #0
 800e67c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e67e:	697b      	ldr	r3, [r7, #20]
}
 800e680:	4618      	mov	r0, r3
 800e682:	3718      	adds	r7, #24
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}
 800e688:	08016550 	.word	0x08016550
 800e68c:	08016c28 	.word	0x08016c28
 800e690:	080165a4 	.word	0x080165a4

0800e694 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e694:	b5b0      	push	{r4, r5, r7, lr}
 800e696:	b08a      	sub	sp, #40	; 0x28
 800e698:	af04      	add	r7, sp, #16
 800e69a:	60f8      	str	r0, [r7, #12]
 800e69c:	607b      	str	r3, [r7, #4]
 800e69e:	460b      	mov	r3, r1
 800e6a0:	817b      	strh	r3, [r7, #10]
 800e6a2:	4613      	mov	r3, r2
 800e6a4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d106      	bne.n	800e6ba <tcp_output_alloc_header+0x26>
 800e6ac:	4b15      	ldr	r3, [pc, #84]	; (800e704 <tcp_output_alloc_header+0x70>)
 800e6ae:	f240 7242 	movw	r2, #1858	; 0x742
 800e6b2:	4915      	ldr	r1, [pc, #84]	; (800e708 <tcp_output_alloc_header+0x74>)
 800e6b4:	4815      	ldr	r0, [pc, #84]	; (800e70c <tcp_output_alloc_header+0x78>)
 800e6b6:	f005 fad3 	bl	8013c60 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	8adb      	ldrh	r3, [r3, #22]
 800e6c2:	68fa      	ldr	r2, [r7, #12]
 800e6c4:	8b12      	ldrh	r2, [r2, #24]
 800e6c6:	68f9      	ldr	r1, [r7, #12]
 800e6c8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800e6ca:	893d      	ldrh	r5, [r7, #8]
 800e6cc:	897c      	ldrh	r4, [r7, #10]
 800e6ce:	9103      	str	r1, [sp, #12]
 800e6d0:	2110      	movs	r1, #16
 800e6d2:	9102      	str	r1, [sp, #8]
 800e6d4:	9201      	str	r2, [sp, #4]
 800e6d6:	9300      	str	r3, [sp, #0]
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	462a      	mov	r2, r5
 800e6dc:	4621      	mov	r1, r4
 800e6de:	f7ff ff67 	bl	800e5b0 <tcp_output_alloc_header_common>
 800e6e2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d006      	beq.n	800e6f8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6ee:	68fa      	ldr	r2, [r7, #12]
 800e6f0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e6f2:	441a      	add	r2, r3
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800e6f8:	697b      	ldr	r3, [r7, #20]
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	3718      	adds	r7, #24
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bdb0      	pop	{r4, r5, r7, pc}
 800e702:	bf00      	nop
 800e704:	08016550 	.word	0x08016550
 800e708:	08016c58 	.word	0x08016c58
 800e70c:	080165a4 	.word	0x080165a4

0800e710 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b088      	sub	sp, #32
 800e714:	af00      	add	r7, sp, #0
 800e716:	60f8      	str	r0, [r7, #12]
 800e718:	60b9      	str	r1, [r7, #8]
 800e71a:	4611      	mov	r1, r2
 800e71c:	461a      	mov	r2, r3
 800e71e:	460b      	mov	r3, r1
 800e720:	71fb      	strb	r3, [r7, #7]
 800e722:	4613      	mov	r3, r2
 800e724:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e726:	2300      	movs	r3, #0
 800e728:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d106      	bne.n	800e73e <tcp_output_fill_options+0x2e>
 800e730:	4b13      	ldr	r3, [pc, #76]	; (800e780 <tcp_output_fill_options+0x70>)
 800e732:	f240 7256 	movw	r2, #1878	; 0x756
 800e736:	4913      	ldr	r1, [pc, #76]	; (800e784 <tcp_output_fill_options+0x74>)
 800e738:	4813      	ldr	r0, [pc, #76]	; (800e788 <tcp_output_fill_options+0x78>)
 800e73a:	f005 fa91 	bl	8013c60 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	685b      	ldr	r3, [r3, #4]
 800e742:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e744:	69bb      	ldr	r3, [r7, #24]
 800e746:	3314      	adds	r3, #20
 800e748:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e74a:	69bb      	ldr	r3, [r7, #24]
 800e74c:	f103 0214 	add.w	r2, r3, #20
 800e750:	8bfb      	ldrh	r3, [r7, #30]
 800e752:	009b      	lsls	r3, r3, #2
 800e754:	4619      	mov	r1, r3
 800e756:	79fb      	ldrb	r3, [r7, #7]
 800e758:	009b      	lsls	r3, r3, #2
 800e75a:	f003 0304 	and.w	r3, r3, #4
 800e75e:	440b      	add	r3, r1
 800e760:	4413      	add	r3, r2
 800e762:	697a      	ldr	r2, [r7, #20]
 800e764:	429a      	cmp	r2, r3
 800e766:	d006      	beq.n	800e776 <tcp_output_fill_options+0x66>
 800e768:	4b05      	ldr	r3, [pc, #20]	; (800e780 <tcp_output_fill_options+0x70>)
 800e76a:	f240 7275 	movw	r2, #1909	; 0x775
 800e76e:	4907      	ldr	r1, [pc, #28]	; (800e78c <tcp_output_fill_options+0x7c>)
 800e770:	4805      	ldr	r0, [pc, #20]	; (800e788 <tcp_output_fill_options+0x78>)
 800e772:	f005 fa75 	bl	8013c60 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e776:	bf00      	nop
 800e778:	3720      	adds	r7, #32
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}
 800e77e:	bf00      	nop
 800e780:	08016550 	.word	0x08016550
 800e784:	08016c80 	.word	0x08016c80
 800e788:	080165a4 	.word	0x080165a4
 800e78c:	08016b78 	.word	0x08016b78

0800e790 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b08a      	sub	sp, #40	; 0x28
 800e794:	af04      	add	r7, sp, #16
 800e796:	60f8      	str	r0, [r7, #12]
 800e798:	60b9      	str	r1, [r7, #8]
 800e79a:	607a      	str	r2, [r7, #4]
 800e79c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d106      	bne.n	800e7b2 <tcp_output_control_segment+0x22>
 800e7a4:	4b1c      	ldr	r3, [pc, #112]	; (800e818 <tcp_output_control_segment+0x88>)
 800e7a6:	f240 7287 	movw	r2, #1927	; 0x787
 800e7aa:	491c      	ldr	r1, [pc, #112]	; (800e81c <tcp_output_control_segment+0x8c>)
 800e7ac:	481c      	ldr	r0, [pc, #112]	; (800e820 <tcp_output_control_segment+0x90>)
 800e7ae:	f005 fa57 	bl	8013c60 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800e7b2:	683a      	ldr	r2, [r7, #0]
 800e7b4:	6879      	ldr	r1, [r7, #4]
 800e7b6:	68f8      	ldr	r0, [r7, #12]
 800e7b8:	f7fe ff40 	bl	800d63c <tcp_route>
 800e7bc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800e7be:	693b      	ldr	r3, [r7, #16]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d102      	bne.n	800e7ca <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800e7c4:	23fc      	movs	r3, #252	; 0xfc
 800e7c6:	75fb      	strb	r3, [r7, #23]
 800e7c8:	e01c      	b.n	800e804 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d006      	beq.n	800e7de <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	7adb      	ldrb	r3, [r3, #11]
 800e7d4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	7a9b      	ldrb	r3, [r3, #10]
 800e7da:	757b      	strb	r3, [r7, #21]
 800e7dc:	e003      	b.n	800e7e6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e7de:	23ff      	movs	r3, #255	; 0xff
 800e7e0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e7e6:	7dba      	ldrb	r2, [r7, #22]
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	9302      	str	r3, [sp, #8]
 800e7ec:	2306      	movs	r3, #6
 800e7ee:	9301      	str	r3, [sp, #4]
 800e7f0:	7d7b      	ldrb	r3, [r7, #21]
 800e7f2:	9300      	str	r3, [sp, #0]
 800e7f4:	4613      	mov	r3, r2
 800e7f6:	683a      	ldr	r2, [r7, #0]
 800e7f8:	6879      	ldr	r1, [r7, #4]
 800e7fa:	68b8      	ldr	r0, [r7, #8]
 800e7fc:	f004 f928 	bl	8012a50 <ip4_output_if>
 800e800:	4603      	mov	r3, r0
 800e802:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e804:	68b8      	ldr	r0, [r7, #8]
 800e806:	f7fa fdd5 	bl	80093b4 <pbuf_free>
  return err;
 800e80a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e80e:	4618      	mov	r0, r3
 800e810:	3718      	adds	r7, #24
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}
 800e816:	bf00      	nop
 800e818:	08016550 	.word	0x08016550
 800e81c:	08016ca8 	.word	0x08016ca8
 800e820:	080165a4 	.word	0x080165a4

0800e824 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e824:	b590      	push	{r4, r7, lr}
 800e826:	b08b      	sub	sp, #44	; 0x2c
 800e828:	af04      	add	r7, sp, #16
 800e82a:	60f8      	str	r0, [r7, #12]
 800e82c:	60b9      	str	r1, [r7, #8]
 800e82e:	607a      	str	r2, [r7, #4]
 800e830:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d106      	bne.n	800e846 <tcp_rst+0x22>
 800e838:	4b1f      	ldr	r3, [pc, #124]	; (800e8b8 <tcp_rst+0x94>)
 800e83a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800e83e:	491f      	ldr	r1, [pc, #124]	; (800e8bc <tcp_rst+0x98>)
 800e840:	481f      	ldr	r0, [pc, #124]	; (800e8c0 <tcp_rst+0x9c>)
 800e842:	f005 fa0d 	bl	8013c60 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d106      	bne.n	800e85a <tcp_rst+0x36>
 800e84c:	4b1a      	ldr	r3, [pc, #104]	; (800e8b8 <tcp_rst+0x94>)
 800e84e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800e852:	491c      	ldr	r1, [pc, #112]	; (800e8c4 <tcp_rst+0xa0>)
 800e854:	481a      	ldr	r0, [pc, #104]	; (800e8c0 <tcp_rst+0x9c>)
 800e856:	f005 fa03 	bl	8013c60 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e85a:	2300      	movs	r3, #0
 800e85c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800e85e:	f246 0308 	movw	r3, #24584	; 0x6008
 800e862:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e864:	7dfb      	ldrb	r3, [r7, #23]
 800e866:	b29c      	uxth	r4, r3
 800e868:	68b8      	ldr	r0, [r7, #8]
 800e86a:	f7f9 fa4e 	bl	8007d0a <lwip_htonl>
 800e86e:	4602      	mov	r2, r0
 800e870:	8abb      	ldrh	r3, [r7, #20]
 800e872:	9303      	str	r3, [sp, #12]
 800e874:	2314      	movs	r3, #20
 800e876:	9302      	str	r3, [sp, #8]
 800e878:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e87a:	9301      	str	r3, [sp, #4]
 800e87c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e87e:	9300      	str	r3, [sp, #0]
 800e880:	4613      	mov	r3, r2
 800e882:	2200      	movs	r2, #0
 800e884:	4621      	mov	r1, r4
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	f7ff fe92 	bl	800e5b0 <tcp_output_alloc_header_common>
 800e88c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e88e:	693b      	ldr	r3, [r7, #16]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d00c      	beq.n	800e8ae <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e894:	7dfb      	ldrb	r3, [r7, #23]
 800e896:	2200      	movs	r2, #0
 800e898:	6939      	ldr	r1, [r7, #16]
 800e89a:	68f8      	ldr	r0, [r7, #12]
 800e89c:	f7ff ff38 	bl	800e710 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a2:	683a      	ldr	r2, [r7, #0]
 800e8a4:	6939      	ldr	r1, [r7, #16]
 800e8a6:	68f8      	ldr	r0, [r7, #12]
 800e8a8:	f7ff ff72 	bl	800e790 <tcp_output_control_segment>
 800e8ac:	e000      	b.n	800e8b0 <tcp_rst+0x8c>
    return;
 800e8ae:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e8b0:	371c      	adds	r7, #28
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd90      	pop	{r4, r7, pc}
 800e8b6:	bf00      	nop
 800e8b8:	08016550 	.word	0x08016550
 800e8bc:	08016cd4 	.word	0x08016cd4
 800e8c0:	080165a4 	.word	0x080165a4
 800e8c4:	08016cf0 	.word	0x08016cf0

0800e8c8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e8c8:	b590      	push	{r4, r7, lr}
 800e8ca:	b087      	sub	sp, #28
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d106      	bne.n	800e8ec <tcp_send_empty_ack+0x24>
 800e8de:	4b28      	ldr	r3, [pc, #160]	; (800e980 <tcp_send_empty_ack+0xb8>)
 800e8e0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800e8e4:	4927      	ldr	r1, [pc, #156]	; (800e984 <tcp_send_empty_ack+0xbc>)
 800e8e6:	4828      	ldr	r0, [pc, #160]	; (800e988 <tcp_send_empty_ack+0xc0>)
 800e8e8:	f005 f9ba 	bl	8013c60 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e8ec:	7dfb      	ldrb	r3, [r7, #23]
 800e8ee:	009b      	lsls	r3, r3, #2
 800e8f0:	b2db      	uxtb	r3, r3
 800e8f2:	f003 0304 	and.w	r3, r3, #4
 800e8f6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e8f8:	7d7b      	ldrb	r3, [r7, #21]
 800e8fa:	b29c      	uxth	r4, r3
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e900:	4618      	mov	r0, r3
 800e902:	f7f9 fa02 	bl	8007d0a <lwip_htonl>
 800e906:	4603      	mov	r3, r0
 800e908:	2200      	movs	r2, #0
 800e90a:	4621      	mov	r1, r4
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f7ff fec1 	bl	800e694 <tcp_output_alloc_header>
 800e912:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d109      	bne.n	800e92e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	8b5b      	ldrh	r3, [r3, #26]
 800e91e:	f043 0303 	orr.w	r3, r3, #3
 800e922:	b29a      	uxth	r2, r3
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e928:	f06f 0301 	mvn.w	r3, #1
 800e92c:	e023      	b.n	800e976 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800e92e:	7dbb      	ldrb	r3, [r7, #22]
 800e930:	7dfa      	ldrb	r2, [r7, #23]
 800e932:	6939      	ldr	r1, [r7, #16]
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f7ff feeb 	bl	800e710 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e93a:	687a      	ldr	r2, [r7, #4]
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	3304      	adds	r3, #4
 800e940:	6939      	ldr	r1, [r7, #16]
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f7ff ff24 	bl	800e790 <tcp_output_control_segment>
 800e948:	4603      	mov	r3, r0
 800e94a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e94c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d007      	beq.n	800e964 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	8b5b      	ldrh	r3, [r3, #26]
 800e958:	f043 0303 	orr.w	r3, r3, #3
 800e95c:	b29a      	uxth	r2, r3
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	835a      	strh	r2, [r3, #26]
 800e962:	e006      	b.n	800e972 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	8b5b      	ldrh	r3, [r3, #26]
 800e968:	f023 0303 	bic.w	r3, r3, #3
 800e96c:	b29a      	uxth	r2, r3
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800e972:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e976:	4618      	mov	r0, r3
 800e978:	371c      	adds	r7, #28
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd90      	pop	{r4, r7, pc}
 800e97e:	bf00      	nop
 800e980:	08016550 	.word	0x08016550
 800e984:	08016d0c 	.word	0x08016d0c
 800e988:	080165a4 	.word	0x080165a4

0800e98c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e98c:	b590      	push	{r4, r7, lr}
 800e98e:	b087      	sub	sp, #28
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e994:	2300      	movs	r3, #0
 800e996:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d106      	bne.n	800e9ac <tcp_keepalive+0x20>
 800e99e:	4b18      	ldr	r3, [pc, #96]	; (800ea00 <tcp_keepalive+0x74>)
 800e9a0:	f640 0224 	movw	r2, #2084	; 0x824
 800e9a4:	4917      	ldr	r1, [pc, #92]	; (800ea04 <tcp_keepalive+0x78>)
 800e9a6:	4818      	ldr	r0, [pc, #96]	; (800ea08 <tcp_keepalive+0x7c>)
 800e9a8:	f005 f95a 	bl	8013c60 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e9ac:	7dfb      	ldrb	r3, [r7, #23]
 800e9ae:	b29c      	uxth	r4, r3
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9b4:	3b01      	subs	r3, #1
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f7f9 f9a7 	bl	8007d0a <lwip_htonl>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	2200      	movs	r2, #0
 800e9c0:	4621      	mov	r1, r4
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f7ff fe66 	bl	800e694 <tcp_output_alloc_header>
 800e9c8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e9ca:	693b      	ldr	r3, [r7, #16]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d102      	bne.n	800e9d6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e9d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e9d4:	e010      	b.n	800e9f8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e9d6:	7dfb      	ldrb	r3, [r7, #23]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	6939      	ldr	r1, [r7, #16]
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f7ff fe97 	bl	800e710 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e9e2:	687a      	ldr	r2, [r7, #4]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	3304      	adds	r3, #4
 800e9e8:	6939      	ldr	r1, [r7, #16]
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f7ff fed0 	bl	800e790 <tcp_output_control_segment>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e9f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	371c      	adds	r7, #28
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd90      	pop	{r4, r7, pc}
 800ea00:	08016550 	.word	0x08016550
 800ea04:	08016d2c 	.word	0x08016d2c
 800ea08:	080165a4 	.word	0x080165a4

0800ea0c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ea0c:	b590      	push	{r4, r7, lr}
 800ea0e:	b08b      	sub	sp, #44	; 0x2c
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ea14:	2300      	movs	r3, #0
 800ea16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d106      	bne.n	800ea2e <tcp_zero_window_probe+0x22>
 800ea20:	4b4c      	ldr	r3, [pc, #304]	; (800eb54 <tcp_zero_window_probe+0x148>)
 800ea22:	f640 024f 	movw	r2, #2127	; 0x84f
 800ea26:	494c      	ldr	r1, [pc, #304]	; (800eb58 <tcp_zero_window_probe+0x14c>)
 800ea28:	484c      	ldr	r0, [pc, #304]	; (800eb5c <tcp_zero_window_probe+0x150>)
 800ea2a:	f005 f919 	bl	8013c60 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea32:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ea34:	6a3b      	ldr	r3, [r7, #32]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d101      	bne.n	800ea3e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	e086      	b.n	800eb4c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ea44:	2bff      	cmp	r3, #255	; 0xff
 800ea46:	d007      	beq.n	800ea58 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ea4e:	3301      	adds	r3, #1
 800ea50:	b2da      	uxtb	r2, r3
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ea58:	6a3b      	ldr	r3, [r7, #32]
 800ea5a:	68db      	ldr	r3, [r3, #12]
 800ea5c:	899b      	ldrh	r3, [r3, #12]
 800ea5e:	b29b      	uxth	r3, r3
 800ea60:	4618      	mov	r0, r3
 800ea62:	f7f9 f93d 	bl	8007ce0 <lwip_htons>
 800ea66:	4603      	mov	r3, r0
 800ea68:	b2db      	uxtb	r3, r3
 800ea6a:	f003 0301 	and.w	r3, r3, #1
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d005      	beq.n	800ea7e <tcp_zero_window_probe+0x72>
 800ea72:	6a3b      	ldr	r3, [r7, #32]
 800ea74:	891b      	ldrh	r3, [r3, #8]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d101      	bne.n	800ea7e <tcp_zero_window_probe+0x72>
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	e000      	b.n	800ea80 <tcp_zero_window_probe+0x74>
 800ea7e:	2300      	movs	r3, #0
 800ea80:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ea82:	7ffb      	ldrb	r3, [r7, #31]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	bf0c      	ite	eq
 800ea88:	2301      	moveq	r3, #1
 800ea8a:	2300      	movne	r3, #0
 800ea8c:	b2db      	uxtb	r3, r3
 800ea8e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ea90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea94:	b299      	uxth	r1, r3
 800ea96:	6a3b      	ldr	r3, [r7, #32]
 800ea98:	68db      	ldr	r3, [r3, #12]
 800ea9a:	685b      	ldr	r3, [r3, #4]
 800ea9c:	8bba      	ldrh	r2, [r7, #28]
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f7ff fdf8 	bl	800e694 <tcp_output_alloc_header>
 800eaa4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800eaa6:	69bb      	ldr	r3, [r7, #24]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d102      	bne.n	800eab2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800eaac:	f04f 33ff 	mov.w	r3, #4294967295
 800eab0:	e04c      	b.n	800eb4c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800eab2:	69bb      	ldr	r3, [r7, #24]
 800eab4:	685b      	ldr	r3, [r3, #4]
 800eab6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800eab8:	7ffb      	ldrb	r3, [r7, #31]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d011      	beq.n	800eae2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	899b      	ldrh	r3, [r3, #12]
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	b21b      	sxth	r3, r3
 800eac6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800eaca:	b21c      	sxth	r4, r3
 800eacc:	2011      	movs	r0, #17
 800eace:	f7f9 f907 	bl	8007ce0 <lwip_htons>
 800ead2:	4603      	mov	r3, r0
 800ead4:	b21b      	sxth	r3, r3
 800ead6:	4323      	orrs	r3, r4
 800ead8:	b21b      	sxth	r3, r3
 800eada:	b29a      	uxth	r2, r3
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	819a      	strh	r2, [r3, #12]
 800eae0:	e010      	b.n	800eb04 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800eae2:	69bb      	ldr	r3, [r7, #24]
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	3314      	adds	r3, #20
 800eae8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800eaea:	6a3b      	ldr	r3, [r7, #32]
 800eaec:	6858      	ldr	r0, [r3, #4]
 800eaee:	6a3b      	ldr	r3, [r7, #32]
 800eaf0:	685b      	ldr	r3, [r3, #4]
 800eaf2:	891a      	ldrh	r2, [r3, #8]
 800eaf4:	6a3b      	ldr	r3, [r7, #32]
 800eaf6:	891b      	ldrh	r3, [r3, #8]
 800eaf8:	1ad3      	subs	r3, r2, r3
 800eafa:	b29b      	uxth	r3, r3
 800eafc:	2201      	movs	r2, #1
 800eafe:	6939      	ldr	r1, [r7, #16]
 800eb00:	f7fa fe52 	bl	80097a8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800eb04:	6a3b      	ldr	r3, [r7, #32]
 800eb06:	68db      	ldr	r3, [r3, #12]
 800eb08:	685b      	ldr	r3, [r3, #4]
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7f9 f8fd 	bl	8007d0a <lwip_htonl>
 800eb10:	4603      	mov	r3, r0
 800eb12:	3301      	adds	r3, #1
 800eb14:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	1ad3      	subs	r3, r2, r3
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	da02      	bge.n	800eb28 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	68fa      	ldr	r2, [r7, #12]
 800eb26:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800eb28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	69b9      	ldr	r1, [r7, #24]
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f7ff fded 	bl	800e710 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800eb36:	687a      	ldr	r2, [r7, #4]
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	3304      	adds	r3, #4
 800eb3c:	69b9      	ldr	r1, [r7, #24]
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f7ff fe26 	bl	800e790 <tcp_output_control_segment>
 800eb44:	4603      	mov	r3, r0
 800eb46:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800eb48:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	372c      	adds	r7, #44	; 0x2c
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd90      	pop	{r4, r7, pc}
 800eb54:	08016550 	.word	0x08016550
 800eb58:	08016d48 	.word	0x08016d48
 800eb5c:	080165a4 	.word	0x080165a4

0800eb60 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b082      	sub	sp, #8
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800eb68:	f7fa ff0c 	bl	8009984 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800eb6c:	4b0a      	ldr	r3, [pc, #40]	; (800eb98 <tcpip_tcp_timer+0x38>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d103      	bne.n	800eb7c <tcpip_tcp_timer+0x1c>
 800eb74:	4b09      	ldr	r3, [pc, #36]	; (800eb9c <tcpip_tcp_timer+0x3c>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d005      	beq.n	800eb88 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	4908      	ldr	r1, [pc, #32]	; (800eba0 <tcpip_tcp_timer+0x40>)
 800eb80:	20fa      	movs	r0, #250	; 0xfa
 800eb82:	f000 f8f3 	bl	800ed6c <sys_timeout>
 800eb86:	e003      	b.n	800eb90 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800eb88:	4b06      	ldr	r3, [pc, #24]	; (800eba4 <tcpip_tcp_timer+0x44>)
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	601a      	str	r2, [r3, #0]
  }
}
 800eb8e:	bf00      	nop
 800eb90:	bf00      	nop
 800eb92:	3708      	adds	r7, #8
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}
 800eb98:	2000aecc 	.word	0x2000aecc
 800eb9c:	2000aed0 	.word	0x2000aed0
 800eba0:	0800eb61 	.word	0x0800eb61
 800eba4:	2000af18 	.word	0x2000af18

0800eba8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ebac:	4b0a      	ldr	r3, [pc, #40]	; (800ebd8 <tcp_timer_needed+0x30>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d10f      	bne.n	800ebd4 <tcp_timer_needed+0x2c>
 800ebb4:	4b09      	ldr	r3, [pc, #36]	; (800ebdc <tcp_timer_needed+0x34>)
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d103      	bne.n	800ebc4 <tcp_timer_needed+0x1c>
 800ebbc:	4b08      	ldr	r3, [pc, #32]	; (800ebe0 <tcp_timer_needed+0x38>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d007      	beq.n	800ebd4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ebc4:	4b04      	ldr	r3, [pc, #16]	; (800ebd8 <tcp_timer_needed+0x30>)
 800ebc6:	2201      	movs	r2, #1
 800ebc8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ebca:	2200      	movs	r2, #0
 800ebcc:	4905      	ldr	r1, [pc, #20]	; (800ebe4 <tcp_timer_needed+0x3c>)
 800ebce:	20fa      	movs	r0, #250	; 0xfa
 800ebd0:	f000 f8cc 	bl	800ed6c <sys_timeout>
  }
}
 800ebd4:	bf00      	nop
 800ebd6:	bd80      	pop	{r7, pc}
 800ebd8:	2000af18 	.word	0x2000af18
 800ebdc:	2000aecc 	.word	0x2000aecc
 800ebe0:	2000aed0 	.word	0x2000aed0
 800ebe4:	0800eb61 	.word	0x0800eb61

0800ebe8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b086      	sub	sp, #24
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	60f8      	str	r0, [r7, #12]
 800ebf0:	60b9      	str	r1, [r7, #8]
 800ebf2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ebf4:	2006      	movs	r0, #6
 800ebf6:	f7f9 fceb 	bl	80085d0 <memp_malloc>
 800ebfa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d109      	bne.n	800ec16 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ec02:	693b      	ldr	r3, [r7, #16]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d151      	bne.n	800ecac <sys_timeout_abs+0xc4>
 800ec08:	4b2a      	ldr	r3, [pc, #168]	; (800ecb4 <sys_timeout_abs+0xcc>)
 800ec0a:	22be      	movs	r2, #190	; 0xbe
 800ec0c:	492a      	ldr	r1, [pc, #168]	; (800ecb8 <sys_timeout_abs+0xd0>)
 800ec0e:	482b      	ldr	r0, [pc, #172]	; (800ecbc <sys_timeout_abs+0xd4>)
 800ec10:	f005 f826 	bl	8013c60 <iprintf>
    return;
 800ec14:	e04a      	b.n	800ecac <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	68ba      	ldr	r2, [r7, #8]
 800ec20:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	687a      	ldr	r2, [r7, #4]
 800ec26:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	68fa      	ldr	r2, [r7, #12]
 800ec2c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ec2e:	4b24      	ldr	r3, [pc, #144]	; (800ecc0 <sys_timeout_abs+0xd8>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d103      	bne.n	800ec3e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ec36:	4a22      	ldr	r2, [pc, #136]	; (800ecc0 <sys_timeout_abs+0xd8>)
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	6013      	str	r3, [r2, #0]
    return;
 800ec3c:	e037      	b.n	800ecae <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ec3e:	693b      	ldr	r3, [r7, #16]
 800ec40:	685a      	ldr	r2, [r3, #4]
 800ec42:	4b1f      	ldr	r3, [pc, #124]	; (800ecc0 <sys_timeout_abs+0xd8>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	685b      	ldr	r3, [r3, #4]
 800ec48:	1ad3      	subs	r3, r2, r3
 800ec4a:	0fdb      	lsrs	r3, r3, #31
 800ec4c:	f003 0301 	and.w	r3, r3, #1
 800ec50:	b2db      	uxtb	r3, r3
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d007      	beq.n	800ec66 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ec56:	4b1a      	ldr	r3, [pc, #104]	; (800ecc0 <sys_timeout_abs+0xd8>)
 800ec58:	681a      	ldr	r2, [r3, #0]
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ec5e:	4a18      	ldr	r2, [pc, #96]	; (800ecc0 <sys_timeout_abs+0xd8>)
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	6013      	str	r3, [r2, #0]
 800ec64:	e023      	b.n	800ecae <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ec66:	4b16      	ldr	r3, [pc, #88]	; (800ecc0 <sys_timeout_abs+0xd8>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	617b      	str	r3, [r7, #20]
 800ec6c:	e01a      	b.n	800eca4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d00b      	beq.n	800ec8e <sys_timeout_abs+0xa6>
 800ec76:	693b      	ldr	r3, [r7, #16]
 800ec78:	685a      	ldr	r2, [r3, #4]
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	685b      	ldr	r3, [r3, #4]
 800ec80:	1ad3      	subs	r3, r2, r3
 800ec82:	0fdb      	lsrs	r3, r3, #31
 800ec84:	f003 0301 	and.w	r3, r3, #1
 800ec88:	b2db      	uxtb	r3, r3
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d007      	beq.n	800ec9e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	681a      	ldr	r2, [r3, #0]
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	693a      	ldr	r2, [r7, #16]
 800ec9a:	601a      	str	r2, [r3, #0]
        break;
 800ec9c:	e007      	b.n	800ecae <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	617b      	str	r3, [r7, #20]
 800eca4:	697b      	ldr	r3, [r7, #20]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d1e1      	bne.n	800ec6e <sys_timeout_abs+0x86>
 800ecaa:	e000      	b.n	800ecae <sys_timeout_abs+0xc6>
    return;
 800ecac:	bf00      	nop
      }
    }
  }
}
 800ecae:	3718      	adds	r7, #24
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}
 800ecb4:	08016d6c 	.word	0x08016d6c
 800ecb8:	08016da0 	.word	0x08016da0
 800ecbc:	08016de0 	.word	0x08016de0
 800ecc0:	2000af10 	.word	0x2000af10

0800ecc4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b086      	sub	sp, #24
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	4798      	blx	r3

  now = sys_now();
 800ecd6:	f7f8 fdef 	bl	80078b8 <sys_now>
 800ecda:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	681a      	ldr	r2, [r3, #0]
 800ece0:	4b0f      	ldr	r3, [pc, #60]	; (800ed20 <lwip_cyclic_timer+0x5c>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	4413      	add	r3, r2
 800ece6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ece8:	68fa      	ldr	r2, [r7, #12]
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	1ad3      	subs	r3, r2, r3
 800ecee:	0fdb      	lsrs	r3, r3, #31
 800ecf0:	f003 0301 	and.w	r3, r3, #1
 800ecf4:	b2db      	uxtb	r3, r3
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d009      	beq.n	800ed0e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	681a      	ldr	r2, [r3, #0]
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	4413      	add	r3, r2
 800ed02:	687a      	ldr	r2, [r7, #4]
 800ed04:	4907      	ldr	r1, [pc, #28]	; (800ed24 <lwip_cyclic_timer+0x60>)
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7ff ff6e 	bl	800ebe8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ed0c:	e004      	b.n	800ed18 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ed0e:	687a      	ldr	r2, [r7, #4]
 800ed10:	4904      	ldr	r1, [pc, #16]	; (800ed24 <lwip_cyclic_timer+0x60>)
 800ed12:	68f8      	ldr	r0, [r7, #12]
 800ed14:	f7ff ff68 	bl	800ebe8 <sys_timeout_abs>
}
 800ed18:	bf00      	nop
 800ed1a:	3718      	adds	r7, #24
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}
 800ed20:	2000af14 	.word	0x2000af14
 800ed24:	0800ecc5 	.word	0x0800ecc5

0800ed28 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b082      	sub	sp, #8
 800ed2c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ed2e:	2301      	movs	r3, #1
 800ed30:	607b      	str	r3, [r7, #4]
 800ed32:	e00e      	b.n	800ed52 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ed34:	4a0b      	ldr	r2, [pc, #44]	; (800ed64 <sys_timeouts_init+0x3c>)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	00db      	lsls	r3, r3, #3
 800ed40:	4a08      	ldr	r2, [pc, #32]	; (800ed64 <sys_timeouts_init+0x3c>)
 800ed42:	4413      	add	r3, r2
 800ed44:	461a      	mov	r2, r3
 800ed46:	4908      	ldr	r1, [pc, #32]	; (800ed68 <sys_timeouts_init+0x40>)
 800ed48:	f000 f810 	bl	800ed6c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	3301      	adds	r3, #1
 800ed50:	607b      	str	r3, [r7, #4]
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2b04      	cmp	r3, #4
 800ed56:	d9ed      	bls.n	800ed34 <sys_timeouts_init+0xc>
  }
}
 800ed58:	bf00      	nop
 800ed5a:	bf00      	nop
 800ed5c:	3708      	adds	r7, #8
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}
 800ed62:	bf00      	nop
 800ed64:	0801a220 	.word	0x0801a220
 800ed68:	0800ecc5 	.word	0x0800ecc5

0800ed6c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b086      	sub	sp, #24
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	60f8      	str	r0, [r7, #12]
 800ed74:	60b9      	str	r1, [r7, #8]
 800ed76:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed7e:	d306      	bcc.n	800ed8e <sys_timeout+0x22>
 800ed80:	4b0a      	ldr	r3, [pc, #40]	; (800edac <sys_timeout+0x40>)
 800ed82:	f240 1229 	movw	r2, #297	; 0x129
 800ed86:	490a      	ldr	r1, [pc, #40]	; (800edb0 <sys_timeout+0x44>)
 800ed88:	480a      	ldr	r0, [pc, #40]	; (800edb4 <sys_timeout+0x48>)
 800ed8a:	f004 ff69 	bl	8013c60 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ed8e:	f7f8 fd93 	bl	80078b8 <sys_now>
 800ed92:	4602      	mov	r2, r0
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	4413      	add	r3, r2
 800ed98:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ed9a:	687a      	ldr	r2, [r7, #4]
 800ed9c:	68b9      	ldr	r1, [r7, #8]
 800ed9e:	6978      	ldr	r0, [r7, #20]
 800eda0:	f7ff ff22 	bl	800ebe8 <sys_timeout_abs>
#endif
}
 800eda4:	bf00      	nop
 800eda6:	3718      	adds	r7, #24
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}
 800edac:	08016d6c 	.word	0x08016d6c
 800edb0:	08016e08 	.word	0x08016e08
 800edb4:	08016de0 	.word	0x08016de0

0800edb8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b084      	sub	sp, #16
 800edbc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800edbe:	f7f8 fd7b 	bl	80078b8 <sys_now>
 800edc2:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800edc4:	4b1a      	ldr	r3, [pc, #104]	; (800ee30 <sys_check_timeouts+0x78>)
 800edc6:	781b      	ldrb	r3, [r3, #0]
 800edc8:	b2db      	uxtb	r3, r3
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d001      	beq.n	800edd2 <sys_check_timeouts+0x1a>
 800edce:	f7f9 ffb7 	bl	8008d40 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800edd2:	4b18      	ldr	r3, [pc, #96]	; (800ee34 <sys_check_timeouts+0x7c>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d022      	beq.n	800ee24 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	685b      	ldr	r3, [r3, #4]
 800ede2:	68fa      	ldr	r2, [r7, #12]
 800ede4:	1ad3      	subs	r3, r2, r3
 800ede6:	0fdb      	lsrs	r3, r3, #31
 800ede8:	f003 0301 	and.w	r3, r3, #1
 800edec:	b2db      	uxtb	r3, r3
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d11a      	bne.n	800ee28 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	4a0f      	ldr	r2, [pc, #60]	; (800ee34 <sys_check_timeouts+0x7c>)
 800edf8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	689b      	ldr	r3, [r3, #8]
 800edfe:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	68db      	ldr	r3, [r3, #12]
 800ee04:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ee06:	68bb      	ldr	r3, [r7, #8]
 800ee08:	685b      	ldr	r3, [r3, #4]
 800ee0a:	4a0b      	ldr	r2, [pc, #44]	; (800ee38 <sys_check_timeouts+0x80>)
 800ee0c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ee0e:	68b9      	ldr	r1, [r7, #8]
 800ee10:	2006      	movs	r0, #6
 800ee12:	f7f9 fc4d 	bl	80086b0 <memp_free>
    if (handler != NULL) {
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d0d3      	beq.n	800edc4 <sys_check_timeouts+0xc>
      handler(arg);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	6838      	ldr	r0, [r7, #0]
 800ee20:	4798      	blx	r3
  do {
 800ee22:	e7cf      	b.n	800edc4 <sys_check_timeouts+0xc>
      return;
 800ee24:	bf00      	nop
 800ee26:	e000      	b.n	800ee2a <sys_check_timeouts+0x72>
      return;
 800ee28:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ee2a:	3710      	adds	r7, #16
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}
 800ee30:	2000aebd 	.word	0x2000aebd
 800ee34:	2000af10 	.word	0x2000af10
 800ee38:	2000af14 	.word	0x2000af14

0800ee3c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ee40:	f004 ff26 	bl	8013c90 <rand>
 800ee44:	4603      	mov	r3, r0
 800ee46:	b29b      	uxth	r3, r3
 800ee48:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ee4c:	b29b      	uxth	r3, r3
 800ee4e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ee52:	b29a      	uxth	r2, r3
 800ee54:	4b01      	ldr	r3, [pc, #4]	; (800ee5c <udp_init+0x20>)
 800ee56:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ee58:	bf00      	nop
 800ee5a:	bd80      	pop	{r7, pc}
 800ee5c:	20000040 	.word	0x20000040

0800ee60 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800ee60:	b480      	push	{r7}
 800ee62:	b083      	sub	sp, #12
 800ee64:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800ee66:	2300      	movs	r3, #0
 800ee68:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ee6a:	4b17      	ldr	r3, [pc, #92]	; (800eec8 <udp_new_port+0x68>)
 800ee6c:	881b      	ldrh	r3, [r3, #0]
 800ee6e:	1c5a      	adds	r2, r3, #1
 800ee70:	b291      	uxth	r1, r2
 800ee72:	4a15      	ldr	r2, [pc, #84]	; (800eec8 <udp_new_port+0x68>)
 800ee74:	8011      	strh	r1, [r2, #0]
 800ee76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee7a:	4293      	cmp	r3, r2
 800ee7c:	d103      	bne.n	800ee86 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ee7e:	4b12      	ldr	r3, [pc, #72]	; (800eec8 <udp_new_port+0x68>)
 800ee80:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ee84:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee86:	4b11      	ldr	r3, [pc, #68]	; (800eecc <udp_new_port+0x6c>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	603b      	str	r3, [r7, #0]
 800ee8c:	e011      	b.n	800eeb2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	8a5a      	ldrh	r2, [r3, #18]
 800ee92:	4b0d      	ldr	r3, [pc, #52]	; (800eec8 <udp_new_port+0x68>)
 800ee94:	881b      	ldrh	r3, [r3, #0]
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d108      	bne.n	800eeac <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ee9a:	88fb      	ldrh	r3, [r7, #6]
 800ee9c:	3301      	adds	r3, #1
 800ee9e:	80fb      	strh	r3, [r7, #6]
 800eea0:	88fb      	ldrh	r3, [r7, #6]
 800eea2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eea6:	d3e0      	bcc.n	800ee6a <udp_new_port+0xa>
        return 0;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	e007      	b.n	800eebc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	68db      	ldr	r3, [r3, #12]
 800eeb0:	603b      	str	r3, [r7, #0]
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d1ea      	bne.n	800ee8e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800eeb8:	4b03      	ldr	r3, [pc, #12]	; (800eec8 <udp_new_port+0x68>)
 800eeba:	881b      	ldrh	r3, [r3, #0]
}
 800eebc:	4618      	mov	r0, r3
 800eebe:	370c      	adds	r7, #12
 800eec0:	46bd      	mov	sp, r7
 800eec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec6:	4770      	bx	lr
 800eec8:	20000040 	.word	0x20000040
 800eecc:	2000af1c 	.word	0x2000af1c

0800eed0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b084      	sub	sp, #16
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	60f8      	str	r0, [r7, #12]
 800eed8:	60b9      	str	r1, [r7, #8]
 800eeda:	4613      	mov	r3, r2
 800eedc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d105      	bne.n	800eef0 <udp_input_local_match+0x20>
 800eee4:	4b27      	ldr	r3, [pc, #156]	; (800ef84 <udp_input_local_match+0xb4>)
 800eee6:	2287      	movs	r2, #135	; 0x87
 800eee8:	4927      	ldr	r1, [pc, #156]	; (800ef88 <udp_input_local_match+0xb8>)
 800eeea:	4828      	ldr	r0, [pc, #160]	; (800ef8c <udp_input_local_match+0xbc>)
 800eeec:	f004 feb8 	bl	8013c60 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d105      	bne.n	800ef02 <udp_input_local_match+0x32>
 800eef6:	4b23      	ldr	r3, [pc, #140]	; (800ef84 <udp_input_local_match+0xb4>)
 800eef8:	2288      	movs	r2, #136	; 0x88
 800eefa:	4925      	ldr	r1, [pc, #148]	; (800ef90 <udp_input_local_match+0xc0>)
 800eefc:	4823      	ldr	r0, [pc, #140]	; (800ef8c <udp_input_local_match+0xbc>)
 800eefe:	f004 feaf 	bl	8013c60 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	7a1b      	ldrb	r3, [r3, #8]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d00b      	beq.n	800ef22 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	7a1a      	ldrb	r2, [r3, #8]
 800ef0e:	4b21      	ldr	r3, [pc, #132]	; (800ef94 <udp_input_local_match+0xc4>)
 800ef10:	685b      	ldr	r3, [r3, #4]
 800ef12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ef16:	3301      	adds	r3, #1
 800ef18:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d001      	beq.n	800ef22 <udp_input_local_match+0x52>
    return 0;
 800ef1e:	2300      	movs	r3, #0
 800ef20:	e02b      	b.n	800ef7a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ef22:	79fb      	ldrb	r3, [r7, #7]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d018      	beq.n	800ef5a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d013      	beq.n	800ef56 <udp_input_local_match+0x86>
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d00f      	beq.n	800ef56 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ef36:	4b17      	ldr	r3, [pc, #92]	; (800ef94 <udp_input_local_match+0xc4>)
 800ef38:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ef3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef3e:	d00a      	beq.n	800ef56 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	681a      	ldr	r2, [r3, #0]
 800ef44:	4b13      	ldr	r3, [pc, #76]	; (800ef94 <udp_input_local_match+0xc4>)
 800ef46:	695b      	ldr	r3, [r3, #20]
 800ef48:	405a      	eors	r2, r3
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	3308      	adds	r3, #8
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d110      	bne.n	800ef78 <udp_input_local_match+0xa8>
          return 1;
 800ef56:	2301      	movs	r3, #1
 800ef58:	e00f      	b.n	800ef7a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d009      	beq.n	800ef74 <udp_input_local_match+0xa4>
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d005      	beq.n	800ef74 <udp_input_local_match+0xa4>
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	681a      	ldr	r2, [r3, #0]
 800ef6c:	4b09      	ldr	r3, [pc, #36]	; (800ef94 <udp_input_local_match+0xc4>)
 800ef6e:	695b      	ldr	r3, [r3, #20]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d101      	bne.n	800ef78 <udp_input_local_match+0xa8>
        return 1;
 800ef74:	2301      	movs	r3, #1
 800ef76:	e000      	b.n	800ef7a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ef78:	2300      	movs	r3, #0
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3710      	adds	r7, #16
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop
 800ef84:	08016e54 	.word	0x08016e54
 800ef88:	08016e84 	.word	0x08016e84
 800ef8c:	08016ea8 	.word	0x08016ea8
 800ef90:	08016ed0 	.word	0x08016ed0
 800ef94:	20005770 	.word	0x20005770

0800ef98 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ef98:	b590      	push	{r4, r7, lr}
 800ef9a:	b08d      	sub	sp, #52	; 0x34
 800ef9c:	af02      	add	r7, sp, #8
 800ef9e:	6078      	str	r0, [r7, #4]
 800efa0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800efa2:	2300      	movs	r3, #0
 800efa4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d105      	bne.n	800efb8 <udp_input+0x20>
 800efac:	4b7c      	ldr	r3, [pc, #496]	; (800f1a0 <udp_input+0x208>)
 800efae:	22cf      	movs	r2, #207	; 0xcf
 800efb0:	497c      	ldr	r1, [pc, #496]	; (800f1a4 <udp_input+0x20c>)
 800efb2:	487d      	ldr	r0, [pc, #500]	; (800f1a8 <udp_input+0x210>)
 800efb4:	f004 fe54 	bl	8013c60 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d105      	bne.n	800efca <udp_input+0x32>
 800efbe:	4b78      	ldr	r3, [pc, #480]	; (800f1a0 <udp_input+0x208>)
 800efc0:	22d0      	movs	r2, #208	; 0xd0
 800efc2:	497a      	ldr	r1, [pc, #488]	; (800f1ac <udp_input+0x214>)
 800efc4:	4878      	ldr	r0, [pc, #480]	; (800f1a8 <udp_input+0x210>)
 800efc6:	f004 fe4b 	bl	8013c60 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	895b      	ldrh	r3, [r3, #10]
 800efce:	2b07      	cmp	r3, #7
 800efd0:	d803      	bhi.n	800efda <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f7fa f9ee 	bl	80093b4 <pbuf_free>
    goto end;
 800efd8:	e0de      	b.n	800f198 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800efe0:	4b73      	ldr	r3, [pc, #460]	; (800f1b0 <udp_input+0x218>)
 800efe2:	695b      	ldr	r3, [r3, #20]
 800efe4:	4a72      	ldr	r2, [pc, #456]	; (800f1b0 <udp_input+0x218>)
 800efe6:	6812      	ldr	r2, [r2, #0]
 800efe8:	4611      	mov	r1, r2
 800efea:	4618      	mov	r0, r3
 800efec:	f003 fe08 	bl	8012c00 <ip4_addr_isbroadcast_u32>
 800eff0:	4603      	mov	r3, r0
 800eff2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	881b      	ldrh	r3, [r3, #0]
 800eff8:	b29b      	uxth	r3, r3
 800effa:	4618      	mov	r0, r3
 800effc:	f7f8 fe70 	bl	8007ce0 <lwip_htons>
 800f000:	4603      	mov	r3, r0
 800f002:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f004:	697b      	ldr	r3, [r7, #20]
 800f006:	885b      	ldrh	r3, [r3, #2]
 800f008:	b29b      	uxth	r3, r3
 800f00a:	4618      	mov	r0, r3
 800f00c:	f7f8 fe68 	bl	8007ce0 <lwip_htons>
 800f010:	4603      	mov	r3, r0
 800f012:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f014:	2300      	movs	r3, #0
 800f016:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800f018:	2300      	movs	r3, #0
 800f01a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f01c:	2300      	movs	r3, #0
 800f01e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f020:	4b64      	ldr	r3, [pc, #400]	; (800f1b4 <udp_input+0x21c>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	627b      	str	r3, [r7, #36]	; 0x24
 800f026:	e054      	b.n	800f0d2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f02a:	8a5b      	ldrh	r3, [r3, #18]
 800f02c:	89fa      	ldrh	r2, [r7, #14]
 800f02e:	429a      	cmp	r2, r3
 800f030:	d14a      	bne.n	800f0c8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f032:	7cfb      	ldrb	r3, [r7, #19]
 800f034:	461a      	mov	r2, r3
 800f036:	6839      	ldr	r1, [r7, #0]
 800f038:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f03a:	f7ff ff49 	bl	800eed0 <udp_input_local_match>
 800f03e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f040:	2b00      	cmp	r3, #0
 800f042:	d041      	beq.n	800f0c8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f046:	7c1b      	ldrb	r3, [r3, #16]
 800f048:	f003 0304 	and.w	r3, r3, #4
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d11d      	bne.n	800f08c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f050:	69fb      	ldr	r3, [r7, #28]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d102      	bne.n	800f05c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f058:	61fb      	str	r3, [r7, #28]
 800f05a:	e017      	b.n	800f08c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f05c:	7cfb      	ldrb	r3, [r7, #19]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d014      	beq.n	800f08c <udp_input+0xf4>
 800f062:	4b53      	ldr	r3, [pc, #332]	; (800f1b0 <udp_input+0x218>)
 800f064:	695b      	ldr	r3, [r3, #20]
 800f066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f06a:	d10f      	bne.n	800f08c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f06c:	69fb      	ldr	r3, [r7, #28]
 800f06e:	681a      	ldr	r2, [r3, #0]
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	3304      	adds	r3, #4
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	429a      	cmp	r2, r3
 800f078:	d008      	beq.n	800f08c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07c:	681a      	ldr	r2, [r3, #0]
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	3304      	adds	r3, #4
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	429a      	cmp	r2, r3
 800f086:	d101      	bne.n	800f08c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08e:	8a9b      	ldrh	r3, [r3, #20]
 800f090:	8a3a      	ldrh	r2, [r7, #16]
 800f092:	429a      	cmp	r2, r3
 800f094:	d118      	bne.n	800f0c8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f098:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d005      	beq.n	800f0aa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a0:	685a      	ldr	r2, [r3, #4]
 800f0a2:	4b43      	ldr	r3, [pc, #268]	; (800f1b0 <udp_input+0x218>)
 800f0a4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d10e      	bne.n	800f0c8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f0aa:	6a3b      	ldr	r3, [r7, #32]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d014      	beq.n	800f0da <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b2:	68da      	ldr	r2, [r3, #12]
 800f0b4:	6a3b      	ldr	r3, [r7, #32]
 800f0b6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f0b8:	4b3e      	ldr	r3, [pc, #248]	; (800f1b4 <udp_input+0x21c>)
 800f0ba:	681a      	ldr	r2, [r3, #0]
 800f0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0be:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f0c0:	4a3c      	ldr	r2, [pc, #240]	; (800f1b4 <udp_input+0x21c>)
 800f0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f0c6:	e008      	b.n	800f0da <udp_input+0x142>
      }
    }

    prev = pcb;
 800f0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ca:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ce:	68db      	ldr	r3, [r3, #12]
 800f0d0:	627b      	str	r3, [r7, #36]	; 0x24
 800f0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d1a7      	bne.n	800f028 <udp_input+0x90>
 800f0d8:	e000      	b.n	800f0dc <udp_input+0x144>
        break;
 800f0da:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d101      	bne.n	800f0e6 <udp_input+0x14e>
    pcb = uncon_pcb;
 800f0e2:	69fb      	ldr	r3, [r7, #28]
 800f0e4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d002      	beq.n	800f0f2 <udp_input+0x15a>
    for_us = 1;
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	76fb      	strb	r3, [r7, #27]
 800f0f0:	e00a      	b.n	800f108 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	3304      	adds	r3, #4
 800f0f6:	681a      	ldr	r2, [r3, #0]
 800f0f8:	4b2d      	ldr	r3, [pc, #180]	; (800f1b0 <udp_input+0x218>)
 800f0fa:	695b      	ldr	r3, [r3, #20]
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	bf0c      	ite	eq
 800f100:	2301      	moveq	r3, #1
 800f102:	2300      	movne	r3, #0
 800f104:	b2db      	uxtb	r3, r3
 800f106:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f108:	7efb      	ldrb	r3, [r7, #27]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d041      	beq.n	800f192 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f10e:	2108      	movs	r1, #8
 800f110:	6878      	ldr	r0, [r7, #4]
 800f112:	f7fa f8c9 	bl	80092a8 <pbuf_remove_header>
 800f116:	4603      	mov	r3, r0
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d00a      	beq.n	800f132 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f11c:	4b20      	ldr	r3, [pc, #128]	; (800f1a0 <udp_input+0x208>)
 800f11e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800f122:	4925      	ldr	r1, [pc, #148]	; (800f1b8 <udp_input+0x220>)
 800f124:	4820      	ldr	r0, [pc, #128]	; (800f1a8 <udp_input+0x210>)
 800f126:	f004 fd9b 	bl	8013c60 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f7fa f942 	bl	80093b4 <pbuf_free>
      goto end;
 800f130:	e032      	b.n	800f198 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f134:	2b00      	cmp	r3, #0
 800f136:	d012      	beq.n	800f15e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f13a:	699b      	ldr	r3, [r3, #24]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d00a      	beq.n	800f156 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f142:	699c      	ldr	r4, [r3, #24]
 800f144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f146:	69d8      	ldr	r0, [r3, #28]
 800f148:	8a3b      	ldrh	r3, [r7, #16]
 800f14a:	9300      	str	r3, [sp, #0]
 800f14c:	4b1b      	ldr	r3, [pc, #108]	; (800f1bc <udp_input+0x224>)
 800f14e:	687a      	ldr	r2, [r7, #4]
 800f150:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f152:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f154:	e021      	b.n	800f19a <udp_input+0x202>
        pbuf_free(p);
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f7fa f92c 	bl	80093b4 <pbuf_free>
        goto end;
 800f15c:	e01c      	b.n	800f198 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f15e:	7cfb      	ldrb	r3, [r7, #19]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d112      	bne.n	800f18a <udp_input+0x1f2>
 800f164:	4b12      	ldr	r3, [pc, #72]	; (800f1b0 <udp_input+0x218>)
 800f166:	695b      	ldr	r3, [r3, #20]
 800f168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f16c:	2be0      	cmp	r3, #224	; 0xe0
 800f16e:	d00c      	beq.n	800f18a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f170:	4b0f      	ldr	r3, [pc, #60]	; (800f1b0 <udp_input+0x218>)
 800f172:	899b      	ldrh	r3, [r3, #12]
 800f174:	3308      	adds	r3, #8
 800f176:	b29b      	uxth	r3, r3
 800f178:	b21b      	sxth	r3, r3
 800f17a:	4619      	mov	r1, r3
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f7fa f906 	bl	800938e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f182:	2103      	movs	r1, #3
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f003 f9fd 	bl	8012584 <icmp_dest_unreach>
      pbuf_free(p);
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f7fa f912 	bl	80093b4 <pbuf_free>
  return;
 800f190:	e003      	b.n	800f19a <udp_input+0x202>
    pbuf_free(p);
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f7fa f90e 	bl	80093b4 <pbuf_free>
  return;
 800f198:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f19a:	372c      	adds	r7, #44	; 0x2c
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd90      	pop	{r4, r7, pc}
 800f1a0:	08016e54 	.word	0x08016e54
 800f1a4:	08016ef8 	.word	0x08016ef8
 800f1a8:	08016ea8 	.word	0x08016ea8
 800f1ac:	08016f10 	.word	0x08016f10
 800f1b0:	20005770 	.word	0x20005770
 800f1b4:	2000af1c 	.word	0x2000af1c
 800f1b8:	08016f2c 	.word	0x08016f2c
 800f1bc:	20005780 	.word	0x20005780

0800f1c0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b088      	sub	sp, #32
 800f1c4:	af02      	add	r7, sp, #8
 800f1c6:	60f8      	str	r0, [r7, #12]
 800f1c8:	60b9      	str	r1, [r7, #8]
 800f1ca:	607a      	str	r2, [r7, #4]
 800f1cc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d109      	bne.n	800f1e8 <udp_sendto_if+0x28>
 800f1d4:	4b2e      	ldr	r3, [pc, #184]	; (800f290 <udp_sendto_if+0xd0>)
 800f1d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f1da:	492e      	ldr	r1, [pc, #184]	; (800f294 <udp_sendto_if+0xd4>)
 800f1dc:	482e      	ldr	r0, [pc, #184]	; (800f298 <udp_sendto_if+0xd8>)
 800f1de:	f004 fd3f 	bl	8013c60 <iprintf>
 800f1e2:	f06f 030f 	mvn.w	r3, #15
 800f1e6:	e04f      	b.n	800f288 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d109      	bne.n	800f202 <udp_sendto_if+0x42>
 800f1ee:	4b28      	ldr	r3, [pc, #160]	; (800f290 <udp_sendto_if+0xd0>)
 800f1f0:	f240 2281 	movw	r2, #641	; 0x281
 800f1f4:	4929      	ldr	r1, [pc, #164]	; (800f29c <udp_sendto_if+0xdc>)
 800f1f6:	4828      	ldr	r0, [pc, #160]	; (800f298 <udp_sendto_if+0xd8>)
 800f1f8:	f004 fd32 	bl	8013c60 <iprintf>
 800f1fc:	f06f 030f 	mvn.w	r3, #15
 800f200:	e042      	b.n	800f288 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d109      	bne.n	800f21c <udp_sendto_if+0x5c>
 800f208:	4b21      	ldr	r3, [pc, #132]	; (800f290 <udp_sendto_if+0xd0>)
 800f20a:	f240 2282 	movw	r2, #642	; 0x282
 800f20e:	4924      	ldr	r1, [pc, #144]	; (800f2a0 <udp_sendto_if+0xe0>)
 800f210:	4821      	ldr	r0, [pc, #132]	; (800f298 <udp_sendto_if+0xd8>)
 800f212:	f004 fd25 	bl	8013c60 <iprintf>
 800f216:	f06f 030f 	mvn.w	r3, #15
 800f21a:	e035      	b.n	800f288 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800f21c:	6a3b      	ldr	r3, [r7, #32]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d109      	bne.n	800f236 <udp_sendto_if+0x76>
 800f222:	4b1b      	ldr	r3, [pc, #108]	; (800f290 <udp_sendto_if+0xd0>)
 800f224:	f240 2283 	movw	r2, #643	; 0x283
 800f228:	491e      	ldr	r1, [pc, #120]	; (800f2a4 <udp_sendto_if+0xe4>)
 800f22a:	481b      	ldr	r0, [pc, #108]	; (800f298 <udp_sendto_if+0xd8>)
 800f22c:	f004 fd18 	bl	8013c60 <iprintf>
 800f230:	f06f 030f 	mvn.w	r3, #15
 800f234:	e028      	b.n	800f288 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d009      	beq.n	800f250 <udp_sendto_if+0x90>
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d005      	beq.n	800f250 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f24c:	2be0      	cmp	r3, #224	; 0xe0
 800f24e:	d103      	bne.n	800f258 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800f250:	6a3b      	ldr	r3, [r7, #32]
 800f252:	3304      	adds	r3, #4
 800f254:	617b      	str	r3, [r7, #20]
 800f256:	e00b      	b.n	800f270 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	681a      	ldr	r2, [r3, #0]
 800f25c:	6a3b      	ldr	r3, [r7, #32]
 800f25e:	3304      	adds	r3, #4
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	429a      	cmp	r2, r3
 800f264:	d002      	beq.n	800f26c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800f266:	f06f 0303 	mvn.w	r3, #3
 800f26a:	e00d      	b.n	800f288 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800f270:	887a      	ldrh	r2, [r7, #2]
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	9301      	str	r3, [sp, #4]
 800f276:	6a3b      	ldr	r3, [r7, #32]
 800f278:	9300      	str	r3, [sp, #0]
 800f27a:	4613      	mov	r3, r2
 800f27c:	687a      	ldr	r2, [r7, #4]
 800f27e:	68b9      	ldr	r1, [r7, #8]
 800f280:	68f8      	ldr	r0, [r7, #12]
 800f282:	f000 f811 	bl	800f2a8 <udp_sendto_if_src>
 800f286:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f288:	4618      	mov	r0, r3
 800f28a:	3718      	adds	r7, #24
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}
 800f290:	08016e54 	.word	0x08016e54
 800f294:	08016fc8 	.word	0x08016fc8
 800f298:	08016ea8 	.word	0x08016ea8
 800f29c:	08016fe4 	.word	0x08016fe4
 800f2a0:	08017000 	.word	0x08017000
 800f2a4:	08017020 	.word	0x08017020

0800f2a8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b08c      	sub	sp, #48	; 0x30
 800f2ac:	af04      	add	r7, sp, #16
 800f2ae:	60f8      	str	r0, [r7, #12]
 800f2b0:	60b9      	str	r1, [r7, #8]
 800f2b2:	607a      	str	r2, [r7, #4]
 800f2b4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d109      	bne.n	800f2d0 <udp_sendto_if_src+0x28>
 800f2bc:	4b65      	ldr	r3, [pc, #404]	; (800f454 <udp_sendto_if_src+0x1ac>)
 800f2be:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f2c2:	4965      	ldr	r1, [pc, #404]	; (800f458 <udp_sendto_if_src+0x1b0>)
 800f2c4:	4865      	ldr	r0, [pc, #404]	; (800f45c <udp_sendto_if_src+0x1b4>)
 800f2c6:	f004 fccb 	bl	8013c60 <iprintf>
 800f2ca:	f06f 030f 	mvn.w	r3, #15
 800f2ce:	e0bc      	b.n	800f44a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d109      	bne.n	800f2ea <udp_sendto_if_src+0x42>
 800f2d6:	4b5f      	ldr	r3, [pc, #380]	; (800f454 <udp_sendto_if_src+0x1ac>)
 800f2d8:	f240 22d2 	movw	r2, #722	; 0x2d2
 800f2dc:	4960      	ldr	r1, [pc, #384]	; (800f460 <udp_sendto_if_src+0x1b8>)
 800f2de:	485f      	ldr	r0, [pc, #380]	; (800f45c <udp_sendto_if_src+0x1b4>)
 800f2e0:	f004 fcbe 	bl	8013c60 <iprintf>
 800f2e4:	f06f 030f 	mvn.w	r3, #15
 800f2e8:	e0af      	b.n	800f44a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d109      	bne.n	800f304 <udp_sendto_if_src+0x5c>
 800f2f0:	4b58      	ldr	r3, [pc, #352]	; (800f454 <udp_sendto_if_src+0x1ac>)
 800f2f2:	f240 22d3 	movw	r2, #723	; 0x2d3
 800f2f6:	495b      	ldr	r1, [pc, #364]	; (800f464 <udp_sendto_if_src+0x1bc>)
 800f2f8:	4858      	ldr	r0, [pc, #352]	; (800f45c <udp_sendto_if_src+0x1b4>)
 800f2fa:	f004 fcb1 	bl	8013c60 <iprintf>
 800f2fe:	f06f 030f 	mvn.w	r3, #15
 800f302:	e0a2      	b.n	800f44a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800f304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f306:	2b00      	cmp	r3, #0
 800f308:	d109      	bne.n	800f31e <udp_sendto_if_src+0x76>
 800f30a:	4b52      	ldr	r3, [pc, #328]	; (800f454 <udp_sendto_if_src+0x1ac>)
 800f30c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800f310:	4955      	ldr	r1, [pc, #340]	; (800f468 <udp_sendto_if_src+0x1c0>)
 800f312:	4852      	ldr	r0, [pc, #328]	; (800f45c <udp_sendto_if_src+0x1b4>)
 800f314:	f004 fca4 	bl	8013c60 <iprintf>
 800f318:	f06f 030f 	mvn.w	r3, #15
 800f31c:	e095      	b.n	800f44a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800f31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f320:	2b00      	cmp	r3, #0
 800f322:	d109      	bne.n	800f338 <udp_sendto_if_src+0x90>
 800f324:	4b4b      	ldr	r3, [pc, #300]	; (800f454 <udp_sendto_if_src+0x1ac>)
 800f326:	f240 22d5 	movw	r2, #725	; 0x2d5
 800f32a:	4950      	ldr	r1, [pc, #320]	; (800f46c <udp_sendto_if_src+0x1c4>)
 800f32c:	484b      	ldr	r0, [pc, #300]	; (800f45c <udp_sendto_if_src+0x1b4>)
 800f32e:	f004 fc97 	bl	8013c60 <iprintf>
 800f332:	f06f 030f 	mvn.w	r3, #15
 800f336:	e088      	b.n	800f44a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	8a5b      	ldrh	r3, [r3, #18]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d10f      	bne.n	800f360 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f340:	68f9      	ldr	r1, [r7, #12]
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	8a5b      	ldrh	r3, [r3, #18]
 800f346:	461a      	mov	r2, r3
 800f348:	68f8      	ldr	r0, [r7, #12]
 800f34a:	f000 f893 	bl	800f474 <udp_bind>
 800f34e:	4603      	mov	r3, r0
 800f350:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800f352:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d002      	beq.n	800f360 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800f35a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f35e:	e074      	b.n	800f44a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	891b      	ldrh	r3, [r3, #8]
 800f364:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800f368:	4293      	cmp	r3, r2
 800f36a:	d902      	bls.n	800f372 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800f36c:	f04f 33ff 	mov.w	r3, #4294967295
 800f370:	e06b      	b.n	800f44a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800f372:	2108      	movs	r1, #8
 800f374:	68b8      	ldr	r0, [r7, #8]
 800f376:	f7f9 ff87 	bl	8009288 <pbuf_add_header>
 800f37a:	4603      	mov	r3, r0
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d015      	beq.n	800f3ac <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800f380:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f384:	2108      	movs	r1, #8
 800f386:	2022      	movs	r0, #34	; 0x22
 800f388:	f7f9 fd30 	bl	8008dec <pbuf_alloc>
 800f38c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800f38e:	69fb      	ldr	r3, [r7, #28]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d102      	bne.n	800f39a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800f394:	f04f 33ff 	mov.w	r3, #4294967295
 800f398:	e057      	b.n	800f44a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800f39a:	68bb      	ldr	r3, [r7, #8]
 800f39c:	891b      	ldrh	r3, [r3, #8]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d006      	beq.n	800f3b0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800f3a2:	68b9      	ldr	r1, [r7, #8]
 800f3a4:	69f8      	ldr	r0, [r7, #28]
 800f3a6:	f7fa f91d 	bl	80095e4 <pbuf_chain>
 800f3aa:	e001      	b.n	800f3b0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800f3b0:	69fb      	ldr	r3, [r7, #28]
 800f3b2:	895b      	ldrh	r3, [r3, #10]
 800f3b4:	2b07      	cmp	r3, #7
 800f3b6:	d806      	bhi.n	800f3c6 <udp_sendto_if_src+0x11e>
 800f3b8:	4b26      	ldr	r3, [pc, #152]	; (800f454 <udp_sendto_if_src+0x1ac>)
 800f3ba:	f240 320d 	movw	r2, #781	; 0x30d
 800f3be:	492c      	ldr	r1, [pc, #176]	; (800f470 <udp_sendto_if_src+0x1c8>)
 800f3c0:	4826      	ldr	r0, [pc, #152]	; (800f45c <udp_sendto_if_src+0x1b4>)
 800f3c2:	f004 fc4d 	bl	8013c60 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800f3c6:	69fb      	ldr	r3, [r7, #28]
 800f3c8:	685b      	ldr	r3, [r3, #4]
 800f3ca:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	8a5b      	ldrh	r3, [r3, #18]
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f7f8 fc85 	bl	8007ce0 <lwip_htons>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	461a      	mov	r2, r3
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800f3de:	887b      	ldrh	r3, [r7, #2]
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7f8 fc7d 	bl	8007ce0 <lwip_htons>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	461a      	mov	r2, r3
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	719a      	strb	r2, [r3, #6]
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800f3f8:	69fb      	ldr	r3, [r7, #28]
 800f3fa:	891b      	ldrh	r3, [r3, #8]
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f7f8 fc6f 	bl	8007ce0 <lwip_htons>
 800f402:	4603      	mov	r3, r0
 800f404:	461a      	mov	r2, r3
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800f40a:	2311      	movs	r3, #17
 800f40c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	7adb      	ldrb	r3, [r3, #11]
 800f412:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	7a9b      	ldrb	r3, [r3, #10]
 800f418:	7cb9      	ldrb	r1, [r7, #18]
 800f41a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f41c:	9202      	str	r2, [sp, #8]
 800f41e:	7cfa      	ldrb	r2, [r7, #19]
 800f420:	9201      	str	r2, [sp, #4]
 800f422:	9300      	str	r3, [sp, #0]
 800f424:	460b      	mov	r3, r1
 800f426:	687a      	ldr	r2, [r7, #4]
 800f428:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f42a:	69f8      	ldr	r0, [r7, #28]
 800f42c:	f003 fb3a 	bl	8012aa4 <ip4_output_if_src>
 800f430:	4603      	mov	r3, r0
 800f432:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800f434:	69fa      	ldr	r2, [r7, #28]
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	429a      	cmp	r2, r3
 800f43a:	d004      	beq.n	800f446 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800f43c:	69f8      	ldr	r0, [r7, #28]
 800f43e:	f7f9 ffb9 	bl	80093b4 <pbuf_free>
    q = NULL;
 800f442:	2300      	movs	r3, #0
 800f444:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800f446:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800f44a:	4618      	mov	r0, r3
 800f44c:	3720      	adds	r7, #32
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}
 800f452:	bf00      	nop
 800f454:	08016e54 	.word	0x08016e54
 800f458:	08017040 	.word	0x08017040
 800f45c:	08016ea8 	.word	0x08016ea8
 800f460:	08017060 	.word	0x08017060
 800f464:	08017080 	.word	0x08017080
 800f468:	080170a4 	.word	0x080170a4
 800f46c:	080170c8 	.word	0x080170c8
 800f470:	080170ec 	.word	0x080170ec

0800f474 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b086      	sub	sp, #24
 800f478:	af00      	add	r7, sp, #0
 800f47a:	60f8      	str	r0, [r7, #12]
 800f47c:	60b9      	str	r1, [r7, #8]
 800f47e:	4613      	mov	r3, r2
 800f480:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d101      	bne.n	800f48c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800f488:	4b39      	ldr	r3, [pc, #228]	; (800f570 <udp_bind+0xfc>)
 800f48a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d109      	bne.n	800f4a6 <udp_bind+0x32>
 800f492:	4b38      	ldr	r3, [pc, #224]	; (800f574 <udp_bind+0x100>)
 800f494:	f240 32b7 	movw	r2, #951	; 0x3b7
 800f498:	4937      	ldr	r1, [pc, #220]	; (800f578 <udp_bind+0x104>)
 800f49a:	4838      	ldr	r0, [pc, #224]	; (800f57c <udp_bind+0x108>)
 800f49c:	f004 fbe0 	bl	8013c60 <iprintf>
 800f4a0:	f06f 030f 	mvn.w	r3, #15
 800f4a4:	e060      	b.n	800f568 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f4aa:	4b35      	ldr	r3, [pc, #212]	; (800f580 <udp_bind+0x10c>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	617b      	str	r3, [r7, #20]
 800f4b0:	e009      	b.n	800f4c6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800f4b2:	68fa      	ldr	r2, [r7, #12]
 800f4b4:	697b      	ldr	r3, [r7, #20]
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	d102      	bne.n	800f4c0 <udp_bind+0x4c>
      rebind = 1;
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	74fb      	strb	r3, [r7, #19]
      break;
 800f4be:	e005      	b.n	800f4cc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	68db      	ldr	r3, [r3, #12]
 800f4c4:	617b      	str	r3, [r7, #20]
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d1f2      	bne.n	800f4b2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800f4cc:	88fb      	ldrh	r3, [r7, #6]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d109      	bne.n	800f4e6 <udp_bind+0x72>
    port = udp_new_port();
 800f4d2:	f7ff fcc5 	bl	800ee60 <udp_new_port>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f4da:	88fb      	ldrh	r3, [r7, #6]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d12c      	bne.n	800f53a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800f4e0:	f06f 0307 	mvn.w	r3, #7
 800f4e4:	e040      	b.n	800f568 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f4e6:	4b26      	ldr	r3, [pc, #152]	; (800f580 <udp_bind+0x10c>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	617b      	str	r3, [r7, #20]
 800f4ec:	e022      	b.n	800f534 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800f4ee:	68fa      	ldr	r2, [r7, #12]
 800f4f0:	697b      	ldr	r3, [r7, #20]
 800f4f2:	429a      	cmp	r2, r3
 800f4f4:	d01b      	beq.n	800f52e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800f4f6:	697b      	ldr	r3, [r7, #20]
 800f4f8:	8a5b      	ldrh	r3, [r3, #18]
 800f4fa:	88fa      	ldrh	r2, [r7, #6]
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	d116      	bne.n	800f52e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	681a      	ldr	r2, [r3, #0]
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800f508:	429a      	cmp	r2, r3
 800f50a:	d00d      	beq.n	800f528 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d00a      	beq.n	800f528 <udp_bind+0xb4>
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d006      	beq.n	800f528 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f51a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d003      	beq.n	800f528 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d102      	bne.n	800f52e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800f528:	f06f 0307 	mvn.w	r3, #7
 800f52c:	e01c      	b.n	800f568 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	68db      	ldr	r3, [r3, #12]
 800f532:	617b      	str	r3, [r7, #20]
 800f534:	697b      	ldr	r3, [r7, #20]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d1d9      	bne.n	800f4ee <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d002      	beq.n	800f546 <udp_bind+0xd2>
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	e000      	b.n	800f548 <udp_bind+0xd4>
 800f546:	2300      	movs	r3, #0
 800f548:	68fa      	ldr	r2, [r7, #12]
 800f54a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	88fa      	ldrh	r2, [r7, #6]
 800f550:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800f552:	7cfb      	ldrb	r3, [r7, #19]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d106      	bne.n	800f566 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800f558:	4b09      	ldr	r3, [pc, #36]	; (800f580 <udp_bind+0x10c>)
 800f55a:	681a      	ldr	r2, [r3, #0]
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800f560:	4a07      	ldr	r2, [pc, #28]	; (800f580 <udp_bind+0x10c>)
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800f566:	2300      	movs	r3, #0
}
 800f568:	4618      	mov	r0, r3
 800f56a:	3718      	adds	r7, #24
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}
 800f570:	0801a248 	.word	0x0801a248
 800f574:	08016e54 	.word	0x08016e54
 800f578:	0801711c 	.word	0x0801711c
 800f57c:	08016ea8 	.word	0x08016ea8
 800f580:	2000af1c 	.word	0x2000af1c

0800f584 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b086      	sub	sp, #24
 800f588:	af00      	add	r7, sp, #0
 800f58a:	60f8      	str	r0, [r7, #12]
 800f58c:	60b9      	str	r1, [r7, #8]
 800f58e:	4613      	mov	r3, r2
 800f590:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d109      	bne.n	800f5ac <udp_connect+0x28>
 800f598:	4b2c      	ldr	r3, [pc, #176]	; (800f64c <udp_connect+0xc8>)
 800f59a:	f240 4235 	movw	r2, #1077	; 0x435
 800f59e:	492c      	ldr	r1, [pc, #176]	; (800f650 <udp_connect+0xcc>)
 800f5a0:	482c      	ldr	r0, [pc, #176]	; (800f654 <udp_connect+0xd0>)
 800f5a2:	f004 fb5d 	bl	8013c60 <iprintf>
 800f5a6:	f06f 030f 	mvn.w	r3, #15
 800f5aa:	e04b      	b.n	800f644 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d109      	bne.n	800f5c6 <udp_connect+0x42>
 800f5b2:	4b26      	ldr	r3, [pc, #152]	; (800f64c <udp_connect+0xc8>)
 800f5b4:	f240 4236 	movw	r2, #1078	; 0x436
 800f5b8:	4927      	ldr	r1, [pc, #156]	; (800f658 <udp_connect+0xd4>)
 800f5ba:	4826      	ldr	r0, [pc, #152]	; (800f654 <udp_connect+0xd0>)
 800f5bc:	f004 fb50 	bl	8013c60 <iprintf>
 800f5c0:	f06f 030f 	mvn.w	r3, #15
 800f5c4:	e03e      	b.n	800f644 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	8a5b      	ldrh	r3, [r3, #18]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d10f      	bne.n	800f5ee <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f5ce:	68f9      	ldr	r1, [r7, #12]
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	8a5b      	ldrh	r3, [r3, #18]
 800f5d4:	461a      	mov	r2, r3
 800f5d6:	68f8      	ldr	r0, [r7, #12]
 800f5d8:	f7ff ff4c 	bl	800f474 <udp_bind>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800f5e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d002      	beq.n	800f5ee <udp_connect+0x6a>
      return err;
 800f5e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f5ec:	e02a      	b.n	800f644 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d002      	beq.n	800f5fa <udp_connect+0x76>
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	e000      	b.n	800f5fc <udp_connect+0x78>
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	68fa      	ldr	r2, [r7, #12]
 800f5fe:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	88fa      	ldrh	r2, [r7, #6]
 800f604:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	7c1b      	ldrb	r3, [r3, #16]
 800f60a:	f043 0304 	orr.w	r3, r3, #4
 800f60e:	b2da      	uxtb	r2, r3
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f614:	4b11      	ldr	r3, [pc, #68]	; (800f65c <udp_connect+0xd8>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	617b      	str	r3, [r7, #20]
 800f61a:	e008      	b.n	800f62e <udp_connect+0xaa>
    if (pcb == ipcb) {
 800f61c:	68fa      	ldr	r2, [r7, #12]
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	429a      	cmp	r2, r3
 800f622:	d101      	bne.n	800f628 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800f624:	2300      	movs	r3, #0
 800f626:	e00d      	b.n	800f644 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f628:	697b      	ldr	r3, [r7, #20]
 800f62a:	68db      	ldr	r3, [r3, #12]
 800f62c:	617b      	str	r3, [r7, #20]
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d1f3      	bne.n	800f61c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800f634:	4b09      	ldr	r3, [pc, #36]	; (800f65c <udp_connect+0xd8>)
 800f636:	681a      	ldr	r2, [r3, #0]
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800f63c:	4a07      	ldr	r2, [pc, #28]	; (800f65c <udp_connect+0xd8>)
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800f642:	2300      	movs	r3, #0
}
 800f644:	4618      	mov	r0, r3
 800f646:	3718      	adds	r7, #24
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}
 800f64c:	08016e54 	.word	0x08016e54
 800f650:	08017134 	.word	0x08017134
 800f654:	08016ea8 	.word	0x08016ea8
 800f658:	08017150 	.word	0x08017150
 800f65c:	2000af1c 	.word	0x2000af1c

0800f660 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b084      	sub	sp, #16
 800f664:	af00      	add	r7, sp, #0
 800f666:	60f8      	str	r0, [r7, #12]
 800f668:	60b9      	str	r1, [r7, #8]
 800f66a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d107      	bne.n	800f682 <udp_recv+0x22>
 800f672:	4b08      	ldr	r3, [pc, #32]	; (800f694 <udp_recv+0x34>)
 800f674:	f240 428a 	movw	r2, #1162	; 0x48a
 800f678:	4907      	ldr	r1, [pc, #28]	; (800f698 <udp_recv+0x38>)
 800f67a:	4808      	ldr	r0, [pc, #32]	; (800f69c <udp_recv+0x3c>)
 800f67c:	f004 faf0 	bl	8013c60 <iprintf>
 800f680:	e005      	b.n	800f68e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	68ba      	ldr	r2, [r7, #8]
 800f686:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	687a      	ldr	r2, [r7, #4]
 800f68c:	61da      	str	r2, [r3, #28]
}
 800f68e:	3710      	adds	r7, #16
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}
 800f694:	08016e54 	.word	0x08016e54
 800f698:	08017188 	.word	0x08017188
 800f69c:	08016ea8 	.word	0x08016ea8

0800f6a0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b084      	sub	sp, #16
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d107      	bne.n	800f6be <udp_remove+0x1e>
 800f6ae:	4b19      	ldr	r3, [pc, #100]	; (800f714 <udp_remove+0x74>)
 800f6b0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800f6b4:	4918      	ldr	r1, [pc, #96]	; (800f718 <udp_remove+0x78>)
 800f6b6:	4819      	ldr	r0, [pc, #100]	; (800f71c <udp_remove+0x7c>)
 800f6b8:	f004 fad2 	bl	8013c60 <iprintf>
 800f6bc:	e026      	b.n	800f70c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800f6be:	4b18      	ldr	r3, [pc, #96]	; (800f720 <udp_remove+0x80>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	687a      	ldr	r2, [r7, #4]
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	d105      	bne.n	800f6d4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800f6c8:	4b15      	ldr	r3, [pc, #84]	; (800f720 <udp_remove+0x80>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	68db      	ldr	r3, [r3, #12]
 800f6ce:	4a14      	ldr	r2, [pc, #80]	; (800f720 <udp_remove+0x80>)
 800f6d0:	6013      	str	r3, [r2, #0]
 800f6d2:	e017      	b.n	800f704 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f6d4:	4b12      	ldr	r3, [pc, #72]	; (800f720 <udp_remove+0x80>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	60fb      	str	r3, [r7, #12]
 800f6da:	e010      	b.n	800f6fe <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	68db      	ldr	r3, [r3, #12]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d009      	beq.n	800f6f8 <udp_remove+0x58>
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	68db      	ldr	r3, [r3, #12]
 800f6e8:	687a      	ldr	r2, [r7, #4]
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	d104      	bne.n	800f6f8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	68da      	ldr	r2, [r3, #12]
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	60da      	str	r2, [r3, #12]
        break;
 800f6f6:	e005      	b.n	800f704 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	68db      	ldr	r3, [r3, #12]
 800f6fc:	60fb      	str	r3, [r7, #12]
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d1eb      	bne.n	800f6dc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800f704:	6879      	ldr	r1, [r7, #4]
 800f706:	2000      	movs	r0, #0
 800f708:	f7f8 ffd2 	bl	80086b0 <memp_free>
}
 800f70c:	3710      	adds	r7, #16
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}
 800f712:	bf00      	nop
 800f714:	08016e54 	.word	0x08016e54
 800f718:	080171a0 	.word	0x080171a0
 800f71c:	08016ea8 	.word	0x08016ea8
 800f720:	2000af1c 	.word	0x2000af1c

0800f724 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b082      	sub	sp, #8
 800f728:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800f72a:	2000      	movs	r0, #0
 800f72c:	f7f8 ff50 	bl	80085d0 <memp_malloc>
 800f730:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d007      	beq.n	800f748 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800f738:	2220      	movs	r2, #32
 800f73a:	2100      	movs	r1, #0
 800f73c:	6878      	ldr	r0, [r7, #4]
 800f73e:	f004 fa87 	bl	8013c50 <memset>
    pcb->ttl = UDP_TTL;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	22ff      	movs	r2, #255	; 0xff
 800f746:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800f748:	687b      	ldr	r3, [r7, #4]
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3708      	adds	r7, #8
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}
	...

0800f754 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f754:	b480      	push	{r7}
 800f756:	b085      	sub	sp, #20
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
 800f75c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d01e      	beq.n	800f7a2 <udp_netif_ip_addr_changed+0x4e>
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d01a      	beq.n	800f7a2 <udp_netif_ip_addr_changed+0x4e>
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d017      	beq.n	800f7a2 <udp_netif_ip_addr_changed+0x4e>
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d013      	beq.n	800f7a2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f77a:	4b0d      	ldr	r3, [pc, #52]	; (800f7b0 <udp_netif_ip_addr_changed+0x5c>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	60fb      	str	r3, [r7, #12]
 800f780:	e00c      	b.n	800f79c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	681a      	ldr	r2, [r3, #0]
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d103      	bne.n	800f796 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	681a      	ldr	r2, [r3, #0]
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	68db      	ldr	r3, [r3, #12]
 800f79a:	60fb      	str	r3, [r7, #12]
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d1ef      	bne.n	800f782 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f7a2:	bf00      	nop
 800f7a4:	3714      	adds	r7, #20
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ac:	4770      	bx	lr
 800f7ae:	bf00      	nop
 800f7b0:	2000af1c 	.word	0x2000af1c

0800f7b4 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800f7b8:	4b20      	ldr	r3, [pc, #128]	; (800f83c <dhcp_inc_pcb_refcount+0x88>)
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d133      	bne.n	800f828 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800f7c0:	4b1f      	ldr	r3, [pc, #124]	; (800f840 <dhcp_inc_pcb_refcount+0x8c>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d005      	beq.n	800f7d4 <dhcp_inc_pcb_refcount+0x20>
 800f7c8:	4b1e      	ldr	r3, [pc, #120]	; (800f844 <dhcp_inc_pcb_refcount+0x90>)
 800f7ca:	22e5      	movs	r2, #229	; 0xe5
 800f7cc:	491e      	ldr	r1, [pc, #120]	; (800f848 <dhcp_inc_pcb_refcount+0x94>)
 800f7ce:	481f      	ldr	r0, [pc, #124]	; (800f84c <dhcp_inc_pcb_refcount+0x98>)
 800f7d0:	f004 fa46 	bl	8013c60 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800f7d4:	f7ff ffa6 	bl	800f724 <udp_new>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	4a19      	ldr	r2, [pc, #100]	; (800f840 <dhcp_inc_pcb_refcount+0x8c>)
 800f7dc:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800f7de:	4b18      	ldr	r3, [pc, #96]	; (800f840 <dhcp_inc_pcb_refcount+0x8c>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d102      	bne.n	800f7ec <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800f7e6:	f04f 33ff 	mov.w	r3, #4294967295
 800f7ea:	e024      	b.n	800f836 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800f7ec:	4b14      	ldr	r3, [pc, #80]	; (800f840 <dhcp_inc_pcb_refcount+0x8c>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	7a5a      	ldrb	r2, [r3, #9]
 800f7f2:	4b13      	ldr	r3, [pc, #76]	; (800f840 <dhcp_inc_pcb_refcount+0x8c>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	f042 0220 	orr.w	r2, r2, #32
 800f7fa:	b2d2      	uxtb	r2, r2
 800f7fc:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800f7fe:	4b10      	ldr	r3, [pc, #64]	; (800f840 <dhcp_inc_pcb_refcount+0x8c>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	2244      	movs	r2, #68	; 0x44
 800f804:	4912      	ldr	r1, [pc, #72]	; (800f850 <dhcp_inc_pcb_refcount+0x9c>)
 800f806:	4618      	mov	r0, r3
 800f808:	f7ff fe34 	bl	800f474 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800f80c:	4b0c      	ldr	r3, [pc, #48]	; (800f840 <dhcp_inc_pcb_refcount+0x8c>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	2243      	movs	r2, #67	; 0x43
 800f812:	490f      	ldr	r1, [pc, #60]	; (800f850 <dhcp_inc_pcb_refcount+0x9c>)
 800f814:	4618      	mov	r0, r3
 800f816:	f7ff feb5 	bl	800f584 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800f81a:	4b09      	ldr	r3, [pc, #36]	; (800f840 <dhcp_inc_pcb_refcount+0x8c>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	2200      	movs	r2, #0
 800f820:	490c      	ldr	r1, [pc, #48]	; (800f854 <dhcp_inc_pcb_refcount+0xa0>)
 800f822:	4618      	mov	r0, r3
 800f824:	f7ff ff1c 	bl	800f660 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800f828:	4b04      	ldr	r3, [pc, #16]	; (800f83c <dhcp_inc_pcb_refcount+0x88>)
 800f82a:	781b      	ldrb	r3, [r3, #0]
 800f82c:	3301      	adds	r3, #1
 800f82e:	b2da      	uxtb	r2, r3
 800f830:	4b02      	ldr	r3, [pc, #8]	; (800f83c <dhcp_inc_pcb_refcount+0x88>)
 800f832:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800f834:	2300      	movs	r3, #0
}
 800f836:	4618      	mov	r0, r3
 800f838:	bd80      	pop	{r7, pc}
 800f83a:	bf00      	nop
 800f83c:	2000af4c 	.word	0x2000af4c
 800f840:	2000af48 	.word	0x2000af48
 800f844:	080171b8 	.word	0x080171b8
 800f848:	080171f0 	.word	0x080171f0
 800f84c:	08017218 	.word	0x08017218
 800f850:	0801a248 	.word	0x0801a248
 800f854:	080110ed 	.word	0x080110ed

0800f858 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800f85c:	4b0e      	ldr	r3, [pc, #56]	; (800f898 <dhcp_dec_pcb_refcount+0x40>)
 800f85e:	781b      	ldrb	r3, [r3, #0]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d105      	bne.n	800f870 <dhcp_dec_pcb_refcount+0x18>
 800f864:	4b0d      	ldr	r3, [pc, #52]	; (800f89c <dhcp_dec_pcb_refcount+0x44>)
 800f866:	22ff      	movs	r2, #255	; 0xff
 800f868:	490d      	ldr	r1, [pc, #52]	; (800f8a0 <dhcp_dec_pcb_refcount+0x48>)
 800f86a:	480e      	ldr	r0, [pc, #56]	; (800f8a4 <dhcp_dec_pcb_refcount+0x4c>)
 800f86c:	f004 f9f8 	bl	8013c60 <iprintf>
  dhcp_pcb_refcount--;
 800f870:	4b09      	ldr	r3, [pc, #36]	; (800f898 <dhcp_dec_pcb_refcount+0x40>)
 800f872:	781b      	ldrb	r3, [r3, #0]
 800f874:	3b01      	subs	r3, #1
 800f876:	b2da      	uxtb	r2, r3
 800f878:	4b07      	ldr	r3, [pc, #28]	; (800f898 <dhcp_dec_pcb_refcount+0x40>)
 800f87a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800f87c:	4b06      	ldr	r3, [pc, #24]	; (800f898 <dhcp_dec_pcb_refcount+0x40>)
 800f87e:	781b      	ldrb	r3, [r3, #0]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d107      	bne.n	800f894 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800f884:	4b08      	ldr	r3, [pc, #32]	; (800f8a8 <dhcp_dec_pcb_refcount+0x50>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	4618      	mov	r0, r3
 800f88a:	f7ff ff09 	bl	800f6a0 <udp_remove>
    dhcp_pcb = NULL;
 800f88e:	4b06      	ldr	r3, [pc, #24]	; (800f8a8 <dhcp_dec_pcb_refcount+0x50>)
 800f890:	2200      	movs	r2, #0
 800f892:	601a      	str	r2, [r3, #0]
  }
}
 800f894:	bf00      	nop
 800f896:	bd80      	pop	{r7, pc}
 800f898:	2000af4c 	.word	0x2000af4c
 800f89c:	080171b8 	.word	0x080171b8
 800f8a0:	08017240 	.word	0x08017240
 800f8a4:	08017218 	.word	0x08017218
 800f8a8:	2000af48 	.word	0x2000af48

0800f8ac <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b084      	sub	sp, #16
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8b8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800f8ba:	210c      	movs	r1, #12
 800f8bc:	68f8      	ldr	r0, [r7, #12]
 800f8be:	f001 f857 	bl	8010970 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800f8c2:	4b06      	ldr	r3, [pc, #24]	; (800f8dc <dhcp_handle_nak+0x30>)
 800f8c4:	4a05      	ldr	r2, [pc, #20]	; (800f8dc <dhcp_handle_nak+0x30>)
 800f8c6:	4905      	ldr	r1, [pc, #20]	; (800f8dc <dhcp_handle_nak+0x30>)
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	f7f9 f893 	bl	80089f4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f000 fc4a 	bl	8010168 <dhcp_discover>
}
 800f8d4:	bf00      	nop
 800f8d6:	3710      	adds	r7, #16
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}
 800f8dc:	0801a248 	.word	0x0801a248

0800f8e0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b084      	sub	sp, #16
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ec:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800f8ee:	2108      	movs	r1, #8
 800f8f0:	68f8      	ldr	r0, [r7, #12]
 800f8f2:	f001 f83d 	bl	8010970 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	331c      	adds	r3, #28
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	4619      	mov	r1, r3
 800f8fe:	6878      	ldr	r0, [r7, #4]
 800f900:	f002 fb3e 	bl	8011f80 <etharp_query>
 800f904:	4603      	mov	r3, r0
 800f906:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	799b      	ldrb	r3, [r3, #6]
 800f90c:	2bff      	cmp	r3, #255	; 0xff
 800f90e:	d005      	beq.n	800f91c <dhcp_check+0x3c>
    dhcp->tries++;
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	799b      	ldrb	r3, [r3, #6]
 800f914:	3301      	adds	r3, #1
 800f916:	b2da      	uxtb	r2, r3
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800f91c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800f920:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f922:	893b      	ldrh	r3, [r7, #8]
 800f924:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f928:	4a06      	ldr	r2, [pc, #24]	; (800f944 <dhcp_check+0x64>)
 800f92a:	fb82 1203 	smull	r1, r2, r2, r3
 800f92e:	1152      	asrs	r2, r2, #5
 800f930:	17db      	asrs	r3, r3, #31
 800f932:	1ad3      	subs	r3, r2, r3
 800f934:	b29a      	uxth	r2, r3
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800f93a:	bf00      	nop
 800f93c:	3710      	adds	r7, #16
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}
 800f942:	bf00      	nop
 800f944:	10624dd3 	.word	0x10624dd3

0800f948 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b084      	sub	sp, #16
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
 800f950:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f956:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800f958:	4b0c      	ldr	r3, [pc, #48]	; (800f98c <dhcp_handle_offer+0x44>)
 800f95a:	789b      	ldrb	r3, [r3, #2]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d011      	beq.n	800f984 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	2200      	movs	r2, #0
 800f964:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800f966:	4b0a      	ldr	r3, [pc, #40]	; (800f990 <dhcp_handle_offer+0x48>)
 800f968:	689b      	ldr	r3, [r3, #8]
 800f96a:	4618      	mov	r0, r3
 800f96c:	f7f8 f9cd 	bl	8007d0a <lwip_htonl>
 800f970:	4602      	mov	r2, r0
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	691a      	ldr	r2, [r3, #16]
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800f97e:	6878      	ldr	r0, [r7, #4]
 800f980:	f000 f808 	bl	800f994 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800f984:	bf00      	nop
 800f986:	3710      	adds	r7, #16
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}
 800f98c:	2000af40 	.word	0x2000af40
 800f990:	2000af20 	.word	0x2000af20

0800f994 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800f994:	b5b0      	push	{r4, r5, r7, lr}
 800f996:	b08a      	sub	sp, #40	; 0x28
 800f998:	af02      	add	r7, sp, #8
 800f99a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d109      	bne.n	800f9b6 <dhcp_select+0x22>
 800f9a2:	4b71      	ldr	r3, [pc, #452]	; (800fb68 <dhcp_select+0x1d4>)
 800f9a4:	f240 1277 	movw	r2, #375	; 0x177
 800f9a8:	4970      	ldr	r1, [pc, #448]	; (800fb6c <dhcp_select+0x1d8>)
 800f9aa:	4871      	ldr	r0, [pc, #452]	; (800fb70 <dhcp_select+0x1dc>)
 800f9ac:	f004 f958 	bl	8013c60 <iprintf>
 800f9b0:	f06f 030f 	mvn.w	r3, #15
 800f9b4:	e0d3      	b.n	800fb5e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ba:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800f9bc:	69bb      	ldr	r3, [r7, #24]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d109      	bne.n	800f9d6 <dhcp_select+0x42>
 800f9c2:	4b69      	ldr	r3, [pc, #420]	; (800fb68 <dhcp_select+0x1d4>)
 800f9c4:	f240 1279 	movw	r2, #377	; 0x179
 800f9c8:	496a      	ldr	r1, [pc, #424]	; (800fb74 <dhcp_select+0x1e0>)
 800f9ca:	4869      	ldr	r0, [pc, #420]	; (800fb70 <dhcp_select+0x1dc>)
 800f9cc:	f004 f948 	bl	8013c60 <iprintf>
 800f9d0:	f06f 0305 	mvn.w	r3, #5
 800f9d4:	e0c3      	b.n	800fb5e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800f9d6:	2101      	movs	r1, #1
 800f9d8:	69b8      	ldr	r0, [r7, #24]
 800f9da:	f000 ffc9 	bl	8010970 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f9de:	f107 030c 	add.w	r3, r7, #12
 800f9e2:	2203      	movs	r2, #3
 800f9e4:	69b9      	ldr	r1, [r7, #24]
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f001 fc4e 	bl	8011288 <dhcp_create_msg>
 800f9ec:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f9ee:	697b      	ldr	r3, [r7, #20]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	f000 8085 	beq.w	800fb00 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	685b      	ldr	r3, [r3, #4]
 800f9fa:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f9fc:	89b8      	ldrh	r0, [r7, #12]
 800f9fe:	693b      	ldr	r3, [r7, #16]
 800fa00:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fa04:	2302      	movs	r3, #2
 800fa06:	2239      	movs	r2, #57	; 0x39
 800fa08:	f000 ffcc 	bl	80109a4 <dhcp_option>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800fa10:	89b8      	ldrh	r0, [r7, #12]
 800fa12:	693b      	ldr	r3, [r7, #16]
 800fa14:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa1c:	461a      	mov	r2, r3
 800fa1e:	f001 f81b 	bl	8010a58 <dhcp_option_short>
 800fa22:	4603      	mov	r3, r0
 800fa24:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800fa26:	89b8      	ldrh	r0, [r7, #12]
 800fa28:	693b      	ldr	r3, [r7, #16]
 800fa2a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fa2e:	2304      	movs	r3, #4
 800fa30:	2232      	movs	r2, #50	; 0x32
 800fa32:	f000 ffb7 	bl	80109a4 <dhcp_option>
 800fa36:	4603      	mov	r3, r0
 800fa38:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800fa3a:	89bc      	ldrh	r4, [r7, #12]
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800fa42:	69bb      	ldr	r3, [r7, #24]
 800fa44:	69db      	ldr	r3, [r3, #28]
 800fa46:	4618      	mov	r0, r3
 800fa48:	f7f8 f95f 	bl	8007d0a <lwip_htonl>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	461a      	mov	r2, r3
 800fa50:	4629      	mov	r1, r5
 800fa52:	4620      	mov	r0, r4
 800fa54:	f001 f832 	bl	8010abc <dhcp_option_long>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800fa5c:	89b8      	ldrh	r0, [r7, #12]
 800fa5e:	693b      	ldr	r3, [r7, #16]
 800fa60:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fa64:	2304      	movs	r3, #4
 800fa66:	2236      	movs	r2, #54	; 0x36
 800fa68:	f000 ff9c 	bl	80109a4 <dhcp_option>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800fa70:	89bc      	ldrh	r4, [r7, #12]
 800fa72:	693b      	ldr	r3, [r7, #16]
 800fa74:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800fa78:	69bb      	ldr	r3, [r7, #24]
 800fa7a:	699b      	ldr	r3, [r3, #24]
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f7f8 f944 	bl	8007d0a <lwip_htonl>
 800fa82:	4603      	mov	r3, r0
 800fa84:	461a      	mov	r2, r3
 800fa86:	4629      	mov	r1, r5
 800fa88:	4620      	mov	r0, r4
 800fa8a:	f001 f817 	bl	8010abc <dhcp_option_long>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fa92:	89b8      	ldrh	r0, [r7, #12]
 800fa94:	693b      	ldr	r3, [r7, #16]
 800fa96:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fa9a:	2303      	movs	r3, #3
 800fa9c:	2237      	movs	r2, #55	; 0x37
 800fa9e:	f000 ff81 	bl	80109a4 <dhcp_option>
 800faa2:	4603      	mov	r3, r0
 800faa4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800faa6:	2300      	movs	r3, #0
 800faa8:	77bb      	strb	r3, [r7, #30]
 800faaa:	e00e      	b.n	800faca <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800faac:	89b8      	ldrh	r0, [r7, #12]
 800faae:	693b      	ldr	r3, [r7, #16]
 800fab0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fab4:	7fbb      	ldrb	r3, [r7, #30]
 800fab6:	4a30      	ldr	r2, [pc, #192]	; (800fb78 <dhcp_select+0x1e4>)
 800fab8:	5cd3      	ldrb	r3, [r2, r3]
 800faba:	461a      	mov	r2, r3
 800fabc:	f000 ffa6 	bl	8010a0c <dhcp_option_byte>
 800fac0:	4603      	mov	r3, r0
 800fac2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fac4:	7fbb      	ldrb	r3, [r7, #30]
 800fac6:	3301      	adds	r3, #1
 800fac8:	77bb      	strb	r3, [r7, #30]
 800faca:	7fbb      	ldrb	r3, [r7, #30]
 800facc:	2b02      	cmp	r3, #2
 800face:	d9ed      	bls.n	800faac <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fad0:	89b8      	ldrh	r0, [r7, #12]
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	33f0      	adds	r3, #240	; 0xf0
 800fad6:	697a      	ldr	r2, [r7, #20]
 800fad8:	4619      	mov	r1, r3
 800fada:	f001 fcab 	bl	8011434 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800fade:	4b27      	ldr	r3, [pc, #156]	; (800fb7c <dhcp_select+0x1e8>)
 800fae0:	6818      	ldr	r0, [r3, #0]
 800fae2:	4b27      	ldr	r3, [pc, #156]	; (800fb80 <dhcp_select+0x1ec>)
 800fae4:	9301      	str	r3, [sp, #4]
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	9300      	str	r3, [sp, #0]
 800faea:	2343      	movs	r3, #67	; 0x43
 800faec:	4a25      	ldr	r2, [pc, #148]	; (800fb84 <dhcp_select+0x1f0>)
 800faee:	6979      	ldr	r1, [r7, #20]
 800faf0:	f7ff fbda 	bl	800f2a8 <udp_sendto_if_src>
 800faf4:	4603      	mov	r3, r0
 800faf6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800faf8:	6978      	ldr	r0, [r7, #20]
 800fafa:	f7f9 fc5b 	bl	80093b4 <pbuf_free>
 800fafe:	e001      	b.n	800fb04 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800fb00:	23ff      	movs	r3, #255	; 0xff
 800fb02:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fb04:	69bb      	ldr	r3, [r7, #24]
 800fb06:	799b      	ldrb	r3, [r3, #6]
 800fb08:	2bff      	cmp	r3, #255	; 0xff
 800fb0a:	d005      	beq.n	800fb18 <dhcp_select+0x184>
    dhcp->tries++;
 800fb0c:	69bb      	ldr	r3, [r7, #24]
 800fb0e:	799b      	ldrb	r3, [r3, #6]
 800fb10:	3301      	adds	r3, #1
 800fb12:	b2da      	uxtb	r2, r3
 800fb14:	69bb      	ldr	r3, [r7, #24]
 800fb16:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800fb18:	69bb      	ldr	r3, [r7, #24]
 800fb1a:	799b      	ldrb	r3, [r3, #6]
 800fb1c:	2b05      	cmp	r3, #5
 800fb1e:	d80d      	bhi.n	800fb3c <dhcp_select+0x1a8>
 800fb20:	69bb      	ldr	r3, [r7, #24]
 800fb22:	799b      	ldrb	r3, [r3, #6]
 800fb24:	461a      	mov	r2, r3
 800fb26:	2301      	movs	r3, #1
 800fb28:	4093      	lsls	r3, r2
 800fb2a:	b29b      	uxth	r3, r3
 800fb2c:	461a      	mov	r2, r3
 800fb2e:	0152      	lsls	r2, r2, #5
 800fb30:	1ad2      	subs	r2, r2, r3
 800fb32:	0092      	lsls	r2, r2, #2
 800fb34:	4413      	add	r3, r2
 800fb36:	00db      	lsls	r3, r3, #3
 800fb38:	b29b      	uxth	r3, r3
 800fb3a:	e001      	b.n	800fb40 <dhcp_select+0x1ac>
 800fb3c:	f64e 2360 	movw	r3, #60000	; 0xea60
 800fb40:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fb42:	89fb      	ldrh	r3, [r7, #14]
 800fb44:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fb48:	4a0f      	ldr	r2, [pc, #60]	; (800fb88 <dhcp_select+0x1f4>)
 800fb4a:	fb82 1203 	smull	r1, r2, r2, r3
 800fb4e:	1152      	asrs	r2, r2, #5
 800fb50:	17db      	asrs	r3, r3, #31
 800fb52:	1ad3      	subs	r3, r2, r3
 800fb54:	b29a      	uxth	r2, r3
 800fb56:	69bb      	ldr	r3, [r7, #24]
 800fb58:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fb5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3720      	adds	r7, #32
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bdb0      	pop	{r4, r5, r7, pc}
 800fb66:	bf00      	nop
 800fb68:	080171b8 	.word	0x080171b8
 800fb6c:	08017264 	.word	0x08017264
 800fb70:	08017218 	.word	0x08017218
 800fb74:	08017280 	.word	0x08017280
 800fb78:	20000044 	.word	0x20000044
 800fb7c:	2000af48 	.word	0x2000af48
 800fb80:	0801a248 	.word	0x0801a248
 800fb84:	0801a24c 	.word	0x0801a24c
 800fb88:	10624dd3 	.word	0x10624dd3

0800fb8c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b082      	sub	sp, #8
 800fb90:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800fb92:	4b27      	ldr	r3, [pc, #156]	; (800fc30 <dhcp_coarse_tmr+0xa4>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	607b      	str	r3, [r7, #4]
 800fb98:	e042      	b.n	800fc20 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb9e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d039      	beq.n	800fc1a <dhcp_coarse_tmr+0x8e>
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	795b      	ldrb	r3, [r3, #5]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d035      	beq.n	800fc1a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	8a9b      	ldrh	r3, [r3, #20]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d012      	beq.n	800fbdc <dhcp_coarse_tmr+0x50>
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	8a5b      	ldrh	r3, [r3, #18]
 800fbba:	3301      	adds	r3, #1
 800fbbc:	b29a      	uxth	r2, r3
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	825a      	strh	r2, [r3, #18]
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	8a5a      	ldrh	r2, [r3, #18]
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	8a9b      	ldrh	r3, [r3, #20]
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	d106      	bne.n	800fbdc <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800fbce:	6878      	ldr	r0, [r7, #4]
 800fbd0:	f000 fe34 	bl	801083c <dhcp_release_and_stop>
        dhcp_start(netif);
 800fbd4:	6878      	ldr	r0, [r7, #4]
 800fbd6:	f000 f96b 	bl	800feb0 <dhcp_start>
 800fbda:	e01e      	b.n	800fc1a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	8a1b      	ldrh	r3, [r3, #16]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d00b      	beq.n	800fbfc <dhcp_coarse_tmr+0x70>
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	8a1b      	ldrh	r3, [r3, #16]
 800fbe8:	1e5a      	subs	r2, r3, #1
 800fbea:	b291      	uxth	r1, r2
 800fbec:	683a      	ldr	r2, [r7, #0]
 800fbee:	8211      	strh	r1, [r2, #16]
 800fbf0:	2b01      	cmp	r3, #1
 800fbf2:	d103      	bne.n	800fbfc <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f000 f8c7 	bl	800fd88 <dhcp_t2_timeout>
 800fbfa:	e00e      	b.n	800fc1a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	89db      	ldrh	r3, [r3, #14]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d00a      	beq.n	800fc1a <dhcp_coarse_tmr+0x8e>
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	89db      	ldrh	r3, [r3, #14]
 800fc08:	1e5a      	subs	r2, r3, #1
 800fc0a:	b291      	uxth	r1, r2
 800fc0c:	683a      	ldr	r2, [r7, #0]
 800fc0e:	81d1      	strh	r1, [r2, #14]
 800fc10:	2b01      	cmp	r3, #1
 800fc12:	d102      	bne.n	800fc1a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800fc14:	6878      	ldr	r0, [r7, #4]
 800fc16:	f000 f888 	bl	800fd2a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	607b      	str	r3, [r7, #4]
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d1b9      	bne.n	800fb9a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800fc26:	bf00      	nop
 800fc28:	bf00      	nop
 800fc2a:	3708      	adds	r7, #8
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}
 800fc30:	2000aeb4 	.word	0x2000aeb4

0800fc34 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800fc3a:	4b16      	ldr	r3, [pc, #88]	; (800fc94 <dhcp_fine_tmr+0x60>)
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	607b      	str	r3, [r7, #4]
 800fc40:	e020      	b.n	800fc84 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc46:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d017      	beq.n	800fc7e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	891b      	ldrh	r3, [r3, #8]
 800fc52:	2b01      	cmp	r3, #1
 800fc54:	d906      	bls.n	800fc64 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	891b      	ldrh	r3, [r3, #8]
 800fc5a:	3b01      	subs	r3, #1
 800fc5c:	b29a      	uxth	r2, r3
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	811a      	strh	r2, [r3, #8]
 800fc62:	e00c      	b.n	800fc7e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	891b      	ldrh	r3, [r3, #8]
 800fc68:	2b01      	cmp	r3, #1
 800fc6a:	d108      	bne.n	800fc7e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	891b      	ldrh	r3, [r3, #8]
 800fc70:	3b01      	subs	r3, #1
 800fc72:	b29a      	uxth	r2, r3
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f000 f80d 	bl	800fc98 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	607b      	str	r3, [r7, #4]
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d1db      	bne.n	800fc42 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800fc8a:	bf00      	nop
 800fc8c:	bf00      	nop
 800fc8e:	3708      	adds	r7, #8
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd80      	pop	{r7, pc}
 800fc94:	2000aeb4 	.word	0x2000aeb4

0800fc98 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b084      	sub	sp, #16
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fca4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	795b      	ldrb	r3, [r3, #5]
 800fcaa:	2b0c      	cmp	r3, #12
 800fcac:	d003      	beq.n	800fcb6 <dhcp_timeout+0x1e>
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	795b      	ldrb	r3, [r3, #5]
 800fcb2:	2b06      	cmp	r3, #6
 800fcb4:	d103      	bne.n	800fcbe <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800fcb6:	6878      	ldr	r0, [r7, #4]
 800fcb8:	f000 fa56 	bl	8010168 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800fcbc:	e031      	b.n	800fd22 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	795b      	ldrb	r3, [r3, #5]
 800fcc2:	2b01      	cmp	r3, #1
 800fcc4:	d10e      	bne.n	800fce4 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	799b      	ldrb	r3, [r3, #6]
 800fcca:	2b05      	cmp	r3, #5
 800fccc:	d803      	bhi.n	800fcd6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	f7ff fe60 	bl	800f994 <dhcp_select>
}
 800fcd4:	e025      	b.n	800fd22 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f000 fdb0 	bl	801083c <dhcp_release_and_stop>
      dhcp_start(netif);
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f000 f8e7 	bl	800feb0 <dhcp_start>
}
 800fce2:	e01e      	b.n	800fd22 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	795b      	ldrb	r3, [r3, #5]
 800fce8:	2b08      	cmp	r3, #8
 800fcea:	d10b      	bne.n	800fd04 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	799b      	ldrb	r3, [r3, #6]
 800fcf0:	2b01      	cmp	r3, #1
 800fcf2:	d803      	bhi.n	800fcfc <dhcp_timeout+0x64>
      dhcp_check(netif);
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f7ff fdf3 	bl	800f8e0 <dhcp_check>
}
 800fcfa:	e012      	b.n	800fd22 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f000 fad5 	bl	80102ac <dhcp_bind>
}
 800fd02:	e00e      	b.n	800fd22 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	795b      	ldrb	r3, [r3, #5]
 800fd08:	2b03      	cmp	r3, #3
 800fd0a:	d10a      	bne.n	800fd22 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	799b      	ldrb	r3, [r3, #6]
 800fd10:	2b01      	cmp	r3, #1
 800fd12:	d803      	bhi.n	800fd1c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800fd14:	6878      	ldr	r0, [r7, #4]
 800fd16:	f000 fcdb 	bl	80106d0 <dhcp_reboot>
}
 800fd1a:	e002      	b.n	800fd22 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	f000 fa23 	bl	8010168 <dhcp_discover>
}
 800fd22:	bf00      	nop
 800fd24:	3710      	adds	r7, #16
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}

0800fd2a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800fd2a:	b580      	push	{r7, lr}
 800fd2c:	b084      	sub	sp, #16
 800fd2e:	af00      	add	r7, sp, #0
 800fd30:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd36:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	795b      	ldrb	r3, [r3, #5]
 800fd3c:	2b01      	cmp	r3, #1
 800fd3e:	d007      	beq.n	800fd50 <dhcp_t1_timeout+0x26>
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	795b      	ldrb	r3, [r3, #5]
 800fd44:	2b0a      	cmp	r3, #10
 800fd46:	d003      	beq.n	800fd50 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800fd4c:	2b05      	cmp	r3, #5
 800fd4e:	d117      	bne.n	800fd80 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f000 fb85 	bl	8010460 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	899b      	ldrh	r3, [r3, #12]
 800fd5a:	461a      	mov	r2, r3
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	8a5b      	ldrh	r3, [r3, #18]
 800fd60:	1ad3      	subs	r3, r2, r3
 800fd62:	2b01      	cmp	r3, #1
 800fd64:	dd0c      	ble.n	800fd80 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	899b      	ldrh	r3, [r3, #12]
 800fd6a:	461a      	mov	r2, r3
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	8a5b      	ldrh	r3, [r3, #18]
 800fd70:	1ad3      	subs	r3, r2, r3
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	da00      	bge.n	800fd78 <dhcp_t1_timeout+0x4e>
 800fd76:	3301      	adds	r3, #1
 800fd78:	105b      	asrs	r3, r3, #1
 800fd7a:	b29a      	uxth	r2, r3
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800fd80:	bf00      	nop
 800fd82:	3710      	adds	r7, #16
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}

0800fd88 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b084      	sub	sp, #16
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd94:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	795b      	ldrb	r3, [r3, #5]
 800fd9a:	2b01      	cmp	r3, #1
 800fd9c:	d00b      	beq.n	800fdb6 <dhcp_t2_timeout+0x2e>
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	795b      	ldrb	r3, [r3, #5]
 800fda2:	2b0a      	cmp	r3, #10
 800fda4:	d007      	beq.n	800fdb6 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800fdaa:	2b05      	cmp	r3, #5
 800fdac:	d003      	beq.n	800fdb6 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	795b      	ldrb	r3, [r3, #5]
 800fdb2:	2b04      	cmp	r3, #4
 800fdb4:	d117      	bne.n	800fde6 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	f000 fbee 	bl	8010598 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	8a9b      	ldrh	r3, [r3, #20]
 800fdc0:	461a      	mov	r2, r3
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	8a5b      	ldrh	r3, [r3, #18]
 800fdc6:	1ad3      	subs	r3, r2, r3
 800fdc8:	2b01      	cmp	r3, #1
 800fdca:	dd0c      	ble.n	800fde6 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	8a9b      	ldrh	r3, [r3, #20]
 800fdd0:	461a      	mov	r2, r3
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	8a5b      	ldrh	r3, [r3, #18]
 800fdd6:	1ad3      	subs	r3, r2, r3
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	da00      	bge.n	800fdde <dhcp_t2_timeout+0x56>
 800fddc:	3301      	adds	r3, #1
 800fdde:	105b      	asrs	r3, r3, #1
 800fde0:	b29a      	uxth	r2, r3
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800fde6:	bf00      	nop
 800fde8:	3710      	adds	r7, #16
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}
	...

0800fdf0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b084      	sub	sp, #16
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
 800fdf8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdfe:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	2200      	movs	r2, #0
 800fe04:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800fe0c:	4b26      	ldr	r3, [pc, #152]	; (800fea8 <dhcp_handle_ack+0xb8>)
 800fe0e:	78db      	ldrb	r3, [r3, #3]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d003      	beq.n	800fe1c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800fe14:	4b25      	ldr	r3, [pc, #148]	; (800feac <dhcp_handle_ack+0xbc>)
 800fe16:	68da      	ldr	r2, [r3, #12]
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800fe1c:	4b22      	ldr	r3, [pc, #136]	; (800fea8 <dhcp_handle_ack+0xb8>)
 800fe1e:	791b      	ldrb	r3, [r3, #4]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d004      	beq.n	800fe2e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800fe24:	4b21      	ldr	r3, [pc, #132]	; (800feac <dhcp_handle_ack+0xbc>)
 800fe26:	691a      	ldr	r2, [r3, #16]
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	62da      	str	r2, [r3, #44]	; 0x2c
 800fe2c:	e004      	b.n	800fe38 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe32:	085a      	lsrs	r2, r3, #1
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800fe38:	4b1b      	ldr	r3, [pc, #108]	; (800fea8 <dhcp_handle_ack+0xb8>)
 800fe3a:	795b      	ldrb	r3, [r3, #5]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d004      	beq.n	800fe4a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800fe40:	4b1a      	ldr	r3, [pc, #104]	; (800feac <dhcp_handle_ack+0xbc>)
 800fe42:	695a      	ldr	r2, [r3, #20]
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	631a      	str	r2, [r3, #48]	; 0x30
 800fe48:	e007      	b.n	800fe5a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fe4e:	4613      	mov	r3, r2
 800fe50:	00db      	lsls	r3, r3, #3
 800fe52:	1a9b      	subs	r3, r3, r2
 800fe54:	08da      	lsrs	r2, r3, #3
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	691a      	ldr	r2, [r3, #16]
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800fe62:	4b11      	ldr	r3, [pc, #68]	; (800fea8 <dhcp_handle_ack+0xb8>)
 800fe64:	799b      	ldrb	r3, [r3, #6]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d00b      	beq.n	800fe82 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800fe6a:	4b10      	ldr	r3, [pc, #64]	; (800feac <dhcp_handle_ack+0xbc>)
 800fe6c:	699b      	ldr	r3, [r3, #24]
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7f7 ff4b 	bl	8007d0a <lwip_htonl>
 800fe74:	4602      	mov	r2, r0
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	2201      	movs	r2, #1
 800fe7e:	71da      	strb	r2, [r3, #7]
 800fe80:	e002      	b.n	800fe88 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	2200      	movs	r2, #0
 800fe86:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800fe88:	4b07      	ldr	r3, [pc, #28]	; (800fea8 <dhcp_handle_ack+0xb8>)
 800fe8a:	79db      	ldrb	r3, [r3, #7]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d007      	beq.n	800fea0 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800fe90:	4b06      	ldr	r3, [pc, #24]	; (800feac <dhcp_handle_ack+0xbc>)
 800fe92:	69db      	ldr	r3, [r3, #28]
 800fe94:	4618      	mov	r0, r3
 800fe96:	f7f7 ff38 	bl	8007d0a <lwip_htonl>
 800fe9a:	4602      	mov	r2, r0
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800fea0:	bf00      	nop
 800fea2:	3710      	adds	r7, #16
 800fea4:	46bd      	mov	sp, r7
 800fea6:	bd80      	pop	{r7, pc}
 800fea8:	2000af40 	.word	0x2000af40
 800feac:	2000af20 	.word	0x2000af20

0800feb0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b084      	sub	sp, #16
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d109      	bne.n	800fed2 <dhcp_start+0x22>
 800febe:	4b37      	ldr	r3, [pc, #220]	; (800ff9c <dhcp_start+0xec>)
 800fec0:	f240 22e7 	movw	r2, #743	; 0x2e7
 800fec4:	4936      	ldr	r1, [pc, #216]	; (800ffa0 <dhcp_start+0xf0>)
 800fec6:	4837      	ldr	r0, [pc, #220]	; (800ffa4 <dhcp_start+0xf4>)
 800fec8:	f003 feca 	bl	8013c60 <iprintf>
 800fecc:	f06f 030f 	mvn.w	r3, #15
 800fed0:	e060      	b.n	800ff94 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fed8:	f003 0301 	and.w	r3, r3, #1
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d109      	bne.n	800fef4 <dhcp_start+0x44>
 800fee0:	4b2e      	ldr	r3, [pc, #184]	; (800ff9c <dhcp_start+0xec>)
 800fee2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800fee6:	4930      	ldr	r1, [pc, #192]	; (800ffa8 <dhcp_start+0xf8>)
 800fee8:	482e      	ldr	r0, [pc, #184]	; (800ffa4 <dhcp_start+0xf4>)
 800feea:	f003 feb9 	bl	8013c60 <iprintf>
 800feee:	f06f 030f 	mvn.w	r3, #15
 800fef2:	e04f      	b.n	800ff94 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fef8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fefe:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800ff02:	d202      	bcs.n	800ff0a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800ff04:	f04f 33ff 	mov.w	r3, #4294967295
 800ff08:	e044      	b.n	800ff94 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d10d      	bne.n	800ff2c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800ff10:	2034      	movs	r0, #52	; 0x34
 800ff12:	f7f8 f9cd 	bl	80082b0 <mem_malloc>
 800ff16:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d102      	bne.n	800ff24 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800ff1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ff22:	e037      	b.n	800ff94 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	68fa      	ldr	r2, [r7, #12]
 800ff28:	625a      	str	r2, [r3, #36]	; 0x24
 800ff2a:	e005      	b.n	800ff38 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	791b      	ldrb	r3, [r3, #4]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d001      	beq.n	800ff38 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800ff34:	f7ff fc90 	bl	800f858 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800ff38:	2234      	movs	r2, #52	; 0x34
 800ff3a:	2100      	movs	r1, #0
 800ff3c:	68f8      	ldr	r0, [r7, #12]
 800ff3e:	f003 fe87 	bl	8013c50 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800ff42:	f7ff fc37 	bl	800f7b4 <dhcp_inc_pcb_refcount>
 800ff46:	4603      	mov	r3, r0
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d002      	beq.n	800ff52 <dhcp_start+0xa2>
    return ERR_MEM;
 800ff4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff50:	e020      	b.n	800ff94 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	2201      	movs	r2, #1
 800ff56:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ff5e:	f003 0304 	and.w	r3, r3, #4
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d105      	bne.n	800ff72 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800ff66:	2102      	movs	r1, #2
 800ff68:	68f8      	ldr	r0, [r7, #12]
 800ff6a:	f000 fd01 	bl	8010970 <dhcp_set_state>
    return ERR_OK;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	e010      	b.n	800ff94 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	f000 f8f8 	bl	8010168 <dhcp_discover>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800ff7c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d005      	beq.n	800ff90 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800ff84:	6878      	ldr	r0, [r7, #4]
 800ff86:	f000 fc59 	bl	801083c <dhcp_release_and_stop>
    return ERR_MEM;
 800ff8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ff8e:	e001      	b.n	800ff94 <dhcp_start+0xe4>
  }
  return result;
 800ff90:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ff94:	4618      	mov	r0, r3
 800ff96:	3710      	adds	r7, #16
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd80      	pop	{r7, pc}
 800ff9c:	080171b8 	.word	0x080171b8
 800ffa0:	0801729c 	.word	0x0801729c
 800ffa4:	08017218 	.word	0x08017218
 800ffa8:	080172e0 	.word	0x080172e0

0800ffac <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b084      	sub	sp, #16
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffb8:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d025      	beq.n	801000c <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	795b      	ldrb	r3, [r3, #5]
 800ffc4:	2b0a      	cmp	r3, #10
 800ffc6:	d008      	beq.n	800ffda <dhcp_network_changed+0x2e>
 800ffc8:	2b0a      	cmp	r3, #10
 800ffca:	dc0d      	bgt.n	800ffe8 <dhcp_network_changed+0x3c>
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d01f      	beq.n	8010010 <dhcp_network_changed+0x64>
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	db09      	blt.n	800ffe8 <dhcp_network_changed+0x3c>
 800ffd4:	3b03      	subs	r3, #3
 800ffd6:	2b02      	cmp	r3, #2
 800ffd8:	d806      	bhi.n	800ffe8 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	2200      	movs	r2, #0
 800ffde:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	f000 fb75 	bl	80106d0 <dhcp_reboot>
      break;
 800ffe6:	e014      	b.n	8010012 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	795b      	ldrb	r3, [r3, #5]
 800ffec:	2b0c      	cmp	r3, #12
 800ffee:	d906      	bls.n	800fffe <dhcp_network_changed+0x52>
 800fff0:	4b09      	ldr	r3, [pc, #36]	; (8010018 <dhcp_network_changed+0x6c>)
 800fff2:	f240 326d 	movw	r2, #877	; 0x36d
 800fff6:	4909      	ldr	r1, [pc, #36]	; (801001c <dhcp_network_changed+0x70>)
 800fff8:	4809      	ldr	r0, [pc, #36]	; (8010020 <dhcp_network_changed+0x74>)
 800fffa:	f003 fe31 	bl	8013c60 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	2200      	movs	r2, #0
 8010002:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8010004:	6878      	ldr	r0, [r7, #4]
 8010006:	f000 f8af 	bl	8010168 <dhcp_discover>
      break;
 801000a:	e002      	b.n	8010012 <dhcp_network_changed+0x66>
    return;
 801000c:	bf00      	nop
 801000e:	e000      	b.n	8010012 <dhcp_network_changed+0x66>
      break;
 8010010:	bf00      	nop
  }
}
 8010012:	3710      	adds	r7, #16
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}
 8010018:	080171b8 	.word	0x080171b8
 801001c:	08017304 	.word	0x08017304
 8010020:	08017218 	.word	0x08017218

08010024 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b084      	sub	sp, #16
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
 801002c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d107      	bne.n	8010044 <dhcp_arp_reply+0x20>
 8010034:	4b0e      	ldr	r3, [pc, #56]	; (8010070 <dhcp_arp_reply+0x4c>)
 8010036:	f240 328b 	movw	r2, #907	; 0x38b
 801003a:	490e      	ldr	r1, [pc, #56]	; (8010074 <dhcp_arp_reply+0x50>)
 801003c:	480e      	ldr	r0, [pc, #56]	; (8010078 <dhcp_arp_reply+0x54>)
 801003e:	f003 fe0f 	bl	8013c60 <iprintf>
 8010042:	e012      	b.n	801006a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010048:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d00c      	beq.n	801006a <dhcp_arp_reply+0x46>
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	795b      	ldrb	r3, [r3, #5]
 8010054:	2b08      	cmp	r3, #8
 8010056:	d108      	bne.n	801006a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	681a      	ldr	r2, [r3, #0]
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	69db      	ldr	r3, [r3, #28]
 8010060:	429a      	cmp	r2, r3
 8010062:	d102      	bne.n	801006a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f000 f809 	bl	801007c <dhcp_decline>
    }
  }
}
 801006a:	3710      	adds	r7, #16
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}
 8010070:	080171b8 	.word	0x080171b8
 8010074:	0801729c 	.word	0x0801729c
 8010078:	08017218 	.word	0x08017218

0801007c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801007c:	b5b0      	push	{r4, r5, r7, lr}
 801007e:	b08a      	sub	sp, #40	; 0x28
 8010080:	af02      	add	r7, sp, #8
 8010082:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010088:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801008a:	210c      	movs	r1, #12
 801008c:	69b8      	ldr	r0, [r7, #24]
 801008e:	f000 fc6f 	bl	8010970 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8010092:	f107 030c 	add.w	r3, r7, #12
 8010096:	2204      	movs	r2, #4
 8010098:	69b9      	ldr	r1, [r7, #24]
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f001 f8f4 	bl	8011288 <dhcp_create_msg>
 80100a0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d035      	beq.n	8010114 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80100a8:	697b      	ldr	r3, [r7, #20]
 80100aa:	685b      	ldr	r3, [r3, #4]
 80100ac:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80100ae:	89b8      	ldrh	r0, [r7, #12]
 80100b0:	693b      	ldr	r3, [r7, #16]
 80100b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80100b6:	2304      	movs	r3, #4
 80100b8:	2232      	movs	r2, #50	; 0x32
 80100ba:	f000 fc73 	bl	80109a4 <dhcp_option>
 80100be:	4603      	mov	r3, r0
 80100c0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80100c2:	89bc      	ldrh	r4, [r7, #12]
 80100c4:	693b      	ldr	r3, [r7, #16]
 80100c6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80100ca:	69bb      	ldr	r3, [r7, #24]
 80100cc:	69db      	ldr	r3, [r3, #28]
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7f7 fe1b 	bl	8007d0a <lwip_htonl>
 80100d4:	4603      	mov	r3, r0
 80100d6:	461a      	mov	r2, r3
 80100d8:	4629      	mov	r1, r5
 80100da:	4620      	mov	r0, r4
 80100dc:	f000 fcee 	bl	8010abc <dhcp_option_long>
 80100e0:	4603      	mov	r3, r0
 80100e2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80100e4:	89b8      	ldrh	r0, [r7, #12]
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	33f0      	adds	r3, #240	; 0xf0
 80100ea:	697a      	ldr	r2, [r7, #20]
 80100ec:	4619      	mov	r1, r3
 80100ee:	f001 f9a1 	bl	8011434 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80100f2:	4b19      	ldr	r3, [pc, #100]	; (8010158 <dhcp_decline+0xdc>)
 80100f4:	6818      	ldr	r0, [r3, #0]
 80100f6:	4b19      	ldr	r3, [pc, #100]	; (801015c <dhcp_decline+0xe0>)
 80100f8:	9301      	str	r3, [sp, #4]
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	9300      	str	r3, [sp, #0]
 80100fe:	2343      	movs	r3, #67	; 0x43
 8010100:	4a17      	ldr	r2, [pc, #92]	; (8010160 <dhcp_decline+0xe4>)
 8010102:	6979      	ldr	r1, [r7, #20]
 8010104:	f7ff f8d0 	bl	800f2a8 <udp_sendto_if_src>
 8010108:	4603      	mov	r3, r0
 801010a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801010c:	6978      	ldr	r0, [r7, #20]
 801010e:	f7f9 f951 	bl	80093b4 <pbuf_free>
 8010112:	e001      	b.n	8010118 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010114:	23ff      	movs	r3, #255	; 0xff
 8010116:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010118:	69bb      	ldr	r3, [r7, #24]
 801011a:	799b      	ldrb	r3, [r3, #6]
 801011c:	2bff      	cmp	r3, #255	; 0xff
 801011e:	d005      	beq.n	801012c <dhcp_decline+0xb0>
    dhcp->tries++;
 8010120:	69bb      	ldr	r3, [r7, #24]
 8010122:	799b      	ldrb	r3, [r3, #6]
 8010124:	3301      	adds	r3, #1
 8010126:	b2da      	uxtb	r2, r3
 8010128:	69bb      	ldr	r3, [r7, #24]
 801012a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801012c:	f242 7310 	movw	r3, #10000	; 0x2710
 8010130:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010132:	89fb      	ldrh	r3, [r7, #14]
 8010134:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010138:	4a0a      	ldr	r2, [pc, #40]	; (8010164 <dhcp_decline+0xe8>)
 801013a:	fb82 1203 	smull	r1, r2, r2, r3
 801013e:	1152      	asrs	r2, r2, #5
 8010140:	17db      	asrs	r3, r3, #31
 8010142:	1ad3      	subs	r3, r2, r3
 8010144:	b29a      	uxth	r2, r3
 8010146:	69bb      	ldr	r3, [r7, #24]
 8010148:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801014a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801014e:	4618      	mov	r0, r3
 8010150:	3720      	adds	r7, #32
 8010152:	46bd      	mov	sp, r7
 8010154:	bdb0      	pop	{r4, r5, r7, pc}
 8010156:	bf00      	nop
 8010158:	2000af48 	.word	0x2000af48
 801015c:	0801a248 	.word	0x0801a248
 8010160:	0801a24c 	.word	0x0801a24c
 8010164:	10624dd3 	.word	0x10624dd3

08010168 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b08a      	sub	sp, #40	; 0x28
 801016c:	af02      	add	r7, sp, #8
 801016e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010174:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8010176:	2300      	movs	r3, #0
 8010178:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801017a:	69bb      	ldr	r3, [r7, #24]
 801017c:	2200      	movs	r2, #0
 801017e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8010180:	2106      	movs	r1, #6
 8010182:	69b8      	ldr	r0, [r7, #24]
 8010184:	f000 fbf4 	bl	8010970 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8010188:	f107 0308 	add.w	r3, r7, #8
 801018c:	2201      	movs	r2, #1
 801018e:	69b9      	ldr	r1, [r7, #24]
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f001 f879 	bl	8011288 <dhcp_create_msg>
 8010196:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8010198:	693b      	ldr	r3, [r7, #16]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d04b      	beq.n	8010236 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801019e:	693b      	ldr	r3, [r7, #16]
 80101a0:	685b      	ldr	r3, [r3, #4]
 80101a2:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80101a4:	8938      	ldrh	r0, [r7, #8]
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80101ac:	2302      	movs	r3, #2
 80101ae:	2239      	movs	r2, #57	; 0x39
 80101b0:	f000 fbf8 	bl	80109a4 <dhcp_option>
 80101b4:	4603      	mov	r3, r0
 80101b6:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80101b8:	8938      	ldrh	r0, [r7, #8]
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80101c4:	461a      	mov	r2, r3
 80101c6:	f000 fc47 	bl	8010a58 <dhcp_option_short>
 80101ca:	4603      	mov	r3, r0
 80101cc:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80101ce:	8938      	ldrh	r0, [r7, #8]
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80101d6:	2303      	movs	r3, #3
 80101d8:	2237      	movs	r2, #55	; 0x37
 80101da:	f000 fbe3 	bl	80109a4 <dhcp_option>
 80101de:	4603      	mov	r3, r0
 80101e0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80101e2:	2300      	movs	r3, #0
 80101e4:	77fb      	strb	r3, [r7, #31]
 80101e6:	e00e      	b.n	8010206 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80101e8:	8938      	ldrh	r0, [r7, #8]
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80101f0:	7ffb      	ldrb	r3, [r7, #31]
 80101f2:	4a29      	ldr	r2, [pc, #164]	; (8010298 <dhcp_discover+0x130>)
 80101f4:	5cd3      	ldrb	r3, [r2, r3]
 80101f6:	461a      	mov	r2, r3
 80101f8:	f000 fc08 	bl	8010a0c <dhcp_option_byte>
 80101fc:	4603      	mov	r3, r0
 80101fe:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010200:	7ffb      	ldrb	r3, [r7, #31]
 8010202:	3301      	adds	r3, #1
 8010204:	77fb      	strb	r3, [r7, #31]
 8010206:	7ffb      	ldrb	r3, [r7, #31]
 8010208:	2b02      	cmp	r3, #2
 801020a:	d9ed      	bls.n	80101e8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801020c:	8938      	ldrh	r0, [r7, #8]
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	33f0      	adds	r3, #240	; 0xf0
 8010212:	693a      	ldr	r2, [r7, #16]
 8010214:	4619      	mov	r1, r3
 8010216:	f001 f90d 	bl	8011434 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801021a:	4b20      	ldr	r3, [pc, #128]	; (801029c <dhcp_discover+0x134>)
 801021c:	6818      	ldr	r0, [r3, #0]
 801021e:	4b20      	ldr	r3, [pc, #128]	; (80102a0 <dhcp_discover+0x138>)
 8010220:	9301      	str	r3, [sp, #4]
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	9300      	str	r3, [sp, #0]
 8010226:	2343      	movs	r3, #67	; 0x43
 8010228:	4a1e      	ldr	r2, [pc, #120]	; (80102a4 <dhcp_discover+0x13c>)
 801022a:	6939      	ldr	r1, [r7, #16]
 801022c:	f7ff f83c 	bl	800f2a8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8010230:	6938      	ldr	r0, [r7, #16]
 8010232:	f7f9 f8bf 	bl	80093b4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8010236:	69bb      	ldr	r3, [r7, #24]
 8010238:	799b      	ldrb	r3, [r3, #6]
 801023a:	2bff      	cmp	r3, #255	; 0xff
 801023c:	d005      	beq.n	801024a <dhcp_discover+0xe2>
    dhcp->tries++;
 801023e:	69bb      	ldr	r3, [r7, #24]
 8010240:	799b      	ldrb	r3, [r3, #6]
 8010242:	3301      	adds	r3, #1
 8010244:	b2da      	uxtb	r2, r3
 8010246:	69bb      	ldr	r3, [r7, #24]
 8010248:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801024a:	69bb      	ldr	r3, [r7, #24]
 801024c:	799b      	ldrb	r3, [r3, #6]
 801024e:	2b05      	cmp	r3, #5
 8010250:	d80d      	bhi.n	801026e <dhcp_discover+0x106>
 8010252:	69bb      	ldr	r3, [r7, #24]
 8010254:	799b      	ldrb	r3, [r3, #6]
 8010256:	461a      	mov	r2, r3
 8010258:	2301      	movs	r3, #1
 801025a:	4093      	lsls	r3, r2
 801025c:	b29b      	uxth	r3, r3
 801025e:	461a      	mov	r2, r3
 8010260:	0152      	lsls	r2, r2, #5
 8010262:	1ad2      	subs	r2, r2, r3
 8010264:	0092      	lsls	r2, r2, #2
 8010266:	4413      	add	r3, r2
 8010268:	00db      	lsls	r3, r3, #3
 801026a:	b29b      	uxth	r3, r3
 801026c:	e001      	b.n	8010272 <dhcp_discover+0x10a>
 801026e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8010272:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010274:	897b      	ldrh	r3, [r7, #10]
 8010276:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801027a:	4a0b      	ldr	r2, [pc, #44]	; (80102a8 <dhcp_discover+0x140>)
 801027c:	fb82 1203 	smull	r1, r2, r2, r3
 8010280:	1152      	asrs	r2, r2, #5
 8010282:	17db      	asrs	r3, r3, #31
 8010284:	1ad3      	subs	r3, r2, r3
 8010286:	b29a      	uxth	r2, r3
 8010288:	69bb      	ldr	r3, [r7, #24]
 801028a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801028c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010290:	4618      	mov	r0, r3
 8010292:	3720      	adds	r7, #32
 8010294:	46bd      	mov	sp, r7
 8010296:	bd80      	pop	{r7, pc}
 8010298:	20000044 	.word	0x20000044
 801029c:	2000af48 	.word	0x2000af48
 80102a0:	0801a248 	.word	0x0801a248
 80102a4:	0801a24c 	.word	0x0801a24c
 80102a8:	10624dd3 	.word	0x10624dd3

080102ac <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b088      	sub	sp, #32
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d107      	bne.n	80102ca <dhcp_bind+0x1e>
 80102ba:	4b64      	ldr	r3, [pc, #400]	; (801044c <dhcp_bind+0x1a0>)
 80102bc:	f240 4215 	movw	r2, #1045	; 0x415
 80102c0:	4963      	ldr	r1, [pc, #396]	; (8010450 <dhcp_bind+0x1a4>)
 80102c2:	4864      	ldr	r0, [pc, #400]	; (8010454 <dhcp_bind+0x1a8>)
 80102c4:	f003 fccc 	bl	8013c60 <iprintf>
 80102c8:	e0bc      	b.n	8010444 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ce:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80102d0:	69bb      	ldr	r3, [r7, #24]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d107      	bne.n	80102e6 <dhcp_bind+0x3a>
 80102d6:	4b5d      	ldr	r3, [pc, #372]	; (801044c <dhcp_bind+0x1a0>)
 80102d8:	f240 4217 	movw	r2, #1047	; 0x417
 80102dc:	495e      	ldr	r1, [pc, #376]	; (8010458 <dhcp_bind+0x1ac>)
 80102de:	485d      	ldr	r0, [pc, #372]	; (8010454 <dhcp_bind+0x1a8>)
 80102e0:	f003 fcbe 	bl	8013c60 <iprintf>
 80102e4:	e0ae      	b.n	8010444 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80102e6:	69bb      	ldr	r3, [r7, #24]
 80102e8:	2200      	movs	r2, #0
 80102ea:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80102ec:	69bb      	ldr	r3, [r7, #24]
 80102ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102f4:	d019      	beq.n	801032a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80102f6:	69bb      	ldr	r3, [r7, #24]
 80102f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102fa:	331e      	adds	r3, #30
 80102fc:	4a57      	ldr	r2, [pc, #348]	; (801045c <dhcp_bind+0x1b0>)
 80102fe:	fba2 2303 	umull	r2, r3, r2, r3
 8010302:	095b      	lsrs	r3, r3, #5
 8010304:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010306:	69fb      	ldr	r3, [r7, #28]
 8010308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801030c:	d302      	bcc.n	8010314 <dhcp_bind+0x68>
      timeout = 0xffff;
 801030e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010312:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8010314:	69fb      	ldr	r3, [r7, #28]
 8010316:	b29a      	uxth	r2, r3
 8010318:	69bb      	ldr	r3, [r7, #24]
 801031a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801031c:	69bb      	ldr	r3, [r7, #24]
 801031e:	8a9b      	ldrh	r3, [r3, #20]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d102      	bne.n	801032a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8010324:	69bb      	ldr	r3, [r7, #24]
 8010326:	2201      	movs	r2, #1
 8010328:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801032a:	69bb      	ldr	r3, [r7, #24]
 801032c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801032e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010332:	d01d      	beq.n	8010370 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010334:	69bb      	ldr	r3, [r7, #24]
 8010336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010338:	331e      	adds	r3, #30
 801033a:	4a48      	ldr	r2, [pc, #288]	; (801045c <dhcp_bind+0x1b0>)
 801033c:	fba2 2303 	umull	r2, r3, r2, r3
 8010340:	095b      	lsrs	r3, r3, #5
 8010342:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010344:	69fb      	ldr	r3, [r7, #28]
 8010346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801034a:	d302      	bcc.n	8010352 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801034c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010350:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8010352:	69fb      	ldr	r3, [r7, #28]
 8010354:	b29a      	uxth	r2, r3
 8010356:	69bb      	ldr	r3, [r7, #24]
 8010358:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801035a:	69bb      	ldr	r3, [r7, #24]
 801035c:	895b      	ldrh	r3, [r3, #10]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d102      	bne.n	8010368 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8010362:	69bb      	ldr	r3, [r7, #24]
 8010364:	2201      	movs	r2, #1
 8010366:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8010368:	69bb      	ldr	r3, [r7, #24]
 801036a:	895a      	ldrh	r2, [r3, #10]
 801036c:	69bb      	ldr	r3, [r7, #24]
 801036e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8010370:	69bb      	ldr	r3, [r7, #24]
 8010372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010378:	d01d      	beq.n	80103b6 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801037a:	69bb      	ldr	r3, [r7, #24]
 801037c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801037e:	331e      	adds	r3, #30
 8010380:	4a36      	ldr	r2, [pc, #216]	; (801045c <dhcp_bind+0x1b0>)
 8010382:	fba2 2303 	umull	r2, r3, r2, r3
 8010386:	095b      	lsrs	r3, r3, #5
 8010388:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801038a:	69fb      	ldr	r3, [r7, #28]
 801038c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010390:	d302      	bcc.n	8010398 <dhcp_bind+0xec>
      timeout = 0xffff;
 8010392:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010396:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8010398:	69fb      	ldr	r3, [r7, #28]
 801039a:	b29a      	uxth	r2, r3
 801039c:	69bb      	ldr	r3, [r7, #24]
 801039e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80103a0:	69bb      	ldr	r3, [r7, #24]
 80103a2:	899b      	ldrh	r3, [r3, #12]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d102      	bne.n	80103ae <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80103a8:	69bb      	ldr	r3, [r7, #24]
 80103aa:	2201      	movs	r2, #1
 80103ac:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80103ae:	69bb      	ldr	r3, [r7, #24]
 80103b0:	899a      	ldrh	r2, [r3, #12]
 80103b2:	69bb      	ldr	r3, [r7, #24]
 80103b4:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80103b6:	69bb      	ldr	r3, [r7, #24]
 80103b8:	895a      	ldrh	r2, [r3, #10]
 80103ba:	69bb      	ldr	r3, [r7, #24]
 80103bc:	899b      	ldrh	r3, [r3, #12]
 80103be:	429a      	cmp	r2, r3
 80103c0:	d306      	bcc.n	80103d0 <dhcp_bind+0x124>
 80103c2:	69bb      	ldr	r3, [r7, #24]
 80103c4:	899b      	ldrh	r3, [r3, #12]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d002      	beq.n	80103d0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80103ca:	69bb      	ldr	r3, [r7, #24]
 80103cc:	2200      	movs	r2, #0
 80103ce:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80103d0:	69bb      	ldr	r3, [r7, #24]
 80103d2:	79db      	ldrb	r3, [r3, #7]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d003      	beq.n	80103e0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80103d8:	69bb      	ldr	r3, [r7, #24]
 80103da:	6a1b      	ldr	r3, [r3, #32]
 80103dc:	613b      	str	r3, [r7, #16]
 80103de:	e014      	b.n	801040a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80103e0:	69bb      	ldr	r3, [r7, #24]
 80103e2:	331c      	adds	r3, #28
 80103e4:	781b      	ldrb	r3, [r3, #0]
 80103e6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80103e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	db02      	blt.n	80103f6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80103f0:	23ff      	movs	r3, #255	; 0xff
 80103f2:	613b      	str	r3, [r7, #16]
 80103f4:	e009      	b.n	801040a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80103f6:	7dfb      	ldrb	r3, [r7, #23]
 80103f8:	2bbf      	cmp	r3, #191	; 0xbf
 80103fa:	d903      	bls.n	8010404 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80103fc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8010400:	613b      	str	r3, [r7, #16]
 8010402:	e002      	b.n	801040a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8010404:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010408:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801040a:	69bb      	ldr	r3, [r7, #24]
 801040c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801040e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d108      	bne.n	8010428 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8010416:	69bb      	ldr	r3, [r7, #24]
 8010418:	69da      	ldr	r2, [r3, #28]
 801041a:	693b      	ldr	r3, [r7, #16]
 801041c:	4013      	ands	r3, r2
 801041e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010426:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8010428:	210a      	movs	r1, #10
 801042a:	69b8      	ldr	r0, [r7, #24]
 801042c:	f000 faa0 	bl	8010970 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8010430:	69bb      	ldr	r3, [r7, #24]
 8010432:	f103 011c 	add.w	r1, r3, #28
 8010436:	f107 030c 	add.w	r3, r7, #12
 801043a:	f107 0210 	add.w	r2, r7, #16
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f7f8 fad8 	bl	80089f4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8010444:	3720      	adds	r7, #32
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}
 801044a:	bf00      	nop
 801044c:	080171b8 	.word	0x080171b8
 8010450:	08017318 	.word	0x08017318
 8010454:	08017218 	.word	0x08017218
 8010458:	08017334 	.word	0x08017334
 801045c:	88888889 	.word	0x88888889

08010460 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b08a      	sub	sp, #40	; 0x28
 8010464:	af02      	add	r7, sp, #8
 8010466:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801046c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801046e:	2105      	movs	r1, #5
 8010470:	69b8      	ldr	r0, [r7, #24]
 8010472:	f000 fa7d 	bl	8010970 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010476:	f107 030c 	add.w	r3, r7, #12
 801047a:	2203      	movs	r2, #3
 801047c:	69b9      	ldr	r1, [r7, #24]
 801047e:	6878      	ldr	r0, [r7, #4]
 8010480:	f000 ff02 	bl	8011288 <dhcp_create_msg>
 8010484:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010486:	697b      	ldr	r3, [r7, #20]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d04e      	beq.n	801052a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801048c:	697b      	ldr	r3, [r7, #20]
 801048e:	685b      	ldr	r3, [r3, #4]
 8010490:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010492:	89b8      	ldrh	r0, [r7, #12]
 8010494:	693b      	ldr	r3, [r7, #16]
 8010496:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801049a:	2302      	movs	r3, #2
 801049c:	2239      	movs	r2, #57	; 0x39
 801049e:	f000 fa81 	bl	80109a4 <dhcp_option>
 80104a2:	4603      	mov	r3, r0
 80104a4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80104a6:	89b8      	ldrh	r0, [r7, #12]
 80104a8:	693b      	ldr	r3, [r7, #16]
 80104aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80104b2:	461a      	mov	r2, r3
 80104b4:	f000 fad0 	bl	8010a58 <dhcp_option_short>
 80104b8:	4603      	mov	r3, r0
 80104ba:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80104bc:	89b8      	ldrh	r0, [r7, #12]
 80104be:	693b      	ldr	r3, [r7, #16]
 80104c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80104c4:	2303      	movs	r3, #3
 80104c6:	2237      	movs	r2, #55	; 0x37
 80104c8:	f000 fa6c 	bl	80109a4 <dhcp_option>
 80104cc:	4603      	mov	r3, r0
 80104ce:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80104d0:	2300      	movs	r3, #0
 80104d2:	77bb      	strb	r3, [r7, #30]
 80104d4:	e00e      	b.n	80104f4 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80104d6:	89b8      	ldrh	r0, [r7, #12]
 80104d8:	693b      	ldr	r3, [r7, #16]
 80104da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80104de:	7fbb      	ldrb	r3, [r7, #30]
 80104e0:	4a2a      	ldr	r2, [pc, #168]	; (801058c <dhcp_renew+0x12c>)
 80104e2:	5cd3      	ldrb	r3, [r2, r3]
 80104e4:	461a      	mov	r2, r3
 80104e6:	f000 fa91 	bl	8010a0c <dhcp_option_byte>
 80104ea:	4603      	mov	r3, r0
 80104ec:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80104ee:	7fbb      	ldrb	r3, [r7, #30]
 80104f0:	3301      	adds	r3, #1
 80104f2:	77bb      	strb	r3, [r7, #30]
 80104f4:	7fbb      	ldrb	r3, [r7, #30]
 80104f6:	2b02      	cmp	r3, #2
 80104f8:	d9ed      	bls.n	80104d6 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80104fa:	89b8      	ldrh	r0, [r7, #12]
 80104fc:	693b      	ldr	r3, [r7, #16]
 80104fe:	33f0      	adds	r3, #240	; 0xf0
 8010500:	697a      	ldr	r2, [r7, #20]
 8010502:	4619      	mov	r1, r3
 8010504:	f000 ff96 	bl	8011434 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010508:	4b21      	ldr	r3, [pc, #132]	; (8010590 <dhcp_renew+0x130>)
 801050a:	6818      	ldr	r0, [r3, #0]
 801050c:	69bb      	ldr	r3, [r7, #24]
 801050e:	f103 0218 	add.w	r2, r3, #24
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	9300      	str	r3, [sp, #0]
 8010516:	2343      	movs	r3, #67	; 0x43
 8010518:	6979      	ldr	r1, [r7, #20]
 801051a:	f7fe fe51 	bl	800f1c0 <udp_sendto_if>
 801051e:	4603      	mov	r3, r0
 8010520:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010522:	6978      	ldr	r0, [r7, #20]
 8010524:	f7f8 ff46 	bl	80093b4 <pbuf_free>
 8010528:	e001      	b.n	801052e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801052a:	23ff      	movs	r3, #255	; 0xff
 801052c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801052e:	69bb      	ldr	r3, [r7, #24]
 8010530:	799b      	ldrb	r3, [r3, #6]
 8010532:	2bff      	cmp	r3, #255	; 0xff
 8010534:	d005      	beq.n	8010542 <dhcp_renew+0xe2>
    dhcp->tries++;
 8010536:	69bb      	ldr	r3, [r7, #24]
 8010538:	799b      	ldrb	r3, [r3, #6]
 801053a:	3301      	adds	r3, #1
 801053c:	b2da      	uxtb	r2, r3
 801053e:	69bb      	ldr	r3, [r7, #24]
 8010540:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8010542:	69bb      	ldr	r3, [r7, #24]
 8010544:	799b      	ldrb	r3, [r3, #6]
 8010546:	2b09      	cmp	r3, #9
 8010548:	d80a      	bhi.n	8010560 <dhcp_renew+0x100>
 801054a:	69bb      	ldr	r3, [r7, #24]
 801054c:	799b      	ldrb	r3, [r3, #6]
 801054e:	b29b      	uxth	r3, r3
 8010550:	461a      	mov	r2, r3
 8010552:	0152      	lsls	r2, r2, #5
 8010554:	1ad2      	subs	r2, r2, r3
 8010556:	0092      	lsls	r2, r2, #2
 8010558:	4413      	add	r3, r2
 801055a:	011b      	lsls	r3, r3, #4
 801055c:	b29b      	uxth	r3, r3
 801055e:	e001      	b.n	8010564 <dhcp_renew+0x104>
 8010560:	f644 6320 	movw	r3, #20000	; 0x4e20
 8010564:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010566:	89fb      	ldrh	r3, [r7, #14]
 8010568:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801056c:	4a09      	ldr	r2, [pc, #36]	; (8010594 <dhcp_renew+0x134>)
 801056e:	fb82 1203 	smull	r1, r2, r2, r3
 8010572:	1152      	asrs	r2, r2, #5
 8010574:	17db      	asrs	r3, r3, #31
 8010576:	1ad3      	subs	r3, r2, r3
 8010578:	b29a      	uxth	r2, r3
 801057a:	69bb      	ldr	r3, [r7, #24]
 801057c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801057e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010582:	4618      	mov	r0, r3
 8010584:	3720      	adds	r7, #32
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}
 801058a:	bf00      	nop
 801058c:	20000044 	.word	0x20000044
 8010590:	2000af48 	.word	0x2000af48
 8010594:	10624dd3 	.word	0x10624dd3

08010598 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b08a      	sub	sp, #40	; 0x28
 801059c:	af02      	add	r7, sp, #8
 801059e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105a4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80105a6:	2104      	movs	r1, #4
 80105a8:	69b8      	ldr	r0, [r7, #24]
 80105aa:	f000 f9e1 	bl	8010970 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80105ae:	f107 030c 	add.w	r3, r7, #12
 80105b2:	2203      	movs	r2, #3
 80105b4:	69b9      	ldr	r1, [r7, #24]
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f000 fe66 	bl	8011288 <dhcp_create_msg>
 80105bc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d04c      	beq.n	801065e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80105c4:	697b      	ldr	r3, [r7, #20]
 80105c6:	685b      	ldr	r3, [r3, #4]
 80105c8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80105ca:	89b8      	ldrh	r0, [r7, #12]
 80105cc:	693b      	ldr	r3, [r7, #16]
 80105ce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80105d2:	2302      	movs	r3, #2
 80105d4:	2239      	movs	r2, #57	; 0x39
 80105d6:	f000 f9e5 	bl	80109a4 <dhcp_option>
 80105da:	4603      	mov	r3, r0
 80105dc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80105de:	89b8      	ldrh	r0, [r7, #12]
 80105e0:	693b      	ldr	r3, [r7, #16]
 80105e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80105ea:	461a      	mov	r2, r3
 80105ec:	f000 fa34 	bl	8010a58 <dhcp_option_short>
 80105f0:	4603      	mov	r3, r0
 80105f2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80105f4:	89b8      	ldrh	r0, [r7, #12]
 80105f6:	693b      	ldr	r3, [r7, #16]
 80105f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80105fc:	2303      	movs	r3, #3
 80105fe:	2237      	movs	r2, #55	; 0x37
 8010600:	f000 f9d0 	bl	80109a4 <dhcp_option>
 8010604:	4603      	mov	r3, r0
 8010606:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010608:	2300      	movs	r3, #0
 801060a:	77bb      	strb	r3, [r7, #30]
 801060c:	e00e      	b.n	801062c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801060e:	89b8      	ldrh	r0, [r7, #12]
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010616:	7fbb      	ldrb	r3, [r7, #30]
 8010618:	4a29      	ldr	r2, [pc, #164]	; (80106c0 <dhcp_rebind+0x128>)
 801061a:	5cd3      	ldrb	r3, [r2, r3]
 801061c:	461a      	mov	r2, r3
 801061e:	f000 f9f5 	bl	8010a0c <dhcp_option_byte>
 8010622:	4603      	mov	r3, r0
 8010624:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010626:	7fbb      	ldrb	r3, [r7, #30]
 8010628:	3301      	adds	r3, #1
 801062a:	77bb      	strb	r3, [r7, #30]
 801062c:	7fbb      	ldrb	r3, [r7, #30]
 801062e:	2b02      	cmp	r3, #2
 8010630:	d9ed      	bls.n	801060e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010632:	89b8      	ldrh	r0, [r7, #12]
 8010634:	693b      	ldr	r3, [r7, #16]
 8010636:	33f0      	adds	r3, #240	; 0xf0
 8010638:	697a      	ldr	r2, [r7, #20]
 801063a:	4619      	mov	r1, r3
 801063c:	f000 fefa 	bl	8011434 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010640:	4b20      	ldr	r3, [pc, #128]	; (80106c4 <dhcp_rebind+0x12c>)
 8010642:	6818      	ldr	r0, [r3, #0]
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	9300      	str	r3, [sp, #0]
 8010648:	2343      	movs	r3, #67	; 0x43
 801064a:	4a1f      	ldr	r2, [pc, #124]	; (80106c8 <dhcp_rebind+0x130>)
 801064c:	6979      	ldr	r1, [r7, #20]
 801064e:	f7fe fdb7 	bl	800f1c0 <udp_sendto_if>
 8010652:	4603      	mov	r3, r0
 8010654:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010656:	6978      	ldr	r0, [r7, #20]
 8010658:	f7f8 feac 	bl	80093b4 <pbuf_free>
 801065c:	e001      	b.n	8010662 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801065e:	23ff      	movs	r3, #255	; 0xff
 8010660:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010662:	69bb      	ldr	r3, [r7, #24]
 8010664:	799b      	ldrb	r3, [r3, #6]
 8010666:	2bff      	cmp	r3, #255	; 0xff
 8010668:	d005      	beq.n	8010676 <dhcp_rebind+0xde>
    dhcp->tries++;
 801066a:	69bb      	ldr	r3, [r7, #24]
 801066c:	799b      	ldrb	r3, [r3, #6]
 801066e:	3301      	adds	r3, #1
 8010670:	b2da      	uxtb	r2, r3
 8010672:	69bb      	ldr	r3, [r7, #24]
 8010674:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8010676:	69bb      	ldr	r3, [r7, #24]
 8010678:	799b      	ldrb	r3, [r3, #6]
 801067a:	2b09      	cmp	r3, #9
 801067c:	d80a      	bhi.n	8010694 <dhcp_rebind+0xfc>
 801067e:	69bb      	ldr	r3, [r7, #24]
 8010680:	799b      	ldrb	r3, [r3, #6]
 8010682:	b29b      	uxth	r3, r3
 8010684:	461a      	mov	r2, r3
 8010686:	0152      	lsls	r2, r2, #5
 8010688:	1ad2      	subs	r2, r2, r3
 801068a:	0092      	lsls	r2, r2, #2
 801068c:	4413      	add	r3, r2
 801068e:	00db      	lsls	r3, r3, #3
 8010690:	b29b      	uxth	r3, r3
 8010692:	e001      	b.n	8010698 <dhcp_rebind+0x100>
 8010694:	f242 7310 	movw	r3, #10000	; 0x2710
 8010698:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801069a:	89fb      	ldrh	r3, [r7, #14]
 801069c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80106a0:	4a0a      	ldr	r2, [pc, #40]	; (80106cc <dhcp_rebind+0x134>)
 80106a2:	fb82 1203 	smull	r1, r2, r2, r3
 80106a6:	1152      	asrs	r2, r2, #5
 80106a8:	17db      	asrs	r3, r3, #31
 80106aa:	1ad3      	subs	r3, r2, r3
 80106ac:	b29a      	uxth	r2, r3
 80106ae:	69bb      	ldr	r3, [r7, #24]
 80106b0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80106b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80106b6:	4618      	mov	r0, r3
 80106b8:	3720      	adds	r7, #32
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd80      	pop	{r7, pc}
 80106be:	bf00      	nop
 80106c0:	20000044 	.word	0x20000044
 80106c4:	2000af48 	.word	0x2000af48
 80106c8:	0801a24c 	.word	0x0801a24c
 80106cc:	10624dd3 	.word	0x10624dd3

080106d0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80106d0:	b5b0      	push	{r4, r5, r7, lr}
 80106d2:	b08a      	sub	sp, #40	; 0x28
 80106d4:	af02      	add	r7, sp, #8
 80106d6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106dc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80106de:	2103      	movs	r1, #3
 80106e0:	69b8      	ldr	r0, [r7, #24]
 80106e2:	f000 f945 	bl	8010970 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80106e6:	f107 030c 	add.w	r3, r7, #12
 80106ea:	2203      	movs	r2, #3
 80106ec:	69b9      	ldr	r1, [r7, #24]
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	f000 fdca 	bl	8011288 <dhcp_create_msg>
 80106f4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d066      	beq.n	80107ca <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80106fc:	697b      	ldr	r3, [r7, #20]
 80106fe:	685b      	ldr	r3, [r3, #4]
 8010700:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010702:	89b8      	ldrh	r0, [r7, #12]
 8010704:	693b      	ldr	r3, [r7, #16]
 8010706:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801070a:	2302      	movs	r3, #2
 801070c:	2239      	movs	r2, #57	; 0x39
 801070e:	f000 f949 	bl	80109a4 <dhcp_option>
 8010712:	4603      	mov	r3, r0
 8010714:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8010716:	89b8      	ldrh	r0, [r7, #12]
 8010718:	693b      	ldr	r3, [r7, #16]
 801071a:	33f0      	adds	r3, #240	; 0xf0
 801071c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8010720:	4619      	mov	r1, r3
 8010722:	f000 f999 	bl	8010a58 <dhcp_option_short>
 8010726:	4603      	mov	r3, r0
 8010728:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801072a:	89b8      	ldrh	r0, [r7, #12]
 801072c:	693b      	ldr	r3, [r7, #16]
 801072e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010732:	2304      	movs	r3, #4
 8010734:	2232      	movs	r2, #50	; 0x32
 8010736:	f000 f935 	bl	80109a4 <dhcp_option>
 801073a:	4603      	mov	r3, r0
 801073c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801073e:	89bc      	ldrh	r4, [r7, #12]
 8010740:	693b      	ldr	r3, [r7, #16]
 8010742:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010746:	69bb      	ldr	r3, [r7, #24]
 8010748:	69db      	ldr	r3, [r3, #28]
 801074a:	4618      	mov	r0, r3
 801074c:	f7f7 fadd 	bl	8007d0a <lwip_htonl>
 8010750:	4603      	mov	r3, r0
 8010752:	461a      	mov	r2, r3
 8010754:	4629      	mov	r1, r5
 8010756:	4620      	mov	r0, r4
 8010758:	f000 f9b0 	bl	8010abc <dhcp_option_long>
 801075c:	4603      	mov	r3, r0
 801075e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010760:	89b8      	ldrh	r0, [r7, #12]
 8010762:	693b      	ldr	r3, [r7, #16]
 8010764:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010768:	2303      	movs	r3, #3
 801076a:	2237      	movs	r2, #55	; 0x37
 801076c:	f000 f91a 	bl	80109a4 <dhcp_option>
 8010770:	4603      	mov	r3, r0
 8010772:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010774:	2300      	movs	r3, #0
 8010776:	77bb      	strb	r3, [r7, #30]
 8010778:	e00e      	b.n	8010798 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801077a:	89b8      	ldrh	r0, [r7, #12]
 801077c:	693b      	ldr	r3, [r7, #16]
 801077e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010782:	7fbb      	ldrb	r3, [r7, #30]
 8010784:	4a29      	ldr	r2, [pc, #164]	; (801082c <dhcp_reboot+0x15c>)
 8010786:	5cd3      	ldrb	r3, [r2, r3]
 8010788:	461a      	mov	r2, r3
 801078a:	f000 f93f 	bl	8010a0c <dhcp_option_byte>
 801078e:	4603      	mov	r3, r0
 8010790:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010792:	7fbb      	ldrb	r3, [r7, #30]
 8010794:	3301      	adds	r3, #1
 8010796:	77bb      	strb	r3, [r7, #30]
 8010798:	7fbb      	ldrb	r3, [r7, #30]
 801079a:	2b02      	cmp	r3, #2
 801079c:	d9ed      	bls.n	801077a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801079e:	89b8      	ldrh	r0, [r7, #12]
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	33f0      	adds	r3, #240	; 0xf0
 80107a4:	697a      	ldr	r2, [r7, #20]
 80107a6:	4619      	mov	r1, r3
 80107a8:	f000 fe44 	bl	8011434 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80107ac:	4b20      	ldr	r3, [pc, #128]	; (8010830 <dhcp_reboot+0x160>)
 80107ae:	6818      	ldr	r0, [r3, #0]
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	9300      	str	r3, [sp, #0]
 80107b4:	2343      	movs	r3, #67	; 0x43
 80107b6:	4a1f      	ldr	r2, [pc, #124]	; (8010834 <dhcp_reboot+0x164>)
 80107b8:	6979      	ldr	r1, [r7, #20]
 80107ba:	f7fe fd01 	bl	800f1c0 <udp_sendto_if>
 80107be:	4603      	mov	r3, r0
 80107c0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80107c2:	6978      	ldr	r0, [r7, #20]
 80107c4:	f7f8 fdf6 	bl	80093b4 <pbuf_free>
 80107c8:	e001      	b.n	80107ce <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80107ca:	23ff      	movs	r3, #255	; 0xff
 80107cc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80107ce:	69bb      	ldr	r3, [r7, #24]
 80107d0:	799b      	ldrb	r3, [r3, #6]
 80107d2:	2bff      	cmp	r3, #255	; 0xff
 80107d4:	d005      	beq.n	80107e2 <dhcp_reboot+0x112>
    dhcp->tries++;
 80107d6:	69bb      	ldr	r3, [r7, #24]
 80107d8:	799b      	ldrb	r3, [r3, #6]
 80107da:	3301      	adds	r3, #1
 80107dc:	b2da      	uxtb	r2, r3
 80107de:	69bb      	ldr	r3, [r7, #24]
 80107e0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80107e2:	69bb      	ldr	r3, [r7, #24]
 80107e4:	799b      	ldrb	r3, [r3, #6]
 80107e6:	2b09      	cmp	r3, #9
 80107e8:	d80a      	bhi.n	8010800 <dhcp_reboot+0x130>
 80107ea:	69bb      	ldr	r3, [r7, #24]
 80107ec:	799b      	ldrb	r3, [r3, #6]
 80107ee:	b29b      	uxth	r3, r3
 80107f0:	461a      	mov	r2, r3
 80107f2:	0152      	lsls	r2, r2, #5
 80107f4:	1ad2      	subs	r2, r2, r3
 80107f6:	0092      	lsls	r2, r2, #2
 80107f8:	4413      	add	r3, r2
 80107fa:	00db      	lsls	r3, r3, #3
 80107fc:	b29b      	uxth	r3, r3
 80107fe:	e001      	b.n	8010804 <dhcp_reboot+0x134>
 8010800:	f242 7310 	movw	r3, #10000	; 0x2710
 8010804:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010806:	89fb      	ldrh	r3, [r7, #14]
 8010808:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801080c:	4a0a      	ldr	r2, [pc, #40]	; (8010838 <dhcp_reboot+0x168>)
 801080e:	fb82 1203 	smull	r1, r2, r2, r3
 8010812:	1152      	asrs	r2, r2, #5
 8010814:	17db      	asrs	r3, r3, #31
 8010816:	1ad3      	subs	r3, r2, r3
 8010818:	b29a      	uxth	r2, r3
 801081a:	69bb      	ldr	r3, [r7, #24]
 801081c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801081e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010822:	4618      	mov	r0, r3
 8010824:	3720      	adds	r7, #32
 8010826:	46bd      	mov	sp, r7
 8010828:	bdb0      	pop	{r4, r5, r7, pc}
 801082a:	bf00      	nop
 801082c:	20000044 	.word	0x20000044
 8010830:	2000af48 	.word	0x2000af48
 8010834:	0801a24c 	.word	0x0801a24c
 8010838:	10624dd3 	.word	0x10624dd3

0801083c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801083c:	b5b0      	push	{r4, r5, r7, lr}
 801083e:	b08a      	sub	sp, #40	; 0x28
 8010840:	af02      	add	r7, sp, #8
 8010842:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010848:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801084a:	69fb      	ldr	r3, [r7, #28]
 801084c:	2b00      	cmp	r3, #0
 801084e:	f000 8084 	beq.w	801095a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8010852:	69fb      	ldr	r3, [r7, #28]
 8010854:	795b      	ldrb	r3, [r3, #5]
 8010856:	2b00      	cmp	r3, #0
 8010858:	f000 8081 	beq.w	801095e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801085c:	69fb      	ldr	r3, [r7, #28]
 801085e:	699b      	ldr	r3, [r3, #24]
 8010860:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8010862:	69fb      	ldr	r3, [r7, #28]
 8010864:	2200      	movs	r2, #0
 8010866:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8010868:	69fb      	ldr	r3, [r7, #28]
 801086a:	2200      	movs	r2, #0
 801086c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801086e:	69fb      	ldr	r3, [r7, #28]
 8010870:	2200      	movs	r2, #0
 8010872:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8010874:	69fb      	ldr	r3, [r7, #28]
 8010876:	2200      	movs	r2, #0
 8010878:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801087a:	69fb      	ldr	r3, [r7, #28]
 801087c:	2200      	movs	r2, #0
 801087e:	631a      	str	r2, [r3, #48]	; 0x30
 8010880:	69fb      	ldr	r3, [r7, #28]
 8010882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010884:	69fb      	ldr	r3, [r7, #28]
 8010886:	62da      	str	r2, [r3, #44]	; 0x2c
 8010888:	69fb      	ldr	r3, [r7, #28]
 801088a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801088c:	69fb      	ldr	r3, [r7, #28]
 801088e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8010890:	69fb      	ldr	r3, [r7, #28]
 8010892:	2200      	movs	r2, #0
 8010894:	829a      	strh	r2, [r3, #20]
 8010896:	69fb      	ldr	r3, [r7, #28]
 8010898:	8a9a      	ldrh	r2, [r3, #20]
 801089a:	69fb      	ldr	r3, [r7, #28]
 801089c:	825a      	strh	r2, [r3, #18]
 801089e:	69fb      	ldr	r3, [r7, #28]
 80108a0:	8a5a      	ldrh	r2, [r3, #18]
 80108a2:	69fb      	ldr	r3, [r7, #28]
 80108a4:	821a      	strh	r2, [r3, #16]
 80108a6:	69fb      	ldr	r3, [r7, #28]
 80108a8:	8a1a      	ldrh	r2, [r3, #16]
 80108aa:	69fb      	ldr	r3, [r7, #28]
 80108ac:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f000 fdee 	bl	8011490 <dhcp_supplied_address>
 80108b4:	4603      	mov	r3, r0
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d03b      	beq.n	8010932 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80108ba:	f107 030e 	add.w	r3, r7, #14
 80108be:	2207      	movs	r2, #7
 80108c0:	69f9      	ldr	r1, [r7, #28]
 80108c2:	6878      	ldr	r0, [r7, #4]
 80108c4:	f000 fce0 	bl	8011288 <dhcp_create_msg>
 80108c8:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80108ca:	69bb      	ldr	r3, [r7, #24]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d030      	beq.n	8010932 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80108d0:	69bb      	ldr	r3, [r7, #24]
 80108d2:	685b      	ldr	r3, [r3, #4]
 80108d4:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80108d6:	89f8      	ldrh	r0, [r7, #14]
 80108d8:	697b      	ldr	r3, [r7, #20]
 80108da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80108de:	2304      	movs	r3, #4
 80108e0:	2236      	movs	r2, #54	; 0x36
 80108e2:	f000 f85f 	bl	80109a4 <dhcp_option>
 80108e6:	4603      	mov	r3, r0
 80108e8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80108ea:	89fc      	ldrh	r4, [r7, #14]
 80108ec:	697b      	ldr	r3, [r7, #20]
 80108ee:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	4618      	mov	r0, r3
 80108f6:	f7f7 fa08 	bl	8007d0a <lwip_htonl>
 80108fa:	4603      	mov	r3, r0
 80108fc:	461a      	mov	r2, r3
 80108fe:	4629      	mov	r1, r5
 8010900:	4620      	mov	r0, r4
 8010902:	f000 f8db 	bl	8010abc <dhcp_option_long>
 8010906:	4603      	mov	r3, r0
 8010908:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801090a:	89f8      	ldrh	r0, [r7, #14]
 801090c:	697b      	ldr	r3, [r7, #20]
 801090e:	33f0      	adds	r3, #240	; 0xf0
 8010910:	69ba      	ldr	r2, [r7, #24]
 8010912:	4619      	mov	r1, r3
 8010914:	f000 fd8e 	bl	8011434 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010918:	4b13      	ldr	r3, [pc, #76]	; (8010968 <dhcp_release_and_stop+0x12c>)
 801091a:	6818      	ldr	r0, [r3, #0]
 801091c:	f107 0210 	add.w	r2, r7, #16
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	9300      	str	r3, [sp, #0]
 8010924:	2343      	movs	r3, #67	; 0x43
 8010926:	69b9      	ldr	r1, [r7, #24]
 8010928:	f7fe fc4a 	bl	800f1c0 <udp_sendto_if>
      pbuf_free(p_out);
 801092c:	69b8      	ldr	r0, [r7, #24]
 801092e:	f7f8 fd41 	bl	80093b4 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8010932:	4b0e      	ldr	r3, [pc, #56]	; (801096c <dhcp_release_and_stop+0x130>)
 8010934:	4a0d      	ldr	r2, [pc, #52]	; (801096c <dhcp_release_and_stop+0x130>)
 8010936:	490d      	ldr	r1, [pc, #52]	; (801096c <dhcp_release_and_stop+0x130>)
 8010938:	6878      	ldr	r0, [r7, #4]
 801093a:	f7f8 f85b 	bl	80089f4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801093e:	2100      	movs	r1, #0
 8010940:	69f8      	ldr	r0, [r7, #28]
 8010942:	f000 f815 	bl	8010970 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8010946:	69fb      	ldr	r3, [r7, #28]
 8010948:	791b      	ldrb	r3, [r3, #4]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d008      	beq.n	8010960 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801094e:	f7fe ff83 	bl	800f858 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8010952:	69fb      	ldr	r3, [r7, #28]
 8010954:	2200      	movs	r2, #0
 8010956:	711a      	strb	r2, [r3, #4]
 8010958:	e002      	b.n	8010960 <dhcp_release_and_stop+0x124>
    return;
 801095a:	bf00      	nop
 801095c:	e000      	b.n	8010960 <dhcp_release_and_stop+0x124>
    return;
 801095e:	bf00      	nop
  }
}
 8010960:	3720      	adds	r7, #32
 8010962:	46bd      	mov	sp, r7
 8010964:	bdb0      	pop	{r4, r5, r7, pc}
 8010966:	bf00      	nop
 8010968:	2000af48 	.word	0x2000af48
 801096c:	0801a248 	.word	0x0801a248

08010970 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8010970:	b480      	push	{r7}
 8010972:	b083      	sub	sp, #12
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
 8010978:	460b      	mov	r3, r1
 801097a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	795b      	ldrb	r3, [r3, #5]
 8010980:	78fa      	ldrb	r2, [r7, #3]
 8010982:	429a      	cmp	r2, r3
 8010984:	d008      	beq.n	8010998 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	78fa      	ldrb	r2, [r7, #3]
 801098a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	2200      	movs	r2, #0
 8010990:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	2200      	movs	r2, #0
 8010996:	811a      	strh	r2, [r3, #8]
  }
}
 8010998:	bf00      	nop
 801099a:	370c      	adds	r7, #12
 801099c:	46bd      	mov	sp, r7
 801099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a2:	4770      	bx	lr

080109a4 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b082      	sub	sp, #8
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6039      	str	r1, [r7, #0]
 80109ac:	4611      	mov	r1, r2
 80109ae:	461a      	mov	r2, r3
 80109b0:	4603      	mov	r3, r0
 80109b2:	80fb      	strh	r3, [r7, #6]
 80109b4:	460b      	mov	r3, r1
 80109b6:	717b      	strb	r3, [r7, #5]
 80109b8:	4613      	mov	r3, r2
 80109ba:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80109bc:	88fa      	ldrh	r2, [r7, #6]
 80109be:	793b      	ldrb	r3, [r7, #4]
 80109c0:	4413      	add	r3, r2
 80109c2:	3302      	adds	r3, #2
 80109c4:	2b44      	cmp	r3, #68	; 0x44
 80109c6:	d906      	bls.n	80109d6 <dhcp_option+0x32>
 80109c8:	4b0d      	ldr	r3, [pc, #52]	; (8010a00 <dhcp_option+0x5c>)
 80109ca:	f240 529a 	movw	r2, #1434	; 0x59a
 80109ce:	490d      	ldr	r1, [pc, #52]	; (8010a04 <dhcp_option+0x60>)
 80109d0:	480d      	ldr	r0, [pc, #52]	; (8010a08 <dhcp_option+0x64>)
 80109d2:	f003 f945 	bl	8013c60 <iprintf>
  options[options_out_len++] = option_type;
 80109d6:	88fb      	ldrh	r3, [r7, #6]
 80109d8:	1c5a      	adds	r2, r3, #1
 80109da:	80fa      	strh	r2, [r7, #6]
 80109dc:	461a      	mov	r2, r3
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	4413      	add	r3, r2
 80109e2:	797a      	ldrb	r2, [r7, #5]
 80109e4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80109e6:	88fb      	ldrh	r3, [r7, #6]
 80109e8:	1c5a      	adds	r2, r3, #1
 80109ea:	80fa      	strh	r2, [r7, #6]
 80109ec:	461a      	mov	r2, r3
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	4413      	add	r3, r2
 80109f2:	793a      	ldrb	r2, [r7, #4]
 80109f4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80109f6:	88fb      	ldrh	r3, [r7, #6]
}
 80109f8:	4618      	mov	r0, r3
 80109fa:	3708      	adds	r7, #8
 80109fc:	46bd      	mov	sp, r7
 80109fe:	bd80      	pop	{r7, pc}
 8010a00:	080171b8 	.word	0x080171b8
 8010a04:	0801734c 	.word	0x0801734c
 8010a08:	08017218 	.word	0x08017218

08010a0c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b082      	sub	sp, #8
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	4603      	mov	r3, r0
 8010a14:	6039      	str	r1, [r7, #0]
 8010a16:	80fb      	strh	r3, [r7, #6]
 8010a18:	4613      	mov	r3, r2
 8010a1a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8010a1c:	88fb      	ldrh	r3, [r7, #6]
 8010a1e:	2b43      	cmp	r3, #67	; 0x43
 8010a20:	d906      	bls.n	8010a30 <dhcp_option_byte+0x24>
 8010a22:	4b0a      	ldr	r3, [pc, #40]	; (8010a4c <dhcp_option_byte+0x40>)
 8010a24:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8010a28:	4909      	ldr	r1, [pc, #36]	; (8010a50 <dhcp_option_byte+0x44>)
 8010a2a:	480a      	ldr	r0, [pc, #40]	; (8010a54 <dhcp_option_byte+0x48>)
 8010a2c:	f003 f918 	bl	8013c60 <iprintf>
  options[options_out_len++] = value;
 8010a30:	88fb      	ldrh	r3, [r7, #6]
 8010a32:	1c5a      	adds	r2, r3, #1
 8010a34:	80fa      	strh	r2, [r7, #6]
 8010a36:	461a      	mov	r2, r3
 8010a38:	683b      	ldr	r3, [r7, #0]
 8010a3a:	4413      	add	r3, r2
 8010a3c:	797a      	ldrb	r2, [r7, #5]
 8010a3e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010a40:	88fb      	ldrh	r3, [r7, #6]
}
 8010a42:	4618      	mov	r0, r3
 8010a44:	3708      	adds	r7, #8
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd80      	pop	{r7, pc}
 8010a4a:	bf00      	nop
 8010a4c:	080171b8 	.word	0x080171b8
 8010a50:	08017390 	.word	0x08017390
 8010a54:	08017218 	.word	0x08017218

08010a58 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b082      	sub	sp, #8
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	4603      	mov	r3, r0
 8010a60:	6039      	str	r1, [r7, #0]
 8010a62:	80fb      	strh	r3, [r7, #6]
 8010a64:	4613      	mov	r3, r2
 8010a66:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8010a68:	88fb      	ldrh	r3, [r7, #6]
 8010a6a:	3302      	adds	r3, #2
 8010a6c:	2b44      	cmp	r3, #68	; 0x44
 8010a6e:	d906      	bls.n	8010a7e <dhcp_option_short+0x26>
 8010a70:	4b0f      	ldr	r3, [pc, #60]	; (8010ab0 <dhcp_option_short+0x58>)
 8010a72:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8010a76:	490f      	ldr	r1, [pc, #60]	; (8010ab4 <dhcp_option_short+0x5c>)
 8010a78:	480f      	ldr	r0, [pc, #60]	; (8010ab8 <dhcp_option_short+0x60>)
 8010a7a:	f003 f8f1 	bl	8013c60 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8010a7e:	88bb      	ldrh	r3, [r7, #4]
 8010a80:	0a1b      	lsrs	r3, r3, #8
 8010a82:	b29a      	uxth	r2, r3
 8010a84:	88fb      	ldrh	r3, [r7, #6]
 8010a86:	1c59      	adds	r1, r3, #1
 8010a88:	80f9      	strh	r1, [r7, #6]
 8010a8a:	4619      	mov	r1, r3
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	440b      	add	r3, r1
 8010a90:	b2d2      	uxtb	r2, r2
 8010a92:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8010a94:	88fb      	ldrh	r3, [r7, #6]
 8010a96:	1c5a      	adds	r2, r3, #1
 8010a98:	80fa      	strh	r2, [r7, #6]
 8010a9a:	461a      	mov	r2, r3
 8010a9c:	683b      	ldr	r3, [r7, #0]
 8010a9e:	4413      	add	r3, r2
 8010aa0:	88ba      	ldrh	r2, [r7, #4]
 8010aa2:	b2d2      	uxtb	r2, r2
 8010aa4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010aa6:	88fb      	ldrh	r3, [r7, #6]
}
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3708      	adds	r7, #8
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}
 8010ab0:	080171b8 	.word	0x080171b8
 8010ab4:	080173c8 	.word	0x080173c8
 8010ab8:	08017218 	.word	0x08017218

08010abc <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b084      	sub	sp, #16
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	60b9      	str	r1, [r7, #8]
 8010ac6:	607a      	str	r2, [r7, #4]
 8010ac8:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8010aca:	89fb      	ldrh	r3, [r7, #14]
 8010acc:	3304      	adds	r3, #4
 8010ace:	2b44      	cmp	r3, #68	; 0x44
 8010ad0:	d906      	bls.n	8010ae0 <dhcp_option_long+0x24>
 8010ad2:	4b19      	ldr	r3, [pc, #100]	; (8010b38 <dhcp_option_long+0x7c>)
 8010ad4:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8010ad8:	4918      	ldr	r1, [pc, #96]	; (8010b3c <dhcp_option_long+0x80>)
 8010ada:	4819      	ldr	r0, [pc, #100]	; (8010b40 <dhcp_option_long+0x84>)
 8010adc:	f003 f8c0 	bl	8013c60 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	0e1a      	lsrs	r2, r3, #24
 8010ae4:	89fb      	ldrh	r3, [r7, #14]
 8010ae6:	1c59      	adds	r1, r3, #1
 8010ae8:	81f9      	strh	r1, [r7, #14]
 8010aea:	4619      	mov	r1, r3
 8010aec:	68bb      	ldr	r3, [r7, #8]
 8010aee:	440b      	add	r3, r1
 8010af0:	b2d2      	uxtb	r2, r2
 8010af2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	0c1a      	lsrs	r2, r3, #16
 8010af8:	89fb      	ldrh	r3, [r7, #14]
 8010afa:	1c59      	adds	r1, r3, #1
 8010afc:	81f9      	strh	r1, [r7, #14]
 8010afe:	4619      	mov	r1, r3
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	440b      	add	r3, r1
 8010b04:	b2d2      	uxtb	r2, r2
 8010b06:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	0a1a      	lsrs	r2, r3, #8
 8010b0c:	89fb      	ldrh	r3, [r7, #14]
 8010b0e:	1c59      	adds	r1, r3, #1
 8010b10:	81f9      	strh	r1, [r7, #14]
 8010b12:	4619      	mov	r1, r3
 8010b14:	68bb      	ldr	r3, [r7, #8]
 8010b16:	440b      	add	r3, r1
 8010b18:	b2d2      	uxtb	r2, r2
 8010b1a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8010b1c:	89fb      	ldrh	r3, [r7, #14]
 8010b1e:	1c5a      	adds	r2, r3, #1
 8010b20:	81fa      	strh	r2, [r7, #14]
 8010b22:	461a      	mov	r2, r3
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	4413      	add	r3, r2
 8010b28:	687a      	ldr	r2, [r7, #4]
 8010b2a:	b2d2      	uxtb	r2, r2
 8010b2c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010b2e:	89fb      	ldrh	r3, [r7, #14]
}
 8010b30:	4618      	mov	r0, r3
 8010b32:	3710      	adds	r7, #16
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bd80      	pop	{r7, pc}
 8010b38:	080171b8 	.word	0x080171b8
 8010b3c:	08017404 	.word	0x08017404
 8010b40:	08017218 	.word	0x08017218

08010b44 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b090      	sub	sp, #64	; 0x40
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
 8010b4c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8010b4e:	2300      	movs	r3, #0
 8010b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8010b52:	2300      	movs	r3, #0
 8010b54:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8010b56:	2208      	movs	r2, #8
 8010b58:	2100      	movs	r1, #0
 8010b5a:	48b5      	ldr	r0, [pc, #724]	; (8010e30 <dhcp_parse_reply+0x2ec>)
 8010b5c:	f003 f878 	bl	8013c50 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	895b      	ldrh	r3, [r3, #10]
 8010b64:	2b2b      	cmp	r3, #43	; 0x2b
 8010b66:	d802      	bhi.n	8010b6e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8010b68:	f06f 0301 	mvn.w	r3, #1
 8010b6c:	e2a7      	b.n	80110be <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	685b      	ldr	r3, [r3, #4]
 8010b72:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8010b74:	23f0      	movs	r3, #240	; 0xf0
 8010b76:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	891b      	ldrh	r3, [r3, #8]
 8010b7c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010b82:	e00c      	b.n	8010b9e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8010b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b86:	895b      	ldrh	r3, [r3, #10]
 8010b88:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010b8a:	1ad3      	subs	r3, r2, r3
 8010b8c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8010b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b90:	895b      	ldrh	r3, [r3, #10]
 8010b92:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8010b94:	1ad3      	subs	r3, r2, r3
 8010b96:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8010b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d004      	beq.n	8010bae <dhcp_parse_reply+0x6a>
 8010ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ba6:	895b      	ldrh	r3, [r3, #10]
 8010ba8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010baa:	429a      	cmp	r2, r3
 8010bac:	d2ea      	bcs.n	8010b84 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8010bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d102      	bne.n	8010bba <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8010bb4:	f06f 0301 	mvn.w	r3, #1
 8010bb8:	e281      	b.n	80110be <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8010bba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010bbc:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8010bbe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010bc0:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8010bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bc4:	685b      	ldr	r3, [r3, #4]
 8010bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8010bc8:	e239      	b.n	801103e <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8010bca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010bcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010bce:	4413      	add	r3, r2
 8010bd0:	781b      	ldrb	r3, [r3, #0]
 8010bd2:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8010bda:	f04f 33ff 	mov.w	r3, #4294967295
 8010bde:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8010be0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010be2:	3302      	adds	r3, #2
 8010be4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8010be6:	8bfa      	ldrh	r2, [r7, #30]
 8010be8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010bea:	429a      	cmp	r2, r3
 8010bec:	d202      	bcs.n	8010bf4 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8010bee:	f06f 0301 	mvn.w	r3, #1
 8010bf2:	e264      	b.n	80110be <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8010bf4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010bf6:	3301      	adds	r3, #1
 8010bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bfa:	8952      	ldrh	r2, [r2, #10]
 8010bfc:	4293      	cmp	r3, r2
 8010bfe:	da07      	bge.n	8010c10 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8010c00:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010c02:	3301      	adds	r3, #1
 8010c04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010c06:	4413      	add	r3, r2
 8010c08:	781b      	ldrb	r3, [r3, #0]
 8010c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010c0e:	e00b      	b.n	8010c28 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8010c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d004      	beq.n	8010c22 <dhcp_parse_reply+0xde>
 8010c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	685b      	ldr	r3, [r3, #4]
 8010c1e:	781b      	ldrb	r3, [r3, #0]
 8010c20:	e000      	b.n	8010c24 <dhcp_parse_reply+0xe0>
 8010c22:	2300      	movs	r3, #0
 8010c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8010c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8010c30:	7dfb      	ldrb	r3, [r7, #23]
 8010c32:	2b3b      	cmp	r3, #59	; 0x3b
 8010c34:	f200 812c 	bhi.w	8010e90 <dhcp_parse_reply+0x34c>
 8010c38:	a201      	add	r2, pc, #4	; (adr r2, 8010c40 <dhcp_parse_reply+0xfc>)
 8010c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c3e:	bf00      	nop
 8010c40:	08010d31 	.word	0x08010d31
 8010c44:	08010d41 	.word	0x08010d41
 8010c48:	08010e91 	.word	0x08010e91
 8010c4c:	08010d63 	.word	0x08010d63
 8010c50:	08010e91 	.word	0x08010e91
 8010c54:	08010e91 	.word	0x08010e91
 8010c58:	08010e91 	.word	0x08010e91
 8010c5c:	08010e91 	.word	0x08010e91
 8010c60:	08010e91 	.word	0x08010e91
 8010c64:	08010e91 	.word	0x08010e91
 8010c68:	08010e91 	.word	0x08010e91
 8010c6c:	08010e91 	.word	0x08010e91
 8010c70:	08010e91 	.word	0x08010e91
 8010c74:	08010e91 	.word	0x08010e91
 8010c78:	08010e91 	.word	0x08010e91
 8010c7c:	08010e91 	.word	0x08010e91
 8010c80:	08010e91 	.word	0x08010e91
 8010c84:	08010e91 	.word	0x08010e91
 8010c88:	08010e91 	.word	0x08010e91
 8010c8c:	08010e91 	.word	0x08010e91
 8010c90:	08010e91 	.word	0x08010e91
 8010c94:	08010e91 	.word	0x08010e91
 8010c98:	08010e91 	.word	0x08010e91
 8010c9c:	08010e91 	.word	0x08010e91
 8010ca0:	08010e91 	.word	0x08010e91
 8010ca4:	08010e91 	.word	0x08010e91
 8010ca8:	08010e91 	.word	0x08010e91
 8010cac:	08010e91 	.word	0x08010e91
 8010cb0:	08010e91 	.word	0x08010e91
 8010cb4:	08010e91 	.word	0x08010e91
 8010cb8:	08010e91 	.word	0x08010e91
 8010cbc:	08010e91 	.word	0x08010e91
 8010cc0:	08010e91 	.word	0x08010e91
 8010cc4:	08010e91 	.word	0x08010e91
 8010cc8:	08010e91 	.word	0x08010e91
 8010ccc:	08010e91 	.word	0x08010e91
 8010cd0:	08010e91 	.word	0x08010e91
 8010cd4:	08010e91 	.word	0x08010e91
 8010cd8:	08010e91 	.word	0x08010e91
 8010cdc:	08010e91 	.word	0x08010e91
 8010ce0:	08010e91 	.word	0x08010e91
 8010ce4:	08010e91 	.word	0x08010e91
 8010ce8:	08010e91 	.word	0x08010e91
 8010cec:	08010e91 	.word	0x08010e91
 8010cf0:	08010e91 	.word	0x08010e91
 8010cf4:	08010e91 	.word	0x08010e91
 8010cf8:	08010e91 	.word	0x08010e91
 8010cfc:	08010e91 	.word	0x08010e91
 8010d00:	08010e91 	.word	0x08010e91
 8010d04:	08010e91 	.word	0x08010e91
 8010d08:	08010e91 	.word	0x08010e91
 8010d0c:	08010d8f 	.word	0x08010d8f
 8010d10:	08010db1 	.word	0x08010db1
 8010d14:	08010ded 	.word	0x08010ded
 8010d18:	08010e0f 	.word	0x08010e0f
 8010d1c:	08010e91 	.word	0x08010e91
 8010d20:	08010e91 	.word	0x08010e91
 8010d24:	08010e91 	.word	0x08010e91
 8010d28:	08010e4d 	.word	0x08010e4d
 8010d2c:	08010e6f 	.word	0x08010e6f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8010d30:	2300      	movs	r3, #0
 8010d32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010d36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8010d3e:	e0ab      	b.n	8010e98 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010d40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d44:	2b04      	cmp	r3, #4
 8010d46:	d009      	beq.n	8010d5c <dhcp_parse_reply+0x218>
 8010d48:	4b3a      	ldr	r3, [pc, #232]	; (8010e34 <dhcp_parse_reply+0x2f0>)
 8010d4a:	f240 622e 	movw	r2, #1582	; 0x62e
 8010d4e:	493a      	ldr	r1, [pc, #232]	; (8010e38 <dhcp_parse_reply+0x2f4>)
 8010d50:	483a      	ldr	r0, [pc, #232]	; (8010e3c <dhcp_parse_reply+0x2f8>)
 8010d52:	f002 ff85 	bl	8013c60 <iprintf>
 8010d56:	f06f 0305 	mvn.w	r3, #5
 8010d5a:	e1b0      	b.n	80110be <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8010d5c:	2306      	movs	r3, #6
 8010d5e:	623b      	str	r3, [r7, #32]
        break;
 8010d60:	e09a      	b.n	8010e98 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8010d62:	2304      	movs	r3, #4
 8010d64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8010d68:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010d6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010d70:	429a      	cmp	r2, r3
 8010d72:	d209      	bcs.n	8010d88 <dhcp_parse_reply+0x244>
 8010d74:	4b2f      	ldr	r3, [pc, #188]	; (8010e34 <dhcp_parse_reply+0x2f0>)
 8010d76:	f240 6233 	movw	r2, #1587	; 0x633
 8010d7a:	4931      	ldr	r1, [pc, #196]	; (8010e40 <dhcp_parse_reply+0x2fc>)
 8010d7c:	482f      	ldr	r0, [pc, #188]	; (8010e3c <dhcp_parse_reply+0x2f8>)
 8010d7e:	f002 ff6f 	bl	8013c60 <iprintf>
 8010d82:	f06f 0305 	mvn.w	r3, #5
 8010d86:	e19a      	b.n	80110be <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8010d88:	2307      	movs	r3, #7
 8010d8a:	623b      	str	r3, [r7, #32]
        break;
 8010d8c:	e084      	b.n	8010e98 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010d8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d92:	2b04      	cmp	r3, #4
 8010d94:	d009      	beq.n	8010daa <dhcp_parse_reply+0x266>
 8010d96:	4b27      	ldr	r3, [pc, #156]	; (8010e34 <dhcp_parse_reply+0x2f0>)
 8010d98:	f240 6241 	movw	r2, #1601	; 0x641
 8010d9c:	4926      	ldr	r1, [pc, #152]	; (8010e38 <dhcp_parse_reply+0x2f4>)
 8010d9e:	4827      	ldr	r0, [pc, #156]	; (8010e3c <dhcp_parse_reply+0x2f8>)
 8010da0:	f002 ff5e 	bl	8013c60 <iprintf>
 8010da4:	f06f 0305 	mvn.w	r3, #5
 8010da8:	e189      	b.n	80110be <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8010daa:	2303      	movs	r3, #3
 8010dac:	623b      	str	r3, [r7, #32]
        break;
 8010dae:	e073      	b.n	8010e98 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8010db0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010db4:	2b01      	cmp	r3, #1
 8010db6:	d009      	beq.n	8010dcc <dhcp_parse_reply+0x288>
 8010db8:	4b1e      	ldr	r3, [pc, #120]	; (8010e34 <dhcp_parse_reply+0x2f0>)
 8010dba:	f240 624f 	movw	r2, #1615	; 0x64f
 8010dbe:	4921      	ldr	r1, [pc, #132]	; (8010e44 <dhcp_parse_reply+0x300>)
 8010dc0:	481e      	ldr	r0, [pc, #120]	; (8010e3c <dhcp_parse_reply+0x2f8>)
 8010dc2:	f002 ff4d 	bl	8013c60 <iprintf>
 8010dc6:	f06f 0305 	mvn.w	r3, #5
 8010dca:	e178      	b.n	80110be <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8010dcc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010dce:	2bf0      	cmp	r3, #240	; 0xf0
 8010dd0:	d009      	beq.n	8010de6 <dhcp_parse_reply+0x2a2>
 8010dd2:	4b18      	ldr	r3, [pc, #96]	; (8010e34 <dhcp_parse_reply+0x2f0>)
 8010dd4:	f240 6251 	movw	r2, #1617	; 0x651
 8010dd8:	491b      	ldr	r1, [pc, #108]	; (8010e48 <dhcp_parse_reply+0x304>)
 8010dda:	4818      	ldr	r0, [pc, #96]	; (8010e3c <dhcp_parse_reply+0x2f8>)
 8010ddc:	f002 ff40 	bl	8013c60 <iprintf>
 8010de0:	f06f 0305 	mvn.w	r3, #5
 8010de4:	e16b      	b.n	80110be <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8010de6:	2300      	movs	r3, #0
 8010de8:	623b      	str	r3, [r7, #32]
        break;
 8010dea:	e055      	b.n	8010e98 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8010dec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010df0:	2b01      	cmp	r3, #1
 8010df2:	d009      	beq.n	8010e08 <dhcp_parse_reply+0x2c4>
 8010df4:	4b0f      	ldr	r3, [pc, #60]	; (8010e34 <dhcp_parse_reply+0x2f0>)
 8010df6:	f240 6255 	movw	r2, #1621	; 0x655
 8010dfa:	4912      	ldr	r1, [pc, #72]	; (8010e44 <dhcp_parse_reply+0x300>)
 8010dfc:	480f      	ldr	r0, [pc, #60]	; (8010e3c <dhcp_parse_reply+0x2f8>)
 8010dfe:	f002 ff2f 	bl	8013c60 <iprintf>
 8010e02:	f06f 0305 	mvn.w	r3, #5
 8010e06:	e15a      	b.n	80110be <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8010e08:	2301      	movs	r3, #1
 8010e0a:	623b      	str	r3, [r7, #32]
        break;
 8010e0c:	e044      	b.n	8010e98 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010e0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e12:	2b04      	cmp	r3, #4
 8010e14:	d009      	beq.n	8010e2a <dhcp_parse_reply+0x2e6>
 8010e16:	4b07      	ldr	r3, [pc, #28]	; (8010e34 <dhcp_parse_reply+0x2f0>)
 8010e18:	f240 6259 	movw	r2, #1625	; 0x659
 8010e1c:	4906      	ldr	r1, [pc, #24]	; (8010e38 <dhcp_parse_reply+0x2f4>)
 8010e1e:	4807      	ldr	r0, [pc, #28]	; (8010e3c <dhcp_parse_reply+0x2f8>)
 8010e20:	f002 ff1e 	bl	8013c60 <iprintf>
 8010e24:	f06f 0305 	mvn.w	r3, #5
 8010e28:	e149      	b.n	80110be <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8010e2a:	2302      	movs	r3, #2
 8010e2c:	623b      	str	r3, [r7, #32]
        break;
 8010e2e:	e033      	b.n	8010e98 <dhcp_parse_reply+0x354>
 8010e30:	2000af40 	.word	0x2000af40
 8010e34:	080171b8 	.word	0x080171b8
 8010e38:	08017440 	.word	0x08017440
 8010e3c:	08017218 	.word	0x08017218
 8010e40:	0801744c 	.word	0x0801744c
 8010e44:	08017460 	.word	0x08017460
 8010e48:	0801746c 	.word	0x0801746c
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e50:	2b04      	cmp	r3, #4
 8010e52:	d009      	beq.n	8010e68 <dhcp_parse_reply+0x324>
 8010e54:	4b9c      	ldr	r3, [pc, #624]	; (80110c8 <dhcp_parse_reply+0x584>)
 8010e56:	f240 625d 	movw	r2, #1629	; 0x65d
 8010e5a:	499c      	ldr	r1, [pc, #624]	; (80110cc <dhcp_parse_reply+0x588>)
 8010e5c:	489c      	ldr	r0, [pc, #624]	; (80110d0 <dhcp_parse_reply+0x58c>)
 8010e5e:	f002 feff 	bl	8013c60 <iprintf>
 8010e62:	f06f 0305 	mvn.w	r3, #5
 8010e66:	e12a      	b.n	80110be <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8010e68:	2304      	movs	r3, #4
 8010e6a:	623b      	str	r3, [r7, #32]
        break;
 8010e6c:	e014      	b.n	8010e98 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010e6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e72:	2b04      	cmp	r3, #4
 8010e74:	d009      	beq.n	8010e8a <dhcp_parse_reply+0x346>
 8010e76:	4b94      	ldr	r3, [pc, #592]	; (80110c8 <dhcp_parse_reply+0x584>)
 8010e78:	f240 6261 	movw	r2, #1633	; 0x661
 8010e7c:	4993      	ldr	r1, [pc, #588]	; (80110cc <dhcp_parse_reply+0x588>)
 8010e7e:	4894      	ldr	r0, [pc, #592]	; (80110d0 <dhcp_parse_reply+0x58c>)
 8010e80:	f002 feee 	bl	8013c60 <iprintf>
 8010e84:	f06f 0305 	mvn.w	r3, #5
 8010e88:	e119      	b.n	80110be <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8010e8a:	2305      	movs	r3, #5
 8010e8c:	623b      	str	r3, [r7, #32]
        break;
 8010e8e:	e003      	b.n	8010e98 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8010e90:	2300      	movs	r3, #0
 8010e92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8010e96:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8010e98:	7dfb      	ldrb	r3, [r7, #23]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d103      	bne.n	8010ea6 <dhcp_parse_reply+0x362>
      offset++;
 8010e9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010ea0:	3301      	adds	r3, #1
 8010ea2:	877b      	strh	r3, [r7, #58]	; 0x3a
 8010ea4:	e0a1      	b.n	8010fea <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8010ea6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010eac:	4413      	add	r3, r2
 8010eae:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8010eb2:	4293      	cmp	r3, r2
 8010eb4:	dd02      	ble.n	8010ebc <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8010eb6:	f06f 0301 	mvn.w	r3, #1
 8010eba:	e100      	b.n	80110be <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8010ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ec0:	b29a      	uxth	r2, r3
 8010ec2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010ec4:	4413      	add	r3, r2
 8010ec6:	b29b      	uxth	r3, r3
 8010ec8:	3302      	adds	r3, #2
 8010eca:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8010ecc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	f000 808a 	beq.w	8010fea <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8010eda:	6a3b      	ldr	r3, [r7, #32]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	db02      	blt.n	8010ee6 <dhcp_parse_reply+0x3a2>
 8010ee0:	6a3b      	ldr	r3, [r7, #32]
 8010ee2:	2b07      	cmp	r3, #7
 8010ee4:	dd06      	ble.n	8010ef4 <dhcp_parse_reply+0x3b0>
 8010ee6:	4b78      	ldr	r3, [pc, #480]	; (80110c8 <dhcp_parse_reply+0x584>)
 8010ee8:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8010eec:	4979      	ldr	r1, [pc, #484]	; (80110d4 <dhcp_parse_reply+0x590>)
 8010eee:	4878      	ldr	r0, [pc, #480]	; (80110d0 <dhcp_parse_reply+0x58c>)
 8010ef0:	f002 feb6 	bl	8013c60 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8010ef4:	4a78      	ldr	r2, [pc, #480]	; (80110d8 <dhcp_parse_reply+0x594>)
 8010ef6:	6a3b      	ldr	r3, [r7, #32]
 8010ef8:	4413      	add	r3, r2
 8010efa:	781b      	ldrb	r3, [r3, #0]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d174      	bne.n	8010fea <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8010f00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010f04:	2b04      	cmp	r3, #4
 8010f06:	bf28      	it	cs
 8010f08:	2304      	movcs	r3, #4
 8010f0a:	b2db      	uxtb	r3, r3
 8010f0c:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8010f0e:	8bfb      	ldrh	r3, [r7, #30]
 8010f10:	8aba      	ldrh	r2, [r7, #20]
 8010f12:	f107 0108 	add.w	r1, r7, #8
 8010f16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f18:	f7f8 fc46 	bl	80097a8 <pbuf_copy_partial>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	461a      	mov	r2, r3
 8010f20:	8abb      	ldrh	r3, [r7, #20]
 8010f22:	4293      	cmp	r3, r2
 8010f24:	d002      	beq.n	8010f2c <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8010f26:	f06f 0301 	mvn.w	r3, #1
 8010f2a:	e0c8      	b.n	80110be <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8010f2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010f30:	2b04      	cmp	r3, #4
 8010f32:	d933      	bls.n	8010f9c <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8010f34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010f38:	f003 0303 	and.w	r3, r3, #3
 8010f3c:	b2db      	uxtb	r3, r3
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d009      	beq.n	8010f56 <dhcp_parse_reply+0x412>
 8010f42:	4b61      	ldr	r3, [pc, #388]	; (80110c8 <dhcp_parse_reply+0x584>)
 8010f44:	f240 6281 	movw	r2, #1665	; 0x681
 8010f48:	4964      	ldr	r1, [pc, #400]	; (80110dc <dhcp_parse_reply+0x598>)
 8010f4a:	4861      	ldr	r0, [pc, #388]	; (80110d0 <dhcp_parse_reply+0x58c>)
 8010f4c:	f002 fe88 	bl	8013c60 <iprintf>
 8010f50:	f06f 0305 	mvn.w	r3, #5
 8010f54:	e0b3      	b.n	80110be <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8010f56:	4a60      	ldr	r2, [pc, #384]	; (80110d8 <dhcp_parse_reply+0x594>)
 8010f58:	6a3b      	ldr	r3, [r7, #32]
 8010f5a:	4413      	add	r3, r2
 8010f5c:	2201      	movs	r2, #1
 8010f5e:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	4618      	mov	r0, r3
 8010f64:	f7f6 fed1 	bl	8007d0a <lwip_htonl>
 8010f68:	4602      	mov	r2, r0
 8010f6a:	495d      	ldr	r1, [pc, #372]	; (80110e0 <dhcp_parse_reply+0x59c>)
 8010f6c:	6a3b      	ldr	r3, [r7, #32]
 8010f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8010f72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010f76:	3b04      	subs	r3, #4
 8010f78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8010f7c:	8bfb      	ldrh	r3, [r7, #30]
 8010f7e:	3304      	adds	r3, #4
 8010f80:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8010f82:	8a7a      	ldrh	r2, [r7, #18]
 8010f84:	8bfb      	ldrh	r3, [r7, #30]
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d202      	bcs.n	8010f90 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8010f8a:	f06f 0301 	mvn.w	r3, #1
 8010f8e:	e096      	b.n	80110be <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8010f90:	8a7b      	ldrh	r3, [r7, #18]
 8010f92:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8010f94:	6a3b      	ldr	r3, [r7, #32]
 8010f96:	3301      	adds	r3, #1
 8010f98:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8010f9a:	e79e      	b.n	8010eda <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8010f9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010fa0:	2b04      	cmp	r3, #4
 8010fa2:	d106      	bne.n	8010fb2 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8010fa4:	68bb      	ldr	r3, [r7, #8]
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f7f6 feaf 	bl	8007d0a <lwip_htonl>
 8010fac:	4603      	mov	r3, r0
 8010fae:	60bb      	str	r3, [r7, #8]
 8010fb0:	e011      	b.n	8010fd6 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8010fb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010fb6:	2b01      	cmp	r3, #1
 8010fb8:	d009      	beq.n	8010fce <dhcp_parse_reply+0x48a>
 8010fba:	4b43      	ldr	r3, [pc, #268]	; (80110c8 <dhcp_parse_reply+0x584>)
 8010fbc:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8010fc0:	4948      	ldr	r1, [pc, #288]	; (80110e4 <dhcp_parse_reply+0x5a0>)
 8010fc2:	4843      	ldr	r0, [pc, #268]	; (80110d0 <dhcp_parse_reply+0x58c>)
 8010fc4:	f002 fe4c 	bl	8013c60 <iprintf>
 8010fc8:	f06f 0305 	mvn.w	r3, #5
 8010fcc:	e077      	b.n	80110be <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8010fce:	f107 0308 	add.w	r3, r7, #8
 8010fd2:	781b      	ldrb	r3, [r3, #0]
 8010fd4:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8010fd6:	4a40      	ldr	r2, [pc, #256]	; (80110d8 <dhcp_parse_reply+0x594>)
 8010fd8:	6a3b      	ldr	r3, [r7, #32]
 8010fda:	4413      	add	r3, r2
 8010fdc:	2201      	movs	r2, #1
 8010fde:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8010fe0:	68ba      	ldr	r2, [r7, #8]
 8010fe2:	493f      	ldr	r1, [pc, #252]	; (80110e0 <dhcp_parse_reply+0x59c>)
 8010fe4:	6a3b      	ldr	r3, [r7, #32]
 8010fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8010fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fec:	895b      	ldrh	r3, [r3, #10]
 8010fee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010ff0:	429a      	cmp	r2, r3
 8010ff2:	d324      	bcc.n	801103e <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8010ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff6:	895b      	ldrh	r3, [r3, #10]
 8010ff8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010ffa:	1ad3      	subs	r3, r2, r3
 8010ffc:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8010ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011000:	895b      	ldrh	r3, [r3, #10]
 8011002:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8011004:	1ad3      	subs	r3, r2, r3
 8011006:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8011008:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801100a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801100c:	429a      	cmp	r2, r3
 801100e:	d213      	bcs.n	8011038 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8011010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8011016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011018:	2b00      	cmp	r3, #0
 801101a:	d109      	bne.n	8011030 <dhcp_parse_reply+0x4ec>
 801101c:	4b2a      	ldr	r3, [pc, #168]	; (80110c8 <dhcp_parse_reply+0x584>)
 801101e:	f240 629d 	movw	r2, #1693	; 0x69d
 8011022:	4931      	ldr	r1, [pc, #196]	; (80110e8 <dhcp_parse_reply+0x5a4>)
 8011024:	482a      	ldr	r0, [pc, #168]	; (80110d0 <dhcp_parse_reply+0x58c>)
 8011026:	f002 fe1b 	bl	8013c60 <iprintf>
 801102a:	f06f 0305 	mvn.w	r3, #5
 801102e:	e046      	b.n	80110be <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8011030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011032:	685b      	ldr	r3, [r3, #4]
 8011034:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011036:	e002      	b.n	801103e <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8011038:	f06f 0301 	mvn.w	r3, #1
 801103c:	e03f      	b.n	80110be <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801103e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011040:	2b00      	cmp	r3, #0
 8011042:	d00a      	beq.n	801105a <dhcp_parse_reply+0x516>
 8011044:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011046:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011048:	429a      	cmp	r2, r3
 801104a:	d206      	bcs.n	801105a <dhcp_parse_reply+0x516>
 801104c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801104e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011050:	4413      	add	r3, r2
 8011052:	781b      	ldrb	r3, [r3, #0]
 8011054:	2bff      	cmp	r3, #255	; 0xff
 8011056:	f47f adb8 	bne.w	8010bca <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801105a:	4b1f      	ldr	r3, [pc, #124]	; (80110d8 <dhcp_parse_reply+0x594>)
 801105c:	781b      	ldrb	r3, [r3, #0]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d018      	beq.n	8011094 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8011062:	4b1f      	ldr	r3, [pc, #124]	; (80110e0 <dhcp_parse_reply+0x59c>)
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8011068:	4b1b      	ldr	r3, [pc, #108]	; (80110d8 <dhcp_parse_reply+0x594>)
 801106a:	2200      	movs	r2, #0
 801106c:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	2b01      	cmp	r3, #1
 8011072:	d102      	bne.n	801107a <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8011074:	2301      	movs	r3, #1
 8011076:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011078:	e00c      	b.n	8011094 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	2b02      	cmp	r3, #2
 801107e:	d102      	bne.n	8011086 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8011080:	2301      	movs	r3, #1
 8011082:	62bb      	str	r3, [r7, #40]	; 0x28
 8011084:	e006      	b.n	8011094 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	2b03      	cmp	r3, #3
 801108a:	d103      	bne.n	8011094 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 801108c:	2301      	movs	r3, #1
 801108e:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8011090:	2301      	movs	r3, #1
 8011092:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8011094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011096:	2b00      	cmp	r3, #0
 8011098:	d006      	beq.n	80110a8 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801109a:	2300      	movs	r3, #0
 801109c:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801109e:	236c      	movs	r3, #108	; 0x6c
 80110a0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80110a2:	23ec      	movs	r3, #236	; 0xec
 80110a4:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80110a6:	e56a      	b.n	8010b7e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80110a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d006      	beq.n	80110bc <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 80110ae:	2300      	movs	r3, #0
 80110b0:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80110b2:	232c      	movs	r3, #44	; 0x2c
 80110b4:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80110b6:	236c      	movs	r3, #108	; 0x6c
 80110b8:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80110ba:	e560      	b.n	8010b7e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80110bc:	2300      	movs	r3, #0
}
 80110be:	4618      	mov	r0, r3
 80110c0:	3740      	adds	r7, #64	; 0x40
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}
 80110c6:	bf00      	nop
 80110c8:	080171b8 	.word	0x080171b8
 80110cc:	08017440 	.word	0x08017440
 80110d0:	08017218 	.word	0x08017218
 80110d4:	08017484 	.word	0x08017484
 80110d8:	2000af40 	.word	0x2000af40
 80110dc:	08017498 	.word	0x08017498
 80110e0:	2000af20 	.word	0x2000af20
 80110e4:	080174b0 	.word	0x080174b0
 80110e8:	080174c4 	.word	0x080174c4

080110ec <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b08a      	sub	sp, #40	; 0x28
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	60f8      	str	r0, [r7, #12]
 80110f4:	60b9      	str	r1, [r7, #8]
 80110f6:	607a      	str	r2, [r7, #4]
 80110f8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80110fa:	4b60      	ldr	r3, [pc, #384]	; (801127c <dhcp_recv+0x190>)
 80110fc:	685b      	ldr	r3, [r3, #4]
 80110fe:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011100:	6a3b      	ldr	r3, [r7, #32]
 8011102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011104:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	685b      	ldr	r3, [r3, #4]
 801110a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801110c:	69fb      	ldr	r3, [r7, #28]
 801110e:	2b00      	cmp	r3, #0
 8011110:	f000 809d 	beq.w	801124e <dhcp_recv+0x162>
 8011114:	69fb      	ldr	r3, [r7, #28]
 8011116:	791b      	ldrb	r3, [r3, #4]
 8011118:	2b00      	cmp	r3, #0
 801111a:	f000 8098 	beq.w	801124e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	895b      	ldrh	r3, [r3, #10]
 8011122:	2b2b      	cmp	r3, #43	; 0x2b
 8011124:	f240 8095 	bls.w	8011252 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8011128:	69bb      	ldr	r3, [r7, #24]
 801112a:	781b      	ldrb	r3, [r3, #0]
 801112c:	2b02      	cmp	r3, #2
 801112e:	f040 8092 	bne.w	8011256 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011132:	2300      	movs	r3, #0
 8011134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011138:	e012      	b.n	8011160 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801113a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801113e:	6a3a      	ldr	r2, [r7, #32]
 8011140:	4413      	add	r3, r2
 8011142:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8011146:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801114a:	69b9      	ldr	r1, [r7, #24]
 801114c:	440b      	add	r3, r1
 801114e:	7f1b      	ldrb	r3, [r3, #28]
 8011150:	429a      	cmp	r2, r3
 8011152:	f040 8082 	bne.w	801125a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011156:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801115a:	3301      	adds	r3, #1
 801115c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011160:	6a3b      	ldr	r3, [r7, #32]
 8011162:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011166:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801116a:	429a      	cmp	r2, r3
 801116c:	d203      	bcs.n	8011176 <dhcp_recv+0x8a>
 801116e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011172:	2b05      	cmp	r3, #5
 8011174:	d9e1      	bls.n	801113a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8011176:	69bb      	ldr	r3, [r7, #24]
 8011178:	685b      	ldr	r3, [r3, #4]
 801117a:	4618      	mov	r0, r3
 801117c:	f7f6 fdc5 	bl	8007d0a <lwip_htonl>
 8011180:	4602      	mov	r2, r0
 8011182:	69fb      	ldr	r3, [r7, #28]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	429a      	cmp	r2, r3
 8011188:	d169      	bne.n	801125e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801118a:	69f9      	ldr	r1, [r7, #28]
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	f7ff fcd9 	bl	8010b44 <dhcp_parse_reply>
 8011192:	4603      	mov	r3, r0
 8011194:	2b00      	cmp	r3, #0
 8011196:	d164      	bne.n	8011262 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8011198:	4b39      	ldr	r3, [pc, #228]	; (8011280 <dhcp_recv+0x194>)
 801119a:	785b      	ldrb	r3, [r3, #1]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d062      	beq.n	8011266 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	685b      	ldr	r3, [r3, #4]
 80111a4:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80111a6:	4b37      	ldr	r3, [pc, #220]	; (8011284 <dhcp_recv+0x198>)
 80111a8:	685b      	ldr	r3, [r3, #4]
 80111aa:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80111ac:	7cfb      	ldrb	r3, [r7, #19]
 80111ae:	2b05      	cmp	r3, #5
 80111b0:	d12a      	bne.n	8011208 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80111b2:	69fb      	ldr	r3, [r7, #28]
 80111b4:	795b      	ldrb	r3, [r3, #5]
 80111b6:	2b01      	cmp	r3, #1
 80111b8:	d112      	bne.n	80111e0 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80111ba:	6979      	ldr	r1, [r7, #20]
 80111bc:	6a38      	ldr	r0, [r7, #32]
 80111be:	f7fe fe17 	bl	800fdf0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80111c2:	6a3b      	ldr	r3, [r7, #32]
 80111c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80111c8:	f003 0308 	and.w	r3, r3, #8
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d003      	beq.n	80111d8 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80111d0:	6a38      	ldr	r0, [r7, #32]
 80111d2:	f7fe fb85 	bl	800f8e0 <dhcp_check>
 80111d6:	e049      	b.n	801126c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80111d8:	6a38      	ldr	r0, [r7, #32]
 80111da:	f7ff f867 	bl	80102ac <dhcp_bind>
 80111de:	e045      	b.n	801126c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80111e0:	69fb      	ldr	r3, [r7, #28]
 80111e2:	795b      	ldrb	r3, [r3, #5]
 80111e4:	2b03      	cmp	r3, #3
 80111e6:	d007      	beq.n	80111f8 <dhcp_recv+0x10c>
 80111e8:	69fb      	ldr	r3, [r7, #28]
 80111ea:	795b      	ldrb	r3, [r3, #5]
 80111ec:	2b04      	cmp	r3, #4
 80111ee:	d003      	beq.n	80111f8 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80111f0:	69fb      	ldr	r3, [r7, #28]
 80111f2:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80111f4:	2b05      	cmp	r3, #5
 80111f6:	d139      	bne.n	801126c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80111f8:	6979      	ldr	r1, [r7, #20]
 80111fa:	6a38      	ldr	r0, [r7, #32]
 80111fc:	f7fe fdf8 	bl	800fdf0 <dhcp_handle_ack>
      dhcp_bind(netif);
 8011200:	6a38      	ldr	r0, [r7, #32]
 8011202:	f7ff f853 	bl	80102ac <dhcp_bind>
 8011206:	e031      	b.n	801126c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8011208:	7cfb      	ldrb	r3, [r7, #19]
 801120a:	2b06      	cmp	r3, #6
 801120c:	d113      	bne.n	8011236 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801120e:	69fb      	ldr	r3, [r7, #28]
 8011210:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8011212:	2b03      	cmp	r3, #3
 8011214:	d00b      	beq.n	801122e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8011216:	69fb      	ldr	r3, [r7, #28]
 8011218:	795b      	ldrb	r3, [r3, #5]
 801121a:	2b01      	cmp	r3, #1
 801121c:	d007      	beq.n	801122e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801121e:	69fb      	ldr	r3, [r7, #28]
 8011220:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8011222:	2b04      	cmp	r3, #4
 8011224:	d003      	beq.n	801122e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8011226:	69fb      	ldr	r3, [r7, #28]
 8011228:	795b      	ldrb	r3, [r3, #5]
 801122a:	2b05      	cmp	r3, #5
 801122c:	d103      	bne.n	8011236 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801122e:	6a38      	ldr	r0, [r7, #32]
 8011230:	f7fe fb3c 	bl	800f8ac <dhcp_handle_nak>
 8011234:	e01a      	b.n	801126c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8011236:	7cfb      	ldrb	r3, [r7, #19]
 8011238:	2b02      	cmp	r3, #2
 801123a:	d116      	bne.n	801126a <dhcp_recv+0x17e>
 801123c:	69fb      	ldr	r3, [r7, #28]
 801123e:	795b      	ldrb	r3, [r3, #5]
 8011240:	2b06      	cmp	r3, #6
 8011242:	d112      	bne.n	801126a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8011244:	6979      	ldr	r1, [r7, #20]
 8011246:	6a38      	ldr	r0, [r7, #32]
 8011248:	f7fe fb7e 	bl	800f948 <dhcp_handle_offer>
 801124c:	e00e      	b.n	801126c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801124e:	bf00      	nop
 8011250:	e00c      	b.n	801126c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011252:	bf00      	nop
 8011254:	e00a      	b.n	801126c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011256:	bf00      	nop
 8011258:	e008      	b.n	801126c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801125a:	bf00      	nop
 801125c:	e006      	b.n	801126c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801125e:	bf00      	nop
 8011260:	e004      	b.n	801126c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011262:	bf00      	nop
 8011264:	e002      	b.n	801126c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011266:	bf00      	nop
 8011268:	e000      	b.n	801126c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801126a:	bf00      	nop
  pbuf_free(p);
 801126c:	6878      	ldr	r0, [r7, #4]
 801126e:	f7f8 f8a1 	bl	80093b4 <pbuf_free>
}
 8011272:	bf00      	nop
 8011274:	3728      	adds	r7, #40	; 0x28
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}
 801127a:	bf00      	nop
 801127c:	20005770 	.word	0x20005770
 8011280:	2000af40 	.word	0x2000af40
 8011284:	2000af20 	.word	0x2000af20

08011288 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b088      	sub	sp, #32
 801128c:	af00      	add	r7, sp, #0
 801128e:	60f8      	str	r0, [r7, #12]
 8011290:	60b9      	str	r1, [r7, #8]
 8011292:	603b      	str	r3, [r7, #0]
 8011294:	4613      	mov	r3, r2
 8011296:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d108      	bne.n	80112b0 <dhcp_create_msg+0x28>
 801129e:	4b5f      	ldr	r3, [pc, #380]	; (801141c <dhcp_create_msg+0x194>)
 80112a0:	f240 7269 	movw	r2, #1897	; 0x769
 80112a4:	495e      	ldr	r1, [pc, #376]	; (8011420 <dhcp_create_msg+0x198>)
 80112a6:	485f      	ldr	r0, [pc, #380]	; (8011424 <dhcp_create_msg+0x19c>)
 80112a8:	f002 fcda 	bl	8013c60 <iprintf>
 80112ac:	2300      	movs	r3, #0
 80112ae:	e0b1      	b.n	8011414 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80112b0:	68bb      	ldr	r3, [r7, #8]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d108      	bne.n	80112c8 <dhcp_create_msg+0x40>
 80112b6:	4b59      	ldr	r3, [pc, #356]	; (801141c <dhcp_create_msg+0x194>)
 80112b8:	f240 726a 	movw	r2, #1898	; 0x76a
 80112bc:	495a      	ldr	r1, [pc, #360]	; (8011428 <dhcp_create_msg+0x1a0>)
 80112be:	4859      	ldr	r0, [pc, #356]	; (8011424 <dhcp_create_msg+0x19c>)
 80112c0:	f002 fcce 	bl	8013c60 <iprintf>
 80112c4:	2300      	movs	r3, #0
 80112c6:	e0a5      	b.n	8011414 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80112c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80112cc:	f44f 719a 	mov.w	r1, #308	; 0x134
 80112d0:	2036      	movs	r0, #54	; 0x36
 80112d2:	f7f7 fd8b 	bl	8008dec <pbuf_alloc>
 80112d6:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80112d8:	69bb      	ldr	r3, [r7, #24]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d101      	bne.n	80112e2 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80112de:	2300      	movs	r3, #0
 80112e0:	e098      	b.n	8011414 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80112e2:	69bb      	ldr	r3, [r7, #24]
 80112e4:	895b      	ldrh	r3, [r3, #10]
 80112e6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80112ea:	d206      	bcs.n	80112fa <dhcp_create_msg+0x72>
 80112ec:	4b4b      	ldr	r3, [pc, #300]	; (801141c <dhcp_create_msg+0x194>)
 80112ee:	f240 7271 	movw	r2, #1905	; 0x771
 80112f2:	494e      	ldr	r1, [pc, #312]	; (801142c <dhcp_create_msg+0x1a4>)
 80112f4:	484b      	ldr	r0, [pc, #300]	; (8011424 <dhcp_create_msg+0x19c>)
 80112f6:	f002 fcb3 	bl	8013c60 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80112fa:	79fb      	ldrb	r3, [r7, #7]
 80112fc:	2b03      	cmp	r3, #3
 80112fe:	d103      	bne.n	8011308 <dhcp_create_msg+0x80>
 8011300:	68bb      	ldr	r3, [r7, #8]
 8011302:	795b      	ldrb	r3, [r3, #5]
 8011304:	2b03      	cmp	r3, #3
 8011306:	d10d      	bne.n	8011324 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	799b      	ldrb	r3, [r3, #6]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d105      	bne.n	801131c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8011310:	f002 fcbe 	bl	8013c90 <rand>
 8011314:	4603      	mov	r3, r0
 8011316:	461a      	mov	r2, r3
 8011318:	4b45      	ldr	r3, [pc, #276]	; (8011430 <dhcp_create_msg+0x1a8>)
 801131a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801131c:	4b44      	ldr	r3, [pc, #272]	; (8011430 <dhcp_create_msg+0x1a8>)
 801131e:	681a      	ldr	r2, [r3, #0]
 8011320:	68bb      	ldr	r3, [r7, #8]
 8011322:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8011324:	69bb      	ldr	r3, [r7, #24]
 8011326:	685b      	ldr	r3, [r3, #4]
 8011328:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801132a:	f44f 729a 	mov.w	r2, #308	; 0x134
 801132e:	2100      	movs	r1, #0
 8011330:	6978      	ldr	r0, [r7, #20]
 8011332:	f002 fc8d 	bl	8013c50 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8011336:	697b      	ldr	r3, [r7, #20]
 8011338:	2201      	movs	r2, #1
 801133a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801133c:	697b      	ldr	r3, [r7, #20]
 801133e:	2201      	movs	r2, #1
 8011340:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8011348:	697b      	ldr	r3, [r7, #20]
 801134a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	4618      	mov	r0, r3
 8011352:	f7f6 fcda 	bl	8007d0a <lwip_htonl>
 8011356:	4602      	mov	r2, r0
 8011358:	697b      	ldr	r3, [r7, #20]
 801135a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801135c:	79fb      	ldrb	r3, [r7, #7]
 801135e:	2b08      	cmp	r3, #8
 8011360:	d010      	beq.n	8011384 <dhcp_create_msg+0xfc>
 8011362:	79fb      	ldrb	r3, [r7, #7]
 8011364:	2b04      	cmp	r3, #4
 8011366:	d00d      	beq.n	8011384 <dhcp_create_msg+0xfc>
 8011368:	79fb      	ldrb	r3, [r7, #7]
 801136a:	2b07      	cmp	r3, #7
 801136c:	d00a      	beq.n	8011384 <dhcp_create_msg+0xfc>
 801136e:	79fb      	ldrb	r3, [r7, #7]
 8011370:	2b03      	cmp	r3, #3
 8011372:	d10c      	bne.n	801138e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8011378:	2b05      	cmp	r3, #5
 801137a:	d003      	beq.n	8011384 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801137c:	68bb      	ldr	r3, [r7, #8]
 801137e:	795b      	ldrb	r3, [r3, #5]
 8011380:	2b04      	cmp	r3, #4
 8011382:	d104      	bne.n	801138e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	3304      	adds	r3, #4
 8011388:	681a      	ldr	r2, [r3, #0]
 801138a:	697b      	ldr	r3, [r7, #20]
 801138c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801138e:	2300      	movs	r3, #0
 8011390:	83fb      	strh	r3, [r7, #30]
 8011392:	e00c      	b.n	80113ae <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8011394:	8bfa      	ldrh	r2, [r7, #30]
 8011396:	8bfb      	ldrh	r3, [r7, #30]
 8011398:	68f9      	ldr	r1, [r7, #12]
 801139a:	440a      	add	r2, r1
 801139c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80113a0:	697a      	ldr	r2, [r7, #20]
 80113a2:	4413      	add	r3, r2
 80113a4:	460a      	mov	r2, r1
 80113a6:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80113a8:	8bfb      	ldrh	r3, [r7, #30]
 80113aa:	3301      	adds	r3, #1
 80113ac:	83fb      	strh	r3, [r7, #30]
 80113ae:	8bfb      	ldrh	r3, [r7, #30]
 80113b0:	2b05      	cmp	r3, #5
 80113b2:	d9ef      	bls.n	8011394 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80113b4:	697b      	ldr	r3, [r7, #20]
 80113b6:	2200      	movs	r2, #0
 80113b8:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80113bc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80113c0:	2200      	movs	r2, #0
 80113c2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80113c6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80113ca:	2200      	movs	r2, #0
 80113cc:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80113d0:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80113d4:	2200      	movs	r2, #0
 80113d6:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80113da:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80113de:	697b      	ldr	r3, [r7, #20]
 80113e0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80113e4:	2301      	movs	r3, #1
 80113e6:	2235      	movs	r2, #53	; 0x35
 80113e8:	2000      	movs	r0, #0
 80113ea:	f7ff fadb 	bl	80109a4 <dhcp_option>
 80113ee:	4603      	mov	r3, r0
 80113f0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80113f2:	697b      	ldr	r3, [r7, #20]
 80113f4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80113f8:	79fa      	ldrb	r2, [r7, #7]
 80113fa:	8a7b      	ldrh	r3, [r7, #18]
 80113fc:	4618      	mov	r0, r3
 80113fe:	f7ff fb05 	bl	8010a0c <dhcp_option_byte>
 8011402:	4603      	mov	r3, r0
 8011404:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d002      	beq.n	8011412 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	8a7a      	ldrh	r2, [r7, #18]
 8011410:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8011412:	69bb      	ldr	r3, [r7, #24]
}
 8011414:	4618      	mov	r0, r3
 8011416:	3720      	adds	r7, #32
 8011418:	46bd      	mov	sp, r7
 801141a:	bd80      	pop	{r7, pc}
 801141c:	080171b8 	.word	0x080171b8
 8011420:	080174d8 	.word	0x080174d8
 8011424:	08017218 	.word	0x08017218
 8011428:	080174f8 	.word	0x080174f8
 801142c:	08017518 	.word	0x08017518
 8011430:	2000af50 	.word	0x2000af50

08011434 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b084      	sub	sp, #16
 8011438:	af00      	add	r7, sp, #0
 801143a:	4603      	mov	r3, r0
 801143c:	60b9      	str	r1, [r7, #8]
 801143e:	607a      	str	r2, [r7, #4]
 8011440:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8011442:	89fb      	ldrh	r3, [r7, #14]
 8011444:	1c5a      	adds	r2, r3, #1
 8011446:	81fa      	strh	r2, [r7, #14]
 8011448:	461a      	mov	r2, r3
 801144a:	68bb      	ldr	r3, [r7, #8]
 801144c:	4413      	add	r3, r2
 801144e:	22ff      	movs	r2, #255	; 0xff
 8011450:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8011452:	e007      	b.n	8011464 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8011454:	89fb      	ldrh	r3, [r7, #14]
 8011456:	1c5a      	adds	r2, r3, #1
 8011458:	81fa      	strh	r2, [r7, #14]
 801145a:	461a      	mov	r2, r3
 801145c:	68bb      	ldr	r3, [r7, #8]
 801145e:	4413      	add	r3, r2
 8011460:	2200      	movs	r2, #0
 8011462:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8011464:	89fb      	ldrh	r3, [r7, #14]
 8011466:	2b43      	cmp	r3, #67	; 0x43
 8011468:	d904      	bls.n	8011474 <dhcp_option_trailer+0x40>
 801146a:	89fb      	ldrh	r3, [r7, #14]
 801146c:	f003 0303 	and.w	r3, r3, #3
 8011470:	2b00      	cmp	r3, #0
 8011472:	d002      	beq.n	801147a <dhcp_option_trailer+0x46>
 8011474:	89fb      	ldrh	r3, [r7, #14]
 8011476:	2b43      	cmp	r3, #67	; 0x43
 8011478:	d9ec      	bls.n	8011454 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801147a:	89fb      	ldrh	r3, [r7, #14]
 801147c:	33f0      	adds	r3, #240	; 0xf0
 801147e:	b29b      	uxth	r3, r3
 8011480:	4619      	mov	r1, r3
 8011482:	6878      	ldr	r0, [r7, #4]
 8011484:	f7f7 fe10 	bl	80090a8 <pbuf_realloc>
}
 8011488:	bf00      	nop
 801148a:	3710      	adds	r7, #16
 801148c:	46bd      	mov	sp, r7
 801148e:	bd80      	pop	{r7, pc}

08011490 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8011490:	b480      	push	{r7}
 8011492:	b085      	sub	sp, #20
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d017      	beq.n	80114ce <dhcp_supplied_address+0x3e>
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d013      	beq.n	80114ce <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114aa:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	795b      	ldrb	r3, [r3, #5]
 80114b0:	2b0a      	cmp	r3, #10
 80114b2:	d007      	beq.n	80114c4 <dhcp_supplied_address+0x34>
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	795b      	ldrb	r3, [r3, #5]
 80114b8:	2b05      	cmp	r3, #5
 80114ba:	d003      	beq.n	80114c4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80114c0:	2b04      	cmp	r3, #4
 80114c2:	d101      	bne.n	80114c8 <dhcp_supplied_address+0x38>
 80114c4:	2301      	movs	r3, #1
 80114c6:	e000      	b.n	80114ca <dhcp_supplied_address+0x3a>
 80114c8:	2300      	movs	r3, #0
 80114ca:	b2db      	uxtb	r3, r3
 80114cc:	e000      	b.n	80114d0 <dhcp_supplied_address+0x40>
  }
  return 0;
 80114ce:	2300      	movs	r3, #0
}
 80114d0:	4618      	mov	r0, r3
 80114d2:	3714      	adds	r7, #20
 80114d4:	46bd      	mov	sp, r7
 80114d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114da:	4770      	bx	lr

080114dc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b082      	sub	sp, #8
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80114e4:	4915      	ldr	r1, [pc, #84]	; (801153c <etharp_free_entry+0x60>)
 80114e6:	687a      	ldr	r2, [r7, #4]
 80114e8:	4613      	mov	r3, r2
 80114ea:	005b      	lsls	r3, r3, #1
 80114ec:	4413      	add	r3, r2
 80114ee:	00db      	lsls	r3, r3, #3
 80114f0:	440b      	add	r3, r1
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d013      	beq.n	8011520 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80114f8:	4910      	ldr	r1, [pc, #64]	; (801153c <etharp_free_entry+0x60>)
 80114fa:	687a      	ldr	r2, [r7, #4]
 80114fc:	4613      	mov	r3, r2
 80114fe:	005b      	lsls	r3, r3, #1
 8011500:	4413      	add	r3, r2
 8011502:	00db      	lsls	r3, r3, #3
 8011504:	440b      	add	r3, r1
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	4618      	mov	r0, r3
 801150a:	f7f7 ff53 	bl	80093b4 <pbuf_free>
    arp_table[i].q = NULL;
 801150e:	490b      	ldr	r1, [pc, #44]	; (801153c <etharp_free_entry+0x60>)
 8011510:	687a      	ldr	r2, [r7, #4]
 8011512:	4613      	mov	r3, r2
 8011514:	005b      	lsls	r3, r3, #1
 8011516:	4413      	add	r3, r2
 8011518:	00db      	lsls	r3, r3, #3
 801151a:	440b      	add	r3, r1
 801151c:	2200      	movs	r2, #0
 801151e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011520:	4906      	ldr	r1, [pc, #24]	; (801153c <etharp_free_entry+0x60>)
 8011522:	687a      	ldr	r2, [r7, #4]
 8011524:	4613      	mov	r3, r2
 8011526:	005b      	lsls	r3, r3, #1
 8011528:	4413      	add	r3, r2
 801152a:	00db      	lsls	r3, r3, #3
 801152c:	440b      	add	r3, r1
 801152e:	3314      	adds	r3, #20
 8011530:	2200      	movs	r2, #0
 8011532:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011534:	bf00      	nop
 8011536:	3708      	adds	r7, #8
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}
 801153c:	2000af54 	.word	0x2000af54

08011540 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b082      	sub	sp, #8
 8011544:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011546:	2300      	movs	r3, #0
 8011548:	607b      	str	r3, [r7, #4]
 801154a:	e096      	b.n	801167a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801154c:	494f      	ldr	r1, [pc, #316]	; (801168c <etharp_tmr+0x14c>)
 801154e:	687a      	ldr	r2, [r7, #4]
 8011550:	4613      	mov	r3, r2
 8011552:	005b      	lsls	r3, r3, #1
 8011554:	4413      	add	r3, r2
 8011556:	00db      	lsls	r3, r3, #3
 8011558:	440b      	add	r3, r1
 801155a:	3314      	adds	r3, #20
 801155c:	781b      	ldrb	r3, [r3, #0]
 801155e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011560:	78fb      	ldrb	r3, [r7, #3]
 8011562:	2b00      	cmp	r3, #0
 8011564:	f000 8086 	beq.w	8011674 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011568:	4948      	ldr	r1, [pc, #288]	; (801168c <etharp_tmr+0x14c>)
 801156a:	687a      	ldr	r2, [r7, #4]
 801156c:	4613      	mov	r3, r2
 801156e:	005b      	lsls	r3, r3, #1
 8011570:	4413      	add	r3, r2
 8011572:	00db      	lsls	r3, r3, #3
 8011574:	440b      	add	r3, r1
 8011576:	3312      	adds	r3, #18
 8011578:	881b      	ldrh	r3, [r3, #0]
 801157a:	3301      	adds	r3, #1
 801157c:	b298      	uxth	r0, r3
 801157e:	4943      	ldr	r1, [pc, #268]	; (801168c <etharp_tmr+0x14c>)
 8011580:	687a      	ldr	r2, [r7, #4]
 8011582:	4613      	mov	r3, r2
 8011584:	005b      	lsls	r3, r3, #1
 8011586:	4413      	add	r3, r2
 8011588:	00db      	lsls	r3, r3, #3
 801158a:	440b      	add	r3, r1
 801158c:	3312      	adds	r3, #18
 801158e:	4602      	mov	r2, r0
 8011590:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011592:	493e      	ldr	r1, [pc, #248]	; (801168c <etharp_tmr+0x14c>)
 8011594:	687a      	ldr	r2, [r7, #4]
 8011596:	4613      	mov	r3, r2
 8011598:	005b      	lsls	r3, r3, #1
 801159a:	4413      	add	r3, r2
 801159c:	00db      	lsls	r3, r3, #3
 801159e:	440b      	add	r3, r1
 80115a0:	3312      	adds	r3, #18
 80115a2:	881b      	ldrh	r3, [r3, #0]
 80115a4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80115a8:	d215      	bcs.n	80115d6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80115aa:	4938      	ldr	r1, [pc, #224]	; (801168c <etharp_tmr+0x14c>)
 80115ac:	687a      	ldr	r2, [r7, #4]
 80115ae:	4613      	mov	r3, r2
 80115b0:	005b      	lsls	r3, r3, #1
 80115b2:	4413      	add	r3, r2
 80115b4:	00db      	lsls	r3, r3, #3
 80115b6:	440b      	add	r3, r1
 80115b8:	3314      	adds	r3, #20
 80115ba:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80115bc:	2b01      	cmp	r3, #1
 80115be:	d10e      	bne.n	80115de <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80115c0:	4932      	ldr	r1, [pc, #200]	; (801168c <etharp_tmr+0x14c>)
 80115c2:	687a      	ldr	r2, [r7, #4]
 80115c4:	4613      	mov	r3, r2
 80115c6:	005b      	lsls	r3, r3, #1
 80115c8:	4413      	add	r3, r2
 80115ca:	00db      	lsls	r3, r3, #3
 80115cc:	440b      	add	r3, r1
 80115ce:	3312      	adds	r3, #18
 80115d0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80115d2:	2b04      	cmp	r3, #4
 80115d4:	d903      	bls.n	80115de <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80115d6:	6878      	ldr	r0, [r7, #4]
 80115d8:	f7ff ff80 	bl	80114dc <etharp_free_entry>
 80115dc:	e04a      	b.n	8011674 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80115de:	492b      	ldr	r1, [pc, #172]	; (801168c <etharp_tmr+0x14c>)
 80115e0:	687a      	ldr	r2, [r7, #4]
 80115e2:	4613      	mov	r3, r2
 80115e4:	005b      	lsls	r3, r3, #1
 80115e6:	4413      	add	r3, r2
 80115e8:	00db      	lsls	r3, r3, #3
 80115ea:	440b      	add	r3, r1
 80115ec:	3314      	adds	r3, #20
 80115ee:	781b      	ldrb	r3, [r3, #0]
 80115f0:	2b03      	cmp	r3, #3
 80115f2:	d10a      	bne.n	801160a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80115f4:	4925      	ldr	r1, [pc, #148]	; (801168c <etharp_tmr+0x14c>)
 80115f6:	687a      	ldr	r2, [r7, #4]
 80115f8:	4613      	mov	r3, r2
 80115fa:	005b      	lsls	r3, r3, #1
 80115fc:	4413      	add	r3, r2
 80115fe:	00db      	lsls	r3, r3, #3
 8011600:	440b      	add	r3, r1
 8011602:	3314      	adds	r3, #20
 8011604:	2204      	movs	r2, #4
 8011606:	701a      	strb	r2, [r3, #0]
 8011608:	e034      	b.n	8011674 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801160a:	4920      	ldr	r1, [pc, #128]	; (801168c <etharp_tmr+0x14c>)
 801160c:	687a      	ldr	r2, [r7, #4]
 801160e:	4613      	mov	r3, r2
 8011610:	005b      	lsls	r3, r3, #1
 8011612:	4413      	add	r3, r2
 8011614:	00db      	lsls	r3, r3, #3
 8011616:	440b      	add	r3, r1
 8011618:	3314      	adds	r3, #20
 801161a:	781b      	ldrb	r3, [r3, #0]
 801161c:	2b04      	cmp	r3, #4
 801161e:	d10a      	bne.n	8011636 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011620:	491a      	ldr	r1, [pc, #104]	; (801168c <etharp_tmr+0x14c>)
 8011622:	687a      	ldr	r2, [r7, #4]
 8011624:	4613      	mov	r3, r2
 8011626:	005b      	lsls	r3, r3, #1
 8011628:	4413      	add	r3, r2
 801162a:	00db      	lsls	r3, r3, #3
 801162c:	440b      	add	r3, r1
 801162e:	3314      	adds	r3, #20
 8011630:	2202      	movs	r2, #2
 8011632:	701a      	strb	r2, [r3, #0]
 8011634:	e01e      	b.n	8011674 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011636:	4915      	ldr	r1, [pc, #84]	; (801168c <etharp_tmr+0x14c>)
 8011638:	687a      	ldr	r2, [r7, #4]
 801163a:	4613      	mov	r3, r2
 801163c:	005b      	lsls	r3, r3, #1
 801163e:	4413      	add	r3, r2
 8011640:	00db      	lsls	r3, r3, #3
 8011642:	440b      	add	r3, r1
 8011644:	3314      	adds	r3, #20
 8011646:	781b      	ldrb	r3, [r3, #0]
 8011648:	2b01      	cmp	r3, #1
 801164a:	d113      	bne.n	8011674 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801164c:	490f      	ldr	r1, [pc, #60]	; (801168c <etharp_tmr+0x14c>)
 801164e:	687a      	ldr	r2, [r7, #4]
 8011650:	4613      	mov	r3, r2
 8011652:	005b      	lsls	r3, r3, #1
 8011654:	4413      	add	r3, r2
 8011656:	00db      	lsls	r3, r3, #3
 8011658:	440b      	add	r3, r1
 801165a:	3308      	adds	r3, #8
 801165c:	6818      	ldr	r0, [r3, #0]
 801165e:	687a      	ldr	r2, [r7, #4]
 8011660:	4613      	mov	r3, r2
 8011662:	005b      	lsls	r3, r3, #1
 8011664:	4413      	add	r3, r2
 8011666:	00db      	lsls	r3, r3, #3
 8011668:	4a08      	ldr	r2, [pc, #32]	; (801168c <etharp_tmr+0x14c>)
 801166a:	4413      	add	r3, r2
 801166c:	3304      	adds	r3, #4
 801166e:	4619      	mov	r1, r3
 8011670:	f000 fe72 	bl	8012358 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	3301      	adds	r3, #1
 8011678:	607b      	str	r3, [r7, #4]
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	2b09      	cmp	r3, #9
 801167e:	f77f af65 	ble.w	801154c <etharp_tmr+0xc>
      }
    }
  }
}
 8011682:	bf00      	nop
 8011684:	bf00      	nop
 8011686:	3708      	adds	r7, #8
 8011688:	46bd      	mov	sp, r7
 801168a:	bd80      	pop	{r7, pc}
 801168c:	2000af54 	.word	0x2000af54

08011690 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b08a      	sub	sp, #40	; 0x28
 8011694:	af00      	add	r7, sp, #0
 8011696:	60f8      	str	r0, [r7, #12]
 8011698:	460b      	mov	r3, r1
 801169a:	607a      	str	r2, [r7, #4]
 801169c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801169e:	230a      	movs	r3, #10
 80116a0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80116a2:	230a      	movs	r3, #10
 80116a4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80116a6:	230a      	movs	r3, #10
 80116a8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80116aa:	2300      	movs	r3, #0
 80116ac:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80116ae:	230a      	movs	r3, #10
 80116b0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80116b2:	2300      	movs	r3, #0
 80116b4:	83bb      	strh	r3, [r7, #28]
 80116b6:	2300      	movs	r3, #0
 80116b8:	837b      	strh	r3, [r7, #26]
 80116ba:	2300      	movs	r3, #0
 80116bc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80116be:	2300      	movs	r3, #0
 80116c0:	843b      	strh	r3, [r7, #32]
 80116c2:	e0ae      	b.n	8011822 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80116c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80116c8:	49a6      	ldr	r1, [pc, #664]	; (8011964 <etharp_find_entry+0x2d4>)
 80116ca:	4613      	mov	r3, r2
 80116cc:	005b      	lsls	r3, r3, #1
 80116ce:	4413      	add	r3, r2
 80116d0:	00db      	lsls	r3, r3, #3
 80116d2:	440b      	add	r3, r1
 80116d4:	3314      	adds	r3, #20
 80116d6:	781b      	ldrb	r3, [r3, #0]
 80116d8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80116da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80116de:	2b0a      	cmp	r3, #10
 80116e0:	d105      	bne.n	80116ee <etharp_find_entry+0x5e>
 80116e2:	7dfb      	ldrb	r3, [r7, #23]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d102      	bne.n	80116ee <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80116e8:	8c3b      	ldrh	r3, [r7, #32]
 80116ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80116ec:	e095      	b.n	801181a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80116ee:	7dfb      	ldrb	r3, [r7, #23]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	f000 8092 	beq.w	801181a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80116f6:	7dfb      	ldrb	r3, [r7, #23]
 80116f8:	2b01      	cmp	r3, #1
 80116fa:	d009      	beq.n	8011710 <etharp_find_entry+0x80>
 80116fc:	7dfb      	ldrb	r3, [r7, #23]
 80116fe:	2b01      	cmp	r3, #1
 8011700:	d806      	bhi.n	8011710 <etharp_find_entry+0x80>
 8011702:	4b99      	ldr	r3, [pc, #612]	; (8011968 <etharp_find_entry+0x2d8>)
 8011704:	f240 1223 	movw	r2, #291	; 0x123
 8011708:	4998      	ldr	r1, [pc, #608]	; (801196c <etharp_find_entry+0x2dc>)
 801170a:	4899      	ldr	r0, [pc, #612]	; (8011970 <etharp_find_entry+0x2e0>)
 801170c:	f002 faa8 	bl	8013c60 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d020      	beq.n	8011758 <etharp_find_entry+0xc8>
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	6819      	ldr	r1, [r3, #0]
 801171a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801171e:	4891      	ldr	r0, [pc, #580]	; (8011964 <etharp_find_entry+0x2d4>)
 8011720:	4613      	mov	r3, r2
 8011722:	005b      	lsls	r3, r3, #1
 8011724:	4413      	add	r3, r2
 8011726:	00db      	lsls	r3, r3, #3
 8011728:	4403      	add	r3, r0
 801172a:	3304      	adds	r3, #4
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	4299      	cmp	r1, r3
 8011730:	d112      	bne.n	8011758 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d00c      	beq.n	8011752 <etharp_find_entry+0xc2>
 8011738:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801173c:	4989      	ldr	r1, [pc, #548]	; (8011964 <etharp_find_entry+0x2d4>)
 801173e:	4613      	mov	r3, r2
 8011740:	005b      	lsls	r3, r3, #1
 8011742:	4413      	add	r3, r2
 8011744:	00db      	lsls	r3, r3, #3
 8011746:	440b      	add	r3, r1
 8011748:	3308      	adds	r3, #8
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	687a      	ldr	r2, [r7, #4]
 801174e:	429a      	cmp	r2, r3
 8011750:	d102      	bne.n	8011758 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011752:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011756:	e100      	b.n	801195a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011758:	7dfb      	ldrb	r3, [r7, #23]
 801175a:	2b01      	cmp	r3, #1
 801175c:	d140      	bne.n	80117e0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801175e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011762:	4980      	ldr	r1, [pc, #512]	; (8011964 <etharp_find_entry+0x2d4>)
 8011764:	4613      	mov	r3, r2
 8011766:	005b      	lsls	r3, r3, #1
 8011768:	4413      	add	r3, r2
 801176a:	00db      	lsls	r3, r3, #3
 801176c:	440b      	add	r3, r1
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d01a      	beq.n	80117aa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011774:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011778:	497a      	ldr	r1, [pc, #488]	; (8011964 <etharp_find_entry+0x2d4>)
 801177a:	4613      	mov	r3, r2
 801177c:	005b      	lsls	r3, r3, #1
 801177e:	4413      	add	r3, r2
 8011780:	00db      	lsls	r3, r3, #3
 8011782:	440b      	add	r3, r1
 8011784:	3312      	adds	r3, #18
 8011786:	881b      	ldrh	r3, [r3, #0]
 8011788:	8bba      	ldrh	r2, [r7, #28]
 801178a:	429a      	cmp	r2, r3
 801178c:	d845      	bhi.n	801181a <etharp_find_entry+0x18a>
            old_queue = i;
 801178e:	8c3b      	ldrh	r3, [r7, #32]
 8011790:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011792:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011796:	4973      	ldr	r1, [pc, #460]	; (8011964 <etharp_find_entry+0x2d4>)
 8011798:	4613      	mov	r3, r2
 801179a:	005b      	lsls	r3, r3, #1
 801179c:	4413      	add	r3, r2
 801179e:	00db      	lsls	r3, r3, #3
 80117a0:	440b      	add	r3, r1
 80117a2:	3312      	adds	r3, #18
 80117a4:	881b      	ldrh	r3, [r3, #0]
 80117a6:	83bb      	strh	r3, [r7, #28]
 80117a8:	e037      	b.n	801181a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80117aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80117ae:	496d      	ldr	r1, [pc, #436]	; (8011964 <etharp_find_entry+0x2d4>)
 80117b0:	4613      	mov	r3, r2
 80117b2:	005b      	lsls	r3, r3, #1
 80117b4:	4413      	add	r3, r2
 80117b6:	00db      	lsls	r3, r3, #3
 80117b8:	440b      	add	r3, r1
 80117ba:	3312      	adds	r3, #18
 80117bc:	881b      	ldrh	r3, [r3, #0]
 80117be:	8b7a      	ldrh	r2, [r7, #26]
 80117c0:	429a      	cmp	r2, r3
 80117c2:	d82a      	bhi.n	801181a <etharp_find_entry+0x18a>
            old_pending = i;
 80117c4:	8c3b      	ldrh	r3, [r7, #32]
 80117c6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80117c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80117cc:	4965      	ldr	r1, [pc, #404]	; (8011964 <etharp_find_entry+0x2d4>)
 80117ce:	4613      	mov	r3, r2
 80117d0:	005b      	lsls	r3, r3, #1
 80117d2:	4413      	add	r3, r2
 80117d4:	00db      	lsls	r3, r3, #3
 80117d6:	440b      	add	r3, r1
 80117d8:	3312      	adds	r3, #18
 80117da:	881b      	ldrh	r3, [r3, #0]
 80117dc:	837b      	strh	r3, [r7, #26]
 80117de:	e01c      	b.n	801181a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80117e0:	7dfb      	ldrb	r3, [r7, #23]
 80117e2:	2b01      	cmp	r3, #1
 80117e4:	d919      	bls.n	801181a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80117e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80117ea:	495e      	ldr	r1, [pc, #376]	; (8011964 <etharp_find_entry+0x2d4>)
 80117ec:	4613      	mov	r3, r2
 80117ee:	005b      	lsls	r3, r3, #1
 80117f0:	4413      	add	r3, r2
 80117f2:	00db      	lsls	r3, r3, #3
 80117f4:	440b      	add	r3, r1
 80117f6:	3312      	adds	r3, #18
 80117f8:	881b      	ldrh	r3, [r3, #0]
 80117fa:	8b3a      	ldrh	r2, [r7, #24]
 80117fc:	429a      	cmp	r2, r3
 80117fe:	d80c      	bhi.n	801181a <etharp_find_entry+0x18a>
            old_stable = i;
 8011800:	8c3b      	ldrh	r3, [r7, #32]
 8011802:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8011804:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011808:	4956      	ldr	r1, [pc, #344]	; (8011964 <etharp_find_entry+0x2d4>)
 801180a:	4613      	mov	r3, r2
 801180c:	005b      	lsls	r3, r3, #1
 801180e:	4413      	add	r3, r2
 8011810:	00db      	lsls	r3, r3, #3
 8011812:	440b      	add	r3, r1
 8011814:	3312      	adds	r3, #18
 8011816:	881b      	ldrh	r3, [r3, #0]
 8011818:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801181a:	8c3b      	ldrh	r3, [r7, #32]
 801181c:	3301      	adds	r3, #1
 801181e:	b29b      	uxth	r3, r3
 8011820:	843b      	strh	r3, [r7, #32]
 8011822:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011826:	2b09      	cmp	r3, #9
 8011828:	f77f af4c 	ble.w	80116c4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801182c:	7afb      	ldrb	r3, [r7, #11]
 801182e:	f003 0302 	and.w	r3, r3, #2
 8011832:	2b00      	cmp	r3, #0
 8011834:	d108      	bne.n	8011848 <etharp_find_entry+0x1b8>
 8011836:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801183a:	2b0a      	cmp	r3, #10
 801183c:	d107      	bne.n	801184e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801183e:	7afb      	ldrb	r3, [r7, #11]
 8011840:	f003 0301 	and.w	r3, r3, #1
 8011844:	2b00      	cmp	r3, #0
 8011846:	d102      	bne.n	801184e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011848:	f04f 33ff 	mov.w	r3, #4294967295
 801184c:	e085      	b.n	801195a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801184e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011852:	2b09      	cmp	r3, #9
 8011854:	dc02      	bgt.n	801185c <etharp_find_entry+0x1cc>
    i = empty;
 8011856:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011858:	843b      	strh	r3, [r7, #32]
 801185a:	e039      	b.n	80118d0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801185c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011860:	2b09      	cmp	r3, #9
 8011862:	dc14      	bgt.n	801188e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011864:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011866:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011868:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801186c:	493d      	ldr	r1, [pc, #244]	; (8011964 <etharp_find_entry+0x2d4>)
 801186e:	4613      	mov	r3, r2
 8011870:	005b      	lsls	r3, r3, #1
 8011872:	4413      	add	r3, r2
 8011874:	00db      	lsls	r3, r3, #3
 8011876:	440b      	add	r3, r1
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d018      	beq.n	80118b0 <etharp_find_entry+0x220>
 801187e:	4b3a      	ldr	r3, [pc, #232]	; (8011968 <etharp_find_entry+0x2d8>)
 8011880:	f240 126d 	movw	r2, #365	; 0x16d
 8011884:	493b      	ldr	r1, [pc, #236]	; (8011974 <etharp_find_entry+0x2e4>)
 8011886:	483a      	ldr	r0, [pc, #232]	; (8011970 <etharp_find_entry+0x2e0>)
 8011888:	f002 f9ea 	bl	8013c60 <iprintf>
 801188c:	e010      	b.n	80118b0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801188e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011892:	2b09      	cmp	r3, #9
 8011894:	dc02      	bgt.n	801189c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011896:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011898:	843b      	strh	r3, [r7, #32]
 801189a:	e009      	b.n	80118b0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801189c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80118a0:	2b09      	cmp	r3, #9
 80118a2:	dc02      	bgt.n	80118aa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80118a4:	8bfb      	ldrh	r3, [r7, #30]
 80118a6:	843b      	strh	r3, [r7, #32]
 80118a8:	e002      	b.n	80118b0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80118aa:	f04f 33ff 	mov.w	r3, #4294967295
 80118ae:	e054      	b.n	801195a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80118b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80118b4:	2b09      	cmp	r3, #9
 80118b6:	dd06      	ble.n	80118c6 <etharp_find_entry+0x236>
 80118b8:	4b2b      	ldr	r3, [pc, #172]	; (8011968 <etharp_find_entry+0x2d8>)
 80118ba:	f240 127f 	movw	r2, #383	; 0x17f
 80118be:	492e      	ldr	r1, [pc, #184]	; (8011978 <etharp_find_entry+0x2e8>)
 80118c0:	482b      	ldr	r0, [pc, #172]	; (8011970 <etharp_find_entry+0x2e0>)
 80118c2:	f002 f9cd 	bl	8013c60 <iprintf>
    etharp_free_entry(i);
 80118c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80118ca:	4618      	mov	r0, r3
 80118cc:	f7ff fe06 	bl	80114dc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80118d0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80118d4:	2b09      	cmp	r3, #9
 80118d6:	dd06      	ble.n	80118e6 <etharp_find_entry+0x256>
 80118d8:	4b23      	ldr	r3, [pc, #140]	; (8011968 <etharp_find_entry+0x2d8>)
 80118da:	f240 1283 	movw	r2, #387	; 0x183
 80118de:	4926      	ldr	r1, [pc, #152]	; (8011978 <etharp_find_entry+0x2e8>)
 80118e0:	4823      	ldr	r0, [pc, #140]	; (8011970 <etharp_find_entry+0x2e0>)
 80118e2:	f002 f9bd 	bl	8013c60 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80118e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80118ea:	491e      	ldr	r1, [pc, #120]	; (8011964 <etharp_find_entry+0x2d4>)
 80118ec:	4613      	mov	r3, r2
 80118ee:	005b      	lsls	r3, r3, #1
 80118f0:	4413      	add	r3, r2
 80118f2:	00db      	lsls	r3, r3, #3
 80118f4:	440b      	add	r3, r1
 80118f6:	3314      	adds	r3, #20
 80118f8:	781b      	ldrb	r3, [r3, #0]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d006      	beq.n	801190c <etharp_find_entry+0x27c>
 80118fe:	4b1a      	ldr	r3, [pc, #104]	; (8011968 <etharp_find_entry+0x2d8>)
 8011900:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8011904:	491d      	ldr	r1, [pc, #116]	; (801197c <etharp_find_entry+0x2ec>)
 8011906:	481a      	ldr	r0, [pc, #104]	; (8011970 <etharp_find_entry+0x2e0>)
 8011908:	f002 f9aa 	bl	8013c60 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d00b      	beq.n	801192a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011912:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	6819      	ldr	r1, [r3, #0]
 801191a:	4812      	ldr	r0, [pc, #72]	; (8011964 <etharp_find_entry+0x2d4>)
 801191c:	4613      	mov	r3, r2
 801191e:	005b      	lsls	r3, r3, #1
 8011920:	4413      	add	r3, r2
 8011922:	00db      	lsls	r3, r3, #3
 8011924:	4403      	add	r3, r0
 8011926:	3304      	adds	r3, #4
 8011928:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801192a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801192e:	490d      	ldr	r1, [pc, #52]	; (8011964 <etharp_find_entry+0x2d4>)
 8011930:	4613      	mov	r3, r2
 8011932:	005b      	lsls	r3, r3, #1
 8011934:	4413      	add	r3, r2
 8011936:	00db      	lsls	r3, r3, #3
 8011938:	440b      	add	r3, r1
 801193a:	3312      	adds	r3, #18
 801193c:	2200      	movs	r2, #0
 801193e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011940:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011944:	4907      	ldr	r1, [pc, #28]	; (8011964 <etharp_find_entry+0x2d4>)
 8011946:	4613      	mov	r3, r2
 8011948:	005b      	lsls	r3, r3, #1
 801194a:	4413      	add	r3, r2
 801194c:	00db      	lsls	r3, r3, #3
 801194e:	440b      	add	r3, r1
 8011950:	3308      	adds	r3, #8
 8011952:	687a      	ldr	r2, [r7, #4]
 8011954:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011956:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801195a:	4618      	mov	r0, r3
 801195c:	3728      	adds	r7, #40	; 0x28
 801195e:	46bd      	mov	sp, r7
 8011960:	bd80      	pop	{r7, pc}
 8011962:	bf00      	nop
 8011964:	2000af54 	.word	0x2000af54
 8011968:	08017558 	.word	0x08017558
 801196c:	08017590 	.word	0x08017590
 8011970:	080175d0 	.word	0x080175d0
 8011974:	080175f8 	.word	0x080175f8
 8011978:	08017610 	.word	0x08017610
 801197c:	08017624 	.word	0x08017624

08011980 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b088      	sub	sp, #32
 8011984:	af02      	add	r7, sp, #8
 8011986:	60f8      	str	r0, [r7, #12]
 8011988:	60b9      	str	r1, [r7, #8]
 801198a:	607a      	str	r2, [r7, #4]
 801198c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011994:	2b06      	cmp	r3, #6
 8011996:	d006      	beq.n	80119a6 <etharp_update_arp_entry+0x26>
 8011998:	4b48      	ldr	r3, [pc, #288]	; (8011abc <etharp_update_arp_entry+0x13c>)
 801199a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801199e:	4948      	ldr	r1, [pc, #288]	; (8011ac0 <etharp_update_arp_entry+0x140>)
 80119a0:	4848      	ldr	r0, [pc, #288]	; (8011ac4 <etharp_update_arp_entry+0x144>)
 80119a2:	f002 f95d 	bl	8013c60 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80119a6:	68bb      	ldr	r3, [r7, #8]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d012      	beq.n	80119d2 <etharp_update_arp_entry+0x52>
 80119ac:	68bb      	ldr	r3, [r7, #8]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d00e      	beq.n	80119d2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80119b4:	68bb      	ldr	r3, [r7, #8]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	68f9      	ldr	r1, [r7, #12]
 80119ba:	4618      	mov	r0, r3
 80119bc:	f001 f920 	bl	8012c00 <ip4_addr_isbroadcast_u32>
 80119c0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d105      	bne.n	80119d2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80119c6:	68bb      	ldr	r3, [r7, #8]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80119ce:	2be0      	cmp	r3, #224	; 0xe0
 80119d0:	d102      	bne.n	80119d8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80119d2:	f06f 030f 	mvn.w	r3, #15
 80119d6:	e06c      	b.n	8011ab2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80119d8:	78fb      	ldrb	r3, [r7, #3]
 80119da:	68fa      	ldr	r2, [r7, #12]
 80119dc:	4619      	mov	r1, r3
 80119de:	68b8      	ldr	r0, [r7, #8]
 80119e0:	f7ff fe56 	bl	8011690 <etharp_find_entry>
 80119e4:	4603      	mov	r3, r0
 80119e6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80119e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	da02      	bge.n	80119f6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80119f0:	8afb      	ldrh	r3, [r7, #22]
 80119f2:	b25b      	sxtb	r3, r3
 80119f4:	e05d      	b.n	8011ab2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80119f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80119fa:	4933      	ldr	r1, [pc, #204]	; (8011ac8 <etharp_update_arp_entry+0x148>)
 80119fc:	4613      	mov	r3, r2
 80119fe:	005b      	lsls	r3, r3, #1
 8011a00:	4413      	add	r3, r2
 8011a02:	00db      	lsls	r3, r3, #3
 8011a04:	440b      	add	r3, r1
 8011a06:	3314      	adds	r3, #20
 8011a08:	2202      	movs	r2, #2
 8011a0a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011a0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011a10:	492d      	ldr	r1, [pc, #180]	; (8011ac8 <etharp_update_arp_entry+0x148>)
 8011a12:	4613      	mov	r3, r2
 8011a14:	005b      	lsls	r3, r3, #1
 8011a16:	4413      	add	r3, r2
 8011a18:	00db      	lsls	r3, r3, #3
 8011a1a:	440b      	add	r3, r1
 8011a1c:	3308      	adds	r3, #8
 8011a1e:	68fa      	ldr	r2, [r7, #12]
 8011a20:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011a22:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011a26:	4613      	mov	r3, r2
 8011a28:	005b      	lsls	r3, r3, #1
 8011a2a:	4413      	add	r3, r2
 8011a2c:	00db      	lsls	r3, r3, #3
 8011a2e:	3308      	adds	r3, #8
 8011a30:	4a25      	ldr	r2, [pc, #148]	; (8011ac8 <etharp_update_arp_entry+0x148>)
 8011a32:	4413      	add	r3, r2
 8011a34:	3304      	adds	r3, #4
 8011a36:	2206      	movs	r2, #6
 8011a38:	6879      	ldr	r1, [r7, #4]
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f002 f8fa 	bl	8013c34 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011a40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011a44:	4920      	ldr	r1, [pc, #128]	; (8011ac8 <etharp_update_arp_entry+0x148>)
 8011a46:	4613      	mov	r3, r2
 8011a48:	005b      	lsls	r3, r3, #1
 8011a4a:	4413      	add	r3, r2
 8011a4c:	00db      	lsls	r3, r3, #3
 8011a4e:	440b      	add	r3, r1
 8011a50:	3312      	adds	r3, #18
 8011a52:	2200      	movs	r2, #0
 8011a54:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011a56:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011a5a:	491b      	ldr	r1, [pc, #108]	; (8011ac8 <etharp_update_arp_entry+0x148>)
 8011a5c:	4613      	mov	r3, r2
 8011a5e:	005b      	lsls	r3, r3, #1
 8011a60:	4413      	add	r3, r2
 8011a62:	00db      	lsls	r3, r3, #3
 8011a64:	440b      	add	r3, r1
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d021      	beq.n	8011ab0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011a6c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011a70:	4915      	ldr	r1, [pc, #84]	; (8011ac8 <etharp_update_arp_entry+0x148>)
 8011a72:	4613      	mov	r3, r2
 8011a74:	005b      	lsls	r3, r3, #1
 8011a76:	4413      	add	r3, r2
 8011a78:	00db      	lsls	r3, r3, #3
 8011a7a:	440b      	add	r3, r1
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011a80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011a84:	4910      	ldr	r1, [pc, #64]	; (8011ac8 <etharp_update_arp_entry+0x148>)
 8011a86:	4613      	mov	r3, r2
 8011a88:	005b      	lsls	r3, r3, #1
 8011a8a:	4413      	add	r3, r2
 8011a8c:	00db      	lsls	r3, r3, #3
 8011a8e:	440b      	add	r3, r1
 8011a90:	2200      	movs	r2, #0
 8011a92:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8011a9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011a9e:	9300      	str	r3, [sp, #0]
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	6939      	ldr	r1, [r7, #16]
 8011aa4:	68f8      	ldr	r0, [r7, #12]
 8011aa6:	f002 f849 	bl	8013b3c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011aaa:	6938      	ldr	r0, [r7, #16]
 8011aac:	f7f7 fc82 	bl	80093b4 <pbuf_free>
  }
  return ERR_OK;
 8011ab0:	2300      	movs	r3, #0
}
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	3718      	adds	r7, #24
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}
 8011aba:	bf00      	nop
 8011abc:	08017558 	.word	0x08017558
 8011ac0:	08017650 	.word	0x08017650
 8011ac4:	080175d0 	.word	0x080175d0
 8011ac8:	2000af54 	.word	0x2000af54

08011acc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b084      	sub	sp, #16
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	60fb      	str	r3, [r7, #12]
 8011ad8:	e01e      	b.n	8011b18 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011ada:	4913      	ldr	r1, [pc, #76]	; (8011b28 <etharp_cleanup_netif+0x5c>)
 8011adc:	68fa      	ldr	r2, [r7, #12]
 8011ade:	4613      	mov	r3, r2
 8011ae0:	005b      	lsls	r3, r3, #1
 8011ae2:	4413      	add	r3, r2
 8011ae4:	00db      	lsls	r3, r3, #3
 8011ae6:	440b      	add	r3, r1
 8011ae8:	3314      	adds	r3, #20
 8011aea:	781b      	ldrb	r3, [r3, #0]
 8011aec:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011aee:	7afb      	ldrb	r3, [r7, #11]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d00e      	beq.n	8011b12 <etharp_cleanup_netif+0x46>
 8011af4:	490c      	ldr	r1, [pc, #48]	; (8011b28 <etharp_cleanup_netif+0x5c>)
 8011af6:	68fa      	ldr	r2, [r7, #12]
 8011af8:	4613      	mov	r3, r2
 8011afa:	005b      	lsls	r3, r3, #1
 8011afc:	4413      	add	r3, r2
 8011afe:	00db      	lsls	r3, r3, #3
 8011b00:	440b      	add	r3, r1
 8011b02:	3308      	adds	r3, #8
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	687a      	ldr	r2, [r7, #4]
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d102      	bne.n	8011b12 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011b0c:	68f8      	ldr	r0, [r7, #12]
 8011b0e:	f7ff fce5 	bl	80114dc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	3301      	adds	r3, #1
 8011b16:	60fb      	str	r3, [r7, #12]
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	2b09      	cmp	r3, #9
 8011b1c:	dddd      	ble.n	8011ada <etharp_cleanup_netif+0xe>
    }
  }
}
 8011b1e:	bf00      	nop
 8011b20:	bf00      	nop
 8011b22:	3710      	adds	r7, #16
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}
 8011b28:	2000af54 	.word	0x2000af54

08011b2c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011b2c:	b5b0      	push	{r4, r5, r7, lr}
 8011b2e:	b08a      	sub	sp, #40	; 0x28
 8011b30:	af04      	add	r7, sp, #16
 8011b32:	6078      	str	r0, [r7, #4]
 8011b34:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011b36:	683b      	ldr	r3, [r7, #0]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d107      	bne.n	8011b4c <etharp_input+0x20>
 8011b3c:	4b3f      	ldr	r3, [pc, #252]	; (8011c3c <etharp_input+0x110>)
 8011b3e:	f240 228a 	movw	r2, #650	; 0x28a
 8011b42:	493f      	ldr	r1, [pc, #252]	; (8011c40 <etharp_input+0x114>)
 8011b44:	483f      	ldr	r0, [pc, #252]	; (8011c44 <etharp_input+0x118>)
 8011b46:	f002 f88b 	bl	8013c60 <iprintf>
 8011b4a:	e074      	b.n	8011c36 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	685b      	ldr	r3, [r3, #4]
 8011b50:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011b52:	693b      	ldr	r3, [r7, #16]
 8011b54:	881b      	ldrh	r3, [r3, #0]
 8011b56:	b29b      	uxth	r3, r3
 8011b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011b5c:	d10c      	bne.n	8011b78 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011b5e:	693b      	ldr	r3, [r7, #16]
 8011b60:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011b62:	2b06      	cmp	r3, #6
 8011b64:	d108      	bne.n	8011b78 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011b66:	693b      	ldr	r3, [r7, #16]
 8011b68:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011b6a:	2b04      	cmp	r3, #4
 8011b6c:	d104      	bne.n	8011b78 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011b6e:	693b      	ldr	r3, [r7, #16]
 8011b70:	885b      	ldrh	r3, [r3, #2]
 8011b72:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011b74:	2b08      	cmp	r3, #8
 8011b76:	d003      	beq.n	8011b80 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f7f7 fc1b 	bl	80093b4 <pbuf_free>
    return;
 8011b7e:	e05a      	b.n	8011c36 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011b80:	693b      	ldr	r3, [r7, #16]
 8011b82:	330e      	adds	r3, #14
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011b88:	693b      	ldr	r3, [r7, #16]
 8011b8a:	3318      	adds	r3, #24
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011b90:	683b      	ldr	r3, [r7, #0]
 8011b92:	3304      	adds	r3, #4
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d102      	bne.n	8011ba0 <etharp_input+0x74>
    for_us = 0;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	75fb      	strb	r3, [r7, #23]
 8011b9e:	e009      	b.n	8011bb4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011ba0:	68ba      	ldr	r2, [r7, #8]
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	3304      	adds	r3, #4
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	bf0c      	ite	eq
 8011bac:	2301      	moveq	r3, #1
 8011bae:	2300      	movne	r3, #0
 8011bb0:	b2db      	uxtb	r3, r3
 8011bb2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011bb4:	693b      	ldr	r3, [r7, #16]
 8011bb6:	f103 0208 	add.w	r2, r3, #8
 8011bba:	7dfb      	ldrb	r3, [r7, #23]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d001      	beq.n	8011bc4 <etharp_input+0x98>
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	e000      	b.n	8011bc6 <etharp_input+0x9a>
 8011bc4:	2302      	movs	r3, #2
 8011bc6:	f107 010c 	add.w	r1, r7, #12
 8011bca:	6838      	ldr	r0, [r7, #0]
 8011bcc:	f7ff fed8 	bl	8011980 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011bd0:	693b      	ldr	r3, [r7, #16]
 8011bd2:	88db      	ldrh	r3, [r3, #6]
 8011bd4:	b29b      	uxth	r3, r3
 8011bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011bda:	d003      	beq.n	8011be4 <etharp_input+0xb8>
 8011bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011be0:	d01e      	beq.n	8011c20 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011be2:	e025      	b.n	8011c30 <etharp_input+0x104>
      if (for_us) {
 8011be4:	7dfb      	ldrb	r3, [r7, #23]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d021      	beq.n	8011c2e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8011bf0:	693b      	ldr	r3, [r7, #16]
 8011bf2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011c00:	693a      	ldr	r2, [r7, #16]
 8011c02:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011c04:	2102      	movs	r1, #2
 8011c06:	9103      	str	r1, [sp, #12]
 8011c08:	f107 010c 	add.w	r1, r7, #12
 8011c0c:	9102      	str	r1, [sp, #8]
 8011c0e:	9201      	str	r2, [sp, #4]
 8011c10:	9300      	str	r3, [sp, #0]
 8011c12:	462b      	mov	r3, r5
 8011c14:	4622      	mov	r2, r4
 8011c16:	4601      	mov	r1, r0
 8011c18:	6838      	ldr	r0, [r7, #0]
 8011c1a:	f000 faef 	bl	80121fc <etharp_raw>
      break;
 8011c1e:	e006      	b.n	8011c2e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8011c20:	f107 030c 	add.w	r3, r7, #12
 8011c24:	4619      	mov	r1, r3
 8011c26:	6838      	ldr	r0, [r7, #0]
 8011c28:	f7fe f9fc 	bl	8010024 <dhcp_arp_reply>
      break;
 8011c2c:	e000      	b.n	8011c30 <etharp_input+0x104>
      break;
 8011c2e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011c30:	6878      	ldr	r0, [r7, #4]
 8011c32:	f7f7 fbbf 	bl	80093b4 <pbuf_free>
}
 8011c36:	3718      	adds	r7, #24
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	bdb0      	pop	{r4, r5, r7, pc}
 8011c3c:	08017558 	.word	0x08017558
 8011c40:	080176a8 	.word	0x080176a8
 8011c44:	080175d0 	.word	0x080175d0

08011c48 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b086      	sub	sp, #24
 8011c4c:	af02      	add	r7, sp, #8
 8011c4e:	60f8      	str	r0, [r7, #12]
 8011c50:	60b9      	str	r1, [r7, #8]
 8011c52:	4613      	mov	r3, r2
 8011c54:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011c56:	79fa      	ldrb	r2, [r7, #7]
 8011c58:	4944      	ldr	r1, [pc, #272]	; (8011d6c <etharp_output_to_arp_index+0x124>)
 8011c5a:	4613      	mov	r3, r2
 8011c5c:	005b      	lsls	r3, r3, #1
 8011c5e:	4413      	add	r3, r2
 8011c60:	00db      	lsls	r3, r3, #3
 8011c62:	440b      	add	r3, r1
 8011c64:	3314      	adds	r3, #20
 8011c66:	781b      	ldrb	r3, [r3, #0]
 8011c68:	2b01      	cmp	r3, #1
 8011c6a:	d806      	bhi.n	8011c7a <etharp_output_to_arp_index+0x32>
 8011c6c:	4b40      	ldr	r3, [pc, #256]	; (8011d70 <etharp_output_to_arp_index+0x128>)
 8011c6e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011c72:	4940      	ldr	r1, [pc, #256]	; (8011d74 <etharp_output_to_arp_index+0x12c>)
 8011c74:	4840      	ldr	r0, [pc, #256]	; (8011d78 <etharp_output_to_arp_index+0x130>)
 8011c76:	f001 fff3 	bl	8013c60 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011c7a:	79fa      	ldrb	r2, [r7, #7]
 8011c7c:	493b      	ldr	r1, [pc, #236]	; (8011d6c <etharp_output_to_arp_index+0x124>)
 8011c7e:	4613      	mov	r3, r2
 8011c80:	005b      	lsls	r3, r3, #1
 8011c82:	4413      	add	r3, r2
 8011c84:	00db      	lsls	r3, r3, #3
 8011c86:	440b      	add	r3, r1
 8011c88:	3314      	adds	r3, #20
 8011c8a:	781b      	ldrb	r3, [r3, #0]
 8011c8c:	2b02      	cmp	r3, #2
 8011c8e:	d153      	bne.n	8011d38 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011c90:	79fa      	ldrb	r2, [r7, #7]
 8011c92:	4936      	ldr	r1, [pc, #216]	; (8011d6c <etharp_output_to_arp_index+0x124>)
 8011c94:	4613      	mov	r3, r2
 8011c96:	005b      	lsls	r3, r3, #1
 8011c98:	4413      	add	r3, r2
 8011c9a:	00db      	lsls	r3, r3, #3
 8011c9c:	440b      	add	r3, r1
 8011c9e:	3312      	adds	r3, #18
 8011ca0:	881b      	ldrh	r3, [r3, #0]
 8011ca2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011ca6:	d919      	bls.n	8011cdc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011ca8:	79fa      	ldrb	r2, [r7, #7]
 8011caa:	4613      	mov	r3, r2
 8011cac:	005b      	lsls	r3, r3, #1
 8011cae:	4413      	add	r3, r2
 8011cb0:	00db      	lsls	r3, r3, #3
 8011cb2:	4a2e      	ldr	r2, [pc, #184]	; (8011d6c <etharp_output_to_arp_index+0x124>)
 8011cb4:	4413      	add	r3, r2
 8011cb6:	3304      	adds	r3, #4
 8011cb8:	4619      	mov	r1, r3
 8011cba:	68f8      	ldr	r0, [r7, #12]
 8011cbc:	f000 fb4c 	bl	8012358 <etharp_request>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d138      	bne.n	8011d38 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011cc6:	79fa      	ldrb	r2, [r7, #7]
 8011cc8:	4928      	ldr	r1, [pc, #160]	; (8011d6c <etharp_output_to_arp_index+0x124>)
 8011cca:	4613      	mov	r3, r2
 8011ccc:	005b      	lsls	r3, r3, #1
 8011cce:	4413      	add	r3, r2
 8011cd0:	00db      	lsls	r3, r3, #3
 8011cd2:	440b      	add	r3, r1
 8011cd4:	3314      	adds	r3, #20
 8011cd6:	2203      	movs	r2, #3
 8011cd8:	701a      	strb	r2, [r3, #0]
 8011cda:	e02d      	b.n	8011d38 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011cdc:	79fa      	ldrb	r2, [r7, #7]
 8011cde:	4923      	ldr	r1, [pc, #140]	; (8011d6c <etharp_output_to_arp_index+0x124>)
 8011ce0:	4613      	mov	r3, r2
 8011ce2:	005b      	lsls	r3, r3, #1
 8011ce4:	4413      	add	r3, r2
 8011ce6:	00db      	lsls	r3, r3, #3
 8011ce8:	440b      	add	r3, r1
 8011cea:	3312      	adds	r3, #18
 8011cec:	881b      	ldrh	r3, [r3, #0]
 8011cee:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011cf2:	d321      	bcc.n	8011d38 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011cf4:	79fa      	ldrb	r2, [r7, #7]
 8011cf6:	4613      	mov	r3, r2
 8011cf8:	005b      	lsls	r3, r3, #1
 8011cfa:	4413      	add	r3, r2
 8011cfc:	00db      	lsls	r3, r3, #3
 8011cfe:	4a1b      	ldr	r2, [pc, #108]	; (8011d6c <etharp_output_to_arp_index+0x124>)
 8011d00:	4413      	add	r3, r2
 8011d02:	1d19      	adds	r1, r3, #4
 8011d04:	79fa      	ldrb	r2, [r7, #7]
 8011d06:	4613      	mov	r3, r2
 8011d08:	005b      	lsls	r3, r3, #1
 8011d0a:	4413      	add	r3, r2
 8011d0c:	00db      	lsls	r3, r3, #3
 8011d0e:	3308      	adds	r3, #8
 8011d10:	4a16      	ldr	r2, [pc, #88]	; (8011d6c <etharp_output_to_arp_index+0x124>)
 8011d12:	4413      	add	r3, r2
 8011d14:	3304      	adds	r3, #4
 8011d16:	461a      	mov	r2, r3
 8011d18:	68f8      	ldr	r0, [r7, #12]
 8011d1a:	f000 fafb 	bl	8012314 <etharp_request_dst>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d109      	bne.n	8011d38 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011d24:	79fa      	ldrb	r2, [r7, #7]
 8011d26:	4911      	ldr	r1, [pc, #68]	; (8011d6c <etharp_output_to_arp_index+0x124>)
 8011d28:	4613      	mov	r3, r2
 8011d2a:	005b      	lsls	r3, r3, #1
 8011d2c:	4413      	add	r3, r2
 8011d2e:	00db      	lsls	r3, r3, #3
 8011d30:	440b      	add	r3, r1
 8011d32:	3314      	adds	r3, #20
 8011d34:	2203      	movs	r2, #3
 8011d36:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8011d3e:	79fa      	ldrb	r2, [r7, #7]
 8011d40:	4613      	mov	r3, r2
 8011d42:	005b      	lsls	r3, r3, #1
 8011d44:	4413      	add	r3, r2
 8011d46:	00db      	lsls	r3, r3, #3
 8011d48:	3308      	adds	r3, #8
 8011d4a:	4a08      	ldr	r2, [pc, #32]	; (8011d6c <etharp_output_to_arp_index+0x124>)
 8011d4c:	4413      	add	r3, r2
 8011d4e:	3304      	adds	r3, #4
 8011d50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011d54:	9200      	str	r2, [sp, #0]
 8011d56:	460a      	mov	r2, r1
 8011d58:	68b9      	ldr	r1, [r7, #8]
 8011d5a:	68f8      	ldr	r0, [r7, #12]
 8011d5c:	f001 feee 	bl	8013b3c <ethernet_output>
 8011d60:	4603      	mov	r3, r0
}
 8011d62:	4618      	mov	r0, r3
 8011d64:	3710      	adds	r7, #16
 8011d66:	46bd      	mov	sp, r7
 8011d68:	bd80      	pop	{r7, pc}
 8011d6a:	bf00      	nop
 8011d6c:	2000af54 	.word	0x2000af54
 8011d70:	08017558 	.word	0x08017558
 8011d74:	080176c8 	.word	0x080176c8
 8011d78:	080175d0 	.word	0x080175d0

08011d7c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b08a      	sub	sp, #40	; 0x28
 8011d80:	af02      	add	r7, sp, #8
 8011d82:	60f8      	str	r0, [r7, #12]
 8011d84:	60b9      	str	r1, [r7, #8]
 8011d86:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d106      	bne.n	8011da0 <etharp_output+0x24>
 8011d92:	4b73      	ldr	r3, [pc, #460]	; (8011f60 <etharp_output+0x1e4>)
 8011d94:	f240 321e 	movw	r2, #798	; 0x31e
 8011d98:	4972      	ldr	r1, [pc, #456]	; (8011f64 <etharp_output+0x1e8>)
 8011d9a:	4873      	ldr	r0, [pc, #460]	; (8011f68 <etharp_output+0x1ec>)
 8011d9c:	f001 ff60 	bl	8013c60 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d106      	bne.n	8011db4 <etharp_output+0x38>
 8011da6:	4b6e      	ldr	r3, [pc, #440]	; (8011f60 <etharp_output+0x1e4>)
 8011da8:	f240 321f 	movw	r2, #799	; 0x31f
 8011dac:	496f      	ldr	r1, [pc, #444]	; (8011f6c <etharp_output+0x1f0>)
 8011dae:	486e      	ldr	r0, [pc, #440]	; (8011f68 <etharp_output+0x1ec>)
 8011db0:	f001 ff56 	bl	8013c60 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d106      	bne.n	8011dc8 <etharp_output+0x4c>
 8011dba:	4b69      	ldr	r3, [pc, #420]	; (8011f60 <etharp_output+0x1e4>)
 8011dbc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011dc0:	496b      	ldr	r1, [pc, #428]	; (8011f70 <etharp_output+0x1f4>)
 8011dc2:	4869      	ldr	r0, [pc, #420]	; (8011f68 <etharp_output+0x1ec>)
 8011dc4:	f001 ff4c 	bl	8013c60 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	68f9      	ldr	r1, [r7, #12]
 8011dce:	4618      	mov	r0, r3
 8011dd0:	f000 ff16 	bl	8012c00 <ip4_addr_isbroadcast_u32>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d002      	beq.n	8011de0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011dda:	4b66      	ldr	r3, [pc, #408]	; (8011f74 <etharp_output+0x1f8>)
 8011ddc:	61fb      	str	r3, [r7, #28]
 8011dde:	e0af      	b.n	8011f40 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011de8:	2be0      	cmp	r3, #224	; 0xe0
 8011dea:	d118      	bne.n	8011e1e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011dec:	2301      	movs	r3, #1
 8011dee:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011df0:	2300      	movs	r3, #0
 8011df2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011df4:	235e      	movs	r3, #94	; 0x5e
 8011df6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	3301      	adds	r3, #1
 8011dfc:	781b      	ldrb	r3, [r3, #0]
 8011dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e02:	b2db      	uxtb	r3, r3
 8011e04:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	3302      	adds	r3, #2
 8011e0a:	781b      	ldrb	r3, [r3, #0]
 8011e0c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	3303      	adds	r3, #3
 8011e12:	781b      	ldrb	r3, [r3, #0]
 8011e14:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8011e16:	f107 0310 	add.w	r3, r7, #16
 8011e1a:	61fb      	str	r3, [r7, #28]
 8011e1c:	e090      	b.n	8011f40 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	681a      	ldr	r2, [r3, #0]
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	3304      	adds	r3, #4
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	405a      	eors	r2, r3
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	3308      	adds	r3, #8
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	4013      	ands	r3, r2
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d012      	beq.n	8011e5c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011e3c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011e40:	4293      	cmp	r3, r2
 8011e42:	d00b      	beq.n	8011e5c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	330c      	adds	r3, #12
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d003      	beq.n	8011e56 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	330c      	adds	r3, #12
 8011e52:	61bb      	str	r3, [r7, #24]
 8011e54:	e002      	b.n	8011e5c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8011e56:	f06f 0303 	mvn.w	r3, #3
 8011e5a:	e07d      	b.n	8011f58 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011e5c:	4b46      	ldr	r3, [pc, #280]	; (8011f78 <etharp_output+0x1fc>)
 8011e5e:	781b      	ldrb	r3, [r3, #0]
 8011e60:	4619      	mov	r1, r3
 8011e62:	4a46      	ldr	r2, [pc, #280]	; (8011f7c <etharp_output+0x200>)
 8011e64:	460b      	mov	r3, r1
 8011e66:	005b      	lsls	r3, r3, #1
 8011e68:	440b      	add	r3, r1
 8011e6a:	00db      	lsls	r3, r3, #3
 8011e6c:	4413      	add	r3, r2
 8011e6e:	3314      	adds	r3, #20
 8011e70:	781b      	ldrb	r3, [r3, #0]
 8011e72:	2b01      	cmp	r3, #1
 8011e74:	d925      	bls.n	8011ec2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011e76:	4b40      	ldr	r3, [pc, #256]	; (8011f78 <etharp_output+0x1fc>)
 8011e78:	781b      	ldrb	r3, [r3, #0]
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	4a3f      	ldr	r2, [pc, #252]	; (8011f7c <etharp_output+0x200>)
 8011e7e:	460b      	mov	r3, r1
 8011e80:	005b      	lsls	r3, r3, #1
 8011e82:	440b      	add	r3, r1
 8011e84:	00db      	lsls	r3, r3, #3
 8011e86:	4413      	add	r3, r2
 8011e88:	3308      	adds	r3, #8
 8011e8a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011e8c:	68fa      	ldr	r2, [r7, #12]
 8011e8e:	429a      	cmp	r2, r3
 8011e90:	d117      	bne.n	8011ec2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011e92:	69bb      	ldr	r3, [r7, #24]
 8011e94:	681a      	ldr	r2, [r3, #0]
 8011e96:	4b38      	ldr	r3, [pc, #224]	; (8011f78 <etharp_output+0x1fc>)
 8011e98:	781b      	ldrb	r3, [r3, #0]
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	4937      	ldr	r1, [pc, #220]	; (8011f7c <etharp_output+0x200>)
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	005b      	lsls	r3, r3, #1
 8011ea2:	4403      	add	r3, r0
 8011ea4:	00db      	lsls	r3, r3, #3
 8011ea6:	440b      	add	r3, r1
 8011ea8:	3304      	adds	r3, #4
 8011eaa:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011eac:	429a      	cmp	r2, r3
 8011eae:	d108      	bne.n	8011ec2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011eb0:	4b31      	ldr	r3, [pc, #196]	; (8011f78 <etharp_output+0x1fc>)
 8011eb2:	781b      	ldrb	r3, [r3, #0]
 8011eb4:	461a      	mov	r2, r3
 8011eb6:	68b9      	ldr	r1, [r7, #8]
 8011eb8:	68f8      	ldr	r0, [r7, #12]
 8011eba:	f7ff fec5 	bl	8011c48 <etharp_output_to_arp_index>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	e04a      	b.n	8011f58 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	75fb      	strb	r3, [r7, #23]
 8011ec6:	e031      	b.n	8011f2c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011ec8:	7dfa      	ldrb	r2, [r7, #23]
 8011eca:	492c      	ldr	r1, [pc, #176]	; (8011f7c <etharp_output+0x200>)
 8011ecc:	4613      	mov	r3, r2
 8011ece:	005b      	lsls	r3, r3, #1
 8011ed0:	4413      	add	r3, r2
 8011ed2:	00db      	lsls	r3, r3, #3
 8011ed4:	440b      	add	r3, r1
 8011ed6:	3314      	adds	r3, #20
 8011ed8:	781b      	ldrb	r3, [r3, #0]
 8011eda:	2b01      	cmp	r3, #1
 8011edc:	d923      	bls.n	8011f26 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011ede:	7dfa      	ldrb	r2, [r7, #23]
 8011ee0:	4926      	ldr	r1, [pc, #152]	; (8011f7c <etharp_output+0x200>)
 8011ee2:	4613      	mov	r3, r2
 8011ee4:	005b      	lsls	r3, r3, #1
 8011ee6:	4413      	add	r3, r2
 8011ee8:	00db      	lsls	r3, r3, #3
 8011eea:	440b      	add	r3, r1
 8011eec:	3308      	adds	r3, #8
 8011eee:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011ef0:	68fa      	ldr	r2, [r7, #12]
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	d117      	bne.n	8011f26 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8011ef6:	69bb      	ldr	r3, [r7, #24]
 8011ef8:	6819      	ldr	r1, [r3, #0]
 8011efa:	7dfa      	ldrb	r2, [r7, #23]
 8011efc:	481f      	ldr	r0, [pc, #124]	; (8011f7c <etharp_output+0x200>)
 8011efe:	4613      	mov	r3, r2
 8011f00:	005b      	lsls	r3, r3, #1
 8011f02:	4413      	add	r3, r2
 8011f04:	00db      	lsls	r3, r3, #3
 8011f06:	4403      	add	r3, r0
 8011f08:	3304      	adds	r3, #4
 8011f0a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011f0c:	4299      	cmp	r1, r3
 8011f0e:	d10a      	bne.n	8011f26 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011f10:	4a19      	ldr	r2, [pc, #100]	; (8011f78 <etharp_output+0x1fc>)
 8011f12:	7dfb      	ldrb	r3, [r7, #23]
 8011f14:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8011f16:	7dfb      	ldrb	r3, [r7, #23]
 8011f18:	461a      	mov	r2, r3
 8011f1a:	68b9      	ldr	r1, [r7, #8]
 8011f1c:	68f8      	ldr	r0, [r7, #12]
 8011f1e:	f7ff fe93 	bl	8011c48 <etharp_output_to_arp_index>
 8011f22:	4603      	mov	r3, r0
 8011f24:	e018      	b.n	8011f58 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011f26:	7dfb      	ldrb	r3, [r7, #23]
 8011f28:	3301      	adds	r3, #1
 8011f2a:	75fb      	strb	r3, [r7, #23]
 8011f2c:	7dfb      	ldrb	r3, [r7, #23]
 8011f2e:	2b09      	cmp	r3, #9
 8011f30:	d9ca      	bls.n	8011ec8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011f32:	68ba      	ldr	r2, [r7, #8]
 8011f34:	69b9      	ldr	r1, [r7, #24]
 8011f36:	68f8      	ldr	r0, [r7, #12]
 8011f38:	f000 f822 	bl	8011f80 <etharp_query>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	e00b      	b.n	8011f58 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8011f46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011f4a:	9300      	str	r3, [sp, #0]
 8011f4c:	69fb      	ldr	r3, [r7, #28]
 8011f4e:	68b9      	ldr	r1, [r7, #8]
 8011f50:	68f8      	ldr	r0, [r7, #12]
 8011f52:	f001 fdf3 	bl	8013b3c <ethernet_output>
 8011f56:	4603      	mov	r3, r0
}
 8011f58:	4618      	mov	r0, r3
 8011f5a:	3720      	adds	r7, #32
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	bd80      	pop	{r7, pc}
 8011f60:	08017558 	.word	0x08017558
 8011f64:	080176a8 	.word	0x080176a8
 8011f68:	080175d0 	.word	0x080175d0
 8011f6c:	080176f8 	.word	0x080176f8
 8011f70:	08017698 	.word	0x08017698
 8011f74:	0801a250 	.word	0x0801a250
 8011f78:	2000b044 	.word	0x2000b044
 8011f7c:	2000af54 	.word	0x2000af54

08011f80 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b08c      	sub	sp, #48	; 0x30
 8011f84:	af02      	add	r7, sp, #8
 8011f86:	60f8      	str	r0, [r7, #12]
 8011f88:	60b9      	str	r1, [r7, #8]
 8011f8a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	332a      	adds	r3, #42	; 0x2a
 8011f90:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8011f92:	23ff      	movs	r3, #255	; 0xff
 8011f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8011f98:	2300      	movs	r3, #0
 8011f9a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011f9c:	68bb      	ldr	r3, [r7, #8]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	68f9      	ldr	r1, [r7, #12]
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f000 fe2c 	bl	8012c00 <ip4_addr_isbroadcast_u32>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d10c      	bne.n	8011fc8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011fae:	68bb      	ldr	r3, [r7, #8]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011fb6:	2be0      	cmp	r3, #224	; 0xe0
 8011fb8:	d006      	beq.n	8011fc8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011fba:	68bb      	ldr	r3, [r7, #8]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d003      	beq.n	8011fc8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011fc0:	68bb      	ldr	r3, [r7, #8]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d102      	bne.n	8011fce <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011fc8:	f06f 030f 	mvn.w	r3, #15
 8011fcc:	e101      	b.n	80121d2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011fce:	68fa      	ldr	r2, [r7, #12]
 8011fd0:	2101      	movs	r1, #1
 8011fd2:	68b8      	ldr	r0, [r7, #8]
 8011fd4:	f7ff fb5c 	bl	8011690 <etharp_find_entry>
 8011fd8:	4603      	mov	r3, r0
 8011fda:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011fdc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	da02      	bge.n	8011fea <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8011fe4:	8a7b      	ldrh	r3, [r7, #18]
 8011fe6:	b25b      	sxtb	r3, r3
 8011fe8:	e0f3      	b.n	80121d2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8011fea:	8a7b      	ldrh	r3, [r7, #18]
 8011fec:	2b7e      	cmp	r3, #126	; 0x7e
 8011fee:	d906      	bls.n	8011ffe <etharp_query+0x7e>
 8011ff0:	4b7a      	ldr	r3, [pc, #488]	; (80121dc <etharp_query+0x25c>)
 8011ff2:	f240 32c1 	movw	r2, #961	; 0x3c1
 8011ff6:	497a      	ldr	r1, [pc, #488]	; (80121e0 <etharp_query+0x260>)
 8011ff8:	487a      	ldr	r0, [pc, #488]	; (80121e4 <etharp_query+0x264>)
 8011ffa:	f001 fe31 	bl	8013c60 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8011ffe:	8a7b      	ldrh	r3, [r7, #18]
 8012000:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012002:	7c7a      	ldrb	r2, [r7, #17]
 8012004:	4978      	ldr	r1, [pc, #480]	; (80121e8 <etharp_query+0x268>)
 8012006:	4613      	mov	r3, r2
 8012008:	005b      	lsls	r3, r3, #1
 801200a:	4413      	add	r3, r2
 801200c:	00db      	lsls	r3, r3, #3
 801200e:	440b      	add	r3, r1
 8012010:	3314      	adds	r3, #20
 8012012:	781b      	ldrb	r3, [r3, #0]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d115      	bne.n	8012044 <etharp_query+0xc4>
    is_new_entry = 1;
 8012018:	2301      	movs	r3, #1
 801201a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801201c:	7c7a      	ldrb	r2, [r7, #17]
 801201e:	4972      	ldr	r1, [pc, #456]	; (80121e8 <etharp_query+0x268>)
 8012020:	4613      	mov	r3, r2
 8012022:	005b      	lsls	r3, r3, #1
 8012024:	4413      	add	r3, r2
 8012026:	00db      	lsls	r3, r3, #3
 8012028:	440b      	add	r3, r1
 801202a:	3314      	adds	r3, #20
 801202c:	2201      	movs	r2, #1
 801202e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012030:	7c7a      	ldrb	r2, [r7, #17]
 8012032:	496d      	ldr	r1, [pc, #436]	; (80121e8 <etharp_query+0x268>)
 8012034:	4613      	mov	r3, r2
 8012036:	005b      	lsls	r3, r3, #1
 8012038:	4413      	add	r3, r2
 801203a:	00db      	lsls	r3, r3, #3
 801203c:	440b      	add	r3, r1
 801203e:	3308      	adds	r3, #8
 8012040:	68fa      	ldr	r2, [r7, #12]
 8012042:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012044:	7c7a      	ldrb	r2, [r7, #17]
 8012046:	4968      	ldr	r1, [pc, #416]	; (80121e8 <etharp_query+0x268>)
 8012048:	4613      	mov	r3, r2
 801204a:	005b      	lsls	r3, r3, #1
 801204c:	4413      	add	r3, r2
 801204e:	00db      	lsls	r3, r3, #3
 8012050:	440b      	add	r3, r1
 8012052:	3314      	adds	r3, #20
 8012054:	781b      	ldrb	r3, [r3, #0]
 8012056:	2b01      	cmp	r3, #1
 8012058:	d011      	beq.n	801207e <etharp_query+0xfe>
 801205a:	7c7a      	ldrb	r2, [r7, #17]
 801205c:	4962      	ldr	r1, [pc, #392]	; (80121e8 <etharp_query+0x268>)
 801205e:	4613      	mov	r3, r2
 8012060:	005b      	lsls	r3, r3, #1
 8012062:	4413      	add	r3, r2
 8012064:	00db      	lsls	r3, r3, #3
 8012066:	440b      	add	r3, r1
 8012068:	3314      	adds	r3, #20
 801206a:	781b      	ldrb	r3, [r3, #0]
 801206c:	2b01      	cmp	r3, #1
 801206e:	d806      	bhi.n	801207e <etharp_query+0xfe>
 8012070:	4b5a      	ldr	r3, [pc, #360]	; (80121dc <etharp_query+0x25c>)
 8012072:	f240 32cd 	movw	r2, #973	; 0x3cd
 8012076:	495d      	ldr	r1, [pc, #372]	; (80121ec <etharp_query+0x26c>)
 8012078:	485a      	ldr	r0, [pc, #360]	; (80121e4 <etharp_query+0x264>)
 801207a:	f001 fdf1 	bl	8013c60 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801207e:	6a3b      	ldr	r3, [r7, #32]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d102      	bne.n	801208a <etharp_query+0x10a>
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d10c      	bne.n	80120a4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801208a:	68b9      	ldr	r1, [r7, #8]
 801208c:	68f8      	ldr	r0, [r7, #12]
 801208e:	f000 f963 	bl	8012358 <etharp_request>
 8012092:	4603      	mov	r3, r0
 8012094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d102      	bne.n	80120a4 <etharp_query+0x124>
      return result;
 801209e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80120a2:	e096      	b.n	80121d2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d106      	bne.n	80120b8 <etharp_query+0x138>
 80120aa:	4b4c      	ldr	r3, [pc, #304]	; (80121dc <etharp_query+0x25c>)
 80120ac:	f240 32e1 	movw	r2, #993	; 0x3e1
 80120b0:	494f      	ldr	r1, [pc, #316]	; (80121f0 <etharp_query+0x270>)
 80120b2:	484c      	ldr	r0, [pc, #304]	; (80121e4 <etharp_query+0x264>)
 80120b4:	f001 fdd4 	bl	8013c60 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80120b8:	7c7a      	ldrb	r2, [r7, #17]
 80120ba:	494b      	ldr	r1, [pc, #300]	; (80121e8 <etharp_query+0x268>)
 80120bc:	4613      	mov	r3, r2
 80120be:	005b      	lsls	r3, r3, #1
 80120c0:	4413      	add	r3, r2
 80120c2:	00db      	lsls	r3, r3, #3
 80120c4:	440b      	add	r3, r1
 80120c6:	3314      	adds	r3, #20
 80120c8:	781b      	ldrb	r3, [r3, #0]
 80120ca:	2b01      	cmp	r3, #1
 80120cc:	d917      	bls.n	80120fe <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80120ce:	4a49      	ldr	r2, [pc, #292]	; (80121f4 <etharp_query+0x274>)
 80120d0:	7c7b      	ldrb	r3, [r7, #17]
 80120d2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80120d4:	7c7a      	ldrb	r2, [r7, #17]
 80120d6:	4613      	mov	r3, r2
 80120d8:	005b      	lsls	r3, r3, #1
 80120da:	4413      	add	r3, r2
 80120dc:	00db      	lsls	r3, r3, #3
 80120de:	3308      	adds	r3, #8
 80120e0:	4a41      	ldr	r2, [pc, #260]	; (80121e8 <etharp_query+0x268>)
 80120e2:	4413      	add	r3, r2
 80120e4:	3304      	adds	r3, #4
 80120e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80120ea:	9200      	str	r2, [sp, #0]
 80120ec:	697a      	ldr	r2, [r7, #20]
 80120ee:	6879      	ldr	r1, [r7, #4]
 80120f0:	68f8      	ldr	r0, [r7, #12]
 80120f2:	f001 fd23 	bl	8013b3c <ethernet_output>
 80120f6:	4603      	mov	r3, r0
 80120f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80120fc:	e067      	b.n	80121ce <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80120fe:	7c7a      	ldrb	r2, [r7, #17]
 8012100:	4939      	ldr	r1, [pc, #228]	; (80121e8 <etharp_query+0x268>)
 8012102:	4613      	mov	r3, r2
 8012104:	005b      	lsls	r3, r3, #1
 8012106:	4413      	add	r3, r2
 8012108:	00db      	lsls	r3, r3, #3
 801210a:	440b      	add	r3, r1
 801210c:	3314      	adds	r3, #20
 801210e:	781b      	ldrb	r3, [r3, #0]
 8012110:	2b01      	cmp	r3, #1
 8012112:	d15c      	bne.n	80121ce <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012114:	2300      	movs	r3, #0
 8012116:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801211c:	e01c      	b.n	8012158 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801211e:	69fb      	ldr	r3, [r7, #28]
 8012120:	895a      	ldrh	r2, [r3, #10]
 8012122:	69fb      	ldr	r3, [r7, #28]
 8012124:	891b      	ldrh	r3, [r3, #8]
 8012126:	429a      	cmp	r2, r3
 8012128:	d10a      	bne.n	8012140 <etharp_query+0x1c0>
 801212a:	69fb      	ldr	r3, [r7, #28]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d006      	beq.n	8012140 <etharp_query+0x1c0>
 8012132:	4b2a      	ldr	r3, [pc, #168]	; (80121dc <etharp_query+0x25c>)
 8012134:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012138:	492f      	ldr	r1, [pc, #188]	; (80121f8 <etharp_query+0x278>)
 801213a:	482a      	ldr	r0, [pc, #168]	; (80121e4 <etharp_query+0x264>)
 801213c:	f001 fd90 	bl	8013c60 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012140:	69fb      	ldr	r3, [r7, #28]
 8012142:	7b1b      	ldrb	r3, [r3, #12]
 8012144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012148:	2b00      	cmp	r3, #0
 801214a:	d002      	beq.n	8012152 <etharp_query+0x1d2>
        copy_needed = 1;
 801214c:	2301      	movs	r3, #1
 801214e:	61bb      	str	r3, [r7, #24]
        break;
 8012150:	e005      	b.n	801215e <etharp_query+0x1de>
      }
      p = p->next;
 8012152:	69fb      	ldr	r3, [r7, #28]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012158:	69fb      	ldr	r3, [r7, #28]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d1df      	bne.n	801211e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801215e:	69bb      	ldr	r3, [r7, #24]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d007      	beq.n	8012174 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012164:	687a      	ldr	r2, [r7, #4]
 8012166:	f44f 7120 	mov.w	r1, #640	; 0x280
 801216a:	200e      	movs	r0, #14
 801216c:	f7f7 fb8e 	bl	800988c <pbuf_clone>
 8012170:	61f8      	str	r0, [r7, #28]
 8012172:	e004      	b.n	801217e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012178:	69f8      	ldr	r0, [r7, #28]
 801217a:	f7f7 f9bb 	bl	80094f4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801217e:	69fb      	ldr	r3, [r7, #28]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d021      	beq.n	80121c8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012184:	7c7a      	ldrb	r2, [r7, #17]
 8012186:	4918      	ldr	r1, [pc, #96]	; (80121e8 <etharp_query+0x268>)
 8012188:	4613      	mov	r3, r2
 801218a:	005b      	lsls	r3, r3, #1
 801218c:	4413      	add	r3, r2
 801218e:	00db      	lsls	r3, r3, #3
 8012190:	440b      	add	r3, r1
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d00a      	beq.n	80121ae <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012198:	7c7a      	ldrb	r2, [r7, #17]
 801219a:	4913      	ldr	r1, [pc, #76]	; (80121e8 <etharp_query+0x268>)
 801219c:	4613      	mov	r3, r2
 801219e:	005b      	lsls	r3, r3, #1
 80121a0:	4413      	add	r3, r2
 80121a2:	00db      	lsls	r3, r3, #3
 80121a4:	440b      	add	r3, r1
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	4618      	mov	r0, r3
 80121aa:	f7f7 f903 	bl	80093b4 <pbuf_free>
      }
      arp_table[i].q = p;
 80121ae:	7c7a      	ldrb	r2, [r7, #17]
 80121b0:	490d      	ldr	r1, [pc, #52]	; (80121e8 <etharp_query+0x268>)
 80121b2:	4613      	mov	r3, r2
 80121b4:	005b      	lsls	r3, r3, #1
 80121b6:	4413      	add	r3, r2
 80121b8:	00db      	lsls	r3, r3, #3
 80121ba:	440b      	add	r3, r1
 80121bc:	69fa      	ldr	r2, [r7, #28]
 80121be:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80121c0:	2300      	movs	r3, #0
 80121c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80121c6:	e002      	b.n	80121ce <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80121c8:	23ff      	movs	r3, #255	; 0xff
 80121ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80121ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80121d2:	4618      	mov	r0, r3
 80121d4:	3728      	adds	r7, #40	; 0x28
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bd80      	pop	{r7, pc}
 80121da:	bf00      	nop
 80121dc:	08017558 	.word	0x08017558
 80121e0:	08017704 	.word	0x08017704
 80121e4:	080175d0 	.word	0x080175d0
 80121e8:	2000af54 	.word	0x2000af54
 80121ec:	08017714 	.word	0x08017714
 80121f0:	080176f8 	.word	0x080176f8
 80121f4:	2000b044 	.word	0x2000b044
 80121f8:	0801773c 	.word	0x0801773c

080121fc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b08a      	sub	sp, #40	; 0x28
 8012200:	af02      	add	r7, sp, #8
 8012202:	60f8      	str	r0, [r7, #12]
 8012204:	60b9      	str	r1, [r7, #8]
 8012206:	607a      	str	r2, [r7, #4]
 8012208:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801220a:	2300      	movs	r3, #0
 801220c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d106      	bne.n	8012222 <etharp_raw+0x26>
 8012214:	4b3a      	ldr	r3, [pc, #232]	; (8012300 <etharp_raw+0x104>)
 8012216:	f240 4257 	movw	r2, #1111	; 0x457
 801221a:	493a      	ldr	r1, [pc, #232]	; (8012304 <etharp_raw+0x108>)
 801221c:	483a      	ldr	r0, [pc, #232]	; (8012308 <etharp_raw+0x10c>)
 801221e:	f001 fd1f 	bl	8013c60 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012222:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012226:	211c      	movs	r1, #28
 8012228:	200e      	movs	r0, #14
 801222a:	f7f6 fddf 	bl	8008dec <pbuf_alloc>
 801222e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012230:	69bb      	ldr	r3, [r7, #24]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d102      	bne.n	801223c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012236:	f04f 33ff 	mov.w	r3, #4294967295
 801223a:	e05d      	b.n	80122f8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801223c:	69bb      	ldr	r3, [r7, #24]
 801223e:	895b      	ldrh	r3, [r3, #10]
 8012240:	2b1b      	cmp	r3, #27
 8012242:	d806      	bhi.n	8012252 <etharp_raw+0x56>
 8012244:	4b2e      	ldr	r3, [pc, #184]	; (8012300 <etharp_raw+0x104>)
 8012246:	f240 4262 	movw	r2, #1122	; 0x462
 801224a:	4930      	ldr	r1, [pc, #192]	; (801230c <etharp_raw+0x110>)
 801224c:	482e      	ldr	r0, [pc, #184]	; (8012308 <etharp_raw+0x10c>)
 801224e:	f001 fd07 	bl	8013c60 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012252:	69bb      	ldr	r3, [r7, #24]
 8012254:	685b      	ldr	r3, [r3, #4]
 8012256:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012258:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801225a:	4618      	mov	r0, r3
 801225c:	f7f5 fd40 	bl	8007ce0 <lwip_htons>
 8012260:	4603      	mov	r3, r0
 8012262:	461a      	mov	r2, r3
 8012264:	697b      	ldr	r3, [r7, #20]
 8012266:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801226e:	2b06      	cmp	r3, #6
 8012270:	d006      	beq.n	8012280 <etharp_raw+0x84>
 8012272:	4b23      	ldr	r3, [pc, #140]	; (8012300 <etharp_raw+0x104>)
 8012274:	f240 4269 	movw	r2, #1129	; 0x469
 8012278:	4925      	ldr	r1, [pc, #148]	; (8012310 <etharp_raw+0x114>)
 801227a:	4823      	ldr	r0, [pc, #140]	; (8012308 <etharp_raw+0x10c>)
 801227c:	f001 fcf0 	bl	8013c60 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012280:	697b      	ldr	r3, [r7, #20]
 8012282:	3308      	adds	r3, #8
 8012284:	2206      	movs	r2, #6
 8012286:	6839      	ldr	r1, [r7, #0]
 8012288:	4618      	mov	r0, r3
 801228a:	f001 fcd3 	bl	8013c34 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801228e:	697b      	ldr	r3, [r7, #20]
 8012290:	3312      	adds	r3, #18
 8012292:	2206      	movs	r2, #6
 8012294:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012296:	4618      	mov	r0, r3
 8012298:	f001 fccc 	bl	8013c34 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801229c:	697b      	ldr	r3, [r7, #20]
 801229e:	330e      	adds	r3, #14
 80122a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80122a2:	6812      	ldr	r2, [r2, #0]
 80122a4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80122a6:	697b      	ldr	r3, [r7, #20]
 80122a8:	3318      	adds	r3, #24
 80122aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80122ac:	6812      	ldr	r2, [r2, #0]
 80122ae:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80122b0:	697b      	ldr	r3, [r7, #20]
 80122b2:	2200      	movs	r2, #0
 80122b4:	701a      	strb	r2, [r3, #0]
 80122b6:	2200      	movs	r2, #0
 80122b8:	f042 0201 	orr.w	r2, r2, #1
 80122bc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80122be:	697b      	ldr	r3, [r7, #20]
 80122c0:	2200      	movs	r2, #0
 80122c2:	f042 0208 	orr.w	r2, r2, #8
 80122c6:	709a      	strb	r2, [r3, #2]
 80122c8:	2200      	movs	r2, #0
 80122ca:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80122cc:	697b      	ldr	r3, [r7, #20]
 80122ce:	2206      	movs	r2, #6
 80122d0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80122d2:	697b      	ldr	r3, [r7, #20]
 80122d4:	2204      	movs	r2, #4
 80122d6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80122d8:	f640 0306 	movw	r3, #2054	; 0x806
 80122dc:	9300      	str	r3, [sp, #0]
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	68ba      	ldr	r2, [r7, #8]
 80122e2:	69b9      	ldr	r1, [r7, #24]
 80122e4:	68f8      	ldr	r0, [r7, #12]
 80122e6:	f001 fc29 	bl	8013b3c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80122ea:	69b8      	ldr	r0, [r7, #24]
 80122ec:	f7f7 f862 	bl	80093b4 <pbuf_free>
  p = NULL;
 80122f0:	2300      	movs	r3, #0
 80122f2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80122f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80122f8:	4618      	mov	r0, r3
 80122fa:	3720      	adds	r7, #32
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}
 8012300:	08017558 	.word	0x08017558
 8012304:	080176a8 	.word	0x080176a8
 8012308:	080175d0 	.word	0x080175d0
 801230c:	08017758 	.word	0x08017758
 8012310:	0801778c 	.word	0x0801778c

08012314 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b088      	sub	sp, #32
 8012318:	af04      	add	r7, sp, #16
 801231a:	60f8      	str	r0, [r7, #12]
 801231c:	60b9      	str	r1, [r7, #8]
 801231e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012330:	2201      	movs	r2, #1
 8012332:	9203      	str	r2, [sp, #12]
 8012334:	68ba      	ldr	r2, [r7, #8]
 8012336:	9202      	str	r2, [sp, #8]
 8012338:	4a06      	ldr	r2, [pc, #24]	; (8012354 <etharp_request_dst+0x40>)
 801233a:	9201      	str	r2, [sp, #4]
 801233c:	9300      	str	r3, [sp, #0]
 801233e:	4603      	mov	r3, r0
 8012340:	687a      	ldr	r2, [r7, #4]
 8012342:	68f8      	ldr	r0, [r7, #12]
 8012344:	f7ff ff5a 	bl	80121fc <etharp_raw>
 8012348:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801234a:	4618      	mov	r0, r3
 801234c:	3710      	adds	r7, #16
 801234e:	46bd      	mov	sp, r7
 8012350:	bd80      	pop	{r7, pc}
 8012352:	bf00      	nop
 8012354:	0801a258 	.word	0x0801a258

08012358 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012358:	b580      	push	{r7, lr}
 801235a:	b082      	sub	sp, #8
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
 8012360:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012362:	4a05      	ldr	r2, [pc, #20]	; (8012378 <etharp_request+0x20>)
 8012364:	6839      	ldr	r1, [r7, #0]
 8012366:	6878      	ldr	r0, [r7, #4]
 8012368:	f7ff ffd4 	bl	8012314 <etharp_request_dst>
 801236c:	4603      	mov	r3, r0
}
 801236e:	4618      	mov	r0, r3
 8012370:	3708      	adds	r7, #8
 8012372:	46bd      	mov	sp, r7
 8012374:	bd80      	pop	{r7, pc}
 8012376:	bf00      	nop
 8012378:	0801a250 	.word	0x0801a250

0801237c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b08e      	sub	sp, #56	; 0x38
 8012380:	af04      	add	r7, sp, #16
 8012382:	6078      	str	r0, [r7, #4]
 8012384:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012386:	4b79      	ldr	r3, [pc, #484]	; (801256c <icmp_input+0x1f0>)
 8012388:	689b      	ldr	r3, [r3, #8]
 801238a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801238e:	781b      	ldrb	r3, [r3, #0]
 8012390:	f003 030f 	and.w	r3, r3, #15
 8012394:	b2db      	uxtb	r3, r3
 8012396:	009b      	lsls	r3, r3, #2
 8012398:	b2db      	uxtb	r3, r3
 801239a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801239c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801239e:	2b13      	cmp	r3, #19
 80123a0:	f240 80cd 	bls.w	801253e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	895b      	ldrh	r3, [r3, #10]
 80123a8:	2b03      	cmp	r3, #3
 80123aa:	f240 80ca 	bls.w	8012542 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	685b      	ldr	r3, [r3, #4]
 80123b2:	781b      	ldrb	r3, [r3, #0]
 80123b4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80123b8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80123bc:	2b00      	cmp	r3, #0
 80123be:	f000 80b7 	beq.w	8012530 <icmp_input+0x1b4>
 80123c2:	2b08      	cmp	r3, #8
 80123c4:	f040 80b7 	bne.w	8012536 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80123c8:	4b69      	ldr	r3, [pc, #420]	; (8012570 <icmp_input+0x1f4>)
 80123ca:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80123cc:	4b67      	ldr	r3, [pc, #412]	; (801256c <icmp_input+0x1f0>)
 80123ce:	695b      	ldr	r3, [r3, #20]
 80123d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80123d4:	2be0      	cmp	r3, #224	; 0xe0
 80123d6:	f000 80bb 	beq.w	8012550 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80123da:	4b64      	ldr	r3, [pc, #400]	; (801256c <icmp_input+0x1f0>)
 80123dc:	695b      	ldr	r3, [r3, #20]
 80123de:	4a63      	ldr	r2, [pc, #396]	; (801256c <icmp_input+0x1f0>)
 80123e0:	6812      	ldr	r2, [r2, #0]
 80123e2:	4611      	mov	r1, r2
 80123e4:	4618      	mov	r0, r3
 80123e6:	f000 fc0b 	bl	8012c00 <ip4_addr_isbroadcast_u32>
 80123ea:	4603      	mov	r3, r0
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	f040 80b1 	bne.w	8012554 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	891b      	ldrh	r3, [r3, #8]
 80123f6:	2b07      	cmp	r3, #7
 80123f8:	f240 80a5 	bls.w	8012546 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80123fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80123fe:	330e      	adds	r3, #14
 8012400:	4619      	mov	r1, r3
 8012402:	6878      	ldr	r0, [r7, #4]
 8012404:	f7f6 ff40 	bl	8009288 <pbuf_add_header>
 8012408:	4603      	mov	r3, r0
 801240a:	2b00      	cmp	r3, #0
 801240c:	d04b      	beq.n	80124a6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	891a      	ldrh	r2, [r3, #8]
 8012412:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012414:	4413      	add	r3, r2
 8012416:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	891b      	ldrh	r3, [r3, #8]
 801241c:	8b7a      	ldrh	r2, [r7, #26]
 801241e:	429a      	cmp	r2, r3
 8012420:	f0c0 809a 	bcc.w	8012558 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012424:	8b7b      	ldrh	r3, [r7, #26]
 8012426:	f44f 7220 	mov.w	r2, #640	; 0x280
 801242a:	4619      	mov	r1, r3
 801242c:	200e      	movs	r0, #14
 801242e:	f7f6 fcdd 	bl	8008dec <pbuf_alloc>
 8012432:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012434:	697b      	ldr	r3, [r7, #20]
 8012436:	2b00      	cmp	r3, #0
 8012438:	f000 8090 	beq.w	801255c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801243c:	697b      	ldr	r3, [r7, #20]
 801243e:	895b      	ldrh	r3, [r3, #10]
 8012440:	461a      	mov	r2, r3
 8012442:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012444:	3308      	adds	r3, #8
 8012446:	429a      	cmp	r2, r3
 8012448:	d203      	bcs.n	8012452 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801244a:	6978      	ldr	r0, [r7, #20]
 801244c:	f7f6 ffb2 	bl	80093b4 <pbuf_free>
          goto icmperr;
 8012450:	e085      	b.n	801255e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012452:	697b      	ldr	r3, [r7, #20]
 8012454:	685b      	ldr	r3, [r3, #4]
 8012456:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012458:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801245a:	4618      	mov	r0, r3
 801245c:	f001 fbea 	bl	8013c34 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012460:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012462:	4619      	mov	r1, r3
 8012464:	6978      	ldr	r0, [r7, #20]
 8012466:	f7f6 ff1f 	bl	80092a8 <pbuf_remove_header>
 801246a:	4603      	mov	r3, r0
 801246c:	2b00      	cmp	r3, #0
 801246e:	d009      	beq.n	8012484 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012470:	4b40      	ldr	r3, [pc, #256]	; (8012574 <icmp_input+0x1f8>)
 8012472:	22b6      	movs	r2, #182	; 0xb6
 8012474:	4940      	ldr	r1, [pc, #256]	; (8012578 <icmp_input+0x1fc>)
 8012476:	4841      	ldr	r0, [pc, #260]	; (801257c <icmp_input+0x200>)
 8012478:	f001 fbf2 	bl	8013c60 <iprintf>
          pbuf_free(r);
 801247c:	6978      	ldr	r0, [r7, #20]
 801247e:	f7f6 ff99 	bl	80093b4 <pbuf_free>
          goto icmperr;
 8012482:	e06c      	b.n	801255e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012484:	6879      	ldr	r1, [r7, #4]
 8012486:	6978      	ldr	r0, [r7, #20]
 8012488:	f7f7 f8bc 	bl	8009604 <pbuf_copy>
 801248c:	4603      	mov	r3, r0
 801248e:	2b00      	cmp	r3, #0
 8012490:	d003      	beq.n	801249a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012492:	6978      	ldr	r0, [r7, #20]
 8012494:	f7f6 ff8e 	bl	80093b4 <pbuf_free>
          goto icmperr;
 8012498:	e061      	b.n	801255e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801249a:	6878      	ldr	r0, [r7, #4]
 801249c:	f7f6 ff8a 	bl	80093b4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80124a0:	697b      	ldr	r3, [r7, #20]
 80124a2:	607b      	str	r3, [r7, #4]
 80124a4:	e00f      	b.n	80124c6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80124a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80124a8:	330e      	adds	r3, #14
 80124aa:	4619      	mov	r1, r3
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f7f6 fefb 	bl	80092a8 <pbuf_remove_header>
 80124b2:	4603      	mov	r3, r0
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d006      	beq.n	80124c6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80124b8:	4b2e      	ldr	r3, [pc, #184]	; (8012574 <icmp_input+0x1f8>)
 80124ba:	22c7      	movs	r2, #199	; 0xc7
 80124bc:	4930      	ldr	r1, [pc, #192]	; (8012580 <icmp_input+0x204>)
 80124be:	482f      	ldr	r0, [pc, #188]	; (801257c <icmp_input+0x200>)
 80124c0:	f001 fbce 	bl	8013c60 <iprintf>
          goto icmperr;
 80124c4:	e04b      	b.n	801255e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	685b      	ldr	r3, [r3, #4]
 80124ca:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80124cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80124ce:	4619      	mov	r1, r3
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f7f6 fed9 	bl	8009288 <pbuf_add_header>
 80124d6:	4603      	mov	r3, r0
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d12b      	bne.n	8012534 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	685b      	ldr	r3, [r3, #4]
 80124e0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80124e2:	69fb      	ldr	r3, [r7, #28]
 80124e4:	681a      	ldr	r2, [r3, #0]
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80124ea:	4b20      	ldr	r3, [pc, #128]	; (801256c <icmp_input+0x1f0>)
 80124ec:	691a      	ldr	r2, [r3, #16]
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80124f2:	693b      	ldr	r3, [r7, #16]
 80124f4:	2200      	movs	r2, #0
 80124f6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80124f8:	693b      	ldr	r3, [r7, #16]
 80124fa:	2200      	movs	r2, #0
 80124fc:	709a      	strb	r2, [r3, #2]
 80124fe:	2200      	movs	r2, #0
 8012500:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	22ff      	movs	r2, #255	; 0xff
 8012506:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	2200      	movs	r2, #0
 801250c:	729a      	strb	r2, [r3, #10]
 801250e:	2200      	movs	r2, #0
 8012510:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	9302      	str	r3, [sp, #8]
 8012516:	2301      	movs	r3, #1
 8012518:	9301      	str	r3, [sp, #4]
 801251a:	2300      	movs	r3, #0
 801251c:	9300      	str	r3, [sp, #0]
 801251e:	23ff      	movs	r3, #255	; 0xff
 8012520:	2200      	movs	r2, #0
 8012522:	69f9      	ldr	r1, [r7, #28]
 8012524:	6878      	ldr	r0, [r7, #4]
 8012526:	f000 fa93 	bl	8012a50 <ip4_output_if>
 801252a:	4603      	mov	r3, r0
 801252c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801252e:	e001      	b.n	8012534 <icmp_input+0x1b8>
      break;
 8012530:	bf00      	nop
 8012532:	e000      	b.n	8012536 <icmp_input+0x1ba>
      break;
 8012534:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012536:	6878      	ldr	r0, [r7, #4]
 8012538:	f7f6 ff3c 	bl	80093b4 <pbuf_free>
  return;
 801253c:	e013      	b.n	8012566 <icmp_input+0x1ea>
    goto lenerr;
 801253e:	bf00      	nop
 8012540:	e002      	b.n	8012548 <icmp_input+0x1cc>
    goto lenerr;
 8012542:	bf00      	nop
 8012544:	e000      	b.n	8012548 <icmp_input+0x1cc>
        goto lenerr;
 8012546:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012548:	6878      	ldr	r0, [r7, #4]
 801254a:	f7f6 ff33 	bl	80093b4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801254e:	e00a      	b.n	8012566 <icmp_input+0x1ea>
        goto icmperr;
 8012550:	bf00      	nop
 8012552:	e004      	b.n	801255e <icmp_input+0x1e2>
        goto icmperr;
 8012554:	bf00      	nop
 8012556:	e002      	b.n	801255e <icmp_input+0x1e2>
          goto icmperr;
 8012558:	bf00      	nop
 801255a:	e000      	b.n	801255e <icmp_input+0x1e2>
          goto icmperr;
 801255c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801255e:	6878      	ldr	r0, [r7, #4]
 8012560:	f7f6 ff28 	bl	80093b4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012564:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012566:	3728      	adds	r7, #40	; 0x28
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}
 801256c:	20005770 	.word	0x20005770
 8012570:	20005784 	.word	0x20005784
 8012574:	080177d0 	.word	0x080177d0
 8012578:	08017808 	.word	0x08017808
 801257c:	08017840 	.word	0x08017840
 8012580:	08017868 	.word	0x08017868

08012584 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b082      	sub	sp, #8
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
 801258c:	460b      	mov	r3, r1
 801258e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012590:	78fb      	ldrb	r3, [r7, #3]
 8012592:	461a      	mov	r2, r3
 8012594:	2103      	movs	r1, #3
 8012596:	6878      	ldr	r0, [r7, #4]
 8012598:	f000 f814 	bl	80125c4 <icmp_send_response>
}
 801259c:	bf00      	nop
 801259e:	3708      	adds	r7, #8
 80125a0:	46bd      	mov	sp, r7
 80125a2:	bd80      	pop	{r7, pc}

080125a4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b082      	sub	sp, #8
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	6078      	str	r0, [r7, #4]
 80125ac:	460b      	mov	r3, r1
 80125ae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80125b0:	78fb      	ldrb	r3, [r7, #3]
 80125b2:	461a      	mov	r2, r3
 80125b4:	210b      	movs	r1, #11
 80125b6:	6878      	ldr	r0, [r7, #4]
 80125b8:	f000 f804 	bl	80125c4 <icmp_send_response>
}
 80125bc:	bf00      	nop
 80125be:	3708      	adds	r7, #8
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}

080125c4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b08c      	sub	sp, #48	; 0x30
 80125c8:	af04      	add	r7, sp, #16
 80125ca:	6078      	str	r0, [r7, #4]
 80125cc:	460b      	mov	r3, r1
 80125ce:	70fb      	strb	r3, [r7, #3]
 80125d0:	4613      	mov	r3, r2
 80125d2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80125d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80125d8:	2124      	movs	r1, #36	; 0x24
 80125da:	2022      	movs	r0, #34	; 0x22
 80125dc:	f7f6 fc06 	bl	8008dec <pbuf_alloc>
 80125e0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80125e2:	69fb      	ldr	r3, [r7, #28]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d04c      	beq.n	8012682 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80125e8:	69fb      	ldr	r3, [r7, #28]
 80125ea:	895b      	ldrh	r3, [r3, #10]
 80125ec:	2b23      	cmp	r3, #35	; 0x23
 80125ee:	d806      	bhi.n	80125fe <icmp_send_response+0x3a>
 80125f0:	4b26      	ldr	r3, [pc, #152]	; (801268c <icmp_send_response+0xc8>)
 80125f2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80125f6:	4926      	ldr	r1, [pc, #152]	; (8012690 <icmp_send_response+0xcc>)
 80125f8:	4826      	ldr	r0, [pc, #152]	; (8012694 <icmp_send_response+0xd0>)
 80125fa:	f001 fb31 	bl	8013c60 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	685b      	ldr	r3, [r3, #4]
 8012602:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012604:	69fb      	ldr	r3, [r7, #28]
 8012606:	685b      	ldr	r3, [r3, #4]
 8012608:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801260a:	697b      	ldr	r3, [r7, #20]
 801260c:	78fa      	ldrb	r2, [r7, #3]
 801260e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8012610:	697b      	ldr	r3, [r7, #20]
 8012612:	78ba      	ldrb	r2, [r7, #2]
 8012614:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012616:	697b      	ldr	r3, [r7, #20]
 8012618:	2200      	movs	r2, #0
 801261a:	711a      	strb	r2, [r3, #4]
 801261c:	2200      	movs	r2, #0
 801261e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012620:	697b      	ldr	r3, [r7, #20]
 8012622:	2200      	movs	r2, #0
 8012624:	719a      	strb	r2, [r3, #6]
 8012626:	2200      	movs	r2, #0
 8012628:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801262a:	69fb      	ldr	r3, [r7, #28]
 801262c:	685b      	ldr	r3, [r3, #4]
 801262e:	f103 0008 	add.w	r0, r3, #8
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	685b      	ldr	r3, [r3, #4]
 8012636:	221c      	movs	r2, #28
 8012638:	4619      	mov	r1, r3
 801263a:	f001 fafb 	bl	8013c34 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801263e:	69bb      	ldr	r3, [r7, #24]
 8012640:	68db      	ldr	r3, [r3, #12]
 8012642:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012644:	f107 030c 	add.w	r3, r7, #12
 8012648:	4618      	mov	r0, r3
 801264a:	f000 f825 	bl	8012698 <ip4_route>
 801264e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012650:	693b      	ldr	r3, [r7, #16]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d011      	beq.n	801267a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012656:	697b      	ldr	r3, [r7, #20]
 8012658:	2200      	movs	r2, #0
 801265a:	709a      	strb	r2, [r3, #2]
 801265c:	2200      	movs	r2, #0
 801265e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012660:	f107 020c 	add.w	r2, r7, #12
 8012664:	693b      	ldr	r3, [r7, #16]
 8012666:	9302      	str	r3, [sp, #8]
 8012668:	2301      	movs	r3, #1
 801266a:	9301      	str	r3, [sp, #4]
 801266c:	2300      	movs	r3, #0
 801266e:	9300      	str	r3, [sp, #0]
 8012670:	23ff      	movs	r3, #255	; 0xff
 8012672:	2100      	movs	r1, #0
 8012674:	69f8      	ldr	r0, [r7, #28]
 8012676:	f000 f9eb 	bl	8012a50 <ip4_output_if>
  }
  pbuf_free(q);
 801267a:	69f8      	ldr	r0, [r7, #28]
 801267c:	f7f6 fe9a 	bl	80093b4 <pbuf_free>
 8012680:	e000      	b.n	8012684 <icmp_send_response+0xc0>
    return;
 8012682:	bf00      	nop
}
 8012684:	3720      	adds	r7, #32
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}
 801268a:	bf00      	nop
 801268c:	080177d0 	.word	0x080177d0
 8012690:	0801789c 	.word	0x0801789c
 8012694:	08017840 	.word	0x08017840

08012698 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012698:	b480      	push	{r7}
 801269a:	b085      	sub	sp, #20
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80126a0:	4b33      	ldr	r3, [pc, #204]	; (8012770 <ip4_route+0xd8>)
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	60fb      	str	r3, [r7, #12]
 80126a6:	e036      	b.n	8012716 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80126ae:	f003 0301 	and.w	r3, r3, #1
 80126b2:	b2db      	uxtb	r3, r3
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d02b      	beq.n	8012710 <ip4_route+0x78>
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80126be:	089b      	lsrs	r3, r3, #2
 80126c0:	f003 0301 	and.w	r3, r3, #1
 80126c4:	b2db      	uxtb	r3, r3
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d022      	beq.n	8012710 <ip4_route+0x78>
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	3304      	adds	r3, #4
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d01d      	beq.n	8012710 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	681a      	ldr	r2, [r3, #0]
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	3304      	adds	r3, #4
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	405a      	eors	r2, r3
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	3308      	adds	r3, #8
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	4013      	ands	r3, r2
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d101      	bne.n	80126f0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	e038      	b.n	8012762 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80126f6:	f003 0302 	and.w	r3, r3, #2
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d108      	bne.n	8012710 <ip4_route+0x78>
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	681a      	ldr	r2, [r3, #0]
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	330c      	adds	r3, #12
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	429a      	cmp	r2, r3
 801270a:	d101      	bne.n	8012710 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	e028      	b.n	8012762 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	60fb      	str	r3, [r7, #12]
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d1c5      	bne.n	80126a8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801271c:	4b15      	ldr	r3, [pc, #84]	; (8012774 <ip4_route+0xdc>)
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d01a      	beq.n	801275a <ip4_route+0xc2>
 8012724:	4b13      	ldr	r3, [pc, #76]	; (8012774 <ip4_route+0xdc>)
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801272c:	f003 0301 	and.w	r3, r3, #1
 8012730:	2b00      	cmp	r3, #0
 8012732:	d012      	beq.n	801275a <ip4_route+0xc2>
 8012734:	4b0f      	ldr	r3, [pc, #60]	; (8012774 <ip4_route+0xdc>)
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801273c:	f003 0304 	and.w	r3, r3, #4
 8012740:	2b00      	cmp	r3, #0
 8012742:	d00a      	beq.n	801275a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012744:	4b0b      	ldr	r3, [pc, #44]	; (8012774 <ip4_route+0xdc>)
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	3304      	adds	r3, #4
 801274a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801274c:	2b00      	cmp	r3, #0
 801274e:	d004      	beq.n	801275a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	b2db      	uxtb	r3, r3
 8012756:	2b7f      	cmp	r3, #127	; 0x7f
 8012758:	d101      	bne.n	801275e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801275a:	2300      	movs	r3, #0
 801275c:	e001      	b.n	8012762 <ip4_route+0xca>
  }

  return netif_default;
 801275e:	4b05      	ldr	r3, [pc, #20]	; (8012774 <ip4_route+0xdc>)
 8012760:	681b      	ldr	r3, [r3, #0]
}
 8012762:	4618      	mov	r0, r3
 8012764:	3714      	adds	r7, #20
 8012766:	46bd      	mov	sp, r7
 8012768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276c:	4770      	bx	lr
 801276e:	bf00      	nop
 8012770:	2000aeb4 	.word	0x2000aeb4
 8012774:	2000aeb8 	.word	0x2000aeb8

08012778 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012778:	b580      	push	{r7, lr}
 801277a:	b082      	sub	sp, #8
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012786:	f003 0301 	and.w	r3, r3, #1
 801278a:	b2db      	uxtb	r3, r3
 801278c:	2b00      	cmp	r3, #0
 801278e:	d016      	beq.n	80127be <ip4_input_accept+0x46>
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	3304      	adds	r3, #4
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d011      	beq.n	80127be <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801279a:	4b0b      	ldr	r3, [pc, #44]	; (80127c8 <ip4_input_accept+0x50>)
 801279c:	695a      	ldr	r2, [r3, #20]
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	3304      	adds	r3, #4
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	429a      	cmp	r2, r3
 80127a6:	d008      	beq.n	80127ba <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80127a8:	4b07      	ldr	r3, [pc, #28]	; (80127c8 <ip4_input_accept+0x50>)
 80127aa:	695b      	ldr	r3, [r3, #20]
 80127ac:	6879      	ldr	r1, [r7, #4]
 80127ae:	4618      	mov	r0, r3
 80127b0:	f000 fa26 	bl	8012c00 <ip4_addr_isbroadcast_u32>
 80127b4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d001      	beq.n	80127be <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80127ba:	2301      	movs	r3, #1
 80127bc:	e000      	b.n	80127c0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80127be:	2300      	movs	r3, #0
}
 80127c0:	4618      	mov	r0, r3
 80127c2:	3708      	adds	r7, #8
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd80      	pop	{r7, pc}
 80127c8:	20005770 	.word	0x20005770

080127cc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b088      	sub	sp, #32
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
 80127d4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80127d6:	2301      	movs	r3, #1
 80127d8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	685b      	ldr	r3, [r3, #4]
 80127de:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80127e0:	69fb      	ldr	r3, [r7, #28]
 80127e2:	781b      	ldrb	r3, [r3, #0]
 80127e4:	091b      	lsrs	r3, r3, #4
 80127e6:	b2db      	uxtb	r3, r3
 80127e8:	2b04      	cmp	r3, #4
 80127ea:	d004      	beq.n	80127f6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80127ec:	6878      	ldr	r0, [r7, #4]
 80127ee:	f7f6 fde1 	bl	80093b4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80127f2:	2300      	movs	r3, #0
 80127f4:	e123      	b.n	8012a3e <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80127f6:	69fb      	ldr	r3, [r7, #28]
 80127f8:	781b      	ldrb	r3, [r3, #0]
 80127fa:	f003 030f 	and.w	r3, r3, #15
 80127fe:	b2db      	uxtb	r3, r3
 8012800:	009b      	lsls	r3, r3, #2
 8012802:	b2db      	uxtb	r3, r3
 8012804:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012806:	69fb      	ldr	r3, [r7, #28]
 8012808:	885b      	ldrh	r3, [r3, #2]
 801280a:	b29b      	uxth	r3, r3
 801280c:	4618      	mov	r0, r3
 801280e:	f7f5 fa67 	bl	8007ce0 <lwip_htons>
 8012812:	4603      	mov	r3, r0
 8012814:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	891b      	ldrh	r3, [r3, #8]
 801281a:	8a3a      	ldrh	r2, [r7, #16]
 801281c:	429a      	cmp	r2, r3
 801281e:	d204      	bcs.n	801282a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8012820:	8a3b      	ldrh	r3, [r7, #16]
 8012822:	4619      	mov	r1, r3
 8012824:	6878      	ldr	r0, [r7, #4]
 8012826:	f7f6 fc3f 	bl	80090a8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	895b      	ldrh	r3, [r3, #10]
 801282e:	8a7a      	ldrh	r2, [r7, #18]
 8012830:	429a      	cmp	r2, r3
 8012832:	d807      	bhi.n	8012844 <ip4_input+0x78>
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	891b      	ldrh	r3, [r3, #8]
 8012838:	8a3a      	ldrh	r2, [r7, #16]
 801283a:	429a      	cmp	r2, r3
 801283c:	d802      	bhi.n	8012844 <ip4_input+0x78>
 801283e:	8a7b      	ldrh	r3, [r7, #18]
 8012840:	2b13      	cmp	r3, #19
 8012842:	d804      	bhi.n	801284e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012844:	6878      	ldr	r0, [r7, #4]
 8012846:	f7f6 fdb5 	bl	80093b4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801284a:	2300      	movs	r3, #0
 801284c:	e0f7      	b.n	8012a3e <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801284e:	69fb      	ldr	r3, [r7, #28]
 8012850:	691b      	ldr	r3, [r3, #16]
 8012852:	4a7d      	ldr	r2, [pc, #500]	; (8012a48 <ip4_input+0x27c>)
 8012854:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012856:	69fb      	ldr	r3, [r7, #28]
 8012858:	68db      	ldr	r3, [r3, #12]
 801285a:	4a7b      	ldr	r2, [pc, #492]	; (8012a48 <ip4_input+0x27c>)
 801285c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801285e:	4b7a      	ldr	r3, [pc, #488]	; (8012a48 <ip4_input+0x27c>)
 8012860:	695b      	ldr	r3, [r3, #20]
 8012862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012866:	2be0      	cmp	r3, #224	; 0xe0
 8012868:	d112      	bne.n	8012890 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801286a:	683b      	ldr	r3, [r7, #0]
 801286c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012870:	f003 0301 	and.w	r3, r3, #1
 8012874:	b2db      	uxtb	r3, r3
 8012876:	2b00      	cmp	r3, #0
 8012878:	d007      	beq.n	801288a <ip4_input+0xbe>
 801287a:	683b      	ldr	r3, [r7, #0]
 801287c:	3304      	adds	r3, #4
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d002      	beq.n	801288a <ip4_input+0xbe>
      netif = inp;
 8012884:	683b      	ldr	r3, [r7, #0]
 8012886:	61bb      	str	r3, [r7, #24]
 8012888:	e02a      	b.n	80128e0 <ip4_input+0x114>
    } else {
      netif = NULL;
 801288a:	2300      	movs	r3, #0
 801288c:	61bb      	str	r3, [r7, #24]
 801288e:	e027      	b.n	80128e0 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012890:	6838      	ldr	r0, [r7, #0]
 8012892:	f7ff ff71 	bl	8012778 <ip4_input_accept>
 8012896:	4603      	mov	r3, r0
 8012898:	2b00      	cmp	r3, #0
 801289a:	d002      	beq.n	80128a2 <ip4_input+0xd6>
      netif = inp;
 801289c:	683b      	ldr	r3, [r7, #0]
 801289e:	61bb      	str	r3, [r7, #24]
 80128a0:	e01e      	b.n	80128e0 <ip4_input+0x114>
    } else {
      netif = NULL;
 80128a2:	2300      	movs	r3, #0
 80128a4:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80128a6:	4b68      	ldr	r3, [pc, #416]	; (8012a48 <ip4_input+0x27c>)
 80128a8:	695b      	ldr	r3, [r3, #20]
 80128aa:	b2db      	uxtb	r3, r3
 80128ac:	2b7f      	cmp	r3, #127	; 0x7f
 80128ae:	d017      	beq.n	80128e0 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80128b0:	4b66      	ldr	r3, [pc, #408]	; (8012a4c <ip4_input+0x280>)
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	61bb      	str	r3, [r7, #24]
 80128b6:	e00e      	b.n	80128d6 <ip4_input+0x10a>
          if (netif == inp) {
 80128b8:	69ba      	ldr	r2, [r7, #24]
 80128ba:	683b      	ldr	r3, [r7, #0]
 80128bc:	429a      	cmp	r2, r3
 80128be:	d006      	beq.n	80128ce <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80128c0:	69b8      	ldr	r0, [r7, #24]
 80128c2:	f7ff ff59 	bl	8012778 <ip4_input_accept>
 80128c6:	4603      	mov	r3, r0
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d108      	bne.n	80128de <ip4_input+0x112>
 80128cc:	e000      	b.n	80128d0 <ip4_input+0x104>
            continue;
 80128ce:	bf00      	nop
        NETIF_FOREACH(netif) {
 80128d0:	69bb      	ldr	r3, [r7, #24]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	61bb      	str	r3, [r7, #24]
 80128d6:	69bb      	ldr	r3, [r7, #24]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d1ed      	bne.n	80128b8 <ip4_input+0xec>
 80128dc:	e000      	b.n	80128e0 <ip4_input+0x114>
            break;
 80128de:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80128e0:	69bb      	ldr	r3, [r7, #24]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d111      	bne.n	801290a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80128e6:	69fb      	ldr	r3, [r7, #28]
 80128e8:	7a5b      	ldrb	r3, [r3, #9]
 80128ea:	2b11      	cmp	r3, #17
 80128ec:	d10d      	bne.n	801290a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80128ee:	8a7b      	ldrh	r3, [r7, #18]
 80128f0:	69fa      	ldr	r2, [r7, #28]
 80128f2:	4413      	add	r3, r2
 80128f4:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	885b      	ldrh	r3, [r3, #2]
 80128fa:	b29b      	uxth	r3, r3
 80128fc:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8012900:	d103      	bne.n	801290a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8012902:	683b      	ldr	r3, [r7, #0]
 8012904:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8012906:	2300      	movs	r3, #0
 8012908:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801290a:	697b      	ldr	r3, [r7, #20]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d017      	beq.n	8012940 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8012910:	4b4d      	ldr	r3, [pc, #308]	; (8012a48 <ip4_input+0x27c>)
 8012912:	691b      	ldr	r3, [r3, #16]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d013      	beq.n	8012940 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012918:	4b4b      	ldr	r3, [pc, #300]	; (8012a48 <ip4_input+0x27c>)
 801291a:	691b      	ldr	r3, [r3, #16]
 801291c:	6839      	ldr	r1, [r7, #0]
 801291e:	4618      	mov	r0, r3
 8012920:	f000 f96e 	bl	8012c00 <ip4_addr_isbroadcast_u32>
 8012924:	4603      	mov	r3, r0
 8012926:	2b00      	cmp	r3, #0
 8012928:	d105      	bne.n	8012936 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801292a:	4b47      	ldr	r3, [pc, #284]	; (8012a48 <ip4_input+0x27c>)
 801292c:	691b      	ldr	r3, [r3, #16]
 801292e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012932:	2be0      	cmp	r3, #224	; 0xe0
 8012934:	d104      	bne.n	8012940 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012936:	6878      	ldr	r0, [r7, #4]
 8012938:	f7f6 fd3c 	bl	80093b4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801293c:	2300      	movs	r3, #0
 801293e:	e07e      	b.n	8012a3e <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012940:	69bb      	ldr	r3, [r7, #24]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d104      	bne.n	8012950 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012946:	6878      	ldr	r0, [r7, #4]
 8012948:	f7f6 fd34 	bl	80093b4 <pbuf_free>
    return ERR_OK;
 801294c:	2300      	movs	r3, #0
 801294e:	e076      	b.n	8012a3e <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012950:	69fb      	ldr	r3, [r7, #28]
 8012952:	88db      	ldrh	r3, [r3, #6]
 8012954:	b29b      	uxth	r3, r3
 8012956:	461a      	mov	r2, r3
 8012958:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801295c:	4013      	ands	r3, r2
 801295e:	2b00      	cmp	r3, #0
 8012960:	d00b      	beq.n	801297a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012962:	6878      	ldr	r0, [r7, #4]
 8012964:	f000 fd22 	bl	80133ac <ip4_reass>
 8012968:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d101      	bne.n	8012974 <ip4_input+0x1a8>
      return ERR_OK;
 8012970:	2300      	movs	r3, #0
 8012972:	e064      	b.n	8012a3e <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	685b      	ldr	r3, [r3, #4]
 8012978:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801297a:	4a33      	ldr	r2, [pc, #204]	; (8012a48 <ip4_input+0x27c>)
 801297c:	69bb      	ldr	r3, [r7, #24]
 801297e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012980:	4a31      	ldr	r2, [pc, #196]	; (8012a48 <ip4_input+0x27c>)
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012986:	4a30      	ldr	r2, [pc, #192]	; (8012a48 <ip4_input+0x27c>)
 8012988:	69fb      	ldr	r3, [r7, #28]
 801298a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801298c:	69fb      	ldr	r3, [r7, #28]
 801298e:	781b      	ldrb	r3, [r3, #0]
 8012990:	f003 030f 	and.w	r3, r3, #15
 8012994:	b2db      	uxtb	r3, r3
 8012996:	009b      	lsls	r3, r3, #2
 8012998:	b2db      	uxtb	r3, r3
 801299a:	b29a      	uxth	r2, r3
 801299c:	4b2a      	ldr	r3, [pc, #168]	; (8012a48 <ip4_input+0x27c>)
 801299e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80129a0:	8a7b      	ldrh	r3, [r7, #18]
 80129a2:	4619      	mov	r1, r3
 80129a4:	6878      	ldr	r0, [r7, #4]
 80129a6:	f7f6 fc7f 	bl	80092a8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80129aa:	69fb      	ldr	r3, [r7, #28]
 80129ac:	7a5b      	ldrb	r3, [r3, #9]
 80129ae:	2b11      	cmp	r3, #17
 80129b0:	d006      	beq.n	80129c0 <ip4_input+0x1f4>
 80129b2:	2b11      	cmp	r3, #17
 80129b4:	dc13      	bgt.n	80129de <ip4_input+0x212>
 80129b6:	2b01      	cmp	r3, #1
 80129b8:	d00c      	beq.n	80129d4 <ip4_input+0x208>
 80129ba:	2b06      	cmp	r3, #6
 80129bc:	d005      	beq.n	80129ca <ip4_input+0x1fe>
 80129be:	e00e      	b.n	80129de <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80129c0:	6839      	ldr	r1, [r7, #0]
 80129c2:	6878      	ldr	r0, [r7, #4]
 80129c4:	f7fc fae8 	bl	800ef98 <udp_input>
        break;
 80129c8:	e026      	b.n	8012a18 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80129ca:	6839      	ldr	r1, [r7, #0]
 80129cc:	6878      	ldr	r0, [r7, #4]
 80129ce:	f7f8 fb29 	bl	800b024 <tcp_input>
        break;
 80129d2:	e021      	b.n	8012a18 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80129d4:	6839      	ldr	r1, [r7, #0]
 80129d6:	6878      	ldr	r0, [r7, #4]
 80129d8:	f7ff fcd0 	bl	801237c <icmp_input>
        break;
 80129dc:	e01c      	b.n	8012a18 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80129de:	4b1a      	ldr	r3, [pc, #104]	; (8012a48 <ip4_input+0x27c>)
 80129e0:	695b      	ldr	r3, [r3, #20]
 80129e2:	69b9      	ldr	r1, [r7, #24]
 80129e4:	4618      	mov	r0, r3
 80129e6:	f000 f90b 	bl	8012c00 <ip4_addr_isbroadcast_u32>
 80129ea:	4603      	mov	r3, r0
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d10f      	bne.n	8012a10 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80129f0:	4b15      	ldr	r3, [pc, #84]	; (8012a48 <ip4_input+0x27c>)
 80129f2:	695b      	ldr	r3, [r3, #20]
 80129f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80129f8:	2be0      	cmp	r3, #224	; 0xe0
 80129fa:	d009      	beq.n	8012a10 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80129fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012a00:	4619      	mov	r1, r3
 8012a02:	6878      	ldr	r0, [r7, #4]
 8012a04:	f7f6 fcc3 	bl	800938e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012a08:	2102      	movs	r1, #2
 8012a0a:	6878      	ldr	r0, [r7, #4]
 8012a0c:	f7ff fdba 	bl	8012584 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012a10:	6878      	ldr	r0, [r7, #4]
 8012a12:	f7f6 fccf 	bl	80093b4 <pbuf_free>
        break;
 8012a16:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012a18:	4b0b      	ldr	r3, [pc, #44]	; (8012a48 <ip4_input+0x27c>)
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012a1e:	4b0a      	ldr	r3, [pc, #40]	; (8012a48 <ip4_input+0x27c>)
 8012a20:	2200      	movs	r2, #0
 8012a22:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012a24:	4b08      	ldr	r3, [pc, #32]	; (8012a48 <ip4_input+0x27c>)
 8012a26:	2200      	movs	r2, #0
 8012a28:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012a2a:	4b07      	ldr	r3, [pc, #28]	; (8012a48 <ip4_input+0x27c>)
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012a30:	4b05      	ldr	r3, [pc, #20]	; (8012a48 <ip4_input+0x27c>)
 8012a32:	2200      	movs	r2, #0
 8012a34:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012a36:	4b04      	ldr	r3, [pc, #16]	; (8012a48 <ip4_input+0x27c>)
 8012a38:	2200      	movs	r2, #0
 8012a3a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012a3c:	2300      	movs	r3, #0
}
 8012a3e:	4618      	mov	r0, r3
 8012a40:	3720      	adds	r7, #32
 8012a42:	46bd      	mov	sp, r7
 8012a44:	bd80      	pop	{r7, pc}
 8012a46:	bf00      	nop
 8012a48:	20005770 	.word	0x20005770
 8012a4c:	2000aeb4 	.word	0x2000aeb4

08012a50 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b08a      	sub	sp, #40	; 0x28
 8012a54:	af04      	add	r7, sp, #16
 8012a56:	60f8      	str	r0, [r7, #12]
 8012a58:	60b9      	str	r1, [r7, #8]
 8012a5a:	607a      	str	r2, [r7, #4]
 8012a5c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012a5e:	68bb      	ldr	r3, [r7, #8]
 8012a60:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d009      	beq.n	8012a7c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012a68:	68bb      	ldr	r3, [r7, #8]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d003      	beq.n	8012a76 <ip4_output_if+0x26>
 8012a6e:	68bb      	ldr	r3, [r7, #8]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d102      	bne.n	8012a7c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a78:	3304      	adds	r3, #4
 8012a7a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012a7c:	78fa      	ldrb	r2, [r7, #3]
 8012a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a80:	9302      	str	r3, [sp, #8]
 8012a82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012a86:	9301      	str	r3, [sp, #4]
 8012a88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012a8c:	9300      	str	r3, [sp, #0]
 8012a8e:	4613      	mov	r3, r2
 8012a90:	687a      	ldr	r2, [r7, #4]
 8012a92:	6979      	ldr	r1, [r7, #20]
 8012a94:	68f8      	ldr	r0, [r7, #12]
 8012a96:	f000 f805 	bl	8012aa4 <ip4_output_if_src>
 8012a9a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	3718      	adds	r7, #24
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	bd80      	pop	{r7, pc}

08012aa4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b088      	sub	sp, #32
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	60f8      	str	r0, [r7, #12]
 8012aac:	60b9      	str	r1, [r7, #8]
 8012aae:	607a      	str	r2, [r7, #4]
 8012ab0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	7b9b      	ldrb	r3, [r3, #14]
 8012ab6:	2b01      	cmp	r3, #1
 8012ab8:	d006      	beq.n	8012ac8 <ip4_output_if_src+0x24>
 8012aba:	4b4b      	ldr	r3, [pc, #300]	; (8012be8 <ip4_output_if_src+0x144>)
 8012abc:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012ac0:	494a      	ldr	r1, [pc, #296]	; (8012bec <ip4_output_if_src+0x148>)
 8012ac2:	484b      	ldr	r0, [pc, #300]	; (8012bf0 <ip4_output_if_src+0x14c>)
 8012ac4:	f001 f8cc 	bl	8013c60 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d060      	beq.n	8012b90 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012ace:	2314      	movs	r3, #20
 8012ad0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012ad2:	2114      	movs	r1, #20
 8012ad4:	68f8      	ldr	r0, [r7, #12]
 8012ad6:	f7f6 fbd7 	bl	8009288 <pbuf_add_header>
 8012ada:	4603      	mov	r3, r0
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d002      	beq.n	8012ae6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012ae0:	f06f 0301 	mvn.w	r3, #1
 8012ae4:	e07c      	b.n	8012be0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	685b      	ldr	r3, [r3, #4]
 8012aea:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	895b      	ldrh	r3, [r3, #10]
 8012af0:	2b13      	cmp	r3, #19
 8012af2:	d806      	bhi.n	8012b02 <ip4_output_if_src+0x5e>
 8012af4:	4b3c      	ldr	r3, [pc, #240]	; (8012be8 <ip4_output_if_src+0x144>)
 8012af6:	f44f 7262 	mov.w	r2, #904	; 0x388
 8012afa:	493e      	ldr	r1, [pc, #248]	; (8012bf4 <ip4_output_if_src+0x150>)
 8012afc:	483c      	ldr	r0, [pc, #240]	; (8012bf0 <ip4_output_if_src+0x14c>)
 8012afe:	f001 f8af 	bl	8013c60 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012b02:	69fb      	ldr	r3, [r7, #28]
 8012b04:	78fa      	ldrb	r2, [r7, #3]
 8012b06:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012b08:	69fb      	ldr	r3, [r7, #28]
 8012b0a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012b0e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	681a      	ldr	r2, [r3, #0]
 8012b14:	69fb      	ldr	r3, [r7, #28]
 8012b16:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012b18:	8b7b      	ldrh	r3, [r7, #26]
 8012b1a:	089b      	lsrs	r3, r3, #2
 8012b1c:	b29b      	uxth	r3, r3
 8012b1e:	b2db      	uxtb	r3, r3
 8012b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b24:	b2da      	uxtb	r2, r3
 8012b26:	69fb      	ldr	r3, [r7, #28]
 8012b28:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012b2a:	69fb      	ldr	r3, [r7, #28]
 8012b2c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012b30:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	891b      	ldrh	r3, [r3, #8]
 8012b36:	4618      	mov	r0, r3
 8012b38:	f7f5 f8d2 	bl	8007ce0 <lwip_htons>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	461a      	mov	r2, r3
 8012b40:	69fb      	ldr	r3, [r7, #28]
 8012b42:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012b44:	69fb      	ldr	r3, [r7, #28]
 8012b46:	2200      	movs	r2, #0
 8012b48:	719a      	strb	r2, [r3, #6]
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012b4e:	4b2a      	ldr	r3, [pc, #168]	; (8012bf8 <ip4_output_if_src+0x154>)
 8012b50:	881b      	ldrh	r3, [r3, #0]
 8012b52:	4618      	mov	r0, r3
 8012b54:	f7f5 f8c4 	bl	8007ce0 <lwip_htons>
 8012b58:	4603      	mov	r3, r0
 8012b5a:	461a      	mov	r2, r3
 8012b5c:	69fb      	ldr	r3, [r7, #28]
 8012b5e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012b60:	4b25      	ldr	r3, [pc, #148]	; (8012bf8 <ip4_output_if_src+0x154>)
 8012b62:	881b      	ldrh	r3, [r3, #0]
 8012b64:	3301      	adds	r3, #1
 8012b66:	b29a      	uxth	r2, r3
 8012b68:	4b23      	ldr	r3, [pc, #140]	; (8012bf8 <ip4_output_if_src+0x154>)
 8012b6a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012b6c:	68bb      	ldr	r3, [r7, #8]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d104      	bne.n	8012b7c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012b72:	4b22      	ldr	r3, [pc, #136]	; (8012bfc <ip4_output_if_src+0x158>)
 8012b74:	681a      	ldr	r2, [r3, #0]
 8012b76:	69fb      	ldr	r3, [r7, #28]
 8012b78:	60da      	str	r2, [r3, #12]
 8012b7a:	e003      	b.n	8012b84 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012b7c:	68bb      	ldr	r3, [r7, #8]
 8012b7e:	681a      	ldr	r2, [r3, #0]
 8012b80:	69fb      	ldr	r3, [r7, #28]
 8012b82:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012b84:	69fb      	ldr	r3, [r7, #28]
 8012b86:	2200      	movs	r2, #0
 8012b88:	729a      	strb	r2, [r3, #10]
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	72da      	strb	r2, [r3, #11]
 8012b8e:	e00f      	b.n	8012bb0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	895b      	ldrh	r3, [r3, #10]
 8012b94:	2b13      	cmp	r3, #19
 8012b96:	d802      	bhi.n	8012b9e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012b98:	f06f 0301 	mvn.w	r3, #1
 8012b9c:	e020      	b.n	8012be0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	685b      	ldr	r3, [r3, #4]
 8012ba2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012ba4:	69fb      	ldr	r3, [r7, #28]
 8012ba6:	691b      	ldr	r3, [r3, #16]
 8012ba8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012baa:	f107 0314 	add.w	r3, r7, #20
 8012bae:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d00c      	beq.n	8012bd2 <ip4_output_if_src+0x12e>
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	891a      	ldrh	r2, [r3, #8]
 8012bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012bc0:	429a      	cmp	r2, r3
 8012bc2:	d906      	bls.n	8012bd2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012bc4:	687a      	ldr	r2, [r7, #4]
 8012bc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012bc8:	68f8      	ldr	r0, [r7, #12]
 8012bca:	f000 fde3 	bl	8013794 <ip4_frag>
 8012bce:	4603      	mov	r3, r0
 8012bd0:	e006      	b.n	8012be0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bd4:	695b      	ldr	r3, [r3, #20]
 8012bd6:	687a      	ldr	r2, [r7, #4]
 8012bd8:	68f9      	ldr	r1, [r7, #12]
 8012bda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012bdc:	4798      	blx	r3
 8012bde:	4603      	mov	r3, r0
}
 8012be0:	4618      	mov	r0, r3
 8012be2:	3720      	adds	r7, #32
 8012be4:	46bd      	mov	sp, r7
 8012be6:	bd80      	pop	{r7, pc}
 8012be8:	080178c8 	.word	0x080178c8
 8012bec:	080178fc 	.word	0x080178fc
 8012bf0:	08017908 	.word	0x08017908
 8012bf4:	08017930 	.word	0x08017930
 8012bf8:	2000b046 	.word	0x2000b046
 8012bfc:	0801a248 	.word	0x0801a248

08012c00 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012c00:	b480      	push	{r7}
 8012c02:	b085      	sub	sp, #20
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
 8012c08:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c14:	d002      	beq.n	8012c1c <ip4_addr_isbroadcast_u32+0x1c>
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d101      	bne.n	8012c20 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012c1c:	2301      	movs	r3, #1
 8012c1e:	e02a      	b.n	8012c76 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012c20:	683b      	ldr	r3, [r7, #0]
 8012c22:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012c26:	f003 0302 	and.w	r3, r3, #2
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d101      	bne.n	8012c32 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012c2e:	2300      	movs	r3, #0
 8012c30:	e021      	b.n	8012c76 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012c32:	683b      	ldr	r3, [r7, #0]
 8012c34:	3304      	adds	r3, #4
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	687a      	ldr	r2, [r7, #4]
 8012c3a:	429a      	cmp	r2, r3
 8012c3c:	d101      	bne.n	8012c42 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012c3e:	2300      	movs	r3, #0
 8012c40:	e019      	b.n	8012c76 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012c42:	68fa      	ldr	r2, [r7, #12]
 8012c44:	683b      	ldr	r3, [r7, #0]
 8012c46:	3304      	adds	r3, #4
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	405a      	eors	r2, r3
 8012c4c:	683b      	ldr	r3, [r7, #0]
 8012c4e:	3308      	adds	r3, #8
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	4013      	ands	r3, r2
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d10d      	bne.n	8012c74 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012c58:	683b      	ldr	r3, [r7, #0]
 8012c5a:	3308      	adds	r3, #8
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	43da      	mvns	r2, r3
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	3308      	adds	r3, #8
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012c6c:	429a      	cmp	r2, r3
 8012c6e:	d101      	bne.n	8012c74 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012c70:	2301      	movs	r3, #1
 8012c72:	e000      	b.n	8012c76 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012c74:	2300      	movs	r3, #0
  }
}
 8012c76:	4618      	mov	r0, r3
 8012c78:	3714      	adds	r7, #20
 8012c7a:	46bd      	mov	sp, r7
 8012c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c80:	4770      	bx	lr
	...

08012c84 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b082      	sub	sp, #8
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8012c8c:	2210      	movs	r2, #16
 8012c8e:	4904      	ldr	r1, [pc, #16]	; (8012ca0 <ip4addr_ntoa+0x1c>)
 8012c90:	6878      	ldr	r0, [r7, #4]
 8012c92:	f000 f807 	bl	8012ca4 <ip4addr_ntoa_r>
 8012c96:	4603      	mov	r3, r0
}
 8012c98:	4618      	mov	r0, r3
 8012c9a:	3708      	adds	r7, #8
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	bd80      	pop	{r7, pc}
 8012ca0:	2000b048 	.word	0x2000b048

08012ca4 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8012ca4:	b480      	push	{r7}
 8012ca6:	b08d      	sub	sp, #52	; 0x34
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	60f8      	str	r0, [r7, #12]
 8012cac:	60b9      	str	r1, [r7, #8]
 8012cae:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8012cba:	68bb      	ldr	r3, [r7, #8]
 8012cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8012cbe:	f107 0318 	add.w	r3, r7, #24
 8012cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012cca:	e058      	b.n	8012d7e <ip4addr_ntoa_r+0xda>
    i = 0;
 8012ccc:	2300      	movs	r3, #0
 8012cce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8012cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cd4:	781a      	ldrb	r2, [r3, #0]
 8012cd6:	4b32      	ldr	r3, [pc, #200]	; (8012da0 <ip4addr_ntoa_r+0xfc>)
 8012cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8012cdc:	08d9      	lsrs	r1, r3, #3
 8012cde:	460b      	mov	r3, r1
 8012ce0:	009b      	lsls	r3, r3, #2
 8012ce2:	440b      	add	r3, r1
 8012ce4:	005b      	lsls	r3, r3, #1
 8012ce6:	1ad3      	subs	r3, r2, r3
 8012ce8:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8012cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cec:	781b      	ldrb	r3, [r3, #0]
 8012cee:	4a2c      	ldr	r2, [pc, #176]	; (8012da0 <ip4addr_ntoa_r+0xfc>)
 8012cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8012cf4:	08db      	lsrs	r3, r3, #3
 8012cf6:	b2da      	uxtb	r2, r3
 8012cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cfa:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8012cfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012d00:	1c5a      	adds	r2, r3, #1
 8012d02:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8012d06:	4619      	mov	r1, r3
 8012d08:	7ffb      	ldrb	r3, [r7, #31]
 8012d0a:	3330      	adds	r3, #48	; 0x30
 8012d0c:	b2da      	uxtb	r2, r3
 8012d0e:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8012d12:	443b      	add	r3, r7
 8012d14:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8012d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d1a:	781b      	ldrb	r3, [r3, #0]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d1d8      	bne.n	8012cd2 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8012d20:	e011      	b.n	8012d46 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8012d22:	6a3b      	ldr	r3, [r7, #32]
 8012d24:	1c5a      	adds	r2, r3, #1
 8012d26:	623a      	str	r2, [r7, #32]
 8012d28:	687a      	ldr	r2, [r7, #4]
 8012d2a:	429a      	cmp	r2, r3
 8012d2c:	dc01      	bgt.n	8012d32 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8012d2e:	2300      	movs	r3, #0
 8012d30:	e030      	b.n	8012d94 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8012d32:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8012d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d38:	1c59      	adds	r1, r3, #1
 8012d3a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8012d3c:	3230      	adds	r2, #48	; 0x30
 8012d3e:	443a      	add	r2, r7
 8012d40:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8012d44:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8012d46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012d4a:	1e5a      	subs	r2, r3, #1
 8012d4c:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d1e6      	bne.n	8012d22 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8012d54:	6a3b      	ldr	r3, [r7, #32]
 8012d56:	1c5a      	adds	r2, r3, #1
 8012d58:	623a      	str	r2, [r7, #32]
 8012d5a:	687a      	ldr	r2, [r7, #4]
 8012d5c:	429a      	cmp	r2, r3
 8012d5e:	dc01      	bgt.n	8012d64 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8012d60:	2300      	movs	r3, #0
 8012d62:	e017      	b.n	8012d94 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8012d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d66:	1c5a      	adds	r2, r3, #1
 8012d68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012d6a:	222e      	movs	r2, #46	; 0x2e
 8012d6c:	701a      	strb	r2, [r3, #0]
    ap++;
 8012d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d70:	3301      	adds	r3, #1
 8012d72:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8012d74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d78:	3301      	adds	r3, #1
 8012d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012d7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d82:	2b03      	cmp	r3, #3
 8012d84:	d9a2      	bls.n	8012ccc <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8012d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d88:	3b01      	subs	r3, #1
 8012d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d8e:	2200      	movs	r2, #0
 8012d90:	701a      	strb	r2, [r3, #0]
  return buf;
 8012d92:	68bb      	ldr	r3, [r7, #8]
}
 8012d94:	4618      	mov	r0, r3
 8012d96:	3734      	adds	r7, #52	; 0x34
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9e:	4770      	bx	lr
 8012da0:	cccccccd 	.word	0xcccccccd

08012da4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b084      	sub	sp, #16
 8012da8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012daa:	2300      	movs	r3, #0
 8012dac:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012dae:	4b12      	ldr	r3, [pc, #72]	; (8012df8 <ip_reass_tmr+0x54>)
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012db4:	e018      	b.n	8012de8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	7fdb      	ldrb	r3, [r3, #31]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d00b      	beq.n	8012dd6 <ip_reass_tmr+0x32>
      r->timer--;
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	7fdb      	ldrb	r3, [r3, #31]
 8012dc2:	3b01      	subs	r3, #1
 8012dc4:	b2da      	uxtb	r2, r3
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	60fb      	str	r3, [r7, #12]
 8012dd4:	e008      	b.n	8012de8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012de0:	68b9      	ldr	r1, [r7, #8]
 8012de2:	6878      	ldr	r0, [r7, #4]
 8012de4:	f000 f80a 	bl	8012dfc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d1e3      	bne.n	8012db6 <ip_reass_tmr+0x12>
    }
  }
}
 8012dee:	bf00      	nop
 8012df0:	bf00      	nop
 8012df2:	3710      	adds	r7, #16
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd80      	pop	{r7, pc}
 8012df8:	2000b058 	.word	0x2000b058

08012dfc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b088      	sub	sp, #32
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
 8012e04:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012e06:	2300      	movs	r3, #0
 8012e08:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012e0a:	683a      	ldr	r2, [r7, #0]
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	429a      	cmp	r2, r3
 8012e10:	d105      	bne.n	8012e1e <ip_reass_free_complete_datagram+0x22>
 8012e12:	4b45      	ldr	r3, [pc, #276]	; (8012f28 <ip_reass_free_complete_datagram+0x12c>)
 8012e14:	22ab      	movs	r2, #171	; 0xab
 8012e16:	4945      	ldr	r1, [pc, #276]	; (8012f2c <ip_reass_free_complete_datagram+0x130>)
 8012e18:	4845      	ldr	r0, [pc, #276]	; (8012f30 <ip_reass_free_complete_datagram+0x134>)
 8012e1a:	f000 ff21 	bl	8013c60 <iprintf>
  if (prev != NULL) {
 8012e1e:	683b      	ldr	r3, [r7, #0]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d00a      	beq.n	8012e3a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012e24:	683b      	ldr	r3, [r7, #0]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	687a      	ldr	r2, [r7, #4]
 8012e2a:	429a      	cmp	r2, r3
 8012e2c:	d005      	beq.n	8012e3a <ip_reass_free_complete_datagram+0x3e>
 8012e2e:	4b3e      	ldr	r3, [pc, #248]	; (8012f28 <ip_reass_free_complete_datagram+0x12c>)
 8012e30:	22ad      	movs	r2, #173	; 0xad
 8012e32:	4940      	ldr	r1, [pc, #256]	; (8012f34 <ip_reass_free_complete_datagram+0x138>)
 8012e34:	483e      	ldr	r0, [pc, #248]	; (8012f30 <ip_reass_free_complete_datagram+0x134>)
 8012e36:	f000 ff13 	bl	8013c60 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	685b      	ldr	r3, [r3, #4]
 8012e3e:	685b      	ldr	r3, [r3, #4]
 8012e40:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012e42:	697b      	ldr	r3, [r7, #20]
 8012e44:	889b      	ldrh	r3, [r3, #4]
 8012e46:	b29b      	uxth	r3, r3
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d12a      	bne.n	8012ea2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	685b      	ldr	r3, [r3, #4]
 8012e50:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012e52:	697b      	ldr	r3, [r7, #20]
 8012e54:	681a      	ldr	r2, [r3, #0]
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012e5a:	69bb      	ldr	r3, [r7, #24]
 8012e5c:	6858      	ldr	r0, [r3, #4]
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	3308      	adds	r3, #8
 8012e62:	2214      	movs	r2, #20
 8012e64:	4619      	mov	r1, r3
 8012e66:	f000 fee5 	bl	8013c34 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012e6a:	2101      	movs	r1, #1
 8012e6c:	69b8      	ldr	r0, [r7, #24]
 8012e6e:	f7ff fb99 	bl	80125a4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012e72:	69b8      	ldr	r0, [r7, #24]
 8012e74:	f7f6 fb26 	bl	80094c4 <pbuf_clen>
 8012e78:	4603      	mov	r3, r0
 8012e7a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012e7c:	8bfa      	ldrh	r2, [r7, #30]
 8012e7e:	8a7b      	ldrh	r3, [r7, #18]
 8012e80:	4413      	add	r3, r2
 8012e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012e86:	db05      	blt.n	8012e94 <ip_reass_free_complete_datagram+0x98>
 8012e88:	4b27      	ldr	r3, [pc, #156]	; (8012f28 <ip_reass_free_complete_datagram+0x12c>)
 8012e8a:	22bc      	movs	r2, #188	; 0xbc
 8012e8c:	492a      	ldr	r1, [pc, #168]	; (8012f38 <ip_reass_free_complete_datagram+0x13c>)
 8012e8e:	4828      	ldr	r0, [pc, #160]	; (8012f30 <ip_reass_free_complete_datagram+0x134>)
 8012e90:	f000 fee6 	bl	8013c60 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012e94:	8bfa      	ldrh	r2, [r7, #30]
 8012e96:	8a7b      	ldrh	r3, [r7, #18]
 8012e98:	4413      	add	r3, r2
 8012e9a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012e9c:	69b8      	ldr	r0, [r7, #24]
 8012e9e:	f7f6 fa89 	bl	80093b4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	685b      	ldr	r3, [r3, #4]
 8012ea6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012ea8:	e01f      	b.n	8012eea <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012eaa:	69bb      	ldr	r3, [r7, #24]
 8012eac:	685b      	ldr	r3, [r3, #4]
 8012eae:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012eb0:	69bb      	ldr	r3, [r7, #24]
 8012eb2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012eb4:	697b      	ldr	r3, [r7, #20]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012eba:	68f8      	ldr	r0, [r7, #12]
 8012ebc:	f7f6 fb02 	bl	80094c4 <pbuf_clen>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012ec4:	8bfa      	ldrh	r2, [r7, #30]
 8012ec6:	8a7b      	ldrh	r3, [r7, #18]
 8012ec8:	4413      	add	r3, r2
 8012eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012ece:	db05      	blt.n	8012edc <ip_reass_free_complete_datagram+0xe0>
 8012ed0:	4b15      	ldr	r3, [pc, #84]	; (8012f28 <ip_reass_free_complete_datagram+0x12c>)
 8012ed2:	22cc      	movs	r2, #204	; 0xcc
 8012ed4:	4918      	ldr	r1, [pc, #96]	; (8012f38 <ip_reass_free_complete_datagram+0x13c>)
 8012ed6:	4816      	ldr	r0, [pc, #88]	; (8012f30 <ip_reass_free_complete_datagram+0x134>)
 8012ed8:	f000 fec2 	bl	8013c60 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012edc:	8bfa      	ldrh	r2, [r7, #30]
 8012ede:	8a7b      	ldrh	r3, [r7, #18]
 8012ee0:	4413      	add	r3, r2
 8012ee2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012ee4:	68f8      	ldr	r0, [r7, #12]
 8012ee6:	f7f6 fa65 	bl	80093b4 <pbuf_free>
  while (p != NULL) {
 8012eea:	69bb      	ldr	r3, [r7, #24]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d1dc      	bne.n	8012eaa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012ef0:	6839      	ldr	r1, [r7, #0]
 8012ef2:	6878      	ldr	r0, [r7, #4]
 8012ef4:	f000 f8c2 	bl	801307c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012ef8:	4b10      	ldr	r3, [pc, #64]	; (8012f3c <ip_reass_free_complete_datagram+0x140>)
 8012efa:	881b      	ldrh	r3, [r3, #0]
 8012efc:	8bfa      	ldrh	r2, [r7, #30]
 8012efe:	429a      	cmp	r2, r3
 8012f00:	d905      	bls.n	8012f0e <ip_reass_free_complete_datagram+0x112>
 8012f02:	4b09      	ldr	r3, [pc, #36]	; (8012f28 <ip_reass_free_complete_datagram+0x12c>)
 8012f04:	22d2      	movs	r2, #210	; 0xd2
 8012f06:	490e      	ldr	r1, [pc, #56]	; (8012f40 <ip_reass_free_complete_datagram+0x144>)
 8012f08:	4809      	ldr	r0, [pc, #36]	; (8012f30 <ip_reass_free_complete_datagram+0x134>)
 8012f0a:	f000 fea9 	bl	8013c60 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012f0e:	4b0b      	ldr	r3, [pc, #44]	; (8012f3c <ip_reass_free_complete_datagram+0x140>)
 8012f10:	881a      	ldrh	r2, [r3, #0]
 8012f12:	8bfb      	ldrh	r3, [r7, #30]
 8012f14:	1ad3      	subs	r3, r2, r3
 8012f16:	b29a      	uxth	r2, r3
 8012f18:	4b08      	ldr	r3, [pc, #32]	; (8012f3c <ip_reass_free_complete_datagram+0x140>)
 8012f1a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012f1c:	8bfb      	ldrh	r3, [r7, #30]
}
 8012f1e:	4618      	mov	r0, r3
 8012f20:	3720      	adds	r7, #32
 8012f22:	46bd      	mov	sp, r7
 8012f24:	bd80      	pop	{r7, pc}
 8012f26:	bf00      	nop
 8012f28:	08017960 	.word	0x08017960
 8012f2c:	0801799c 	.word	0x0801799c
 8012f30:	080179a8 	.word	0x080179a8
 8012f34:	080179d0 	.word	0x080179d0
 8012f38:	080179e4 	.word	0x080179e4
 8012f3c:	2000b05c 	.word	0x2000b05c
 8012f40:	08017a04 	.word	0x08017a04

08012f44 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b08a      	sub	sp, #40	; 0x28
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
 8012f4c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012f4e:	2300      	movs	r3, #0
 8012f50:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8012f52:	2300      	movs	r3, #0
 8012f54:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8012f56:	2300      	movs	r3, #0
 8012f58:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012f5e:	2300      	movs	r3, #0
 8012f60:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8012f62:	4b28      	ldr	r3, [pc, #160]	; (8013004 <ip_reass_remove_oldest_datagram+0xc0>)
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012f68:	e030      	b.n	8012fcc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f6c:	695a      	ldr	r2, [r3, #20]
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	68db      	ldr	r3, [r3, #12]
 8012f72:	429a      	cmp	r2, r3
 8012f74:	d10c      	bne.n	8012f90 <ip_reass_remove_oldest_datagram+0x4c>
 8012f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f78:	699a      	ldr	r2, [r3, #24]
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	691b      	ldr	r3, [r3, #16]
 8012f7e:	429a      	cmp	r2, r3
 8012f80:	d106      	bne.n	8012f90 <ip_reass_remove_oldest_datagram+0x4c>
 8012f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f84:	899a      	ldrh	r2, [r3, #12]
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	889b      	ldrh	r3, [r3, #4]
 8012f8a:	b29b      	uxth	r3, r3
 8012f8c:	429a      	cmp	r2, r3
 8012f8e:	d014      	beq.n	8012fba <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012f90:	693b      	ldr	r3, [r7, #16]
 8012f92:	3301      	adds	r3, #1
 8012f94:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8012f96:	6a3b      	ldr	r3, [r7, #32]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d104      	bne.n	8012fa6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f9e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012fa0:	69fb      	ldr	r3, [r7, #28]
 8012fa2:	61bb      	str	r3, [r7, #24]
 8012fa4:	e009      	b.n	8012fba <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8012fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa8:	7fda      	ldrb	r2, [r3, #31]
 8012faa:	6a3b      	ldr	r3, [r7, #32]
 8012fac:	7fdb      	ldrb	r3, [r3, #31]
 8012fae:	429a      	cmp	r2, r3
 8012fb0:	d803      	bhi.n	8012fba <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8012fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fb4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012fb6:	69fb      	ldr	r3, [r7, #28]
 8012fb8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8012fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d001      	beq.n	8012fc6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8012fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fc4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8012fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d1cb      	bne.n	8012f6a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8012fd2:	6a3b      	ldr	r3, [r7, #32]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d008      	beq.n	8012fea <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012fd8:	69b9      	ldr	r1, [r7, #24]
 8012fda:	6a38      	ldr	r0, [r7, #32]
 8012fdc:	f7ff ff0e 	bl	8012dfc <ip_reass_free_complete_datagram>
 8012fe0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8012fe2:	697a      	ldr	r2, [r7, #20]
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	4413      	add	r3, r2
 8012fe8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012fea:	697a      	ldr	r2, [r7, #20]
 8012fec:	683b      	ldr	r3, [r7, #0]
 8012fee:	429a      	cmp	r2, r3
 8012ff0:	da02      	bge.n	8012ff8 <ip_reass_remove_oldest_datagram+0xb4>
 8012ff2:	693b      	ldr	r3, [r7, #16]
 8012ff4:	2b01      	cmp	r3, #1
 8012ff6:	dcac      	bgt.n	8012f52 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012ff8:	697b      	ldr	r3, [r7, #20]
}
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	3728      	adds	r7, #40	; 0x28
 8012ffe:	46bd      	mov	sp, r7
 8013000:	bd80      	pop	{r7, pc}
 8013002:	bf00      	nop
 8013004:	2000b058 	.word	0x2000b058

08013008 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013008:	b580      	push	{r7, lr}
 801300a:	b084      	sub	sp, #16
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
 8013010:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013012:	2004      	movs	r0, #4
 8013014:	f7f5 fadc 	bl	80085d0 <memp_malloc>
 8013018:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d110      	bne.n	8013042 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013020:	6839      	ldr	r1, [r7, #0]
 8013022:	6878      	ldr	r0, [r7, #4]
 8013024:	f7ff ff8e 	bl	8012f44 <ip_reass_remove_oldest_datagram>
 8013028:	4602      	mov	r2, r0
 801302a:	683b      	ldr	r3, [r7, #0]
 801302c:	4293      	cmp	r3, r2
 801302e:	dc03      	bgt.n	8013038 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013030:	2004      	movs	r0, #4
 8013032:	f7f5 facd 	bl	80085d0 <memp_malloc>
 8013036:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d101      	bne.n	8013042 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801303e:	2300      	movs	r3, #0
 8013040:	e016      	b.n	8013070 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013042:	2220      	movs	r2, #32
 8013044:	2100      	movs	r1, #0
 8013046:	68f8      	ldr	r0, [r7, #12]
 8013048:	f000 fe02 	bl	8013c50 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	220f      	movs	r2, #15
 8013050:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013052:	4b09      	ldr	r3, [pc, #36]	; (8013078 <ip_reass_enqueue_new_datagram+0x70>)
 8013054:	681a      	ldr	r2, [r3, #0]
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801305a:	4a07      	ldr	r2, [pc, #28]	; (8013078 <ip_reass_enqueue_new_datagram+0x70>)
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	3308      	adds	r3, #8
 8013064:	2214      	movs	r2, #20
 8013066:	6879      	ldr	r1, [r7, #4]
 8013068:	4618      	mov	r0, r3
 801306a:	f000 fde3 	bl	8013c34 <memcpy>
  return ipr;
 801306e:	68fb      	ldr	r3, [r7, #12]
}
 8013070:	4618      	mov	r0, r3
 8013072:	3710      	adds	r7, #16
 8013074:	46bd      	mov	sp, r7
 8013076:	bd80      	pop	{r7, pc}
 8013078:	2000b058 	.word	0x2000b058

0801307c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b082      	sub	sp, #8
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
 8013084:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013086:	4b10      	ldr	r3, [pc, #64]	; (80130c8 <ip_reass_dequeue_datagram+0x4c>)
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	687a      	ldr	r2, [r7, #4]
 801308c:	429a      	cmp	r2, r3
 801308e:	d104      	bne.n	801309a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	4a0c      	ldr	r2, [pc, #48]	; (80130c8 <ip_reass_dequeue_datagram+0x4c>)
 8013096:	6013      	str	r3, [r2, #0]
 8013098:	e00d      	b.n	80130b6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801309a:	683b      	ldr	r3, [r7, #0]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d106      	bne.n	80130ae <ip_reass_dequeue_datagram+0x32>
 80130a0:	4b0a      	ldr	r3, [pc, #40]	; (80130cc <ip_reass_dequeue_datagram+0x50>)
 80130a2:	f240 1245 	movw	r2, #325	; 0x145
 80130a6:	490a      	ldr	r1, [pc, #40]	; (80130d0 <ip_reass_dequeue_datagram+0x54>)
 80130a8:	480a      	ldr	r0, [pc, #40]	; (80130d4 <ip_reass_dequeue_datagram+0x58>)
 80130aa:	f000 fdd9 	bl	8013c60 <iprintf>
    prev->next = ipr->next;
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	681a      	ldr	r2, [r3, #0]
 80130b2:	683b      	ldr	r3, [r7, #0]
 80130b4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80130b6:	6879      	ldr	r1, [r7, #4]
 80130b8:	2004      	movs	r0, #4
 80130ba:	f7f5 faf9 	bl	80086b0 <memp_free>
}
 80130be:	bf00      	nop
 80130c0:	3708      	adds	r7, #8
 80130c2:	46bd      	mov	sp, r7
 80130c4:	bd80      	pop	{r7, pc}
 80130c6:	bf00      	nop
 80130c8:	2000b058 	.word	0x2000b058
 80130cc:	08017960 	.word	0x08017960
 80130d0:	08017a28 	.word	0x08017a28
 80130d4:	080179a8 	.word	0x080179a8

080130d8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b08c      	sub	sp, #48	; 0x30
 80130dc:	af00      	add	r7, sp, #0
 80130de:	60f8      	str	r0, [r7, #12]
 80130e0:	60b9      	str	r1, [r7, #8]
 80130e2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80130e4:	2300      	movs	r3, #0
 80130e6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80130e8:	2301      	movs	r3, #1
 80130ea:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80130ec:	68bb      	ldr	r3, [r7, #8]
 80130ee:	685b      	ldr	r3, [r3, #4]
 80130f0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80130f2:	69fb      	ldr	r3, [r7, #28]
 80130f4:	885b      	ldrh	r3, [r3, #2]
 80130f6:	b29b      	uxth	r3, r3
 80130f8:	4618      	mov	r0, r3
 80130fa:	f7f4 fdf1 	bl	8007ce0 <lwip_htons>
 80130fe:	4603      	mov	r3, r0
 8013100:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013102:	69fb      	ldr	r3, [r7, #28]
 8013104:	781b      	ldrb	r3, [r3, #0]
 8013106:	f003 030f 	and.w	r3, r3, #15
 801310a:	b2db      	uxtb	r3, r3
 801310c:	009b      	lsls	r3, r3, #2
 801310e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013110:	7e7b      	ldrb	r3, [r7, #25]
 8013112:	b29b      	uxth	r3, r3
 8013114:	8b7a      	ldrh	r2, [r7, #26]
 8013116:	429a      	cmp	r2, r3
 8013118:	d202      	bcs.n	8013120 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801311a:	f04f 33ff 	mov.w	r3, #4294967295
 801311e:	e135      	b.n	801338c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013120:	7e7b      	ldrb	r3, [r7, #25]
 8013122:	b29b      	uxth	r3, r3
 8013124:	8b7a      	ldrh	r2, [r7, #26]
 8013126:	1ad3      	subs	r3, r2, r3
 8013128:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801312a:	69fb      	ldr	r3, [r7, #28]
 801312c:	88db      	ldrh	r3, [r3, #6]
 801312e:	b29b      	uxth	r3, r3
 8013130:	4618      	mov	r0, r3
 8013132:	f7f4 fdd5 	bl	8007ce0 <lwip_htons>
 8013136:	4603      	mov	r3, r0
 8013138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801313c:	b29b      	uxth	r3, r3
 801313e:	00db      	lsls	r3, r3, #3
 8013140:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013142:	68bb      	ldr	r3, [r7, #8]
 8013144:	685b      	ldr	r3, [r3, #4]
 8013146:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801314a:	2200      	movs	r2, #0
 801314c:	701a      	strb	r2, [r3, #0]
 801314e:	2200      	movs	r2, #0
 8013150:	705a      	strb	r2, [r3, #1]
 8013152:	2200      	movs	r2, #0
 8013154:	709a      	strb	r2, [r3, #2]
 8013156:	2200      	movs	r2, #0
 8013158:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801315a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801315c:	8afa      	ldrh	r2, [r7, #22]
 801315e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013160:	8afa      	ldrh	r2, [r7, #22]
 8013162:	8b7b      	ldrh	r3, [r7, #26]
 8013164:	4413      	add	r3, r2
 8013166:	b29a      	uxth	r2, r3
 8013168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801316a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801316c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801316e:	88db      	ldrh	r3, [r3, #6]
 8013170:	b29b      	uxth	r3, r3
 8013172:	8afa      	ldrh	r2, [r7, #22]
 8013174:	429a      	cmp	r2, r3
 8013176:	d902      	bls.n	801317e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013178:	f04f 33ff 	mov.w	r3, #4294967295
 801317c:	e106      	b.n	801338c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	685b      	ldr	r3, [r3, #4]
 8013182:	627b      	str	r3, [r7, #36]	; 0x24
 8013184:	e068      	b.n	8013258 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013188:	685b      	ldr	r3, [r3, #4]
 801318a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801318c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801318e:	889b      	ldrh	r3, [r3, #4]
 8013190:	b29a      	uxth	r2, r3
 8013192:	693b      	ldr	r3, [r7, #16]
 8013194:	889b      	ldrh	r3, [r3, #4]
 8013196:	b29b      	uxth	r3, r3
 8013198:	429a      	cmp	r2, r3
 801319a:	d235      	bcs.n	8013208 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801319c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801319e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131a0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80131a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d020      	beq.n	80131ea <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80131a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131aa:	889b      	ldrh	r3, [r3, #4]
 80131ac:	b29a      	uxth	r2, r3
 80131ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131b0:	88db      	ldrh	r3, [r3, #6]
 80131b2:	b29b      	uxth	r3, r3
 80131b4:	429a      	cmp	r2, r3
 80131b6:	d307      	bcc.n	80131c8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80131b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ba:	88db      	ldrh	r3, [r3, #6]
 80131bc:	b29a      	uxth	r2, r3
 80131be:	693b      	ldr	r3, [r7, #16]
 80131c0:	889b      	ldrh	r3, [r3, #4]
 80131c2:	b29b      	uxth	r3, r3
 80131c4:	429a      	cmp	r2, r3
 80131c6:	d902      	bls.n	80131ce <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80131c8:	f04f 33ff 	mov.w	r3, #4294967295
 80131cc:	e0de      	b.n	801338c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80131ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131d0:	68ba      	ldr	r2, [r7, #8]
 80131d2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80131d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131d6:	88db      	ldrh	r3, [r3, #6]
 80131d8:	b29a      	uxth	r2, r3
 80131da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131dc:	889b      	ldrh	r3, [r3, #4]
 80131de:	b29b      	uxth	r3, r3
 80131e0:	429a      	cmp	r2, r3
 80131e2:	d03d      	beq.n	8013260 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80131e4:	2300      	movs	r3, #0
 80131e6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80131e8:	e03a      	b.n	8013260 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80131ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ec:	88db      	ldrh	r3, [r3, #6]
 80131ee:	b29a      	uxth	r2, r3
 80131f0:	693b      	ldr	r3, [r7, #16]
 80131f2:	889b      	ldrh	r3, [r3, #4]
 80131f4:	b29b      	uxth	r3, r3
 80131f6:	429a      	cmp	r2, r3
 80131f8:	d902      	bls.n	8013200 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80131fa:	f04f 33ff 	mov.w	r3, #4294967295
 80131fe:	e0c5      	b.n	801338c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	68ba      	ldr	r2, [r7, #8]
 8013204:	605a      	str	r2, [r3, #4]
      break;
 8013206:	e02b      	b.n	8013260 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801320a:	889b      	ldrh	r3, [r3, #4]
 801320c:	b29a      	uxth	r2, r3
 801320e:	693b      	ldr	r3, [r7, #16]
 8013210:	889b      	ldrh	r3, [r3, #4]
 8013212:	b29b      	uxth	r3, r3
 8013214:	429a      	cmp	r2, r3
 8013216:	d102      	bne.n	801321e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013218:	f04f 33ff 	mov.w	r3, #4294967295
 801321c:	e0b6      	b.n	801338c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801321e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013220:	889b      	ldrh	r3, [r3, #4]
 8013222:	b29a      	uxth	r2, r3
 8013224:	693b      	ldr	r3, [r7, #16]
 8013226:	88db      	ldrh	r3, [r3, #6]
 8013228:	b29b      	uxth	r3, r3
 801322a:	429a      	cmp	r2, r3
 801322c:	d202      	bcs.n	8013234 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801322e:	f04f 33ff 	mov.w	r3, #4294967295
 8013232:	e0ab      	b.n	801338c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013236:	2b00      	cmp	r3, #0
 8013238:	d009      	beq.n	801324e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801323a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801323c:	88db      	ldrh	r3, [r3, #6]
 801323e:	b29a      	uxth	r2, r3
 8013240:	693b      	ldr	r3, [r7, #16]
 8013242:	889b      	ldrh	r3, [r3, #4]
 8013244:	b29b      	uxth	r3, r3
 8013246:	429a      	cmp	r2, r3
 8013248:	d001      	beq.n	801324e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801324a:	2300      	movs	r3, #0
 801324c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801324e:	693b      	ldr	r3, [r7, #16]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013254:	693b      	ldr	r3, [r7, #16]
 8013256:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801325a:	2b00      	cmp	r3, #0
 801325c:	d193      	bne.n	8013186 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801325e:	e000      	b.n	8013262 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013260:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013264:	2b00      	cmp	r3, #0
 8013266:	d12d      	bne.n	80132c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801326a:	2b00      	cmp	r3, #0
 801326c:	d01c      	beq.n	80132a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013270:	88db      	ldrh	r3, [r3, #6]
 8013272:	b29a      	uxth	r2, r3
 8013274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013276:	889b      	ldrh	r3, [r3, #4]
 8013278:	b29b      	uxth	r3, r3
 801327a:	429a      	cmp	r2, r3
 801327c:	d906      	bls.n	801328c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801327e:	4b45      	ldr	r3, [pc, #276]	; (8013394 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013280:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013284:	4944      	ldr	r1, [pc, #272]	; (8013398 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013286:	4845      	ldr	r0, [pc, #276]	; (801339c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013288:	f000 fcea 	bl	8013c60 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801328c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801328e:	68ba      	ldr	r2, [r7, #8]
 8013290:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013294:	88db      	ldrh	r3, [r3, #6]
 8013296:	b29a      	uxth	r2, r3
 8013298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801329a:	889b      	ldrh	r3, [r3, #4]
 801329c:	b29b      	uxth	r3, r3
 801329e:	429a      	cmp	r2, r3
 80132a0:	d010      	beq.n	80132c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80132a2:	2300      	movs	r3, #0
 80132a4:	623b      	str	r3, [r7, #32]
 80132a6:	e00d      	b.n	80132c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	685b      	ldr	r3, [r3, #4]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d006      	beq.n	80132be <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80132b0:	4b38      	ldr	r3, [pc, #224]	; (8013394 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80132b2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80132b6:	493a      	ldr	r1, [pc, #232]	; (80133a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80132b8:	4838      	ldr	r0, [pc, #224]	; (801339c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80132ba:	f000 fcd1 	bl	8013c60 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	68ba      	ldr	r2, [r7, #8]
 80132c2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d105      	bne.n	80132d6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	7f9b      	ldrb	r3, [r3, #30]
 80132ce:	f003 0301 	and.w	r3, r3, #1
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d059      	beq.n	801338a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80132d6:	6a3b      	ldr	r3, [r7, #32]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d04f      	beq.n	801337c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	685b      	ldr	r3, [r3, #4]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d006      	beq.n	80132f2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	685b      	ldr	r3, [r3, #4]
 80132e8:	685b      	ldr	r3, [r3, #4]
 80132ea:	889b      	ldrh	r3, [r3, #4]
 80132ec:	b29b      	uxth	r3, r3
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d002      	beq.n	80132f8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80132f2:	2300      	movs	r3, #0
 80132f4:	623b      	str	r3, [r7, #32]
 80132f6:	e041      	b.n	801337c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80132f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132fa:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80132fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013302:	e012      	b.n	801332a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013306:	685b      	ldr	r3, [r3, #4]
 8013308:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801330a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801330c:	88db      	ldrh	r3, [r3, #6]
 801330e:	b29a      	uxth	r2, r3
 8013310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013312:	889b      	ldrh	r3, [r3, #4]
 8013314:	b29b      	uxth	r3, r3
 8013316:	429a      	cmp	r2, r3
 8013318:	d002      	beq.n	8013320 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801331a:	2300      	movs	r3, #0
 801331c:	623b      	str	r3, [r7, #32]
            break;
 801331e:	e007      	b.n	8013330 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013322:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801332c:	2b00      	cmp	r3, #0
 801332e:	d1e9      	bne.n	8013304 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013330:	6a3b      	ldr	r3, [r7, #32]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d022      	beq.n	801337c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	685b      	ldr	r3, [r3, #4]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d106      	bne.n	801334c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801333e:	4b15      	ldr	r3, [pc, #84]	; (8013394 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013340:	f240 12df 	movw	r2, #479	; 0x1df
 8013344:	4917      	ldr	r1, [pc, #92]	; (80133a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013346:	4815      	ldr	r0, [pc, #84]	; (801339c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013348:	f000 fc8a 	bl	8013c60 <iprintf>
          LWIP_ASSERT("sanity check",
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	685b      	ldr	r3, [r3, #4]
 8013350:	685b      	ldr	r3, [r3, #4]
 8013352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013354:	429a      	cmp	r2, r3
 8013356:	d106      	bne.n	8013366 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013358:	4b0e      	ldr	r3, [pc, #56]	; (8013394 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801335a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801335e:	4911      	ldr	r1, [pc, #68]	; (80133a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013360:	480e      	ldr	r0, [pc, #56]	; (801339c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013362:	f000 fc7d 	bl	8013c60 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d006      	beq.n	801337c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801336e:	4b09      	ldr	r3, [pc, #36]	; (8013394 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013370:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8013374:	490c      	ldr	r1, [pc, #48]	; (80133a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013376:	4809      	ldr	r0, [pc, #36]	; (801339c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013378:	f000 fc72 	bl	8013c60 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801337c:	6a3b      	ldr	r3, [r7, #32]
 801337e:	2b00      	cmp	r3, #0
 8013380:	bf14      	ite	ne
 8013382:	2301      	movne	r3, #1
 8013384:	2300      	moveq	r3, #0
 8013386:	b2db      	uxtb	r3, r3
 8013388:	e000      	b.n	801338c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801338a:	2300      	movs	r3, #0
}
 801338c:	4618      	mov	r0, r3
 801338e:	3730      	adds	r7, #48	; 0x30
 8013390:	46bd      	mov	sp, r7
 8013392:	bd80      	pop	{r7, pc}
 8013394:	08017960 	.word	0x08017960
 8013398:	08017a44 	.word	0x08017a44
 801339c:	080179a8 	.word	0x080179a8
 80133a0:	08017a64 	.word	0x08017a64
 80133a4:	08017a9c 	.word	0x08017a9c
 80133a8:	08017aac 	.word	0x08017aac

080133ac <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b08e      	sub	sp, #56	; 0x38
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	685b      	ldr	r3, [r3, #4]
 80133b8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80133ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133bc:	781b      	ldrb	r3, [r3, #0]
 80133be:	f003 030f 	and.w	r3, r3, #15
 80133c2:	b2db      	uxtb	r3, r3
 80133c4:	009b      	lsls	r3, r3, #2
 80133c6:	b2db      	uxtb	r3, r3
 80133c8:	2b14      	cmp	r3, #20
 80133ca:	f040 8171 	bne.w	80136b0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80133ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133d0:	88db      	ldrh	r3, [r3, #6]
 80133d2:	b29b      	uxth	r3, r3
 80133d4:	4618      	mov	r0, r3
 80133d6:	f7f4 fc83 	bl	8007ce0 <lwip_htons>
 80133da:	4603      	mov	r3, r0
 80133dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80133e0:	b29b      	uxth	r3, r3
 80133e2:	00db      	lsls	r3, r3, #3
 80133e4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80133e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133e8:	885b      	ldrh	r3, [r3, #2]
 80133ea:	b29b      	uxth	r3, r3
 80133ec:	4618      	mov	r0, r3
 80133ee:	f7f4 fc77 	bl	8007ce0 <lwip_htons>
 80133f2:	4603      	mov	r3, r0
 80133f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80133f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133f8:	781b      	ldrb	r3, [r3, #0]
 80133fa:	f003 030f 	and.w	r3, r3, #15
 80133fe:	b2db      	uxtb	r3, r3
 8013400:	009b      	lsls	r3, r3, #2
 8013402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8013406:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801340a:	b29b      	uxth	r3, r3
 801340c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801340e:	429a      	cmp	r2, r3
 8013410:	f0c0 8150 	bcc.w	80136b4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013414:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013418:	b29b      	uxth	r3, r3
 801341a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801341c:	1ad3      	subs	r3, r2, r3
 801341e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013420:	6878      	ldr	r0, [r7, #4]
 8013422:	f7f6 f84f 	bl	80094c4 <pbuf_clen>
 8013426:	4603      	mov	r3, r0
 8013428:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801342a:	4b8c      	ldr	r3, [pc, #560]	; (801365c <ip4_reass+0x2b0>)
 801342c:	881b      	ldrh	r3, [r3, #0]
 801342e:	461a      	mov	r2, r3
 8013430:	8c3b      	ldrh	r3, [r7, #32]
 8013432:	4413      	add	r3, r2
 8013434:	2b0a      	cmp	r3, #10
 8013436:	dd10      	ble.n	801345a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013438:	8c3b      	ldrh	r3, [r7, #32]
 801343a:	4619      	mov	r1, r3
 801343c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801343e:	f7ff fd81 	bl	8012f44 <ip_reass_remove_oldest_datagram>
 8013442:	4603      	mov	r3, r0
 8013444:	2b00      	cmp	r3, #0
 8013446:	f000 8137 	beq.w	80136b8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801344a:	4b84      	ldr	r3, [pc, #528]	; (801365c <ip4_reass+0x2b0>)
 801344c:	881b      	ldrh	r3, [r3, #0]
 801344e:	461a      	mov	r2, r3
 8013450:	8c3b      	ldrh	r3, [r7, #32]
 8013452:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013454:	2b0a      	cmp	r3, #10
 8013456:	f300 812f 	bgt.w	80136b8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801345a:	4b81      	ldr	r3, [pc, #516]	; (8013660 <ip4_reass+0x2b4>)
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	633b      	str	r3, [r7, #48]	; 0x30
 8013460:	e015      	b.n	801348e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013464:	695a      	ldr	r2, [r3, #20]
 8013466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013468:	68db      	ldr	r3, [r3, #12]
 801346a:	429a      	cmp	r2, r3
 801346c:	d10c      	bne.n	8013488 <ip4_reass+0xdc>
 801346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013470:	699a      	ldr	r2, [r3, #24]
 8013472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013474:	691b      	ldr	r3, [r3, #16]
 8013476:	429a      	cmp	r2, r3
 8013478:	d106      	bne.n	8013488 <ip4_reass+0xdc>
 801347a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801347c:	899a      	ldrh	r2, [r3, #12]
 801347e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013480:	889b      	ldrh	r3, [r3, #4]
 8013482:	b29b      	uxth	r3, r3
 8013484:	429a      	cmp	r2, r3
 8013486:	d006      	beq.n	8013496 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	633b      	str	r3, [r7, #48]	; 0x30
 801348e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013490:	2b00      	cmp	r3, #0
 8013492:	d1e6      	bne.n	8013462 <ip4_reass+0xb6>
 8013494:	e000      	b.n	8013498 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013496:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801349a:	2b00      	cmp	r3, #0
 801349c:	d109      	bne.n	80134b2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801349e:	8c3b      	ldrh	r3, [r7, #32]
 80134a0:	4619      	mov	r1, r3
 80134a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134a4:	f7ff fdb0 	bl	8013008 <ip_reass_enqueue_new_datagram>
 80134a8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80134aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d11c      	bne.n	80134ea <ip4_reass+0x13e>
      goto nullreturn;
 80134b0:	e105      	b.n	80136be <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80134b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134b4:	88db      	ldrh	r3, [r3, #6]
 80134b6:	b29b      	uxth	r3, r3
 80134b8:	4618      	mov	r0, r3
 80134ba:	f7f4 fc11 	bl	8007ce0 <lwip_htons>
 80134be:	4603      	mov	r3, r0
 80134c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d110      	bne.n	80134ea <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80134c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ca:	89db      	ldrh	r3, [r3, #14]
 80134cc:	4618      	mov	r0, r3
 80134ce:	f7f4 fc07 	bl	8007ce0 <lwip_htons>
 80134d2:	4603      	mov	r3, r0
 80134d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d006      	beq.n	80134ea <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80134dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134de:	3308      	adds	r3, #8
 80134e0:	2214      	movs	r2, #20
 80134e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80134e4:	4618      	mov	r0, r3
 80134e6:	f000 fba5 	bl	8013c34 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80134ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134ec:	88db      	ldrh	r3, [r3, #6]
 80134ee:	b29b      	uxth	r3, r3
 80134f0:	f003 0320 	and.w	r3, r3, #32
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	bf0c      	ite	eq
 80134f8:	2301      	moveq	r3, #1
 80134fa:	2300      	movne	r3, #0
 80134fc:	b2db      	uxtb	r3, r3
 80134fe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013500:	69fb      	ldr	r3, [r7, #28]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d00e      	beq.n	8013524 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013506:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013508:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801350a:	4413      	add	r3, r2
 801350c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801350e:	8b7a      	ldrh	r2, [r7, #26]
 8013510:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013512:	429a      	cmp	r2, r3
 8013514:	f0c0 80a0 	bcc.w	8013658 <ip4_reass+0x2ac>
 8013518:	8b7b      	ldrh	r3, [r7, #26]
 801351a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801351e:	4293      	cmp	r3, r2
 8013520:	f200 809a 	bhi.w	8013658 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013524:	69fa      	ldr	r2, [r7, #28]
 8013526:	6879      	ldr	r1, [r7, #4]
 8013528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801352a:	f7ff fdd5 	bl	80130d8 <ip_reass_chain_frag_into_datagram_and_validate>
 801352e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013530:	697b      	ldr	r3, [r7, #20]
 8013532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013536:	f000 809b 	beq.w	8013670 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801353a:	4b48      	ldr	r3, [pc, #288]	; (801365c <ip4_reass+0x2b0>)
 801353c:	881a      	ldrh	r2, [r3, #0]
 801353e:	8c3b      	ldrh	r3, [r7, #32]
 8013540:	4413      	add	r3, r2
 8013542:	b29a      	uxth	r2, r3
 8013544:	4b45      	ldr	r3, [pc, #276]	; (801365c <ip4_reass+0x2b0>)
 8013546:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013548:	69fb      	ldr	r3, [r7, #28]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d00d      	beq.n	801356a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801354e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013550:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013552:	4413      	add	r3, r2
 8013554:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013558:	8a7a      	ldrh	r2, [r7, #18]
 801355a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801355c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801355e:	7f9b      	ldrb	r3, [r3, #30]
 8013560:	f043 0301 	orr.w	r3, r3, #1
 8013564:	b2da      	uxtb	r2, r3
 8013566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013568:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801356a:	697b      	ldr	r3, [r7, #20]
 801356c:	2b01      	cmp	r3, #1
 801356e:	d171      	bne.n	8013654 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013572:	8b9b      	ldrh	r3, [r3, #28]
 8013574:	3314      	adds	r3, #20
 8013576:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801357a:	685b      	ldr	r3, [r3, #4]
 801357c:	685b      	ldr	r3, [r3, #4]
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013584:	685b      	ldr	r3, [r3, #4]
 8013586:	685b      	ldr	r3, [r3, #4]
 8013588:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801358c:	3308      	adds	r3, #8
 801358e:	2214      	movs	r2, #20
 8013590:	4619      	mov	r1, r3
 8013592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013594:	f000 fb4e 	bl	8013c34 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013598:	8a3b      	ldrh	r3, [r7, #16]
 801359a:	4618      	mov	r0, r3
 801359c:	f7f4 fba0 	bl	8007ce0 <lwip_htons>
 80135a0:	4603      	mov	r3, r0
 80135a2:	461a      	mov	r2, r3
 80135a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135a6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80135a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135aa:	2200      	movs	r2, #0
 80135ac:	719a      	strb	r2, [r3, #6]
 80135ae:	2200      	movs	r2, #0
 80135b0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80135b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135b4:	2200      	movs	r2, #0
 80135b6:	729a      	strb	r2, [r3, #10]
 80135b8:	2200      	movs	r2, #0
 80135ba:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80135bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135be:	685b      	ldr	r3, [r3, #4]
 80135c0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80135c2:	e00d      	b.n	80135e0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80135c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135c6:	685b      	ldr	r3, [r3, #4]
 80135c8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80135ca:	2114      	movs	r1, #20
 80135cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80135ce:	f7f5 fe6b 	bl	80092a8 <pbuf_remove_header>
      pbuf_cat(p, r);
 80135d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80135d4:	6878      	ldr	r0, [r7, #4]
 80135d6:	f7f5 ffaf 	bl	8009538 <pbuf_cat>
      r = iprh->next_pbuf;
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80135e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d1ee      	bne.n	80135c4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80135e6:	4b1e      	ldr	r3, [pc, #120]	; (8013660 <ip4_reass+0x2b4>)
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80135ec:	429a      	cmp	r2, r3
 80135ee:	d102      	bne.n	80135f6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80135f0:	2300      	movs	r3, #0
 80135f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80135f4:	e010      	b.n	8013618 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80135f6:	4b1a      	ldr	r3, [pc, #104]	; (8013660 <ip4_reass+0x2b4>)
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80135fc:	e007      	b.n	801360e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80135fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013604:	429a      	cmp	r2, r3
 8013606:	d006      	beq.n	8013616 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801360e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013610:	2b00      	cmp	r3, #0
 8013612:	d1f4      	bne.n	80135fe <ip4_reass+0x252>
 8013614:	e000      	b.n	8013618 <ip4_reass+0x26c>
          break;
 8013616:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013618:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801361a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801361c:	f7ff fd2e 	bl	801307c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013620:	6878      	ldr	r0, [r7, #4]
 8013622:	f7f5 ff4f 	bl	80094c4 <pbuf_clen>
 8013626:	4603      	mov	r3, r0
 8013628:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801362a:	4b0c      	ldr	r3, [pc, #48]	; (801365c <ip4_reass+0x2b0>)
 801362c:	881b      	ldrh	r3, [r3, #0]
 801362e:	8c3a      	ldrh	r2, [r7, #32]
 8013630:	429a      	cmp	r2, r3
 8013632:	d906      	bls.n	8013642 <ip4_reass+0x296>
 8013634:	4b0b      	ldr	r3, [pc, #44]	; (8013664 <ip4_reass+0x2b8>)
 8013636:	f240 229b 	movw	r2, #667	; 0x29b
 801363a:	490b      	ldr	r1, [pc, #44]	; (8013668 <ip4_reass+0x2bc>)
 801363c:	480b      	ldr	r0, [pc, #44]	; (801366c <ip4_reass+0x2c0>)
 801363e:	f000 fb0f 	bl	8013c60 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013642:	4b06      	ldr	r3, [pc, #24]	; (801365c <ip4_reass+0x2b0>)
 8013644:	881a      	ldrh	r2, [r3, #0]
 8013646:	8c3b      	ldrh	r3, [r7, #32]
 8013648:	1ad3      	subs	r3, r2, r3
 801364a:	b29a      	uxth	r2, r3
 801364c:	4b03      	ldr	r3, [pc, #12]	; (801365c <ip4_reass+0x2b0>)
 801364e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	e038      	b.n	80136c6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013654:	2300      	movs	r3, #0
 8013656:	e036      	b.n	80136c6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8013658:	bf00      	nop
 801365a:	e00a      	b.n	8013672 <ip4_reass+0x2c6>
 801365c:	2000b05c 	.word	0x2000b05c
 8013660:	2000b058 	.word	0x2000b058
 8013664:	08017960 	.word	0x08017960
 8013668:	08017ad0 	.word	0x08017ad0
 801366c:	080179a8 	.word	0x080179a8
    goto nullreturn_ipr;
 8013670:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013674:	2b00      	cmp	r3, #0
 8013676:	d106      	bne.n	8013686 <ip4_reass+0x2da>
 8013678:	4b15      	ldr	r3, [pc, #84]	; (80136d0 <ip4_reass+0x324>)
 801367a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801367e:	4915      	ldr	r1, [pc, #84]	; (80136d4 <ip4_reass+0x328>)
 8013680:	4815      	ldr	r0, [pc, #84]	; (80136d8 <ip4_reass+0x32c>)
 8013682:	f000 faed 	bl	8013c60 <iprintf>
  if (ipr->p == NULL) {
 8013686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013688:	685b      	ldr	r3, [r3, #4]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d116      	bne.n	80136bc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801368e:	4b13      	ldr	r3, [pc, #76]	; (80136dc <ip4_reass+0x330>)
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013694:	429a      	cmp	r2, r3
 8013696:	d006      	beq.n	80136a6 <ip4_reass+0x2fa>
 8013698:	4b0d      	ldr	r3, [pc, #52]	; (80136d0 <ip4_reass+0x324>)
 801369a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801369e:	4910      	ldr	r1, [pc, #64]	; (80136e0 <ip4_reass+0x334>)
 80136a0:	480d      	ldr	r0, [pc, #52]	; (80136d8 <ip4_reass+0x32c>)
 80136a2:	f000 fadd 	bl	8013c60 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80136a6:	2100      	movs	r1, #0
 80136a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80136aa:	f7ff fce7 	bl	801307c <ip_reass_dequeue_datagram>
 80136ae:	e006      	b.n	80136be <ip4_reass+0x312>
    goto nullreturn;
 80136b0:	bf00      	nop
 80136b2:	e004      	b.n	80136be <ip4_reass+0x312>
    goto nullreturn;
 80136b4:	bf00      	nop
 80136b6:	e002      	b.n	80136be <ip4_reass+0x312>
      goto nullreturn;
 80136b8:	bf00      	nop
 80136ba:	e000      	b.n	80136be <ip4_reass+0x312>
  }

nullreturn:
 80136bc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80136be:	6878      	ldr	r0, [r7, #4]
 80136c0:	f7f5 fe78 	bl	80093b4 <pbuf_free>
  return NULL;
 80136c4:	2300      	movs	r3, #0
}
 80136c6:	4618      	mov	r0, r3
 80136c8:	3738      	adds	r7, #56	; 0x38
 80136ca:	46bd      	mov	sp, r7
 80136cc:	bd80      	pop	{r7, pc}
 80136ce:	bf00      	nop
 80136d0:	08017960 	.word	0x08017960
 80136d4:	08017aec 	.word	0x08017aec
 80136d8:	080179a8 	.word	0x080179a8
 80136dc:	2000b058 	.word	0x2000b058
 80136e0:	08017af8 	.word	0x08017af8

080136e4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80136e8:	2005      	movs	r0, #5
 80136ea:	f7f4 ff71 	bl	80085d0 <memp_malloc>
 80136ee:	4603      	mov	r3, r0
}
 80136f0:	4618      	mov	r0, r3
 80136f2:	bd80      	pop	{r7, pc}

080136f4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b082      	sub	sp, #8
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d106      	bne.n	8013710 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013702:	4b07      	ldr	r3, [pc, #28]	; (8013720 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013704:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013708:	4906      	ldr	r1, [pc, #24]	; (8013724 <ip_frag_free_pbuf_custom_ref+0x30>)
 801370a:	4807      	ldr	r0, [pc, #28]	; (8013728 <ip_frag_free_pbuf_custom_ref+0x34>)
 801370c:	f000 faa8 	bl	8013c60 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013710:	6879      	ldr	r1, [r7, #4]
 8013712:	2005      	movs	r0, #5
 8013714:	f7f4 ffcc 	bl	80086b0 <memp_free>
}
 8013718:	bf00      	nop
 801371a:	3708      	adds	r7, #8
 801371c:	46bd      	mov	sp, r7
 801371e:	bd80      	pop	{r7, pc}
 8013720:	08017960 	.word	0x08017960
 8013724:	08017b18 	.word	0x08017b18
 8013728:	080179a8 	.word	0x080179a8

0801372c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801372c:	b580      	push	{r7, lr}
 801372e:	b084      	sub	sp, #16
 8013730:	af00      	add	r7, sp, #0
 8013732:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d106      	bne.n	801374c <ipfrag_free_pbuf_custom+0x20>
 801373e:	4b11      	ldr	r3, [pc, #68]	; (8013784 <ipfrag_free_pbuf_custom+0x58>)
 8013740:	f240 22ce 	movw	r2, #718	; 0x2ce
 8013744:	4910      	ldr	r1, [pc, #64]	; (8013788 <ipfrag_free_pbuf_custom+0x5c>)
 8013746:	4811      	ldr	r0, [pc, #68]	; (801378c <ipfrag_free_pbuf_custom+0x60>)
 8013748:	f000 fa8a 	bl	8013c60 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801374c:	68fa      	ldr	r2, [r7, #12]
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	429a      	cmp	r2, r3
 8013752:	d006      	beq.n	8013762 <ipfrag_free_pbuf_custom+0x36>
 8013754:	4b0b      	ldr	r3, [pc, #44]	; (8013784 <ipfrag_free_pbuf_custom+0x58>)
 8013756:	f240 22cf 	movw	r2, #719	; 0x2cf
 801375a:	490d      	ldr	r1, [pc, #52]	; (8013790 <ipfrag_free_pbuf_custom+0x64>)
 801375c:	480b      	ldr	r0, [pc, #44]	; (801378c <ipfrag_free_pbuf_custom+0x60>)
 801375e:	f000 fa7f 	bl	8013c60 <iprintf>
  if (pcr->original != NULL) {
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	695b      	ldr	r3, [r3, #20]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d004      	beq.n	8013774 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	695b      	ldr	r3, [r3, #20]
 801376e:	4618      	mov	r0, r3
 8013770:	f7f5 fe20 	bl	80093b4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013774:	68f8      	ldr	r0, [r7, #12]
 8013776:	f7ff ffbd 	bl	80136f4 <ip_frag_free_pbuf_custom_ref>
}
 801377a:	bf00      	nop
 801377c:	3710      	adds	r7, #16
 801377e:	46bd      	mov	sp, r7
 8013780:	bd80      	pop	{r7, pc}
 8013782:	bf00      	nop
 8013784:	08017960 	.word	0x08017960
 8013788:	08017b24 	.word	0x08017b24
 801378c:	080179a8 	.word	0x080179a8
 8013790:	08017b30 	.word	0x08017b30

08013794 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013794:	b580      	push	{r7, lr}
 8013796:	b094      	sub	sp, #80	; 0x50
 8013798:	af02      	add	r7, sp, #8
 801379a:	60f8      	str	r0, [r7, #12]
 801379c:	60b9      	str	r1, [r7, #8]
 801379e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80137a0:	2300      	movs	r3, #0
 80137a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80137a6:	68bb      	ldr	r3, [r7, #8]
 80137a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80137aa:	3b14      	subs	r3, #20
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	da00      	bge.n	80137b2 <ip4_frag+0x1e>
 80137b0:	3307      	adds	r3, #7
 80137b2:	10db      	asrs	r3, r3, #3
 80137b4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80137b6:	2314      	movs	r3, #20
 80137b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	685b      	ldr	r3, [r3, #4]
 80137be:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80137c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137c2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80137c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137c6:	781b      	ldrb	r3, [r3, #0]
 80137c8:	f003 030f 	and.w	r3, r3, #15
 80137cc:	b2db      	uxtb	r3, r3
 80137ce:	009b      	lsls	r3, r3, #2
 80137d0:	b2db      	uxtb	r3, r3
 80137d2:	2b14      	cmp	r3, #20
 80137d4:	d002      	beq.n	80137dc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80137d6:	f06f 0305 	mvn.w	r3, #5
 80137da:	e110      	b.n	80139fe <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	895b      	ldrh	r3, [r3, #10]
 80137e0:	2b13      	cmp	r3, #19
 80137e2:	d809      	bhi.n	80137f8 <ip4_frag+0x64>
 80137e4:	4b88      	ldr	r3, [pc, #544]	; (8013a08 <ip4_frag+0x274>)
 80137e6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80137ea:	4988      	ldr	r1, [pc, #544]	; (8013a0c <ip4_frag+0x278>)
 80137ec:	4888      	ldr	r0, [pc, #544]	; (8013a10 <ip4_frag+0x27c>)
 80137ee:	f000 fa37 	bl	8013c60 <iprintf>
 80137f2:	f06f 0305 	mvn.w	r3, #5
 80137f6:	e102      	b.n	80139fe <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80137f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137fa:	88db      	ldrh	r3, [r3, #6]
 80137fc:	b29b      	uxth	r3, r3
 80137fe:	4618      	mov	r0, r3
 8013800:	f7f4 fa6e 	bl	8007ce0 <lwip_htons>
 8013804:	4603      	mov	r3, r0
 8013806:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013808:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801380a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801380e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013812:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013814:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013818:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	891b      	ldrh	r3, [r3, #8]
 801381e:	3b14      	subs	r3, #20
 8013820:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8013824:	e0e1      	b.n	80139ea <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013826:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013828:	00db      	lsls	r3, r3, #3
 801382a:	b29b      	uxth	r3, r3
 801382c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013830:	4293      	cmp	r3, r2
 8013832:	bf28      	it	cs
 8013834:	4613      	movcs	r3, r2
 8013836:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013838:	f44f 7220 	mov.w	r2, #640	; 0x280
 801383c:	2114      	movs	r1, #20
 801383e:	200e      	movs	r0, #14
 8013840:	f7f5 fad4 	bl	8008dec <pbuf_alloc>
 8013844:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8013846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013848:	2b00      	cmp	r3, #0
 801384a:	f000 80d5 	beq.w	80139f8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013850:	895b      	ldrh	r3, [r3, #10]
 8013852:	2b13      	cmp	r3, #19
 8013854:	d806      	bhi.n	8013864 <ip4_frag+0xd0>
 8013856:	4b6c      	ldr	r3, [pc, #432]	; (8013a08 <ip4_frag+0x274>)
 8013858:	f44f 7249 	mov.w	r2, #804	; 0x324
 801385c:	496d      	ldr	r1, [pc, #436]	; (8013a14 <ip4_frag+0x280>)
 801385e:	486c      	ldr	r0, [pc, #432]	; (8013a10 <ip4_frag+0x27c>)
 8013860:	f000 f9fe 	bl	8013c60 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013866:	685b      	ldr	r3, [r3, #4]
 8013868:	2214      	movs	r2, #20
 801386a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801386c:	4618      	mov	r0, r3
 801386e:	f000 f9e1 	bl	8013c34 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013874:	685b      	ldr	r3, [r3, #4]
 8013876:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8013878:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801387a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801387e:	e064      	b.n	801394a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	895a      	ldrh	r2, [r3, #10]
 8013884:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013886:	1ad3      	subs	r3, r2, r3
 8013888:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	895b      	ldrh	r3, [r3, #10]
 801388e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013890:	429a      	cmp	r2, r3
 8013892:	d906      	bls.n	80138a2 <ip4_frag+0x10e>
 8013894:	4b5c      	ldr	r3, [pc, #368]	; (8013a08 <ip4_frag+0x274>)
 8013896:	f240 322d 	movw	r2, #813	; 0x32d
 801389a:	495f      	ldr	r1, [pc, #380]	; (8013a18 <ip4_frag+0x284>)
 801389c:	485c      	ldr	r0, [pc, #368]	; (8013a10 <ip4_frag+0x27c>)
 801389e:	f000 f9df 	bl	8013c60 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80138a2:	8bfa      	ldrh	r2, [r7, #30]
 80138a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80138a8:	4293      	cmp	r3, r2
 80138aa:	bf28      	it	cs
 80138ac:	4613      	movcs	r3, r2
 80138ae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80138b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d105      	bne.n	80138c6 <ip4_frag+0x132>
        poff = 0;
 80138ba:	2300      	movs	r3, #0
 80138bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	60fb      	str	r3, [r7, #12]
        continue;
 80138c4:	e041      	b.n	801394a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80138c6:	f7ff ff0d 	bl	80136e4 <ip_frag_alloc_pbuf_custom_ref>
 80138ca:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80138cc:	69bb      	ldr	r3, [r7, #24]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d103      	bne.n	80138da <ip4_frag+0x146>
        pbuf_free(rambuf);
 80138d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80138d4:	f7f5 fd6e 	bl	80093b4 <pbuf_free>
        goto memerr;
 80138d8:	e08f      	b.n	80139fa <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80138da:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80138e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80138e2:	4413      	add	r3, r2
 80138e4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80138e8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80138ec:	9201      	str	r2, [sp, #4]
 80138ee:	9300      	str	r3, [sp, #0]
 80138f0:	4603      	mov	r3, r0
 80138f2:	2241      	movs	r2, #65	; 0x41
 80138f4:	2000      	movs	r0, #0
 80138f6:	f7f5 fba3 	bl	8009040 <pbuf_alloced_custom>
 80138fa:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80138fc:	697b      	ldr	r3, [r7, #20]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d106      	bne.n	8013910 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013902:	69b8      	ldr	r0, [r7, #24]
 8013904:	f7ff fef6 	bl	80136f4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013908:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801390a:	f7f5 fd53 	bl	80093b4 <pbuf_free>
        goto memerr;
 801390e:	e074      	b.n	80139fa <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013910:	68f8      	ldr	r0, [r7, #12]
 8013912:	f7f5 fdef 	bl	80094f4 <pbuf_ref>
      pcr->original = p;
 8013916:	69bb      	ldr	r3, [r7, #24]
 8013918:	68fa      	ldr	r2, [r7, #12]
 801391a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801391c:	69bb      	ldr	r3, [r7, #24]
 801391e:	4a3f      	ldr	r2, [pc, #252]	; (8013a1c <ip4_frag+0x288>)
 8013920:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013922:	6979      	ldr	r1, [r7, #20]
 8013924:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013926:	f7f5 fe07 	bl	8009538 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801392a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801392e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013932:	1ad3      	subs	r3, r2, r3
 8013934:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013938:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801393c:	2b00      	cmp	r3, #0
 801393e:	d004      	beq.n	801394a <ip4_frag+0x1b6>
        poff = 0;
 8013940:	2300      	movs	r3, #0
 8013942:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801394a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801394e:	2b00      	cmp	r3, #0
 8013950:	d196      	bne.n	8013880 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013952:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013954:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013958:	4413      	add	r3, r2
 801395a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801395c:	68bb      	ldr	r3, [r7, #8]
 801395e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013960:	f1a3 0213 	sub.w	r2, r3, #19
 8013964:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013968:	429a      	cmp	r2, r3
 801396a:	bfcc      	ite	gt
 801396c:	2301      	movgt	r3, #1
 801396e:	2300      	movle	r3, #0
 8013970:	b2db      	uxtb	r3, r3
 8013972:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013974:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013978:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801397c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801397e:	6a3b      	ldr	r3, [r7, #32]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d002      	beq.n	801398a <ip4_frag+0x1f6>
 8013984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013986:	2b00      	cmp	r3, #0
 8013988:	d003      	beq.n	8013992 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801398a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801398c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013990:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013992:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013994:	4618      	mov	r0, r3
 8013996:	f7f4 f9a3 	bl	8007ce0 <lwip_htons>
 801399a:	4603      	mov	r3, r0
 801399c:	461a      	mov	r2, r3
 801399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139a0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80139a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80139a4:	3314      	adds	r3, #20
 80139a6:	b29b      	uxth	r3, r3
 80139a8:	4618      	mov	r0, r3
 80139aa:	f7f4 f999 	bl	8007ce0 <lwip_htons>
 80139ae:	4603      	mov	r3, r0
 80139b0:	461a      	mov	r2, r3
 80139b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80139b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b8:	2200      	movs	r2, #0
 80139ba:	729a      	strb	r2, [r3, #10]
 80139bc:	2200      	movs	r2, #0
 80139be:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80139c0:	68bb      	ldr	r3, [r7, #8]
 80139c2:	695b      	ldr	r3, [r3, #20]
 80139c4:	687a      	ldr	r2, [r7, #4]
 80139c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80139c8:	68b8      	ldr	r0, [r7, #8]
 80139ca:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80139cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80139ce:	f7f5 fcf1 	bl	80093b4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80139d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80139d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80139d8:	1ad3      	subs	r3, r2, r3
 80139da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80139de:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80139e2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80139e4:	4413      	add	r3, r2
 80139e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80139ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	f47f af19 	bne.w	8013826 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80139f4:	2300      	movs	r3, #0
 80139f6:	e002      	b.n	80139fe <ip4_frag+0x26a>
      goto memerr;
 80139f8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80139fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80139fe:	4618      	mov	r0, r3
 8013a00:	3748      	adds	r7, #72	; 0x48
 8013a02:	46bd      	mov	sp, r7
 8013a04:	bd80      	pop	{r7, pc}
 8013a06:	bf00      	nop
 8013a08:	08017960 	.word	0x08017960
 8013a0c:	08017b3c 	.word	0x08017b3c
 8013a10:	080179a8 	.word	0x080179a8
 8013a14:	08017b58 	.word	0x08017b58
 8013a18:	08017b78 	.word	0x08017b78
 8013a1c:	0801372d 	.word	0x0801372d

08013a20 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b086      	sub	sp, #24
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	6078      	str	r0, [r7, #4]
 8013a28:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013a2a:	230e      	movs	r3, #14
 8013a2c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	895b      	ldrh	r3, [r3, #10]
 8013a32:	2b0e      	cmp	r3, #14
 8013a34:	d96e      	bls.n	8013b14 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	7bdb      	ldrb	r3, [r3, #15]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d106      	bne.n	8013a4c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013a3e:	683b      	ldr	r3, [r7, #0]
 8013a40:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013a44:	3301      	adds	r3, #1
 8013a46:	b2da      	uxtb	r2, r3
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	685b      	ldr	r3, [r3, #4]
 8013a50:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013a52:	693b      	ldr	r3, [r7, #16]
 8013a54:	7b1a      	ldrb	r2, [r3, #12]
 8013a56:	7b5b      	ldrb	r3, [r3, #13]
 8013a58:	021b      	lsls	r3, r3, #8
 8013a5a:	4313      	orrs	r3, r2
 8013a5c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013a5e:	693b      	ldr	r3, [r7, #16]
 8013a60:	781b      	ldrb	r3, [r3, #0]
 8013a62:	f003 0301 	and.w	r3, r3, #1
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d023      	beq.n	8013ab2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013a6a:	693b      	ldr	r3, [r7, #16]
 8013a6c:	781b      	ldrb	r3, [r3, #0]
 8013a6e:	2b01      	cmp	r3, #1
 8013a70:	d10f      	bne.n	8013a92 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013a72:	693b      	ldr	r3, [r7, #16]
 8013a74:	785b      	ldrb	r3, [r3, #1]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d11b      	bne.n	8013ab2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013a7a:	693b      	ldr	r3, [r7, #16]
 8013a7c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013a7e:	2b5e      	cmp	r3, #94	; 0x5e
 8013a80:	d117      	bne.n	8013ab2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	7b5b      	ldrb	r3, [r3, #13]
 8013a86:	f043 0310 	orr.w	r3, r3, #16
 8013a8a:	b2da      	uxtb	r2, r3
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	735a      	strb	r2, [r3, #13]
 8013a90:	e00f      	b.n	8013ab2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013a92:	693b      	ldr	r3, [r7, #16]
 8013a94:	2206      	movs	r2, #6
 8013a96:	4928      	ldr	r1, [pc, #160]	; (8013b38 <ethernet_input+0x118>)
 8013a98:	4618      	mov	r0, r3
 8013a9a:	f000 f8bb 	bl	8013c14 <memcmp>
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d106      	bne.n	8013ab2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	7b5b      	ldrb	r3, [r3, #13]
 8013aa8:	f043 0308 	orr.w	r3, r3, #8
 8013aac:	b2da      	uxtb	r2, r3
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013ab2:	89fb      	ldrh	r3, [r7, #14]
 8013ab4:	2b08      	cmp	r3, #8
 8013ab6:	d003      	beq.n	8013ac0 <ethernet_input+0xa0>
 8013ab8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013abc:	d014      	beq.n	8013ae8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013abe:	e032      	b.n	8013b26 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013ac0:	683b      	ldr	r3, [r7, #0]
 8013ac2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013ac6:	f003 0308 	and.w	r3, r3, #8
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d024      	beq.n	8013b18 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013ace:	8afb      	ldrh	r3, [r7, #22]
 8013ad0:	4619      	mov	r1, r3
 8013ad2:	6878      	ldr	r0, [r7, #4]
 8013ad4:	f7f5 fbe8 	bl	80092a8 <pbuf_remove_header>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d11e      	bne.n	8013b1c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013ade:	6839      	ldr	r1, [r7, #0]
 8013ae0:	6878      	ldr	r0, [r7, #4]
 8013ae2:	f7fe fe73 	bl	80127cc <ip4_input>
      break;
 8013ae6:	e013      	b.n	8013b10 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013ae8:	683b      	ldr	r3, [r7, #0]
 8013aea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013aee:	f003 0308 	and.w	r3, r3, #8
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d014      	beq.n	8013b20 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013af6:	8afb      	ldrh	r3, [r7, #22]
 8013af8:	4619      	mov	r1, r3
 8013afa:	6878      	ldr	r0, [r7, #4]
 8013afc:	f7f5 fbd4 	bl	80092a8 <pbuf_remove_header>
 8013b00:	4603      	mov	r3, r0
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d10e      	bne.n	8013b24 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013b06:	6839      	ldr	r1, [r7, #0]
 8013b08:	6878      	ldr	r0, [r7, #4]
 8013b0a:	f7fe f80f 	bl	8011b2c <etharp_input>
      break;
 8013b0e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013b10:	2300      	movs	r3, #0
 8013b12:	e00c      	b.n	8013b2e <ethernet_input+0x10e>
    goto free_and_return;
 8013b14:	bf00      	nop
 8013b16:	e006      	b.n	8013b26 <ethernet_input+0x106>
        goto free_and_return;
 8013b18:	bf00      	nop
 8013b1a:	e004      	b.n	8013b26 <ethernet_input+0x106>
        goto free_and_return;
 8013b1c:	bf00      	nop
 8013b1e:	e002      	b.n	8013b26 <ethernet_input+0x106>
        goto free_and_return;
 8013b20:	bf00      	nop
 8013b22:	e000      	b.n	8013b26 <ethernet_input+0x106>
        goto free_and_return;
 8013b24:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013b26:	6878      	ldr	r0, [r7, #4]
 8013b28:	f7f5 fc44 	bl	80093b4 <pbuf_free>
  return ERR_OK;
 8013b2c:	2300      	movs	r3, #0
}
 8013b2e:	4618      	mov	r0, r3
 8013b30:	3718      	adds	r7, #24
 8013b32:	46bd      	mov	sp, r7
 8013b34:	bd80      	pop	{r7, pc}
 8013b36:	bf00      	nop
 8013b38:	0801a250 	.word	0x0801a250

08013b3c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b086      	sub	sp, #24
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	60f8      	str	r0, [r7, #12]
 8013b44:	60b9      	str	r1, [r7, #8]
 8013b46:	607a      	str	r2, [r7, #4]
 8013b48:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013b4a:	8c3b      	ldrh	r3, [r7, #32]
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f7f4 f8c7 	bl	8007ce0 <lwip_htons>
 8013b52:	4603      	mov	r3, r0
 8013b54:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013b56:	210e      	movs	r1, #14
 8013b58:	68b8      	ldr	r0, [r7, #8]
 8013b5a:	f7f5 fb95 	bl	8009288 <pbuf_add_header>
 8013b5e:	4603      	mov	r3, r0
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d125      	bne.n	8013bb0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013b64:	68bb      	ldr	r3, [r7, #8]
 8013b66:	685b      	ldr	r3, [r3, #4]
 8013b68:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013b6a:	693b      	ldr	r3, [r7, #16]
 8013b6c:	8afa      	ldrh	r2, [r7, #22]
 8013b6e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013b70:	693b      	ldr	r3, [r7, #16]
 8013b72:	2206      	movs	r2, #6
 8013b74:	6839      	ldr	r1, [r7, #0]
 8013b76:	4618      	mov	r0, r3
 8013b78:	f000 f85c 	bl	8013c34 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013b7c:	693b      	ldr	r3, [r7, #16]
 8013b7e:	3306      	adds	r3, #6
 8013b80:	2206      	movs	r2, #6
 8013b82:	6879      	ldr	r1, [r7, #4]
 8013b84:	4618      	mov	r0, r3
 8013b86:	f000 f855 	bl	8013c34 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013b90:	2b06      	cmp	r3, #6
 8013b92:	d006      	beq.n	8013ba2 <ethernet_output+0x66>
 8013b94:	4b0a      	ldr	r3, [pc, #40]	; (8013bc0 <ethernet_output+0x84>)
 8013b96:	f44f 7299 	mov.w	r2, #306	; 0x132
 8013b9a:	490a      	ldr	r1, [pc, #40]	; (8013bc4 <ethernet_output+0x88>)
 8013b9c:	480a      	ldr	r0, [pc, #40]	; (8013bc8 <ethernet_output+0x8c>)
 8013b9e:	f000 f85f 	bl	8013c60 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	699b      	ldr	r3, [r3, #24]
 8013ba6:	68b9      	ldr	r1, [r7, #8]
 8013ba8:	68f8      	ldr	r0, [r7, #12]
 8013baa:	4798      	blx	r3
 8013bac:	4603      	mov	r3, r0
 8013bae:	e002      	b.n	8013bb6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013bb0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013bb2:	f06f 0301 	mvn.w	r3, #1
}
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	3718      	adds	r7, #24
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	bd80      	pop	{r7, pc}
 8013bbe:	bf00      	nop
 8013bc0:	08017b88 	.word	0x08017b88
 8013bc4:	08017bc0 	.word	0x08017bc0
 8013bc8:	08017bf4 	.word	0x08017bf4

08013bcc <__libc_init_array>:
 8013bcc:	b570      	push	{r4, r5, r6, lr}
 8013bce:	4d0d      	ldr	r5, [pc, #52]	; (8013c04 <__libc_init_array+0x38>)
 8013bd0:	4c0d      	ldr	r4, [pc, #52]	; (8013c08 <__libc_init_array+0x3c>)
 8013bd2:	1b64      	subs	r4, r4, r5
 8013bd4:	10a4      	asrs	r4, r4, #2
 8013bd6:	2600      	movs	r6, #0
 8013bd8:	42a6      	cmp	r6, r4
 8013bda:	d109      	bne.n	8013bf0 <__libc_init_array+0x24>
 8013bdc:	4d0b      	ldr	r5, [pc, #44]	; (8013c0c <__libc_init_array+0x40>)
 8013bde:	4c0c      	ldr	r4, [pc, #48]	; (8013c10 <__libc_init_array+0x44>)
 8013be0:	f001 f88e 	bl	8014d00 <_init>
 8013be4:	1b64      	subs	r4, r4, r5
 8013be6:	10a4      	asrs	r4, r4, #2
 8013be8:	2600      	movs	r6, #0
 8013bea:	42a6      	cmp	r6, r4
 8013bec:	d105      	bne.n	8013bfa <__libc_init_array+0x2e>
 8013bee:	bd70      	pop	{r4, r5, r6, pc}
 8013bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8013bf4:	4798      	blx	r3
 8013bf6:	3601      	adds	r6, #1
 8013bf8:	e7ee      	b.n	8013bd8 <__libc_init_array+0xc>
 8013bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8013bfe:	4798      	blx	r3
 8013c00:	3601      	adds	r6, #1
 8013c02:	e7f2      	b.n	8013bea <__libc_init_array+0x1e>
 8013c04:	0801a3b0 	.word	0x0801a3b0
 8013c08:	0801a3b0 	.word	0x0801a3b0
 8013c0c:	0801a3b0 	.word	0x0801a3b0
 8013c10:	0801a3b4 	.word	0x0801a3b4

08013c14 <memcmp>:
 8013c14:	b510      	push	{r4, lr}
 8013c16:	3901      	subs	r1, #1
 8013c18:	4402      	add	r2, r0
 8013c1a:	4290      	cmp	r0, r2
 8013c1c:	d101      	bne.n	8013c22 <memcmp+0xe>
 8013c1e:	2000      	movs	r0, #0
 8013c20:	e005      	b.n	8013c2e <memcmp+0x1a>
 8013c22:	7803      	ldrb	r3, [r0, #0]
 8013c24:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013c28:	42a3      	cmp	r3, r4
 8013c2a:	d001      	beq.n	8013c30 <memcmp+0x1c>
 8013c2c:	1b18      	subs	r0, r3, r4
 8013c2e:	bd10      	pop	{r4, pc}
 8013c30:	3001      	adds	r0, #1
 8013c32:	e7f2      	b.n	8013c1a <memcmp+0x6>

08013c34 <memcpy>:
 8013c34:	440a      	add	r2, r1
 8013c36:	4291      	cmp	r1, r2
 8013c38:	f100 33ff 	add.w	r3, r0, #4294967295
 8013c3c:	d100      	bne.n	8013c40 <memcpy+0xc>
 8013c3e:	4770      	bx	lr
 8013c40:	b510      	push	{r4, lr}
 8013c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013c46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013c4a:	4291      	cmp	r1, r2
 8013c4c:	d1f9      	bne.n	8013c42 <memcpy+0xe>
 8013c4e:	bd10      	pop	{r4, pc}

08013c50 <memset>:
 8013c50:	4402      	add	r2, r0
 8013c52:	4603      	mov	r3, r0
 8013c54:	4293      	cmp	r3, r2
 8013c56:	d100      	bne.n	8013c5a <memset+0xa>
 8013c58:	4770      	bx	lr
 8013c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8013c5e:	e7f9      	b.n	8013c54 <memset+0x4>

08013c60 <iprintf>:
 8013c60:	b40f      	push	{r0, r1, r2, r3}
 8013c62:	4b0a      	ldr	r3, [pc, #40]	; (8013c8c <iprintf+0x2c>)
 8013c64:	b513      	push	{r0, r1, r4, lr}
 8013c66:	681c      	ldr	r4, [r3, #0]
 8013c68:	b124      	cbz	r4, 8013c74 <iprintf+0x14>
 8013c6a:	69a3      	ldr	r3, [r4, #24]
 8013c6c:	b913      	cbnz	r3, 8013c74 <iprintf+0x14>
 8013c6e:	4620      	mov	r0, r4
 8013c70:	f000 f8c2 	bl	8013df8 <__sinit>
 8013c74:	ab05      	add	r3, sp, #20
 8013c76:	9a04      	ldr	r2, [sp, #16]
 8013c78:	68a1      	ldr	r1, [r4, #8]
 8013c7a:	9301      	str	r3, [sp, #4]
 8013c7c:	4620      	mov	r0, r4
 8013c7e:	f000 fa7f 	bl	8014180 <_vfiprintf_r>
 8013c82:	b002      	add	sp, #8
 8013c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c88:	b004      	add	sp, #16
 8013c8a:	4770      	bx	lr
 8013c8c:	20000048 	.word	0x20000048

08013c90 <rand>:
 8013c90:	4b16      	ldr	r3, [pc, #88]	; (8013cec <rand+0x5c>)
 8013c92:	b510      	push	{r4, lr}
 8013c94:	681c      	ldr	r4, [r3, #0]
 8013c96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013c98:	b9b3      	cbnz	r3, 8013cc8 <rand+0x38>
 8013c9a:	2018      	movs	r0, #24
 8013c9c:	f000 f95e 	bl	8013f5c <malloc>
 8013ca0:	63a0      	str	r0, [r4, #56]	; 0x38
 8013ca2:	b928      	cbnz	r0, 8013cb0 <rand+0x20>
 8013ca4:	4602      	mov	r2, r0
 8013ca6:	4b12      	ldr	r3, [pc, #72]	; (8013cf0 <rand+0x60>)
 8013ca8:	4812      	ldr	r0, [pc, #72]	; (8013cf4 <rand+0x64>)
 8013caa:	214e      	movs	r1, #78	; 0x4e
 8013cac:	f000 f82e 	bl	8013d0c <__assert_func>
 8013cb0:	4a11      	ldr	r2, [pc, #68]	; (8013cf8 <rand+0x68>)
 8013cb2:	4b12      	ldr	r3, [pc, #72]	; (8013cfc <rand+0x6c>)
 8013cb4:	e9c0 2300 	strd	r2, r3, [r0]
 8013cb8:	4b11      	ldr	r3, [pc, #68]	; (8013d00 <rand+0x70>)
 8013cba:	6083      	str	r3, [r0, #8]
 8013cbc:	230b      	movs	r3, #11
 8013cbe:	8183      	strh	r3, [r0, #12]
 8013cc0:	2201      	movs	r2, #1
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013cc8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8013cca:	4a0e      	ldr	r2, [pc, #56]	; (8013d04 <rand+0x74>)
 8013ccc:	6920      	ldr	r0, [r4, #16]
 8013cce:	6963      	ldr	r3, [r4, #20]
 8013cd0:	490d      	ldr	r1, [pc, #52]	; (8013d08 <rand+0x78>)
 8013cd2:	4342      	muls	r2, r0
 8013cd4:	fb01 2203 	mla	r2, r1, r3, r2
 8013cd8:	fba0 0101 	umull	r0, r1, r0, r1
 8013cdc:	1c43      	adds	r3, r0, #1
 8013cde:	eb42 0001 	adc.w	r0, r2, r1
 8013ce2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8013ce6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013cea:	bd10      	pop	{r4, pc}
 8013cec:	20000048 	.word	0x20000048
 8013cf0:	0801a264 	.word	0x0801a264
 8013cf4:	0801a27b 	.word	0x0801a27b
 8013cf8:	abcd330e 	.word	0xabcd330e
 8013cfc:	e66d1234 	.word	0xe66d1234
 8013d00:	0005deec 	.word	0x0005deec
 8013d04:	5851f42d 	.word	0x5851f42d
 8013d08:	4c957f2d 	.word	0x4c957f2d

08013d0c <__assert_func>:
 8013d0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013d0e:	4614      	mov	r4, r2
 8013d10:	461a      	mov	r2, r3
 8013d12:	4b09      	ldr	r3, [pc, #36]	; (8013d38 <__assert_func+0x2c>)
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	4605      	mov	r5, r0
 8013d18:	68d8      	ldr	r0, [r3, #12]
 8013d1a:	b14c      	cbz	r4, 8013d30 <__assert_func+0x24>
 8013d1c:	4b07      	ldr	r3, [pc, #28]	; (8013d3c <__assert_func+0x30>)
 8013d1e:	9100      	str	r1, [sp, #0]
 8013d20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013d24:	4906      	ldr	r1, [pc, #24]	; (8013d40 <__assert_func+0x34>)
 8013d26:	462b      	mov	r3, r5
 8013d28:	f000 f8e4 	bl	8013ef4 <fiprintf>
 8013d2c:	f000 fe12 	bl	8014954 <abort>
 8013d30:	4b04      	ldr	r3, [pc, #16]	; (8013d44 <__assert_func+0x38>)
 8013d32:	461c      	mov	r4, r3
 8013d34:	e7f3      	b.n	8013d1e <__assert_func+0x12>
 8013d36:	bf00      	nop
 8013d38:	20000048 	.word	0x20000048
 8013d3c:	0801a2d6 	.word	0x0801a2d6
 8013d40:	0801a2e3 	.word	0x0801a2e3
 8013d44:	0801a311 	.word	0x0801a311

08013d48 <std>:
 8013d48:	2300      	movs	r3, #0
 8013d4a:	b510      	push	{r4, lr}
 8013d4c:	4604      	mov	r4, r0
 8013d4e:	e9c0 3300 	strd	r3, r3, [r0]
 8013d52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013d56:	6083      	str	r3, [r0, #8]
 8013d58:	8181      	strh	r1, [r0, #12]
 8013d5a:	6643      	str	r3, [r0, #100]	; 0x64
 8013d5c:	81c2      	strh	r2, [r0, #14]
 8013d5e:	6183      	str	r3, [r0, #24]
 8013d60:	4619      	mov	r1, r3
 8013d62:	2208      	movs	r2, #8
 8013d64:	305c      	adds	r0, #92	; 0x5c
 8013d66:	f7ff ff73 	bl	8013c50 <memset>
 8013d6a:	4b05      	ldr	r3, [pc, #20]	; (8013d80 <std+0x38>)
 8013d6c:	6263      	str	r3, [r4, #36]	; 0x24
 8013d6e:	4b05      	ldr	r3, [pc, #20]	; (8013d84 <std+0x3c>)
 8013d70:	62a3      	str	r3, [r4, #40]	; 0x28
 8013d72:	4b05      	ldr	r3, [pc, #20]	; (8013d88 <std+0x40>)
 8013d74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013d76:	4b05      	ldr	r3, [pc, #20]	; (8013d8c <std+0x44>)
 8013d78:	6224      	str	r4, [r4, #32]
 8013d7a:	6323      	str	r3, [r4, #48]	; 0x30
 8013d7c:	bd10      	pop	{r4, pc}
 8013d7e:	bf00      	nop
 8013d80:	08014729 	.word	0x08014729
 8013d84:	0801474b 	.word	0x0801474b
 8013d88:	08014783 	.word	0x08014783
 8013d8c:	080147a7 	.word	0x080147a7

08013d90 <_cleanup_r>:
 8013d90:	4901      	ldr	r1, [pc, #4]	; (8013d98 <_cleanup_r+0x8>)
 8013d92:	f000 b8c1 	b.w	8013f18 <_fwalk_reent>
 8013d96:	bf00      	nop
 8013d98:	08014a91 	.word	0x08014a91

08013d9c <__sfmoreglue>:
 8013d9c:	b570      	push	{r4, r5, r6, lr}
 8013d9e:	2268      	movs	r2, #104	; 0x68
 8013da0:	1e4d      	subs	r5, r1, #1
 8013da2:	4355      	muls	r5, r2
 8013da4:	460e      	mov	r6, r1
 8013da6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013daa:	f000 f94b 	bl	8014044 <_malloc_r>
 8013dae:	4604      	mov	r4, r0
 8013db0:	b140      	cbz	r0, 8013dc4 <__sfmoreglue+0x28>
 8013db2:	2100      	movs	r1, #0
 8013db4:	e9c0 1600 	strd	r1, r6, [r0]
 8013db8:	300c      	adds	r0, #12
 8013dba:	60a0      	str	r0, [r4, #8]
 8013dbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013dc0:	f7ff ff46 	bl	8013c50 <memset>
 8013dc4:	4620      	mov	r0, r4
 8013dc6:	bd70      	pop	{r4, r5, r6, pc}

08013dc8 <__sfp_lock_acquire>:
 8013dc8:	4801      	ldr	r0, [pc, #4]	; (8013dd0 <__sfp_lock_acquire+0x8>)
 8013dca:	f000 b8c5 	b.w	8013f58 <__retarget_lock_acquire_recursive>
 8013dce:	bf00      	nop
 8013dd0:	2000b065 	.word	0x2000b065

08013dd4 <__sfp_lock_release>:
 8013dd4:	4801      	ldr	r0, [pc, #4]	; (8013ddc <__sfp_lock_release+0x8>)
 8013dd6:	f000 b8c0 	b.w	8013f5a <__retarget_lock_release_recursive>
 8013dda:	bf00      	nop
 8013ddc:	2000b065 	.word	0x2000b065

08013de0 <__sinit_lock_acquire>:
 8013de0:	4801      	ldr	r0, [pc, #4]	; (8013de8 <__sinit_lock_acquire+0x8>)
 8013de2:	f000 b8b9 	b.w	8013f58 <__retarget_lock_acquire_recursive>
 8013de6:	bf00      	nop
 8013de8:	2000b066 	.word	0x2000b066

08013dec <__sinit_lock_release>:
 8013dec:	4801      	ldr	r0, [pc, #4]	; (8013df4 <__sinit_lock_release+0x8>)
 8013dee:	f000 b8b4 	b.w	8013f5a <__retarget_lock_release_recursive>
 8013df2:	bf00      	nop
 8013df4:	2000b066 	.word	0x2000b066

08013df8 <__sinit>:
 8013df8:	b510      	push	{r4, lr}
 8013dfa:	4604      	mov	r4, r0
 8013dfc:	f7ff fff0 	bl	8013de0 <__sinit_lock_acquire>
 8013e00:	69a3      	ldr	r3, [r4, #24]
 8013e02:	b11b      	cbz	r3, 8013e0c <__sinit+0x14>
 8013e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e08:	f7ff bff0 	b.w	8013dec <__sinit_lock_release>
 8013e0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013e10:	6523      	str	r3, [r4, #80]	; 0x50
 8013e12:	4b13      	ldr	r3, [pc, #76]	; (8013e60 <__sinit+0x68>)
 8013e14:	4a13      	ldr	r2, [pc, #76]	; (8013e64 <__sinit+0x6c>)
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	62a2      	str	r2, [r4, #40]	; 0x28
 8013e1a:	42a3      	cmp	r3, r4
 8013e1c:	bf04      	itt	eq
 8013e1e:	2301      	moveq	r3, #1
 8013e20:	61a3      	streq	r3, [r4, #24]
 8013e22:	4620      	mov	r0, r4
 8013e24:	f000 f820 	bl	8013e68 <__sfp>
 8013e28:	6060      	str	r0, [r4, #4]
 8013e2a:	4620      	mov	r0, r4
 8013e2c:	f000 f81c 	bl	8013e68 <__sfp>
 8013e30:	60a0      	str	r0, [r4, #8]
 8013e32:	4620      	mov	r0, r4
 8013e34:	f000 f818 	bl	8013e68 <__sfp>
 8013e38:	2200      	movs	r2, #0
 8013e3a:	60e0      	str	r0, [r4, #12]
 8013e3c:	2104      	movs	r1, #4
 8013e3e:	6860      	ldr	r0, [r4, #4]
 8013e40:	f7ff ff82 	bl	8013d48 <std>
 8013e44:	68a0      	ldr	r0, [r4, #8]
 8013e46:	2201      	movs	r2, #1
 8013e48:	2109      	movs	r1, #9
 8013e4a:	f7ff ff7d 	bl	8013d48 <std>
 8013e4e:	68e0      	ldr	r0, [r4, #12]
 8013e50:	2202      	movs	r2, #2
 8013e52:	2112      	movs	r1, #18
 8013e54:	f7ff ff78 	bl	8013d48 <std>
 8013e58:	2301      	movs	r3, #1
 8013e5a:	61a3      	str	r3, [r4, #24]
 8013e5c:	e7d2      	b.n	8013e04 <__sinit+0xc>
 8013e5e:	bf00      	nop
 8013e60:	0801a260 	.word	0x0801a260
 8013e64:	08013d91 	.word	0x08013d91

08013e68 <__sfp>:
 8013e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e6a:	4607      	mov	r7, r0
 8013e6c:	f7ff ffac 	bl	8013dc8 <__sfp_lock_acquire>
 8013e70:	4b1e      	ldr	r3, [pc, #120]	; (8013eec <__sfp+0x84>)
 8013e72:	681e      	ldr	r6, [r3, #0]
 8013e74:	69b3      	ldr	r3, [r6, #24]
 8013e76:	b913      	cbnz	r3, 8013e7e <__sfp+0x16>
 8013e78:	4630      	mov	r0, r6
 8013e7a:	f7ff ffbd 	bl	8013df8 <__sinit>
 8013e7e:	3648      	adds	r6, #72	; 0x48
 8013e80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013e84:	3b01      	subs	r3, #1
 8013e86:	d503      	bpl.n	8013e90 <__sfp+0x28>
 8013e88:	6833      	ldr	r3, [r6, #0]
 8013e8a:	b30b      	cbz	r3, 8013ed0 <__sfp+0x68>
 8013e8c:	6836      	ldr	r6, [r6, #0]
 8013e8e:	e7f7      	b.n	8013e80 <__sfp+0x18>
 8013e90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013e94:	b9d5      	cbnz	r5, 8013ecc <__sfp+0x64>
 8013e96:	4b16      	ldr	r3, [pc, #88]	; (8013ef0 <__sfp+0x88>)
 8013e98:	60e3      	str	r3, [r4, #12]
 8013e9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013e9e:	6665      	str	r5, [r4, #100]	; 0x64
 8013ea0:	f000 f859 	bl	8013f56 <__retarget_lock_init_recursive>
 8013ea4:	f7ff ff96 	bl	8013dd4 <__sfp_lock_release>
 8013ea8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013eac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013eb0:	6025      	str	r5, [r4, #0]
 8013eb2:	61a5      	str	r5, [r4, #24]
 8013eb4:	2208      	movs	r2, #8
 8013eb6:	4629      	mov	r1, r5
 8013eb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013ebc:	f7ff fec8 	bl	8013c50 <memset>
 8013ec0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013ec4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013ec8:	4620      	mov	r0, r4
 8013eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ecc:	3468      	adds	r4, #104	; 0x68
 8013ece:	e7d9      	b.n	8013e84 <__sfp+0x1c>
 8013ed0:	2104      	movs	r1, #4
 8013ed2:	4638      	mov	r0, r7
 8013ed4:	f7ff ff62 	bl	8013d9c <__sfmoreglue>
 8013ed8:	4604      	mov	r4, r0
 8013eda:	6030      	str	r0, [r6, #0]
 8013edc:	2800      	cmp	r0, #0
 8013ede:	d1d5      	bne.n	8013e8c <__sfp+0x24>
 8013ee0:	f7ff ff78 	bl	8013dd4 <__sfp_lock_release>
 8013ee4:	230c      	movs	r3, #12
 8013ee6:	603b      	str	r3, [r7, #0]
 8013ee8:	e7ee      	b.n	8013ec8 <__sfp+0x60>
 8013eea:	bf00      	nop
 8013eec:	0801a260 	.word	0x0801a260
 8013ef0:	ffff0001 	.word	0xffff0001

08013ef4 <fiprintf>:
 8013ef4:	b40e      	push	{r1, r2, r3}
 8013ef6:	b503      	push	{r0, r1, lr}
 8013ef8:	4601      	mov	r1, r0
 8013efa:	ab03      	add	r3, sp, #12
 8013efc:	4805      	ldr	r0, [pc, #20]	; (8013f14 <fiprintf+0x20>)
 8013efe:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f02:	6800      	ldr	r0, [r0, #0]
 8013f04:	9301      	str	r3, [sp, #4]
 8013f06:	f000 f93b 	bl	8014180 <_vfiprintf_r>
 8013f0a:	b002      	add	sp, #8
 8013f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013f10:	b003      	add	sp, #12
 8013f12:	4770      	bx	lr
 8013f14:	20000048 	.word	0x20000048

08013f18 <_fwalk_reent>:
 8013f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f1c:	4606      	mov	r6, r0
 8013f1e:	4688      	mov	r8, r1
 8013f20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013f24:	2700      	movs	r7, #0
 8013f26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013f2a:	f1b9 0901 	subs.w	r9, r9, #1
 8013f2e:	d505      	bpl.n	8013f3c <_fwalk_reent+0x24>
 8013f30:	6824      	ldr	r4, [r4, #0]
 8013f32:	2c00      	cmp	r4, #0
 8013f34:	d1f7      	bne.n	8013f26 <_fwalk_reent+0xe>
 8013f36:	4638      	mov	r0, r7
 8013f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f3c:	89ab      	ldrh	r3, [r5, #12]
 8013f3e:	2b01      	cmp	r3, #1
 8013f40:	d907      	bls.n	8013f52 <_fwalk_reent+0x3a>
 8013f42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013f46:	3301      	adds	r3, #1
 8013f48:	d003      	beq.n	8013f52 <_fwalk_reent+0x3a>
 8013f4a:	4629      	mov	r1, r5
 8013f4c:	4630      	mov	r0, r6
 8013f4e:	47c0      	blx	r8
 8013f50:	4307      	orrs	r7, r0
 8013f52:	3568      	adds	r5, #104	; 0x68
 8013f54:	e7e9      	b.n	8013f2a <_fwalk_reent+0x12>

08013f56 <__retarget_lock_init_recursive>:
 8013f56:	4770      	bx	lr

08013f58 <__retarget_lock_acquire_recursive>:
 8013f58:	4770      	bx	lr

08013f5a <__retarget_lock_release_recursive>:
 8013f5a:	4770      	bx	lr

08013f5c <malloc>:
 8013f5c:	4b02      	ldr	r3, [pc, #8]	; (8013f68 <malloc+0xc>)
 8013f5e:	4601      	mov	r1, r0
 8013f60:	6818      	ldr	r0, [r3, #0]
 8013f62:	f000 b86f 	b.w	8014044 <_malloc_r>
 8013f66:	bf00      	nop
 8013f68:	20000048 	.word	0x20000048

08013f6c <_free_r>:
 8013f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013f6e:	2900      	cmp	r1, #0
 8013f70:	d044      	beq.n	8013ffc <_free_r+0x90>
 8013f72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f76:	9001      	str	r0, [sp, #4]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	f1a1 0404 	sub.w	r4, r1, #4
 8013f7e:	bfb8      	it	lt
 8013f80:	18e4      	addlt	r4, r4, r3
 8013f82:	f000 fe39 	bl	8014bf8 <__malloc_lock>
 8013f86:	4a1e      	ldr	r2, [pc, #120]	; (8014000 <_free_r+0x94>)
 8013f88:	9801      	ldr	r0, [sp, #4]
 8013f8a:	6813      	ldr	r3, [r2, #0]
 8013f8c:	b933      	cbnz	r3, 8013f9c <_free_r+0x30>
 8013f8e:	6063      	str	r3, [r4, #4]
 8013f90:	6014      	str	r4, [r2, #0]
 8013f92:	b003      	add	sp, #12
 8013f94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013f98:	f000 be34 	b.w	8014c04 <__malloc_unlock>
 8013f9c:	42a3      	cmp	r3, r4
 8013f9e:	d908      	bls.n	8013fb2 <_free_r+0x46>
 8013fa0:	6825      	ldr	r5, [r4, #0]
 8013fa2:	1961      	adds	r1, r4, r5
 8013fa4:	428b      	cmp	r3, r1
 8013fa6:	bf01      	itttt	eq
 8013fa8:	6819      	ldreq	r1, [r3, #0]
 8013faa:	685b      	ldreq	r3, [r3, #4]
 8013fac:	1949      	addeq	r1, r1, r5
 8013fae:	6021      	streq	r1, [r4, #0]
 8013fb0:	e7ed      	b.n	8013f8e <_free_r+0x22>
 8013fb2:	461a      	mov	r2, r3
 8013fb4:	685b      	ldr	r3, [r3, #4]
 8013fb6:	b10b      	cbz	r3, 8013fbc <_free_r+0x50>
 8013fb8:	42a3      	cmp	r3, r4
 8013fba:	d9fa      	bls.n	8013fb2 <_free_r+0x46>
 8013fbc:	6811      	ldr	r1, [r2, #0]
 8013fbe:	1855      	adds	r5, r2, r1
 8013fc0:	42a5      	cmp	r5, r4
 8013fc2:	d10b      	bne.n	8013fdc <_free_r+0x70>
 8013fc4:	6824      	ldr	r4, [r4, #0]
 8013fc6:	4421      	add	r1, r4
 8013fc8:	1854      	adds	r4, r2, r1
 8013fca:	42a3      	cmp	r3, r4
 8013fcc:	6011      	str	r1, [r2, #0]
 8013fce:	d1e0      	bne.n	8013f92 <_free_r+0x26>
 8013fd0:	681c      	ldr	r4, [r3, #0]
 8013fd2:	685b      	ldr	r3, [r3, #4]
 8013fd4:	6053      	str	r3, [r2, #4]
 8013fd6:	4421      	add	r1, r4
 8013fd8:	6011      	str	r1, [r2, #0]
 8013fda:	e7da      	b.n	8013f92 <_free_r+0x26>
 8013fdc:	d902      	bls.n	8013fe4 <_free_r+0x78>
 8013fde:	230c      	movs	r3, #12
 8013fe0:	6003      	str	r3, [r0, #0]
 8013fe2:	e7d6      	b.n	8013f92 <_free_r+0x26>
 8013fe4:	6825      	ldr	r5, [r4, #0]
 8013fe6:	1961      	adds	r1, r4, r5
 8013fe8:	428b      	cmp	r3, r1
 8013fea:	bf04      	itt	eq
 8013fec:	6819      	ldreq	r1, [r3, #0]
 8013fee:	685b      	ldreq	r3, [r3, #4]
 8013ff0:	6063      	str	r3, [r4, #4]
 8013ff2:	bf04      	itt	eq
 8013ff4:	1949      	addeq	r1, r1, r5
 8013ff6:	6021      	streq	r1, [r4, #0]
 8013ff8:	6054      	str	r4, [r2, #4]
 8013ffa:	e7ca      	b.n	8013f92 <_free_r+0x26>
 8013ffc:	b003      	add	sp, #12
 8013ffe:	bd30      	pop	{r4, r5, pc}
 8014000:	2000b068 	.word	0x2000b068

08014004 <sbrk_aligned>:
 8014004:	b570      	push	{r4, r5, r6, lr}
 8014006:	4e0e      	ldr	r6, [pc, #56]	; (8014040 <sbrk_aligned+0x3c>)
 8014008:	460c      	mov	r4, r1
 801400a:	6831      	ldr	r1, [r6, #0]
 801400c:	4605      	mov	r5, r0
 801400e:	b911      	cbnz	r1, 8014016 <sbrk_aligned+0x12>
 8014010:	f000 fb7a 	bl	8014708 <_sbrk_r>
 8014014:	6030      	str	r0, [r6, #0]
 8014016:	4621      	mov	r1, r4
 8014018:	4628      	mov	r0, r5
 801401a:	f000 fb75 	bl	8014708 <_sbrk_r>
 801401e:	1c43      	adds	r3, r0, #1
 8014020:	d00a      	beq.n	8014038 <sbrk_aligned+0x34>
 8014022:	1cc4      	adds	r4, r0, #3
 8014024:	f024 0403 	bic.w	r4, r4, #3
 8014028:	42a0      	cmp	r0, r4
 801402a:	d007      	beq.n	801403c <sbrk_aligned+0x38>
 801402c:	1a21      	subs	r1, r4, r0
 801402e:	4628      	mov	r0, r5
 8014030:	f000 fb6a 	bl	8014708 <_sbrk_r>
 8014034:	3001      	adds	r0, #1
 8014036:	d101      	bne.n	801403c <sbrk_aligned+0x38>
 8014038:	f04f 34ff 	mov.w	r4, #4294967295
 801403c:	4620      	mov	r0, r4
 801403e:	bd70      	pop	{r4, r5, r6, pc}
 8014040:	2000b06c 	.word	0x2000b06c

08014044 <_malloc_r>:
 8014044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014048:	1ccd      	adds	r5, r1, #3
 801404a:	f025 0503 	bic.w	r5, r5, #3
 801404e:	3508      	adds	r5, #8
 8014050:	2d0c      	cmp	r5, #12
 8014052:	bf38      	it	cc
 8014054:	250c      	movcc	r5, #12
 8014056:	2d00      	cmp	r5, #0
 8014058:	4607      	mov	r7, r0
 801405a:	db01      	blt.n	8014060 <_malloc_r+0x1c>
 801405c:	42a9      	cmp	r1, r5
 801405e:	d905      	bls.n	801406c <_malloc_r+0x28>
 8014060:	230c      	movs	r3, #12
 8014062:	603b      	str	r3, [r7, #0]
 8014064:	2600      	movs	r6, #0
 8014066:	4630      	mov	r0, r6
 8014068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801406c:	4e2e      	ldr	r6, [pc, #184]	; (8014128 <_malloc_r+0xe4>)
 801406e:	f000 fdc3 	bl	8014bf8 <__malloc_lock>
 8014072:	6833      	ldr	r3, [r6, #0]
 8014074:	461c      	mov	r4, r3
 8014076:	bb34      	cbnz	r4, 80140c6 <_malloc_r+0x82>
 8014078:	4629      	mov	r1, r5
 801407a:	4638      	mov	r0, r7
 801407c:	f7ff ffc2 	bl	8014004 <sbrk_aligned>
 8014080:	1c43      	adds	r3, r0, #1
 8014082:	4604      	mov	r4, r0
 8014084:	d14d      	bne.n	8014122 <_malloc_r+0xde>
 8014086:	6834      	ldr	r4, [r6, #0]
 8014088:	4626      	mov	r6, r4
 801408a:	2e00      	cmp	r6, #0
 801408c:	d140      	bne.n	8014110 <_malloc_r+0xcc>
 801408e:	6823      	ldr	r3, [r4, #0]
 8014090:	4631      	mov	r1, r6
 8014092:	4638      	mov	r0, r7
 8014094:	eb04 0803 	add.w	r8, r4, r3
 8014098:	f000 fb36 	bl	8014708 <_sbrk_r>
 801409c:	4580      	cmp	r8, r0
 801409e:	d13a      	bne.n	8014116 <_malloc_r+0xd2>
 80140a0:	6821      	ldr	r1, [r4, #0]
 80140a2:	3503      	adds	r5, #3
 80140a4:	1a6d      	subs	r5, r5, r1
 80140a6:	f025 0503 	bic.w	r5, r5, #3
 80140aa:	3508      	adds	r5, #8
 80140ac:	2d0c      	cmp	r5, #12
 80140ae:	bf38      	it	cc
 80140b0:	250c      	movcc	r5, #12
 80140b2:	4629      	mov	r1, r5
 80140b4:	4638      	mov	r0, r7
 80140b6:	f7ff ffa5 	bl	8014004 <sbrk_aligned>
 80140ba:	3001      	adds	r0, #1
 80140bc:	d02b      	beq.n	8014116 <_malloc_r+0xd2>
 80140be:	6823      	ldr	r3, [r4, #0]
 80140c0:	442b      	add	r3, r5
 80140c2:	6023      	str	r3, [r4, #0]
 80140c4:	e00e      	b.n	80140e4 <_malloc_r+0xa0>
 80140c6:	6822      	ldr	r2, [r4, #0]
 80140c8:	1b52      	subs	r2, r2, r5
 80140ca:	d41e      	bmi.n	801410a <_malloc_r+0xc6>
 80140cc:	2a0b      	cmp	r2, #11
 80140ce:	d916      	bls.n	80140fe <_malloc_r+0xba>
 80140d0:	1961      	adds	r1, r4, r5
 80140d2:	42a3      	cmp	r3, r4
 80140d4:	6025      	str	r5, [r4, #0]
 80140d6:	bf18      	it	ne
 80140d8:	6059      	strne	r1, [r3, #4]
 80140da:	6863      	ldr	r3, [r4, #4]
 80140dc:	bf08      	it	eq
 80140de:	6031      	streq	r1, [r6, #0]
 80140e0:	5162      	str	r2, [r4, r5]
 80140e2:	604b      	str	r3, [r1, #4]
 80140e4:	4638      	mov	r0, r7
 80140e6:	f104 060b 	add.w	r6, r4, #11
 80140ea:	f000 fd8b 	bl	8014c04 <__malloc_unlock>
 80140ee:	f026 0607 	bic.w	r6, r6, #7
 80140f2:	1d23      	adds	r3, r4, #4
 80140f4:	1af2      	subs	r2, r6, r3
 80140f6:	d0b6      	beq.n	8014066 <_malloc_r+0x22>
 80140f8:	1b9b      	subs	r3, r3, r6
 80140fa:	50a3      	str	r3, [r4, r2]
 80140fc:	e7b3      	b.n	8014066 <_malloc_r+0x22>
 80140fe:	6862      	ldr	r2, [r4, #4]
 8014100:	42a3      	cmp	r3, r4
 8014102:	bf0c      	ite	eq
 8014104:	6032      	streq	r2, [r6, #0]
 8014106:	605a      	strne	r2, [r3, #4]
 8014108:	e7ec      	b.n	80140e4 <_malloc_r+0xa0>
 801410a:	4623      	mov	r3, r4
 801410c:	6864      	ldr	r4, [r4, #4]
 801410e:	e7b2      	b.n	8014076 <_malloc_r+0x32>
 8014110:	4634      	mov	r4, r6
 8014112:	6876      	ldr	r6, [r6, #4]
 8014114:	e7b9      	b.n	801408a <_malloc_r+0x46>
 8014116:	230c      	movs	r3, #12
 8014118:	603b      	str	r3, [r7, #0]
 801411a:	4638      	mov	r0, r7
 801411c:	f000 fd72 	bl	8014c04 <__malloc_unlock>
 8014120:	e7a1      	b.n	8014066 <_malloc_r+0x22>
 8014122:	6025      	str	r5, [r4, #0]
 8014124:	e7de      	b.n	80140e4 <_malloc_r+0xa0>
 8014126:	bf00      	nop
 8014128:	2000b068 	.word	0x2000b068

0801412c <__sfputc_r>:
 801412c:	6893      	ldr	r3, [r2, #8]
 801412e:	3b01      	subs	r3, #1
 8014130:	2b00      	cmp	r3, #0
 8014132:	b410      	push	{r4}
 8014134:	6093      	str	r3, [r2, #8]
 8014136:	da08      	bge.n	801414a <__sfputc_r+0x1e>
 8014138:	6994      	ldr	r4, [r2, #24]
 801413a:	42a3      	cmp	r3, r4
 801413c:	db01      	blt.n	8014142 <__sfputc_r+0x16>
 801413e:	290a      	cmp	r1, #10
 8014140:	d103      	bne.n	801414a <__sfputc_r+0x1e>
 8014142:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014146:	f000 bb33 	b.w	80147b0 <__swbuf_r>
 801414a:	6813      	ldr	r3, [r2, #0]
 801414c:	1c58      	adds	r0, r3, #1
 801414e:	6010      	str	r0, [r2, #0]
 8014150:	7019      	strb	r1, [r3, #0]
 8014152:	4608      	mov	r0, r1
 8014154:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014158:	4770      	bx	lr

0801415a <__sfputs_r>:
 801415a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801415c:	4606      	mov	r6, r0
 801415e:	460f      	mov	r7, r1
 8014160:	4614      	mov	r4, r2
 8014162:	18d5      	adds	r5, r2, r3
 8014164:	42ac      	cmp	r4, r5
 8014166:	d101      	bne.n	801416c <__sfputs_r+0x12>
 8014168:	2000      	movs	r0, #0
 801416a:	e007      	b.n	801417c <__sfputs_r+0x22>
 801416c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014170:	463a      	mov	r2, r7
 8014172:	4630      	mov	r0, r6
 8014174:	f7ff ffda 	bl	801412c <__sfputc_r>
 8014178:	1c43      	adds	r3, r0, #1
 801417a:	d1f3      	bne.n	8014164 <__sfputs_r+0xa>
 801417c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014180 <_vfiprintf_r>:
 8014180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014184:	460d      	mov	r5, r1
 8014186:	b09d      	sub	sp, #116	; 0x74
 8014188:	4614      	mov	r4, r2
 801418a:	4698      	mov	r8, r3
 801418c:	4606      	mov	r6, r0
 801418e:	b118      	cbz	r0, 8014198 <_vfiprintf_r+0x18>
 8014190:	6983      	ldr	r3, [r0, #24]
 8014192:	b90b      	cbnz	r3, 8014198 <_vfiprintf_r+0x18>
 8014194:	f7ff fe30 	bl	8013df8 <__sinit>
 8014198:	4b89      	ldr	r3, [pc, #548]	; (80143c0 <_vfiprintf_r+0x240>)
 801419a:	429d      	cmp	r5, r3
 801419c:	d11b      	bne.n	80141d6 <_vfiprintf_r+0x56>
 801419e:	6875      	ldr	r5, [r6, #4]
 80141a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80141a2:	07d9      	lsls	r1, r3, #31
 80141a4:	d405      	bmi.n	80141b2 <_vfiprintf_r+0x32>
 80141a6:	89ab      	ldrh	r3, [r5, #12]
 80141a8:	059a      	lsls	r2, r3, #22
 80141aa:	d402      	bmi.n	80141b2 <_vfiprintf_r+0x32>
 80141ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80141ae:	f7ff fed3 	bl	8013f58 <__retarget_lock_acquire_recursive>
 80141b2:	89ab      	ldrh	r3, [r5, #12]
 80141b4:	071b      	lsls	r3, r3, #28
 80141b6:	d501      	bpl.n	80141bc <_vfiprintf_r+0x3c>
 80141b8:	692b      	ldr	r3, [r5, #16]
 80141ba:	b9eb      	cbnz	r3, 80141f8 <_vfiprintf_r+0x78>
 80141bc:	4629      	mov	r1, r5
 80141be:	4630      	mov	r0, r6
 80141c0:	f000 fb5a 	bl	8014878 <__swsetup_r>
 80141c4:	b1c0      	cbz	r0, 80141f8 <_vfiprintf_r+0x78>
 80141c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80141c8:	07dc      	lsls	r4, r3, #31
 80141ca:	d50e      	bpl.n	80141ea <_vfiprintf_r+0x6a>
 80141cc:	f04f 30ff 	mov.w	r0, #4294967295
 80141d0:	b01d      	add	sp, #116	; 0x74
 80141d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141d6:	4b7b      	ldr	r3, [pc, #492]	; (80143c4 <_vfiprintf_r+0x244>)
 80141d8:	429d      	cmp	r5, r3
 80141da:	d101      	bne.n	80141e0 <_vfiprintf_r+0x60>
 80141dc:	68b5      	ldr	r5, [r6, #8]
 80141de:	e7df      	b.n	80141a0 <_vfiprintf_r+0x20>
 80141e0:	4b79      	ldr	r3, [pc, #484]	; (80143c8 <_vfiprintf_r+0x248>)
 80141e2:	429d      	cmp	r5, r3
 80141e4:	bf08      	it	eq
 80141e6:	68f5      	ldreq	r5, [r6, #12]
 80141e8:	e7da      	b.n	80141a0 <_vfiprintf_r+0x20>
 80141ea:	89ab      	ldrh	r3, [r5, #12]
 80141ec:	0598      	lsls	r0, r3, #22
 80141ee:	d4ed      	bmi.n	80141cc <_vfiprintf_r+0x4c>
 80141f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80141f2:	f7ff feb2 	bl	8013f5a <__retarget_lock_release_recursive>
 80141f6:	e7e9      	b.n	80141cc <_vfiprintf_r+0x4c>
 80141f8:	2300      	movs	r3, #0
 80141fa:	9309      	str	r3, [sp, #36]	; 0x24
 80141fc:	2320      	movs	r3, #32
 80141fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014202:	f8cd 800c 	str.w	r8, [sp, #12]
 8014206:	2330      	movs	r3, #48	; 0x30
 8014208:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80143cc <_vfiprintf_r+0x24c>
 801420c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014210:	f04f 0901 	mov.w	r9, #1
 8014214:	4623      	mov	r3, r4
 8014216:	469a      	mov	sl, r3
 8014218:	f813 2b01 	ldrb.w	r2, [r3], #1
 801421c:	b10a      	cbz	r2, 8014222 <_vfiprintf_r+0xa2>
 801421e:	2a25      	cmp	r2, #37	; 0x25
 8014220:	d1f9      	bne.n	8014216 <_vfiprintf_r+0x96>
 8014222:	ebba 0b04 	subs.w	fp, sl, r4
 8014226:	d00b      	beq.n	8014240 <_vfiprintf_r+0xc0>
 8014228:	465b      	mov	r3, fp
 801422a:	4622      	mov	r2, r4
 801422c:	4629      	mov	r1, r5
 801422e:	4630      	mov	r0, r6
 8014230:	f7ff ff93 	bl	801415a <__sfputs_r>
 8014234:	3001      	adds	r0, #1
 8014236:	f000 80aa 	beq.w	801438e <_vfiprintf_r+0x20e>
 801423a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801423c:	445a      	add	r2, fp
 801423e:	9209      	str	r2, [sp, #36]	; 0x24
 8014240:	f89a 3000 	ldrb.w	r3, [sl]
 8014244:	2b00      	cmp	r3, #0
 8014246:	f000 80a2 	beq.w	801438e <_vfiprintf_r+0x20e>
 801424a:	2300      	movs	r3, #0
 801424c:	f04f 32ff 	mov.w	r2, #4294967295
 8014250:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014254:	f10a 0a01 	add.w	sl, sl, #1
 8014258:	9304      	str	r3, [sp, #16]
 801425a:	9307      	str	r3, [sp, #28]
 801425c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014260:	931a      	str	r3, [sp, #104]	; 0x68
 8014262:	4654      	mov	r4, sl
 8014264:	2205      	movs	r2, #5
 8014266:	f814 1b01 	ldrb.w	r1, [r4], #1
 801426a:	4858      	ldr	r0, [pc, #352]	; (80143cc <_vfiprintf_r+0x24c>)
 801426c:	f7eb ffd0 	bl	8000210 <memchr>
 8014270:	9a04      	ldr	r2, [sp, #16]
 8014272:	b9d8      	cbnz	r0, 80142ac <_vfiprintf_r+0x12c>
 8014274:	06d1      	lsls	r1, r2, #27
 8014276:	bf44      	itt	mi
 8014278:	2320      	movmi	r3, #32
 801427a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801427e:	0713      	lsls	r3, r2, #28
 8014280:	bf44      	itt	mi
 8014282:	232b      	movmi	r3, #43	; 0x2b
 8014284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014288:	f89a 3000 	ldrb.w	r3, [sl]
 801428c:	2b2a      	cmp	r3, #42	; 0x2a
 801428e:	d015      	beq.n	80142bc <_vfiprintf_r+0x13c>
 8014290:	9a07      	ldr	r2, [sp, #28]
 8014292:	4654      	mov	r4, sl
 8014294:	2000      	movs	r0, #0
 8014296:	f04f 0c0a 	mov.w	ip, #10
 801429a:	4621      	mov	r1, r4
 801429c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80142a0:	3b30      	subs	r3, #48	; 0x30
 80142a2:	2b09      	cmp	r3, #9
 80142a4:	d94e      	bls.n	8014344 <_vfiprintf_r+0x1c4>
 80142a6:	b1b0      	cbz	r0, 80142d6 <_vfiprintf_r+0x156>
 80142a8:	9207      	str	r2, [sp, #28]
 80142aa:	e014      	b.n	80142d6 <_vfiprintf_r+0x156>
 80142ac:	eba0 0308 	sub.w	r3, r0, r8
 80142b0:	fa09 f303 	lsl.w	r3, r9, r3
 80142b4:	4313      	orrs	r3, r2
 80142b6:	9304      	str	r3, [sp, #16]
 80142b8:	46a2      	mov	sl, r4
 80142ba:	e7d2      	b.n	8014262 <_vfiprintf_r+0xe2>
 80142bc:	9b03      	ldr	r3, [sp, #12]
 80142be:	1d19      	adds	r1, r3, #4
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	9103      	str	r1, [sp, #12]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	bfbb      	ittet	lt
 80142c8:	425b      	neglt	r3, r3
 80142ca:	f042 0202 	orrlt.w	r2, r2, #2
 80142ce:	9307      	strge	r3, [sp, #28]
 80142d0:	9307      	strlt	r3, [sp, #28]
 80142d2:	bfb8      	it	lt
 80142d4:	9204      	strlt	r2, [sp, #16]
 80142d6:	7823      	ldrb	r3, [r4, #0]
 80142d8:	2b2e      	cmp	r3, #46	; 0x2e
 80142da:	d10c      	bne.n	80142f6 <_vfiprintf_r+0x176>
 80142dc:	7863      	ldrb	r3, [r4, #1]
 80142de:	2b2a      	cmp	r3, #42	; 0x2a
 80142e0:	d135      	bne.n	801434e <_vfiprintf_r+0x1ce>
 80142e2:	9b03      	ldr	r3, [sp, #12]
 80142e4:	1d1a      	adds	r2, r3, #4
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	9203      	str	r2, [sp, #12]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	bfb8      	it	lt
 80142ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80142f2:	3402      	adds	r4, #2
 80142f4:	9305      	str	r3, [sp, #20]
 80142f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80143dc <_vfiprintf_r+0x25c>
 80142fa:	7821      	ldrb	r1, [r4, #0]
 80142fc:	2203      	movs	r2, #3
 80142fe:	4650      	mov	r0, sl
 8014300:	f7eb ff86 	bl	8000210 <memchr>
 8014304:	b140      	cbz	r0, 8014318 <_vfiprintf_r+0x198>
 8014306:	2340      	movs	r3, #64	; 0x40
 8014308:	eba0 000a 	sub.w	r0, r0, sl
 801430c:	fa03 f000 	lsl.w	r0, r3, r0
 8014310:	9b04      	ldr	r3, [sp, #16]
 8014312:	4303      	orrs	r3, r0
 8014314:	3401      	adds	r4, #1
 8014316:	9304      	str	r3, [sp, #16]
 8014318:	f814 1b01 	ldrb.w	r1, [r4], #1
 801431c:	482c      	ldr	r0, [pc, #176]	; (80143d0 <_vfiprintf_r+0x250>)
 801431e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014322:	2206      	movs	r2, #6
 8014324:	f7eb ff74 	bl	8000210 <memchr>
 8014328:	2800      	cmp	r0, #0
 801432a:	d03f      	beq.n	80143ac <_vfiprintf_r+0x22c>
 801432c:	4b29      	ldr	r3, [pc, #164]	; (80143d4 <_vfiprintf_r+0x254>)
 801432e:	bb1b      	cbnz	r3, 8014378 <_vfiprintf_r+0x1f8>
 8014330:	9b03      	ldr	r3, [sp, #12]
 8014332:	3307      	adds	r3, #7
 8014334:	f023 0307 	bic.w	r3, r3, #7
 8014338:	3308      	adds	r3, #8
 801433a:	9303      	str	r3, [sp, #12]
 801433c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801433e:	443b      	add	r3, r7
 8014340:	9309      	str	r3, [sp, #36]	; 0x24
 8014342:	e767      	b.n	8014214 <_vfiprintf_r+0x94>
 8014344:	fb0c 3202 	mla	r2, ip, r2, r3
 8014348:	460c      	mov	r4, r1
 801434a:	2001      	movs	r0, #1
 801434c:	e7a5      	b.n	801429a <_vfiprintf_r+0x11a>
 801434e:	2300      	movs	r3, #0
 8014350:	3401      	adds	r4, #1
 8014352:	9305      	str	r3, [sp, #20]
 8014354:	4619      	mov	r1, r3
 8014356:	f04f 0c0a 	mov.w	ip, #10
 801435a:	4620      	mov	r0, r4
 801435c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014360:	3a30      	subs	r2, #48	; 0x30
 8014362:	2a09      	cmp	r2, #9
 8014364:	d903      	bls.n	801436e <_vfiprintf_r+0x1ee>
 8014366:	2b00      	cmp	r3, #0
 8014368:	d0c5      	beq.n	80142f6 <_vfiprintf_r+0x176>
 801436a:	9105      	str	r1, [sp, #20]
 801436c:	e7c3      	b.n	80142f6 <_vfiprintf_r+0x176>
 801436e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014372:	4604      	mov	r4, r0
 8014374:	2301      	movs	r3, #1
 8014376:	e7f0      	b.n	801435a <_vfiprintf_r+0x1da>
 8014378:	ab03      	add	r3, sp, #12
 801437a:	9300      	str	r3, [sp, #0]
 801437c:	462a      	mov	r2, r5
 801437e:	4b16      	ldr	r3, [pc, #88]	; (80143d8 <_vfiprintf_r+0x258>)
 8014380:	a904      	add	r1, sp, #16
 8014382:	4630      	mov	r0, r6
 8014384:	f3af 8000 	nop.w
 8014388:	4607      	mov	r7, r0
 801438a:	1c78      	adds	r0, r7, #1
 801438c:	d1d6      	bne.n	801433c <_vfiprintf_r+0x1bc>
 801438e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014390:	07d9      	lsls	r1, r3, #31
 8014392:	d405      	bmi.n	80143a0 <_vfiprintf_r+0x220>
 8014394:	89ab      	ldrh	r3, [r5, #12]
 8014396:	059a      	lsls	r2, r3, #22
 8014398:	d402      	bmi.n	80143a0 <_vfiprintf_r+0x220>
 801439a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801439c:	f7ff fddd 	bl	8013f5a <__retarget_lock_release_recursive>
 80143a0:	89ab      	ldrh	r3, [r5, #12]
 80143a2:	065b      	lsls	r3, r3, #25
 80143a4:	f53f af12 	bmi.w	80141cc <_vfiprintf_r+0x4c>
 80143a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80143aa:	e711      	b.n	80141d0 <_vfiprintf_r+0x50>
 80143ac:	ab03      	add	r3, sp, #12
 80143ae:	9300      	str	r3, [sp, #0]
 80143b0:	462a      	mov	r2, r5
 80143b2:	4b09      	ldr	r3, [pc, #36]	; (80143d8 <_vfiprintf_r+0x258>)
 80143b4:	a904      	add	r1, sp, #16
 80143b6:	4630      	mov	r0, r6
 80143b8:	f000 f880 	bl	80144bc <_printf_i>
 80143bc:	e7e4      	b.n	8014388 <_vfiprintf_r+0x208>
 80143be:	bf00      	nop
 80143c0:	0801a334 	.word	0x0801a334
 80143c4:	0801a354 	.word	0x0801a354
 80143c8:	0801a314 	.word	0x0801a314
 80143cc:	0801a374 	.word	0x0801a374
 80143d0:	0801a37e 	.word	0x0801a37e
 80143d4:	00000000 	.word	0x00000000
 80143d8:	0801415b 	.word	0x0801415b
 80143dc:	0801a37a 	.word	0x0801a37a

080143e0 <_printf_common>:
 80143e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143e4:	4616      	mov	r6, r2
 80143e6:	4699      	mov	r9, r3
 80143e8:	688a      	ldr	r2, [r1, #8]
 80143ea:	690b      	ldr	r3, [r1, #16]
 80143ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80143f0:	4293      	cmp	r3, r2
 80143f2:	bfb8      	it	lt
 80143f4:	4613      	movlt	r3, r2
 80143f6:	6033      	str	r3, [r6, #0]
 80143f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80143fc:	4607      	mov	r7, r0
 80143fe:	460c      	mov	r4, r1
 8014400:	b10a      	cbz	r2, 8014406 <_printf_common+0x26>
 8014402:	3301      	adds	r3, #1
 8014404:	6033      	str	r3, [r6, #0]
 8014406:	6823      	ldr	r3, [r4, #0]
 8014408:	0699      	lsls	r1, r3, #26
 801440a:	bf42      	ittt	mi
 801440c:	6833      	ldrmi	r3, [r6, #0]
 801440e:	3302      	addmi	r3, #2
 8014410:	6033      	strmi	r3, [r6, #0]
 8014412:	6825      	ldr	r5, [r4, #0]
 8014414:	f015 0506 	ands.w	r5, r5, #6
 8014418:	d106      	bne.n	8014428 <_printf_common+0x48>
 801441a:	f104 0a19 	add.w	sl, r4, #25
 801441e:	68e3      	ldr	r3, [r4, #12]
 8014420:	6832      	ldr	r2, [r6, #0]
 8014422:	1a9b      	subs	r3, r3, r2
 8014424:	42ab      	cmp	r3, r5
 8014426:	dc26      	bgt.n	8014476 <_printf_common+0x96>
 8014428:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801442c:	1e13      	subs	r3, r2, #0
 801442e:	6822      	ldr	r2, [r4, #0]
 8014430:	bf18      	it	ne
 8014432:	2301      	movne	r3, #1
 8014434:	0692      	lsls	r2, r2, #26
 8014436:	d42b      	bmi.n	8014490 <_printf_common+0xb0>
 8014438:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801443c:	4649      	mov	r1, r9
 801443e:	4638      	mov	r0, r7
 8014440:	47c0      	blx	r8
 8014442:	3001      	adds	r0, #1
 8014444:	d01e      	beq.n	8014484 <_printf_common+0xa4>
 8014446:	6823      	ldr	r3, [r4, #0]
 8014448:	68e5      	ldr	r5, [r4, #12]
 801444a:	6832      	ldr	r2, [r6, #0]
 801444c:	f003 0306 	and.w	r3, r3, #6
 8014450:	2b04      	cmp	r3, #4
 8014452:	bf08      	it	eq
 8014454:	1aad      	subeq	r5, r5, r2
 8014456:	68a3      	ldr	r3, [r4, #8]
 8014458:	6922      	ldr	r2, [r4, #16]
 801445a:	bf0c      	ite	eq
 801445c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014460:	2500      	movne	r5, #0
 8014462:	4293      	cmp	r3, r2
 8014464:	bfc4      	itt	gt
 8014466:	1a9b      	subgt	r3, r3, r2
 8014468:	18ed      	addgt	r5, r5, r3
 801446a:	2600      	movs	r6, #0
 801446c:	341a      	adds	r4, #26
 801446e:	42b5      	cmp	r5, r6
 8014470:	d11a      	bne.n	80144a8 <_printf_common+0xc8>
 8014472:	2000      	movs	r0, #0
 8014474:	e008      	b.n	8014488 <_printf_common+0xa8>
 8014476:	2301      	movs	r3, #1
 8014478:	4652      	mov	r2, sl
 801447a:	4649      	mov	r1, r9
 801447c:	4638      	mov	r0, r7
 801447e:	47c0      	blx	r8
 8014480:	3001      	adds	r0, #1
 8014482:	d103      	bne.n	801448c <_printf_common+0xac>
 8014484:	f04f 30ff 	mov.w	r0, #4294967295
 8014488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801448c:	3501      	adds	r5, #1
 801448e:	e7c6      	b.n	801441e <_printf_common+0x3e>
 8014490:	18e1      	adds	r1, r4, r3
 8014492:	1c5a      	adds	r2, r3, #1
 8014494:	2030      	movs	r0, #48	; 0x30
 8014496:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801449a:	4422      	add	r2, r4
 801449c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80144a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80144a4:	3302      	adds	r3, #2
 80144a6:	e7c7      	b.n	8014438 <_printf_common+0x58>
 80144a8:	2301      	movs	r3, #1
 80144aa:	4622      	mov	r2, r4
 80144ac:	4649      	mov	r1, r9
 80144ae:	4638      	mov	r0, r7
 80144b0:	47c0      	blx	r8
 80144b2:	3001      	adds	r0, #1
 80144b4:	d0e6      	beq.n	8014484 <_printf_common+0xa4>
 80144b6:	3601      	adds	r6, #1
 80144b8:	e7d9      	b.n	801446e <_printf_common+0x8e>
	...

080144bc <_printf_i>:
 80144bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80144c0:	7e0f      	ldrb	r7, [r1, #24]
 80144c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80144c4:	2f78      	cmp	r7, #120	; 0x78
 80144c6:	4691      	mov	r9, r2
 80144c8:	4680      	mov	r8, r0
 80144ca:	460c      	mov	r4, r1
 80144cc:	469a      	mov	sl, r3
 80144ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80144d2:	d807      	bhi.n	80144e4 <_printf_i+0x28>
 80144d4:	2f62      	cmp	r7, #98	; 0x62
 80144d6:	d80a      	bhi.n	80144ee <_printf_i+0x32>
 80144d8:	2f00      	cmp	r7, #0
 80144da:	f000 80d8 	beq.w	801468e <_printf_i+0x1d2>
 80144de:	2f58      	cmp	r7, #88	; 0x58
 80144e0:	f000 80a3 	beq.w	801462a <_printf_i+0x16e>
 80144e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80144e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80144ec:	e03a      	b.n	8014564 <_printf_i+0xa8>
 80144ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80144f2:	2b15      	cmp	r3, #21
 80144f4:	d8f6      	bhi.n	80144e4 <_printf_i+0x28>
 80144f6:	a101      	add	r1, pc, #4	; (adr r1, 80144fc <_printf_i+0x40>)
 80144f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80144fc:	08014555 	.word	0x08014555
 8014500:	08014569 	.word	0x08014569
 8014504:	080144e5 	.word	0x080144e5
 8014508:	080144e5 	.word	0x080144e5
 801450c:	080144e5 	.word	0x080144e5
 8014510:	080144e5 	.word	0x080144e5
 8014514:	08014569 	.word	0x08014569
 8014518:	080144e5 	.word	0x080144e5
 801451c:	080144e5 	.word	0x080144e5
 8014520:	080144e5 	.word	0x080144e5
 8014524:	080144e5 	.word	0x080144e5
 8014528:	08014675 	.word	0x08014675
 801452c:	08014599 	.word	0x08014599
 8014530:	08014657 	.word	0x08014657
 8014534:	080144e5 	.word	0x080144e5
 8014538:	080144e5 	.word	0x080144e5
 801453c:	08014697 	.word	0x08014697
 8014540:	080144e5 	.word	0x080144e5
 8014544:	08014599 	.word	0x08014599
 8014548:	080144e5 	.word	0x080144e5
 801454c:	080144e5 	.word	0x080144e5
 8014550:	0801465f 	.word	0x0801465f
 8014554:	682b      	ldr	r3, [r5, #0]
 8014556:	1d1a      	adds	r2, r3, #4
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	602a      	str	r2, [r5, #0]
 801455c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014560:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014564:	2301      	movs	r3, #1
 8014566:	e0a3      	b.n	80146b0 <_printf_i+0x1f4>
 8014568:	6820      	ldr	r0, [r4, #0]
 801456a:	6829      	ldr	r1, [r5, #0]
 801456c:	0606      	lsls	r6, r0, #24
 801456e:	f101 0304 	add.w	r3, r1, #4
 8014572:	d50a      	bpl.n	801458a <_printf_i+0xce>
 8014574:	680e      	ldr	r6, [r1, #0]
 8014576:	602b      	str	r3, [r5, #0]
 8014578:	2e00      	cmp	r6, #0
 801457a:	da03      	bge.n	8014584 <_printf_i+0xc8>
 801457c:	232d      	movs	r3, #45	; 0x2d
 801457e:	4276      	negs	r6, r6
 8014580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014584:	485e      	ldr	r0, [pc, #376]	; (8014700 <_printf_i+0x244>)
 8014586:	230a      	movs	r3, #10
 8014588:	e019      	b.n	80145be <_printf_i+0x102>
 801458a:	680e      	ldr	r6, [r1, #0]
 801458c:	602b      	str	r3, [r5, #0]
 801458e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014592:	bf18      	it	ne
 8014594:	b236      	sxthne	r6, r6
 8014596:	e7ef      	b.n	8014578 <_printf_i+0xbc>
 8014598:	682b      	ldr	r3, [r5, #0]
 801459a:	6820      	ldr	r0, [r4, #0]
 801459c:	1d19      	adds	r1, r3, #4
 801459e:	6029      	str	r1, [r5, #0]
 80145a0:	0601      	lsls	r1, r0, #24
 80145a2:	d501      	bpl.n	80145a8 <_printf_i+0xec>
 80145a4:	681e      	ldr	r6, [r3, #0]
 80145a6:	e002      	b.n	80145ae <_printf_i+0xf2>
 80145a8:	0646      	lsls	r6, r0, #25
 80145aa:	d5fb      	bpl.n	80145a4 <_printf_i+0xe8>
 80145ac:	881e      	ldrh	r6, [r3, #0]
 80145ae:	4854      	ldr	r0, [pc, #336]	; (8014700 <_printf_i+0x244>)
 80145b0:	2f6f      	cmp	r7, #111	; 0x6f
 80145b2:	bf0c      	ite	eq
 80145b4:	2308      	moveq	r3, #8
 80145b6:	230a      	movne	r3, #10
 80145b8:	2100      	movs	r1, #0
 80145ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80145be:	6865      	ldr	r5, [r4, #4]
 80145c0:	60a5      	str	r5, [r4, #8]
 80145c2:	2d00      	cmp	r5, #0
 80145c4:	bfa2      	ittt	ge
 80145c6:	6821      	ldrge	r1, [r4, #0]
 80145c8:	f021 0104 	bicge.w	r1, r1, #4
 80145cc:	6021      	strge	r1, [r4, #0]
 80145ce:	b90e      	cbnz	r6, 80145d4 <_printf_i+0x118>
 80145d0:	2d00      	cmp	r5, #0
 80145d2:	d04d      	beq.n	8014670 <_printf_i+0x1b4>
 80145d4:	4615      	mov	r5, r2
 80145d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80145da:	fb03 6711 	mls	r7, r3, r1, r6
 80145de:	5dc7      	ldrb	r7, [r0, r7]
 80145e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80145e4:	4637      	mov	r7, r6
 80145e6:	42bb      	cmp	r3, r7
 80145e8:	460e      	mov	r6, r1
 80145ea:	d9f4      	bls.n	80145d6 <_printf_i+0x11a>
 80145ec:	2b08      	cmp	r3, #8
 80145ee:	d10b      	bne.n	8014608 <_printf_i+0x14c>
 80145f0:	6823      	ldr	r3, [r4, #0]
 80145f2:	07de      	lsls	r6, r3, #31
 80145f4:	d508      	bpl.n	8014608 <_printf_i+0x14c>
 80145f6:	6923      	ldr	r3, [r4, #16]
 80145f8:	6861      	ldr	r1, [r4, #4]
 80145fa:	4299      	cmp	r1, r3
 80145fc:	bfde      	ittt	le
 80145fe:	2330      	movle	r3, #48	; 0x30
 8014600:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014604:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014608:	1b52      	subs	r2, r2, r5
 801460a:	6122      	str	r2, [r4, #16]
 801460c:	f8cd a000 	str.w	sl, [sp]
 8014610:	464b      	mov	r3, r9
 8014612:	aa03      	add	r2, sp, #12
 8014614:	4621      	mov	r1, r4
 8014616:	4640      	mov	r0, r8
 8014618:	f7ff fee2 	bl	80143e0 <_printf_common>
 801461c:	3001      	adds	r0, #1
 801461e:	d14c      	bne.n	80146ba <_printf_i+0x1fe>
 8014620:	f04f 30ff 	mov.w	r0, #4294967295
 8014624:	b004      	add	sp, #16
 8014626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801462a:	4835      	ldr	r0, [pc, #212]	; (8014700 <_printf_i+0x244>)
 801462c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014630:	6829      	ldr	r1, [r5, #0]
 8014632:	6823      	ldr	r3, [r4, #0]
 8014634:	f851 6b04 	ldr.w	r6, [r1], #4
 8014638:	6029      	str	r1, [r5, #0]
 801463a:	061d      	lsls	r5, r3, #24
 801463c:	d514      	bpl.n	8014668 <_printf_i+0x1ac>
 801463e:	07df      	lsls	r7, r3, #31
 8014640:	bf44      	itt	mi
 8014642:	f043 0320 	orrmi.w	r3, r3, #32
 8014646:	6023      	strmi	r3, [r4, #0]
 8014648:	b91e      	cbnz	r6, 8014652 <_printf_i+0x196>
 801464a:	6823      	ldr	r3, [r4, #0]
 801464c:	f023 0320 	bic.w	r3, r3, #32
 8014650:	6023      	str	r3, [r4, #0]
 8014652:	2310      	movs	r3, #16
 8014654:	e7b0      	b.n	80145b8 <_printf_i+0xfc>
 8014656:	6823      	ldr	r3, [r4, #0]
 8014658:	f043 0320 	orr.w	r3, r3, #32
 801465c:	6023      	str	r3, [r4, #0]
 801465e:	2378      	movs	r3, #120	; 0x78
 8014660:	4828      	ldr	r0, [pc, #160]	; (8014704 <_printf_i+0x248>)
 8014662:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014666:	e7e3      	b.n	8014630 <_printf_i+0x174>
 8014668:	0659      	lsls	r1, r3, #25
 801466a:	bf48      	it	mi
 801466c:	b2b6      	uxthmi	r6, r6
 801466e:	e7e6      	b.n	801463e <_printf_i+0x182>
 8014670:	4615      	mov	r5, r2
 8014672:	e7bb      	b.n	80145ec <_printf_i+0x130>
 8014674:	682b      	ldr	r3, [r5, #0]
 8014676:	6826      	ldr	r6, [r4, #0]
 8014678:	6961      	ldr	r1, [r4, #20]
 801467a:	1d18      	adds	r0, r3, #4
 801467c:	6028      	str	r0, [r5, #0]
 801467e:	0635      	lsls	r5, r6, #24
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	d501      	bpl.n	8014688 <_printf_i+0x1cc>
 8014684:	6019      	str	r1, [r3, #0]
 8014686:	e002      	b.n	801468e <_printf_i+0x1d2>
 8014688:	0670      	lsls	r0, r6, #25
 801468a:	d5fb      	bpl.n	8014684 <_printf_i+0x1c8>
 801468c:	8019      	strh	r1, [r3, #0]
 801468e:	2300      	movs	r3, #0
 8014690:	6123      	str	r3, [r4, #16]
 8014692:	4615      	mov	r5, r2
 8014694:	e7ba      	b.n	801460c <_printf_i+0x150>
 8014696:	682b      	ldr	r3, [r5, #0]
 8014698:	1d1a      	adds	r2, r3, #4
 801469a:	602a      	str	r2, [r5, #0]
 801469c:	681d      	ldr	r5, [r3, #0]
 801469e:	6862      	ldr	r2, [r4, #4]
 80146a0:	2100      	movs	r1, #0
 80146a2:	4628      	mov	r0, r5
 80146a4:	f7eb fdb4 	bl	8000210 <memchr>
 80146a8:	b108      	cbz	r0, 80146ae <_printf_i+0x1f2>
 80146aa:	1b40      	subs	r0, r0, r5
 80146ac:	6060      	str	r0, [r4, #4]
 80146ae:	6863      	ldr	r3, [r4, #4]
 80146b0:	6123      	str	r3, [r4, #16]
 80146b2:	2300      	movs	r3, #0
 80146b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80146b8:	e7a8      	b.n	801460c <_printf_i+0x150>
 80146ba:	6923      	ldr	r3, [r4, #16]
 80146bc:	462a      	mov	r2, r5
 80146be:	4649      	mov	r1, r9
 80146c0:	4640      	mov	r0, r8
 80146c2:	47d0      	blx	sl
 80146c4:	3001      	adds	r0, #1
 80146c6:	d0ab      	beq.n	8014620 <_printf_i+0x164>
 80146c8:	6823      	ldr	r3, [r4, #0]
 80146ca:	079b      	lsls	r3, r3, #30
 80146cc:	d413      	bmi.n	80146f6 <_printf_i+0x23a>
 80146ce:	68e0      	ldr	r0, [r4, #12]
 80146d0:	9b03      	ldr	r3, [sp, #12]
 80146d2:	4298      	cmp	r0, r3
 80146d4:	bfb8      	it	lt
 80146d6:	4618      	movlt	r0, r3
 80146d8:	e7a4      	b.n	8014624 <_printf_i+0x168>
 80146da:	2301      	movs	r3, #1
 80146dc:	4632      	mov	r2, r6
 80146de:	4649      	mov	r1, r9
 80146e0:	4640      	mov	r0, r8
 80146e2:	47d0      	blx	sl
 80146e4:	3001      	adds	r0, #1
 80146e6:	d09b      	beq.n	8014620 <_printf_i+0x164>
 80146e8:	3501      	adds	r5, #1
 80146ea:	68e3      	ldr	r3, [r4, #12]
 80146ec:	9903      	ldr	r1, [sp, #12]
 80146ee:	1a5b      	subs	r3, r3, r1
 80146f0:	42ab      	cmp	r3, r5
 80146f2:	dcf2      	bgt.n	80146da <_printf_i+0x21e>
 80146f4:	e7eb      	b.n	80146ce <_printf_i+0x212>
 80146f6:	2500      	movs	r5, #0
 80146f8:	f104 0619 	add.w	r6, r4, #25
 80146fc:	e7f5      	b.n	80146ea <_printf_i+0x22e>
 80146fe:	bf00      	nop
 8014700:	0801a385 	.word	0x0801a385
 8014704:	0801a396 	.word	0x0801a396

08014708 <_sbrk_r>:
 8014708:	b538      	push	{r3, r4, r5, lr}
 801470a:	4d06      	ldr	r5, [pc, #24]	; (8014724 <_sbrk_r+0x1c>)
 801470c:	2300      	movs	r3, #0
 801470e:	4604      	mov	r4, r0
 8014710:	4608      	mov	r0, r1
 8014712:	602b      	str	r3, [r5, #0]
 8014714:	f7ed fd5c 	bl	80021d0 <_sbrk>
 8014718:	1c43      	adds	r3, r0, #1
 801471a:	d102      	bne.n	8014722 <_sbrk_r+0x1a>
 801471c:	682b      	ldr	r3, [r5, #0]
 801471e:	b103      	cbz	r3, 8014722 <_sbrk_r+0x1a>
 8014720:	6023      	str	r3, [r4, #0]
 8014722:	bd38      	pop	{r3, r4, r5, pc}
 8014724:	2000b060 	.word	0x2000b060

08014728 <__sread>:
 8014728:	b510      	push	{r4, lr}
 801472a:	460c      	mov	r4, r1
 801472c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014730:	f000 fa6e 	bl	8014c10 <_read_r>
 8014734:	2800      	cmp	r0, #0
 8014736:	bfab      	itete	ge
 8014738:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801473a:	89a3      	ldrhlt	r3, [r4, #12]
 801473c:	181b      	addge	r3, r3, r0
 801473e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014742:	bfac      	ite	ge
 8014744:	6563      	strge	r3, [r4, #84]	; 0x54
 8014746:	81a3      	strhlt	r3, [r4, #12]
 8014748:	bd10      	pop	{r4, pc}

0801474a <__swrite>:
 801474a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801474e:	461f      	mov	r7, r3
 8014750:	898b      	ldrh	r3, [r1, #12]
 8014752:	05db      	lsls	r3, r3, #23
 8014754:	4605      	mov	r5, r0
 8014756:	460c      	mov	r4, r1
 8014758:	4616      	mov	r6, r2
 801475a:	d505      	bpl.n	8014768 <__swrite+0x1e>
 801475c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014760:	2302      	movs	r3, #2
 8014762:	2200      	movs	r2, #0
 8014764:	f000 f9d0 	bl	8014b08 <_lseek_r>
 8014768:	89a3      	ldrh	r3, [r4, #12]
 801476a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801476e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014772:	81a3      	strh	r3, [r4, #12]
 8014774:	4632      	mov	r2, r6
 8014776:	463b      	mov	r3, r7
 8014778:	4628      	mov	r0, r5
 801477a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801477e:	f000 b869 	b.w	8014854 <_write_r>

08014782 <__sseek>:
 8014782:	b510      	push	{r4, lr}
 8014784:	460c      	mov	r4, r1
 8014786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801478a:	f000 f9bd 	bl	8014b08 <_lseek_r>
 801478e:	1c43      	adds	r3, r0, #1
 8014790:	89a3      	ldrh	r3, [r4, #12]
 8014792:	bf15      	itete	ne
 8014794:	6560      	strne	r0, [r4, #84]	; 0x54
 8014796:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801479a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801479e:	81a3      	strheq	r3, [r4, #12]
 80147a0:	bf18      	it	ne
 80147a2:	81a3      	strhne	r3, [r4, #12]
 80147a4:	bd10      	pop	{r4, pc}

080147a6 <__sclose>:
 80147a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147aa:	f000 b8db 	b.w	8014964 <_close_r>
	...

080147b0 <__swbuf_r>:
 80147b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147b2:	460e      	mov	r6, r1
 80147b4:	4614      	mov	r4, r2
 80147b6:	4605      	mov	r5, r0
 80147b8:	b118      	cbz	r0, 80147c2 <__swbuf_r+0x12>
 80147ba:	6983      	ldr	r3, [r0, #24]
 80147bc:	b90b      	cbnz	r3, 80147c2 <__swbuf_r+0x12>
 80147be:	f7ff fb1b 	bl	8013df8 <__sinit>
 80147c2:	4b21      	ldr	r3, [pc, #132]	; (8014848 <__swbuf_r+0x98>)
 80147c4:	429c      	cmp	r4, r3
 80147c6:	d12b      	bne.n	8014820 <__swbuf_r+0x70>
 80147c8:	686c      	ldr	r4, [r5, #4]
 80147ca:	69a3      	ldr	r3, [r4, #24]
 80147cc:	60a3      	str	r3, [r4, #8]
 80147ce:	89a3      	ldrh	r3, [r4, #12]
 80147d0:	071a      	lsls	r2, r3, #28
 80147d2:	d52f      	bpl.n	8014834 <__swbuf_r+0x84>
 80147d4:	6923      	ldr	r3, [r4, #16]
 80147d6:	b36b      	cbz	r3, 8014834 <__swbuf_r+0x84>
 80147d8:	6923      	ldr	r3, [r4, #16]
 80147da:	6820      	ldr	r0, [r4, #0]
 80147dc:	1ac0      	subs	r0, r0, r3
 80147de:	6963      	ldr	r3, [r4, #20]
 80147e0:	b2f6      	uxtb	r6, r6
 80147e2:	4283      	cmp	r3, r0
 80147e4:	4637      	mov	r7, r6
 80147e6:	dc04      	bgt.n	80147f2 <__swbuf_r+0x42>
 80147e8:	4621      	mov	r1, r4
 80147ea:	4628      	mov	r0, r5
 80147ec:	f000 f950 	bl	8014a90 <_fflush_r>
 80147f0:	bb30      	cbnz	r0, 8014840 <__swbuf_r+0x90>
 80147f2:	68a3      	ldr	r3, [r4, #8]
 80147f4:	3b01      	subs	r3, #1
 80147f6:	60a3      	str	r3, [r4, #8]
 80147f8:	6823      	ldr	r3, [r4, #0]
 80147fa:	1c5a      	adds	r2, r3, #1
 80147fc:	6022      	str	r2, [r4, #0]
 80147fe:	701e      	strb	r6, [r3, #0]
 8014800:	6963      	ldr	r3, [r4, #20]
 8014802:	3001      	adds	r0, #1
 8014804:	4283      	cmp	r3, r0
 8014806:	d004      	beq.n	8014812 <__swbuf_r+0x62>
 8014808:	89a3      	ldrh	r3, [r4, #12]
 801480a:	07db      	lsls	r3, r3, #31
 801480c:	d506      	bpl.n	801481c <__swbuf_r+0x6c>
 801480e:	2e0a      	cmp	r6, #10
 8014810:	d104      	bne.n	801481c <__swbuf_r+0x6c>
 8014812:	4621      	mov	r1, r4
 8014814:	4628      	mov	r0, r5
 8014816:	f000 f93b 	bl	8014a90 <_fflush_r>
 801481a:	b988      	cbnz	r0, 8014840 <__swbuf_r+0x90>
 801481c:	4638      	mov	r0, r7
 801481e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014820:	4b0a      	ldr	r3, [pc, #40]	; (801484c <__swbuf_r+0x9c>)
 8014822:	429c      	cmp	r4, r3
 8014824:	d101      	bne.n	801482a <__swbuf_r+0x7a>
 8014826:	68ac      	ldr	r4, [r5, #8]
 8014828:	e7cf      	b.n	80147ca <__swbuf_r+0x1a>
 801482a:	4b09      	ldr	r3, [pc, #36]	; (8014850 <__swbuf_r+0xa0>)
 801482c:	429c      	cmp	r4, r3
 801482e:	bf08      	it	eq
 8014830:	68ec      	ldreq	r4, [r5, #12]
 8014832:	e7ca      	b.n	80147ca <__swbuf_r+0x1a>
 8014834:	4621      	mov	r1, r4
 8014836:	4628      	mov	r0, r5
 8014838:	f000 f81e 	bl	8014878 <__swsetup_r>
 801483c:	2800      	cmp	r0, #0
 801483e:	d0cb      	beq.n	80147d8 <__swbuf_r+0x28>
 8014840:	f04f 37ff 	mov.w	r7, #4294967295
 8014844:	e7ea      	b.n	801481c <__swbuf_r+0x6c>
 8014846:	bf00      	nop
 8014848:	0801a334 	.word	0x0801a334
 801484c:	0801a354 	.word	0x0801a354
 8014850:	0801a314 	.word	0x0801a314

08014854 <_write_r>:
 8014854:	b538      	push	{r3, r4, r5, lr}
 8014856:	4d07      	ldr	r5, [pc, #28]	; (8014874 <_write_r+0x20>)
 8014858:	4604      	mov	r4, r0
 801485a:	4608      	mov	r0, r1
 801485c:	4611      	mov	r1, r2
 801485e:	2200      	movs	r2, #0
 8014860:	602a      	str	r2, [r5, #0]
 8014862:	461a      	mov	r2, r3
 8014864:	f7ed fc63 	bl	800212e <_write>
 8014868:	1c43      	adds	r3, r0, #1
 801486a:	d102      	bne.n	8014872 <_write_r+0x1e>
 801486c:	682b      	ldr	r3, [r5, #0]
 801486e:	b103      	cbz	r3, 8014872 <_write_r+0x1e>
 8014870:	6023      	str	r3, [r4, #0]
 8014872:	bd38      	pop	{r3, r4, r5, pc}
 8014874:	2000b060 	.word	0x2000b060

08014878 <__swsetup_r>:
 8014878:	4b32      	ldr	r3, [pc, #200]	; (8014944 <__swsetup_r+0xcc>)
 801487a:	b570      	push	{r4, r5, r6, lr}
 801487c:	681d      	ldr	r5, [r3, #0]
 801487e:	4606      	mov	r6, r0
 8014880:	460c      	mov	r4, r1
 8014882:	b125      	cbz	r5, 801488e <__swsetup_r+0x16>
 8014884:	69ab      	ldr	r3, [r5, #24]
 8014886:	b913      	cbnz	r3, 801488e <__swsetup_r+0x16>
 8014888:	4628      	mov	r0, r5
 801488a:	f7ff fab5 	bl	8013df8 <__sinit>
 801488e:	4b2e      	ldr	r3, [pc, #184]	; (8014948 <__swsetup_r+0xd0>)
 8014890:	429c      	cmp	r4, r3
 8014892:	d10f      	bne.n	80148b4 <__swsetup_r+0x3c>
 8014894:	686c      	ldr	r4, [r5, #4]
 8014896:	89a3      	ldrh	r3, [r4, #12]
 8014898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801489c:	0719      	lsls	r1, r3, #28
 801489e:	d42c      	bmi.n	80148fa <__swsetup_r+0x82>
 80148a0:	06dd      	lsls	r5, r3, #27
 80148a2:	d411      	bmi.n	80148c8 <__swsetup_r+0x50>
 80148a4:	2309      	movs	r3, #9
 80148a6:	6033      	str	r3, [r6, #0]
 80148a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80148ac:	81a3      	strh	r3, [r4, #12]
 80148ae:	f04f 30ff 	mov.w	r0, #4294967295
 80148b2:	e03e      	b.n	8014932 <__swsetup_r+0xba>
 80148b4:	4b25      	ldr	r3, [pc, #148]	; (801494c <__swsetup_r+0xd4>)
 80148b6:	429c      	cmp	r4, r3
 80148b8:	d101      	bne.n	80148be <__swsetup_r+0x46>
 80148ba:	68ac      	ldr	r4, [r5, #8]
 80148bc:	e7eb      	b.n	8014896 <__swsetup_r+0x1e>
 80148be:	4b24      	ldr	r3, [pc, #144]	; (8014950 <__swsetup_r+0xd8>)
 80148c0:	429c      	cmp	r4, r3
 80148c2:	bf08      	it	eq
 80148c4:	68ec      	ldreq	r4, [r5, #12]
 80148c6:	e7e6      	b.n	8014896 <__swsetup_r+0x1e>
 80148c8:	0758      	lsls	r0, r3, #29
 80148ca:	d512      	bpl.n	80148f2 <__swsetup_r+0x7a>
 80148cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80148ce:	b141      	cbz	r1, 80148e2 <__swsetup_r+0x6a>
 80148d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80148d4:	4299      	cmp	r1, r3
 80148d6:	d002      	beq.n	80148de <__swsetup_r+0x66>
 80148d8:	4630      	mov	r0, r6
 80148da:	f7ff fb47 	bl	8013f6c <_free_r>
 80148de:	2300      	movs	r3, #0
 80148e0:	6363      	str	r3, [r4, #52]	; 0x34
 80148e2:	89a3      	ldrh	r3, [r4, #12]
 80148e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80148e8:	81a3      	strh	r3, [r4, #12]
 80148ea:	2300      	movs	r3, #0
 80148ec:	6063      	str	r3, [r4, #4]
 80148ee:	6923      	ldr	r3, [r4, #16]
 80148f0:	6023      	str	r3, [r4, #0]
 80148f2:	89a3      	ldrh	r3, [r4, #12]
 80148f4:	f043 0308 	orr.w	r3, r3, #8
 80148f8:	81a3      	strh	r3, [r4, #12]
 80148fa:	6923      	ldr	r3, [r4, #16]
 80148fc:	b94b      	cbnz	r3, 8014912 <__swsetup_r+0x9a>
 80148fe:	89a3      	ldrh	r3, [r4, #12]
 8014900:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014908:	d003      	beq.n	8014912 <__swsetup_r+0x9a>
 801490a:	4621      	mov	r1, r4
 801490c:	4630      	mov	r0, r6
 801490e:	f000 f933 	bl	8014b78 <__smakebuf_r>
 8014912:	89a0      	ldrh	r0, [r4, #12]
 8014914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014918:	f010 0301 	ands.w	r3, r0, #1
 801491c:	d00a      	beq.n	8014934 <__swsetup_r+0xbc>
 801491e:	2300      	movs	r3, #0
 8014920:	60a3      	str	r3, [r4, #8]
 8014922:	6963      	ldr	r3, [r4, #20]
 8014924:	425b      	negs	r3, r3
 8014926:	61a3      	str	r3, [r4, #24]
 8014928:	6923      	ldr	r3, [r4, #16]
 801492a:	b943      	cbnz	r3, 801493e <__swsetup_r+0xc6>
 801492c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014930:	d1ba      	bne.n	80148a8 <__swsetup_r+0x30>
 8014932:	bd70      	pop	{r4, r5, r6, pc}
 8014934:	0781      	lsls	r1, r0, #30
 8014936:	bf58      	it	pl
 8014938:	6963      	ldrpl	r3, [r4, #20]
 801493a:	60a3      	str	r3, [r4, #8]
 801493c:	e7f4      	b.n	8014928 <__swsetup_r+0xb0>
 801493e:	2000      	movs	r0, #0
 8014940:	e7f7      	b.n	8014932 <__swsetup_r+0xba>
 8014942:	bf00      	nop
 8014944:	20000048 	.word	0x20000048
 8014948:	0801a334 	.word	0x0801a334
 801494c:	0801a354 	.word	0x0801a354
 8014950:	0801a314 	.word	0x0801a314

08014954 <abort>:
 8014954:	b508      	push	{r3, lr}
 8014956:	2006      	movs	r0, #6
 8014958:	f000 f994 	bl	8014c84 <raise>
 801495c:	2001      	movs	r0, #1
 801495e:	f7ed fbbf 	bl	80020e0 <_exit>
	...

08014964 <_close_r>:
 8014964:	b538      	push	{r3, r4, r5, lr}
 8014966:	4d06      	ldr	r5, [pc, #24]	; (8014980 <_close_r+0x1c>)
 8014968:	2300      	movs	r3, #0
 801496a:	4604      	mov	r4, r0
 801496c:	4608      	mov	r0, r1
 801496e:	602b      	str	r3, [r5, #0]
 8014970:	f7ed fbf9 	bl	8002166 <_close>
 8014974:	1c43      	adds	r3, r0, #1
 8014976:	d102      	bne.n	801497e <_close_r+0x1a>
 8014978:	682b      	ldr	r3, [r5, #0]
 801497a:	b103      	cbz	r3, 801497e <_close_r+0x1a>
 801497c:	6023      	str	r3, [r4, #0]
 801497e:	bd38      	pop	{r3, r4, r5, pc}
 8014980:	2000b060 	.word	0x2000b060

08014984 <__sflush_r>:
 8014984:	898a      	ldrh	r2, [r1, #12]
 8014986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801498a:	4605      	mov	r5, r0
 801498c:	0710      	lsls	r0, r2, #28
 801498e:	460c      	mov	r4, r1
 8014990:	d458      	bmi.n	8014a44 <__sflush_r+0xc0>
 8014992:	684b      	ldr	r3, [r1, #4]
 8014994:	2b00      	cmp	r3, #0
 8014996:	dc05      	bgt.n	80149a4 <__sflush_r+0x20>
 8014998:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801499a:	2b00      	cmp	r3, #0
 801499c:	dc02      	bgt.n	80149a4 <__sflush_r+0x20>
 801499e:	2000      	movs	r0, #0
 80149a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80149a6:	2e00      	cmp	r6, #0
 80149a8:	d0f9      	beq.n	801499e <__sflush_r+0x1a>
 80149aa:	2300      	movs	r3, #0
 80149ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80149b0:	682f      	ldr	r7, [r5, #0]
 80149b2:	602b      	str	r3, [r5, #0]
 80149b4:	d032      	beq.n	8014a1c <__sflush_r+0x98>
 80149b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80149b8:	89a3      	ldrh	r3, [r4, #12]
 80149ba:	075a      	lsls	r2, r3, #29
 80149bc:	d505      	bpl.n	80149ca <__sflush_r+0x46>
 80149be:	6863      	ldr	r3, [r4, #4]
 80149c0:	1ac0      	subs	r0, r0, r3
 80149c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80149c4:	b10b      	cbz	r3, 80149ca <__sflush_r+0x46>
 80149c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80149c8:	1ac0      	subs	r0, r0, r3
 80149ca:	2300      	movs	r3, #0
 80149cc:	4602      	mov	r2, r0
 80149ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80149d0:	6a21      	ldr	r1, [r4, #32]
 80149d2:	4628      	mov	r0, r5
 80149d4:	47b0      	blx	r6
 80149d6:	1c43      	adds	r3, r0, #1
 80149d8:	89a3      	ldrh	r3, [r4, #12]
 80149da:	d106      	bne.n	80149ea <__sflush_r+0x66>
 80149dc:	6829      	ldr	r1, [r5, #0]
 80149de:	291d      	cmp	r1, #29
 80149e0:	d82c      	bhi.n	8014a3c <__sflush_r+0xb8>
 80149e2:	4a2a      	ldr	r2, [pc, #168]	; (8014a8c <__sflush_r+0x108>)
 80149e4:	40ca      	lsrs	r2, r1
 80149e6:	07d6      	lsls	r6, r2, #31
 80149e8:	d528      	bpl.n	8014a3c <__sflush_r+0xb8>
 80149ea:	2200      	movs	r2, #0
 80149ec:	6062      	str	r2, [r4, #4]
 80149ee:	04d9      	lsls	r1, r3, #19
 80149f0:	6922      	ldr	r2, [r4, #16]
 80149f2:	6022      	str	r2, [r4, #0]
 80149f4:	d504      	bpl.n	8014a00 <__sflush_r+0x7c>
 80149f6:	1c42      	adds	r2, r0, #1
 80149f8:	d101      	bne.n	80149fe <__sflush_r+0x7a>
 80149fa:	682b      	ldr	r3, [r5, #0]
 80149fc:	b903      	cbnz	r3, 8014a00 <__sflush_r+0x7c>
 80149fe:	6560      	str	r0, [r4, #84]	; 0x54
 8014a00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a02:	602f      	str	r7, [r5, #0]
 8014a04:	2900      	cmp	r1, #0
 8014a06:	d0ca      	beq.n	801499e <__sflush_r+0x1a>
 8014a08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a0c:	4299      	cmp	r1, r3
 8014a0e:	d002      	beq.n	8014a16 <__sflush_r+0x92>
 8014a10:	4628      	mov	r0, r5
 8014a12:	f7ff faab 	bl	8013f6c <_free_r>
 8014a16:	2000      	movs	r0, #0
 8014a18:	6360      	str	r0, [r4, #52]	; 0x34
 8014a1a:	e7c1      	b.n	80149a0 <__sflush_r+0x1c>
 8014a1c:	6a21      	ldr	r1, [r4, #32]
 8014a1e:	2301      	movs	r3, #1
 8014a20:	4628      	mov	r0, r5
 8014a22:	47b0      	blx	r6
 8014a24:	1c41      	adds	r1, r0, #1
 8014a26:	d1c7      	bne.n	80149b8 <__sflush_r+0x34>
 8014a28:	682b      	ldr	r3, [r5, #0]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d0c4      	beq.n	80149b8 <__sflush_r+0x34>
 8014a2e:	2b1d      	cmp	r3, #29
 8014a30:	d001      	beq.n	8014a36 <__sflush_r+0xb2>
 8014a32:	2b16      	cmp	r3, #22
 8014a34:	d101      	bne.n	8014a3a <__sflush_r+0xb6>
 8014a36:	602f      	str	r7, [r5, #0]
 8014a38:	e7b1      	b.n	801499e <__sflush_r+0x1a>
 8014a3a:	89a3      	ldrh	r3, [r4, #12]
 8014a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a40:	81a3      	strh	r3, [r4, #12]
 8014a42:	e7ad      	b.n	80149a0 <__sflush_r+0x1c>
 8014a44:	690f      	ldr	r7, [r1, #16]
 8014a46:	2f00      	cmp	r7, #0
 8014a48:	d0a9      	beq.n	801499e <__sflush_r+0x1a>
 8014a4a:	0793      	lsls	r3, r2, #30
 8014a4c:	680e      	ldr	r6, [r1, #0]
 8014a4e:	bf08      	it	eq
 8014a50:	694b      	ldreq	r3, [r1, #20]
 8014a52:	600f      	str	r7, [r1, #0]
 8014a54:	bf18      	it	ne
 8014a56:	2300      	movne	r3, #0
 8014a58:	eba6 0807 	sub.w	r8, r6, r7
 8014a5c:	608b      	str	r3, [r1, #8]
 8014a5e:	f1b8 0f00 	cmp.w	r8, #0
 8014a62:	dd9c      	ble.n	801499e <__sflush_r+0x1a>
 8014a64:	6a21      	ldr	r1, [r4, #32]
 8014a66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014a68:	4643      	mov	r3, r8
 8014a6a:	463a      	mov	r2, r7
 8014a6c:	4628      	mov	r0, r5
 8014a6e:	47b0      	blx	r6
 8014a70:	2800      	cmp	r0, #0
 8014a72:	dc06      	bgt.n	8014a82 <__sflush_r+0xfe>
 8014a74:	89a3      	ldrh	r3, [r4, #12]
 8014a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a7a:	81a3      	strh	r3, [r4, #12]
 8014a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8014a80:	e78e      	b.n	80149a0 <__sflush_r+0x1c>
 8014a82:	4407      	add	r7, r0
 8014a84:	eba8 0800 	sub.w	r8, r8, r0
 8014a88:	e7e9      	b.n	8014a5e <__sflush_r+0xda>
 8014a8a:	bf00      	nop
 8014a8c:	20400001 	.word	0x20400001

08014a90 <_fflush_r>:
 8014a90:	b538      	push	{r3, r4, r5, lr}
 8014a92:	690b      	ldr	r3, [r1, #16]
 8014a94:	4605      	mov	r5, r0
 8014a96:	460c      	mov	r4, r1
 8014a98:	b913      	cbnz	r3, 8014aa0 <_fflush_r+0x10>
 8014a9a:	2500      	movs	r5, #0
 8014a9c:	4628      	mov	r0, r5
 8014a9e:	bd38      	pop	{r3, r4, r5, pc}
 8014aa0:	b118      	cbz	r0, 8014aaa <_fflush_r+0x1a>
 8014aa2:	6983      	ldr	r3, [r0, #24]
 8014aa4:	b90b      	cbnz	r3, 8014aaa <_fflush_r+0x1a>
 8014aa6:	f7ff f9a7 	bl	8013df8 <__sinit>
 8014aaa:	4b14      	ldr	r3, [pc, #80]	; (8014afc <_fflush_r+0x6c>)
 8014aac:	429c      	cmp	r4, r3
 8014aae:	d11b      	bne.n	8014ae8 <_fflush_r+0x58>
 8014ab0:	686c      	ldr	r4, [r5, #4]
 8014ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d0ef      	beq.n	8014a9a <_fflush_r+0xa>
 8014aba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014abc:	07d0      	lsls	r0, r2, #31
 8014abe:	d404      	bmi.n	8014aca <_fflush_r+0x3a>
 8014ac0:	0599      	lsls	r1, r3, #22
 8014ac2:	d402      	bmi.n	8014aca <_fflush_r+0x3a>
 8014ac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014ac6:	f7ff fa47 	bl	8013f58 <__retarget_lock_acquire_recursive>
 8014aca:	4628      	mov	r0, r5
 8014acc:	4621      	mov	r1, r4
 8014ace:	f7ff ff59 	bl	8014984 <__sflush_r>
 8014ad2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014ad4:	07da      	lsls	r2, r3, #31
 8014ad6:	4605      	mov	r5, r0
 8014ad8:	d4e0      	bmi.n	8014a9c <_fflush_r+0xc>
 8014ada:	89a3      	ldrh	r3, [r4, #12]
 8014adc:	059b      	lsls	r3, r3, #22
 8014ade:	d4dd      	bmi.n	8014a9c <_fflush_r+0xc>
 8014ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014ae2:	f7ff fa3a 	bl	8013f5a <__retarget_lock_release_recursive>
 8014ae6:	e7d9      	b.n	8014a9c <_fflush_r+0xc>
 8014ae8:	4b05      	ldr	r3, [pc, #20]	; (8014b00 <_fflush_r+0x70>)
 8014aea:	429c      	cmp	r4, r3
 8014aec:	d101      	bne.n	8014af2 <_fflush_r+0x62>
 8014aee:	68ac      	ldr	r4, [r5, #8]
 8014af0:	e7df      	b.n	8014ab2 <_fflush_r+0x22>
 8014af2:	4b04      	ldr	r3, [pc, #16]	; (8014b04 <_fflush_r+0x74>)
 8014af4:	429c      	cmp	r4, r3
 8014af6:	bf08      	it	eq
 8014af8:	68ec      	ldreq	r4, [r5, #12]
 8014afa:	e7da      	b.n	8014ab2 <_fflush_r+0x22>
 8014afc:	0801a334 	.word	0x0801a334
 8014b00:	0801a354 	.word	0x0801a354
 8014b04:	0801a314 	.word	0x0801a314

08014b08 <_lseek_r>:
 8014b08:	b538      	push	{r3, r4, r5, lr}
 8014b0a:	4d07      	ldr	r5, [pc, #28]	; (8014b28 <_lseek_r+0x20>)
 8014b0c:	4604      	mov	r4, r0
 8014b0e:	4608      	mov	r0, r1
 8014b10:	4611      	mov	r1, r2
 8014b12:	2200      	movs	r2, #0
 8014b14:	602a      	str	r2, [r5, #0]
 8014b16:	461a      	mov	r2, r3
 8014b18:	f7ed fb4c 	bl	80021b4 <_lseek>
 8014b1c:	1c43      	adds	r3, r0, #1
 8014b1e:	d102      	bne.n	8014b26 <_lseek_r+0x1e>
 8014b20:	682b      	ldr	r3, [r5, #0]
 8014b22:	b103      	cbz	r3, 8014b26 <_lseek_r+0x1e>
 8014b24:	6023      	str	r3, [r4, #0]
 8014b26:	bd38      	pop	{r3, r4, r5, pc}
 8014b28:	2000b060 	.word	0x2000b060

08014b2c <__swhatbuf_r>:
 8014b2c:	b570      	push	{r4, r5, r6, lr}
 8014b2e:	460e      	mov	r6, r1
 8014b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b34:	2900      	cmp	r1, #0
 8014b36:	b096      	sub	sp, #88	; 0x58
 8014b38:	4614      	mov	r4, r2
 8014b3a:	461d      	mov	r5, r3
 8014b3c:	da08      	bge.n	8014b50 <__swhatbuf_r+0x24>
 8014b3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014b42:	2200      	movs	r2, #0
 8014b44:	602a      	str	r2, [r5, #0]
 8014b46:	061a      	lsls	r2, r3, #24
 8014b48:	d410      	bmi.n	8014b6c <__swhatbuf_r+0x40>
 8014b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014b4e:	e00e      	b.n	8014b6e <__swhatbuf_r+0x42>
 8014b50:	466a      	mov	r2, sp
 8014b52:	f000 f8b3 	bl	8014cbc <_fstat_r>
 8014b56:	2800      	cmp	r0, #0
 8014b58:	dbf1      	blt.n	8014b3e <__swhatbuf_r+0x12>
 8014b5a:	9a01      	ldr	r2, [sp, #4]
 8014b5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014b60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014b64:	425a      	negs	r2, r3
 8014b66:	415a      	adcs	r2, r3
 8014b68:	602a      	str	r2, [r5, #0]
 8014b6a:	e7ee      	b.n	8014b4a <__swhatbuf_r+0x1e>
 8014b6c:	2340      	movs	r3, #64	; 0x40
 8014b6e:	2000      	movs	r0, #0
 8014b70:	6023      	str	r3, [r4, #0]
 8014b72:	b016      	add	sp, #88	; 0x58
 8014b74:	bd70      	pop	{r4, r5, r6, pc}
	...

08014b78 <__smakebuf_r>:
 8014b78:	898b      	ldrh	r3, [r1, #12]
 8014b7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014b7c:	079d      	lsls	r5, r3, #30
 8014b7e:	4606      	mov	r6, r0
 8014b80:	460c      	mov	r4, r1
 8014b82:	d507      	bpl.n	8014b94 <__smakebuf_r+0x1c>
 8014b84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014b88:	6023      	str	r3, [r4, #0]
 8014b8a:	6123      	str	r3, [r4, #16]
 8014b8c:	2301      	movs	r3, #1
 8014b8e:	6163      	str	r3, [r4, #20]
 8014b90:	b002      	add	sp, #8
 8014b92:	bd70      	pop	{r4, r5, r6, pc}
 8014b94:	ab01      	add	r3, sp, #4
 8014b96:	466a      	mov	r2, sp
 8014b98:	f7ff ffc8 	bl	8014b2c <__swhatbuf_r>
 8014b9c:	9900      	ldr	r1, [sp, #0]
 8014b9e:	4605      	mov	r5, r0
 8014ba0:	4630      	mov	r0, r6
 8014ba2:	f7ff fa4f 	bl	8014044 <_malloc_r>
 8014ba6:	b948      	cbnz	r0, 8014bbc <__smakebuf_r+0x44>
 8014ba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014bac:	059a      	lsls	r2, r3, #22
 8014bae:	d4ef      	bmi.n	8014b90 <__smakebuf_r+0x18>
 8014bb0:	f023 0303 	bic.w	r3, r3, #3
 8014bb4:	f043 0302 	orr.w	r3, r3, #2
 8014bb8:	81a3      	strh	r3, [r4, #12]
 8014bba:	e7e3      	b.n	8014b84 <__smakebuf_r+0xc>
 8014bbc:	4b0d      	ldr	r3, [pc, #52]	; (8014bf4 <__smakebuf_r+0x7c>)
 8014bbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8014bc0:	89a3      	ldrh	r3, [r4, #12]
 8014bc2:	6020      	str	r0, [r4, #0]
 8014bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014bc8:	81a3      	strh	r3, [r4, #12]
 8014bca:	9b00      	ldr	r3, [sp, #0]
 8014bcc:	6163      	str	r3, [r4, #20]
 8014bce:	9b01      	ldr	r3, [sp, #4]
 8014bd0:	6120      	str	r0, [r4, #16]
 8014bd2:	b15b      	cbz	r3, 8014bec <__smakebuf_r+0x74>
 8014bd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014bd8:	4630      	mov	r0, r6
 8014bda:	f000 f881 	bl	8014ce0 <_isatty_r>
 8014bde:	b128      	cbz	r0, 8014bec <__smakebuf_r+0x74>
 8014be0:	89a3      	ldrh	r3, [r4, #12]
 8014be2:	f023 0303 	bic.w	r3, r3, #3
 8014be6:	f043 0301 	orr.w	r3, r3, #1
 8014bea:	81a3      	strh	r3, [r4, #12]
 8014bec:	89a0      	ldrh	r0, [r4, #12]
 8014bee:	4305      	orrs	r5, r0
 8014bf0:	81a5      	strh	r5, [r4, #12]
 8014bf2:	e7cd      	b.n	8014b90 <__smakebuf_r+0x18>
 8014bf4:	08013d91 	.word	0x08013d91

08014bf8 <__malloc_lock>:
 8014bf8:	4801      	ldr	r0, [pc, #4]	; (8014c00 <__malloc_lock+0x8>)
 8014bfa:	f7ff b9ad 	b.w	8013f58 <__retarget_lock_acquire_recursive>
 8014bfe:	bf00      	nop
 8014c00:	2000b064 	.word	0x2000b064

08014c04 <__malloc_unlock>:
 8014c04:	4801      	ldr	r0, [pc, #4]	; (8014c0c <__malloc_unlock+0x8>)
 8014c06:	f7ff b9a8 	b.w	8013f5a <__retarget_lock_release_recursive>
 8014c0a:	bf00      	nop
 8014c0c:	2000b064 	.word	0x2000b064

08014c10 <_read_r>:
 8014c10:	b538      	push	{r3, r4, r5, lr}
 8014c12:	4d07      	ldr	r5, [pc, #28]	; (8014c30 <_read_r+0x20>)
 8014c14:	4604      	mov	r4, r0
 8014c16:	4608      	mov	r0, r1
 8014c18:	4611      	mov	r1, r2
 8014c1a:	2200      	movs	r2, #0
 8014c1c:	602a      	str	r2, [r5, #0]
 8014c1e:	461a      	mov	r2, r3
 8014c20:	f7ed fa68 	bl	80020f4 <_read>
 8014c24:	1c43      	adds	r3, r0, #1
 8014c26:	d102      	bne.n	8014c2e <_read_r+0x1e>
 8014c28:	682b      	ldr	r3, [r5, #0]
 8014c2a:	b103      	cbz	r3, 8014c2e <_read_r+0x1e>
 8014c2c:	6023      	str	r3, [r4, #0]
 8014c2e:	bd38      	pop	{r3, r4, r5, pc}
 8014c30:	2000b060 	.word	0x2000b060

08014c34 <_raise_r>:
 8014c34:	291f      	cmp	r1, #31
 8014c36:	b538      	push	{r3, r4, r5, lr}
 8014c38:	4604      	mov	r4, r0
 8014c3a:	460d      	mov	r5, r1
 8014c3c:	d904      	bls.n	8014c48 <_raise_r+0x14>
 8014c3e:	2316      	movs	r3, #22
 8014c40:	6003      	str	r3, [r0, #0]
 8014c42:	f04f 30ff 	mov.w	r0, #4294967295
 8014c46:	bd38      	pop	{r3, r4, r5, pc}
 8014c48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014c4a:	b112      	cbz	r2, 8014c52 <_raise_r+0x1e>
 8014c4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014c50:	b94b      	cbnz	r3, 8014c66 <_raise_r+0x32>
 8014c52:	4620      	mov	r0, r4
 8014c54:	f000 f830 	bl	8014cb8 <_getpid_r>
 8014c58:	462a      	mov	r2, r5
 8014c5a:	4601      	mov	r1, r0
 8014c5c:	4620      	mov	r0, r4
 8014c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c62:	f000 b817 	b.w	8014c94 <_kill_r>
 8014c66:	2b01      	cmp	r3, #1
 8014c68:	d00a      	beq.n	8014c80 <_raise_r+0x4c>
 8014c6a:	1c59      	adds	r1, r3, #1
 8014c6c:	d103      	bne.n	8014c76 <_raise_r+0x42>
 8014c6e:	2316      	movs	r3, #22
 8014c70:	6003      	str	r3, [r0, #0]
 8014c72:	2001      	movs	r0, #1
 8014c74:	e7e7      	b.n	8014c46 <_raise_r+0x12>
 8014c76:	2400      	movs	r4, #0
 8014c78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014c7c:	4628      	mov	r0, r5
 8014c7e:	4798      	blx	r3
 8014c80:	2000      	movs	r0, #0
 8014c82:	e7e0      	b.n	8014c46 <_raise_r+0x12>

08014c84 <raise>:
 8014c84:	4b02      	ldr	r3, [pc, #8]	; (8014c90 <raise+0xc>)
 8014c86:	4601      	mov	r1, r0
 8014c88:	6818      	ldr	r0, [r3, #0]
 8014c8a:	f7ff bfd3 	b.w	8014c34 <_raise_r>
 8014c8e:	bf00      	nop
 8014c90:	20000048 	.word	0x20000048

08014c94 <_kill_r>:
 8014c94:	b538      	push	{r3, r4, r5, lr}
 8014c96:	4d07      	ldr	r5, [pc, #28]	; (8014cb4 <_kill_r+0x20>)
 8014c98:	2300      	movs	r3, #0
 8014c9a:	4604      	mov	r4, r0
 8014c9c:	4608      	mov	r0, r1
 8014c9e:	4611      	mov	r1, r2
 8014ca0:	602b      	str	r3, [r5, #0]
 8014ca2:	f7ed fa0b 	bl	80020bc <_kill>
 8014ca6:	1c43      	adds	r3, r0, #1
 8014ca8:	d102      	bne.n	8014cb0 <_kill_r+0x1c>
 8014caa:	682b      	ldr	r3, [r5, #0]
 8014cac:	b103      	cbz	r3, 8014cb0 <_kill_r+0x1c>
 8014cae:	6023      	str	r3, [r4, #0]
 8014cb0:	bd38      	pop	{r3, r4, r5, pc}
 8014cb2:	bf00      	nop
 8014cb4:	2000b060 	.word	0x2000b060

08014cb8 <_getpid_r>:
 8014cb8:	f7ed b9f8 	b.w	80020ac <_getpid>

08014cbc <_fstat_r>:
 8014cbc:	b538      	push	{r3, r4, r5, lr}
 8014cbe:	4d07      	ldr	r5, [pc, #28]	; (8014cdc <_fstat_r+0x20>)
 8014cc0:	2300      	movs	r3, #0
 8014cc2:	4604      	mov	r4, r0
 8014cc4:	4608      	mov	r0, r1
 8014cc6:	4611      	mov	r1, r2
 8014cc8:	602b      	str	r3, [r5, #0]
 8014cca:	f7ed fa58 	bl	800217e <_fstat>
 8014cce:	1c43      	adds	r3, r0, #1
 8014cd0:	d102      	bne.n	8014cd8 <_fstat_r+0x1c>
 8014cd2:	682b      	ldr	r3, [r5, #0]
 8014cd4:	b103      	cbz	r3, 8014cd8 <_fstat_r+0x1c>
 8014cd6:	6023      	str	r3, [r4, #0]
 8014cd8:	bd38      	pop	{r3, r4, r5, pc}
 8014cda:	bf00      	nop
 8014cdc:	2000b060 	.word	0x2000b060

08014ce0 <_isatty_r>:
 8014ce0:	b538      	push	{r3, r4, r5, lr}
 8014ce2:	4d06      	ldr	r5, [pc, #24]	; (8014cfc <_isatty_r+0x1c>)
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	4604      	mov	r4, r0
 8014ce8:	4608      	mov	r0, r1
 8014cea:	602b      	str	r3, [r5, #0]
 8014cec:	f7ed fa57 	bl	800219e <_isatty>
 8014cf0:	1c43      	adds	r3, r0, #1
 8014cf2:	d102      	bne.n	8014cfa <_isatty_r+0x1a>
 8014cf4:	682b      	ldr	r3, [r5, #0]
 8014cf6:	b103      	cbz	r3, 8014cfa <_isatty_r+0x1a>
 8014cf8:	6023      	str	r3, [r4, #0]
 8014cfa:	bd38      	pop	{r3, r4, r5, pc}
 8014cfc:	2000b060 	.word	0x2000b060

08014d00 <_init>:
 8014d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d02:	bf00      	nop
 8014d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d06:	bc08      	pop	{r3}
 8014d08:	469e      	mov	lr, r3
 8014d0a:	4770      	bx	lr

08014d0c <_fini>:
 8014d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d0e:	bf00      	nop
 8014d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d12:	bc08      	pop	{r3}
 8014d14:	469e      	mov	lr, r3
 8014d16:	4770      	bx	lr
