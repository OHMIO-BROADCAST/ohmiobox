
OHMIO-FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062f4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000268c  080064bc  080064bc  000164bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b48  08008b48  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  08008b48  08008b48  00018b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b50  08008b50  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b50  08008b50  00018b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b54  08008b54  00018b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08008b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000024  08008b7c  00020024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000c4  08008c1c  000200c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b98  20000164  08008cbc  00020164  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000cfc  08008cbc  00020cfc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018b8b  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002e49  00000000  00000000  00038d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001240  00000000  00000000  0003bb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001110  00000000  00000000  0003cda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028465  00000000  00000000  0003deb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016765  00000000  00000000  0006631d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f672a  00000000  00000000  0007ca82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001731ac  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004d14  00000000  00000000  001731fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000164 	.word	0x20000164
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080064a4 	.word	0x080064a4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000168 	.word	0x20000168
 8000204:	080064a4 	.word	0x080064a4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
  */
 extern int indexMenu=0;
extern int screen=0;
static uint32_t last_arriba_time = 0; // keeps track of the last time "ARRIBA" was displayed
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f001 fe21 	bl	8002156 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f900 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 faf6 	bl	8000b08 <MX_GPIO_Init>
  MX_ETH_Init();
 800051c:	f000 fa08 	bl	8000930 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000520:	f000 fa94 	bl	8000a4c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000524:	f000 fac2 	bl	8000aac <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8000528:	f000 fa50 	bl	80009cc <MX_I2C2_Init>
  MX_ADC1_Init();
 800052c:	f000 f95c 	bl	80007e8 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000530:	f000 f9ac 	bl	800088c <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000534:	f000 fbd4 	bl	8000ce0 <ssd1306_Init>
  //INICIALIZAMOS EL SPLASH
  ssd1306_OhmioSplash();
 8000538:	f001 fafc 	bl	8001b34 <ssd1306_OhmioSplash>
  ssd1306_OhmioMenuPrincipal();
 800053c:	f001 fb06 	bl	8001b4c <ssd1306_OhmioMenuPrincipal>
  while (1)
  {
    /* USER CODE END WHILE */
	  //INICIALIZAMOS EL SPLASH

	  HAL_ADC_Start(&hadc3);
 8000540:	4871      	ldr	r0, [pc, #452]	; (8000708 <main+0x1fc>)
 8000542:	f001 fecd 	bl	80022e0 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc3, 10)==HAL_OK){
 8000546:	210a      	movs	r1, #10
 8000548:	486f      	ldr	r0, [pc, #444]	; (8000708 <main+0x1fc>)
 800054a:	f001 ffcb 	bl	80024e4 <HAL_ADC_PollForConversion>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d10e      	bne.n	8000572 <main+0x66>
		  analog_value_keypad=HAL_ADC_GetValue(&hadc3);
 8000554:	486c      	ldr	r0, [pc, #432]	; (8000708 <main+0x1fc>)
 8000556:	f002 f850 	bl	80025fa <HAL_ADC_GetValue>
 800055a:	4603      	mov	r3, r0
 800055c:	4a6b      	ldr	r2, [pc, #428]	; (800070c <main+0x200>)
 800055e:	6013      	str	r3, [r2, #0]
		  ssd1306_DisplayAnalogValue(analog_value_keypad, indexMenu, screen);
 8000560:	4b6a      	ldr	r3, [pc, #424]	; (800070c <main+0x200>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a6a      	ldr	r2, [pc, #424]	; (8000710 <main+0x204>)
 8000566:	6811      	ldr	r1, [r2, #0]
 8000568:	4a6a      	ldr	r2, [pc, #424]	; (8000714 <main+0x208>)
 800056a:	6812      	ldr	r2, [r2, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f001 fa8f 	bl	8001a90 <ssd1306_DisplayAnalogValue>
	  }

	  //Displacement vertical
	   if(analog_value_keypad >= 800 && analog_value_keypad <= 900){
 8000572:	4b66      	ldr	r3, [pc, #408]	; (800070c <main+0x200>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800057a:	d335      	bcc.n	80005e8 <main+0xdc>
 800057c:	4b63      	ldr	r3, [pc, #396]	; (800070c <main+0x200>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000584:	d830      	bhi.n	80005e8 <main+0xdc>
        if(screen==1){
 8000586:	4b63      	ldr	r3, [pc, #396]	; (8000714 <main+0x208>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d10d      	bne.n	80005aa <main+0x9e>
          if (indexMenu==4){
 800058e:	4b60      	ldr	r3, [pc, #384]	; (8000710 <main+0x204>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b04      	cmp	r3, #4
 8000594:	d103      	bne.n	800059e <main+0x92>
            indexMenu=0;
 8000596:	4b5e      	ldr	r3, [pc, #376]	; (8000710 <main+0x204>)
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	e024      	b.n	80005e8 <main+0xdc>
          }
          else{
            indexMenu++;
 800059e:	4b5c      	ldr	r3, [pc, #368]	; (8000710 <main+0x204>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	3301      	adds	r3, #1
 80005a4:	4a5a      	ldr	r2, [pc, #360]	; (8000710 <main+0x204>)
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	e01e      	b.n	80005e8 <main+0xdc>
          }
        }else if(screen==4){
 80005aa:	4b5a      	ldr	r3, [pc, #360]	; (8000714 <main+0x208>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b04      	cmp	r3, #4
 80005b0:	d10d      	bne.n	80005ce <main+0xc2>
          if (indexMenu==4){
 80005b2:	4b57      	ldr	r3, [pc, #348]	; (8000710 <main+0x204>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b04      	cmp	r3, #4
 80005b8:	d103      	bne.n	80005c2 <main+0xb6>
            indexMenu=0;
 80005ba:	4b55      	ldr	r3, [pc, #340]	; (8000710 <main+0x204>)
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	e012      	b.n	80005e8 <main+0xdc>
          }
          else{
            indexMenu++;
 80005c2:	4b53      	ldr	r3, [pc, #332]	; (8000710 <main+0x204>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	3301      	adds	r3, #1
 80005c8:	4a51      	ldr	r2, [pc, #324]	; (8000710 <main+0x204>)
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	e00c      	b.n	80005e8 <main+0xdc>
          }
        }
        else{
          if (indexMenu==2){
 80005ce:	4b50      	ldr	r3, [pc, #320]	; (8000710 <main+0x204>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	d103      	bne.n	80005de <main+0xd2>
            indexMenu=0;
 80005d6:	4b4e      	ldr	r3, [pc, #312]	; (8000710 <main+0x204>)
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	e004      	b.n	80005e8 <main+0xdc>
          }
          else{
            indexMenu++;
 80005de:	4b4c      	ldr	r3, [pc, #304]	; (8000710 <main+0x204>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	3301      	adds	r3, #1
 80005e4:	4a4a      	ldr	r2, [pc, #296]	; (8000710 <main+0x204>)
 80005e6:	6013      	str	r3, [r2, #0]
	   //screen=1 -> DASHBOARD
	   //screen=2 -> ENERGIA
	   //screen=3 -> SETTINGS


	      if(analog_value_keypad >= 0 && analog_value_keypad <= 100){
 80005e8:	4b48      	ldr	r3, [pc, #288]	; (800070c <main+0x200>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b64      	cmp	r3, #100	; 0x64
 80005ee:	f200 8083 	bhi.w	80006f8 <main+0x1ec>
			//Select
	    	//Menu Principal
			if(screen==0){
 80005f2:	4b48      	ldr	r3, [pc, #288]	; (8000714 <main+0x208>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d125      	bne.n	8000646 <main+0x13a>
				if(indexMenu==0){
 80005fa:	4b45      	ldr	r3, [pc, #276]	; (8000710 <main+0x204>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d108      	bne.n	8000614 <main+0x108>
					//option Dashboard
					screen=1;
 8000602:	4b44      	ldr	r3, [pc, #272]	; (8000714 <main+0x208>)
 8000604:	2201      	movs	r2, #1
 8000606:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 8000608:	4b41      	ldr	r3, [pc, #260]	; (8000710 <main+0x204>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 800060e:	f000 fbf5 	bl	8000dfc <ssd1306_UpdateScreen>
 8000612:	e018      	b.n	8000646 <main+0x13a>
				}else if (indexMenu==1){
 8000614:	4b3e      	ldr	r3, [pc, #248]	; (8000710 <main+0x204>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d108      	bne.n	800062e <main+0x122>
					//option Energy
					screen=2;
 800061c:	4b3d      	ldr	r3, [pc, #244]	; (8000714 <main+0x208>)
 800061e:	2202      	movs	r2, #2
 8000620:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 8000622:	4b3b      	ldr	r3, [pc, #236]	; (8000710 <main+0x204>)
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 8000628:	f000 fbe8 	bl	8000dfc <ssd1306_UpdateScreen>
 800062c:	e00b      	b.n	8000646 <main+0x13a>
				}else if (indexMenu==2){
 800062e:	4b38      	ldr	r3, [pc, #224]	; (8000710 <main+0x204>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b02      	cmp	r3, #2
 8000634:	d107      	bne.n	8000646 <main+0x13a>
					screen=3;
 8000636:	4b37      	ldr	r3, [pc, #220]	; (8000714 <main+0x208>)
 8000638:	2203      	movs	r2, #3
 800063a:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 800063c:	4b34      	ldr	r3, [pc, #208]	; (8000710 <main+0x204>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 8000642:	f000 fbdb 	bl	8000dfc <ssd1306_UpdateScreen>
				}
			}
			// Dashboard
				if(screen==1){
 8000646:	4b33      	ldr	r3, [pc, #204]	; (8000714 <main+0x208>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d118      	bne.n	8000680 <main+0x174>
					if (indexMenu==0){
 800064e:	4b30      	ldr	r3, [pc, #192]	; (8000710 <main+0x204>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d108      	bne.n	8000668 <main+0x15c>
						//option RF
						screen=4;
 8000656:	4b2f      	ldr	r3, [pc, #188]	; (8000714 <main+0x208>)
 8000658:	2204      	movs	r2, #4
 800065a:	601a      	str	r2, [r3, #0]
						indexMenu=0;
 800065c:	4b2c      	ldr	r3, [pc, #176]	; (8000710 <main+0x204>)
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
						ssd1306_UpdateScreen();
 8000662:	f000 fbcb 	bl	8000dfc <ssd1306_UpdateScreen>
 8000666:	e00b      	b.n	8000680 <main+0x174>
					}else if (indexMenu==3){
 8000668:	4b29      	ldr	r3, [pc, #164]	; (8000710 <main+0x204>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b03      	cmp	r3, #3
 800066e:	d107      	bne.n	8000680 <main+0x174>
						//option Atras back
						screen=0;
 8000670:	4b28      	ldr	r3, [pc, #160]	; (8000714 <main+0x208>)
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
						indexMenu=0;
 8000676:	4b26      	ldr	r3, [pc, #152]	; (8000710 <main+0x204>)
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
						ssd1306_UpdateScreen();
 800067c:	f000 fbbe 	bl	8000dfc <ssd1306_UpdateScreen>
					}
				}
			// Energy
				if(screen==2){
 8000680:	4b24      	ldr	r3, [pc, #144]	; (8000714 <main+0x208>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b02      	cmp	r3, #2
 8000686:	d10f      	bne.n	80006a8 <main+0x19c>
					if(indexMenu==0){
 8000688:	4b21      	ldr	r3, [pc, #132]	; (8000710 <main+0x204>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d00b      	beq.n	80006a8 <main+0x19c>
						//option power no hace nada
						//screen=1;
					}else if (indexMenu==2){
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <main+0x204>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b02      	cmp	r3, #2
 8000696:	d107      	bne.n	80006a8 <main+0x19c>
						//option Atras back
						screen=0;
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <main+0x208>)
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
						indexMenu=0;
 800069e:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <main+0x204>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
						ssd1306_UpdateScreen();
 80006a4:	f000 fbaa 	bl	8000dfc <ssd1306_UpdateScreen>
					}
				}
			// Settings
			if(screen==3){
 80006a8:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <main+0x208>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b03      	cmp	r3, #3
 80006ae:	d10f      	bne.n	80006d0 <main+0x1c4>
				if(indexMenu==0){
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <main+0x204>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d00b      	beq.n	80006d0 <main+0x1c4>
					//option Version no hace nada
					//screen=1;
				}else if (indexMenu==2){
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <main+0x204>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b02      	cmp	r3, #2
 80006be:	d107      	bne.n	80006d0 <main+0x1c4>
					//option Atras back
					screen=0;
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <main+0x208>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <main+0x204>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 80006cc:	f000 fb96 	bl	8000dfc <ssd1306_UpdateScreen>
				}
			}
      // RF Statistics
      if(screen==4){
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <main+0x208>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b04      	cmp	r3, #4
 80006d6:	d10f      	bne.n	80006f8 <main+0x1ec>
        if(indexMenu==0){
 80006d8:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <main+0x204>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d00b      	beq.n	80006f8 <main+0x1ec>
					//screen=1;
				}
        else if (indexMenu==4){
 80006e0:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <main+0x204>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b04      	cmp	r3, #4
 80006e6:	d107      	bne.n	80006f8 <main+0x1ec>
					//option Atras back
					screen=1;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <main+0x208>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <main+0x204>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 80006f4:	f000 fb82 	bl	8000dfc <ssd1306_UpdateScreen>
      }
	      }



	  HAL_ADC_Stop(&hadc3);
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <main+0x1fc>)
 80006fa:	f001 febf 	bl	800247c <HAL_ADC_Stop>
	  HAL_Delay(50);
 80006fe:	2032      	movs	r0, #50	; 0x32
 8000700:	f001 fd86 	bl	8002210 <HAL_Delay>
	  HAL_ADC_Start(&hadc3);
 8000704:	e71c      	b.n	8000540 <main+0x34>
 8000706:	bf00      	nop
 8000708:	20000200 	.word	0x20000200
 800070c:	20000248 	.word	0x20000248
 8000710:	200008e0 	.word	0x200008e0
 8000714:	200008e4 	.word	0x200008e4

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b094      	sub	sp, #80	; 0x50
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0320 	add.w	r3, r7, #32
 8000722:	2230      	movs	r2, #48	; 0x30
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f005 feb4 	bl	8006494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800073c:	f003 fe76 	bl	800442c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <SystemClock_Config+0xc8>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	4a26      	ldr	r2, [pc, #152]	; (80007e0 <SystemClock_Config+0xc8>)
 8000746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074a:	6413      	str	r3, [r2, #64]	; 0x40
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <SystemClock_Config+0xc8>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000758:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <SystemClock_Config+0xcc>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000760:	4a20      	ldr	r2, [pc, #128]	; (80007e4 <SystemClock_Config+0xcc>)
 8000762:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <SystemClock_Config+0xcc>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000774:	2301      	movs	r3, #1
 8000776:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000778:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077e:	2302      	movs	r3, #2
 8000780:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000782:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000786:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000788:	2304      	movs	r3, #4
 800078a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800078c:	2348      	movs	r3, #72	; 0x48
 800078e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000790:	2302      	movs	r3, #2
 8000792:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000794:	2303      	movs	r3, #3
 8000796:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000798:	f107 0320 	add.w	r3, r7, #32
 800079c:	4618      	mov	r0, r3
 800079e:	f003 fe55 	bl	800444c <HAL_RCC_OscConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007a8:	f000 fa5c 	bl	8000c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ac:	230f      	movs	r3, #15
 80007ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b0:	2302      	movs	r3, #2
 80007b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	2102      	movs	r1, #2
 80007c8:	4618      	mov	r0, r3
 80007ca:	f004 f8e3 	bl	8004994 <HAL_RCC_ClockConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007d4:	f000 fa46 	bl	8000c64 <Error_Handler>
  }
}
 80007d8:	bf00      	nop
 80007da:	3750      	adds	r7, #80	; 0x50
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ee:	463b      	mov	r3, r7
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007fa:	4b21      	ldr	r3, [pc, #132]	; (8000880 <MX_ADC1_Init+0x98>)
 80007fc:	4a21      	ldr	r2, [pc, #132]	; (8000884 <MX_ADC1_Init+0x9c>)
 80007fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000800:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <MX_ADC1_Init+0x98>)
 8000802:	2200      	movs	r2, #0
 8000804:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000806:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <MX_ADC1_Init+0x98>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800080c:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <MX_ADC1_Init+0x98>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000812:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <MX_ADC1_Init+0x98>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000818:	4b19      	ldr	r3, [pc, #100]	; (8000880 <MX_ADC1_Init+0x98>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000820:	4b17      	ldr	r3, [pc, #92]	; (8000880 <MX_ADC1_Init+0x98>)
 8000822:	2200      	movs	r2, #0
 8000824:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <MX_ADC1_Init+0x98>)
 8000828:	4a17      	ldr	r2, [pc, #92]	; (8000888 <MX_ADC1_Init+0xa0>)
 800082a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_ADC1_Init+0x98>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_ADC1_Init+0x98>)
 8000834:	2201      	movs	r2, #1
 8000836:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_ADC1_Init+0x98>)
 800083a:	2200      	movs	r2, #0
 800083c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_ADC1_Init+0x98>)
 8000842:	2201      	movs	r2, #1
 8000844:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000846:	480e      	ldr	r0, [pc, #56]	; (8000880 <MX_ADC1_Init+0x98>)
 8000848:	f001 fd06 	bl	8002258 <HAL_ADC_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000852:	f000 fa07 	bl	8000c64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000856:	2304      	movs	r3, #4
 8000858:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085a:	2301      	movs	r3, #1
 800085c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000862:	463b      	mov	r3, r7
 8000864:	4619      	mov	r1, r3
 8000866:	4806      	ldr	r0, [pc, #24]	; (8000880 <MX_ADC1_Init+0x98>)
 8000868:	f001 fed4 	bl	8002614 <HAL_ADC_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000872:	f000 f9f7 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200001b8 	.word	0x200001b8
 8000884:	40012000 	.word	0x40012000
 8000888:	0f000001 	.word	0x0f000001

0800088c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000892:	463b      	mov	r3, r7
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800089e:	4b21      	ldr	r3, [pc, #132]	; (8000924 <MX_ADC3_Init+0x98>)
 80008a0:	4a21      	ldr	r2, [pc, #132]	; (8000928 <MX_ADC3_Init+0x9c>)
 80008a2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <MX_ADC3_Init+0x98>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008aa:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <MX_ADC3_Init+0x98>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008b0:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <MX_ADC3_Init+0x98>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008b6:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <MX_ADC3_Init+0x98>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008bc:	4b19      	ldr	r3, [pc, #100]	; (8000924 <MX_ADC3_Init+0x98>)
 80008be:	2200      	movs	r2, #0
 80008c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_ADC3_Init+0x98>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <MX_ADC3_Init+0x98>)
 80008cc:	4a17      	ldr	r2, [pc, #92]	; (800092c <MX_ADC3_Init+0xa0>)
 80008ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_ADC3_Init+0x98>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <MX_ADC3_Init+0x98>)
 80008d8:	2201      	movs	r2, #1
 80008da:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_ADC3_Init+0x98>)
 80008de:	2200      	movs	r2, #0
 80008e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_ADC3_Init+0x98>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008ea:	480e      	ldr	r0, [pc, #56]	; (8000924 <MX_ADC3_Init+0x98>)
 80008ec:	f001 fcb4 	bl	8002258 <HAL_ADC_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80008f6:	f000 f9b5 	bl	8000c64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80008fa:	230f      	movs	r3, #15
 80008fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008fe:	2301      	movs	r3, #1
 8000900:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000906:	463b      	mov	r3, r7
 8000908:	4619      	mov	r1, r3
 800090a:	4806      	ldr	r0, [pc, #24]	; (8000924 <MX_ADC3_Init+0x98>)
 800090c:	f001 fe82 	bl	8002614 <HAL_ADC_ConfigChannel>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000916:	f000 f9a5 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000200 	.word	0x20000200
 8000928:	40012200 	.word	0x40012200
 800092c:	0f000001 	.word	0x0f000001

08000930 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000934:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <MX_ETH_Init+0x84>)
 8000936:	4a20      	ldr	r2, [pc, #128]	; (80009b8 <MX_ETH_Init+0x88>)
 8000938:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800093a:	4b20      	ldr	r3, [pc, #128]	; (80009bc <MX_ETH_Init+0x8c>)
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <MX_ETH_Init+0x8c>)
 8000942:	2280      	movs	r2, #128	; 0x80
 8000944:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000946:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <MX_ETH_Init+0x8c>)
 8000948:	22e1      	movs	r2, #225	; 0xe1
 800094a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <MX_ETH_Init+0x8c>)
 800094e:	2200      	movs	r2, #0
 8000950:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_ETH_Init+0x8c>)
 8000954:	2200      	movs	r2, #0
 8000956:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <MX_ETH_Init+0x8c>)
 800095a:	2200      	movs	r2, #0
 800095c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_ETH_Init+0x84>)
 8000960:	4a16      	ldr	r2, [pc, #88]	; (80009bc <MX_ETH_Init+0x8c>)
 8000962:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_ETH_Init+0x84>)
 8000966:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800096a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_ETH_Init+0x84>)
 800096e:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <MX_ETH_Init+0x90>)
 8000970:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_ETH_Init+0x84>)
 8000974:	4a13      	ldr	r2, [pc, #76]	; (80009c4 <MX_ETH_Init+0x94>)
 8000976:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_ETH_Init+0x84>)
 800097a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800097e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <MX_ETH_Init+0x84>)
 8000982:	f002 f9a9 	bl	8002cd8 <HAL_ETH_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800098c:	f000 f96a 	bl	8000c64 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000990:	2238      	movs	r2, #56	; 0x38
 8000992:	2100      	movs	r1, #0
 8000994:	480c      	ldr	r0, [pc, #48]	; (80009c8 <MX_ETH_Init+0x98>)
 8000996:	f005 fd7d 	bl	8006494 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_ETH_Init+0x98>)
 800099c:	2221      	movs	r2, #33	; 0x21
 800099e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_ETH_Init+0x98>)
 80009a2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80009a6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009a8:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <MX_ETH_Init+0x98>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2000024c 	.word	0x2000024c
 80009b8:	40028000 	.word	0x40028000
 80009bc:	200008e8 	.word	0x200008e8
 80009c0:	200000c4 	.word	0x200000c4
 80009c4:	20000024 	.word	0x20000024
 80009c8:	20000180 	.word	0x20000180

080009cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <MX_I2C2_Init+0x74>)
 80009d2:	4a1c      	ldr	r2, [pc, #112]	; (8000a44 <MX_I2C2_Init+0x78>)
 80009d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301739;
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <MX_I2C2_Init+0x74>)
 80009d8:	4a1b      	ldr	r2, [pc, #108]	; (8000a48 <MX_I2C2_Init+0x7c>)
 80009da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009dc:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <MX_I2C2_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e2:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <MX_I2C2_Init+0x74>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009e8:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <MX_I2C2_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009ee:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <MX_I2C2_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <MX_I2C2_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_I2C2_Init+0x74>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_I2C2_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a06:	480e      	ldr	r0, [pc, #56]	; (8000a40 <MX_I2C2_Init+0x74>)
 8000a08:	f002 ff46 	bl	8003898 <HAL_I2C_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a12:	f000 f927 	bl	8000c64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a16:	2100      	movs	r1, #0
 8000a18:	4809      	ldr	r0, [pc, #36]	; (8000a40 <MX_I2C2_Init+0x74>)
 8000a1a:	f003 fb27 	bl	800406c <HAL_I2CEx_ConfigAnalogFilter>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a24:	f000 f91e 	bl	8000c64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_I2C2_Init+0x74>)
 8000a2c:	f003 fb69 	bl	8004102 <HAL_I2CEx_ConfigDigitalFilter>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a36:	f000 f915 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200002fc 	.word	0x200002fc
 8000a44:	40005800 	.word	0x40005800
 8000a48:	00301739 	.word	0x00301739

08000a4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a52:	4a15      	ldr	r2, [pc, #84]	; (8000aa8 <MX_USART3_UART_Init+0x5c>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a90:	f004 fd96 	bl	80055c0 <HAL_UART_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a9a:	f000 f8e3 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000350 	.word	0x20000350
 8000aa8:	40004800 	.word	0x40004800

08000aac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ab6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aba:	2206      	movs	r2, #6
 8000abc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000acc:	2202      	movs	r2, #2
 8000ace:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af0:	f003 fb53 	bl	800419a <HAL_PCD_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000afa:	f000 f8b3 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200003d8 	.word	0x200003d8

08000b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08c      	sub	sp, #48	; 0x30
 8000b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	4b4d      	ldr	r3, [pc, #308]	; (8000c54 <MX_GPIO_Init+0x14c>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a4c      	ldr	r2, [pc, #304]	; (8000c54 <MX_GPIO_Init+0x14c>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b4a      	ldr	r3, [pc, #296]	; (8000c54 <MX_GPIO_Init+0x14c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0304 	and.w	r3, r3, #4
 8000b32:	61bb      	str	r3, [r7, #24]
 8000b34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b36:	4b47      	ldr	r3, [pc, #284]	; (8000c54 <MX_GPIO_Init+0x14c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a46      	ldr	r2, [pc, #280]	; (8000c54 <MX_GPIO_Init+0x14c>)
 8000b3c:	f043 0320 	orr.w	r3, r3, #32
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b44      	ldr	r3, [pc, #272]	; (8000c54 <MX_GPIO_Init+0x14c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0320 	and.w	r3, r3, #32
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4e:	4b41      	ldr	r3, [pc, #260]	; (8000c54 <MX_GPIO_Init+0x14c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a40      	ldr	r2, [pc, #256]	; (8000c54 <MX_GPIO_Init+0x14c>)
 8000b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b3e      	ldr	r3, [pc, #248]	; (8000c54 <MX_GPIO_Init+0x14c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	4b3b      	ldr	r3, [pc, #236]	; (8000c54 <MX_GPIO_Init+0x14c>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a3a      	ldr	r2, [pc, #232]	; (8000c54 <MX_GPIO_Init+0x14c>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b38      	ldr	r3, [pc, #224]	; (8000c54 <MX_GPIO_Init+0x14c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7e:	4b35      	ldr	r3, [pc, #212]	; (8000c54 <MX_GPIO_Init+0x14c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a34      	ldr	r2, [pc, #208]	; (8000c54 <MX_GPIO_Init+0x14c>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b32      	ldr	r3, [pc, #200]	; (8000c54 <MX_GPIO_Init+0x14c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b96:	4b2f      	ldr	r3, [pc, #188]	; (8000c54 <MX_GPIO_Init+0x14c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a2e      	ldr	r2, [pc, #184]	; (8000c54 <MX_GPIO_Init+0x14c>)
 8000b9c:	f043 0308 	orr.w	r3, r3, #8
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b2c      	ldr	r3, [pc, #176]	; (8000c54 <MX_GPIO_Init+0x14c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0308 	and.w	r3, r3, #8
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bae:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <MX_GPIO_Init+0x14c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a28      	ldr	r2, [pc, #160]	; (8000c54 <MX_GPIO_Init+0x14c>)
 8000bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b26      	ldr	r3, [pc, #152]	; (8000c54 <MX_GPIO_Init+0x14c>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000bcc:	4822      	ldr	r0, [pc, #136]	; (8000c58 <MX_GPIO_Init+0x150>)
 8000bce:	f002 fe49 	bl	8003864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2140      	movs	r1, #64	; 0x40
 8000bd6:	4821      	ldr	r0, [pc, #132]	; (8000c5c <MX_GPIO_Init+0x154>)
 8000bd8:	f002 fe44 	bl	8003864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	481b      	ldr	r0, [pc, #108]	; (8000c60 <MX_GPIO_Init+0x158>)
 8000bf4:	f002 fc8a 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000bf8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4811      	ldr	r0, [pc, #68]	; (8000c58 <MX_GPIO_Init+0x150>)
 8000c12:	f002 fc7b 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c16:	2340      	movs	r3, #64	; 0x40
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480b      	ldr	r0, [pc, #44]	; (8000c5c <MX_GPIO_Init+0x154>)
 8000c2e:	f002 fc6d 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c32:	2380      	movs	r3, #128	; 0x80
 8000c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_GPIO_Init+0x154>)
 8000c46:	f002 fc61 	bl	800350c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3730      	adds	r7, #48	; 0x30
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020400 	.word	0x40020400
 8000c5c:	40021800 	.word	0x40021800
 8000c60:	40020800 	.word	0x40020800

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
}
 8000c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <Error_Handler+0x8>

08000c6e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af04      	add	r7, sp, #16
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8a:	9302      	str	r3, [sp, #8]
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	9301      	str	r3, [sp, #4]
 8000c90:	1dfb      	adds	r3, r7, #7
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	2301      	movs	r3, #1
 8000c96:	2200      	movs	r2, #0
 8000c98:	2178      	movs	r1, #120	; 0x78
 8000c9a:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <ssd1306_WriteCommand+0x2c>)
 8000c9c:	f002 fe8c 	bl	80039b8 <HAL_I2C_Mem_Write>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200002fc 	.word	0x200002fc

08000cac <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af04      	add	r7, sp, #16
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	f04f 32ff 	mov.w	r2, #4294967295
 8000cbe:	9202      	str	r2, [sp, #8]
 8000cc0:	9301      	str	r3, [sp, #4]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	2240      	movs	r2, #64	; 0x40
 8000cca:	2178      	movs	r1, #120	; 0x78
 8000ccc:	4803      	ldr	r0, [pc, #12]	; (8000cdc <ssd1306_WriteData+0x30>)
 8000cce:	f002 fe73 	bl	80039b8 <HAL_I2C_Mem_Write>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200002fc 	.word	0x200002fc

08000ce0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000ce4:	f7ff ffc3 	bl	8000c6e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000ce8:	2064      	movs	r0, #100	; 0x64
 8000cea:	f001 fa91 	bl	8002210 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f000 fa34 	bl	800115c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000cf4:	2020      	movs	r0, #32
 8000cf6:	f7ff ffc1 	bl	8000c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff ffbe 	bl	8000c7c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000d00:	20b0      	movs	r0, #176	; 0xb0
 8000d02:	f7ff ffbb 	bl	8000c7c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000d06:	20c8      	movs	r0, #200	; 0xc8
 8000d08:	f7ff ffb8 	bl	8000c7c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f7ff ffb5 	bl	8000c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000d12:	2010      	movs	r0, #16
 8000d14:	f7ff ffb2 	bl	8000c7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000d18:	2040      	movs	r0, #64	; 0x40
 8000d1a:	f7ff ffaf 	bl	8000c7c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000d1e:	20ff      	movs	r0, #255	; 0xff
 8000d20:	f000 fa09 	bl	8001136 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000d24:	20a1      	movs	r0, #161	; 0xa1
 8000d26:	f7ff ffa9 	bl	8000c7c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000d2a:	20a6      	movs	r0, #166	; 0xa6
 8000d2c:	f7ff ffa6 	bl	8000c7c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000d30:	20a8      	movs	r0, #168	; 0xa8
 8000d32:	f7ff ffa3 	bl	8000c7c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000d36:	203f      	movs	r0, #63	; 0x3f
 8000d38:	f7ff ffa0 	bl	8000c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000d3c:	20a4      	movs	r0, #164	; 0xa4
 8000d3e:	f7ff ff9d 	bl	8000c7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000d42:	20d3      	movs	r0, #211	; 0xd3
 8000d44:	f7ff ff9a 	bl	8000c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f7ff ff97 	bl	8000c7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000d4e:	20d5      	movs	r0, #213	; 0xd5
 8000d50:	f7ff ff94 	bl	8000c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000d54:	20f0      	movs	r0, #240	; 0xf0
 8000d56:	f7ff ff91 	bl	8000c7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000d5a:	20d9      	movs	r0, #217	; 0xd9
 8000d5c:	f7ff ff8e 	bl	8000c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000d60:	2022      	movs	r0, #34	; 0x22
 8000d62:	f7ff ff8b 	bl	8000c7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000d66:	20da      	movs	r0, #218	; 0xda
 8000d68:	f7ff ff88 	bl	8000c7c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000d6c:	2012      	movs	r0, #18
 8000d6e:	f7ff ff85 	bl	8000c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000d72:	20db      	movs	r0, #219	; 0xdb
 8000d74:	f7ff ff82 	bl	8000c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000d78:	2020      	movs	r0, #32
 8000d7a:	f7ff ff7f 	bl	8000c7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000d7e:	208d      	movs	r0, #141	; 0x8d
 8000d80:	f7ff ff7c 	bl	8000c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000d84:	2014      	movs	r0, #20
 8000d86:	f7ff ff79 	bl	8000c7c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f000 f9e6 	bl	800115c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000d90:	2000      	movs	r0, #0
 8000d92:	f000 f80f 	bl	8000db4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000d96:	f000 f831 	bl	8000dfc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000d9a:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <ssd1306_Init+0xd0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <ssd1306_Init+0xd0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000da6:	4b02      	ldr	r3, [pc, #8]	; (8000db0 <ssd1306_Init+0xd0>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	711a      	strb	r2, [r3, #4]
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000cf0 	.word	0x20000cf0

08000db4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	e00d      	b.n	8000de0 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d101      	bne.n	8000dce <ssd1306_Fill+0x1a>
 8000dca:	2100      	movs	r1, #0
 8000dcc:	e000      	b.n	8000dd0 <ssd1306_Fill+0x1c>
 8000dce:	21ff      	movs	r1, #255	; 0xff
 8000dd0:	4a09      	ldr	r2, [pc, #36]	; (8000df8 <ssd1306_Fill+0x44>)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	460a      	mov	r2, r1
 8000dd8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000de6:	d3ed      	bcc.n	8000dc4 <ssd1306_Fill+0x10>
    }
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	200008f0 	.word	0x200008f0

08000dfc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000e02:	2300      	movs	r3, #0
 8000e04:	71fb      	strb	r3, [r7, #7]
 8000e06:	e016      	b.n	8000e36 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	3b50      	subs	r3, #80	; 0x50
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff34 	bl	8000c7c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000e14:	2002      	movs	r0, #2
 8000e16:	f7ff ff31 	bl	8000c7c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000e1a:	2010      	movs	r0, #16
 8000e1c:	f7ff ff2e 	bl	8000c7c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	01db      	lsls	r3, r3, #7
 8000e24:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <ssd1306_UpdateScreen+0x4c>)
 8000e26:	4413      	add	r3, r2
 8000e28:	2180      	movs	r1, #128	; 0x80
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ff3e 	bl	8000cac <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	3301      	adds	r3, #1
 8000e34:	71fb      	strb	r3, [r7, #7]
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	2b07      	cmp	r3, #7
 8000e3a:	d9e5      	bls.n	8000e08 <ssd1306_UpdateScreen+0xc>
    }
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200008f0 	.word	0x200008f0

08000e4c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
 8000e56:	460b      	mov	r3, r1
 8000e58:	71bb      	strb	r3, [r7, #6]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db3d      	blt.n	8000ee2 <ssd1306_DrawPixel+0x96>
 8000e66:	79bb      	ldrb	r3, [r7, #6]
 8000e68:	2b3f      	cmp	r3, #63	; 0x3f
 8000e6a:	d83a      	bhi.n	8000ee2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000e6c:	797b      	ldrb	r3, [r7, #5]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d11a      	bne.n	8000ea8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000e72:	79fa      	ldrb	r2, [r7, #7]
 8000e74:	79bb      	ldrb	r3, [r7, #6]
 8000e76:	08db      	lsrs	r3, r3, #3
 8000e78:	b2d8      	uxtb	r0, r3
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	01db      	lsls	r3, r3, #7
 8000e7e:	4413      	add	r3, r2
 8000e80:	4a1b      	ldr	r2, [pc, #108]	; (8000ef0 <ssd1306_DrawPixel+0xa4>)
 8000e82:	5cd3      	ldrb	r3, [r2, r3]
 8000e84:	b25a      	sxtb	r2, r3
 8000e86:	79bb      	ldrb	r3, [r7, #6]
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	b25b      	sxtb	r3, r3
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b259      	sxtb	r1, r3
 8000e98:	79fa      	ldrb	r2, [r7, #7]
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	01db      	lsls	r3, r3, #7
 8000e9e:	4413      	add	r3, r2
 8000ea0:	b2c9      	uxtb	r1, r1
 8000ea2:	4a13      	ldr	r2, [pc, #76]	; (8000ef0 <ssd1306_DrawPixel+0xa4>)
 8000ea4:	54d1      	strb	r1, [r2, r3]
 8000ea6:	e01d      	b.n	8000ee4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000ea8:	79fa      	ldrb	r2, [r7, #7]
 8000eaa:	79bb      	ldrb	r3, [r7, #6]
 8000eac:	08db      	lsrs	r3, r3, #3
 8000eae:	b2d8      	uxtb	r0, r3
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	01db      	lsls	r3, r3, #7
 8000eb4:	4413      	add	r3, r2
 8000eb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <ssd1306_DrawPixel+0xa4>)
 8000eb8:	5cd3      	ldrb	r3, [r2, r3]
 8000eba:	b25a      	sxtb	r2, r3
 8000ebc:	79bb      	ldrb	r3, [r7, #6]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec8:	b25b      	sxtb	r3, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	b25b      	sxtb	r3, r3
 8000ece:	4013      	ands	r3, r2
 8000ed0:	b259      	sxtb	r1, r3
 8000ed2:	79fa      	ldrb	r2, [r7, #7]
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	01db      	lsls	r3, r3, #7
 8000ed8:	4413      	add	r3, r2
 8000eda:	b2c9      	uxtb	r1, r1
 8000edc:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <ssd1306_DrawPixel+0xa4>)
 8000ede:	54d1      	strb	r1, [r2, r3]
 8000ee0:	e000      	b.n	8000ee4 <ssd1306_DrawPixel+0x98>
        return;
 8000ee2:	bf00      	nop
    }
}
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	200008f0 	.word	0x200008f0

08000ef4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b089      	sub	sp, #36	; 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4604      	mov	r4, r0
 8000efc:	1d38      	adds	r0, r7, #4
 8000efe:	e880 0006 	stmia.w	r0, {r1, r2}
 8000f02:	461a      	mov	r2, r3
 8000f04:	4623      	mov	r3, r4
 8000f06:	73fb      	strb	r3, [r7, #15]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	2b1f      	cmp	r3, #31
 8000f10:	d902      	bls.n	8000f18 <ssd1306_WriteChar+0x24>
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	2b7e      	cmp	r3, #126	; 0x7e
 8000f16:	d901      	bls.n	8000f1c <ssd1306_WriteChar+0x28>
        return 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	e06d      	b.n	8000ff8 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000f1c:	4b38      	ldr	r3, [pc, #224]	; (8001000 <ssd1306_WriteChar+0x10c>)
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	793b      	ldrb	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	2b80      	cmp	r3, #128	; 0x80
 8000f28:	dc06      	bgt.n	8000f38 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000f2a:	4b35      	ldr	r3, [pc, #212]	; (8001000 <ssd1306_WriteChar+0x10c>)
 8000f2c:	885b      	ldrh	r3, [r3, #2]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	797b      	ldrb	r3, [r7, #5]
 8000f32:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000f34:	2b40      	cmp	r3, #64	; 0x40
 8000f36:	dd01      	ble.n	8000f3c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	e05d      	b.n	8000ff8 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
 8000f40:	e04c      	b.n	8000fdc <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	3b20      	subs	r3, #32
 8000f48:	7979      	ldrb	r1, [r7, #5]
 8000f4a:	fb01 f303 	mul.w	r3, r1, r3
 8000f4e:	4619      	mov	r1, r3
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	440b      	add	r3, r1
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4413      	add	r3, r2
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61bb      	str	r3, [r7, #24]
 8000f60:	e034      	b.n	8000fcc <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d012      	beq.n	8000f98 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000f72:	4b23      	ldr	r3, [pc, #140]	; (8001000 <ssd1306_WriteChar+0x10c>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	b2d8      	uxtb	r0, r3
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <ssd1306_WriteChar+0x10c>)
 8000f82:	885b      	ldrh	r3, [r3, #2]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	4413      	add	r3, r2
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	7bba      	ldrb	r2, [r7, #14]
 8000f90:	4619      	mov	r1, r3
 8000f92:	f7ff ff5b 	bl	8000e4c <ssd1306_DrawPixel>
 8000f96:	e016      	b.n	8000fc6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <ssd1306_WriteChar+0x10c>)
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	4413      	add	r3, r2
 8000fa4:	b2d8      	uxtb	r0, r3
 8000fa6:	4b16      	ldr	r3, [pc, #88]	; (8001000 <ssd1306_WriteChar+0x10c>)
 8000fa8:	885b      	ldrh	r3, [r3, #2]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	4413      	add	r3, r2
 8000fb2:	b2d9      	uxtb	r1, r3
 8000fb4:	7bbb      	ldrb	r3, [r7, #14]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	bf0c      	ite	eq
 8000fba:	2301      	moveq	r3, #1
 8000fbc:	2300      	movne	r3, #0
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	f7ff ff43 	bl	8000e4c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	61bb      	str	r3, [r7, #24]
 8000fcc:	793b      	ldrb	r3, [r7, #4]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d3c5      	bcc.n	8000f62 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	61fb      	str	r3, [r7, #28]
 8000fdc:	797b      	ldrb	r3, [r7, #5]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d3ad      	bcc.n	8000f42 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <ssd1306_WriteChar+0x10c>)
 8000fe8:	881a      	ldrh	r2, [r3, #0]
 8000fea:	793b      	ldrb	r3, [r7, #4]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	4413      	add	r3, r2
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	4b03      	ldr	r3, [pc, #12]	; (8001000 <ssd1306_WriteChar+0x10c>)
 8000ff4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3724      	adds	r7, #36	; 0x24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd90      	pop	{r4, r7, pc}
 8001000:	20000cf0 	.word	0x20000cf0

08001004 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	1d38      	adds	r0, r7, #4
 800100e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001012:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001014:	e012      	b.n	800103c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	7818      	ldrb	r0, [r3, #0]
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	1d3a      	adds	r2, r7, #4
 800101e:	ca06      	ldmia	r2, {r1, r2}
 8001020:	f7ff ff68 	bl	8000ef4 <ssd1306_WriteChar>
 8001024:	4603      	mov	r3, r0
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	429a      	cmp	r2, r3
 800102e:	d002      	beq.n	8001036 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	e008      	b.n	8001048 <ssd1306_WriteString+0x44>
        }
        str++;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	3301      	adds	r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1e8      	bne.n	8001016 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	781b      	ldrb	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	460a      	mov	r2, r1
 800105a:	71fb      	strb	r3, [r7, #7]
 800105c:	4613      	mov	r3, r2
 800105e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	b29a      	uxth	r2, r3
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <ssd1306_SetCursor+0x2c>)
 8001066:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001068:	79bb      	ldrb	r3, [r7, #6]
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <ssd1306_SetCursor+0x2c>)
 800106e:	805a      	strh	r2, [r3, #2]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	20000cf0 	.word	0x20000cf0

08001080 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	603a      	str	r2, [r7, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
 800108e:	460b      	mov	r3, r1
 8001090:	71bb      	strb	r3, [r7, #6]
 8001092:	4613      	mov	r3, r2
 8001094:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001096:	797b      	ldrb	r3, [r7, #5]
 8001098:	3307      	adds	r3, #7
 800109a:	2b00      	cmp	r3, #0
 800109c:	da00      	bge.n	80010a0 <ssd1306_DrawBitmap+0x20>
 800109e:	3307      	adds	r3, #7
 80010a0:	10db      	asrs	r3, r3, #3
 80010a2:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	db3e      	blt.n	800112e <ssd1306_DrawBitmap+0xae>
 80010b0:	79bb      	ldrb	r3, [r7, #6]
 80010b2:	2b3f      	cmp	r3, #63	; 0x3f
 80010b4:	d83b      	bhi.n	800112e <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80010b6:	2300      	movs	r3, #0
 80010b8:	73bb      	strb	r3, [r7, #14]
 80010ba:	e033      	b.n	8001124 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80010bc:	2300      	movs	r3, #0
 80010be:	737b      	strb	r3, [r7, #13]
 80010c0:	e026      	b.n	8001110 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80010c2:	7b7b      	ldrb	r3, [r7, #13]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	73fb      	strb	r3, [r7, #15]
 80010d2:	e00d      	b.n	80010f0 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80010d4:	7bbb      	ldrb	r3, [r7, #14]
 80010d6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80010da:	fb02 f303 	mul.w	r3, r2, r3
 80010de:	7b7a      	ldrb	r2, [r7, #13]
 80010e0:	08d2      	lsrs	r2, r2, #3
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	4413      	add	r3, r2
 80010e6:	461a      	mov	r2, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80010f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	da08      	bge.n	800110a <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80010f8:	79fa      	ldrb	r2, [r7, #7]
 80010fa:	7b7b      	ldrb	r3, [r7, #13]
 80010fc:	4413      	add	r3, r2
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	7f3a      	ldrb	r2, [r7, #28]
 8001102:	79b9      	ldrb	r1, [r7, #6]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fea1 	bl	8000e4c <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800110a:	7b7b      	ldrb	r3, [r7, #13]
 800110c:	3301      	adds	r3, #1
 800110e:	737b      	strb	r3, [r7, #13]
 8001110:	7b7a      	ldrb	r2, [r7, #13]
 8001112:	797b      	ldrb	r3, [r7, #5]
 8001114:	429a      	cmp	r2, r3
 8001116:	d3d4      	bcc.n	80010c2 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001118:	7bbb      	ldrb	r3, [r7, #14]
 800111a:	3301      	adds	r3, #1
 800111c:	73bb      	strb	r3, [r7, #14]
 800111e:	79bb      	ldrb	r3, [r7, #6]
 8001120:	3301      	adds	r3, #1
 8001122:	71bb      	strb	r3, [r7, #6]
 8001124:	7bba      	ldrb	r2, [r7, #14]
 8001126:	7e3b      	ldrb	r3, [r7, #24]
 8001128:	429a      	cmp	r2, r3
 800112a:	d3c7      	bcc.n	80010bc <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 800112c:	e000      	b.n	8001130 <ssd1306_DrawBitmap+0xb0>
        return;
 800112e:	bf00      	nop
}
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001140:	2381      	movs	r3, #129	; 0x81
 8001142:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fd98 	bl	8000c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fd94 	bl	8000c7c <ssd1306_WriteCommand>
}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d005      	beq.n	8001178 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800116c:	23af      	movs	r3, #175	; 0xaf
 800116e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <ssd1306_SetDisplayOn+0x38>)
 8001172:	2201      	movs	r2, #1
 8001174:	715a      	strb	r2, [r3, #5]
 8001176:	e004      	b.n	8001182 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001178:	23ae      	movs	r3, #174	; 0xae
 800117a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <ssd1306_SetDisplayOn+0x38>)
 800117e:	2200      	movs	r2, #0
 8001180:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fd79 	bl	8000c7c <ssd1306_WriteCommand>
}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000cf0 	.word	0x20000cf0

08001198 <ssd1306_TestFonts1>:
   
    HAL_Delay(1000);
}


void ssd1306_TestFonts1() {
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
    uint8_t y = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 80011a2:	2000      	movs	r0, #0
 80011a4:	f7ff fe06 	bl	8000db4 <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	4619      	mov	r1, r3
 80011ac:	2002      	movs	r0, #2
 80011ae:	f7ff ff4f 	bl	8001050 <ssd1306_SetCursor>
    ssd1306_WriteString("OHMIO BOX", Font_11x18, White);
 80011b2:	4a1b      	ldr	r2, [pc, #108]	; (8001220 <ssd1306_TestFonts1+0x88>)
 80011b4:	2301      	movs	r3, #1
 80011b6:	ca06      	ldmia	r2, {r1, r2}
 80011b8:	481a      	ldr	r0, [pc, #104]	; (8001224 <ssd1306_TestFonts1+0x8c>)
 80011ba:	f7ff ff23 	bl	8001004 <ssd1306_WriteString>
    y += 26;
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	331a      	adds	r3, #26
 80011c2:	71fb      	strb	r3, [r7, #7]
    #endif



    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	4619      	mov	r1, r3
 80011c8:	2002      	movs	r0, #2
 80011ca:	f7ff ff41 	bl	8001050 <ssd1306_SetCursor>
    ssd1306_WriteString("Web 3.0 for", Font_7x10, White);
 80011ce:	4a16      	ldr	r2, [pc, #88]	; (8001228 <ssd1306_TestFonts1+0x90>)
 80011d0:	2301      	movs	r3, #1
 80011d2:	ca06      	ldmia	r2, {r1, r2}
 80011d4:	4815      	ldr	r0, [pc, #84]	; (800122c <ssd1306_TestFonts1+0x94>)
 80011d6:	f7ff ff15 	bl	8001004 <ssd1306_WriteString>
    y += 10;
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	330a      	adds	r3, #10
 80011de:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	4619      	mov	r1, r3
 80011e4:	2002      	movs	r0, #2
 80011e6:	f7ff ff33 	bl	8001050 <ssd1306_SetCursor>
    ssd1306_WriteString("Broadcast Industry", Font_6x8, White);
 80011ea:	4a11      	ldr	r2, [pc, #68]	; (8001230 <ssd1306_TestFonts1+0x98>)
 80011ec:	2301      	movs	r3, #1
 80011ee:	ca06      	ldmia	r2, {r1, r2}
 80011f0:	4810      	ldr	r0, [pc, #64]	; (8001234 <ssd1306_TestFonts1+0x9c>)
 80011f2:	f7ff ff07 	bl	8001004 <ssd1306_WriteString>
    y += 10;
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	330a      	adds	r3, #10
 80011fa:	71fb      	strb	r3, [r7, #7]
    #endif

#ifdef SSD1306_INCLUDE_FONT_6x8
   ssd1306_SetCursor(2, y);
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	4619      	mov	r1, r3
 8001200:	2002      	movs	r0, #2
 8001202:	f7ff ff25 	bl	8001050 <ssd1306_SetCursor>
   ssd1306_WriteString("Version 1.0", Font_6x8, White);
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <ssd1306_TestFonts1+0x98>)
 8001208:	2301      	movs	r3, #1
 800120a:	ca06      	ldmia	r2, {r1, r2}
 800120c:	480a      	ldr	r0, [pc, #40]	; (8001238 <ssd1306_TestFonts1+0xa0>)
 800120e:	f7ff fef9 	bl	8001004 <ssd1306_WriteString>
   #endif

    ssd1306_UpdateScreen();
 8001212:	f7ff fdf3 	bl	8000dfc <ssd1306_UpdateScreen>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000010 	.word	0x20000010
 8001224:	080064bc 	.word	0x080064bc
 8001228:	20000008 	.word	0x20000008
 800122c:	080064c8 	.word	0x080064c8
 8001230:	20000000 	.word	0x20000000
 8001234:	080064d4 	.word	0x080064d4
 8001238:	080064e8 	.word	0x080064e8

0800123c <ssd1306_PrintPrincipalMenu>:
void ssd1306_PrintSettingsToolbar(){
	  ssd1306_DrawBitmap(80,0,garfield_128x64,128,64,Black);
	    ssd1306_UpdateScreen();
}

void ssd1306_PrintPrincipalMenu(int value, int indexMenu, int screen){
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af02      	add	r7, sp, #8
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	f107 0318 	add.w	r3, r7, #24
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 800125a:	2000      	movs	r0, #0
 800125c:	f7ff fdaa 	bl	8000db4 <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(2, y);
 8001260:	7ffb      	ldrb	r3, [r7, #31]
 8001262:	4619      	mov	r1, r3
 8001264:	2002      	movs	r0, #2
 8001266:	f7ff fef3 	bl	8001050 <ssd1306_SetCursor>
	    ssd1306_WriteString("MENU", Font_11x18, White);
 800126a:	4a51      	ldr	r2, [pc, #324]	; (80013b0 <ssd1306_PrintPrincipalMenu+0x174>)
 800126c:	2301      	movs	r3, #1
 800126e:	ca06      	ldmia	r2, {r1, r2}
 8001270:	4850      	ldr	r0, [pc, #320]	; (80013b4 <ssd1306_PrintPrincipalMenu+0x178>)
 8001272:	f7ff fec7 	bl	8001004 <ssd1306_WriteString>
	    //INTERNET
		  ssd1306_DrawBitmap(70,y,icon_rf,15,15,White);
 8001276:	7ff9      	ldrb	r1, [r7, #31]
 8001278:	2301      	movs	r3, #1
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	230f      	movs	r3, #15
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	230f      	movs	r3, #15
 8001282:	4a4d      	ldr	r2, [pc, #308]	; (80013b8 <ssd1306_PrintPrincipalMenu+0x17c>)
 8001284:	2046      	movs	r0, #70	; 0x46
 8001286:	f7ff fefb 	bl	8001080 <ssd1306_DrawBitmap>

	    //BATERIA
		  ssd1306_DrawBitmap(90,y,icon_cloud,15,15,White);
 800128a:	7ff9      	ldrb	r1, [r7, #31]
 800128c:	2301      	movs	r3, #1
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	230f      	movs	r3, #15
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	230f      	movs	r3, #15
 8001296:	4a49      	ldr	r2, [pc, #292]	; (80013bc <ssd1306_PrintPrincipalMenu+0x180>)
 8001298:	205a      	movs	r0, #90	; 0x5a
 800129a:	f7ff fef1 	bl	8001080 <ssd1306_DrawBitmap>

	    //SEÑAL GSM
		  ssd1306_DrawBitmap(110,y,icon_battery_full,15,15,White);
 800129e:	7ff9      	ldrb	r1, [r7, #31]
 80012a0:	2301      	movs	r3, #1
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	230f      	movs	r3, #15
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	230f      	movs	r3, #15
 80012aa:	4a45      	ldr	r2, [pc, #276]	; (80013c0 <ssd1306_PrintPrincipalMenu+0x184>)
 80012ac:	206e      	movs	r0, #110	; 0x6e
 80012ae:	f7ff fee7 	bl	8001080 <ssd1306_DrawBitmap>



	    y += 20;
 80012b2:	7ffb      	ldrb	r3, [r7, #31]
 80012b4:	3314      	adds	r3, #20
 80012b6:	77fb      	strb	r3, [r7, #31]
	    #endif

	    #ifdef SSD1306_INCLUDE_FONT_7x10
	    ssd1306_SetCursor(2, y);
 80012b8:	7ffb      	ldrb	r3, [r7, #31]
 80012ba:	4619      	mov	r1, r3
 80012bc:	2002      	movs	r0, #2
 80012be:	f7ff fec7 	bl	8001050 <ssd1306_SetCursor>
	    if(indexMenu==0){
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d106      	bne.n	80012d6 <ssd1306_PrintPrincipalMenu+0x9a>
	        ssd1306_WriteString("DASHBOARD", Font_7x10, Black);
 80012c8:	4a3e      	ldr	r2, [pc, #248]	; (80013c4 <ssd1306_PrintPrincipalMenu+0x188>)
 80012ca:	2300      	movs	r3, #0
 80012cc:	ca06      	ldmia	r2, {r1, r2}
 80012ce:	483e      	ldr	r0, [pc, #248]	; (80013c8 <ssd1306_PrintPrincipalMenu+0x18c>)
 80012d0:	f7ff fe98 	bl	8001004 <ssd1306_WriteString>
 80012d4:	e005      	b.n	80012e2 <ssd1306_PrintPrincipalMenu+0xa6>
	    }else{
	        ssd1306_WriteString("DASHBOARD", Font_7x10, White);
 80012d6:	4a3b      	ldr	r2, [pc, #236]	; (80013c4 <ssd1306_PrintPrincipalMenu+0x188>)
 80012d8:	2301      	movs	r3, #1
 80012da:	ca06      	ldmia	r2, {r1, r2}
 80012dc:	483a      	ldr	r0, [pc, #232]	; (80013c8 <ssd1306_PrintPrincipalMenu+0x18c>)
 80012de:	f7ff fe91 	bl	8001004 <ssd1306_WriteString>

	    }
	    y += 10;
 80012e2:	7ffb      	ldrb	r3, [r7, #31]
 80012e4:	330a      	adds	r3, #10
 80012e6:	77fb      	strb	r3, [r7, #31]
	    #endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 80012e8:	7ffb      	ldrb	r3, [r7, #31]
 80012ea:	4619      	mov	r1, r3
 80012ec:	2002      	movs	r0, #2
 80012ee:	f7ff feaf 	bl	8001050 <ssd1306_SetCursor>
	    if(indexMenu==1){
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d106      	bne.n	8001306 <ssd1306_PrintPrincipalMenu+0xca>
	        ssd1306_WriteString("ENERGY", Font_7x10, Black);
 80012f8:	4a32      	ldr	r2, [pc, #200]	; (80013c4 <ssd1306_PrintPrincipalMenu+0x188>)
 80012fa:	2300      	movs	r3, #0
 80012fc:	ca06      	ldmia	r2, {r1, r2}
 80012fe:	4833      	ldr	r0, [pc, #204]	; (80013cc <ssd1306_PrintPrincipalMenu+0x190>)
 8001300:	f7ff fe80 	bl	8001004 <ssd1306_WriteString>
 8001304:	e005      	b.n	8001312 <ssd1306_PrintPrincipalMenu+0xd6>
	    }
	    else{
	        ssd1306_WriteString("ENERGY", Font_7x10, White);
 8001306:	4a2f      	ldr	r2, [pc, #188]	; (80013c4 <ssd1306_PrintPrincipalMenu+0x188>)
 8001308:	2301      	movs	r3, #1
 800130a:	ca06      	ldmia	r2, {r1, r2}
 800130c:	482f      	ldr	r0, [pc, #188]	; (80013cc <ssd1306_PrintPrincipalMenu+0x190>)
 800130e:	f7ff fe79 	bl	8001004 <ssd1306_WriteString>

	    }
		y += 10;
 8001312:	7ffb      	ldrb	r3, [r7, #31]
 8001314:	330a      	adds	r3, #10
 8001316:	77fb      	strb	r3, [r7, #31]

		#endif
		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001318:	7ffb      	ldrb	r3, [r7, #31]
 800131a:	4619      	mov	r1, r3
 800131c:	2002      	movs	r0, #2
 800131e:	f7ff fe97 	bl	8001050 <ssd1306_SetCursor>
	    if(indexMenu==2){
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	2b02      	cmp	r3, #2
 8001326:	d106      	bne.n	8001336 <ssd1306_PrintPrincipalMenu+0xfa>
	        ssd1306_WriteString("SETTINGS", Font_7x10, Black);
 8001328:	4a26      	ldr	r2, [pc, #152]	; (80013c4 <ssd1306_PrintPrincipalMenu+0x188>)
 800132a:	2300      	movs	r3, #0
 800132c:	ca06      	ldmia	r2, {r1, r2}
 800132e:	4828      	ldr	r0, [pc, #160]	; (80013d0 <ssd1306_PrintPrincipalMenu+0x194>)
 8001330:	f7ff fe68 	bl	8001004 <ssd1306_WriteString>
 8001334:	e005      	b.n	8001342 <ssd1306_PrintPrincipalMenu+0x106>
	    }
	    else{
	        ssd1306_WriteString("SETTINGS", Font_7x10, White);
 8001336:	4a23      	ldr	r2, [pc, #140]	; (80013c4 <ssd1306_PrintPrincipalMenu+0x188>)
 8001338:	2301      	movs	r3, #1
 800133a:	ca06      	ldmia	r2, {r1, r2}
 800133c:	4824      	ldr	r0, [pc, #144]	; (80013d0 <ssd1306_PrintPrincipalMenu+0x194>)
 800133e:	f7ff fe61 	bl	8001004 <ssd1306_WriteString>

	    }
		y += 10;
 8001342:	7ffb      	ldrb	r3, [r7, #31]
 8001344:	330a      	adds	r3, #10
 8001346:	77fb      	strb	r3, [r7, #31]
		#endif




	         if(value >= 2850 && value <= 2950){
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f640 3221 	movw	r2, #2849	; 0xb21
 800134e:	4293      	cmp	r3, r2
 8001350:	dd0c      	ble.n	800136c <ssd1306_PrintPrincipalMenu+0x130>
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f640 3286 	movw	r2, #2950	; 0xb86
 8001358:	4293      	cmp	r3, r2
 800135a:	dc07      	bgt.n	800136c <ssd1306_PrintPrincipalMenu+0x130>
	            strcpy(stringDirection, "DERECHA");
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <ssd1306_PrintPrincipalMenu+0x198>)
 8001362:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001366:	e883 0003 	stmia.w	r3, {r0, r1}
 800136a:	e01b      	b.n	80013a4 <ssd1306_PrintPrincipalMenu+0x168>
	        }
	        else if(value >= 1850 && value <= 1950){
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f240 7239 	movw	r2, #1849	; 0x739
 8001372:	4293      	cmp	r3, r2
 8001374:	dd0b      	ble.n	800138e <ssd1306_PrintPrincipalMenu+0x152>
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f240 729e 	movw	r2, #1950	; 0x79e
 800137c:	4293      	cmp	r3, r2
 800137e:	dc06      	bgt.n	800138e <ssd1306_PrintPrincipalMenu+0x152>
	            strcpy(stringDirection, "IZQUIERDA");
 8001380:	4a15      	ldr	r2, [pc, #84]	; (80013d8 <ssd1306_PrintPrincipalMenu+0x19c>)
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	ca07      	ldmia	r2, {r0, r1, r2}
 8001388:	c303      	stmia	r3!, {r0, r1}
 800138a:	801a      	strh	r2, [r3, #0]
 800138c:	e00a      	b.n	80013a4 <ssd1306_PrintPrincipalMenu+0x168>
	        }
	        else {
	            strcpy(stringDirection, "NORMAL");
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4a12      	ldr	r2, [pc, #72]	; (80013dc <ssd1306_PrintPrincipalMenu+0x1a0>)
 8001394:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001398:	6018      	str	r0, [r3, #0]
 800139a:	3304      	adds	r3, #4
 800139c:	8019      	strh	r1, [r3, #0]
 800139e:	3302      	adds	r3, #2
 80013a0:	0c0a      	lsrs	r2, r1, #16
 80013a2:	701a      	strb	r2, [r3, #0]
	         //sprintf(screen_str, "%d", screen); // convert index to a string
	         //ssd1306_SetCursor(20, y); // set the cursor position
	         //ssd1306_WriteString(screen_str, Font_7x10, White); // write the string to the display    y += 10;
	         //   #endif

	    ssd1306_UpdateScreen();
 80013a4:	f7ff fd2a 	bl	8000dfc <ssd1306_UpdateScreen>
}
 80013a8:	bf00      	nop
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000010 	.word	0x20000010
 80013b4:	080064f4 	.word	0x080064f4
 80013b8:	08008100 	.word	0x08008100
 80013bc:	080080c0 	.word	0x080080c0
 80013c0:	080080e0 	.word	0x080080e0
 80013c4:	20000008 	.word	0x20000008
 80013c8:	080064fc 	.word	0x080064fc
 80013cc:	08006508 	.word	0x08006508
 80013d0:	08006510 	.word	0x08006510
 80013d4:	0800651c 	.word	0x0800651c
 80013d8:	08006524 	.word	0x08006524
 80013dc:	08006530 	.word	0x08006530

080013e0 <ssd1306_PrintDashboardMenu>:

void ssd1306_PrintDashboardMenu(int value, int indexMenu, int screen){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	f107 0318 	add.w	r3, r7, #24
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 80013fe:	2000      	movs	r0, #0
 8001400:	f7ff fcd8 	bl	8000db4 <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(20, y);
 8001404:	7ffb      	ldrb	r3, [r7, #31]
 8001406:	4619      	mov	r1, r3
 8001408:	2014      	movs	r0, #20
 800140a:	f7ff fe21 	bl	8001050 <ssd1306_SetCursor>
	    ssd1306_WriteString("OHMIO BOX", Font_11x18, White);
 800140e:	4a73      	ldr	r2, [pc, #460]	; (80015dc <ssd1306_PrintDashboardMenu+0x1fc>)
 8001410:	2301      	movs	r3, #1
 8001412:	ca06      	ldmia	r2, {r1, r2}
 8001414:	4872      	ldr	r0, [pc, #456]	; (80015e0 <ssd1306_PrintDashboardMenu+0x200>)
 8001416:	f7ff fdf5 	bl	8001004 <ssd1306_WriteString>
	    //ssd1306_DrawRectangle(0,y, 128, 10, White);

	    y += 20;
 800141a:	7ffb      	ldrb	r3, [r7, #31]
 800141c:	3314      	adds	r3, #20
 800141e:	77fb      	strb	r3, [r7, #31]
	    #endif

		ssd1306_SetCursor(2, y);
 8001420:	7ffb      	ldrb	r3, [r7, #31]
 8001422:	4619      	mov	r1, r3
 8001424:	2002      	movs	r0, #2
 8001426:	f7ff fe13 	bl	8001050 <ssd1306_SetCursor>
	    if(indexMenu==0){
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d11d      	bne.n	800146c <ssd1306_PrintDashboardMenu+0x8c>
			ssd1306_DrawBitmap(2,y,Dashboard_2_BLOCKCHAIN,40,40, White);
 8001430:	7ff9      	ldrb	r1, [r7, #31]
 8001432:	2301      	movs	r3, #1
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	2328      	movs	r3, #40	; 0x28
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	2328      	movs	r3, #40	; 0x28
 800143c:	4a69      	ldr	r2, [pc, #420]	; (80015e4 <ssd1306_PrintDashboardMenu+0x204>)
 800143e:	2002      	movs	r0, #2
 8001440:	f7ff fe1e 	bl	8001080 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_1_RF,40,40, White);
 8001444:	7ff9      	ldrb	r1, [r7, #31]
 8001446:	2301      	movs	r3, #1
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	2328      	movs	r3, #40	; 0x28
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2328      	movs	r3, #40	; 0x28
 8001450:	4a65      	ldr	r2, [pc, #404]	; (80015e8 <ssd1306_PrintDashboardMenu+0x208>)
 8001452:	202c      	movs	r0, #44	; 0x2c
 8001454:	f7ff fe14 	bl	8001080 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_3_CLOUD,40,40, White);
 8001458:	7ff9      	ldrb	r1, [r7, #31]
 800145a:	2301      	movs	r3, #1
 800145c:	9301      	str	r3, [sp, #4]
 800145e:	2328      	movs	r3, #40	; 0x28
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	2328      	movs	r3, #40	; 0x28
 8001464:	4a61      	ldr	r2, [pc, #388]	; (80015ec <ssd1306_PrintDashboardMenu+0x20c>)
 8001466:	2056      	movs	r0, #86	; 0x56
 8001468:	f7ff fe0a 	bl	8001080 <ssd1306_DrawBitmap>
		}
		if(indexMenu==1){
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d11d      	bne.n	80014ae <ssd1306_PrintDashboardMenu+0xce>
			ssd1306_DrawBitmap(2,y,Dashboard_1_RF,40,40, White);
 8001472:	7ff9      	ldrb	r1, [r7, #31]
 8001474:	2301      	movs	r3, #1
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	2328      	movs	r3, #40	; 0x28
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2328      	movs	r3, #40	; 0x28
 800147e:	4a5c      	ldr	r2, [pc, #368]	; (80015f0 <ssd1306_PrintDashboardMenu+0x210>)
 8001480:	2002      	movs	r0, #2
 8001482:	f7ff fdfd 	bl	8001080 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_3_CLOUD,40,40, White);
 8001486:	7ff9      	ldrb	r1, [r7, #31]
 8001488:	2301      	movs	r3, #1
 800148a:	9301      	str	r3, [sp, #4]
 800148c:	2328      	movs	r3, #40	; 0x28
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	2328      	movs	r3, #40	; 0x28
 8001492:	4a58      	ldr	r2, [pc, #352]	; (80015f4 <ssd1306_PrintDashboardMenu+0x214>)
 8001494:	202c      	movs	r0, #44	; 0x2c
 8001496:	f7ff fdf3 	bl	8001080 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_4_LORA,40,40, White);
 800149a:	7ff9      	ldrb	r1, [r7, #31]
 800149c:	2301      	movs	r3, #1
 800149e:	9301      	str	r3, [sp, #4]
 80014a0:	2328      	movs	r3, #40	; 0x28
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2328      	movs	r3, #40	; 0x28
 80014a6:	4a54      	ldr	r2, [pc, #336]	; (80015f8 <ssd1306_PrintDashboardMenu+0x218>)
 80014a8:	2056      	movs	r0, #86	; 0x56
 80014aa:	f7ff fde9 	bl	8001080 <ssd1306_DrawBitmap>
		}
		if(indexMenu==2){
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d11d      	bne.n	80014f0 <ssd1306_PrintDashboardMenu+0x110>
			ssd1306_DrawBitmap(2,y,Dashboard_3_CLOUD,40,40, White);
 80014b4:	7ff9      	ldrb	r1, [r7, #31]
 80014b6:	2301      	movs	r3, #1
 80014b8:	9301      	str	r3, [sp, #4]
 80014ba:	2328      	movs	r3, #40	; 0x28
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	2328      	movs	r3, #40	; 0x28
 80014c0:	4a4a      	ldr	r2, [pc, #296]	; (80015ec <ssd1306_PrintDashboardMenu+0x20c>)
 80014c2:	2002      	movs	r0, #2
 80014c4:	f7ff fddc 	bl	8001080 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_4_LORA,40,40, White);
 80014c8:	7ff9      	ldrb	r1, [r7, #31]
 80014ca:	2301      	movs	r3, #1
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	2328      	movs	r3, #40	; 0x28
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	2328      	movs	r3, #40	; 0x28
 80014d4:	4a49      	ldr	r2, [pc, #292]	; (80015fc <ssd1306_PrintDashboardMenu+0x21c>)
 80014d6:	202c      	movs	r0, #44	; 0x2c
 80014d8:	f7ff fdd2 	bl	8001080 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_5_BACK,40,40, White);
 80014dc:	7ff9      	ldrb	r1, [r7, #31]
 80014de:	2301      	movs	r3, #1
 80014e0:	9301      	str	r3, [sp, #4]
 80014e2:	2328      	movs	r3, #40	; 0x28
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2328      	movs	r3, #40	; 0x28
 80014e8:	4a45      	ldr	r2, [pc, #276]	; (8001600 <ssd1306_PrintDashboardMenu+0x220>)
 80014ea:	2056      	movs	r0, #86	; 0x56
 80014ec:	f7ff fdc8 	bl	8001080 <ssd1306_DrawBitmap>
		}
		if(indexMenu==3){
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d11d      	bne.n	8001532 <ssd1306_PrintDashboardMenu+0x152>
			ssd1306_DrawBitmap(2,y,Dashboard_3_CLOUD,40,40, White);
 80014f6:	7ff9      	ldrb	r1, [r7, #31]
 80014f8:	2301      	movs	r3, #1
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	2328      	movs	r3, #40	; 0x28
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	2328      	movs	r3, #40	; 0x28
 8001502:	4a3a      	ldr	r2, [pc, #232]	; (80015ec <ssd1306_PrintDashboardMenu+0x20c>)
 8001504:	2002      	movs	r0, #2
 8001506:	f7ff fdbb 	bl	8001080 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_5_BACK,40,40, White);
 800150a:	7ff9      	ldrb	r1, [r7, #31]
 800150c:	2301      	movs	r3, #1
 800150e:	9301      	str	r3, [sp, #4]
 8001510:	2328      	movs	r3, #40	; 0x28
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2328      	movs	r3, #40	; 0x28
 8001516:	4a3b      	ldr	r2, [pc, #236]	; (8001604 <ssd1306_PrintDashboardMenu+0x224>)
 8001518:	202c      	movs	r0, #44	; 0x2c
 800151a:	f7ff fdb1 	bl	8001080 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_2_BLOCKCHAIN,40,40, White);
 800151e:	7ff9      	ldrb	r1, [r7, #31]
 8001520:	2301      	movs	r3, #1
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	2328      	movs	r3, #40	; 0x28
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2328      	movs	r3, #40	; 0x28
 800152a:	4a2e      	ldr	r2, [pc, #184]	; (80015e4 <ssd1306_PrintDashboardMenu+0x204>)
 800152c:	2056      	movs	r0, #86	; 0x56
 800152e:	f7ff fda7 	bl	8001080 <ssd1306_DrawBitmap>
		}
		if(indexMenu==4){
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	2b04      	cmp	r3, #4
 8001536:	d11d      	bne.n	8001574 <ssd1306_PrintDashboardMenu+0x194>
			ssd1306_DrawBitmap(2,y,Dashboard_5_BACK,40,40, White);
 8001538:	7ff9      	ldrb	r1, [r7, #31]
 800153a:	2301      	movs	r3, #1
 800153c:	9301      	str	r3, [sp, #4]
 800153e:	2328      	movs	r3, #40	; 0x28
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	2328      	movs	r3, #40	; 0x28
 8001544:	4a2e      	ldr	r2, [pc, #184]	; (8001600 <ssd1306_PrintDashboardMenu+0x220>)
 8001546:	2002      	movs	r0, #2
 8001548:	f7ff fd9a 	bl	8001080 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_2_BLOCKCHAIN,40,40, White);
 800154c:	7ff9      	ldrb	r1, [r7, #31]
 800154e:	2301      	movs	r3, #1
 8001550:	9301      	str	r3, [sp, #4]
 8001552:	2328      	movs	r3, #40	; 0x28
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	2328      	movs	r3, #40	; 0x28
 8001558:	4a2b      	ldr	r2, [pc, #172]	; (8001608 <ssd1306_PrintDashboardMenu+0x228>)
 800155a:	202c      	movs	r0, #44	; 0x2c
 800155c:	f7ff fd90 	bl	8001080 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_1_RF,40,40, White);
 8001560:	7ff9      	ldrb	r1, [r7, #31]
 8001562:	2301      	movs	r3, #1
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	2328      	movs	r3, #40	; 0x28
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	2328      	movs	r3, #40	; 0x28
 800156c:	4a20      	ldr	r2, [pc, #128]	; (80015f0 <ssd1306_PrintDashboardMenu+0x210>)
 800156e:	2056      	movs	r0, #86	; 0x56
 8001570:	f7ff fd86 	bl	8001080 <ssd1306_DrawBitmap>
		}
		 if(value >= 2850 && value <= 2950){
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f640 3221 	movw	r2, #2849	; 0xb21
 800157a:	4293      	cmp	r3, r2
 800157c:	dd0c      	ble.n	8001598 <ssd1306_PrintDashboardMenu+0x1b8>
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f640 3286 	movw	r2, #2950	; 0xb86
 8001584:	4293      	cmp	r3, r2
 8001586:	dc07      	bgt.n	8001598 <ssd1306_PrintDashboardMenu+0x1b8>
			strcpy(stringDirection, "DERECHA");
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4a1f      	ldr	r2, [pc, #124]	; (800160c <ssd1306_PrintDashboardMenu+0x22c>)
 800158e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001592:	e883 0003 	stmia.w	r3, {r0, r1}
 8001596:	e01b      	b.n	80015d0 <ssd1306_PrintDashboardMenu+0x1f0>
		}
		else if(value >= 1850 && value <= 1950){
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f240 7239 	movw	r2, #1849	; 0x739
 800159e:	4293      	cmp	r3, r2
 80015a0:	dd0b      	ble.n	80015ba <ssd1306_PrintDashboardMenu+0x1da>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f240 729e 	movw	r2, #1950	; 0x79e
 80015a8:	4293      	cmp	r3, r2
 80015aa:	dc06      	bgt.n	80015ba <ssd1306_PrintDashboardMenu+0x1da>
			strcpy(stringDirection, "IZQUIERDA");
 80015ac:	4a18      	ldr	r2, [pc, #96]	; (8001610 <ssd1306_PrintDashboardMenu+0x230>)
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80015b4:	c303      	stmia	r3!, {r0, r1}
 80015b6:	801a      	strh	r2, [r3, #0]
 80015b8:	e00a      	b.n	80015d0 <ssd1306_PrintDashboardMenu+0x1f0>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4a15      	ldr	r2, [pc, #84]	; (8001614 <ssd1306_PrintDashboardMenu+0x234>)
 80015c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015c4:	6018      	str	r0, [r3, #0]
 80015c6:	3304      	adds	r3, #4
 80015c8:	8019      	strh	r1, [r3, #0]
 80015ca:	3302      	adds	r3, #2
 80015cc:	0c0a      	lsrs	r2, r1, #16
 80015ce:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 80015d0:	f7ff fc14 	bl	8000dfc <ssd1306_UpdateScreen>
}
 80015d4:	bf00      	nop
 80015d6:	3720      	adds	r7, #32
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000010 	.word	0x20000010
 80015e0:	080064bc 	.word	0x080064bc
 80015e4:	080082b0 	.word	0x080082b0
 80015e8:	080085d0 	.word	0x080085d0
 80015ec:	08008378 	.word	0x08008378
 80015f0:	080081e8 	.word	0x080081e8
 80015f4:	08008760 	.word	0x08008760
 80015f8:	08008120 	.word	0x08008120
 80015fc:	08008508 	.word	0x08008508
 8001600:	08008440 	.word	0x08008440
 8001604:	08008828 	.word	0x08008828
 8001608:	08008698 	.word	0x08008698
 800160c:	0800651c 	.word	0x0800651c
 8001610:	08006524 	.word	0x08006524
 8001614:	08006530 	.word	0x08006530

08001618 <ssd1306_PrintEnergyMenu>:

void ssd1306_PrintEnergyMenu(int value, int indexMenu, int screen){
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	f107 0318 	add.w	r3, r7, #24
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 8001636:	2000      	movs	r0, #0
 8001638:	f7ff fbbc 	bl	8000db4 <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(2, y);
 800163c:	7ffb      	ldrb	r3, [r7, #31]
 800163e:	4619      	mov	r1, r3
 8001640:	2002      	movs	r0, #2
 8001642:	f7ff fd05 	bl	8001050 <ssd1306_SetCursor>
	    ssd1306_WriteString("ENERGY", Font_11x18, White);
 8001646:	4a42      	ldr	r2, [pc, #264]	; (8001750 <ssd1306_PrintEnergyMenu+0x138>)
 8001648:	2301      	movs	r3, #1
 800164a:	ca06      	ldmia	r2, {r1, r2}
 800164c:	4841      	ldr	r0, [pc, #260]	; (8001754 <ssd1306_PrintEnergyMenu+0x13c>)
 800164e:	f7ff fcd9 	bl	8001004 <ssd1306_WriteString>
	    //ssd1306_DrawRectangle(0,y, 128, 10, White);

	    y += 20;
 8001652:	7ffb      	ldrb	r3, [r7, #31]
 8001654:	3314      	adds	r3, #20
 8001656:	77fb      	strb	r3, [r7, #31]
	    #endif



		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001658:	7ffb      	ldrb	r3, [r7, #31]
 800165a:	4619      	mov	r1, r3
 800165c:	2002      	movs	r0, #2
 800165e:	f7ff fcf7 	bl	8001050 <ssd1306_SetCursor>
	    if(indexMenu==0){
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d106      	bne.n	8001676 <ssd1306_PrintEnergyMenu+0x5e>
	        ssd1306_WriteString("Power Supply", Font_7x10, Black);
 8001668:	4a3b      	ldr	r2, [pc, #236]	; (8001758 <ssd1306_PrintEnergyMenu+0x140>)
 800166a:	2300      	movs	r3, #0
 800166c:	ca06      	ldmia	r2, {r1, r2}
 800166e:	483b      	ldr	r0, [pc, #236]	; (800175c <ssd1306_PrintEnergyMenu+0x144>)
 8001670:	f7ff fcc8 	bl	8001004 <ssd1306_WriteString>
 8001674:	e005      	b.n	8001682 <ssd1306_PrintEnergyMenu+0x6a>
	    }
	    else{
	        ssd1306_WriteString("Power Supply", Font_7x10, White);
 8001676:	4a38      	ldr	r2, [pc, #224]	; (8001758 <ssd1306_PrintEnergyMenu+0x140>)
 8001678:	2301      	movs	r3, #1
 800167a:	ca06      	ldmia	r2, {r1, r2}
 800167c:	4837      	ldr	r0, [pc, #220]	; (800175c <ssd1306_PrintEnergyMenu+0x144>)
 800167e:	f7ff fcc1 	bl	8001004 <ssd1306_WriteString>
	    }
		y += 10;
 8001682:	7ffb      	ldrb	r3, [r7, #31]
 8001684:	330a      	adds	r3, #10
 8001686:	77fb      	strb	r3, [r7, #31]
		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001688:	7ffb      	ldrb	r3, [r7, #31]
 800168a:	4619      	mov	r1, r3
 800168c:	2002      	movs	r0, #2
 800168e:	f7ff fcdf 	bl	8001050 <ssd1306_SetCursor>
		if(indexMenu==1){
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d106      	bne.n	80016a6 <ssd1306_PrintEnergyMenu+0x8e>
	        ssd1306_WriteString("Status: 80%", Font_7x10, Black);
 8001698:	4a2f      	ldr	r2, [pc, #188]	; (8001758 <ssd1306_PrintEnergyMenu+0x140>)
 800169a:	2300      	movs	r3, #0
 800169c:	ca06      	ldmia	r2, {r1, r2}
 800169e:	4830      	ldr	r0, [pc, #192]	; (8001760 <ssd1306_PrintEnergyMenu+0x148>)
 80016a0:	f7ff fcb0 	bl	8001004 <ssd1306_WriteString>
 80016a4:	e005      	b.n	80016b2 <ssd1306_PrintEnergyMenu+0x9a>
		}
		else{
	        ssd1306_WriteString("Status: 80%", Font_7x10, White);
 80016a6:	4a2c      	ldr	r2, [pc, #176]	; (8001758 <ssd1306_PrintEnergyMenu+0x140>)
 80016a8:	2301      	movs	r3, #1
 80016aa:	ca06      	ldmia	r2, {r1, r2}
 80016ac:	482c      	ldr	r0, [pc, #176]	; (8001760 <ssd1306_PrintEnergyMenu+0x148>)
 80016ae:	f7ff fca9 	bl	8001004 <ssd1306_WriteString>
		}
		y += 10;
 80016b2:	7ffb      	ldrb	r3, [r7, #31]
 80016b4:	330a      	adds	r3, #10
 80016b6:	77fb      	strb	r3, [r7, #31]

		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 80016b8:	7ffb      	ldrb	r3, [r7, #31]
 80016ba:	4619      	mov	r1, r3
 80016bc:	2002      	movs	r0, #2
 80016be:	f7ff fcc7 	bl	8001050 <ssd1306_SetCursor>
		if(indexMenu==2){
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d106      	bne.n	80016d6 <ssd1306_PrintEnergyMenu+0xbe>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 80016c8:	4a23      	ldr	r2, [pc, #140]	; (8001758 <ssd1306_PrintEnergyMenu+0x140>)
 80016ca:	2300      	movs	r3, #0
 80016cc:	ca06      	ldmia	r2, {r1, r2}
 80016ce:	4825      	ldr	r0, [pc, #148]	; (8001764 <ssd1306_PrintEnergyMenu+0x14c>)
 80016d0:	f7ff fc98 	bl	8001004 <ssd1306_WriteString>
 80016d4:	e005      	b.n	80016e2 <ssd1306_PrintEnergyMenu+0xca>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 80016d6:	4a20      	ldr	r2, [pc, #128]	; (8001758 <ssd1306_PrintEnergyMenu+0x140>)
 80016d8:	2301      	movs	r3, #1
 80016da:	ca06      	ldmia	r2, {r1, r2}
 80016dc:	4821      	ldr	r0, [pc, #132]	; (8001764 <ssd1306_PrintEnergyMenu+0x14c>)
 80016de:	f7ff fc91 	bl	8001004 <ssd1306_WriteString>
		}
		y += 10;
 80016e2:	7ffb      	ldrb	r3, [r7, #31]
 80016e4:	330a      	adds	r3, #10
 80016e6:	77fb      	strb	r3, [r7, #31]

		#endif



		 if(value >= 2850 && value <= 2950){
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f640 3221 	movw	r2, #2849	; 0xb21
 80016ee:	4293      	cmp	r3, r2
 80016f0:	dd0c      	ble.n	800170c <ssd1306_PrintEnergyMenu+0xf4>
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f640 3286 	movw	r2, #2950	; 0xb86
 80016f8:	4293      	cmp	r3, r2
 80016fa:	dc07      	bgt.n	800170c <ssd1306_PrintEnergyMenu+0xf4>
			strcpy(stringDirection, "DERECHA");
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4a19      	ldr	r2, [pc, #100]	; (8001768 <ssd1306_PrintEnergyMenu+0x150>)
 8001702:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001706:	e883 0003 	stmia.w	r3, {r0, r1}
 800170a:	e01b      	b.n	8001744 <ssd1306_PrintEnergyMenu+0x12c>
		}
		else if(value >= 1850 && value <= 1950){
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f240 7239 	movw	r2, #1849	; 0x739
 8001712:	4293      	cmp	r3, r2
 8001714:	dd0b      	ble.n	800172e <ssd1306_PrintEnergyMenu+0x116>
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f240 729e 	movw	r2, #1950	; 0x79e
 800171c:	4293      	cmp	r3, r2
 800171e:	dc06      	bgt.n	800172e <ssd1306_PrintEnergyMenu+0x116>
			strcpy(stringDirection, "IZQUIERDA");
 8001720:	4a12      	ldr	r2, [pc, #72]	; (800176c <ssd1306_PrintEnergyMenu+0x154>)
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	ca07      	ldmia	r2, {r0, r1, r2}
 8001728:	c303      	stmia	r3!, {r0, r1}
 800172a:	801a      	strh	r2, [r3, #0]
 800172c:	e00a      	b.n	8001744 <ssd1306_PrintEnergyMenu+0x12c>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	4a0f      	ldr	r2, [pc, #60]	; (8001770 <ssd1306_PrintEnergyMenu+0x158>)
 8001734:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001738:	6018      	str	r0, [r3, #0]
 800173a:	3304      	adds	r3, #4
 800173c:	8019      	strh	r1, [r3, #0]
 800173e:	3302      	adds	r3, #2
 8001740:	0c0a      	lsrs	r2, r1, #16
 8001742:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8001744:	f7ff fb5a 	bl	8000dfc <ssd1306_UpdateScreen>
}
 8001748:	bf00      	nop
 800174a:	3720      	adds	r7, #32
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000010 	.word	0x20000010
 8001754:	08006508 	.word	0x08006508
 8001758:	20000008 	.word	0x20000008
 800175c:	08006538 	.word	0x08006538
 8001760:	08006548 	.word	0x08006548
 8001764:	08006554 	.word	0x08006554
 8001768:	0800651c 	.word	0x0800651c
 800176c:	08006524 	.word	0x08006524
 8001770:	08006530 	.word	0x08006530

08001774 <ssd1306_PrintRFMenu>:

void ssd1306_PrintRFMenu(int value, int indexMenu, int screen){
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
		 uint8_t y = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	f107 0318 	add.w	r3, r7, #24
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 8001792:	2000      	movs	r0, #0
 8001794:	f7ff fb0e 	bl	8000db4 <ssd1306_Fill>

	    ssd1306_SetCursor(35, y);
 8001798:	7ffb      	ldrb	r3, [r7, #31]
 800179a:	4619      	mov	r1, r3
 800179c:	2023      	movs	r0, #35	; 0x23
 800179e:	f7ff fc57 	bl	8001050 <ssd1306_SetCursor>
	    ssd1306_WriteString("BROADCAST", Font_7x10, White);
 80017a2:	4a5a      	ldr	r2, [pc, #360]	; (800190c <ssd1306_PrintRFMenu+0x198>)
 80017a4:	2301      	movs	r3, #1
 80017a6:	ca06      	ldmia	r2, {r1, r2}
 80017a8:	4859      	ldr	r0, [pc, #356]	; (8001910 <ssd1306_PrintRFMenu+0x19c>)
 80017aa:	f7ff fc2b 	bl	8001004 <ssd1306_WriteString>
	    y += 10;
 80017ae:	7ffb      	ldrb	r3, [r7, #31]
 80017b0:	330a      	adds	r3, #10
 80017b2:	77fb      	strb	r3, [r7, #31]


		ssd1306_SetCursor(2, y);
 80017b4:	7ffb      	ldrb	r3, [r7, #31]
 80017b6:	4619      	mov	r1, r3
 80017b8:	2002      	movs	r0, #2
 80017ba:	f7ff fc49 	bl	8001050 <ssd1306_SetCursor>
			if(indexMenu==0){
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d106      	bne.n	80017d2 <ssd1306_PrintRFMenu+0x5e>
				ssd1306_WriteString("Channel: 102.9 MHz", Font_7x10, Black);
 80017c4:	4a51      	ldr	r2, [pc, #324]	; (800190c <ssd1306_PrintRFMenu+0x198>)
 80017c6:	2300      	movs	r3, #0
 80017c8:	ca06      	ldmia	r2, {r1, r2}
 80017ca:	4852      	ldr	r0, [pc, #328]	; (8001914 <ssd1306_PrintRFMenu+0x1a0>)
 80017cc:	f7ff fc1a 	bl	8001004 <ssd1306_WriteString>
 80017d0:	e005      	b.n	80017de <ssd1306_PrintRFMenu+0x6a>
			}
			else{
				ssd1306_WriteString("Channel: 102.9 MHz", Font_7x10, White);
 80017d2:	4a4e      	ldr	r2, [pc, #312]	; (800190c <ssd1306_PrintRFMenu+0x198>)
 80017d4:	2301      	movs	r3, #1
 80017d6:	ca06      	ldmia	r2, {r1, r2}
 80017d8:	484e      	ldr	r0, [pc, #312]	; (8001914 <ssd1306_PrintRFMenu+0x1a0>)
 80017da:	f7ff fc13 	bl	8001004 <ssd1306_WriteString>
			}
		y += 10;
 80017de:	7ffb      	ldrb	r3, [r7, #31]
 80017e0:	330a      	adds	r3, #10
 80017e2:	77fb      	strb	r3, [r7, #31]
		

		ssd1306_SetCursor(2, y);
 80017e4:	7ffb      	ldrb	r3, [r7, #31]
 80017e6:	4619      	mov	r1, r3
 80017e8:	2002      	movs	r0, #2
 80017ea:	f7ff fc31 	bl	8001050 <ssd1306_SetCursor>
		if(indexMenu==1){
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d106      	bne.n	8001802 <ssd1306_PrintRFMenu+0x8e>
	        ssd1306_WriteString("Standard: DVB-T2", Font_7x10, Black);
 80017f4:	4a45      	ldr	r2, [pc, #276]	; (800190c <ssd1306_PrintRFMenu+0x198>)
 80017f6:	2300      	movs	r3, #0
 80017f8:	ca06      	ldmia	r2, {r1, r2}
 80017fa:	4847      	ldr	r0, [pc, #284]	; (8001918 <ssd1306_PrintRFMenu+0x1a4>)
 80017fc:	f7ff fc02 	bl	8001004 <ssd1306_WriteString>
 8001800:	e005      	b.n	800180e <ssd1306_PrintRFMenu+0x9a>
		}
		else{
	        ssd1306_WriteString("Standard: DVB-T2", Font_7x10, White);
 8001802:	4a42      	ldr	r2, [pc, #264]	; (800190c <ssd1306_PrintRFMenu+0x198>)
 8001804:	2301      	movs	r3, #1
 8001806:	ca06      	ldmia	r2, {r1, r2}
 8001808:	4843      	ldr	r0, [pc, #268]	; (8001918 <ssd1306_PrintRFMenu+0x1a4>)
 800180a:	f7ff fbfb 	bl	8001004 <ssd1306_WriteString>
		}
		y += 10;
 800180e:	7ffb      	ldrb	r3, [r7, #31]
 8001810:	330a      	adds	r3, #10
 8001812:	77fb      	strb	r3, [r7, #31]

		ssd1306_SetCursor(2, y);
 8001814:	7ffb      	ldrb	r3, [r7, #31]
 8001816:	4619      	mov	r1, r3
 8001818:	2002      	movs	r0, #2
 800181a:	f7ff fc19 	bl	8001050 <ssd1306_SetCursor>
		if(indexMenu==2){
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	2b02      	cmp	r3, #2
 8001822:	d106      	bne.n	8001832 <ssd1306_PrintRFMenu+0xbe>
	        ssd1306_WriteString("MER: 0.5 dB", Font_7x10, Black);
 8001824:	4a39      	ldr	r2, [pc, #228]	; (800190c <ssd1306_PrintRFMenu+0x198>)
 8001826:	2300      	movs	r3, #0
 8001828:	ca06      	ldmia	r2, {r1, r2}
 800182a:	483c      	ldr	r0, [pc, #240]	; (800191c <ssd1306_PrintRFMenu+0x1a8>)
 800182c:	f7ff fbea 	bl	8001004 <ssd1306_WriteString>
 8001830:	e005      	b.n	800183e <ssd1306_PrintRFMenu+0xca>
		}
		else{
	        ssd1306_WriteString("MER: 0.5 dB", Font_7x10, White);
 8001832:	4a36      	ldr	r2, [pc, #216]	; (800190c <ssd1306_PrintRFMenu+0x198>)
 8001834:	2301      	movs	r3, #1
 8001836:	ca06      	ldmia	r2, {r1, r2}
 8001838:	4838      	ldr	r0, [pc, #224]	; (800191c <ssd1306_PrintRFMenu+0x1a8>)
 800183a:	f7ff fbe3 	bl	8001004 <ssd1306_WriteString>
		}
		y += 10;
 800183e:	7ffb      	ldrb	r3, [r7, #31]
 8001840:	330a      	adds	r3, #10
 8001842:	77fb      	strb	r3, [r7, #31]
		

		ssd1306_SetCursor(2, y);
 8001844:	7ffb      	ldrb	r3, [r7, #31]
 8001846:	4619      	mov	r1, r3
 8001848:	2002      	movs	r0, #2
 800184a:	f7ff fc01 	bl	8001050 <ssd1306_SetCursor>
		if(indexMenu==3){
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	2b03      	cmp	r3, #3
 8001852:	d106      	bne.n	8001862 <ssd1306_PrintRFMenu+0xee>
	        ssd1306_WriteString("BER: 0.5", Font_7x10, Black);
 8001854:	4a2d      	ldr	r2, [pc, #180]	; (800190c <ssd1306_PrintRFMenu+0x198>)
 8001856:	2300      	movs	r3, #0
 8001858:	ca06      	ldmia	r2, {r1, r2}
 800185a:	4831      	ldr	r0, [pc, #196]	; (8001920 <ssd1306_PrintRFMenu+0x1ac>)
 800185c:	f7ff fbd2 	bl	8001004 <ssd1306_WriteString>
 8001860:	e005      	b.n	800186e <ssd1306_PrintRFMenu+0xfa>
		}
		else{
	        ssd1306_WriteString("BER: 0.5", Font_7x10, White);
 8001862:	4a2a      	ldr	r2, [pc, #168]	; (800190c <ssd1306_PrintRFMenu+0x198>)
 8001864:	2301      	movs	r3, #1
 8001866:	ca06      	ldmia	r2, {r1, r2}
 8001868:	482d      	ldr	r0, [pc, #180]	; (8001920 <ssd1306_PrintRFMenu+0x1ac>)
 800186a:	f7ff fbcb 	bl	8001004 <ssd1306_WriteString>
		}
		y += 10;
 800186e:	7ffb      	ldrb	r3, [r7, #31]
 8001870:	330a      	adds	r3, #10
 8001872:	77fb      	strb	r3, [r7, #31]

		

		ssd1306_SetCursor(2, y);
 8001874:	7ffb      	ldrb	r3, [r7, #31]
 8001876:	4619      	mov	r1, r3
 8001878:	2002      	movs	r0, #2
 800187a:	f7ff fbe9 	bl	8001050 <ssd1306_SetCursor>
		if(indexMenu==4){
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2b04      	cmp	r3, #4
 8001882:	d106      	bne.n	8001892 <ssd1306_PrintRFMenu+0x11e>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 8001884:	4a21      	ldr	r2, [pc, #132]	; (800190c <ssd1306_PrintRFMenu+0x198>)
 8001886:	2300      	movs	r3, #0
 8001888:	ca06      	ldmia	r2, {r1, r2}
 800188a:	4826      	ldr	r0, [pc, #152]	; (8001924 <ssd1306_PrintRFMenu+0x1b0>)
 800188c:	f7ff fbba 	bl	8001004 <ssd1306_WriteString>
 8001890:	e005      	b.n	800189e <ssd1306_PrintRFMenu+0x12a>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 8001892:	4a1e      	ldr	r2, [pc, #120]	; (800190c <ssd1306_PrintRFMenu+0x198>)
 8001894:	2301      	movs	r3, #1
 8001896:	ca06      	ldmia	r2, {r1, r2}
 8001898:	4822      	ldr	r0, [pc, #136]	; (8001924 <ssd1306_PrintRFMenu+0x1b0>)
 800189a:	f7ff fbb3 	bl	8001004 <ssd1306_WriteString>
		}
		y += 10;
 800189e:	7ffb      	ldrb	r3, [r7, #31]
 80018a0:	330a      	adds	r3, #10
 80018a2:	77fb      	strb	r3, [r7, #31]

		



		 if(value >= 2850 && value <= 2950){
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f640 3221 	movw	r2, #2849	; 0xb21
 80018aa:	4293      	cmp	r3, r2
 80018ac:	dd0c      	ble.n	80018c8 <ssd1306_PrintRFMenu+0x154>
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f640 3286 	movw	r2, #2950	; 0xb86
 80018b4:	4293      	cmp	r3, r2
 80018b6:	dc07      	bgt.n	80018c8 <ssd1306_PrintRFMenu+0x154>
			strcpy(stringDirection, "DERECHA");
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4a1a      	ldr	r2, [pc, #104]	; (8001928 <ssd1306_PrintRFMenu+0x1b4>)
 80018be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018c2:	e883 0003 	stmia.w	r3, {r0, r1}
 80018c6:	e01b      	b.n	8001900 <ssd1306_PrintRFMenu+0x18c>
		}
		else if(value >= 1850 && value <= 1950){
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f240 7239 	movw	r2, #1849	; 0x739
 80018ce:	4293      	cmp	r3, r2
 80018d0:	dd0b      	ble.n	80018ea <ssd1306_PrintRFMenu+0x176>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f240 729e 	movw	r2, #1950	; 0x79e
 80018d8:	4293      	cmp	r3, r2
 80018da:	dc06      	bgt.n	80018ea <ssd1306_PrintRFMenu+0x176>
			strcpy(stringDirection, "IZQUIERDA");
 80018dc:	4a13      	ldr	r2, [pc, #76]	; (800192c <ssd1306_PrintRFMenu+0x1b8>)
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80018e4:	c303      	stmia	r3!, {r0, r1}
 80018e6:	801a      	strh	r2, [r3, #0]
 80018e8:	e00a      	b.n	8001900 <ssd1306_PrintRFMenu+0x18c>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4a10      	ldr	r2, [pc, #64]	; (8001930 <ssd1306_PrintRFMenu+0x1bc>)
 80018f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018f4:	6018      	str	r0, [r3, #0]
 80018f6:	3304      	adds	r3, #4
 80018f8:	8019      	strh	r1, [r3, #0]
 80018fa:	3302      	adds	r3, #2
 80018fc:	0c0a      	lsrs	r2, r1, #16
 80018fe:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8001900:	f7ff fa7c 	bl	8000dfc <ssd1306_UpdateScreen>
}
 8001904:	bf00      	nop
 8001906:	3720      	adds	r7, #32
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000008 	.word	0x20000008
 8001910:	0800655c 	.word	0x0800655c
 8001914:	08006568 	.word	0x08006568
 8001918:	0800657c 	.word	0x0800657c
 800191c:	08006590 	.word	0x08006590
 8001920:	0800659c 	.word	0x0800659c
 8001924:	08006554 	.word	0x08006554
 8001928:	0800651c 	.word	0x0800651c
 800192c:	08006524 	.word	0x08006524
 8001930:	08006530 	.word	0x08006530

08001934 <ssd1306_PrintSettingsMenu>:

void ssd1306_PrintSettingsMenu(int value, int indexMenu, int screen){
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	f107 0318 	add.w	r3, r7, #24
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 8001952:	2000      	movs	r0, #0
 8001954:	f7ff fa2e 	bl	8000db4 <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(2, y);
 8001958:	7ffb      	ldrb	r3, [r7, #31]
 800195a:	4619      	mov	r1, r3
 800195c:	2002      	movs	r0, #2
 800195e:	f7ff fb77 	bl	8001050 <ssd1306_SetCursor>
	    ssd1306_WriteString("SETTINGS", Font_11x18, White);
 8001962:	4a42      	ldr	r2, [pc, #264]	; (8001a6c <ssd1306_PrintSettingsMenu+0x138>)
 8001964:	2301      	movs	r3, #1
 8001966:	ca06      	ldmia	r2, {r1, r2}
 8001968:	4841      	ldr	r0, [pc, #260]	; (8001a70 <ssd1306_PrintSettingsMenu+0x13c>)
 800196a:	f7ff fb4b 	bl	8001004 <ssd1306_WriteString>
	    //ssd1306_DrawRectangle(0,y, 128, 10, White);

	    y += 20;
 800196e:	7ffb      	ldrb	r3, [r7, #31]
 8001970:	3314      	adds	r3, #20
 8001972:	77fb      	strb	r3, [r7, #31]
	    #endif



		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001974:	7ffb      	ldrb	r3, [r7, #31]
 8001976:	4619      	mov	r1, r3
 8001978:	2002      	movs	r0, #2
 800197a:	f7ff fb69 	bl	8001050 <ssd1306_SetCursor>
	    if(indexMenu==0){
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d106      	bne.n	8001992 <ssd1306_PrintSettingsMenu+0x5e>
	        ssd1306_WriteString("ID: a23d-4f5g6", Font_7x10, Black);
 8001984:	4a3b      	ldr	r2, [pc, #236]	; (8001a74 <ssd1306_PrintSettingsMenu+0x140>)
 8001986:	2300      	movs	r3, #0
 8001988:	ca06      	ldmia	r2, {r1, r2}
 800198a:	483b      	ldr	r0, [pc, #236]	; (8001a78 <ssd1306_PrintSettingsMenu+0x144>)
 800198c:	f7ff fb3a 	bl	8001004 <ssd1306_WriteString>
 8001990:	e005      	b.n	800199e <ssd1306_PrintSettingsMenu+0x6a>
	    }
	    else{
	        ssd1306_WriteString("ID: a23d-4f5g6", Font_7x10, White);
 8001992:	4a38      	ldr	r2, [pc, #224]	; (8001a74 <ssd1306_PrintSettingsMenu+0x140>)
 8001994:	2301      	movs	r3, #1
 8001996:	ca06      	ldmia	r2, {r1, r2}
 8001998:	4837      	ldr	r0, [pc, #220]	; (8001a78 <ssd1306_PrintSettingsMenu+0x144>)
 800199a:	f7ff fb33 	bl	8001004 <ssd1306_WriteString>
	    }
		y += 10;
 800199e:	7ffb      	ldrb	r3, [r7, #31]
 80019a0:	330a      	adds	r3, #10
 80019a2:	77fb      	strb	r3, [r7, #31]
		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 80019a4:	7ffb      	ldrb	r3, [r7, #31]
 80019a6:	4619      	mov	r1, r3
 80019a8:	2002      	movs	r0, #2
 80019aa:	f7ff fb51 	bl	8001050 <ssd1306_SetCursor>
		if(indexMenu==1){
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d106      	bne.n	80019c2 <ssd1306_PrintSettingsMenu+0x8e>
	        ssd1306_WriteString("OHMIO Box v1.0", Font_7x10, Black);
 80019b4:	4a2f      	ldr	r2, [pc, #188]	; (8001a74 <ssd1306_PrintSettingsMenu+0x140>)
 80019b6:	2300      	movs	r3, #0
 80019b8:	ca06      	ldmia	r2, {r1, r2}
 80019ba:	4830      	ldr	r0, [pc, #192]	; (8001a7c <ssd1306_PrintSettingsMenu+0x148>)
 80019bc:	f7ff fb22 	bl	8001004 <ssd1306_WriteString>
 80019c0:	e005      	b.n	80019ce <ssd1306_PrintSettingsMenu+0x9a>
		}
		else{
	        ssd1306_WriteString("OHMIO Box v1.0", Font_7x10, White);
 80019c2:	4a2c      	ldr	r2, [pc, #176]	; (8001a74 <ssd1306_PrintSettingsMenu+0x140>)
 80019c4:	2301      	movs	r3, #1
 80019c6:	ca06      	ldmia	r2, {r1, r2}
 80019c8:	482c      	ldr	r0, [pc, #176]	; (8001a7c <ssd1306_PrintSettingsMenu+0x148>)
 80019ca:	f7ff fb1b 	bl	8001004 <ssd1306_WriteString>
		}
		y += 10;
 80019ce:	7ffb      	ldrb	r3, [r7, #31]
 80019d0:	330a      	adds	r3, #10
 80019d2:	77fb      	strb	r3, [r7, #31]

		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 80019d4:	7ffb      	ldrb	r3, [r7, #31]
 80019d6:	4619      	mov	r1, r3
 80019d8:	2002      	movs	r0, #2
 80019da:	f7ff fb39 	bl	8001050 <ssd1306_SetCursor>
		if(indexMenu==2){
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d106      	bne.n	80019f2 <ssd1306_PrintSettingsMenu+0xbe>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 80019e4:	4a23      	ldr	r2, [pc, #140]	; (8001a74 <ssd1306_PrintSettingsMenu+0x140>)
 80019e6:	2300      	movs	r3, #0
 80019e8:	ca06      	ldmia	r2, {r1, r2}
 80019ea:	4825      	ldr	r0, [pc, #148]	; (8001a80 <ssd1306_PrintSettingsMenu+0x14c>)
 80019ec:	f7ff fb0a 	bl	8001004 <ssd1306_WriteString>
 80019f0:	e005      	b.n	80019fe <ssd1306_PrintSettingsMenu+0xca>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 80019f2:	4a20      	ldr	r2, [pc, #128]	; (8001a74 <ssd1306_PrintSettingsMenu+0x140>)
 80019f4:	2301      	movs	r3, #1
 80019f6:	ca06      	ldmia	r2, {r1, r2}
 80019f8:	4821      	ldr	r0, [pc, #132]	; (8001a80 <ssd1306_PrintSettingsMenu+0x14c>)
 80019fa:	f7ff fb03 	bl	8001004 <ssd1306_WriteString>
		}
		y += 10;
 80019fe:	7ffb      	ldrb	r3, [r7, #31]
 8001a00:	330a      	adds	r3, #10
 8001a02:	77fb      	strb	r3, [r7, #31]

		#endif



		 if(value >= 2850 && value <= 2950){
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f640 3221 	movw	r2, #2849	; 0xb21
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	dd0c      	ble.n	8001a28 <ssd1306_PrintSettingsMenu+0xf4>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f640 3286 	movw	r2, #2950	; 0xb86
 8001a14:	4293      	cmp	r3, r2
 8001a16:	dc07      	bgt.n	8001a28 <ssd1306_PrintSettingsMenu+0xf4>
			strcpy(stringDirection, "DERECHA");
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4a19      	ldr	r2, [pc, #100]	; (8001a84 <ssd1306_PrintSettingsMenu+0x150>)
 8001a1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a22:	e883 0003 	stmia.w	r3, {r0, r1}
 8001a26:	e01b      	b.n	8001a60 <ssd1306_PrintSettingsMenu+0x12c>
		}
		else if(value >= 1850 && value <= 1950){
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f240 7239 	movw	r2, #1849	; 0x739
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	dd0b      	ble.n	8001a4a <ssd1306_PrintSettingsMenu+0x116>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f240 729e 	movw	r2, #1950	; 0x79e
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	dc06      	bgt.n	8001a4a <ssd1306_PrintSettingsMenu+0x116>
			strcpy(stringDirection, "IZQUIERDA");
 8001a3c:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <ssd1306_PrintSettingsMenu+0x154>)
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a44:	c303      	stmia	r3!, {r0, r1}
 8001a46:	801a      	strh	r2, [r3, #0]
 8001a48:	e00a      	b.n	8001a60 <ssd1306_PrintSettingsMenu+0x12c>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	4a0f      	ldr	r2, [pc, #60]	; (8001a8c <ssd1306_PrintSettingsMenu+0x158>)
 8001a50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a54:	6018      	str	r0, [r3, #0]
 8001a56:	3304      	adds	r3, #4
 8001a58:	8019      	strh	r1, [r3, #0]
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	0c0a      	lsrs	r2, r1, #16
 8001a5e:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8001a60:	f7ff f9cc 	bl	8000dfc <ssd1306_UpdateScreen>
}
 8001a64:	bf00      	nop
 8001a66:	3720      	adds	r7, #32
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000010 	.word	0x20000010
 8001a70:	08006510 	.word	0x08006510
 8001a74:	20000008 	.word	0x20000008
 8001a78:	080065a8 	.word	0x080065a8
 8001a7c:	080065b8 	.word	0x080065b8
 8001a80:	08006554 	.word	0x08006554
 8001a84:	0800651c 	.word	0x0800651c
 8001a88:	08006524 	.word	0x08006524
 8001a8c:	08006530 	.word	0x08006530

08001a90 <ssd1306_DisplayAnalogValue>:

void ssd1306_DisplayAnalogValue(int value, int indexMenu, int screen) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
	if (screen==1){
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d105      	bne.n	8001aae <ssd1306_DisplayAnalogValue+0x1e>
			   ssd1306_PrintDashboardMenu(value, indexMenu, screen);
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f7ff fc9a 	bl	80013e0 <ssd1306_PrintDashboardMenu>
 8001aac:	e01f      	b.n	8001aee <ssd1306_DisplayAnalogValue+0x5e>
		}
	else if (screen==2){
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d105      	bne.n	8001ac0 <ssd1306_DisplayAnalogValue+0x30>
		   ssd1306_PrintEnergyMenu(value, indexMenu, screen);
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	68b9      	ldr	r1, [r7, #8]
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f7ff fdad 	bl	8001618 <ssd1306_PrintEnergyMenu>
 8001abe:	e016      	b.n	8001aee <ssd1306_DisplayAnalogValue+0x5e>
	}
	else if (screen==3){
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d105      	bne.n	8001ad2 <ssd1306_DisplayAnalogValue+0x42>
		   ssd1306_PrintSettingsMenu(value, indexMenu, screen);
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f7ff ff32 	bl	8001934 <ssd1306_PrintSettingsMenu>
 8001ad0:	e00d      	b.n	8001aee <ssd1306_DisplayAnalogValue+0x5e>
	}else if (screen==4){
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d105      	bne.n	8001ae4 <ssd1306_DisplayAnalogValue+0x54>
		   ssd1306_PrintRFMenu(value, indexMenu, screen);
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	68b9      	ldr	r1, [r7, #8]
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f7ff fe49 	bl	8001774 <ssd1306_PrintRFMenu>
 8001ae2:	e004      	b.n	8001aee <ssd1306_DisplayAnalogValue+0x5e>
	}
	else{
		   ssd1306_PrintPrincipalMenu(value, indexMenu, screen);
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	68b9      	ldr	r1, [r7, #8]
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f7ff fba7 	bl	800123c <ssd1306_PrintPrincipalMenu>
	}
    HAL_Delay(50);
 8001aee:	2032      	movs	r0, #50	; 0x32
 8001af0:	f000 fb8e 	bl	8002210 <HAL_Delay>
}
 8001af4:	bf00      	nop
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <ssd1306_TestDrawBitmapOHMIO>:
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
    ssd1306_UpdateScreen();
}

void ssd1306_TestDrawBitmapOHMIO()
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 8001b02:	2000      	movs	r0, #0
 8001b04:	f7ff f956 	bl	8000db4 <ssd1306_Fill>
	    ssd1306_DrawBitmap(32,0,ohmio_logo_fondoblanco,72,64,White);
 8001b08:	2301      	movs	r3, #1
 8001b0a:	9301      	str	r3, [sp, #4]
 8001b0c:	2340      	movs	r3, #64	; 0x40
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	2348      	movs	r3, #72	; 0x48
 8001b12:	4a07      	ldr	r2, [pc, #28]	; (8001b30 <ssd1306_TestDrawBitmapOHMIO+0x34>)
 8001b14:	2100      	movs	r1, #0
 8001b16:	2020      	movs	r0, #32
 8001b18:	f7ff fab2 	bl	8001080 <ssd1306_DrawBitmap>
	    ssd1306_UpdateScreen();
 8001b1c:	f7ff f96e 	bl	8000dfc <ssd1306_UpdateScreen>
    HAL_Delay(1000);
 8001b20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b24:	f000 fb74 	bl	8002210 <HAL_Delay>

}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	080088f0 	.word	0x080088f0

08001b34 <ssd1306_OhmioSplash>:



void ssd1306_OhmioSplash() {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8001b38:	f7ff f8d2 	bl	8000ce0 <ssd1306_Init>
    ssd1306_TestFonts1();
 8001b3c:	f7ff fb2c 	bl	8001198 <ssd1306_TestFonts1>
    HAL_Delay(3000);
 8001b40:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001b44:	f000 fb64 	bl	8002210 <HAL_Delay>
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <ssd1306_OhmioMenuPrincipal>:

void ssd1306_OhmioMenuPrincipal() {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8001b50:	f7ff f8c6 	bl	8000ce0 <ssd1306_Init>
    ssd1306_TestDrawBitmapOHMIO();
 8001b54:	f7ff ffd2 	bl	8001afc <ssd1306_TestDrawBitmapOHMIO>
    HAL_Delay(3000);
 8001b58:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001b5c:	f000 fb58 	bl	8002210 <HAL_Delay>
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <HAL_MspInit+0x44>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ba8 <HAL_MspInit+0x44>)
 8001b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b74:	6413      	str	r3, [r2, #64]	; 0x40
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <HAL_MspInit+0x44>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_MspInit+0x44>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	4a08      	ldr	r2, [pc, #32]	; (8001ba8 <HAL_MspInit+0x44>)
 8001b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_MspInit+0x44>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800

08001bac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08c      	sub	sp, #48	; 0x30
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a2a      	ldr	r2, [pc, #168]	; (8001c74 <HAL_ADC_MspInit+0xc8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d124      	bne.n	8001c18 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bce:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <HAL_ADC_MspInit+0xcc>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	4a29      	ldr	r2, [pc, #164]	; (8001c78 <HAL_ADC_MspInit+0xcc>)
 8001bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bda:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <HAL_ADC_MspInit+0xcc>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be2:	61bb      	str	r3, [r7, #24]
 8001be4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <HAL_ADC_MspInit+0xcc>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a23      	ldr	r2, [pc, #140]	; (8001c78 <HAL_ADC_MspInit+0xcc>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <HAL_ADC_MspInit+0xcc>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bfe:	2310      	movs	r3, #16
 8001c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c02:	2303      	movs	r3, #3
 8001c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	4619      	mov	r1, r3
 8001c10:	481a      	ldr	r0, [pc, #104]	; (8001c7c <HAL_ADC_MspInit+0xd0>)
 8001c12:	f001 fc7b 	bl	800350c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001c16:	e028      	b.n	8001c6a <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC3)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a18      	ldr	r2, [pc, #96]	; (8001c80 <HAL_ADC_MspInit+0xd4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d123      	bne.n	8001c6a <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <HAL_ADC_MspInit+0xcc>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	4a14      	ldr	r2, [pc, #80]	; (8001c78 <HAL_ADC_MspInit+0xcc>)
 8001c28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_ADC_MspInit+0xcc>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c3a:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <HAL_ADC_MspInit+0xcc>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a0e      	ldr	r2, [pc, #56]	; (8001c78 <HAL_ADC_MspInit+0xcc>)
 8001c40:	f043 0320 	orr.w	r3, r3, #32
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <HAL_ADC_MspInit+0xcc>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0320 	and.w	r3, r3, #32
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c52:	2320      	movs	r3, #32
 8001c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c56:	2303      	movs	r3, #3
 8001c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c5e:	f107 031c 	add.w	r3, r7, #28
 8001c62:	4619      	mov	r1, r3
 8001c64:	4807      	ldr	r0, [pc, #28]	; (8001c84 <HAL_ADC_MspInit+0xd8>)
 8001c66:	f001 fc51 	bl	800350c <HAL_GPIO_Init>
}
 8001c6a:	bf00      	nop
 8001c6c:	3730      	adds	r7, #48	; 0x30
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40012000 	.word	0x40012000
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40020000 	.word	0x40020000
 8001c80:	40012200 	.word	0x40012200
 8001c84:	40021400 	.word	0x40021400

08001c88 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08e      	sub	sp, #56	; 0x38
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a52      	ldr	r2, [pc, #328]	; (8001df0 <HAL_ETH_MspInit+0x168>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	f040 809e 	bne.w	8001de8 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001cac:	4b51      	ldr	r3, [pc, #324]	; (8001df4 <HAL_ETH_MspInit+0x16c>)
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb0:	4a50      	ldr	r2, [pc, #320]	; (8001df4 <HAL_ETH_MspInit+0x16c>)
 8001cb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb8:	4b4e      	ldr	r3, [pc, #312]	; (8001df4 <HAL_ETH_MspInit+0x16c>)
 8001cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc0:	623b      	str	r3, [r7, #32]
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	4b4b      	ldr	r3, [pc, #300]	; (8001df4 <HAL_ETH_MspInit+0x16c>)
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	4a4a      	ldr	r2, [pc, #296]	; (8001df4 <HAL_ETH_MspInit+0x16c>)
 8001cca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cce:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd0:	4b48      	ldr	r3, [pc, #288]	; (8001df4 <HAL_ETH_MspInit+0x16c>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	4b45      	ldr	r3, [pc, #276]	; (8001df4 <HAL_ETH_MspInit+0x16c>)
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	4a44      	ldr	r2, [pc, #272]	; (8001df4 <HAL_ETH_MspInit+0x16c>)
 8001ce2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce8:	4b42      	ldr	r3, [pc, #264]	; (8001df4 <HAL_ETH_MspInit+0x16c>)
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cf0:	61bb      	str	r3, [r7, #24]
 8001cf2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf4:	4b3f      	ldr	r3, [pc, #252]	; (8001df4 <HAL_ETH_MspInit+0x16c>)
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf8:	4a3e      	ldr	r2, [pc, #248]	; (8001df4 <HAL_ETH_MspInit+0x16c>)
 8001cfa:	f043 0304 	orr.w	r3, r3, #4
 8001cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8001d00:	4b3c      	ldr	r3, [pc, #240]	; (8001df4 <HAL_ETH_MspInit+0x16c>)
 8001d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0c:	4b39      	ldr	r3, [pc, #228]	; (8001df4 <HAL_ETH_MspInit+0x16c>)
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d10:	4a38      	ldr	r2, [pc, #224]	; (8001df4 <HAL_ETH_MspInit+0x16c>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	6313      	str	r3, [r2, #48]	; 0x30
 8001d18:	4b36      	ldr	r3, [pc, #216]	; (8001df4 <HAL_ETH_MspInit+0x16c>)
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d24:	4b33      	ldr	r3, [pc, #204]	; (8001df4 <HAL_ETH_MspInit+0x16c>)
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	4a32      	ldr	r2, [pc, #200]	; (8001df4 <HAL_ETH_MspInit+0x16c>)
 8001d2a:	f043 0302 	orr.w	r3, r3, #2
 8001d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d30:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <HAL_ETH_MspInit+0x16c>)
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d3c:	4b2d      	ldr	r3, [pc, #180]	; (8001df4 <HAL_ETH_MspInit+0x16c>)
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	4a2c      	ldr	r2, [pc, #176]	; (8001df4 <HAL_ETH_MspInit+0x16c>)
 8001d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d46:	6313      	str	r3, [r2, #48]	; 0x30
 8001d48:	4b2a      	ldr	r3, [pc, #168]	; (8001df4 <HAL_ETH_MspInit+0x16c>)
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001d54:	2332      	movs	r3, #50	; 0x32
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d60:	2303      	movs	r3, #3
 8001d62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d64:	230b      	movs	r3, #11
 8001d66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4822      	ldr	r0, [pc, #136]	; (8001df8 <HAL_ETH_MspInit+0x170>)
 8001d70:	f001 fbcc 	bl	800350c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001d74:	2386      	movs	r3, #134	; 0x86
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d80:	2303      	movs	r3, #3
 8001d82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d84:	230b      	movs	r3, #11
 8001d86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	481b      	ldr	r0, [pc, #108]	; (8001dfc <HAL_ETH_MspInit+0x174>)
 8001d90:	f001 fbbc 	bl	800350c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|RMII_TXD1_Pin;
 8001d94:	f242 0301 	movw	r3, #8193	; 0x2001
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da2:	2303      	movs	r3, #3
 8001da4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001da6:	230b      	movs	r3, #11
 8001da8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dae:	4619      	mov	r1, r3
 8001db0:	4813      	ldr	r0, [pc, #76]	; (8001e00 <HAL_ETH_MspInit+0x178>)
 8001db2:	f001 fbab 	bl	800350c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001db6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dc8:	230b      	movs	r3, #11
 8001dca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	480c      	ldr	r0, [pc, #48]	; (8001e04 <HAL_ETH_MspInit+0x17c>)
 8001dd4:	f001 fb9a 	bl	800350c <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2100      	movs	r1, #0
 8001ddc:	203d      	movs	r0, #61	; 0x3d
 8001dde:	f000 ff44 	bl	8002c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8001de2:	203d      	movs	r0, #61	; 0x3d
 8001de4:	f000 ff5d 	bl	8002ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001de8:	bf00      	nop
 8001dea:	3738      	adds	r7, #56	; 0x38
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40028000 	.word	0x40028000
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40020800 	.word	0x40020800
 8001dfc:	40020000 	.word	0x40020000
 8001e00:	40020400 	.word	0x40020400
 8001e04:	40021800 	.word	0x40021800

08001e08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b0aa      	sub	sp, #168	; 0xa8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e20:	f107 0310 	add.w	r3, r7, #16
 8001e24:	2284      	movs	r2, #132	; 0x84
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f004 fb33 	bl	8006494 <memset>
  if(hi2c->Instance==I2C2)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a21      	ldr	r2, [pc, #132]	; (8001eb8 <HAL_I2C_MspInit+0xb0>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d13b      	bne.n	8001eb0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e3c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e42:	f107 0310 	add.w	r3, r7, #16
 8001e46:	4618      	mov	r0, r3
 8001e48:	f002 ffca 	bl	8004de0 <HAL_RCCEx_PeriphCLKConfig>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e52:	f7fe ff07 	bl	8000c64 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e56:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <HAL_I2C_MspInit+0xb4>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a18      	ldr	r2, [pc, #96]	; (8001ebc <HAL_I2C_MspInit+0xb4>)
 8001e5c:	f043 0320 	orr.w	r3, r3, #32
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <HAL_I2C_MspInit+0xb4>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0320 	and.w	r3, r3, #32
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e74:	2312      	movs	r3, #18
 8001e76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e80:	2303      	movs	r3, #3
 8001e82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e86:	2304      	movs	r3, #4
 8001e88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e8c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e90:	4619      	mov	r1, r3
 8001e92:	480b      	ldr	r0, [pc, #44]	; (8001ec0 <HAL_I2C_MspInit+0xb8>)
 8001e94:	f001 fb3a 	bl	800350c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <HAL_I2C_MspInit+0xb4>)
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	4a07      	ldr	r2, [pc, #28]	; (8001ebc <HAL_I2C_MspInit+0xb4>)
 8001e9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ea2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <HAL_I2C_MspInit+0xb4>)
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001eb0:	bf00      	nop
 8001eb2:	37a8      	adds	r7, #168	; 0xa8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40005800 	.word	0x40005800
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40021400 	.word	0x40021400

08001ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b0aa      	sub	sp, #168	; 0xa8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001edc:	f107 0310 	add.w	r3, r7, #16
 8001ee0:	2284      	movs	r2, #132	; 0x84
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f004 fad5 	bl	8006494 <memset>
  if(huart->Instance==USART3)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a22      	ldr	r2, [pc, #136]	; (8001f78 <HAL_UART_MspInit+0xb4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d13c      	bne.n	8001f6e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ef4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ef8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001efa:	2300      	movs	r3, #0
 8001efc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001efe:	f107 0310 	add.w	r3, r7, #16
 8001f02:	4618      	mov	r0, r3
 8001f04:	f002 ff6c 	bl	8004de0 <HAL_RCCEx_PeriphCLKConfig>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f0e:	f7fe fea9 	bl	8000c64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f12:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <HAL_UART_MspInit+0xb8>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	4a19      	ldr	r2, [pc, #100]	; (8001f7c <HAL_UART_MspInit+0xb8>)
 8001f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1e:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <HAL_UART_MspInit+0xb8>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f2a:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <HAL_UART_MspInit+0xb8>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a13      	ldr	r2, [pc, #76]	; (8001f7c <HAL_UART_MspInit+0xb8>)
 8001f30:	f043 0308 	orr.w	r3, r3, #8
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_UART_MspInit+0xb8>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f50:	2301      	movs	r3, #1
 8001f52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f56:	2303      	movs	r3, #3
 8001f58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f5c:	2307      	movs	r3, #7
 8001f5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f62:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f66:	4619      	mov	r1, r3
 8001f68:	4805      	ldr	r0, [pc, #20]	; (8001f80 <HAL_UART_MspInit+0xbc>)
 8001f6a:	f001 facf 	bl	800350c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f6e:	bf00      	nop
 8001f70:	37a8      	adds	r7, #168	; 0xa8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40004800 	.word	0x40004800
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40020c00 	.word	0x40020c00

08001f84 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b0ac      	sub	sp, #176	; 0xb0
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f9c:	f107 0318 	add.w	r3, r7, #24
 8001fa0:	2284      	movs	r2, #132	; 0x84
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f004 fa75 	bl	8006494 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fb2:	d159      	bne.n	8002068 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001fb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fb8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fc0:	f107 0318 	add.w	r3, r7, #24
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f002 ff0b 	bl	8004de0 <HAL_RCCEx_PeriphCLKConfig>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001fd0:	f7fe fe48 	bl	8000c64 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd4:	4b26      	ldr	r3, [pc, #152]	; (8002070 <HAL_PCD_MspInit+0xec>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	4a25      	ldr	r2, [pc, #148]	; (8002070 <HAL_PCD_MspInit+0xec>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe0:	4b23      	ldr	r3, [pc, #140]	; (8002070 <HAL_PCD_MspInit+0xec>)
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001fec:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001ff0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002000:	2303      	movs	r3, #3
 8002002:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002006:	230a      	movs	r3, #10
 8002008:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002010:	4619      	mov	r1, r3
 8002012:	4818      	ldr	r0, [pc, #96]	; (8002074 <HAL_PCD_MspInit+0xf0>)
 8002014:	f001 fa7a 	bl	800350c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800201c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002020:	2300      	movs	r3, #0
 8002022:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800202c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002030:	4619      	mov	r1, r3
 8002032:	4810      	ldr	r0, [pc, #64]	; (8002074 <HAL_PCD_MspInit+0xf0>)
 8002034:	f001 fa6a 	bl	800350c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <HAL_PCD_MspInit+0xec>)
 800203a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203c:	4a0c      	ldr	r2, [pc, #48]	; (8002070 <HAL_PCD_MspInit+0xec>)
 800203e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002042:	6353      	str	r3, [r2, #52]	; 0x34
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_PCD_MspInit+0xec>)
 8002046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	4b07      	ldr	r3, [pc, #28]	; (8002070 <HAL_PCD_MspInit+0xec>)
 8002052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002054:	4a06      	ldr	r2, [pc, #24]	; (8002070 <HAL_PCD_MspInit+0xec>)
 8002056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800205a:	6453      	str	r3, [r2, #68]	; 0x44
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <HAL_PCD_MspInit+0xec>)
 800205e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002068:	bf00      	nop
 800206a:	37b0      	adds	r7, #176	; 0xb0
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40023800 	.word	0x40023800
 8002074:	40020000 	.word	0x40020000

08002078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800207c:	e7fe      	b.n	800207c <NMI_Handler+0x4>

0800207e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002082:	e7fe      	b.n	8002082 <HardFault_Handler+0x4>

08002084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002088:	e7fe      	b.n	8002088 <MemManage_Handler+0x4>

0800208a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800208e:	e7fe      	b.n	800208e <BusFault_Handler+0x4>

08002090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002094:	e7fe      	b.n	8002094 <UsageFault_Handler+0x4>

08002096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020c4:	f000 f884 	bl	80021d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}

080020cc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80020d0:	4802      	ldr	r0, [pc, #8]	; (80020dc <ETH_IRQHandler+0x10>)
 80020d2:	f000 fe7d 	bl	8002dd0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	2000024c 	.word	0x2000024c

080020e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <SystemInit+0x20>)
 80020e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ea:	4a05      	ldr	r2, [pc, #20]	; (8002100 <SystemInit+0x20>)
 80020ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800213c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002108:	480d      	ldr	r0, [pc, #52]	; (8002140 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800210a:	490e      	ldr	r1, [pc, #56]	; (8002144 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800210c:	4a0e      	ldr	r2, [pc, #56]	; (8002148 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800210e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002110:	e002      	b.n	8002118 <LoopCopyDataInit>

08002112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002116:	3304      	adds	r3, #4

08002118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800211c:	d3f9      	bcc.n	8002112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211e:	4a0b      	ldr	r2, [pc, #44]	; (800214c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002120:	4c0b      	ldr	r4, [pc, #44]	; (8002150 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002124:	e001      	b.n	800212a <LoopFillZerobss>

08002126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002128:	3204      	adds	r2, #4

0800212a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800212c:	d3fb      	bcc.n	8002126 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800212e:	f7ff ffd7 	bl	80020e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002132:	f004 f98b 	bl	800644c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002136:	f7fe f9e9 	bl	800050c <main>
  bx  lr    
 800213a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800213c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002144:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002148:	08008b58 	.word	0x08008b58
  ldr r2, =_sbss
 800214c:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8002150:	20000cfc 	.word	0x20000cfc

08002154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002154:	e7fe      	b.n	8002154 <ADC_IRQHandler>

08002156 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800215a:	2003      	movs	r0, #3
 800215c:	f000 fd7a 	bl	8002c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002160:	2000      	movs	r0, #0
 8002162:	f000 f805 	bl	8002170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002166:	f7ff fcfd 	bl	8001b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002178:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_InitTick+0x54>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_InitTick+0x58>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4619      	mov	r1, r3
 8002182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002186:	fbb3 f3f1 	udiv	r3, r3, r1
 800218a:	fbb2 f3f3 	udiv	r3, r2, r3
 800218e:	4618      	mov	r0, r3
 8002190:	f000 fd95 	bl	8002cbe <HAL_SYSTICK_Config>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e00e      	b.n	80021bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b0f      	cmp	r3, #15
 80021a2:	d80a      	bhi.n	80021ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a4:	2200      	movs	r2, #0
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ac:	f000 fd5d 	bl	8002c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b0:	4a06      	ldr	r2, [pc, #24]	; (80021cc <HAL_InitTick+0x5c>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e000      	b.n	80021bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000018 	.word	0x20000018
 80021c8:	20000020 	.word	0x20000020
 80021cc:	2000001c 	.word	0x2000001c

080021d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_IncTick+0x20>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_IncTick+0x24>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <HAL_IncTick+0x24>)
 80021e2:	6013      	str	r3, [r2, #0]
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20000020 	.word	0x20000020
 80021f4:	20000cf8 	.word	0x20000cf8

080021f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return uwTick;
 80021fc:	4b03      	ldr	r3, [pc, #12]	; (800220c <HAL_GetTick+0x14>)
 80021fe:	681b      	ldr	r3, [r3, #0]
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000cf8 	.word	0x20000cf8

08002210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002218:	f7ff ffee 	bl	80021f8 <HAL_GetTick>
 800221c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002228:	d005      	beq.n	8002236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800222a:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <HAL_Delay+0x44>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4413      	add	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002236:	bf00      	nop
 8002238:	f7ff ffde 	bl	80021f8 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	429a      	cmp	r2, r3
 8002246:	d8f7      	bhi.n	8002238 <HAL_Delay+0x28>
  {
  }
}
 8002248:	bf00      	nop
 800224a:	bf00      	nop
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000020 	.word	0x20000020

08002258 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e031      	b.n	80022d2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff fc98 	bl	8001bac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f003 0310 	and.w	r3, r3, #16
 8002292:	2b00      	cmp	r3, #0
 8002294:	d116      	bne.n	80022c4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <HAL_ADC_Init+0x84>)
 800229c:	4013      	ands	r3, r2
 800229e:	f043 0202 	orr.w	r2, r3, #2
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 fb0a 	bl	80028c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	f023 0303 	bic.w	r3, r3, #3
 80022ba:	f043 0201 	orr.w	r2, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	641a      	str	r2, [r3, #64]	; 0x40
 80022c2:	e001      	b.n	80022c8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	ffffeefd 	.word	0xffffeefd

080022e0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_ADC_Start+0x1a>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e0ad      	b.n	8002456 <HAL_ADC_Start+0x176>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b01      	cmp	r3, #1
 800230e:	d018      	beq.n	8002342 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002320:	4b50      	ldr	r3, [pc, #320]	; (8002464 <HAL_ADC_Start+0x184>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a50      	ldr	r2, [pc, #320]	; (8002468 <HAL_ADC_Start+0x188>)
 8002326:	fba2 2303 	umull	r2, r3, r2, r3
 800232a:	0c9a      	lsrs	r2, r3, #18
 800232c:	4613      	mov	r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	4413      	add	r3, r2
 8002332:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002334:	e002      	b.n	800233c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	3b01      	subs	r3, #1
 800233a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f9      	bne.n	8002336 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b01      	cmp	r3, #1
 800234e:	d175      	bne.n	800243c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002354:	4b45      	ldr	r3, [pc, #276]	; (800246c <HAL_ADC_Start+0x18c>)
 8002356:	4013      	ands	r3, r2
 8002358:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800236a:	2b00      	cmp	r3, #0
 800236c:	d007      	beq.n	800237e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002376:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800238a:	d106      	bne.n	800239a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002390:	f023 0206 	bic.w	r2, r3, #6
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	645a      	str	r2, [r3, #68]	; 0x44
 8002398:	e002      	b.n	80023a0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80023b0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80023b2:	4b2f      	ldr	r3, [pc, #188]	; (8002470 <HAL_ADC_Start+0x190>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 031f 	and.w	r3, r3, #31
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10f      	bne.n	80023de <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d143      	bne.n	8002454 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	e03a      	b.n	8002454 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a24      	ldr	r2, [pc, #144]	; (8002474 <HAL_ADC_Start+0x194>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d10e      	bne.n	8002406 <HAL_ADC_Start+0x126>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d107      	bne.n	8002406 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002404:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002406:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <HAL_ADC_Start+0x190>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0310 	and.w	r3, r3, #16
 800240e:	2b00      	cmp	r3, #0
 8002410:	d120      	bne.n	8002454 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a18      	ldr	r2, [pc, #96]	; (8002478 <HAL_ADC_Start+0x198>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d11b      	bne.n	8002454 <HAL_ADC_Start+0x174>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d114      	bne.n	8002454 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	e00b      	b.n	8002454 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	f043 0210 	orr.w	r2, r3, #16
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244c:	f043 0201 	orr.w	r2, r3, #1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000018 	.word	0x20000018
 8002468:	431bde83 	.word	0x431bde83
 800246c:	fffff8fe 	.word	0xfffff8fe
 8002470:	40012300 	.word	0x40012300
 8002474:	40012000 	.word	0x40012000
 8002478:	40012200 	.word	0x40012200

0800247c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_ADC_Stop+0x16>
 800248e:	2302      	movs	r3, #2
 8002490:	e01f      	b.n	80024d2 <HAL_ADC_Stop+0x56>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0201 	bic.w	r2, r2, #1
 80024a8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d107      	bne.n	80024c8 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024bc:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <HAL_ADC_Stop+0x64>)
 80024be:	4013      	ands	r3, r2
 80024c0:	f043 0201 	orr.w	r2, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	ffffeefe 	.word	0xffffeefe

080024e4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002500:	d113      	bne.n	800252a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800250c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002510:	d10b      	bne.n	800252a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f043 0220 	orr.w	r2, r3, #32
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e063      	b.n	80025f2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800252a:	f7ff fe65 	bl	80021f8 <HAL_GetTick>
 800252e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002530:	e021      	b.n	8002576 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002538:	d01d      	beq.n	8002576 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d007      	beq.n	8002550 <HAL_ADC_PollForConversion+0x6c>
 8002540:	f7ff fe5a 	bl	80021f8 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d212      	bcs.n	8002576 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b02      	cmp	r3, #2
 800255c:	d00b      	beq.n	8002576 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f043 0204 	orr.w	r2, r3, #4
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e03d      	b.n	80025f2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b02      	cmp	r3, #2
 8002582:	d1d6      	bne.n	8002532 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f06f 0212 	mvn.w	r2, #18
 800258c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d123      	bne.n	80025f0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d11f      	bne.n	80025f0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d006      	beq.n	80025cc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d111      	bne.n	80025f0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d105      	bne.n	80025f0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	f043 0201 	orr.w	r2, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002608:	4618      	mov	r0, r3
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x1c>
 800262c:	2302      	movs	r3, #2
 800262e:	e136      	b.n	800289e <HAL_ADC_ConfigChannel+0x28a>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b09      	cmp	r3, #9
 800263e:	d93a      	bls.n	80026b6 <HAL_ADC_ConfigChannel+0xa2>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002648:	d035      	beq.n	80026b6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68d9      	ldr	r1, [r3, #12]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	b29b      	uxth	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	4613      	mov	r3, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	4413      	add	r3, r2
 800265e:	3b1e      	subs	r3, #30
 8002660:	2207      	movs	r2, #7
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43da      	mvns	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	400a      	ands	r2, r1
 800266e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a8d      	ldr	r2, [pc, #564]	; (80028ac <HAL_ADC_ConfigChannel+0x298>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d10a      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68d9      	ldr	r1, [r3, #12]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	061a      	lsls	r2, r3, #24
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800268e:	e035      	b.n	80026fc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68d9      	ldr	r1, [r3, #12]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	4618      	mov	r0, r3
 80026a2:	4603      	mov	r3, r0
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4403      	add	r3, r0
 80026a8:	3b1e      	subs	r3, #30
 80026aa:	409a      	lsls	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026b4:	e022      	b.n	80026fc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6919      	ldr	r1, [r3, #16]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	4613      	mov	r3, r2
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	4413      	add	r3, r2
 80026ca:	2207      	movs	r2, #7
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43da      	mvns	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	400a      	ands	r2, r1
 80026d8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6919      	ldr	r1, [r3, #16]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	4618      	mov	r0, r3
 80026ec:	4603      	mov	r3, r0
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4403      	add	r3, r0
 80026f2:	409a      	lsls	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b06      	cmp	r3, #6
 8002702:	d824      	bhi.n	800274e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	3b05      	subs	r3, #5
 8002716:	221f      	movs	r2, #31
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43da      	mvns	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	400a      	ands	r2, r1
 8002724:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	b29b      	uxth	r3, r3
 8002732:	4618      	mov	r0, r3
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	3b05      	subs	r3, #5
 8002740:	fa00 f203 	lsl.w	r2, r0, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	635a      	str	r2, [r3, #52]	; 0x34
 800274c:	e04c      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b0c      	cmp	r3, #12
 8002754:	d824      	bhi.n	80027a0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	3b23      	subs	r3, #35	; 0x23
 8002768:	221f      	movs	r2, #31
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43da      	mvns	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	400a      	ands	r2, r1
 8002776:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	b29b      	uxth	r3, r3
 8002784:	4618      	mov	r0, r3
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	3b23      	subs	r3, #35	; 0x23
 8002792:	fa00 f203 	lsl.w	r2, r0, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	631a      	str	r2, [r3, #48]	; 0x30
 800279e:	e023      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	3b41      	subs	r3, #65	; 0x41
 80027b2:	221f      	movs	r2, #31
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43da      	mvns	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	400a      	ands	r2, r1
 80027c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	4618      	mov	r0, r3
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	3b41      	subs	r3, #65	; 0x41
 80027dc:	fa00 f203 	lsl.w	r2, r0, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a30      	ldr	r2, [pc, #192]	; (80028b0 <HAL_ADC_ConfigChannel+0x29c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d10a      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x1f4>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027fa:	d105      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80027fc:	4b2d      	ldr	r3, [pc, #180]	; (80028b4 <HAL_ADC_ConfigChannel+0x2a0>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4a2c      	ldr	r2, [pc, #176]	; (80028b4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002802:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002806:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a28      	ldr	r2, [pc, #160]	; (80028b0 <HAL_ADC_ConfigChannel+0x29c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d10f      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x21e>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2b12      	cmp	r3, #18
 8002818:	d10b      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800281a:	4b26      	ldr	r3, [pc, #152]	; (80028b4 <HAL_ADC_ConfigChannel+0x2a0>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4a25      	ldr	r2, [pc, #148]	; (80028b4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002820:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002824:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002826:	4b23      	ldr	r3, [pc, #140]	; (80028b4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	4a22      	ldr	r2, [pc, #136]	; (80028b4 <HAL_ADC_ConfigChannel+0x2a0>)
 800282c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002830:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a1e      	ldr	r2, [pc, #120]	; (80028b0 <HAL_ADC_ConfigChannel+0x29c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d12b      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x280>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a1a      	ldr	r2, [pc, #104]	; (80028ac <HAL_ADC_ConfigChannel+0x298>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d003      	beq.n	800284e <HAL_ADC_ConfigChannel+0x23a>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b11      	cmp	r3, #17
 800284c:	d122      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800284e:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4a18      	ldr	r2, [pc, #96]	; (80028b4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002854:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002858:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800285a:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <HAL_ADC_ConfigChannel+0x2a0>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	4a15      	ldr	r2, [pc, #84]	; (80028b4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002860:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002864:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a10      	ldr	r2, [pc, #64]	; (80028ac <HAL_ADC_ConfigChannel+0x298>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d111      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <HAL_ADC_ConfigChannel+0x2a4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a11      	ldr	r2, [pc, #68]	; (80028bc <HAL_ADC_ConfigChannel+0x2a8>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	0c9a      	lsrs	r2, r3, #18
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002886:	e002      	b.n	800288e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3b01      	subs	r3, #1
 800288c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f9      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	10000012 	.word	0x10000012
 80028b0:	40012000 	.word	0x40012000
 80028b4:	40012300 	.word	0x40012300
 80028b8:	20000018 	.word	0x20000018
 80028bc:	431bde83 	.word	0x431bde83

080028c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80028c8:	4b78      	ldr	r3, [pc, #480]	; (8002aac <ADC_Init+0x1ec>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4a77      	ldr	r2, [pc, #476]	; (8002aac <ADC_Init+0x1ec>)
 80028ce:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80028d2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80028d4:	4b75      	ldr	r3, [pc, #468]	; (8002aac <ADC_Init+0x1ec>)
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	4973      	ldr	r1, [pc, #460]	; (8002aac <ADC_Init+0x1ec>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6859      	ldr	r1, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	021a      	lsls	r2, r3, #8
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002914:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6859      	ldr	r1, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002936:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6899      	ldr	r1, [r3, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294e:	4a58      	ldr	r2, [pc, #352]	; (8002ab0 <ADC_Init+0x1f0>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d022      	beq.n	800299a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002962:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6899      	ldr	r1, [r3, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002984:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6899      	ldr	r1, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	e00f      	b.n	80029ba <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0202 	bic.w	r2, r2, #2
 80029c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6899      	ldr	r1, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	005a      	lsls	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d01b      	beq.n	8002a20 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6859      	ldr	r1, [r3, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	3b01      	subs	r3, #1
 8002a14:	035a      	lsls	r2, r3, #13
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	e007      	b.n	8002a30 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	051a      	lsls	r2, r3, #20
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6899      	ldr	r1, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a72:	025a      	lsls	r2, r3, #9
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6899      	ldr	r1, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	029a      	lsls	r2, r3, #10
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	609a      	str	r2, [r3, #8]
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	40012300 	.word	0x40012300
 8002ab0:	0f000001 	.word	0x0f000001

08002ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ae2:	4a04      	ldr	r2, [pc, #16]	; (8002af4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	60d3      	str	r3, [r2, #12]
}
 8002ae8:	bf00      	nop
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	e000ed00 	.word	0xe000ed00
 8002af8:	05fa0000 	.word	0x05fa0000

08002afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b00:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <__NVIC_GetPriorityGrouping+0x18>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	0a1b      	lsrs	r3, r3, #8
 8002b06:	f003 0307 	and.w	r3, r3, #7
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	db0b      	blt.n	8002b42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	f003 021f 	and.w	r2, r3, #31
 8002b30:	4907      	ldr	r1, [pc, #28]	; (8002b50 <__NVIC_EnableIRQ+0x38>)
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	095b      	lsrs	r3, r3, #5
 8002b38:	2001      	movs	r0, #1
 8002b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	e000e100 	.word	0xe000e100

08002b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	6039      	str	r1, [r7, #0]
 8002b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	db0a      	blt.n	8002b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	490c      	ldr	r1, [pc, #48]	; (8002ba0 <__NVIC_SetPriority+0x4c>)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	0112      	lsls	r2, r2, #4
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	440b      	add	r3, r1
 8002b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b7c:	e00a      	b.n	8002b94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	4908      	ldr	r1, [pc, #32]	; (8002ba4 <__NVIC_SetPriority+0x50>)
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	3b04      	subs	r3, #4
 8002b8c:	0112      	lsls	r2, r2, #4
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	440b      	add	r3, r1
 8002b92:	761a      	strb	r2, [r3, #24]
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	e000e100 	.word	0xe000e100
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b089      	sub	sp, #36	; 0x24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f1c3 0307 	rsb	r3, r3, #7
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	bf28      	it	cs
 8002bc6:	2304      	movcs	r3, #4
 8002bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	2b06      	cmp	r3, #6
 8002bd0:	d902      	bls.n	8002bd8 <NVIC_EncodePriority+0x30>
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	3b03      	subs	r3, #3
 8002bd6:	e000      	b.n	8002bda <NVIC_EncodePriority+0x32>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43da      	mvns	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	401a      	ands	r2, r3
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfa:	43d9      	mvns	r1, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c00:	4313      	orrs	r3, r2
         );
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3724      	adds	r7, #36	; 0x24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
	...

08002c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c20:	d301      	bcc.n	8002c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c22:	2301      	movs	r3, #1
 8002c24:	e00f      	b.n	8002c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c26:	4a0a      	ldr	r2, [pc, #40]	; (8002c50 <SysTick_Config+0x40>)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c2e:	210f      	movs	r1, #15
 8002c30:	f04f 30ff 	mov.w	r0, #4294967295
 8002c34:	f7ff ff8e 	bl	8002b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c38:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <SysTick_Config+0x40>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c3e:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <SysTick_Config+0x40>)
 8002c40:	2207      	movs	r2, #7
 8002c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	e000e010 	.word	0xe000e010

08002c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7ff ff29 	bl	8002ab4 <__NVIC_SetPriorityGrouping>
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b086      	sub	sp, #24
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	4603      	mov	r3, r0
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
 8002c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c7c:	f7ff ff3e 	bl	8002afc <__NVIC_GetPriorityGrouping>
 8002c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68b9      	ldr	r1, [r7, #8]
 8002c86:	6978      	ldr	r0, [r7, #20]
 8002c88:	f7ff ff8e 	bl	8002ba8 <NVIC_EncodePriority>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c92:	4611      	mov	r1, r2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff5d 	bl	8002b54 <__NVIC_SetPriority>
}
 8002c9a:	bf00      	nop
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	4603      	mov	r3, r0
 8002caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff ff31 	bl	8002b18 <__NVIC_EnableIRQ>
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff ffa2 	bl	8002c10 <SysTick_Config>
 8002ccc:	4603      	mov	r3, r0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e06a      	b.n	8002dc0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d106      	bne.n	8002d02 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2223      	movs	r2, #35	; 0x23
 8002cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7fe ffc3 	bl	8001c88 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d02:	4b31      	ldr	r3, [pc, #196]	; (8002dc8 <HAL_ETH_Init+0xf0>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	4a30      	ldr	r2, [pc, #192]	; (8002dc8 <HAL_ETH_Init+0xf0>)
 8002d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0e:	4b2e      	ldr	r3, [pc, #184]	; (8002dc8 <HAL_ETH_Init+0xf0>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002d1a:	4b2c      	ldr	r3, [pc, #176]	; (8002dcc <HAL_ETH_Init+0xf4>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	4a2b      	ldr	r2, [pc, #172]	; (8002dcc <HAL_ETH_Init+0xf4>)
 8002d20:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d24:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002d26:	4b29      	ldr	r3, [pc, #164]	; (8002dcc <HAL_ETH_Init+0xf4>)
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	4927      	ldr	r1, [pc, #156]	; (8002dcc <HAL_ETH_Init+0xf4>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002d34:	4b25      	ldr	r3, [pc, #148]	; (8002dcc <HAL_ETH_Init+0xf4>)
 8002d36:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d50:	f7ff fa52 	bl	80021f8 <HAL_GetTick>
 8002d54:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002d56:	e011      	b.n	8002d7c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002d58:	f7ff fa4e 	bl	80021f8 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d66:	d909      	bls.n	8002d7c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2204      	movs	r2, #4
 8002d6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	22e0      	movs	r2, #224	; 0xe0
 8002d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e021      	b.n	8002dc0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1e4      	bne.n	8002d58 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fa4c 	bl	800322c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 faf3 	bl	8003380 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fb49 	bl	8003432 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	461a      	mov	r2, r3
 8002da6:	2100      	movs	r1, #0
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 fab1 	bl	8003310 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2210      	movs	r2, #16
 8002dba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40013800 	.word	0x40013800

08002dd0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de6:	2b40      	cmp	r3, #64	; 0x40
 8002de8:	d112      	bne.n	8002e10 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df8:	2b40      	cmp	r3, #64	; 0x40
 8002dfa:	d109      	bne.n	8002e10 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e04:	461a      	mov	r2, r3
 8002e06:	4b50      	ldr	r3, [pc, #320]	; (8002f48 <HAL_ETH_IRQHandler+0x178>)
 8002e08:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f8ac 	bl	8002f68 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d113      	bne.n	8002e4a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d10a      	bne.n	8002e4a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002e42:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f885 	bl	8002f54 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e5c:	d14c      	bne.n	8002ef8 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e70:	d142      	bne.n	8002ef8 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e78:	f043 0208 	orr.w	r2, r3, #8
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e94:	d11a      	bne.n	8002ecc <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e9e:	695a      	ldr	r2, [r3, #20]
 8002ea0:	4b2a      	ldr	r3, [pc, #168]	; (8002f4c <HAL_ETH_IRQHandler+0x17c>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002ebc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ec0:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	22e0      	movs	r2, #224	; 0xe0
 8002ec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002eca:	e012      	b.n	8002ef2 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	f248 6380 	movw	r3, #34432	; 0x8680
 8002eda:	4013      	ands	r3, r2
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eea:	461a      	mov	r2, r3
 8002eec:	f248 6380 	movw	r3, #34432	; 0x8680
 8002ef0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f842 	bl	8002f7c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d10e      	bne.n	8002f24 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f83a 	bl	8002f90 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002f24:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <HAL_ETH_IRQHandler+0x180>)
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d006      	beq.n	8002f3e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002f30:	4b07      	ldr	r3, [pc, #28]	; (8002f50 <HAL_ETH_IRQHandler+0x180>)
 8002f32:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002f36:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f833 	bl	8002fa4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	00010040 	.word	0x00010040
 8002f4c:	007e2000 	.word	0x007e2000
 8002f50:	40013c00 	.word	0x40013c00

08002f54 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4b51      	ldr	r3, [pc, #324]	; (8003114 <ETH_SetMACConfig+0x15c>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	7c1b      	ldrb	r3, [r3, #16]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d102      	bne.n	8002fe0 <ETH_SetMACConfig+0x28>
 8002fda:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002fde:	e000      	b.n	8002fe2 <ETH_SetMACConfig+0x2a>
 8002fe0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	7c5b      	ldrb	r3, [r3, #17]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d102      	bne.n	8002ff0 <ETH_SetMACConfig+0x38>
 8002fea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fee:	e000      	b.n	8002ff2 <ETH_SetMACConfig+0x3a>
 8002ff0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ff2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ff8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	7fdb      	ldrb	r3, [r3, #31]
 8002ffe:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003000:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003006:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	7f92      	ldrb	r2, [r2, #30]
 800300c:	2a00      	cmp	r2, #0
 800300e:	d102      	bne.n	8003016 <ETH_SetMACConfig+0x5e>
 8003010:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003014:	e000      	b.n	8003018 <ETH_SetMACConfig+0x60>
 8003016:	2200      	movs	r2, #0
                        macconf->Speed |
 8003018:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	7f1b      	ldrb	r3, [r3, #28]
 800301e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003020:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003026:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	791b      	ldrb	r3, [r3, #4]
 800302c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800302e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003036:	2a00      	cmp	r2, #0
 8003038:	d102      	bne.n	8003040 <ETH_SetMACConfig+0x88>
 800303a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800303e:	e000      	b.n	8003042 <ETH_SetMACConfig+0x8a>
 8003040:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003042:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	7bdb      	ldrb	r3, [r3, #15]
 8003048:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800304a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003050:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003058:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800305a:	4313      	orrs	r3, r2
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003072:	2001      	movs	r0, #1
 8003074:	f7ff f8cc 	bl	8002210 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800308e:	4013      	ands	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003096:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800309e:	2a00      	cmp	r2, #0
 80030a0:	d101      	bne.n	80030a6 <ETH_SetMACConfig+0xee>
 80030a2:	2280      	movs	r2, #128	; 0x80
 80030a4:	e000      	b.n	80030a8 <ETH_SetMACConfig+0xf0>
 80030a6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80030a8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80030ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80030b6:	2a01      	cmp	r2, #1
 80030b8:	d101      	bne.n	80030be <ETH_SetMACConfig+0x106>
 80030ba:	2208      	movs	r2, #8
 80030bc:	e000      	b.n	80030c0 <ETH_SetMACConfig+0x108>
 80030be:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80030c0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80030c8:	2a01      	cmp	r2, #1
 80030ca:	d101      	bne.n	80030d0 <ETH_SetMACConfig+0x118>
 80030cc:	2204      	movs	r2, #4
 80030ce:	e000      	b.n	80030d2 <ETH_SetMACConfig+0x11a>
 80030d0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80030d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80030da:	2a01      	cmp	r2, #1
 80030dc:	d101      	bne.n	80030e2 <ETH_SetMACConfig+0x12a>
 80030de:	2202      	movs	r2, #2
 80030e0:	e000      	b.n	80030e4 <ETH_SetMACConfig+0x12c>
 80030e2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80030e4:	4313      	orrs	r3, r2
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030fc:	2001      	movs	r0, #1
 80030fe:	f7ff f887 	bl	8002210 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	619a      	str	r2, [r3, #24]
}
 800310a:	bf00      	nop
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	ff20810f 	.word	0xff20810f

08003118 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4b3d      	ldr	r3, [pc, #244]	; (8003228 <ETH_SetDMAConfig+0x110>)
 8003132:	4013      	ands	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	7b1b      	ldrb	r3, [r3, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d102      	bne.n	8003144 <ETH_SetDMAConfig+0x2c>
 800313e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003142:	e000      	b.n	8003146 <ETH_SetDMAConfig+0x2e>
 8003144:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	7b5b      	ldrb	r3, [r3, #13]
 800314a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800314c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	7f52      	ldrb	r2, [r2, #29]
 8003152:	2a00      	cmp	r2, #0
 8003154:	d102      	bne.n	800315c <ETH_SetDMAConfig+0x44>
 8003156:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800315a:	e000      	b.n	800315e <ETH_SetDMAConfig+0x46>
 800315c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800315e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	7b9b      	ldrb	r3, [r3, #14]
 8003164:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003166:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800316c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	7f1b      	ldrb	r3, [r3, #28]
 8003172:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003174:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	7f9b      	ldrb	r3, [r3, #30]
 800317a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800317c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003182:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800318a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800318c:	4313      	orrs	r3, r2
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4313      	orrs	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800319c:	461a      	mov	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80031ae:	2001      	movs	r0, #1
 80031b0:	f7ff f82e 	bl	8002210 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031bc:	461a      	mov	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	791b      	ldrb	r3, [r3, #4]
 80031c6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80031cc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80031d2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80031d8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031e0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80031e2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80031ea:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80031f0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80031fe:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800320c:	2001      	movs	r0, #1
 800320e:	f7fe ffff 	bl	8002210 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800321a:	461a      	mov	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6013      	str	r3, [r2, #0]
}
 8003220:	bf00      	nop
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	f8de3f23 	.word	0xf8de3f23

0800322c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b0a6      	sub	sp, #152	; 0x98
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003234:	2301      	movs	r3, #1
 8003236:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800323a:	2301      	movs	r3, #1
 800323c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003240:	2300      	movs	r3, #0
 8003242:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003244:	2300      	movs	r3, #0
 8003246:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800324a:	2301      	movs	r3, #1
 800324c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003250:	2300      	movs	r3, #0
 8003252:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003256:	2301      	movs	r3, #1
 8003258:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800325c:	2300      	movs	r3, #0
 800325e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003262:	2300      	movs	r3, #0
 8003264:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003268:	2300      	movs	r3, #0
 800326a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800326c:	2300      	movs	r3, #0
 800326e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003272:	2300      	movs	r3, #0
 8003274:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003276:	2300      	movs	r3, #0
 8003278:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800327c:	2300      	movs	r3, #0
 800327e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003282:	2300      	movs	r3, #0
 8003284:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003288:	2300      	movs	r3, #0
 800328a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800328e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003292:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003294:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003298:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800329a:	2300      	movs	r3, #0
 800329c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80032a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032a4:	4619      	mov	r1, r3
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff fe86 	bl	8002fb8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80032ac:	2301      	movs	r3, #1
 80032ae:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80032b0:	2301      	movs	r3, #1
 80032b2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80032b4:	2301      	movs	r3, #1
 80032b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80032ba:	2301      	movs	r3, #1
 80032bc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80032c2:	2300      	movs	r3, #0
 80032c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80032ce:	2300      	movs	r3, #0
 80032d0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80032d2:	2301      	movs	r3, #1
 80032d4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80032d8:	2301      	movs	r3, #1
 80032da:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80032dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032e0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80032e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032e6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80032e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032ec:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80032ee:	2301      	movs	r3, #1
 80032f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80032f8:	2300      	movs	r3, #0
 80032fa:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80032fc:	f107 0308 	add.w	r3, r7, #8
 8003300:	4619      	mov	r1, r3
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff ff08 	bl	8003118 <ETH_SetDMAConfig>
}
 8003308:	bf00      	nop
 800330a:	3798      	adds	r7, #152	; 0x98
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3305      	adds	r3, #5
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	021b      	lsls	r3, r3, #8
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	3204      	adds	r2, #4
 8003328:	7812      	ldrb	r2, [r2, #0]
 800332a:	4313      	orrs	r3, r2
 800332c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	4b11      	ldr	r3, [pc, #68]	; (8003378 <ETH_MACAddressConfig+0x68>)
 8003332:	4413      	add	r3, r2
 8003334:	461a      	mov	r2, r3
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3303      	adds	r3, #3
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	061a      	lsls	r2, r3, #24
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3302      	adds	r3, #2
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	041b      	lsls	r3, r3, #16
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3301      	adds	r3, #1
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	021b      	lsls	r3, r3, #8
 8003354:	4313      	orrs	r3, r2
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	7812      	ldrb	r2, [r2, #0]
 800335a:	4313      	orrs	r3, r2
 800335c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	4b06      	ldr	r3, [pc, #24]	; (800337c <ETH_MACAddressConfig+0x6c>)
 8003362:	4413      	add	r3, r2
 8003364:	461a      	mov	r2, r3
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	6013      	str	r3, [r2, #0]
}
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40028040 	.word	0x40028040
 800337c:	40028044 	.word	0x40028044

08003380 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003388:	2300      	movs	r3, #0
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	e03e      	b.n	800340c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68d9      	ldr	r1, [r3, #12]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	440b      	add	r3, r1
 800339e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2200      	movs	r2, #0
 80033aa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2200      	movs	r2, #0
 80033b0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2200      	movs	r2, #0
 80033b6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80033b8:	68b9      	ldr	r1, [r7, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	3206      	adds	r2, #6
 80033c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d80c      	bhi.n	80033f0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68d9      	ldr	r1, [r3, #12]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	440b      	add	r3, r1
 80033e8:	461a      	mov	r2, r3
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	60da      	str	r2, [r3, #12]
 80033ee:	e004      	b.n	80033fa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	461a      	mov	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	3301      	adds	r3, #1
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2b03      	cmp	r3, #3
 8003410:	d9bd      	bls.n	800338e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003424:	611a      	str	r2, [r3, #16]
}
 8003426:	bf00      	nop
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003432:	b480      	push	{r7}
 8003434:	b085      	sub	sp, #20
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800343a:	2300      	movs	r3, #0
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	e046      	b.n	80034ce <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6919      	ldr	r1, [r3, #16]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	440b      	add	r3, r1
 8003450:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2200      	movs	r2, #0
 800345c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2200      	movs	r2, #0
 8003462:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2200      	movs	r2, #0
 8003468:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2200      	movs	r2, #0
 800346e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2200      	movs	r2, #0
 8003474:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800347c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003484:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003492:	68b9      	ldr	r1, [r7, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	3212      	adds	r2, #18
 800349a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d80c      	bhi.n	80034be <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6919      	ldr	r1, [r3, #16]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	440b      	add	r3, r1
 80034b6:	461a      	mov	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	60da      	str	r2, [r3, #12]
 80034bc:	e004      	b.n	80034c8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	461a      	mov	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	3301      	adds	r3, #1
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d9b5      	bls.n	8003440 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034fe:	60da      	str	r2, [r3, #12]
}
 8003500:	bf00      	nop
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800350c:	b480      	push	{r7}
 800350e:	b089      	sub	sp, #36	; 0x24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800351e:	2300      	movs	r3, #0
 8003520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003522:	2300      	movs	r3, #0
 8003524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003526:	2300      	movs	r3, #0
 8003528:	61fb      	str	r3, [r7, #28]
 800352a:	e175      	b.n	8003818 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800352c:	2201      	movs	r2, #1
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	4013      	ands	r3, r2
 800353e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	429a      	cmp	r2, r3
 8003546:	f040 8164 	bne.w	8003812 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	2b01      	cmp	r3, #1
 8003554:	d005      	beq.n	8003562 <HAL_GPIO_Init+0x56>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d130      	bne.n	80035c4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	2203      	movs	r2, #3
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4013      	ands	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4313      	orrs	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003598:	2201      	movs	r2, #1
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	f003 0201 	and.w	r2, r3, #1
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d017      	beq.n	8003600 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	2203      	movs	r2, #3
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	43db      	mvns	r3, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4013      	ands	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 0303 	and.w	r3, r3, #3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d123      	bne.n	8003654 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	08da      	lsrs	r2, r3, #3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3208      	adds	r2, #8
 8003614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	220f      	movs	r2, #15
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	43db      	mvns	r3, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4013      	ands	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4313      	orrs	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	08da      	lsrs	r2, r3, #3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3208      	adds	r2, #8
 800364e:	69b9      	ldr	r1, [r7, #24]
 8003650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	2203      	movs	r2, #3
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	43db      	mvns	r3, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4013      	ands	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 0203 	and.w	r2, r3, #3
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4313      	orrs	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80be 	beq.w	8003812 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003696:	4b66      	ldr	r3, [pc, #408]	; (8003830 <HAL_GPIO_Init+0x324>)
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	4a65      	ldr	r2, [pc, #404]	; (8003830 <HAL_GPIO_Init+0x324>)
 800369c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036a0:	6453      	str	r3, [r2, #68]	; 0x44
 80036a2:	4b63      	ldr	r3, [pc, #396]	; (8003830 <HAL_GPIO_Init+0x324>)
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80036ae:	4a61      	ldr	r2, [pc, #388]	; (8003834 <HAL_GPIO_Init+0x328>)
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	089b      	lsrs	r3, r3, #2
 80036b4:	3302      	adds	r3, #2
 80036b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	220f      	movs	r2, #15
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	43db      	mvns	r3, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4013      	ands	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a58      	ldr	r2, [pc, #352]	; (8003838 <HAL_GPIO_Init+0x32c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d037      	beq.n	800374a <HAL_GPIO_Init+0x23e>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a57      	ldr	r2, [pc, #348]	; (800383c <HAL_GPIO_Init+0x330>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d031      	beq.n	8003746 <HAL_GPIO_Init+0x23a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a56      	ldr	r2, [pc, #344]	; (8003840 <HAL_GPIO_Init+0x334>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d02b      	beq.n	8003742 <HAL_GPIO_Init+0x236>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a55      	ldr	r2, [pc, #340]	; (8003844 <HAL_GPIO_Init+0x338>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d025      	beq.n	800373e <HAL_GPIO_Init+0x232>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a54      	ldr	r2, [pc, #336]	; (8003848 <HAL_GPIO_Init+0x33c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d01f      	beq.n	800373a <HAL_GPIO_Init+0x22e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a53      	ldr	r2, [pc, #332]	; (800384c <HAL_GPIO_Init+0x340>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d019      	beq.n	8003736 <HAL_GPIO_Init+0x22a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a52      	ldr	r2, [pc, #328]	; (8003850 <HAL_GPIO_Init+0x344>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d013      	beq.n	8003732 <HAL_GPIO_Init+0x226>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a51      	ldr	r2, [pc, #324]	; (8003854 <HAL_GPIO_Init+0x348>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00d      	beq.n	800372e <HAL_GPIO_Init+0x222>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a50      	ldr	r2, [pc, #320]	; (8003858 <HAL_GPIO_Init+0x34c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d007      	beq.n	800372a <HAL_GPIO_Init+0x21e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a4f      	ldr	r2, [pc, #316]	; (800385c <HAL_GPIO_Init+0x350>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d101      	bne.n	8003726 <HAL_GPIO_Init+0x21a>
 8003722:	2309      	movs	r3, #9
 8003724:	e012      	b.n	800374c <HAL_GPIO_Init+0x240>
 8003726:	230a      	movs	r3, #10
 8003728:	e010      	b.n	800374c <HAL_GPIO_Init+0x240>
 800372a:	2308      	movs	r3, #8
 800372c:	e00e      	b.n	800374c <HAL_GPIO_Init+0x240>
 800372e:	2307      	movs	r3, #7
 8003730:	e00c      	b.n	800374c <HAL_GPIO_Init+0x240>
 8003732:	2306      	movs	r3, #6
 8003734:	e00a      	b.n	800374c <HAL_GPIO_Init+0x240>
 8003736:	2305      	movs	r3, #5
 8003738:	e008      	b.n	800374c <HAL_GPIO_Init+0x240>
 800373a:	2304      	movs	r3, #4
 800373c:	e006      	b.n	800374c <HAL_GPIO_Init+0x240>
 800373e:	2303      	movs	r3, #3
 8003740:	e004      	b.n	800374c <HAL_GPIO_Init+0x240>
 8003742:	2302      	movs	r3, #2
 8003744:	e002      	b.n	800374c <HAL_GPIO_Init+0x240>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <HAL_GPIO_Init+0x240>
 800374a:	2300      	movs	r3, #0
 800374c:	69fa      	ldr	r2, [r7, #28]
 800374e:	f002 0203 	and.w	r2, r2, #3
 8003752:	0092      	lsls	r2, r2, #2
 8003754:	4093      	lsls	r3, r2
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4313      	orrs	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800375c:	4935      	ldr	r1, [pc, #212]	; (8003834 <HAL_GPIO_Init+0x328>)
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	089b      	lsrs	r3, r3, #2
 8003762:	3302      	adds	r3, #2
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800376a:	4b3d      	ldr	r3, [pc, #244]	; (8003860 <HAL_GPIO_Init+0x354>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	43db      	mvns	r3, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4013      	ands	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	4313      	orrs	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800378e:	4a34      	ldr	r2, [pc, #208]	; (8003860 <HAL_GPIO_Init+0x354>)
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003794:	4b32      	ldr	r3, [pc, #200]	; (8003860 <HAL_GPIO_Init+0x354>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037b8:	4a29      	ldr	r2, [pc, #164]	; (8003860 <HAL_GPIO_Init+0x354>)
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037be:	4b28      	ldr	r3, [pc, #160]	; (8003860 <HAL_GPIO_Init+0x354>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	43db      	mvns	r3, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4013      	ands	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4313      	orrs	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037e2:	4a1f      	ldr	r2, [pc, #124]	; (8003860 <HAL_GPIO_Init+0x354>)
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037e8:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <HAL_GPIO_Init+0x354>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	43db      	mvns	r3, r3
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	4013      	ands	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800380c:	4a14      	ldr	r2, [pc, #80]	; (8003860 <HAL_GPIO_Init+0x354>)
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	3301      	adds	r3, #1
 8003816:	61fb      	str	r3, [r7, #28]
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	2b0f      	cmp	r3, #15
 800381c:	f67f ae86 	bls.w	800352c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003820:	bf00      	nop
 8003822:	bf00      	nop
 8003824:	3724      	adds	r7, #36	; 0x24
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40023800 	.word	0x40023800
 8003834:	40013800 	.word	0x40013800
 8003838:	40020000 	.word	0x40020000
 800383c:	40020400 	.word	0x40020400
 8003840:	40020800 	.word	0x40020800
 8003844:	40020c00 	.word	0x40020c00
 8003848:	40021000 	.word	0x40021000
 800384c:	40021400 	.word	0x40021400
 8003850:	40021800 	.word	0x40021800
 8003854:	40021c00 	.word	0x40021c00
 8003858:	40022000 	.word	0x40022000
 800385c:	40022400 	.word	0x40022400
 8003860:	40013c00 	.word	0x40013c00

08003864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	807b      	strh	r3, [r7, #2]
 8003870:	4613      	mov	r3, r2
 8003872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003874:	787b      	ldrb	r3, [r7, #1]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800387a:	887a      	ldrh	r2, [r7, #2]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003880:	e003      	b.n	800388a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003882:	887b      	ldrh	r3, [r7, #2]
 8003884:	041a      	lsls	r2, r3, #16
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	619a      	str	r2, [r3, #24]
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
	...

08003898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e07f      	b.n	80039aa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fe faa2 	bl	8001e08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2224      	movs	r2, #36	; 0x24
 80038c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d107      	bne.n	8003912 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800390e:	609a      	str	r2, [r3, #8]
 8003910:	e006      	b.n	8003920 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800391e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	2b02      	cmp	r3, #2
 8003926:	d104      	bne.n	8003932 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003930:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6859      	ldr	r1, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	4b1d      	ldr	r3, [pc, #116]	; (80039b4 <HAL_I2C_Init+0x11c>)
 800393e:	430b      	orrs	r3, r1
 8003940:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003950:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691a      	ldr	r2, [r3, #16]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69d9      	ldr	r1, [r3, #28]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1a      	ldr	r2, [r3, #32]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	02008000 	.word	0x02008000

080039b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af02      	add	r7, sp, #8
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	4608      	mov	r0, r1
 80039c2:	4611      	mov	r1, r2
 80039c4:	461a      	mov	r2, r3
 80039c6:	4603      	mov	r3, r0
 80039c8:	817b      	strh	r3, [r7, #10]
 80039ca:	460b      	mov	r3, r1
 80039cc:	813b      	strh	r3, [r7, #8]
 80039ce:	4613      	mov	r3, r2
 80039d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b20      	cmp	r3, #32
 80039dc:	f040 80f9 	bne.w	8003bd2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <HAL_I2C_Mem_Write+0x34>
 80039e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d105      	bne.n	80039f8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0ed      	b.n	8003bd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_I2C_Mem_Write+0x4e>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e0e6      	b.n	8003bd4 <HAL_I2C_Mem_Write+0x21c>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a0e:	f7fe fbf3 	bl	80021f8 <HAL_GetTick>
 8003a12:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	2319      	movs	r3, #25
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f955 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0d1      	b.n	8003bd4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2221      	movs	r2, #33	; 0x21
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2240      	movs	r2, #64	; 0x40
 8003a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a3a      	ldr	r2, [r7, #32]
 8003a4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a58:	88f8      	ldrh	r0, [r7, #6]
 8003a5a:	893a      	ldrh	r2, [r7, #8]
 8003a5c:	8979      	ldrh	r1, [r7, #10]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	9301      	str	r3, [sp, #4]
 8003a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	4603      	mov	r3, r0
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 f8b9 	bl	8003be0 <I2C_RequestMemoryWrite>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e0a9      	b.n	8003bd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2bff      	cmp	r3, #255	; 0xff
 8003a88:	d90e      	bls.n	8003aa8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	22ff      	movs	r2, #255	; 0xff
 8003a8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	8979      	ldrh	r1, [r7, #10]
 8003a98:	2300      	movs	r3, #0
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 fab1 	bl	8004008 <I2C_TransferConfig>
 8003aa6:	e00f      	b.n	8003ac8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	8979      	ldrh	r1, [r7, #10]
 8003aba:	2300      	movs	r3, #0
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 faa0 	bl	8004008 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f93f 	bl	8003d50 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e07b      	b.n	8003bd4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	781a      	ldrb	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d034      	beq.n	8003b80 <HAL_I2C_Mem_Write+0x1c8>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d130      	bne.n	8003b80 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b24:	2200      	movs	r2, #0
 8003b26:	2180      	movs	r1, #128	; 0x80
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 f8d1 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e04d      	b.n	8003bd4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2bff      	cmp	r3, #255	; 0xff
 8003b40:	d90e      	bls.n	8003b60 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	22ff      	movs	r2, #255	; 0xff
 8003b46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	8979      	ldrh	r1, [r7, #10]
 8003b50:	2300      	movs	r3, #0
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 fa55 	bl	8004008 <I2C_TransferConfig>
 8003b5e:	e00f      	b.n	8003b80 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	8979      	ldrh	r1, [r7, #10]
 8003b72:	2300      	movs	r3, #0
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 fa44 	bl	8004008 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d19e      	bne.n	8003ac8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 f91e 	bl	8003dd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e01a      	b.n	8003bd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6859      	ldr	r1, [r3, #4]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <HAL_I2C_Mem_Write+0x224>)
 8003bb2:	400b      	ands	r3, r1
 8003bb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	e000      	b.n	8003bd4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003bd2:	2302      	movs	r3, #2
  }
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	fe00e800 	.word	0xfe00e800

08003be0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af02      	add	r7, sp, #8
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	4608      	mov	r0, r1
 8003bea:	4611      	mov	r1, r2
 8003bec:	461a      	mov	r2, r3
 8003bee:	4603      	mov	r3, r0
 8003bf0:	817b      	strh	r3, [r7, #10]
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	813b      	strh	r3, [r7, #8]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003bfa:	88fb      	ldrh	r3, [r7, #6]
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	8979      	ldrh	r1, [r7, #10]
 8003c00:	4b20      	ldr	r3, [pc, #128]	; (8003c84 <I2C_RequestMemoryWrite+0xa4>)
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 f9fd 	bl	8004008 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c0e:	69fa      	ldr	r2, [r7, #28]
 8003c10:	69b9      	ldr	r1, [r7, #24]
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f89c 	bl	8003d50 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e02c      	b.n	8003c7c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c22:	88fb      	ldrh	r3, [r7, #6]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d105      	bne.n	8003c34 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c28:	893b      	ldrh	r3, [r7, #8]
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	629a      	str	r2, [r3, #40]	; 0x28
 8003c32:	e015      	b.n	8003c60 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c34:	893b      	ldrh	r3, [r7, #8]
 8003c36:	0a1b      	lsrs	r3, r3, #8
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	69b9      	ldr	r1, [r7, #24]
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 f882 	bl	8003d50 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e012      	b.n	8003c7c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c56:	893b      	ldrh	r3, [r7, #8]
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2200      	movs	r2, #0
 8003c68:	2180      	movs	r1, #128	; 0x80
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 f830 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	80002000 	.word	0x80002000

08003c88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d103      	bne.n	8003ca6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d007      	beq.n	8003cc4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699a      	ldr	r2, [r3, #24]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	619a      	str	r2, [r3, #24]
  }
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ce0:	e022      	b.n	8003d28 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce8:	d01e      	beq.n	8003d28 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cea:	f7fe fa85 	bl	80021f8 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d302      	bcc.n	8003d00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d113      	bne.n	8003d28 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d04:	f043 0220 	orr.w	r2, r3, #32
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e00f      	b.n	8003d48 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699a      	ldr	r2, [r3, #24]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	4013      	ands	r3, r2
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	bf0c      	ite	eq
 8003d38:	2301      	moveq	r3, #1
 8003d3a:	2300      	movne	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	461a      	mov	r2, r3
 8003d40:	79fb      	ldrb	r3, [r7, #7]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d0cd      	beq.n	8003ce2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d5c:	e02c      	b.n	8003db8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 f870 	bl	8003e48 <I2C_IsErrorOccurred>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e02a      	b.n	8003dc8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d78:	d01e      	beq.n	8003db8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7a:	f7fe fa3d 	bl	80021f8 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d302      	bcc.n	8003d90 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d113      	bne.n	8003db8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d94:	f043 0220 	orr.w	r2, r3, #32
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e007      	b.n	8003dc8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d1cb      	bne.n	8003d5e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ddc:	e028      	b.n	8003e30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	68b9      	ldr	r1, [r7, #8]
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 f830 	bl	8003e48 <I2C_IsErrorOccurred>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e026      	b.n	8003e40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df2:	f7fe fa01 	bl	80021f8 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d302      	bcc.n	8003e08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d113      	bne.n	8003e30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0c:	f043 0220 	orr.w	r2, r3, #32
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e007      	b.n	8003e40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	f003 0320 	and.w	r3, r3, #32
 8003e3a:	2b20      	cmp	r3, #32
 8003e3c:	d1cf      	bne.n	8003dde <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08a      	sub	sp, #40	; 0x28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003e62:	2300      	movs	r3, #0
 8003e64:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d068      	beq.n	8003f46 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2210      	movs	r2, #16
 8003e7a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e7c:	e049      	b.n	8003f12 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e84:	d045      	beq.n	8003f12 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e86:	f7fe f9b7 	bl	80021f8 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d302      	bcc.n	8003e9c <I2C_IsErrorOccurred+0x54>
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d13a      	bne.n	8003f12 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ea6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003eae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ebe:	d121      	bne.n	8003f04 <I2C_IsErrorOccurred+0xbc>
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ec6:	d01d      	beq.n	8003f04 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003ec8:	7cfb      	ldrb	r3, [r7, #19]
 8003eca:	2b20      	cmp	r3, #32
 8003ecc:	d01a      	beq.n	8003f04 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003edc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ede:	f7fe f98b 	bl	80021f8 <HAL_GetTick>
 8003ee2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ee4:	e00e      	b.n	8003f04 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ee6:	f7fe f987 	bl	80021f8 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b19      	cmp	r3, #25
 8003ef2:	d907      	bls.n	8003f04 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	f043 0320 	orr.w	r3, r3, #32
 8003efa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003f02:	e006      	b.n	8003f12 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	2b20      	cmp	r3, #32
 8003f10:	d1e9      	bne.n	8003ee6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	f003 0320 	and.w	r3, r3, #32
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d003      	beq.n	8003f28 <I2C_IsErrorOccurred+0xe0>
 8003f20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0aa      	beq.n	8003e7e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d103      	bne.n	8003f38 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2220      	movs	r2, #32
 8003f36:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	f043 0304 	orr.w	r3, r3, #4
 8003f3e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00b      	beq.n	8003f70 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	f043 0301 	orr.w	r3, r3, #1
 8003f5e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00b      	beq.n	8003f92 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	f043 0308 	orr.w	r3, r3, #8
 8003f80:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00b      	beq.n	8003fb4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	f043 0302 	orr.w	r3, r3, #2
 8003fa2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d01c      	beq.n	8003ff6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f7ff fe63 	bl	8003c88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6859      	ldr	r1, [r3, #4]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4b0d      	ldr	r3, [pc, #52]	; (8004004 <I2C_IsErrorOccurred+0x1bc>)
 8003fce:	400b      	ands	r3, r1
 8003fd0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3728      	adds	r7, #40	; 0x28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	fe00e800 	.word	0xfe00e800

08004008 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	607b      	str	r3, [r7, #4]
 8004012:	460b      	mov	r3, r1
 8004014:	817b      	strh	r3, [r7, #10]
 8004016:	4613      	mov	r3, r2
 8004018:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800401a:	897b      	ldrh	r3, [r7, #10]
 800401c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004020:	7a7b      	ldrb	r3, [r7, #9]
 8004022:	041b      	lsls	r3, r3, #16
 8004024:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004028:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	4313      	orrs	r3, r2
 8004032:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004036:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	0d5b      	lsrs	r3, r3, #21
 8004042:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004046:	4b08      	ldr	r3, [pc, #32]	; (8004068 <I2C_TransferConfig+0x60>)
 8004048:	430b      	orrs	r3, r1
 800404a:	43db      	mvns	r3, r3
 800404c:	ea02 0103 	and.w	r1, r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	430a      	orrs	r2, r1
 8004058:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800405a:	bf00      	nop
 800405c:	371c      	adds	r7, #28
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	03ff63ff 	.word	0x03ff63ff

0800406c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b20      	cmp	r3, #32
 8004080:	d138      	bne.n	80040f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800408c:	2302      	movs	r3, #2
 800408e:	e032      	b.n	80040f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2224      	movs	r2, #36	; 0x24
 800409c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0201 	bic.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6819      	ldr	r1, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	e000      	b.n	80040f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040f4:	2302      	movs	r3, #2
  }
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004102:	b480      	push	{r7}
 8004104:	b085      	sub	sp, #20
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b20      	cmp	r3, #32
 8004116:	d139      	bne.n	800418c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800411e:	2b01      	cmp	r3, #1
 8004120:	d101      	bne.n	8004126 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004122:	2302      	movs	r3, #2
 8004124:	e033      	b.n	800418e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2224      	movs	r2, #36	; 0x24
 8004132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0201 	bic.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004154:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	021b      	lsls	r3, r3, #8
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004188:	2300      	movs	r3, #0
 800418a:	e000      	b.n	800418e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800418c:	2302      	movs	r3, #2
  }
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800419a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800419c:	b08f      	sub	sp, #60	; 0x3c
 800419e:	af0a      	add	r7, sp, #40	; 0x28
 80041a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e116      	b.n	80043da <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fd fedc 	bl	8001f84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2203      	movs	r2, #3
 80041d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d102      	bne.n	80041e6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f001 fe92 	bl	8005f14 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	603b      	str	r3, [r7, #0]
 80041f6:	687e      	ldr	r6, [r7, #4]
 80041f8:	466d      	mov	r5, sp
 80041fa:	f106 0410 	add.w	r4, r6, #16
 80041fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004200:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004204:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004206:	e894 0003 	ldmia.w	r4, {r0, r1}
 800420a:	e885 0003 	stmia.w	r5, {r0, r1}
 800420e:	1d33      	adds	r3, r6, #4
 8004210:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004212:	6838      	ldr	r0, [r7, #0]
 8004214:	f001 fe26 	bl	8005e64 <USB_CoreInit>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d005      	beq.n	800422a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2202      	movs	r2, #2
 8004222:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e0d7      	b.n	80043da <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2100      	movs	r1, #0
 8004230:	4618      	mov	r0, r3
 8004232:	f001 fe80 	bl	8005f36 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004236:	2300      	movs	r3, #0
 8004238:	73fb      	strb	r3, [r7, #15]
 800423a:	e04a      	b.n	80042d2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800423c:	7bfa      	ldrb	r2, [r7, #15]
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	4613      	mov	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	4413      	add	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	333d      	adds	r3, #61	; 0x3d
 800424c:	2201      	movs	r2, #1
 800424e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004250:	7bfa      	ldrb	r2, [r7, #15]
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	333c      	adds	r3, #60	; 0x3c
 8004260:	7bfa      	ldrb	r2, [r7, #15]
 8004262:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004264:	7bfa      	ldrb	r2, [r7, #15]
 8004266:	7bfb      	ldrb	r3, [r7, #15]
 8004268:	b298      	uxth	r0, r3
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	4613      	mov	r3, r2
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	3344      	adds	r3, #68	; 0x44
 8004278:	4602      	mov	r2, r0
 800427a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800427c:	7bfa      	ldrb	r2, [r7, #15]
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	4613      	mov	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	4413      	add	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	440b      	add	r3, r1
 800428a:	3340      	adds	r3, #64	; 0x40
 800428c:	2200      	movs	r2, #0
 800428e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004290:	7bfa      	ldrb	r2, [r7, #15]
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	4613      	mov	r3, r2
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	4413      	add	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	440b      	add	r3, r1
 800429e:	3348      	adds	r3, #72	; 0x48
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80042a4:	7bfa      	ldrb	r2, [r7, #15]
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	4613      	mov	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	334c      	adds	r3, #76	; 0x4c
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042b8:	7bfa      	ldrb	r2, [r7, #15]
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	4613      	mov	r3, r2
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	4413      	add	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	3354      	adds	r3, #84	; 0x54
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	3301      	adds	r3, #1
 80042d0:	73fb      	strb	r3, [r7, #15]
 80042d2:	7bfa      	ldrb	r2, [r7, #15]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d3af      	bcc.n	800423c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042dc:	2300      	movs	r3, #0
 80042de:	73fb      	strb	r3, [r7, #15]
 80042e0:	e044      	b.n	800436c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042e2:	7bfa      	ldrb	r2, [r7, #15]
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	4613      	mov	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	440b      	add	r3, r1
 80042f0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80042f4:	2200      	movs	r2, #0
 80042f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80042f8:	7bfa      	ldrb	r2, [r7, #15]
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	4613      	mov	r3, r2
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800430a:	7bfa      	ldrb	r2, [r7, #15]
 800430c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800430e:	7bfa      	ldrb	r2, [r7, #15]
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004320:	2200      	movs	r2, #0
 8004322:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004324:	7bfa      	ldrb	r2, [r7, #15]
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4413      	add	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800433a:	7bfa      	ldrb	r2, [r7, #15]
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	4613      	mov	r3, r2
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	4413      	add	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004350:	7bfa      	ldrb	r2, [r7, #15]
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	4613      	mov	r3, r2
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	4413      	add	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	3301      	adds	r3, #1
 800436a:	73fb      	strb	r3, [r7, #15]
 800436c:	7bfa      	ldrb	r2, [r7, #15]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	429a      	cmp	r2, r3
 8004374:	d3b5      	bcc.n	80042e2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	687e      	ldr	r6, [r7, #4]
 800437e:	466d      	mov	r5, sp
 8004380:	f106 0410 	add.w	r4, r6, #16
 8004384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004386:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800438a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800438c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004390:	e885 0003 	stmia.w	r5, {r0, r1}
 8004394:	1d33      	adds	r3, r6, #4
 8004396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004398:	6838      	ldr	r0, [r7, #0]
 800439a:	f001 fe19 	bl	8005fd0 <USB_DevInit>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d005      	beq.n	80043b0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e014      	b.n	80043da <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d102      	bne.n	80043ce <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f80b 	bl	80043e4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f001 ffd7 	bl	8006386 <USB_DevDisconnect>

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080043e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004412:	4b05      	ldr	r3, [pc, #20]	; (8004428 <HAL_PCDEx_ActivateLPM+0x44>)
 8004414:	4313      	orrs	r3, r2
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	10000003 	.word	0x10000003

0800442c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004430:	4b05      	ldr	r3, [pc, #20]	; (8004448 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a04      	ldr	r2, [pc, #16]	; (8004448 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800443a:	6013      	str	r3, [r2, #0]
}
 800443c:	bf00      	nop
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40007000 	.word	0x40007000

0800444c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004454:	2300      	movs	r3, #0
 8004456:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e291      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 8087 	beq.w	800457e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004470:	4b96      	ldr	r3, [pc, #600]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 030c 	and.w	r3, r3, #12
 8004478:	2b04      	cmp	r3, #4
 800447a:	d00c      	beq.n	8004496 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800447c:	4b93      	ldr	r3, [pc, #588]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 030c 	and.w	r3, r3, #12
 8004484:	2b08      	cmp	r3, #8
 8004486:	d112      	bne.n	80044ae <HAL_RCC_OscConfig+0x62>
 8004488:	4b90      	ldr	r3, [pc, #576]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004494:	d10b      	bne.n	80044ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004496:	4b8d      	ldr	r3, [pc, #564]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d06c      	beq.n	800457c <HAL_RCC_OscConfig+0x130>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d168      	bne.n	800457c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e26b      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b6:	d106      	bne.n	80044c6 <HAL_RCC_OscConfig+0x7a>
 80044b8:	4b84      	ldr	r3, [pc, #528]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a83      	ldr	r2, [pc, #524]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 80044be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c2:	6013      	str	r3, [r2, #0]
 80044c4:	e02e      	b.n	8004524 <HAL_RCC_OscConfig+0xd8>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10c      	bne.n	80044e8 <HAL_RCC_OscConfig+0x9c>
 80044ce:	4b7f      	ldr	r3, [pc, #508]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a7e      	ldr	r2, [pc, #504]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 80044d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	4b7c      	ldr	r3, [pc, #496]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a7b      	ldr	r2, [pc, #492]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 80044e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	e01d      	b.n	8004524 <HAL_RCC_OscConfig+0xd8>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044f0:	d10c      	bne.n	800450c <HAL_RCC_OscConfig+0xc0>
 80044f2:	4b76      	ldr	r3, [pc, #472]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a75      	ldr	r2, [pc, #468]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 80044f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	4b73      	ldr	r3, [pc, #460]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a72      	ldr	r2, [pc, #456]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 8004504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	e00b      	b.n	8004524 <HAL_RCC_OscConfig+0xd8>
 800450c:	4b6f      	ldr	r3, [pc, #444]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a6e      	ldr	r2, [pc, #440]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 8004512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	4b6c      	ldr	r3, [pc, #432]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a6b      	ldr	r2, [pc, #428]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 800451e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d013      	beq.n	8004554 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fd fe64 	bl	80021f8 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004534:	f7fd fe60 	bl	80021f8 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b64      	cmp	r3, #100	; 0x64
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e21f      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004546:	4b61      	ldr	r3, [pc, #388]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCC_OscConfig+0xe8>
 8004552:	e014      	b.n	800457e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004554:	f7fd fe50 	bl	80021f8 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800455c:	f7fd fe4c 	bl	80021f8 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b64      	cmp	r3, #100	; 0x64
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e20b      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800456e:	4b57      	ldr	r3, [pc, #348]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0x110>
 800457a:	e000      	b.n	800457e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800457c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d069      	beq.n	800465e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800458a:	4b50      	ldr	r3, [pc, #320]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 030c 	and.w	r3, r3, #12
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00b      	beq.n	80045ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004596:	4b4d      	ldr	r3, [pc, #308]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 030c 	and.w	r3, r3, #12
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d11c      	bne.n	80045dc <HAL_RCC_OscConfig+0x190>
 80045a2:	4b4a      	ldr	r3, [pc, #296]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d116      	bne.n	80045dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ae:	4b47      	ldr	r3, [pc, #284]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d005      	beq.n	80045c6 <HAL_RCC_OscConfig+0x17a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d001      	beq.n	80045c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e1df      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c6:	4b41      	ldr	r3, [pc, #260]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	493d      	ldr	r1, [pc, #244]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045da:	e040      	b.n	800465e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d023      	beq.n	800462c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045e4:	4b39      	ldr	r3, [pc, #228]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a38      	ldr	r2, [pc, #224]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 80045ea:	f043 0301 	orr.w	r3, r3, #1
 80045ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f0:	f7fd fe02 	bl	80021f8 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f8:	f7fd fdfe 	bl	80021f8 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e1bd      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460a:	4b30      	ldr	r3, [pc, #192]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0f0      	beq.n	80045f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004616:	4b2d      	ldr	r3, [pc, #180]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4929      	ldr	r1, [pc, #164]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 8004626:	4313      	orrs	r3, r2
 8004628:	600b      	str	r3, [r1, #0]
 800462a:	e018      	b.n	800465e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800462c:	4b27      	ldr	r3, [pc, #156]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a26      	ldr	r2, [pc, #152]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 8004632:	f023 0301 	bic.w	r3, r3, #1
 8004636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004638:	f7fd fdde 	bl	80021f8 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004640:	f7fd fdda 	bl	80021f8 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e199      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004652:	4b1e      	ldr	r3, [pc, #120]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	2b00      	cmp	r3, #0
 8004668:	d038      	beq.n	80046dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d019      	beq.n	80046a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004672:	4b16      	ldr	r3, [pc, #88]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 8004674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004676:	4a15      	ldr	r2, [pc, #84]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 8004678:	f043 0301 	orr.w	r3, r3, #1
 800467c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467e:	f7fd fdbb 	bl	80021f8 <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004684:	e008      	b.n	8004698 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004686:	f7fd fdb7 	bl	80021f8 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e176      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004698:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 800469a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0f0      	beq.n	8004686 <HAL_RCC_OscConfig+0x23a>
 80046a4:	e01a      	b.n	80046dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046a6:	4b09      	ldr	r3, [pc, #36]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 80046a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046aa:	4a08      	ldr	r2, [pc, #32]	; (80046cc <HAL_RCC_OscConfig+0x280>)
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b2:	f7fd fda1 	bl	80021f8 <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046b8:	e00a      	b.n	80046d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ba:	f7fd fd9d 	bl	80021f8 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d903      	bls.n	80046d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e15c      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
 80046cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046d0:	4b91      	ldr	r3, [pc, #580]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80046d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1ee      	bne.n	80046ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 80a4 	beq.w	8004832 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ea:	4b8b      	ldr	r3, [pc, #556]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10d      	bne.n	8004712 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80046f6:	4b88      	ldr	r3, [pc, #544]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	4a87      	ldr	r2, [pc, #540]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80046fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004700:	6413      	str	r3, [r2, #64]	; 0x40
 8004702:	4b85      	ldr	r3, [pc, #532]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470a:	60bb      	str	r3, [r7, #8]
 800470c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800470e:	2301      	movs	r3, #1
 8004710:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004712:	4b82      	ldr	r3, [pc, #520]	; (800491c <HAL_RCC_OscConfig+0x4d0>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471a:	2b00      	cmp	r3, #0
 800471c:	d118      	bne.n	8004750 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800471e:	4b7f      	ldr	r3, [pc, #508]	; (800491c <HAL_RCC_OscConfig+0x4d0>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a7e      	ldr	r2, [pc, #504]	; (800491c <HAL_RCC_OscConfig+0x4d0>)
 8004724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800472a:	f7fd fd65 	bl	80021f8 <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004732:	f7fd fd61 	bl	80021f8 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b64      	cmp	r3, #100	; 0x64
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e120      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004744:	4b75      	ldr	r3, [pc, #468]	; (800491c <HAL_RCC_OscConfig+0x4d0>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0f0      	beq.n	8004732 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d106      	bne.n	8004766 <HAL_RCC_OscConfig+0x31a>
 8004758:	4b6f      	ldr	r3, [pc, #444]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 800475a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475c:	4a6e      	ldr	r2, [pc, #440]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 800475e:	f043 0301 	orr.w	r3, r3, #1
 8004762:	6713      	str	r3, [r2, #112]	; 0x70
 8004764:	e02d      	b.n	80047c2 <HAL_RCC_OscConfig+0x376>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10c      	bne.n	8004788 <HAL_RCC_OscConfig+0x33c>
 800476e:	4b6a      	ldr	r3, [pc, #424]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 8004770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004772:	4a69      	ldr	r2, [pc, #420]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 8004774:	f023 0301 	bic.w	r3, r3, #1
 8004778:	6713      	str	r3, [r2, #112]	; 0x70
 800477a:	4b67      	ldr	r3, [pc, #412]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 800477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477e:	4a66      	ldr	r2, [pc, #408]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 8004780:	f023 0304 	bic.w	r3, r3, #4
 8004784:	6713      	str	r3, [r2, #112]	; 0x70
 8004786:	e01c      	b.n	80047c2 <HAL_RCC_OscConfig+0x376>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b05      	cmp	r3, #5
 800478e:	d10c      	bne.n	80047aa <HAL_RCC_OscConfig+0x35e>
 8004790:	4b61      	ldr	r3, [pc, #388]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 8004792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004794:	4a60      	ldr	r2, [pc, #384]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 8004796:	f043 0304 	orr.w	r3, r3, #4
 800479a:	6713      	str	r3, [r2, #112]	; 0x70
 800479c:	4b5e      	ldr	r3, [pc, #376]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 800479e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a0:	4a5d      	ldr	r2, [pc, #372]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80047a2:	f043 0301 	orr.w	r3, r3, #1
 80047a6:	6713      	str	r3, [r2, #112]	; 0x70
 80047a8:	e00b      	b.n	80047c2 <HAL_RCC_OscConfig+0x376>
 80047aa:	4b5b      	ldr	r3, [pc, #364]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80047ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ae:	4a5a      	ldr	r2, [pc, #360]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80047b0:	f023 0301 	bic.w	r3, r3, #1
 80047b4:	6713      	str	r3, [r2, #112]	; 0x70
 80047b6:	4b58      	ldr	r3, [pc, #352]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80047b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ba:	4a57      	ldr	r2, [pc, #348]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80047bc:	f023 0304 	bic.w	r3, r3, #4
 80047c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d015      	beq.n	80047f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ca:	f7fd fd15 	bl	80021f8 <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d0:	e00a      	b.n	80047e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d2:	f7fd fd11 	bl	80021f8 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e0ce      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e8:	4b4b      	ldr	r3, [pc, #300]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80047ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0ee      	beq.n	80047d2 <HAL_RCC_OscConfig+0x386>
 80047f4:	e014      	b.n	8004820 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f6:	f7fd fcff 	bl	80021f8 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047fc:	e00a      	b.n	8004814 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047fe:	f7fd fcfb 	bl	80021f8 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	f241 3288 	movw	r2, #5000	; 0x1388
 800480c:	4293      	cmp	r3, r2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e0b8      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004814:	4b40      	ldr	r3, [pc, #256]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 8004816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1ee      	bne.n	80047fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004820:	7dfb      	ldrb	r3, [r7, #23]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d105      	bne.n	8004832 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004826:	4b3c      	ldr	r3, [pc, #240]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	4a3b      	ldr	r2, [pc, #236]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 800482c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004830:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 80a4 	beq.w	8004984 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800483c:	4b36      	ldr	r3, [pc, #216]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 030c 	and.w	r3, r3, #12
 8004844:	2b08      	cmp	r3, #8
 8004846:	d06b      	beq.n	8004920 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	2b02      	cmp	r3, #2
 800484e:	d149      	bne.n	80048e4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004850:	4b31      	ldr	r3, [pc, #196]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a30      	ldr	r2, [pc, #192]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 8004856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800485a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485c:	f7fd fccc 	bl	80021f8 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004864:	f7fd fcc8 	bl	80021f8 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e087      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004876:	4b28      	ldr	r3, [pc, #160]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f0      	bne.n	8004864 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69da      	ldr	r2, [r3, #28]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	019b      	lsls	r3, r3, #6
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004898:	085b      	lsrs	r3, r3, #1
 800489a:	3b01      	subs	r3, #1
 800489c:	041b      	lsls	r3, r3, #16
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	061b      	lsls	r3, r3, #24
 80048a6:	4313      	orrs	r3, r2
 80048a8:	4a1b      	ldr	r2, [pc, #108]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80048aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048ae:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048b0:	4b19      	ldr	r3, [pc, #100]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a18      	ldr	r2, [pc, #96]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80048b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048bc:	f7fd fc9c 	bl	80021f8 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c4:	f7fd fc98 	bl	80021f8 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e057      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d6:	4b10      	ldr	r3, [pc, #64]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0f0      	beq.n	80048c4 <HAL_RCC_OscConfig+0x478>
 80048e2:	e04f      	b.n	8004984 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e4:	4b0c      	ldr	r3, [pc, #48]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a0b      	ldr	r2, [pc, #44]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80048ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f0:	f7fd fc82 	bl	80021f8 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f8:	f7fd fc7e 	bl	80021f8 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e03d      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490a:	4b03      	ldr	r3, [pc, #12]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1f0      	bne.n	80048f8 <HAL_RCC_OscConfig+0x4ac>
 8004916:	e035      	b.n	8004984 <HAL_RCC_OscConfig+0x538>
 8004918:	40023800 	.word	0x40023800
 800491c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004920:	4b1b      	ldr	r3, [pc, #108]	; (8004990 <HAL_RCC_OscConfig+0x544>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d028      	beq.n	8004980 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004938:	429a      	cmp	r2, r3
 800493a:	d121      	bne.n	8004980 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004946:	429a      	cmp	r2, r3
 8004948:	d11a      	bne.n	8004980 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004950:	4013      	ands	r3, r2
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004956:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004958:	4293      	cmp	r3, r2
 800495a:	d111      	bne.n	8004980 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004966:	085b      	lsrs	r3, r3, #1
 8004968:	3b01      	subs	r3, #1
 800496a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800496c:	429a      	cmp	r2, r3
 800496e:	d107      	bne.n	8004980 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800497c:	429a      	cmp	r2, r3
 800497e:	d001      	beq.n	8004984 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e000      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	40023800 	.word	0x40023800

08004994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e0d0      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049ac:	4b6a      	ldr	r3, [pc, #424]	; (8004b58 <HAL_RCC_ClockConfig+0x1c4>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 030f 	and.w	r3, r3, #15
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d910      	bls.n	80049dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ba:	4b67      	ldr	r3, [pc, #412]	; (8004b58 <HAL_RCC_ClockConfig+0x1c4>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f023 020f 	bic.w	r2, r3, #15
 80049c2:	4965      	ldr	r1, [pc, #404]	; (8004b58 <HAL_RCC_ClockConfig+0x1c4>)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ca:	4b63      	ldr	r3, [pc, #396]	; (8004b58 <HAL_RCC_ClockConfig+0x1c4>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d001      	beq.n	80049dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0b8      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d020      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d005      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049f4:	4b59      	ldr	r3, [pc, #356]	; (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4a58      	ldr	r2, [pc, #352]	; (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 80049fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0308 	and.w	r3, r3, #8
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d005      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a0c:	4b53      	ldr	r3, [pc, #332]	; (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	4a52      	ldr	r2, [pc, #328]	; (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a18:	4b50      	ldr	r3, [pc, #320]	; (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	494d      	ldr	r1, [pc, #308]	; (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d040      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d107      	bne.n	8004a4e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a3e:	4b47      	ldr	r3, [pc, #284]	; (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d115      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e07f      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d107      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a56:	4b41      	ldr	r3, [pc, #260]	; (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d109      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e073      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a66:	4b3d      	ldr	r3, [pc, #244]	; (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e06b      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a76:	4b39      	ldr	r3, [pc, #228]	; (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f023 0203 	bic.w	r2, r3, #3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	4936      	ldr	r1, [pc, #216]	; (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a88:	f7fd fbb6 	bl	80021f8 <HAL_GetTick>
 8004a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8e:	e00a      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a90:	f7fd fbb2 	bl	80021f8 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e053      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa6:	4b2d      	ldr	r3, [pc, #180]	; (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 020c 	and.w	r2, r3, #12
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d1eb      	bne.n	8004a90 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ab8:	4b27      	ldr	r3, [pc, #156]	; (8004b58 <HAL_RCC_ClockConfig+0x1c4>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 030f 	and.w	r3, r3, #15
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d210      	bcs.n	8004ae8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac6:	4b24      	ldr	r3, [pc, #144]	; (8004b58 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f023 020f 	bic.w	r2, r3, #15
 8004ace:	4922      	ldr	r1, [pc, #136]	; (8004b58 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad6:	4b20      	ldr	r3, [pc, #128]	; (8004b58 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d001      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e032      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d008      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004af4:	4b19      	ldr	r3, [pc, #100]	; (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	4916      	ldr	r1, [pc, #88]	; (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d009      	beq.n	8004b26 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b12:	4b12      	ldr	r3, [pc, #72]	; (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	490e      	ldr	r1, [pc, #56]	; (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b26:	f000 f821 	bl	8004b6c <HAL_RCC_GetSysClockFreq>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	091b      	lsrs	r3, r3, #4
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	490a      	ldr	r1, [pc, #40]	; (8004b60 <HAL_RCC_ClockConfig+0x1cc>)
 8004b38:	5ccb      	ldrb	r3, [r1, r3]
 8004b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3e:	4a09      	ldr	r2, [pc, #36]	; (8004b64 <HAL_RCC_ClockConfig+0x1d0>)
 8004b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b42:	4b09      	ldr	r3, [pc, #36]	; (8004b68 <HAL_RCC_ClockConfig+0x1d4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fd fb12 	bl	8002170 <HAL_InitTick>

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40023c00 	.word	0x40023c00
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	08008b30 	.word	0x08008b30
 8004b64:	20000018 	.word	0x20000018
 8004b68:	2000001c 	.word	0x2000001c

08004b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b70:	b094      	sub	sp, #80	; 0x50
 8004b72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b74:	2300      	movs	r3, #0
 8004b76:	647b      	str	r3, [r7, #68]	; 0x44
 8004b78:	2300      	movs	r3, #0
 8004b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004b80:	2300      	movs	r3, #0
 8004b82:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b84:	4b79      	ldr	r3, [pc, #484]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 030c 	and.w	r3, r3, #12
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d00d      	beq.n	8004bac <HAL_RCC_GetSysClockFreq+0x40>
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	f200 80e1 	bhi.w	8004d58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x34>
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d003      	beq.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b9e:	e0db      	b.n	8004d58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ba0:	4b73      	ldr	r3, [pc, #460]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ba2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ba4:	e0db      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ba6:	4b73      	ldr	r3, [pc, #460]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ba8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004baa:	e0d8      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bac:	4b6f      	ldr	r3, [pc, #444]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bb4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004bb6:	4b6d      	ldr	r3, [pc, #436]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d063      	beq.n	8004c8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bc2:	4b6a      	ldr	r3, [pc, #424]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	099b      	lsrs	r3, r3, #6
 8004bc8:	2200      	movs	r2, #0
 8004bca:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bcc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd4:	633b      	str	r3, [r7, #48]	; 0x30
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8004bda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004bde:	4622      	mov	r2, r4
 8004be0:	462b      	mov	r3, r5
 8004be2:	f04f 0000 	mov.w	r0, #0
 8004be6:	f04f 0100 	mov.w	r1, #0
 8004bea:	0159      	lsls	r1, r3, #5
 8004bec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bf0:	0150      	lsls	r0, r2, #5
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	1a51      	subs	r1, r2, r1
 8004bfa:	6139      	str	r1, [r7, #16]
 8004bfc:	4629      	mov	r1, r5
 8004bfe:	eb63 0301 	sbc.w	r3, r3, r1
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	f04f 0300 	mov.w	r3, #0
 8004c0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c10:	4659      	mov	r1, fp
 8004c12:	018b      	lsls	r3, r1, #6
 8004c14:	4651      	mov	r1, sl
 8004c16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c1a:	4651      	mov	r1, sl
 8004c1c:	018a      	lsls	r2, r1, #6
 8004c1e:	4651      	mov	r1, sl
 8004c20:	ebb2 0801 	subs.w	r8, r2, r1
 8004c24:	4659      	mov	r1, fp
 8004c26:	eb63 0901 	sbc.w	r9, r3, r1
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	f04f 0300 	mov.w	r3, #0
 8004c32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c3e:	4690      	mov	r8, r2
 8004c40:	4699      	mov	r9, r3
 8004c42:	4623      	mov	r3, r4
 8004c44:	eb18 0303 	adds.w	r3, r8, r3
 8004c48:	60bb      	str	r3, [r7, #8]
 8004c4a:	462b      	mov	r3, r5
 8004c4c:	eb49 0303 	adc.w	r3, r9, r3
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	f04f 0300 	mov.w	r3, #0
 8004c5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c5e:	4629      	mov	r1, r5
 8004c60:	024b      	lsls	r3, r1, #9
 8004c62:	4621      	mov	r1, r4
 8004c64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c68:	4621      	mov	r1, r4
 8004c6a:	024a      	lsls	r2, r1, #9
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	4619      	mov	r1, r3
 8004c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c72:	2200      	movs	r2, #0
 8004c74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c7c:	f7fb fac4 	bl	8000208 <__aeabi_uldivmod>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4613      	mov	r3, r2
 8004c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c88:	e058      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c8a:	4b38      	ldr	r3, [pc, #224]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	099b      	lsrs	r3, r3, #6
 8004c90:	2200      	movs	r2, #0
 8004c92:	4618      	mov	r0, r3
 8004c94:	4611      	mov	r1, r2
 8004c96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c9a:	623b      	str	r3, [r7, #32]
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ca4:	4642      	mov	r2, r8
 8004ca6:	464b      	mov	r3, r9
 8004ca8:	f04f 0000 	mov.w	r0, #0
 8004cac:	f04f 0100 	mov.w	r1, #0
 8004cb0:	0159      	lsls	r1, r3, #5
 8004cb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cb6:	0150      	lsls	r0, r2, #5
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4641      	mov	r1, r8
 8004cbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cdc:	ebb2 040a 	subs.w	r4, r2, sl
 8004ce0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	00eb      	lsls	r3, r5, #3
 8004cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cf2:	00e2      	lsls	r2, r4, #3
 8004cf4:	4614      	mov	r4, r2
 8004cf6:	461d      	mov	r5, r3
 8004cf8:	4643      	mov	r3, r8
 8004cfa:	18e3      	adds	r3, r4, r3
 8004cfc:	603b      	str	r3, [r7, #0]
 8004cfe:	464b      	mov	r3, r9
 8004d00:	eb45 0303 	adc.w	r3, r5, r3
 8004d04:	607b      	str	r3, [r7, #4]
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	f04f 0300 	mov.w	r3, #0
 8004d0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d12:	4629      	mov	r1, r5
 8004d14:	028b      	lsls	r3, r1, #10
 8004d16:	4621      	mov	r1, r4
 8004d18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d1c:	4621      	mov	r1, r4
 8004d1e:	028a      	lsls	r2, r1, #10
 8004d20:	4610      	mov	r0, r2
 8004d22:	4619      	mov	r1, r3
 8004d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d26:	2200      	movs	r2, #0
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	61fa      	str	r2, [r7, #28]
 8004d2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d30:	f7fb fa6a 	bl	8000208 <__aeabi_uldivmod>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4613      	mov	r3, r2
 8004d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	0c1b      	lsrs	r3, r3, #16
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	3301      	adds	r3, #1
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004d4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d56:	e002      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d58:	4b05      	ldr	r3, [pc, #20]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3750      	adds	r7, #80	; 0x50
 8004d64:	46bd      	mov	sp, r7
 8004d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	00f42400 	.word	0x00f42400
 8004d74:	007a1200 	.word	0x007a1200

08004d78 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d7c:	4b03      	ldr	r3, [pc, #12]	; (8004d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	20000018 	.word	0x20000018

08004d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d94:	f7ff fff0 	bl	8004d78 <HAL_RCC_GetHCLKFreq>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	0a9b      	lsrs	r3, r3, #10
 8004da0:	f003 0307 	and.w	r3, r3, #7
 8004da4:	4903      	ldr	r1, [pc, #12]	; (8004db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004da6:	5ccb      	ldrb	r3, [r1, r3]
 8004da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40023800 	.word	0x40023800
 8004db4:	08008b40 	.word	0x08008b40

08004db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004dbc:	f7ff ffdc 	bl	8004d78 <HAL_RCC_GetHCLKFreq>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	0b5b      	lsrs	r3, r3, #13
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	4903      	ldr	r1, [pc, #12]	; (8004ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dce:	5ccb      	ldrb	r3, [r1, r3]
 8004dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	08008b40 	.word	0x08008b40

08004de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b088      	sub	sp, #32
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004df0:	2300      	movs	r3, #0
 8004df2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004df4:	2300      	movs	r3, #0
 8004df6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d012      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e08:	4b69      	ldr	r3, [pc, #420]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	4a68      	ldr	r2, [pc, #416]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004e12:	6093      	str	r3, [r2, #8]
 8004e14:	4b66      	ldr	r3, [pc, #408]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1c:	4964      	ldr	r1, [pc, #400]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d017      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e3a:	4b5d      	ldr	r3, [pc, #372]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e48:	4959      	ldr	r1, [pc, #356]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e58:	d101      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004e66:	2301      	movs	r3, #1
 8004e68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d017      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e76:	4b4e      	ldr	r3, [pc, #312]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	494a      	ldr	r1, [pc, #296]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e94:	d101      	bne.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004e96:	2301      	movs	r3, #1
 8004e98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0320 	and.w	r3, r3, #32
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 808b 	beq.w	8004fda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ec4:	4b3a      	ldr	r3, [pc, #232]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec8:	4a39      	ldr	r2, [pc, #228]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ece:	6413      	str	r3, [r2, #64]	; 0x40
 8004ed0:	4b37      	ldr	r3, [pc, #220]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed8:	60bb      	str	r3, [r7, #8]
 8004eda:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004edc:	4b35      	ldr	r3, [pc, #212]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a34      	ldr	r2, [pc, #208]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ee8:	f7fd f986 	bl	80021f8 <HAL_GetTick>
 8004eec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004eee:	e008      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef0:	f7fd f982 	bl	80021f8 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b64      	cmp	r3, #100	; 0x64
 8004efc:	d901      	bls.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e357      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f02:	4b2c      	ldr	r3, [pc, #176]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0f0      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f0e:	4b28      	ldr	r3, [pc, #160]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d035      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d02e      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f2c:	4b20      	ldr	r3, [pc, #128]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f36:	4b1e      	ldr	r3, [pc, #120]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3a:	4a1d      	ldr	r2, [pc, #116]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f40:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f42:	4b1b      	ldr	r3, [pc, #108]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f46:	4a1a      	ldr	r2, [pc, #104]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004f4e:	4a18      	ldr	r2, [pc, #96]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f54:	4b16      	ldr	r3, [pc, #88]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d114      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f60:	f7fd f94a 	bl	80021f8 <HAL_GetTick>
 8004f64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f66:	e00a      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f68:	f7fd f946 	bl	80021f8 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e319      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f7e:	4b0c      	ldr	r3, [pc, #48]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0ee      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f96:	d111      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004f98:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004fa4:	4b04      	ldr	r3, [pc, #16]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004fa6:	400b      	ands	r3, r1
 8004fa8:	4901      	ldr	r1, [pc, #4]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	608b      	str	r3, [r1, #8]
 8004fae:	e00b      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	40007000 	.word	0x40007000
 8004fb8:	0ffffcff 	.word	0x0ffffcff
 8004fbc:	4baa      	ldr	r3, [pc, #680]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	4aa9      	ldr	r2, [pc, #676]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fc2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004fc6:	6093      	str	r3, [r2, #8]
 8004fc8:	4ba7      	ldr	r3, [pc, #668]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fd4:	49a4      	ldr	r1, [pc, #656]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0310 	and.w	r3, r3, #16
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d010      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fe6:	4ba0      	ldr	r3, [pc, #640]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fec:	4a9e      	ldr	r2, [pc, #632]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ff2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004ff6:	4b9c      	ldr	r3, [pc, #624]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ff8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005000:	4999      	ldr	r1, [pc, #612]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005002:	4313      	orrs	r3, r2
 8005004:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005014:	4b94      	ldr	r3, [pc, #592]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005022:	4991      	ldr	r1, [pc, #580]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005024:	4313      	orrs	r3, r2
 8005026:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005036:	4b8c      	ldr	r3, [pc, #560]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005044:	4988      	ldr	r1, [pc, #544]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005058:	4b83      	ldr	r3, [pc, #524]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800505a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005066:	4980      	ldr	r1, [pc, #512]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005068:	4313      	orrs	r3, r2
 800506a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800507a:	4b7b      	ldr	r3, [pc, #492]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800507c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005080:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005088:	4977      	ldr	r1, [pc, #476]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800508a:	4313      	orrs	r3, r2
 800508c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00a      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800509c:	4b72      	ldr	r3, [pc, #456]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800509e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a2:	f023 0203 	bic.w	r2, r3, #3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050aa:	496f      	ldr	r1, [pc, #444]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050be:	4b6a      	ldr	r3, [pc, #424]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c4:	f023 020c 	bic.w	r2, r3, #12
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050cc:	4966      	ldr	r1, [pc, #408]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00a      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050e0:	4b61      	ldr	r3, [pc, #388]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ee:	495e      	ldr	r1, [pc, #376]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00a      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005102:	4b59      	ldr	r3, [pc, #356]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005108:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005110:	4955      	ldr	r1, [pc, #340]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005112:	4313      	orrs	r3, r2
 8005114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00a      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005124:	4b50      	ldr	r3, [pc, #320]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005132:	494d      	ldr	r1, [pc, #308]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005134:	4313      	orrs	r3, r2
 8005136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00a      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005146:	4b48      	ldr	r3, [pc, #288]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005154:	4944      	ldr	r1, [pc, #272]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005156:	4313      	orrs	r3, r2
 8005158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00a      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005168:	4b3f      	ldr	r3, [pc, #252]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800516a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005176:	493c      	ldr	r1, [pc, #240]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005178:	4313      	orrs	r3, r2
 800517a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00a      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800518a:	4b37      	ldr	r3, [pc, #220]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800518c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005190:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005198:	4933      	ldr	r1, [pc, #204]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800519a:	4313      	orrs	r3, r2
 800519c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00a      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80051ac:	4b2e      	ldr	r3, [pc, #184]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051ba:	492b      	ldr	r1, [pc, #172]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d011      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80051ce:	4b26      	ldr	r3, [pc, #152]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051dc:	4922      	ldr	r1, [pc, #136]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051ec:	d101      	bne.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80051ee:	2301      	movs	r3, #1
 80051f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80051fe:	2301      	movs	r3, #1
 8005200:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800520e:	4b16      	ldr	r3, [pc, #88]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005214:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800521c:	4912      	ldr	r1, [pc, #72]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800521e:	4313      	orrs	r3, r2
 8005220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00b      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005230:	4b0d      	ldr	r3, [pc, #52]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005236:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005240:	4909      	ldr	r1, [pc, #36]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d006      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 80d9 	beq.w	800540e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800525c:	4b02      	ldr	r3, [pc, #8]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a01      	ldr	r2, [pc, #4]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005262:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005266:	e001      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005268:	40023800 	.word	0x40023800
 800526c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800526e:	f7fc ffc3 	bl	80021f8 <HAL_GetTick>
 8005272:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005274:	e008      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005276:	f7fc ffbf 	bl	80021f8 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b64      	cmp	r3, #100	; 0x64
 8005282:	d901      	bls.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e194      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005288:	4b6c      	ldr	r3, [pc, #432]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1f0      	bne.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d021      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d11d      	bne.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052a8:	4b64      	ldr	r3, [pc, #400]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ae:	0c1b      	lsrs	r3, r3, #16
 80052b0:	f003 0303 	and.w	r3, r3, #3
 80052b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052b6:	4b61      	ldr	r3, [pc, #388]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052bc:	0e1b      	lsrs	r3, r3, #24
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	019a      	lsls	r2, r3, #6
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	041b      	lsls	r3, r3, #16
 80052ce:	431a      	orrs	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	061b      	lsls	r3, r3, #24
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	071b      	lsls	r3, r3, #28
 80052dc:	4957      	ldr	r1, [pc, #348]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d004      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052f8:	d00a      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005302:	2b00      	cmp	r3, #0
 8005304:	d02e      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800530e:	d129      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005310:	4b4a      	ldr	r3, [pc, #296]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005316:	0c1b      	lsrs	r3, r3, #16
 8005318:	f003 0303 	and.w	r3, r3, #3
 800531c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800531e:	4b47      	ldr	r3, [pc, #284]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005324:	0f1b      	lsrs	r3, r3, #28
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	019a      	lsls	r2, r3, #6
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	041b      	lsls	r3, r3, #16
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	061b      	lsls	r3, r3, #24
 800533e:	431a      	orrs	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	071b      	lsls	r3, r3, #28
 8005344:	493d      	ldr	r1, [pc, #244]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005346:	4313      	orrs	r3, r2
 8005348:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800534c:	4b3b      	ldr	r3, [pc, #236]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800534e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005352:	f023 021f 	bic.w	r2, r3, #31
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	3b01      	subs	r3, #1
 800535c:	4937      	ldr	r1, [pc, #220]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d01d      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005370:	4b32      	ldr	r3, [pc, #200]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005376:	0e1b      	lsrs	r3, r3, #24
 8005378:	f003 030f 	and.w	r3, r3, #15
 800537c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800537e:	4b2f      	ldr	r3, [pc, #188]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005384:	0f1b      	lsrs	r3, r3, #28
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	019a      	lsls	r2, r3, #6
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	041b      	lsls	r3, r3, #16
 8005398:	431a      	orrs	r2, r3
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	061b      	lsls	r3, r3, #24
 800539e:	431a      	orrs	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	071b      	lsls	r3, r3, #28
 80053a4:	4925      	ldr	r1, [pc, #148]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d011      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	019a      	lsls	r2, r3, #6
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	041b      	lsls	r3, r3, #16
 80053c4:	431a      	orrs	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	061b      	lsls	r3, r3, #24
 80053cc:	431a      	orrs	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	071b      	lsls	r3, r3, #28
 80053d4:	4919      	ldr	r1, [pc, #100]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053dc:	4b17      	ldr	r3, [pc, #92]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a16      	ldr	r2, [pc, #88]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053e8:	f7fc ff06 	bl	80021f8 <HAL_GetTick>
 80053ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053ee:	e008      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053f0:	f7fc ff02 	bl	80021f8 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b64      	cmp	r3, #100	; 0x64
 80053fc:	d901      	bls.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e0d7      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005402:	4b0e      	ldr	r3, [pc, #56]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0f0      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	2b01      	cmp	r3, #1
 8005412:	f040 80cd 	bne.w	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005416:	4b09      	ldr	r3, [pc, #36]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a08      	ldr	r2, [pc, #32]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800541c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005422:	f7fc fee9 	bl	80021f8 <HAL_GetTick>
 8005426:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005428:	e00a      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800542a:	f7fc fee5 	bl	80021f8 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b64      	cmp	r3, #100	; 0x64
 8005436:	d903      	bls.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e0ba      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800543c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005440:	4b5e      	ldr	r3, [pc, #376]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800544c:	d0ed      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545e:	2b00      	cmp	r3, #0
 8005460:	d009      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800546a:	2b00      	cmp	r3, #0
 800546c:	d02e      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	2b00      	cmp	r3, #0
 8005474:	d12a      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005476:	4b51      	ldr	r3, [pc, #324]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547c:	0c1b      	lsrs	r3, r3, #16
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005484:	4b4d      	ldr	r3, [pc, #308]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548a:	0f1b      	lsrs	r3, r3, #28
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	019a      	lsls	r2, r3, #6
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	041b      	lsls	r3, r3, #16
 800549c:	431a      	orrs	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	061b      	lsls	r3, r3, #24
 80054a4:	431a      	orrs	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	071b      	lsls	r3, r3, #28
 80054aa:	4944      	ldr	r1, [pc, #272]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054b2:	4b42      	ldr	r3, [pc, #264]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c0:	3b01      	subs	r3, #1
 80054c2:	021b      	lsls	r3, r3, #8
 80054c4:	493d      	ldr	r1, [pc, #244]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d022      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054e0:	d11d      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054e2:	4b36      	ldr	r3, [pc, #216]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e8:	0e1b      	lsrs	r3, r3, #24
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054f0:	4b32      	ldr	r3, [pc, #200]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f6:	0f1b      	lsrs	r3, r3, #28
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	019a      	lsls	r2, r3, #6
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	041b      	lsls	r3, r3, #16
 800550a:	431a      	orrs	r2, r3
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	061b      	lsls	r3, r3, #24
 8005510:	431a      	orrs	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	071b      	lsls	r3, r3, #28
 8005516:	4929      	ldr	r1, [pc, #164]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005518:	4313      	orrs	r3, r2
 800551a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d028      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800552a:	4b24      	ldr	r3, [pc, #144]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005530:	0e1b      	lsrs	r3, r3, #24
 8005532:	f003 030f 	and.w	r3, r3, #15
 8005536:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005538:	4b20      	ldr	r3, [pc, #128]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800553a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553e:	0c1b      	lsrs	r3, r3, #16
 8005540:	f003 0303 	and.w	r3, r3, #3
 8005544:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	019a      	lsls	r2, r3, #6
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	041b      	lsls	r3, r3, #16
 8005550:	431a      	orrs	r2, r3
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	061b      	lsls	r3, r3, #24
 8005556:	431a      	orrs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	071b      	lsls	r3, r3, #28
 800555e:	4917      	ldr	r1, [pc, #92]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005560:	4313      	orrs	r3, r2
 8005562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005566:	4b15      	ldr	r3, [pc, #84]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800556c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	4911      	ldr	r1, [pc, #68]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005576:	4313      	orrs	r3, r2
 8005578:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800557c:	4b0f      	ldr	r3, [pc, #60]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a0e      	ldr	r2, [pc, #56]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005588:	f7fc fe36 	bl	80021f8 <HAL_GetTick>
 800558c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800558e:	e008      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005590:	f7fc fe32 	bl	80021f8 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b64      	cmp	r3, #100	; 0x64
 800559c:	d901      	bls.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e007      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055a2:	4b06      	ldr	r3, [pc, #24]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ae:	d1ef      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3720      	adds	r7, #32
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	40023800 	.word	0x40023800

080055c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e040      	b.n	8005654 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d106      	bne.n	80055e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7fc fc6e 	bl	8001ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2224      	movs	r2, #36	; 0x24
 80055ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0201 	bic.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f82c 	bl	800565c <UART_SetConfig>
 8005604:	4603      	mov	r3, r0
 8005606:	2b01      	cmp	r3, #1
 8005608:	d101      	bne.n	800560e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e022      	b.n	8005654 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fa84 	bl	8005b24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800562a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800563a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 fb0b 	bl	8005c68 <UART_CheckIdleState>
 8005652:	4603      	mov	r3, r0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b088      	sub	sp, #32
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005664:	2300      	movs	r3, #0
 8005666:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	431a      	orrs	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	4313      	orrs	r3, r2
 800567e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	4ba6      	ldr	r3, [pc, #664]	; (8005920 <UART_SetConfig+0x2c4>)
 8005688:	4013      	ands	r3, r2
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	6812      	ldr	r2, [r2, #0]
 800568e:	6979      	ldr	r1, [r7, #20]
 8005690:	430b      	orrs	r3, r1
 8005692:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a94      	ldr	r2, [pc, #592]	; (8005924 <UART_SetConfig+0x2c8>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d120      	bne.n	800571a <UART_SetConfig+0xbe>
 80056d8:	4b93      	ldr	r3, [pc, #588]	; (8005928 <UART_SetConfig+0x2cc>)
 80056da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	d816      	bhi.n	8005714 <UART_SetConfig+0xb8>
 80056e6:	a201      	add	r2, pc, #4	; (adr r2, 80056ec <UART_SetConfig+0x90>)
 80056e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ec:	080056fd 	.word	0x080056fd
 80056f0:	08005709 	.word	0x08005709
 80056f4:	08005703 	.word	0x08005703
 80056f8:	0800570f 	.word	0x0800570f
 80056fc:	2301      	movs	r3, #1
 80056fe:	77fb      	strb	r3, [r7, #31]
 8005700:	e150      	b.n	80059a4 <UART_SetConfig+0x348>
 8005702:	2302      	movs	r3, #2
 8005704:	77fb      	strb	r3, [r7, #31]
 8005706:	e14d      	b.n	80059a4 <UART_SetConfig+0x348>
 8005708:	2304      	movs	r3, #4
 800570a:	77fb      	strb	r3, [r7, #31]
 800570c:	e14a      	b.n	80059a4 <UART_SetConfig+0x348>
 800570e:	2308      	movs	r3, #8
 8005710:	77fb      	strb	r3, [r7, #31]
 8005712:	e147      	b.n	80059a4 <UART_SetConfig+0x348>
 8005714:	2310      	movs	r3, #16
 8005716:	77fb      	strb	r3, [r7, #31]
 8005718:	e144      	b.n	80059a4 <UART_SetConfig+0x348>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a83      	ldr	r2, [pc, #524]	; (800592c <UART_SetConfig+0x2d0>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d132      	bne.n	800578a <UART_SetConfig+0x12e>
 8005724:	4b80      	ldr	r3, [pc, #512]	; (8005928 <UART_SetConfig+0x2cc>)
 8005726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572a:	f003 030c 	and.w	r3, r3, #12
 800572e:	2b0c      	cmp	r3, #12
 8005730:	d828      	bhi.n	8005784 <UART_SetConfig+0x128>
 8005732:	a201      	add	r2, pc, #4	; (adr r2, 8005738 <UART_SetConfig+0xdc>)
 8005734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005738:	0800576d 	.word	0x0800576d
 800573c:	08005785 	.word	0x08005785
 8005740:	08005785 	.word	0x08005785
 8005744:	08005785 	.word	0x08005785
 8005748:	08005779 	.word	0x08005779
 800574c:	08005785 	.word	0x08005785
 8005750:	08005785 	.word	0x08005785
 8005754:	08005785 	.word	0x08005785
 8005758:	08005773 	.word	0x08005773
 800575c:	08005785 	.word	0x08005785
 8005760:	08005785 	.word	0x08005785
 8005764:	08005785 	.word	0x08005785
 8005768:	0800577f 	.word	0x0800577f
 800576c:	2300      	movs	r3, #0
 800576e:	77fb      	strb	r3, [r7, #31]
 8005770:	e118      	b.n	80059a4 <UART_SetConfig+0x348>
 8005772:	2302      	movs	r3, #2
 8005774:	77fb      	strb	r3, [r7, #31]
 8005776:	e115      	b.n	80059a4 <UART_SetConfig+0x348>
 8005778:	2304      	movs	r3, #4
 800577a:	77fb      	strb	r3, [r7, #31]
 800577c:	e112      	b.n	80059a4 <UART_SetConfig+0x348>
 800577e:	2308      	movs	r3, #8
 8005780:	77fb      	strb	r3, [r7, #31]
 8005782:	e10f      	b.n	80059a4 <UART_SetConfig+0x348>
 8005784:	2310      	movs	r3, #16
 8005786:	77fb      	strb	r3, [r7, #31]
 8005788:	e10c      	b.n	80059a4 <UART_SetConfig+0x348>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a68      	ldr	r2, [pc, #416]	; (8005930 <UART_SetConfig+0x2d4>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d120      	bne.n	80057d6 <UART_SetConfig+0x17a>
 8005794:	4b64      	ldr	r3, [pc, #400]	; (8005928 <UART_SetConfig+0x2cc>)
 8005796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800579e:	2b30      	cmp	r3, #48	; 0x30
 80057a0:	d013      	beq.n	80057ca <UART_SetConfig+0x16e>
 80057a2:	2b30      	cmp	r3, #48	; 0x30
 80057a4:	d814      	bhi.n	80057d0 <UART_SetConfig+0x174>
 80057a6:	2b20      	cmp	r3, #32
 80057a8:	d009      	beq.n	80057be <UART_SetConfig+0x162>
 80057aa:	2b20      	cmp	r3, #32
 80057ac:	d810      	bhi.n	80057d0 <UART_SetConfig+0x174>
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <UART_SetConfig+0x15c>
 80057b2:	2b10      	cmp	r3, #16
 80057b4:	d006      	beq.n	80057c4 <UART_SetConfig+0x168>
 80057b6:	e00b      	b.n	80057d0 <UART_SetConfig+0x174>
 80057b8:	2300      	movs	r3, #0
 80057ba:	77fb      	strb	r3, [r7, #31]
 80057bc:	e0f2      	b.n	80059a4 <UART_SetConfig+0x348>
 80057be:	2302      	movs	r3, #2
 80057c0:	77fb      	strb	r3, [r7, #31]
 80057c2:	e0ef      	b.n	80059a4 <UART_SetConfig+0x348>
 80057c4:	2304      	movs	r3, #4
 80057c6:	77fb      	strb	r3, [r7, #31]
 80057c8:	e0ec      	b.n	80059a4 <UART_SetConfig+0x348>
 80057ca:	2308      	movs	r3, #8
 80057cc:	77fb      	strb	r3, [r7, #31]
 80057ce:	e0e9      	b.n	80059a4 <UART_SetConfig+0x348>
 80057d0:	2310      	movs	r3, #16
 80057d2:	77fb      	strb	r3, [r7, #31]
 80057d4:	e0e6      	b.n	80059a4 <UART_SetConfig+0x348>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a56      	ldr	r2, [pc, #344]	; (8005934 <UART_SetConfig+0x2d8>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d120      	bne.n	8005822 <UART_SetConfig+0x1c6>
 80057e0:	4b51      	ldr	r3, [pc, #324]	; (8005928 <UART_SetConfig+0x2cc>)
 80057e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80057ea:	2bc0      	cmp	r3, #192	; 0xc0
 80057ec:	d013      	beq.n	8005816 <UART_SetConfig+0x1ba>
 80057ee:	2bc0      	cmp	r3, #192	; 0xc0
 80057f0:	d814      	bhi.n	800581c <UART_SetConfig+0x1c0>
 80057f2:	2b80      	cmp	r3, #128	; 0x80
 80057f4:	d009      	beq.n	800580a <UART_SetConfig+0x1ae>
 80057f6:	2b80      	cmp	r3, #128	; 0x80
 80057f8:	d810      	bhi.n	800581c <UART_SetConfig+0x1c0>
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d002      	beq.n	8005804 <UART_SetConfig+0x1a8>
 80057fe:	2b40      	cmp	r3, #64	; 0x40
 8005800:	d006      	beq.n	8005810 <UART_SetConfig+0x1b4>
 8005802:	e00b      	b.n	800581c <UART_SetConfig+0x1c0>
 8005804:	2300      	movs	r3, #0
 8005806:	77fb      	strb	r3, [r7, #31]
 8005808:	e0cc      	b.n	80059a4 <UART_SetConfig+0x348>
 800580a:	2302      	movs	r3, #2
 800580c:	77fb      	strb	r3, [r7, #31]
 800580e:	e0c9      	b.n	80059a4 <UART_SetConfig+0x348>
 8005810:	2304      	movs	r3, #4
 8005812:	77fb      	strb	r3, [r7, #31]
 8005814:	e0c6      	b.n	80059a4 <UART_SetConfig+0x348>
 8005816:	2308      	movs	r3, #8
 8005818:	77fb      	strb	r3, [r7, #31]
 800581a:	e0c3      	b.n	80059a4 <UART_SetConfig+0x348>
 800581c:	2310      	movs	r3, #16
 800581e:	77fb      	strb	r3, [r7, #31]
 8005820:	e0c0      	b.n	80059a4 <UART_SetConfig+0x348>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a44      	ldr	r2, [pc, #272]	; (8005938 <UART_SetConfig+0x2dc>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d125      	bne.n	8005878 <UART_SetConfig+0x21c>
 800582c:	4b3e      	ldr	r3, [pc, #248]	; (8005928 <UART_SetConfig+0x2cc>)
 800582e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005836:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800583a:	d017      	beq.n	800586c <UART_SetConfig+0x210>
 800583c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005840:	d817      	bhi.n	8005872 <UART_SetConfig+0x216>
 8005842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005846:	d00b      	beq.n	8005860 <UART_SetConfig+0x204>
 8005848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800584c:	d811      	bhi.n	8005872 <UART_SetConfig+0x216>
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <UART_SetConfig+0x1fe>
 8005852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005856:	d006      	beq.n	8005866 <UART_SetConfig+0x20a>
 8005858:	e00b      	b.n	8005872 <UART_SetConfig+0x216>
 800585a:	2300      	movs	r3, #0
 800585c:	77fb      	strb	r3, [r7, #31]
 800585e:	e0a1      	b.n	80059a4 <UART_SetConfig+0x348>
 8005860:	2302      	movs	r3, #2
 8005862:	77fb      	strb	r3, [r7, #31]
 8005864:	e09e      	b.n	80059a4 <UART_SetConfig+0x348>
 8005866:	2304      	movs	r3, #4
 8005868:	77fb      	strb	r3, [r7, #31]
 800586a:	e09b      	b.n	80059a4 <UART_SetConfig+0x348>
 800586c:	2308      	movs	r3, #8
 800586e:	77fb      	strb	r3, [r7, #31]
 8005870:	e098      	b.n	80059a4 <UART_SetConfig+0x348>
 8005872:	2310      	movs	r3, #16
 8005874:	77fb      	strb	r3, [r7, #31]
 8005876:	e095      	b.n	80059a4 <UART_SetConfig+0x348>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a2f      	ldr	r2, [pc, #188]	; (800593c <UART_SetConfig+0x2e0>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d125      	bne.n	80058ce <UART_SetConfig+0x272>
 8005882:	4b29      	ldr	r3, [pc, #164]	; (8005928 <UART_SetConfig+0x2cc>)
 8005884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005888:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800588c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005890:	d017      	beq.n	80058c2 <UART_SetConfig+0x266>
 8005892:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005896:	d817      	bhi.n	80058c8 <UART_SetConfig+0x26c>
 8005898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800589c:	d00b      	beq.n	80058b6 <UART_SetConfig+0x25a>
 800589e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058a2:	d811      	bhi.n	80058c8 <UART_SetConfig+0x26c>
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <UART_SetConfig+0x254>
 80058a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ac:	d006      	beq.n	80058bc <UART_SetConfig+0x260>
 80058ae:	e00b      	b.n	80058c8 <UART_SetConfig+0x26c>
 80058b0:	2301      	movs	r3, #1
 80058b2:	77fb      	strb	r3, [r7, #31]
 80058b4:	e076      	b.n	80059a4 <UART_SetConfig+0x348>
 80058b6:	2302      	movs	r3, #2
 80058b8:	77fb      	strb	r3, [r7, #31]
 80058ba:	e073      	b.n	80059a4 <UART_SetConfig+0x348>
 80058bc:	2304      	movs	r3, #4
 80058be:	77fb      	strb	r3, [r7, #31]
 80058c0:	e070      	b.n	80059a4 <UART_SetConfig+0x348>
 80058c2:	2308      	movs	r3, #8
 80058c4:	77fb      	strb	r3, [r7, #31]
 80058c6:	e06d      	b.n	80059a4 <UART_SetConfig+0x348>
 80058c8:	2310      	movs	r3, #16
 80058ca:	77fb      	strb	r3, [r7, #31]
 80058cc:	e06a      	b.n	80059a4 <UART_SetConfig+0x348>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a1b      	ldr	r2, [pc, #108]	; (8005940 <UART_SetConfig+0x2e4>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d138      	bne.n	800594a <UART_SetConfig+0x2ee>
 80058d8:	4b13      	ldr	r3, [pc, #76]	; (8005928 <UART_SetConfig+0x2cc>)
 80058da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80058e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058e6:	d017      	beq.n	8005918 <UART_SetConfig+0x2bc>
 80058e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058ec:	d82a      	bhi.n	8005944 <UART_SetConfig+0x2e8>
 80058ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f2:	d00b      	beq.n	800590c <UART_SetConfig+0x2b0>
 80058f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f8:	d824      	bhi.n	8005944 <UART_SetConfig+0x2e8>
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <UART_SetConfig+0x2aa>
 80058fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005902:	d006      	beq.n	8005912 <UART_SetConfig+0x2b6>
 8005904:	e01e      	b.n	8005944 <UART_SetConfig+0x2e8>
 8005906:	2300      	movs	r3, #0
 8005908:	77fb      	strb	r3, [r7, #31]
 800590a:	e04b      	b.n	80059a4 <UART_SetConfig+0x348>
 800590c:	2302      	movs	r3, #2
 800590e:	77fb      	strb	r3, [r7, #31]
 8005910:	e048      	b.n	80059a4 <UART_SetConfig+0x348>
 8005912:	2304      	movs	r3, #4
 8005914:	77fb      	strb	r3, [r7, #31]
 8005916:	e045      	b.n	80059a4 <UART_SetConfig+0x348>
 8005918:	2308      	movs	r3, #8
 800591a:	77fb      	strb	r3, [r7, #31]
 800591c:	e042      	b.n	80059a4 <UART_SetConfig+0x348>
 800591e:	bf00      	nop
 8005920:	efff69f3 	.word	0xefff69f3
 8005924:	40011000 	.word	0x40011000
 8005928:	40023800 	.word	0x40023800
 800592c:	40004400 	.word	0x40004400
 8005930:	40004800 	.word	0x40004800
 8005934:	40004c00 	.word	0x40004c00
 8005938:	40005000 	.word	0x40005000
 800593c:	40011400 	.word	0x40011400
 8005940:	40007800 	.word	0x40007800
 8005944:	2310      	movs	r3, #16
 8005946:	77fb      	strb	r3, [r7, #31]
 8005948:	e02c      	b.n	80059a4 <UART_SetConfig+0x348>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a72      	ldr	r2, [pc, #456]	; (8005b18 <UART_SetConfig+0x4bc>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d125      	bne.n	80059a0 <UART_SetConfig+0x344>
 8005954:	4b71      	ldr	r3, [pc, #452]	; (8005b1c <UART_SetConfig+0x4c0>)
 8005956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800595e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005962:	d017      	beq.n	8005994 <UART_SetConfig+0x338>
 8005964:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005968:	d817      	bhi.n	800599a <UART_SetConfig+0x33e>
 800596a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800596e:	d00b      	beq.n	8005988 <UART_SetConfig+0x32c>
 8005970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005974:	d811      	bhi.n	800599a <UART_SetConfig+0x33e>
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <UART_SetConfig+0x326>
 800597a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800597e:	d006      	beq.n	800598e <UART_SetConfig+0x332>
 8005980:	e00b      	b.n	800599a <UART_SetConfig+0x33e>
 8005982:	2300      	movs	r3, #0
 8005984:	77fb      	strb	r3, [r7, #31]
 8005986:	e00d      	b.n	80059a4 <UART_SetConfig+0x348>
 8005988:	2302      	movs	r3, #2
 800598a:	77fb      	strb	r3, [r7, #31]
 800598c:	e00a      	b.n	80059a4 <UART_SetConfig+0x348>
 800598e:	2304      	movs	r3, #4
 8005990:	77fb      	strb	r3, [r7, #31]
 8005992:	e007      	b.n	80059a4 <UART_SetConfig+0x348>
 8005994:	2308      	movs	r3, #8
 8005996:	77fb      	strb	r3, [r7, #31]
 8005998:	e004      	b.n	80059a4 <UART_SetConfig+0x348>
 800599a:	2310      	movs	r3, #16
 800599c:	77fb      	strb	r3, [r7, #31]
 800599e:	e001      	b.n	80059a4 <UART_SetConfig+0x348>
 80059a0:	2310      	movs	r3, #16
 80059a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ac:	d15b      	bne.n	8005a66 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80059ae:	7ffb      	ldrb	r3, [r7, #31]
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d828      	bhi.n	8005a06 <UART_SetConfig+0x3aa>
 80059b4:	a201      	add	r2, pc, #4	; (adr r2, 80059bc <UART_SetConfig+0x360>)
 80059b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ba:	bf00      	nop
 80059bc:	080059e1 	.word	0x080059e1
 80059c0:	080059e9 	.word	0x080059e9
 80059c4:	080059f1 	.word	0x080059f1
 80059c8:	08005a07 	.word	0x08005a07
 80059cc:	080059f7 	.word	0x080059f7
 80059d0:	08005a07 	.word	0x08005a07
 80059d4:	08005a07 	.word	0x08005a07
 80059d8:	08005a07 	.word	0x08005a07
 80059dc:	080059ff 	.word	0x080059ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059e0:	f7ff f9d6 	bl	8004d90 <HAL_RCC_GetPCLK1Freq>
 80059e4:	61b8      	str	r0, [r7, #24]
        break;
 80059e6:	e013      	b.n	8005a10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059e8:	f7ff f9e6 	bl	8004db8 <HAL_RCC_GetPCLK2Freq>
 80059ec:	61b8      	str	r0, [r7, #24]
        break;
 80059ee:	e00f      	b.n	8005a10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059f0:	4b4b      	ldr	r3, [pc, #300]	; (8005b20 <UART_SetConfig+0x4c4>)
 80059f2:	61bb      	str	r3, [r7, #24]
        break;
 80059f4:	e00c      	b.n	8005a10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059f6:	f7ff f8b9 	bl	8004b6c <HAL_RCC_GetSysClockFreq>
 80059fa:	61b8      	str	r0, [r7, #24]
        break;
 80059fc:	e008      	b.n	8005a10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a02:	61bb      	str	r3, [r7, #24]
        break;
 8005a04:	e004      	b.n	8005a10 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	77bb      	strb	r3, [r7, #30]
        break;
 8005a0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d074      	beq.n	8005b00 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	005a      	lsls	r2, r3, #1
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	085b      	lsrs	r3, r3, #1
 8005a20:	441a      	add	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	2b0f      	cmp	r3, #15
 8005a30:	d916      	bls.n	8005a60 <UART_SetConfig+0x404>
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a38:	d212      	bcs.n	8005a60 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	f023 030f 	bic.w	r3, r3, #15
 8005a42:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	085b      	lsrs	r3, r3, #1
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	f003 0307 	and.w	r3, r3, #7
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	89fb      	ldrh	r3, [r7, #14]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	89fa      	ldrh	r2, [r7, #14]
 8005a5c:	60da      	str	r2, [r3, #12]
 8005a5e:	e04f      	b.n	8005b00 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	77bb      	strb	r3, [r7, #30]
 8005a64:	e04c      	b.n	8005b00 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a66:	7ffb      	ldrb	r3, [r7, #31]
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d828      	bhi.n	8005abe <UART_SetConfig+0x462>
 8005a6c:	a201      	add	r2, pc, #4	; (adr r2, 8005a74 <UART_SetConfig+0x418>)
 8005a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a72:	bf00      	nop
 8005a74:	08005a99 	.word	0x08005a99
 8005a78:	08005aa1 	.word	0x08005aa1
 8005a7c:	08005aa9 	.word	0x08005aa9
 8005a80:	08005abf 	.word	0x08005abf
 8005a84:	08005aaf 	.word	0x08005aaf
 8005a88:	08005abf 	.word	0x08005abf
 8005a8c:	08005abf 	.word	0x08005abf
 8005a90:	08005abf 	.word	0x08005abf
 8005a94:	08005ab7 	.word	0x08005ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a98:	f7ff f97a 	bl	8004d90 <HAL_RCC_GetPCLK1Freq>
 8005a9c:	61b8      	str	r0, [r7, #24]
        break;
 8005a9e:	e013      	b.n	8005ac8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005aa0:	f7ff f98a 	bl	8004db8 <HAL_RCC_GetPCLK2Freq>
 8005aa4:	61b8      	str	r0, [r7, #24]
        break;
 8005aa6:	e00f      	b.n	8005ac8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005aa8:	4b1d      	ldr	r3, [pc, #116]	; (8005b20 <UART_SetConfig+0x4c4>)
 8005aaa:	61bb      	str	r3, [r7, #24]
        break;
 8005aac:	e00c      	b.n	8005ac8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aae:	f7ff f85d 	bl	8004b6c <HAL_RCC_GetSysClockFreq>
 8005ab2:	61b8      	str	r0, [r7, #24]
        break;
 8005ab4:	e008      	b.n	8005ac8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aba:	61bb      	str	r3, [r7, #24]
        break;
 8005abc:	e004      	b.n	8005ac8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	77bb      	strb	r3, [r7, #30]
        break;
 8005ac6:	bf00      	nop
    }

    if (pclk != 0U)
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d018      	beq.n	8005b00 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	085a      	lsrs	r2, r3, #1
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	441a      	add	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	2b0f      	cmp	r3, #15
 8005ae6:	d909      	bls.n	8005afc <UART_SetConfig+0x4a0>
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aee:	d205      	bcs.n	8005afc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	60da      	str	r2, [r3, #12]
 8005afa:	e001      	b.n	8005b00 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005b0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3720      	adds	r7, #32
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	40007c00 	.word	0x40007c00
 8005b1c:	40023800 	.word	0x40023800
 8005b20:	00f42400 	.word	0x00f42400

08005b24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00a      	beq.n	8005b4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00a      	beq.n	8005b70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00a      	beq.n	8005b92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	f003 0308 	and.w	r3, r3, #8
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00a      	beq.n	8005bb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	f003 0310 	and.w	r3, r3, #16
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00a      	beq.n	8005bd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	f003 0320 	and.w	r3, r3, #32
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00a      	beq.n	8005bf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d01a      	beq.n	8005c3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	430a      	orrs	r2, r1
 8005c18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c22:	d10a      	bne.n	8005c3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	605a      	str	r2, [r3, #4]
  }
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af02      	add	r7, sp, #8
 8005c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c78:	f7fc fabe 	bl	80021f8 <HAL_GetTick>
 8005c7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0308 	and.w	r3, r3, #8
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d10e      	bne.n	8005caa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f81b 	bl	8005cd6 <UART_WaitOnFlagUntilTimeout>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e011      	b.n	8005cce <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2220      	movs	r2, #32
 8005cae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b09c      	sub	sp, #112	; 0x70
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	60f8      	str	r0, [r7, #12]
 8005cde:	60b9      	str	r1, [r7, #8]
 8005ce0:	603b      	str	r3, [r7, #0]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ce6:	e0a7      	b.n	8005e38 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cee:	f000 80a3 	beq.w	8005e38 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf2:	f7fc fa81 	bl	80021f8 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d302      	bcc.n	8005d08 <UART_WaitOnFlagUntilTimeout+0x32>
 8005d02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d13f      	bne.n	8005d88 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d10:	e853 3f00 	ldrex	r3, [r3]
 8005d14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d1c:	667b      	str	r3, [r7, #100]	; 0x64
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	461a      	mov	r2, r3
 8005d24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d28:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d2e:	e841 2300 	strex	r3, r2, [r1]
 8005d32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1e6      	bne.n	8005d08 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	3308      	adds	r3, #8
 8005d40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d44:	e853 3f00 	ldrex	r3, [r3]
 8005d48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4c:	f023 0301 	bic.w	r3, r3, #1
 8005d50:	663b      	str	r3, [r7, #96]	; 0x60
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3308      	adds	r3, #8
 8005d58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d62:	e841 2300 	strex	r3, r2, [r1]
 8005d66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1e5      	bne.n	8005d3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2220      	movs	r2, #32
 8005d72:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e068      	b.n	8005e5a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0304 	and.w	r3, r3, #4
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d050      	beq.n	8005e38 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005da4:	d148      	bne.n	8005e38 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db8:	e853 3f00 	ldrex	r3, [r3]
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005dc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dce:	637b      	str	r3, [r7, #52]	; 0x34
 8005dd0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005dd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dd6:	e841 2300 	strex	r3, r2, [r1]
 8005dda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1e6      	bne.n	8005db0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	3308      	adds	r3, #8
 8005de8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	e853 3f00 	ldrex	r3, [r3]
 8005df0:	613b      	str	r3, [r7, #16]
   return(result);
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f023 0301 	bic.w	r3, r3, #1
 8005df8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3308      	adds	r3, #8
 8005e00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e02:	623a      	str	r2, [r7, #32]
 8005e04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e06:	69f9      	ldr	r1, [r7, #28]
 8005e08:	6a3a      	ldr	r2, [r7, #32]
 8005e0a:	e841 2300 	strex	r3, r2, [r1]
 8005e0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1e5      	bne.n	8005de2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e010      	b.n	8005e5a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	69da      	ldr	r2, [r3, #28]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	4013      	ands	r3, r2
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	bf0c      	ite	eq
 8005e48:	2301      	moveq	r3, #1
 8005e4a:	2300      	movne	r3, #0
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	461a      	mov	r2, r3
 8005e50:	79fb      	ldrb	r3, [r7, #7]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	f43f af48 	beq.w	8005ce8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3770      	adds	r7, #112	; 0x70
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e64:	b084      	sub	sp, #16
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	f107 001c 	add.w	r0, r7, #28
 8005e72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d120      	bne.n	8005ebe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68da      	ldr	r2, [r3, #12]
 8005e8c:	4b20      	ldr	r3, [pc, #128]	; (8005f10 <USB_CoreInit+0xac>)
 8005e8e:	4013      	ands	r3, r2
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d105      	bne.n	8005eb2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fa96 	bl	80063e4 <USB_CoreReset>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	73fb      	strb	r3, [r7, #15]
 8005ebc:	e010      	b.n	8005ee0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fa8a 	bl	80063e4 <USB_CoreReset>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d10b      	bne.n	8005efe <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f043 0206 	orr.w	r2, r3, #6
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f043 0220 	orr.w	r2, r3, #32
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f0a:	b004      	add	sp, #16
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	ffbdffbf 	.word	0xffbdffbf

08005f14 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f023 0201 	bic.w	r2, r3, #1
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b084      	sub	sp, #16
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
 8005f3e:	460b      	mov	r3, r1
 8005f40:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f52:	78fb      	ldrb	r3, [r7, #3]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d115      	bne.n	8005f84 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f64:	2001      	movs	r0, #1
 8005f66:	f7fc f953 	bl	8002210 <HAL_Delay>
      ms++;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 fa29 	bl	80063c8 <USB_GetMode>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d01e      	beq.n	8005fba <USB_SetCurrentMode+0x84>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b31      	cmp	r3, #49	; 0x31
 8005f80:	d9f0      	bls.n	8005f64 <USB_SetCurrentMode+0x2e>
 8005f82:	e01a      	b.n	8005fba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f84:	78fb      	ldrb	r3, [r7, #3]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d115      	bne.n	8005fb6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f96:	2001      	movs	r0, #1
 8005f98:	f7fc f93a 	bl	8002210 <HAL_Delay>
      ms++;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fa10 	bl	80063c8 <USB_GetMode>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d005      	beq.n	8005fba <USB_SetCurrentMode+0x84>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2b31      	cmp	r3, #49	; 0x31
 8005fb2:	d9f0      	bls.n	8005f96 <USB_SetCurrentMode+0x60>
 8005fb4:	e001      	b.n	8005fba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e005      	b.n	8005fc6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2b32      	cmp	r3, #50	; 0x32
 8005fbe:	d101      	bne.n	8005fc4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e000      	b.n	8005fc6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b086      	sub	sp, #24
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005fde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005fea:	2300      	movs	r3, #0
 8005fec:	613b      	str	r3, [r7, #16]
 8005fee:	e009      	b.n	8006004 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	3340      	adds	r3, #64	; 0x40
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	3301      	adds	r3, #1
 8006002:	613b      	str	r3, [r7, #16]
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	2b0e      	cmp	r3, #14
 8006008:	d9f2      	bls.n	8005ff0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800600a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800600c:	2b00      	cmp	r3, #0
 800600e:	d11c      	bne.n	800604a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800601e:	f043 0302 	orr.w	r3, r3, #2
 8006022:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006028:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	e005      	b.n	8006056 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800605c:	461a      	mov	r2, r3
 800605e:	2300      	movs	r3, #0
 8006060:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006068:	4619      	mov	r1, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006070:	461a      	mov	r2, r3
 8006072:	680b      	ldr	r3, [r1, #0]
 8006074:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006078:	2b01      	cmp	r3, #1
 800607a:	d10c      	bne.n	8006096 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800607c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607e:	2b00      	cmp	r3, #0
 8006080:	d104      	bne.n	800608c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006082:	2100      	movs	r1, #0
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f965 	bl	8006354 <USB_SetDevSpeed>
 800608a:	e008      	b.n	800609e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800608c:	2101      	movs	r1, #1
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f960 	bl	8006354 <USB_SetDevSpeed>
 8006094:	e003      	b.n	800609e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006096:	2103      	movs	r1, #3
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f95b 	bl	8006354 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800609e:	2110      	movs	r1, #16
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f8f3 	bl	800628c <USB_FlushTxFifo>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f91f 	bl	80062f4 <USB_FlushRxFifo>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c6:	461a      	mov	r2, r3
 80060c8:	2300      	movs	r3, #0
 80060ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d2:	461a      	mov	r2, r3
 80060d4:	2300      	movs	r3, #0
 80060d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060de:	461a      	mov	r2, r3
 80060e0:	2300      	movs	r3, #0
 80060e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060e4:	2300      	movs	r3, #0
 80060e6:	613b      	str	r3, [r7, #16]
 80060e8:	e043      	b.n	8006172 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006100:	d118      	bne.n	8006134 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10a      	bne.n	800611e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006114:	461a      	mov	r2, r3
 8006116:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800611a:	6013      	str	r3, [r2, #0]
 800611c:	e013      	b.n	8006146 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	4413      	add	r3, r2
 8006126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612a:	461a      	mov	r2, r3
 800612c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006130:	6013      	str	r3, [r2, #0]
 8006132:	e008      	b.n	8006146 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006140:	461a      	mov	r2, r3
 8006142:	2300      	movs	r3, #0
 8006144:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006152:	461a      	mov	r2, r3
 8006154:	2300      	movs	r3, #0
 8006156:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006164:	461a      	mov	r2, r3
 8006166:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800616a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	3301      	adds	r3, #1
 8006170:	613b      	str	r3, [r7, #16]
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	429a      	cmp	r2, r3
 8006178:	d3b7      	bcc.n	80060ea <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800617a:	2300      	movs	r3, #0
 800617c:	613b      	str	r3, [r7, #16]
 800617e:	e043      	b.n	8006208 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006192:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006196:	d118      	bne.n	80061ca <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10a      	bne.n	80061b4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061aa:	461a      	mov	r2, r3
 80061ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061b0:	6013      	str	r3, [r2, #0]
 80061b2:	e013      	b.n	80061dc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c0:	461a      	mov	r2, r3
 80061c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061c6:	6013      	str	r3, [r2, #0]
 80061c8:	e008      	b.n	80061dc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d6:	461a      	mov	r2, r3
 80061d8:	2300      	movs	r3, #0
 80061da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e8:	461a      	mov	r2, r3
 80061ea:	2300      	movs	r3, #0
 80061ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fa:	461a      	mov	r2, r3
 80061fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006200:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	3301      	adds	r3, #1
 8006206:	613b      	str	r3, [r7, #16]
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	429a      	cmp	r2, r3
 800620e:	d3b7      	bcc.n	8006180 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800621e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006222:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006230:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006234:	2b00      	cmp	r3, #0
 8006236:	d105      	bne.n	8006244 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	f043 0210 	orr.w	r2, r3, #16
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	699a      	ldr	r2, [r3, #24]
 8006248:	4b0e      	ldr	r3, [pc, #56]	; (8006284 <USB_DevInit+0x2b4>)
 800624a:	4313      	orrs	r3, r2
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006252:	2b00      	cmp	r3, #0
 8006254:	d005      	beq.n	8006262 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	f043 0208 	orr.w	r2, r3, #8
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006264:	2b01      	cmp	r3, #1
 8006266:	d105      	bne.n	8006274 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	699a      	ldr	r2, [r3, #24]
 800626c:	4b06      	ldr	r3, [pc, #24]	; (8006288 <USB_DevInit+0x2b8>)
 800626e:	4313      	orrs	r3, r2
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006274:	7dfb      	ldrb	r3, [r7, #23]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3718      	adds	r7, #24
 800627a:	46bd      	mov	sp, r7
 800627c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006280:	b004      	add	sp, #16
 8006282:	4770      	bx	lr
 8006284:	803c3800 	.word	0x803c3800
 8006288:	40000004 	.word	0x40000004

0800628c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3301      	adds	r3, #1
 800629e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4a13      	ldr	r2, [pc, #76]	; (80062f0 <USB_FlushTxFifo+0x64>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d901      	bls.n	80062ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e01b      	b.n	80062e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	daf2      	bge.n	800629a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80062b4:	2300      	movs	r3, #0
 80062b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	019b      	lsls	r3, r3, #6
 80062bc:	f043 0220 	orr.w	r2, r3, #32
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	3301      	adds	r3, #1
 80062c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	4a08      	ldr	r2, [pc, #32]	; (80062f0 <USB_FlushTxFifo+0x64>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d901      	bls.n	80062d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e006      	b.n	80062e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	f003 0320 	and.w	r3, r3, #32
 80062de:	2b20      	cmp	r3, #32
 80062e0:	d0f0      	beq.n	80062c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	00030d40 	.word	0x00030d40

080062f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	3301      	adds	r3, #1
 8006304:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4a11      	ldr	r2, [pc, #68]	; (8006350 <USB_FlushRxFifo+0x5c>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d901      	bls.n	8006312 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e018      	b.n	8006344 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	2b00      	cmp	r3, #0
 8006318:	daf2      	bge.n	8006300 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800631a:	2300      	movs	r3, #0
 800631c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2210      	movs	r2, #16
 8006322:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	3301      	adds	r3, #1
 8006328:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4a08      	ldr	r2, [pc, #32]	; (8006350 <USB_FlushRxFifo+0x5c>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d901      	bls.n	8006336 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e006      	b.n	8006344 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f003 0310 	and.w	r3, r3, #16
 800633e:	2b10      	cmp	r3, #16
 8006340:	d0f0      	beq.n	8006324 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	00030d40 	.word	0x00030d40

08006354 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	460b      	mov	r3, r1
 800635e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	78fb      	ldrb	r3, [r7, #3]
 800636e:	68f9      	ldr	r1, [r7, #12]
 8006370:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006374:	4313      	orrs	r3, r2
 8006376:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006386:	b480      	push	{r7}
 8006388:	b085      	sub	sp, #20
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063a0:	f023 0303 	bic.w	r3, r3, #3
 80063a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063b4:	f043 0302 	orr.w	r3, r3, #2
 80063b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	f003 0301 	and.w	r3, r3, #1
}
 80063d8:	4618      	mov	r0, r3
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	3301      	adds	r3, #1
 80063f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	4a13      	ldr	r2, [pc, #76]	; (8006448 <USB_CoreReset+0x64>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d901      	bls.n	8006402 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e01b      	b.n	800643a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	daf2      	bge.n	80063f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800640a:	2300      	movs	r3, #0
 800640c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f043 0201 	orr.w	r2, r3, #1
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	3301      	adds	r3, #1
 800641e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4a09      	ldr	r2, [pc, #36]	; (8006448 <USB_CoreReset+0x64>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d901      	bls.n	800642c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e006      	b.n	800643a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	2b01      	cmp	r3, #1
 8006436:	d0f0      	beq.n	800641a <USB_CoreReset+0x36>

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	00030d40 	.word	0x00030d40

0800644c <__libc_init_array>:
 800644c:	b570      	push	{r4, r5, r6, lr}
 800644e:	4d0d      	ldr	r5, [pc, #52]	; (8006484 <__libc_init_array+0x38>)
 8006450:	4c0d      	ldr	r4, [pc, #52]	; (8006488 <__libc_init_array+0x3c>)
 8006452:	1b64      	subs	r4, r4, r5
 8006454:	10a4      	asrs	r4, r4, #2
 8006456:	2600      	movs	r6, #0
 8006458:	42a6      	cmp	r6, r4
 800645a:	d109      	bne.n	8006470 <__libc_init_array+0x24>
 800645c:	4d0b      	ldr	r5, [pc, #44]	; (800648c <__libc_init_array+0x40>)
 800645e:	4c0c      	ldr	r4, [pc, #48]	; (8006490 <__libc_init_array+0x44>)
 8006460:	f000 f820 	bl	80064a4 <_init>
 8006464:	1b64      	subs	r4, r4, r5
 8006466:	10a4      	asrs	r4, r4, #2
 8006468:	2600      	movs	r6, #0
 800646a:	42a6      	cmp	r6, r4
 800646c:	d105      	bne.n	800647a <__libc_init_array+0x2e>
 800646e:	bd70      	pop	{r4, r5, r6, pc}
 8006470:	f855 3b04 	ldr.w	r3, [r5], #4
 8006474:	4798      	blx	r3
 8006476:	3601      	adds	r6, #1
 8006478:	e7ee      	b.n	8006458 <__libc_init_array+0xc>
 800647a:	f855 3b04 	ldr.w	r3, [r5], #4
 800647e:	4798      	blx	r3
 8006480:	3601      	adds	r6, #1
 8006482:	e7f2      	b.n	800646a <__libc_init_array+0x1e>
 8006484:	08008b50 	.word	0x08008b50
 8006488:	08008b50 	.word	0x08008b50
 800648c:	08008b50 	.word	0x08008b50
 8006490:	08008b54 	.word	0x08008b54

08006494 <memset>:
 8006494:	4402      	add	r2, r0
 8006496:	4603      	mov	r3, r0
 8006498:	4293      	cmp	r3, r2
 800649a:	d100      	bne.n	800649e <memset+0xa>
 800649c:	4770      	bx	lr
 800649e:	f803 1b01 	strb.w	r1, [r3], #1
 80064a2:	e7f9      	b.n	8006498 <memset+0x4>

080064a4 <_init>:
 80064a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a6:	bf00      	nop
 80064a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064aa:	bc08      	pop	{r3}
 80064ac:	469e      	mov	lr, r3
 80064ae:	4770      	bx	lr

080064b0 <_fini>:
 80064b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b2:	bf00      	nop
 80064b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b6:	bc08      	pop	{r3}
 80064b8:	469e      	mov	lr, r3
 80064ba:	4770      	bx	lr
