
OHMIO-FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fcc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001dc8  0800619c  0800619c  0001619c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f64  08007f64  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  08007f64  08007f64  00017f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f6c  08007f6c  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f6c  08007f6c  00017f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f70  08007f70  00017f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  08007ffc  00020088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  0800809c  00020128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b5c  200001c8  0800813c  000201c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000d24  0800813c  00020d24  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017cf7  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002e38  00000000  00000000  00037eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001218  00000000  00000000  0003ad28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000010d8  00000000  00000000  0003bf40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000287a1  00000000  00000000  0003d018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001685f  00000000  00000000  000657b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f6a10  00000000  00000000  0007c018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00172a28  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005028  00000000  00000000  00172a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c8 	.word	0x200001c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006184 	.word	0x08006184

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001cc 	.word	0x200001cc
 800020c:	08006184 	.word	0x08006184

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f001 f8d5 	bl	8001766 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f832 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 f9d6 	bl	8000970 <MX_GPIO_Init>
  MX_ETH_Init();
 80005c4:	f000 f8e8 	bl	8000798 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005c8:	f000 f974 	bl	80008b4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005cc:	f000 f9a2 	bl	8000914 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 80005d0:	f000 f930 	bl	8000834 <MX_I2C2_Init>
  MX_ADC1_Init();
 80005d4:	f000 f88e 	bl	80006f4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80005d8:	f000 fab6 	bl	8000b48 <ssd1306_Init>
  //INICIALIZAMOS EL SPLASH
  ssd1306_OhmioSplash();
 80005dc:	f000 fdbc 	bl	8001158 <ssd1306_OhmioSplash>
  ssd1306_OhmioMenuPrincipal();
 80005e0:	f000 fdc6 	bl	8001170 <ssd1306_OhmioMenuPrincipal>
  while (1)
  {
    /* USER CODE END WHILE */
	  //INICIALIZAMOS EL SPLASH

	  HAL_ADC_Start(&hadc1);
 80005e4:	480d      	ldr	r0, [pc, #52]	; (800061c <main+0x68>)
 80005e6:	f001 f983 	bl	80018f0 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1, 10)==HAL_OK){
 80005ea:	210a      	movs	r1, #10
 80005ec:	480b      	ldr	r0, [pc, #44]	; (800061c <main+0x68>)
 80005ee:	f001 fa81 	bl	8001af4 <HAL_ADC_PollForConversion>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d10a      	bne.n	800060e <main+0x5a>
		  analog_value_keypad=HAL_ADC_GetValue(&hadc1);
 80005f8:	4808      	ldr	r0, [pc, #32]	; (800061c <main+0x68>)
 80005fa:	f001 fb06 	bl	8001c0a <HAL_ADC_GetValue>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a07      	ldr	r2, [pc, #28]	; (8000620 <main+0x6c>)
 8000602:	6013      	str	r3, [r2, #0]
		  ssd1306_DisplayAnalogValue(analog_value_keypad);
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <main+0x6c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4618      	mov	r0, r3
 800060a:	f000 fd4b 	bl	80010a4 <ssd1306_DisplayAnalogValue>
	  }
	  HAL_ADC_Stop(&hadc1);
 800060e:	4803      	ldr	r0, [pc, #12]	; (800061c <main+0x68>)
 8000610:	f001 fa3c 	bl	8001a8c <HAL_ADC_Stop>
	  HAL_Delay(50);
 8000614:	2032      	movs	r0, #50	; 0x32
 8000616:	f001 f903 	bl	8001820 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 800061a:	e7e3      	b.n	80005e4 <main+0x30>
 800061c:	2000021c 	.word	0x2000021c
 8000620:	20000264 	.word	0x20000264

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2230      	movs	r2, #48	; 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f005 f92a 	bl	800588c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000648:	f003 f8d8 	bl	80037fc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	4b27      	ldr	r3, [pc, #156]	; (80006ec <SystemClock_Config+0xc8>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	4a26      	ldr	r2, [pc, #152]	; (80006ec <SystemClock_Config+0xc8>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	; 0x40
 8000658:	4b24      	ldr	r3, [pc, #144]	; (80006ec <SystemClock_Config+0xc8>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000664:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <SystemClock_Config+0xcc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800066c:	4a20      	ldr	r2, [pc, #128]	; (80006f0 <SystemClock_Config+0xcc>)
 800066e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <SystemClock_Config+0xcc>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000680:	2301      	movs	r3, #1
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000684:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000694:	2304      	movs	r3, #4
 8000696:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000698:	2348      	movs	r3, #72	; 0x48
 800069a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006a0:	2303      	movs	r3, #3
 80006a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 0320 	add.w	r3, r7, #32
 80006a8:	4618      	mov	r0, r3
 80006aa:	f003 f8b7 	bl	800381c <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b4:	f000 fa0a 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006bc:	2302      	movs	r3, #2
 80006be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	2102      	movs	r1, #2
 80006d4:	4618      	mov	r0, r3
 80006d6:	f003 fb45 	bl	8003d64 <HAL_RCC_ClockConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006e0:	f000 f9f4 	bl	8000acc <Error_Handler>
  }
}
 80006e4:	bf00      	nop
 80006e6:	3750      	adds	r7, #80	; 0x50
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000706:	4b21      	ldr	r3, [pc, #132]	; (800078c <MX_ADC1_Init+0x98>)
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <MX_ADC1_Init+0x9c>)
 800070a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_ADC1_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000712:	4b1e      	ldr	r3, [pc, #120]	; (800078c <MX_ADC1_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000718:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MX_ADC1_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_ADC1_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000724:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_ADC1_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_ADC1_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_ADC1_Init+0x98>)
 8000734:	4a17      	ldr	r2, [pc, #92]	; (8000794 <MX_ADC1_Init+0xa0>)
 8000736:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_ADC1_Init+0x98>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_ADC1_Init+0x98>)
 8000740:	2201      	movs	r2, #1
 8000742:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_ADC1_Init+0x98>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_ADC1_Init+0x98>)
 800074e:	2201      	movs	r2, #1
 8000750:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000752:	480e      	ldr	r0, [pc, #56]	; (800078c <MX_ADC1_Init+0x98>)
 8000754:	f001 f888 	bl	8001868 <HAL_ADC_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800075e:	f000 f9b5 	bl	8000acc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000766:	2301      	movs	r3, #1
 8000768:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076e:	463b      	mov	r3, r7
 8000770:	4619      	mov	r1, r3
 8000772:	4806      	ldr	r0, [pc, #24]	; (800078c <MX_ADC1_Init+0x98>)
 8000774:	f001 fa56 	bl	8001c24 <HAL_ADC_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800077e:	f000 f9a5 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	2000021c 	.word	0x2000021c
 8000790:	40012000 	.word	0x40012000
 8000794:	0f000001 	.word	0x0f000001

08000798 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_ETH_Init+0x84>)
 800079e:	4a20      	ldr	r2, [pc, #128]	; (8000820 <MX_ETH_Init+0x88>)
 80007a0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007a2:	4b20      	ldr	r3, [pc, #128]	; (8000824 <MX_ETH_Init+0x8c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007a8:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <MX_ETH_Init+0x8c>)
 80007aa:	2280      	movs	r2, #128	; 0x80
 80007ac:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007ae:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <MX_ETH_Init+0x8c>)
 80007b0:	22e1      	movs	r2, #225	; 0xe1
 80007b2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_ETH_Init+0x8c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_ETH_Init+0x8c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_ETH_Init+0x8c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_ETH_Init+0x84>)
 80007c8:	4a16      	ldr	r2, [pc, #88]	; (8000824 <MX_ETH_Init+0x8c>)
 80007ca:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007cc:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_ETH_Init+0x84>)
 80007ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007d2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_ETH_Init+0x84>)
 80007d6:	4a14      	ldr	r2, [pc, #80]	; (8000828 <MX_ETH_Init+0x90>)
 80007d8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_ETH_Init+0x84>)
 80007dc:	4a13      	ldr	r2, [pc, #76]	; (800082c <MX_ETH_Init+0x94>)
 80007de:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007e0:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_ETH_Init+0x84>)
 80007e2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007e6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <MX_ETH_Init+0x84>)
 80007ea:	f001 fd51 	bl	8002290 <HAL_ETH_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007f4:	f000 f96a 	bl	8000acc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007f8:	2238      	movs	r2, #56	; 0x38
 80007fa:	2100      	movs	r1, #0
 80007fc:	480c      	ldr	r0, [pc, #48]	; (8000830 <MX_ETH_Init+0x98>)
 80007fe:	f005 f845 	bl	800588c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_ETH_Init+0x98>)
 8000804:	2221      	movs	r2, #33	; 0x21
 8000806:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_ETH_Init+0x98>)
 800080a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800080e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_ETH_Init+0x98>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000268 	.word	0x20000268
 8000820:	40028000 	.word	0x40028000
 8000824:	200008fc 	.word	0x200008fc
 8000828:	20000128 	.word	0x20000128
 800082c:	20000088 	.word	0x20000088
 8000830:	200001e4 	.word	0x200001e4

08000834 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_I2C2_Init+0x74>)
 800083a:	4a1c      	ldr	r2, [pc, #112]	; (80008ac <MX_I2C2_Init+0x78>)
 800083c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301739;
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_I2C2_Init+0x74>)
 8000840:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <MX_I2C2_Init+0x7c>)
 8000842:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_I2C2_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_I2C2_Init+0x74>)
 800084c:	2201      	movs	r2, #1
 800084e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_I2C2_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_I2C2_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_I2C2_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_I2C2_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_I2C2_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800086e:	480e      	ldr	r0, [pc, #56]	; (80008a8 <MX_I2C2_Init+0x74>)
 8000870:	f002 f9fa 	bl	8002c68 <HAL_I2C_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800087a:	f000 f927 	bl	8000acc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800087e:	2100      	movs	r1, #0
 8000880:	4809      	ldr	r0, [pc, #36]	; (80008a8 <MX_I2C2_Init+0x74>)
 8000882:	f002 fddb 	bl	800343c <HAL_I2CEx_ConfigAnalogFilter>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800088c:	f000 f91e 	bl	8000acc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000890:	2100      	movs	r1, #0
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_I2C2_Init+0x74>)
 8000894:	f002 fe1d 	bl	80034d2 <HAL_I2CEx_ConfigDigitalFilter>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800089e:	f000 f915 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000318 	.word	0x20000318
 80008ac:	40005800 	.word	0x40005800
 80008b0:	00301739 	.word	0x00301739

080008b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_USART3_UART_Init+0x58>)
 80008ba:	4a15      	ldr	r2, [pc, #84]	; (8000910 <MX_USART3_UART_Init+0x5c>)
 80008bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <MX_USART3_UART_Init+0x58>)
 80008c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_USART3_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_USART3_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_USART3_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_USART3_UART_Init+0x58>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_USART3_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_USART3_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_USART3_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_USART3_UART_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_USART3_UART_Init+0x58>)
 80008f8:	f004 f84a 	bl	8004990 <HAL_UART_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000902:	f000 f8e3 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	2000036c 	.word	0x2000036c
 8000910:	40004800 	.word	0x40004800

08000914 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800091e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000922:	2206      	movs	r2, #6
 8000924:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000928:	2202      	movs	r2, #2
 800092a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000934:	2202      	movs	r2, #2
 8000936:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093a:	2201      	movs	r2, #1
 800093c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094c:	2201      	movs	r2, #1
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000958:	f002 fe07 	bl	800356a <HAL_PCD_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000962:	f000 f8b3 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200003f4 	.word	0x200003f4

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08c      	sub	sp, #48	; 0x30
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	4b4d      	ldr	r3, [pc, #308]	; (8000abc <MX_GPIO_Init+0x14c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a4c      	ldr	r2, [pc, #304]	; (8000abc <MX_GPIO_Init+0x14c>)
 800098c:	f043 0304 	orr.w	r3, r3, #4
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b4a      	ldr	r3, [pc, #296]	; (8000abc <MX_GPIO_Init+0x14c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0304 	and.w	r3, r3, #4
 800099a:	61bb      	str	r3, [r7, #24]
 800099c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800099e:	4b47      	ldr	r3, [pc, #284]	; (8000abc <MX_GPIO_Init+0x14c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a46      	ldr	r2, [pc, #280]	; (8000abc <MX_GPIO_Init+0x14c>)
 80009a4:	f043 0320 	orr.w	r3, r3, #32
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b44      	ldr	r3, [pc, #272]	; (8000abc <MX_GPIO_Init+0x14c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0320 	and.w	r3, r3, #32
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b6:	4b41      	ldr	r3, [pc, #260]	; (8000abc <MX_GPIO_Init+0x14c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a40      	ldr	r2, [pc, #256]	; (8000abc <MX_GPIO_Init+0x14c>)
 80009bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b3e      	ldr	r3, [pc, #248]	; (8000abc <MX_GPIO_Init+0x14c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b3b      	ldr	r3, [pc, #236]	; (8000abc <MX_GPIO_Init+0x14c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a3a      	ldr	r2, [pc, #232]	; (8000abc <MX_GPIO_Init+0x14c>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b38      	ldr	r3, [pc, #224]	; (8000abc <MX_GPIO_Init+0x14c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	4b35      	ldr	r3, [pc, #212]	; (8000abc <MX_GPIO_Init+0x14c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a34      	ldr	r2, [pc, #208]	; (8000abc <MX_GPIO_Init+0x14c>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b32      	ldr	r3, [pc, #200]	; (8000abc <MX_GPIO_Init+0x14c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fe:	4b2f      	ldr	r3, [pc, #188]	; (8000abc <MX_GPIO_Init+0x14c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a2e      	ldr	r2, [pc, #184]	; (8000abc <MX_GPIO_Init+0x14c>)
 8000a04:	f043 0308 	orr.w	r3, r3, #8
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b2c      	ldr	r3, [pc, #176]	; (8000abc <MX_GPIO_Init+0x14c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0308 	and.w	r3, r3, #8
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a16:	4b29      	ldr	r3, [pc, #164]	; (8000abc <MX_GPIO_Init+0x14c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a28      	ldr	r2, [pc, #160]	; (8000abc <MX_GPIO_Init+0x14c>)
 8000a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b26      	ldr	r3, [pc, #152]	; (8000abc <MX_GPIO_Init+0x14c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a34:	4822      	ldr	r0, [pc, #136]	; (8000ac0 <MX_GPIO_Init+0x150>)
 8000a36:	f002 f8fd 	bl	8002c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2140      	movs	r1, #64	; 0x40
 8000a3e:	4821      	ldr	r0, [pc, #132]	; (8000ac4 <MX_GPIO_Init+0x154>)
 8000a40:	f002 f8f8 	bl	8002c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	481b      	ldr	r0, [pc, #108]	; (8000ac8 <MX_GPIO_Init+0x158>)
 8000a5c:	f001 ff3e 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a60:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	4811      	ldr	r0, [pc, #68]	; (8000ac0 <MX_GPIO_Init+0x150>)
 8000a7a:	f001 ff2f 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a7e:	2340      	movs	r3, #64	; 0x40
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	480b      	ldr	r0, [pc, #44]	; (8000ac4 <MX_GPIO_Init+0x154>)
 8000a96:	f001 ff21 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a9a:	2380      	movs	r3, #128	; 0x80
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_GPIO_Init+0x154>)
 8000aae:	f001 ff15 	bl	80028dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab2:	bf00      	nop
 8000ab4:	3730      	adds	r7, #48	; 0x30
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020400 	.word	0x40020400
 8000ac4:	40021800 	.word	0x40021800
 8000ac8:	40020800 	.word	0x40020800

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>

08000ad6 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af04      	add	r7, sp, #16
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	9302      	str	r3, [sp, #8]
 8000af4:	2301      	movs	r3, #1
 8000af6:	9301      	str	r3, [sp, #4]
 8000af8:	1dfb      	adds	r3, r7, #7
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	2301      	movs	r3, #1
 8000afe:	2200      	movs	r2, #0
 8000b00:	2178      	movs	r1, #120	; 0x78
 8000b02:	4803      	ldr	r0, [pc, #12]	; (8000b10 <ssd1306_WriteCommand+0x2c>)
 8000b04:	f002 f940 	bl	8002d88 <HAL_I2C_Mem_Write>
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000318 	.word	0x20000318

08000b14 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af04      	add	r7, sp, #16
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	f04f 32ff 	mov.w	r2, #4294967295
 8000b26:	9202      	str	r2, [sp, #8]
 8000b28:	9301      	str	r3, [sp, #4]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	2301      	movs	r3, #1
 8000b30:	2240      	movs	r2, #64	; 0x40
 8000b32:	2178      	movs	r1, #120	; 0x78
 8000b34:	4803      	ldr	r0, [pc, #12]	; (8000b44 <ssd1306_WriteData+0x30>)
 8000b36:	f002 f927 	bl	8002d88 <HAL_I2C_Mem_Write>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000318 	.word	0x20000318

08000b48 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000b4c:	f7ff ffc3 	bl	8000ad6 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000b50:	2064      	movs	r0, #100	; 0x64
 8000b52:	f000 fe65 	bl	8001820 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000b56:	2000      	movs	r0, #0
 8000b58:	f000 fa34 	bl	8000fc4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000b5c:	2020      	movs	r0, #32
 8000b5e:	f7ff ffc1 	bl	8000ae4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000b62:	2000      	movs	r0, #0
 8000b64:	f7ff ffbe 	bl	8000ae4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000b68:	20b0      	movs	r0, #176	; 0xb0
 8000b6a:	f7ff ffbb 	bl	8000ae4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000b6e:	20c8      	movs	r0, #200	; 0xc8
 8000b70:	f7ff ffb8 	bl	8000ae4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000b74:	2000      	movs	r0, #0
 8000b76:	f7ff ffb5 	bl	8000ae4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000b7a:	2010      	movs	r0, #16
 8000b7c:	f7ff ffb2 	bl	8000ae4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000b80:	2040      	movs	r0, #64	; 0x40
 8000b82:	f7ff ffaf 	bl	8000ae4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000b86:	20ff      	movs	r0, #255	; 0xff
 8000b88:	f000 fa09 	bl	8000f9e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000b8c:	20a1      	movs	r0, #161	; 0xa1
 8000b8e:	f7ff ffa9 	bl	8000ae4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000b92:	20a6      	movs	r0, #166	; 0xa6
 8000b94:	f7ff ffa6 	bl	8000ae4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000b98:	20a8      	movs	r0, #168	; 0xa8
 8000b9a:	f7ff ffa3 	bl	8000ae4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000b9e:	203f      	movs	r0, #63	; 0x3f
 8000ba0:	f7ff ffa0 	bl	8000ae4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ba4:	20a4      	movs	r0, #164	; 0xa4
 8000ba6:	f7ff ff9d 	bl	8000ae4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000baa:	20d3      	movs	r0, #211	; 0xd3
 8000bac:	f7ff ff9a 	bl	8000ae4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f7ff ff97 	bl	8000ae4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000bb6:	20d5      	movs	r0, #213	; 0xd5
 8000bb8:	f7ff ff94 	bl	8000ae4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000bbc:	20f0      	movs	r0, #240	; 0xf0
 8000bbe:	f7ff ff91 	bl	8000ae4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000bc2:	20d9      	movs	r0, #217	; 0xd9
 8000bc4:	f7ff ff8e 	bl	8000ae4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000bc8:	2022      	movs	r0, #34	; 0x22
 8000bca:	f7ff ff8b 	bl	8000ae4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000bce:	20da      	movs	r0, #218	; 0xda
 8000bd0:	f7ff ff88 	bl	8000ae4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000bd4:	2012      	movs	r0, #18
 8000bd6:	f7ff ff85 	bl	8000ae4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000bda:	20db      	movs	r0, #219	; 0xdb
 8000bdc:	f7ff ff82 	bl	8000ae4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000be0:	2020      	movs	r0, #32
 8000be2:	f7ff ff7f 	bl	8000ae4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000be6:	208d      	movs	r0, #141	; 0x8d
 8000be8:	f7ff ff7c 	bl	8000ae4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000bec:	2014      	movs	r0, #20
 8000bee:	f7ff ff79 	bl	8000ae4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f000 f9e6 	bl	8000fc4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f000 f80f 	bl	8000c1c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000bfe:	f000 f831 	bl	8000c64 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <ssd1306_Init+0xd0>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <ssd1306_Init+0xd0>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000c0e:	4b02      	ldr	r3, [pc, #8]	; (8000c18 <ssd1306_Init+0xd0>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	711a      	strb	r2, [r3, #4]
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000d04 	.word	0x20000d04

08000c1c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	e00d      	b.n	8000c48 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d101      	bne.n	8000c36 <ssd1306_Fill+0x1a>
 8000c32:	2100      	movs	r1, #0
 8000c34:	e000      	b.n	8000c38 <ssd1306_Fill+0x1c>
 8000c36:	21ff      	movs	r1, #255	; 0xff
 8000c38:	4a09      	ldr	r2, [pc, #36]	; (8000c60 <ssd1306_Fill+0x44>)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	460a      	mov	r2, r1
 8000c40:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	3301      	adds	r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c4e:	d3ed      	bcc.n	8000c2c <ssd1306_Fill+0x10>
    }
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000904 	.word	0x20000904

08000c64 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	71fb      	strb	r3, [r7, #7]
 8000c6e:	e016      	b.n	8000c9e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	3b50      	subs	r3, #80	; 0x50
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff34 	bl	8000ae4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000c7c:	2002      	movs	r0, #2
 8000c7e:	f7ff ff31 	bl	8000ae4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000c82:	2010      	movs	r0, #16
 8000c84:	f7ff ff2e 	bl	8000ae4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	01db      	lsls	r3, r3, #7
 8000c8c:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <ssd1306_UpdateScreen+0x4c>)
 8000c8e:	4413      	add	r3, r2
 8000c90:	2180      	movs	r1, #128	; 0x80
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ff3e 	bl	8000b14 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	71fb      	strb	r3, [r7, #7]
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	2b07      	cmp	r3, #7
 8000ca2:	d9e5      	bls.n	8000c70 <ssd1306_UpdateScreen+0xc>
    }
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000904 	.word	0x20000904

08000cb4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	71bb      	strb	r3, [r7, #6]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db3d      	blt.n	8000d4a <ssd1306_DrawPixel+0x96>
 8000cce:	79bb      	ldrb	r3, [r7, #6]
 8000cd0:	2b3f      	cmp	r3, #63	; 0x3f
 8000cd2:	d83a      	bhi.n	8000d4a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000cd4:	797b      	ldrb	r3, [r7, #5]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d11a      	bne.n	8000d10 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000cda:	79fa      	ldrb	r2, [r7, #7]
 8000cdc:	79bb      	ldrb	r3, [r7, #6]
 8000cde:	08db      	lsrs	r3, r3, #3
 8000ce0:	b2d8      	uxtb	r0, r3
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	01db      	lsls	r3, r3, #7
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a1b      	ldr	r2, [pc, #108]	; (8000d58 <ssd1306_DrawPixel+0xa4>)
 8000cea:	5cd3      	ldrb	r3, [r2, r3]
 8000cec:	b25a      	sxtb	r2, r3
 8000cee:	79bb      	ldrb	r3, [r7, #6]
 8000cf0:	f003 0307 	and.w	r3, r3, #7
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	b25b      	sxtb	r3, r3
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b259      	sxtb	r1, r3
 8000d00:	79fa      	ldrb	r2, [r7, #7]
 8000d02:	4603      	mov	r3, r0
 8000d04:	01db      	lsls	r3, r3, #7
 8000d06:	4413      	add	r3, r2
 8000d08:	b2c9      	uxtb	r1, r1
 8000d0a:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <ssd1306_DrawPixel+0xa4>)
 8000d0c:	54d1      	strb	r1, [r2, r3]
 8000d0e:	e01d      	b.n	8000d4c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d10:	79fa      	ldrb	r2, [r7, #7]
 8000d12:	79bb      	ldrb	r3, [r7, #6]
 8000d14:	08db      	lsrs	r3, r3, #3
 8000d16:	b2d8      	uxtb	r0, r3
 8000d18:	4603      	mov	r3, r0
 8000d1a:	01db      	lsls	r3, r3, #7
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <ssd1306_DrawPixel+0xa4>)
 8000d20:	5cd3      	ldrb	r3, [r2, r3]
 8000d22:	b25a      	sxtb	r2, r3
 8000d24:	79bb      	ldrb	r3, [r7, #6]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d30:	b25b      	sxtb	r3, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	b25b      	sxtb	r3, r3
 8000d36:	4013      	ands	r3, r2
 8000d38:	b259      	sxtb	r1, r3
 8000d3a:	79fa      	ldrb	r2, [r7, #7]
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	01db      	lsls	r3, r3, #7
 8000d40:	4413      	add	r3, r2
 8000d42:	b2c9      	uxtb	r1, r1
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <ssd1306_DrawPixel+0xa4>)
 8000d46:	54d1      	strb	r1, [r2, r3]
 8000d48:	e000      	b.n	8000d4c <ssd1306_DrawPixel+0x98>
        return;
 8000d4a:	bf00      	nop
    }
}
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000904 	.word	0x20000904

08000d5c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b089      	sub	sp, #36	; 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4604      	mov	r4, r0
 8000d64:	1d38      	adds	r0, r7, #4
 8000d66:	e880 0006 	stmia.w	r0, {r1, r2}
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4623      	mov	r3, r4
 8000d6e:	73fb      	strb	r3, [r7, #15]
 8000d70:	4613      	mov	r3, r2
 8000d72:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	2b1f      	cmp	r3, #31
 8000d78:	d902      	bls.n	8000d80 <ssd1306_WriteChar+0x24>
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
 8000d7c:	2b7e      	cmp	r3, #126	; 0x7e
 8000d7e:	d901      	bls.n	8000d84 <ssd1306_WriteChar+0x28>
        return 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	e06d      	b.n	8000e60 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000d84:	4b38      	ldr	r3, [pc, #224]	; (8000e68 <ssd1306_WriteChar+0x10c>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	793b      	ldrb	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	2b80      	cmp	r3, #128	; 0x80
 8000d90:	dc06      	bgt.n	8000da0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000d92:	4b35      	ldr	r3, [pc, #212]	; (8000e68 <ssd1306_WriteChar+0x10c>)
 8000d94:	885b      	ldrh	r3, [r3, #2]
 8000d96:	461a      	mov	r2, r3
 8000d98:	797b      	ldrb	r3, [r7, #5]
 8000d9a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000d9c:	2b40      	cmp	r3, #64	; 0x40
 8000d9e:	dd01      	ble.n	8000da4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	e05d      	b.n	8000e60 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
 8000da8:	e04c      	b.n	8000e44 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
 8000dae:	3b20      	subs	r3, #32
 8000db0:	7979      	ldrb	r1, [r7, #5]
 8000db2:	fb01 f303 	mul.w	r3, r1, r3
 8000db6:	4619      	mov	r1, r3
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	440b      	add	r3, r1
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	4413      	add	r3, r2
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61bb      	str	r3, [r7, #24]
 8000dc8:	e034      	b.n	8000e34 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d012      	beq.n	8000e00 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000dda:	4b23      	ldr	r3, [pc, #140]	; (8000e68 <ssd1306_WriteChar+0x10c>)
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	4413      	add	r3, r2
 8000de6:	b2d8      	uxtb	r0, r3
 8000de8:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <ssd1306_WriteChar+0x10c>)
 8000dea:	885b      	ldrh	r3, [r3, #2]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	4413      	add	r3, r2
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	7bba      	ldrb	r2, [r7, #14]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f7ff ff5b 	bl	8000cb4 <ssd1306_DrawPixel>
 8000dfe:	e016      	b.n	8000e2e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <ssd1306_WriteChar+0x10c>)
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	4413      	add	r3, r2
 8000e0c:	b2d8      	uxtb	r0, r3
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <ssd1306_WriteChar+0x10c>)
 8000e10:	885b      	ldrh	r3, [r3, #2]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	4413      	add	r3, r2
 8000e1a:	b2d9      	uxtb	r1, r3
 8000e1c:	7bbb      	ldrb	r3, [r7, #14]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	bf0c      	ite	eq
 8000e22:	2301      	moveq	r3, #1
 8000e24:	2300      	movne	r3, #0
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	461a      	mov	r2, r3
 8000e2a:	f7ff ff43 	bl	8000cb4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	3301      	adds	r3, #1
 8000e32:	61bb      	str	r3, [r7, #24]
 8000e34:	793b      	ldrb	r3, [r7, #4]
 8000e36:	461a      	mov	r2, r3
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d3c5      	bcc.n	8000dca <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3301      	adds	r3, #1
 8000e42:	61fb      	str	r3, [r7, #28]
 8000e44:	797b      	ldrb	r3, [r7, #5]
 8000e46:	461a      	mov	r2, r3
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d3ad      	bcc.n	8000daa <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <ssd1306_WriteChar+0x10c>)
 8000e50:	881a      	ldrh	r2, [r3, #0]
 8000e52:	793b      	ldrb	r3, [r7, #4]
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	4413      	add	r3, r2
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	4b03      	ldr	r3, [pc, #12]	; (8000e68 <ssd1306_WriteChar+0x10c>)
 8000e5c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3724      	adds	r7, #36	; 0x24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd90      	pop	{r4, r7, pc}
 8000e68:	20000d04 	.word	0x20000d04

08000e6c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	1d38      	adds	r0, r7, #4
 8000e76:	e880 0006 	stmia.w	r0, {r1, r2}
 8000e7a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000e7c:	e012      	b.n	8000ea4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	7818      	ldrb	r0, [r3, #0]
 8000e82:	78fb      	ldrb	r3, [r7, #3]
 8000e84:	1d3a      	adds	r2, r7, #4
 8000e86:	ca06      	ldmia	r2, {r1, r2}
 8000e88:	f7ff ff68 	bl	8000d5c <ssd1306_WriteChar>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d002      	beq.n	8000e9e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	e008      	b.n	8000eb0 <ssd1306_WriteString+0x44>
        }
        str++;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1e8      	bne.n	8000e7e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	781b      	ldrb	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	460a      	mov	r2, r1
 8000ec2:	71fb      	strb	r3, [r7, #7]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <ssd1306_SetCursor+0x2c>)
 8000ece:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <ssd1306_SetCursor+0x2c>)
 8000ed6:	805a      	strh	r2, [r3, #2]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	20000d04 	.word	0x20000d04

08000ee8 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	603a      	str	r2, [r7, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	71bb      	strb	r3, [r7, #6]
 8000efa:	4613      	mov	r3, r2
 8000efc:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000efe:	797b      	ldrb	r3, [r7, #5]
 8000f00:	3307      	adds	r3, #7
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	da00      	bge.n	8000f08 <ssd1306_DrawBitmap+0x20>
 8000f06:	3307      	adds	r3, #7
 8000f08:	10db      	asrs	r3, r3, #3
 8000f0a:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db3e      	blt.n	8000f96 <ssd1306_DrawBitmap+0xae>
 8000f18:	79bb      	ldrb	r3, [r7, #6]
 8000f1a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f1c:	d83b      	bhi.n	8000f96 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73bb      	strb	r3, [r7, #14]
 8000f22:	e033      	b.n	8000f8c <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8000f24:	2300      	movs	r3, #0
 8000f26:	737b      	strb	r3, [r7, #13]
 8000f28:	e026      	b.n	8000f78 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8000f2a:	7b7b      	ldrb	r3, [r7, #13]
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
 8000f3a:	e00d      	b.n	8000f58 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000f3c:	7bbb      	ldrb	r3, [r7, #14]
 8000f3e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f42:	fb02 f303 	mul.w	r3, r2, r3
 8000f46:	7b7a      	ldrb	r2, [r7, #13]
 8000f48:	08d2      	lsrs	r2, r2, #3
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	461a      	mov	r2, r3
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8000f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	da08      	bge.n	8000f72 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8000f60:	79fa      	ldrb	r2, [r7, #7]
 8000f62:	7b7b      	ldrb	r3, [r7, #13]
 8000f64:	4413      	add	r3, r2
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	7f3a      	ldrb	r2, [r7, #28]
 8000f6a:	79b9      	ldrb	r1, [r7, #6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fea1 	bl	8000cb4 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8000f72:	7b7b      	ldrb	r3, [r7, #13]
 8000f74:	3301      	adds	r3, #1
 8000f76:	737b      	strb	r3, [r7, #13]
 8000f78:	7b7a      	ldrb	r2, [r7, #13]
 8000f7a:	797b      	ldrb	r3, [r7, #5]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d3d4      	bcc.n	8000f2a <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8000f80:	7bbb      	ldrb	r3, [r7, #14]
 8000f82:	3301      	adds	r3, #1
 8000f84:	73bb      	strb	r3, [r7, #14]
 8000f86:	79bb      	ldrb	r3, [r7, #6]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	71bb      	strb	r3, [r7, #6]
 8000f8c:	7bba      	ldrb	r2, [r7, #14]
 8000f8e:	7e3b      	ldrb	r3, [r7, #24]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d3c7      	bcc.n	8000f24 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8000f94:	e000      	b.n	8000f98 <ssd1306_DrawBitmap+0xb0>
        return;
 8000f96:	bf00      	nop
}
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b084      	sub	sp, #16
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000fa8:	2381      	movs	r3, #129	; 0x81
 8000faa:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fd98 	bl	8000ae4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fd94 	bl	8000ae4 <ssd1306_WriteCommand>
}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d005      	beq.n	8000fe0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000fd4:	23af      	movs	r3, #175	; 0xaf
 8000fd6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <ssd1306_SetDisplayOn+0x38>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	715a      	strb	r2, [r3, #5]
 8000fde:	e004      	b.n	8000fea <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000fe0:	23ae      	movs	r3, #174	; 0xae
 8000fe2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <ssd1306_SetDisplayOn+0x38>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fd79 	bl	8000ae4 <ssd1306_WriteCommand>
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000d04 	.word	0x20000d04

08001000 <ssd1306_TestFonts1>:
    } while((end - start) < 8000);
   
    HAL_Delay(1000);
}

void ssd1306_TestFonts1() {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
    uint8_t y = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 800100a:	2000      	movs	r0, #0
 800100c:	f7ff fe06 	bl	8000c1c <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	4619      	mov	r1, r3
 8001014:	2002      	movs	r0, #2
 8001016:	f7ff ff4f 	bl	8000eb8 <ssd1306_SetCursor>
    ssd1306_WriteString("OHMIO BOX", Font_11x18, White);
 800101a:	4a1b      	ldr	r2, [pc, #108]	; (8001088 <ssd1306_TestFonts1+0x88>)
 800101c:	2301      	movs	r3, #1
 800101e:	ca06      	ldmia	r2, {r1, r2}
 8001020:	481a      	ldr	r0, [pc, #104]	; (800108c <ssd1306_TestFonts1+0x8c>)
 8001022:	f7ff ff23 	bl	8000e6c <ssd1306_WriteString>
    y += 26;
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	331a      	adds	r3, #26
 800102a:	71fb      	strb	r3, [r7, #7]
    #endif



    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	4619      	mov	r1, r3
 8001030:	2002      	movs	r0, #2
 8001032:	f7ff ff41 	bl	8000eb8 <ssd1306_SetCursor>
    ssd1306_WriteString("Web 3.0 for", Font_7x10, White);
 8001036:	4a16      	ldr	r2, [pc, #88]	; (8001090 <ssd1306_TestFonts1+0x90>)
 8001038:	2301      	movs	r3, #1
 800103a:	ca06      	ldmia	r2, {r1, r2}
 800103c:	4815      	ldr	r0, [pc, #84]	; (8001094 <ssd1306_TestFonts1+0x94>)
 800103e:	f7ff ff15 	bl	8000e6c <ssd1306_WriteString>
    y += 10;
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	330a      	adds	r3, #10
 8001046:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	4619      	mov	r1, r3
 800104c:	2002      	movs	r0, #2
 800104e:	f7ff ff33 	bl	8000eb8 <ssd1306_SetCursor>
    ssd1306_WriteString("Broadcast Industry", Font_6x8, White);
 8001052:	4a11      	ldr	r2, [pc, #68]	; (8001098 <ssd1306_TestFonts1+0x98>)
 8001054:	2301      	movs	r3, #1
 8001056:	ca06      	ldmia	r2, {r1, r2}
 8001058:	4810      	ldr	r0, [pc, #64]	; (800109c <ssd1306_TestFonts1+0x9c>)
 800105a:	f7ff ff07 	bl	8000e6c <ssd1306_WriteString>
    y += 10;
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	330a      	adds	r3, #10
 8001062:	71fb      	strb	r3, [r7, #7]
    #endif

#ifdef SSD1306_INCLUDE_FONT_6x8
   ssd1306_SetCursor(2, y);
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	4619      	mov	r1, r3
 8001068:	2002      	movs	r0, #2
 800106a:	f7ff ff25 	bl	8000eb8 <ssd1306_SetCursor>
   ssd1306_WriteString("Version 1.1", Font_6x8, White);
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <ssd1306_TestFonts1+0x98>)
 8001070:	2301      	movs	r3, #1
 8001072:	ca06      	ldmia	r2, {r1, r2}
 8001074:	480a      	ldr	r0, [pc, #40]	; (80010a0 <ssd1306_TestFonts1+0xa0>)
 8001076:	f7ff fef9 	bl	8000e6c <ssd1306_WriteString>
   #endif

    ssd1306_UpdateScreen();
 800107a:	f7ff fdf3 	bl	8000c64 <ssd1306_UpdateScreen>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000010 	.word	0x20000010
 800108c:	0800619c 	.word	0x0800619c
 8001090:	20000008 	.word	0x20000008
 8001094:	080061a8 	.word	0x080061a8
 8001098:	20000000 	.word	0x20000000
 800109c:	080061b4 	.word	0x080061b4
 80010a0:	080061c8 	.word	0x080061c8

080010a4 <ssd1306_DisplayAnalogValue>:

void ssd1306_DisplayAnalogValue(int value) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
    uint8_t y = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	75fb      	strb	r3, [r7, #23]
    ssd1306_Fill(Black);
 80010b0:	2000      	movs	r0, #0
 80010b2:	f7ff fdb3 	bl	8000c1c <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 80010b6:	7dfb      	ldrb	r3, [r7, #23]
 80010b8:	4619      	mov	r1, r3
 80010ba:	2002      	movs	r0, #2
 80010bc:	f7ff fefc 	bl	8000eb8 <ssd1306_SetCursor>
    ssd1306_WriteString("MENU", Font_11x18, White);
 80010c0:	4a13      	ldr	r2, [pc, #76]	; (8001110 <ssd1306_DisplayAnalogValue+0x6c>)
 80010c2:	2301      	movs	r3, #1
 80010c4:	ca06      	ldmia	r2, {r1, r2}
 80010c6:	4813      	ldr	r0, [pc, #76]	; (8001114 <ssd1306_DisplayAnalogValue+0x70>)
 80010c8:	f7ff fed0 	bl	8000e6c <ssd1306_WriteString>
    y += 26;
 80010cc:	7dfb      	ldrb	r3, [r7, #23]
 80010ce:	331a      	adds	r3, #26
 80010d0:	75fb      	strb	r3, [r7, #23]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_7x10
    char valueStr[10]; // allocate a buffer for the string representation of the value
    snprintf(valueStr, sizeof(valueStr), "%d", value); // convert the integer value to a string
 80010d2:	f107 000c 	add.w	r0, r7, #12
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <ssd1306_DisplayAnalogValue+0x74>)
 80010da:	210a      	movs	r1, #10
 80010dc:	f004 fbde 	bl	800589c <sniprintf>
    ssd1306_SetCursor(2, y);
 80010e0:	7dfb      	ldrb	r3, [r7, #23]
 80010e2:	4619      	mov	r1, r3
 80010e4:	2002      	movs	r0, #2
 80010e6:	f7ff fee7 	bl	8000eb8 <ssd1306_SetCursor>
    ssd1306_WriteString(valueStr, Font_7x10, White);
 80010ea:	4a0c      	ldr	r2, [pc, #48]	; (800111c <ssd1306_DisplayAnalogValue+0x78>)
 80010ec:	f107 000c 	add.w	r0, r7, #12
 80010f0:	2301      	movs	r3, #1
 80010f2:	ca06      	ldmia	r2, {r1, r2}
 80010f4:	f7ff feba 	bl	8000e6c <ssd1306_WriteString>
    y += 10;
 80010f8:	7dfb      	ldrb	r3, [r7, #23]
 80010fa:	330a      	adds	r3, #10
 80010fc:	75fb      	strb	r3, [r7, #23]
    #endif
    ssd1306_UpdateScreen();
 80010fe:	f7ff fdb1 	bl	8000c64 <ssd1306_UpdateScreen>
    HAL_Delay(50);
 8001102:	2032      	movs	r0, #50	; 0x32
 8001104:	f000 fb8c 	bl	8001820 <HAL_Delay>
}
 8001108:	bf00      	nop
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000010 	.word	0x20000010
 8001114:	080061d4 	.word	0x080061d4
 8001118:	080061dc 	.word	0x080061dc
 800111c:	20000008 	.word	0x20000008

08001120 <ssd1306_TestDrawBitmapOHMIO>:
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
    ssd1306_UpdateScreen();
}

void ssd1306_TestDrawBitmapOHMIO()
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff fd78 	bl	8000c1c <ssd1306_Fill>
	    ssd1306_DrawBitmap(32,0,ohmio_logo_fondoblanco,72,64,White);
 800112c:	2301      	movs	r3, #1
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	2340      	movs	r3, #64	; 0x40
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2348      	movs	r3, #72	; 0x48
 8001136:	4a07      	ldr	r2, [pc, #28]	; (8001154 <ssd1306_TestDrawBitmapOHMIO+0x34>)
 8001138:	2100      	movs	r1, #0
 800113a:	2020      	movs	r0, #32
 800113c:	f7ff fed4 	bl	8000ee8 <ssd1306_DrawBitmap>
	    ssd1306_UpdateScreen();
 8001140:	f7ff fd90 	bl	8000c64 <ssd1306_UpdateScreen>
    HAL_Delay(1000);
 8001144:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001148:	f000 fb6a 	bl	8001820 <HAL_Delay>

}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	08007cd8 	.word	0x08007cd8

08001158 <ssd1306_OhmioSplash>:



void ssd1306_OhmioSplash() {
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
    ssd1306_Init();
 800115c:	f7ff fcf4 	bl	8000b48 <ssd1306_Init>
    ssd1306_TestFonts1();
 8001160:	f7ff ff4e 	bl	8001000 <ssd1306_TestFonts1>
    HAL_Delay(3000);
 8001164:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001168:	f000 fb5a 	bl	8001820 <HAL_Delay>
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}

08001170 <ssd1306_OhmioMenuPrincipal>:

void ssd1306_OhmioMenuPrincipal() {
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8001174:	f7ff fce8 	bl	8000b48 <ssd1306_Init>
    ssd1306_TestDrawBitmapOHMIO();
 8001178:	f7ff ffd2 	bl	8001120 <ssd1306_TestDrawBitmapOHMIO>
    HAL_Delay(3000);
 800117c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001180:	f000 fb4e 	bl	8001820 <HAL_Delay>
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_MspInit+0x44>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <HAL_MspInit+0x44>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001198:	6413      	str	r3, [r2, #64]	; 0x40
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HAL_MspInit+0x44>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_MspInit+0x44>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	4a08      	ldr	r2, [pc, #32]	; (80011cc <HAL_MspInit+0x44>)
 80011ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b0:	6453      	str	r3, [r2, #68]	; 0x44
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_MspInit+0x44>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800

080011d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a15      	ldr	r2, [pc, #84]	; (8001244 <HAL_ADC_MspInit+0x74>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d123      	bne.n	800123a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <HAL_ADC_MspInit+0x78>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	4a14      	ldr	r2, [pc, #80]	; (8001248 <HAL_ADC_MspInit+0x78>)
 80011f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011fc:	6453      	str	r3, [r2, #68]	; 0x44
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_ADC_MspInit+0x78>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <HAL_ADC_MspInit+0x78>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a0e      	ldr	r2, [pc, #56]	; (8001248 <HAL_ADC_MspInit+0x78>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <HAL_ADC_MspInit+0x78>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001222:	2301      	movs	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001226:	2303      	movs	r3, #3
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <HAL_ADC_MspInit+0x7c>)
 8001236:	f001 fb51 	bl	80028dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800123a:	bf00      	nop
 800123c:	3728      	adds	r7, #40	; 0x28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40012000 	.word	0x40012000
 8001248:	40023800 	.word	0x40023800
 800124c:	40020000 	.word	0x40020000

08001250 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08e      	sub	sp, #56	; 0x38
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a4e      	ldr	r2, [pc, #312]	; (80013a8 <HAL_ETH_MspInit+0x158>)
 800126e:	4293      	cmp	r3, r2
 8001270:	f040 8096 	bne.w	80013a0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001274:	4b4d      	ldr	r3, [pc, #308]	; (80013ac <HAL_ETH_MspInit+0x15c>)
 8001276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001278:	4a4c      	ldr	r2, [pc, #304]	; (80013ac <HAL_ETH_MspInit+0x15c>)
 800127a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800127e:	6313      	str	r3, [r2, #48]	; 0x30
 8001280:	4b4a      	ldr	r3, [pc, #296]	; (80013ac <HAL_ETH_MspInit+0x15c>)
 8001282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001288:	623b      	str	r3, [r7, #32]
 800128a:	6a3b      	ldr	r3, [r7, #32]
 800128c:	4b47      	ldr	r3, [pc, #284]	; (80013ac <HAL_ETH_MspInit+0x15c>)
 800128e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001290:	4a46      	ldr	r2, [pc, #280]	; (80013ac <HAL_ETH_MspInit+0x15c>)
 8001292:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001296:	6313      	str	r3, [r2, #48]	; 0x30
 8001298:	4b44      	ldr	r3, [pc, #272]	; (80013ac <HAL_ETH_MspInit+0x15c>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012a0:	61fb      	str	r3, [r7, #28]
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	4b41      	ldr	r3, [pc, #260]	; (80013ac <HAL_ETH_MspInit+0x15c>)
 80012a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a8:	4a40      	ldr	r2, [pc, #256]	; (80013ac <HAL_ETH_MspInit+0x15c>)
 80012aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012ae:	6313      	str	r3, [r2, #48]	; 0x30
 80012b0:	4b3e      	ldr	r3, [pc, #248]	; (80013ac <HAL_ETH_MspInit+0x15c>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012b8:	61bb      	str	r3, [r7, #24]
 80012ba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012bc:	4b3b      	ldr	r3, [pc, #236]	; (80013ac <HAL_ETH_MspInit+0x15c>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	4a3a      	ldr	r2, [pc, #232]	; (80013ac <HAL_ETH_MspInit+0x15c>)
 80012c2:	f043 0304 	orr.w	r3, r3, #4
 80012c6:	6313      	str	r3, [r2, #48]	; 0x30
 80012c8:	4b38      	ldr	r3, [pc, #224]	; (80013ac <HAL_ETH_MspInit+0x15c>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d4:	4b35      	ldr	r3, [pc, #212]	; (80013ac <HAL_ETH_MspInit+0x15c>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	4a34      	ldr	r2, [pc, #208]	; (80013ac <HAL_ETH_MspInit+0x15c>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6313      	str	r3, [r2, #48]	; 0x30
 80012e0:	4b32      	ldr	r3, [pc, #200]	; (80013ac <HAL_ETH_MspInit+0x15c>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ec:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <HAL_ETH_MspInit+0x15c>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	4a2e      	ldr	r2, [pc, #184]	; (80013ac <HAL_ETH_MspInit+0x15c>)
 80012f2:	f043 0302 	orr.w	r3, r3, #2
 80012f6:	6313      	str	r3, [r2, #48]	; 0x30
 80012f8:	4b2c      	ldr	r3, [pc, #176]	; (80013ac <HAL_ETH_MspInit+0x15c>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001304:	4b29      	ldr	r3, [pc, #164]	; (80013ac <HAL_ETH_MspInit+0x15c>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001308:	4a28      	ldr	r2, [pc, #160]	; (80013ac <HAL_ETH_MspInit+0x15c>)
 800130a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800130e:	6313      	str	r3, [r2, #48]	; 0x30
 8001310:	4b26      	ldr	r3, [pc, #152]	; (80013ac <HAL_ETH_MspInit+0x15c>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800131c:	2332      	movs	r3, #50	; 0x32
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001328:	2303      	movs	r3, #3
 800132a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800132c:	230b      	movs	r3, #11
 800132e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001334:	4619      	mov	r1, r3
 8001336:	481e      	ldr	r0, [pc, #120]	; (80013b0 <HAL_ETH_MspInit+0x160>)
 8001338:	f001 fad0 	bl	80028dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800133c:	2386      	movs	r3, #134	; 0x86
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800134c:	230b      	movs	r3, #11
 800134e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001354:	4619      	mov	r1, r3
 8001356:	4817      	ldr	r0, [pc, #92]	; (80013b4 <HAL_ETH_MspInit+0x164>)
 8001358:	f001 fac0 	bl	80028dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800135c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800136e:	230b      	movs	r3, #11
 8001370:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001376:	4619      	mov	r1, r3
 8001378:	480f      	ldr	r0, [pc, #60]	; (80013b8 <HAL_ETH_MspInit+0x168>)
 800137a:	f001 faaf 	bl	80028dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800137e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138c:	2303      	movs	r3, #3
 800138e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001390:	230b      	movs	r3, #11
 8001392:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001398:	4619      	mov	r1, r3
 800139a:	4808      	ldr	r0, [pc, #32]	; (80013bc <HAL_ETH_MspInit+0x16c>)
 800139c:	f001 fa9e 	bl	80028dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80013a0:	bf00      	nop
 80013a2:	3738      	adds	r7, #56	; 0x38
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40028000 	.word	0x40028000
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020800 	.word	0x40020800
 80013b4:	40020000 	.word	0x40020000
 80013b8:	40020400 	.word	0x40020400
 80013bc:	40021800 	.word	0x40021800

080013c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b0aa      	sub	sp, #168	; 0xa8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	2284      	movs	r2, #132	; 0x84
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f004 fa53 	bl	800588c <memset>
  if(hi2c->Instance==I2C2)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a21      	ldr	r2, [pc, #132]	; (8001470 <HAL_I2C_MspInit+0xb0>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d13b      	bne.n	8001468 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80013f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	4618      	mov	r0, r3
 8001400:	f002 fed6 	bl	80041b0 <HAL_RCCEx_PeriphCLKConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800140a:	f7ff fb5f 	bl	8000acc <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800140e:	4b19      	ldr	r3, [pc, #100]	; (8001474 <HAL_I2C_MspInit+0xb4>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a18      	ldr	r2, [pc, #96]	; (8001474 <HAL_I2C_MspInit+0xb4>)
 8001414:	f043 0320 	orr.w	r3, r3, #32
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <HAL_I2C_MspInit+0xb4>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0320 	and.w	r3, r3, #32
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001426:	2303      	movs	r3, #3
 8001428:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800142c:	2312      	movs	r3, #18
 800142e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001438:	2303      	movs	r3, #3
 800143a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800143e:	2304      	movs	r3, #4
 8001440:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001444:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001448:	4619      	mov	r1, r3
 800144a:	480b      	ldr	r0, [pc, #44]	; (8001478 <HAL_I2C_MspInit+0xb8>)
 800144c:	f001 fa46 	bl	80028dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <HAL_I2C_MspInit+0xb4>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	4a07      	ldr	r2, [pc, #28]	; (8001474 <HAL_I2C_MspInit+0xb4>)
 8001456:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800145a:	6413      	str	r3, [r2, #64]	; 0x40
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_I2C_MspInit+0xb4>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001468:	bf00      	nop
 800146a:	37a8      	adds	r7, #168	; 0xa8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40005800 	.word	0x40005800
 8001474:	40023800 	.word	0x40023800
 8001478:	40021400 	.word	0x40021400

0800147c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b0aa      	sub	sp, #168	; 0xa8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	2284      	movs	r2, #132	; 0x84
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f004 f9f5 	bl	800588c <memset>
  if(huart->Instance==USART3)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a22      	ldr	r2, [pc, #136]	; (8001530 <HAL_UART_MspInit+0xb4>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d13c      	bne.n	8001526 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b6:	f107 0310 	add.w	r3, r7, #16
 80014ba:	4618      	mov	r0, r3
 80014bc:	f002 fe78 	bl	80041b0 <HAL_RCCEx_PeriphCLKConfig>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80014c6:	f7ff fb01 	bl	8000acc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014ca:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <HAL_UART_MspInit+0xb8>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a19      	ldr	r2, [pc, #100]	; (8001534 <HAL_UART_MspInit+0xb8>)
 80014d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b17      	ldr	r3, [pc, #92]	; (8001534 <HAL_UART_MspInit+0xb8>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e2:	4b14      	ldr	r3, [pc, #80]	; (8001534 <HAL_UART_MspInit+0xb8>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a13      	ldr	r2, [pc, #76]	; (8001534 <HAL_UART_MspInit+0xb8>)
 80014e8:	f043 0308 	orr.w	r3, r3, #8
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <HAL_UART_MspInit+0xb8>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001508:	2301      	movs	r3, #1
 800150a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001514:	2307      	movs	r3, #7
 8001516:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800151a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <HAL_UART_MspInit+0xbc>)
 8001522:	f001 f9db 	bl	80028dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001526:	bf00      	nop
 8001528:	37a8      	adds	r7, #168	; 0xa8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40004800 	.word	0x40004800
 8001534:	40023800 	.word	0x40023800
 8001538:	40020c00 	.word	0x40020c00

0800153c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b0ac      	sub	sp, #176	; 0xb0
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001554:	f107 0318 	add.w	r3, r7, #24
 8001558:	2284      	movs	r2, #132	; 0x84
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f004 f995 	bl	800588c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800156a:	d159      	bne.n	8001620 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800156c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001570:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001572:	2300      	movs	r3, #0
 8001574:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001578:	f107 0318 	add.w	r3, r7, #24
 800157c:	4618      	mov	r0, r3
 800157e:	f002 fe17 	bl	80041b0 <HAL_RCCEx_PeriphCLKConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001588:	f7ff faa0 	bl	8000acc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158c:	4b26      	ldr	r3, [pc, #152]	; (8001628 <HAL_PCD_MspInit+0xec>)
 800158e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001590:	4a25      	ldr	r2, [pc, #148]	; (8001628 <HAL_PCD_MspInit+0xec>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6313      	str	r3, [r2, #48]	; 0x30
 8001598:	4b23      	ldr	r3, [pc, #140]	; (8001628 <HAL_PCD_MspInit+0xec>)
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80015a4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80015a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015be:	230a      	movs	r3, #10
 80015c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015c8:	4619      	mov	r1, r3
 80015ca:	4818      	ldr	r0, [pc, #96]	; (800162c <HAL_PCD_MspInit+0xf0>)
 80015cc:	f001 f986 	bl	80028dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80015d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015e8:	4619      	mov	r1, r3
 80015ea:	4810      	ldr	r0, [pc, #64]	; (800162c <HAL_PCD_MspInit+0xf0>)
 80015ec:	f001 f976 	bl	80028dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015f0:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <HAL_PCD_MspInit+0xec>)
 80015f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f4:	4a0c      	ldr	r2, [pc, #48]	; (8001628 <HAL_PCD_MspInit+0xec>)
 80015f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015fa:	6353      	str	r3, [r2, #52]	; 0x34
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <HAL_PCD_MspInit+0xec>)
 80015fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <HAL_PCD_MspInit+0xec>)
 800160a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160c:	4a06      	ldr	r2, [pc, #24]	; (8001628 <HAL_PCD_MspInit+0xec>)
 800160e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001612:	6453      	str	r3, [r2, #68]	; 0x44
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <HAL_PCD_MspInit+0xec>)
 8001616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001620:	bf00      	nop
 8001622:	37b0      	adds	r7, #176	; 0xb0
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40023800 	.word	0x40023800
 800162c:	40020000 	.word	0x40020000

08001630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <NMI_Handler+0x4>

08001636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163a:	e7fe      	b.n	800163a <HardFault_Handler+0x4>

0800163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <MemManage_Handler+0x4>

08001642 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <BusFault_Handler+0x4>

08001648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <UsageFault_Handler+0x4>

0800164e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800167c:	f000 f8b0 	bl	80017e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}

08001684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800168c:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <_sbrk+0x5c>)
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <_sbrk+0x60>)
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001698:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d102      	bne.n	80016a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <_sbrk+0x64>)
 80016a2:	4a12      	ldr	r2, [pc, #72]	; (80016ec <_sbrk+0x68>)
 80016a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <_sbrk+0x64>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d207      	bcs.n	80016c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b4:	f004 f8b2 	bl	800581c <__errno>
 80016b8:	4603      	mov	r3, r0
 80016ba:	220c      	movs	r2, #12
 80016bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
 80016c2:	e009      	b.n	80016d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <_sbrk+0x64>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ca:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <_sbrk+0x64>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <_sbrk+0x64>)
 80016d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016d6:	68fb      	ldr	r3, [r7, #12]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20050000 	.word	0x20050000
 80016e4:	00000400 	.word	0x00000400
 80016e8:	20000d0c 	.word	0x20000d0c
 80016ec:	20000d28 	.word	0x20000d28

080016f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <SystemInit+0x20>)
 80016f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <SystemInit+0x20>)
 80016fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800174c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001718:	480d      	ldr	r0, [pc, #52]	; (8001750 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800171a:	490e      	ldr	r1, [pc, #56]	; (8001754 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800171c:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001720:	e002      	b.n	8001728 <LoopCopyDataInit>

08001722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001726:	3304      	adds	r3, #4

08001728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800172c:	d3f9      	bcc.n	8001722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172e:	4a0b      	ldr	r2, [pc, #44]	; (800175c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001730:	4c0b      	ldr	r4, [pc, #44]	; (8001760 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001734:	e001      	b.n	800173a <LoopFillZerobss>

08001736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001738:	3204      	adds	r2, #4

0800173a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800173c:	d3fb      	bcc.n	8001736 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800173e:	f7ff ffd7 	bl	80016f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001742:	f004 f871 	bl	8005828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001746:	f7fe ff35 	bl	80005b4 <main>
  bx  lr    
 800174a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800174c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001754:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001758:	08007f74 	.word	0x08007f74
  ldr r2, =_sbss
 800175c:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8001760:	20000d24 	.word	0x20000d24

08001764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC_IRQHandler>

08001766 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176a:	2003      	movs	r0, #3
 800176c:	f000 fd5c 	bl	8002228 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001770:	2000      	movs	r0, #0
 8001772:	f000 f805 	bl	8001780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001776:	f7ff fd07 	bl	8001188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_InitTick+0x54>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_InitTick+0x58>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	4619      	mov	r1, r3
 8001792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001796:	fbb3 f3f1 	udiv	r3, r3, r1
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 fd69 	bl	8002276 <HAL_SYSTICK_Config>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00e      	b.n	80017cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b0f      	cmp	r3, #15
 80017b2:	d80a      	bhi.n	80017ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b4:	2200      	movs	r2, #0
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f000 fd3f 	bl	800223e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c0:	4a06      	ldr	r2, [pc, #24]	; (80017dc <HAL_InitTick+0x5c>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	e000      	b.n	80017cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000018 	.word	0x20000018
 80017d8:	20000020 	.word	0x20000020
 80017dc:	2000001c 	.word	0x2000001c

080017e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_IncTick+0x20>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_IncTick+0x24>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a04      	ldr	r2, [pc, #16]	; (8001804 <HAL_IncTick+0x24>)
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000020 	.word	0x20000020
 8001804:	20000d10 	.word	0x20000d10

08001808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return uwTick;
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <HAL_GetTick+0x14>)
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000d10 	.word	0x20000d10

08001820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001828:	f7ff ffee 	bl	8001808 <HAL_GetTick>
 800182c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001838:	d005      	beq.n	8001846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <HAL_Delay+0x44>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001846:	bf00      	nop
 8001848:	f7ff ffde 	bl	8001808 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	429a      	cmp	r2, r3
 8001856:	d8f7      	bhi.n	8001848 <HAL_Delay+0x28>
  {
  }
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000020 	.word	0x20000020

08001868 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e031      	b.n	80018e2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	2b00      	cmp	r3, #0
 8001884:	d109      	bne.n	800189a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff fca2 	bl	80011d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f003 0310 	and.w	r3, r3, #16
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d116      	bne.n	80018d4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <HAL_ADC_Init+0x84>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	f043 0202 	orr.w	r2, r3, #2
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 fb0a 	bl	8001ed0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f023 0303 	bic.w	r3, r3, #3
 80018ca:	f043 0201 	orr.w	r2, r3, #1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40
 80018d2:	e001      	b.n	80018d8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	ffffeefd 	.word	0xffffeefd

080018f0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001902:	2b01      	cmp	r3, #1
 8001904:	d101      	bne.n	800190a <HAL_ADC_Start+0x1a>
 8001906:	2302      	movs	r3, #2
 8001908:	e0ad      	b.n	8001a66 <HAL_ADC_Start+0x176>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b01      	cmp	r3, #1
 800191e:	d018      	beq.n	8001952 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 0201 	orr.w	r2, r2, #1
 800192e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001930:	4b50      	ldr	r3, [pc, #320]	; (8001a74 <HAL_ADC_Start+0x184>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a50      	ldr	r2, [pc, #320]	; (8001a78 <HAL_ADC_Start+0x188>)
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	0c9a      	lsrs	r2, r3, #18
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001944:	e002      	b.n	800194c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	3b01      	subs	r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f9      	bne.n	8001946 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b01      	cmp	r3, #1
 800195e:	d175      	bne.n	8001a4c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001964:	4b45      	ldr	r3, [pc, #276]	; (8001a7c <HAL_ADC_Start+0x18c>)
 8001966:	4013      	ands	r3, r2
 8001968:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197a:	2b00      	cmp	r3, #0
 800197c:	d007      	beq.n	800198e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001986:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800199a:	d106      	bne.n	80019aa <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a0:	f023 0206 	bic.w	r2, r3, #6
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	645a      	str	r2, [r3, #68]	; 0x44
 80019a8:	e002      	b.n	80019b0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80019c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80019c2:	4b2f      	ldr	r3, [pc, #188]	; (8001a80 <HAL_ADC_Start+0x190>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 031f 	and.w	r3, r3, #31
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10f      	bne.n	80019ee <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d143      	bne.n	8001a64 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	e03a      	b.n	8001a64 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a24      	ldr	r2, [pc, #144]	; (8001a84 <HAL_ADC_Start+0x194>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d10e      	bne.n	8001a16 <HAL_ADC_Start+0x126>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d107      	bne.n	8001a16 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a14:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001a16:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <HAL_ADC_Start+0x190>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d120      	bne.n	8001a64 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a18      	ldr	r2, [pc, #96]	; (8001a88 <HAL_ADC_Start+0x198>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d11b      	bne.n	8001a64 <HAL_ADC_Start+0x174>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d114      	bne.n	8001a64 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	e00b      	b.n	8001a64 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	f043 0210 	orr.w	r2, r3, #16
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5c:	f043 0201 	orr.w	r2, r3, #1
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000018 	.word	0x20000018
 8001a78:	431bde83 	.word	0x431bde83
 8001a7c:	fffff8fe 	.word	0xfffff8fe
 8001a80:	40012300 	.word	0x40012300
 8001a84:	40012000 	.word	0x40012000
 8001a88:	40012200 	.word	0x40012200

08001a8c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d101      	bne.n	8001aa2 <HAL_ADC_Stop+0x16>
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	e01f      	b.n	8001ae2 <HAL_ADC_Stop+0x56>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 0201 	bic.w	r2, r2, #1
 8001ab8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d107      	bne.n	8001ad8 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <HAL_ADC_Stop+0x64>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	f043 0201 	orr.w	r2, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	ffffeefe 	.word	0xffffeefe

08001af4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b10:	d113      	bne.n	8001b3a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b20:	d10b      	bne.n	8001b3a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f043 0220 	orr.w	r2, r3, #32
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e063      	b.n	8001c02 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001b3a:	f7ff fe65 	bl	8001808 <HAL_GetTick>
 8001b3e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b40:	e021      	b.n	8001b86 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b48:	d01d      	beq.n	8001b86 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d007      	beq.n	8001b60 <HAL_ADC_PollForConversion+0x6c>
 8001b50:	f7ff fe5a 	bl	8001808 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d212      	bcs.n	8001b86 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d00b      	beq.n	8001b86 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f043 0204 	orr.w	r2, r3, #4
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e03d      	b.n	8001c02 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d1d6      	bne.n	8001b42 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f06f 0212 	mvn.w	r2, #18
 8001b9c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d123      	bne.n	8001c00 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d11f      	bne.n	8001c00 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d006      	beq.n	8001bdc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d111      	bne.n	8001c00 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d105      	bne.n	8001c00 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	f043 0201 	orr.w	r2, r3, #1
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1c>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e136      	b.n	8001eae <HAL_ADC_ConfigChannel+0x28a>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b09      	cmp	r3, #9
 8001c4e:	d93a      	bls.n	8001cc6 <HAL_ADC_ConfigChannel+0xa2>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c58:	d035      	beq.n	8001cc6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68d9      	ldr	r1, [r3, #12]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	461a      	mov	r2, r3
 8001c68:	4613      	mov	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3b1e      	subs	r3, #30
 8001c70:	2207      	movs	r2, #7
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43da      	mvns	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	400a      	ands	r2, r1
 8001c7e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a8d      	ldr	r2, [pc, #564]	; (8001ebc <HAL_ADC_ConfigChannel+0x298>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d10a      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68d9      	ldr	r1, [r3, #12]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	061a      	lsls	r2, r3, #24
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c9e:	e035      	b.n	8001d0c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68d9      	ldr	r1, [r3, #12]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4403      	add	r3, r0
 8001cb8:	3b1e      	subs	r3, #30
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cc4:	e022      	b.n	8001d0c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6919      	ldr	r1, [r3, #16]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	2207      	movs	r2, #7
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43da      	mvns	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	400a      	ands	r2, r1
 8001ce8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6919      	ldr	r1, [r3, #16]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4403      	add	r3, r0
 8001d02:	409a      	lsls	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b06      	cmp	r3, #6
 8001d12:	d824      	bhi.n	8001d5e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	3b05      	subs	r3, #5
 8001d26:	221f      	movs	r2, #31
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43da      	mvns	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	400a      	ands	r2, r1
 8001d34:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	4618      	mov	r0, r3
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3b05      	subs	r3, #5
 8001d50:	fa00 f203 	lsl.w	r2, r0, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	635a      	str	r2, [r3, #52]	; 0x34
 8001d5c:	e04c      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b0c      	cmp	r3, #12
 8001d64:	d824      	bhi.n	8001db0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	3b23      	subs	r3, #35	; 0x23
 8001d78:	221f      	movs	r2, #31
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	400a      	ands	r2, r1
 8001d86:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	4618      	mov	r0, r3
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	3b23      	subs	r3, #35	; 0x23
 8001da2:	fa00 f203 	lsl.w	r2, r0, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	631a      	str	r2, [r3, #48]	; 0x30
 8001dae:	e023      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3b41      	subs	r3, #65	; 0x41
 8001dc2:	221f      	movs	r2, #31
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43da      	mvns	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	400a      	ands	r2, r1
 8001dd0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	4618      	mov	r0, r3
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	3b41      	subs	r3, #65	; 0x41
 8001dec:	fa00 f203 	lsl.w	r2, r0, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a30      	ldr	r2, [pc, #192]	; (8001ec0 <HAL_ADC_ConfigChannel+0x29c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d10a      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x1f4>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e0a:	d105      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001e0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ec4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	4a2c      	ldr	r2, [pc, #176]	; (8001ec4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e12:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001e16:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a28      	ldr	r2, [pc, #160]	; (8001ec0 <HAL_ADC_ConfigChannel+0x29c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d10f      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x21e>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b12      	cmp	r3, #18
 8001e28:	d10b      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001e2a:	4b26      	ldr	r3, [pc, #152]	; (8001ec4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	4a25      	ldr	r2, [pc, #148]	; (8001ec4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e30:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e34:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001e36:	4b23      	ldr	r3, [pc, #140]	; (8001ec4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4a22      	ldr	r2, [pc, #136]	; (8001ec4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e40:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a1e      	ldr	r2, [pc, #120]	; (8001ec0 <HAL_ADC_ConfigChannel+0x29c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d12b      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x280>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a1a      	ldr	r2, [pc, #104]	; (8001ebc <HAL_ADC_ConfigChannel+0x298>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d003      	beq.n	8001e5e <HAL_ADC_ConfigChannel+0x23a>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2b11      	cmp	r3, #17
 8001e5c:	d122      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001e5e:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	4a18      	ldr	r2, [pc, #96]	; (8001ec4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e64:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001e68:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001e6a:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	4a15      	ldr	r2, [pc, #84]	; (8001ec4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e74:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a10      	ldr	r2, [pc, #64]	; (8001ebc <HAL_ADC_ConfigChannel+0x298>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d111      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <HAL_ADC_ConfigChannel+0x2a4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a11      	ldr	r2, [pc, #68]	; (8001ecc <HAL_ADC_ConfigChannel+0x2a8>)
 8001e86:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8a:	0c9a      	lsrs	r2, r3, #18
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e96:	e002      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1f9      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	10000012 	.word	0x10000012
 8001ec0:	40012000 	.word	0x40012000
 8001ec4:	40012300 	.word	0x40012300
 8001ec8:	20000018 	.word	0x20000018
 8001ecc:	431bde83 	.word	0x431bde83

08001ed0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001ed8:	4b78      	ldr	r3, [pc, #480]	; (80020bc <ADC_Init+0x1ec>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	4a77      	ldr	r2, [pc, #476]	; (80020bc <ADC_Init+0x1ec>)
 8001ede:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ee2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001ee4:	4b75      	ldr	r3, [pc, #468]	; (80020bc <ADC_Init+0x1ec>)
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	4973      	ldr	r1, [pc, #460]	; (80020bc <ADC_Init+0x1ec>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6859      	ldr	r1, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	021a      	lsls	r2, r3, #8
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6859      	ldr	r1, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6899      	ldr	r1, [r3, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	4a58      	ldr	r2, [pc, #352]	; (80020c0 <ADC_Init+0x1f0>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d022      	beq.n	8001faa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6899      	ldr	r1, [r3, #8]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6899      	ldr	r1, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	e00f      	b.n	8001fca <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fc8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0202 	bic.w	r2, r2, #2
 8001fd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6899      	ldr	r1, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	005a      	lsls	r2, r3, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d01b      	beq.n	8002030 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002006:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002016:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6859      	ldr	r1, [r3, #4]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	3b01      	subs	r3, #1
 8002024:	035a      	lsls	r2, r3, #13
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	e007      	b.n	8002040 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800203e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	3b01      	subs	r3, #1
 800205c:	051a      	lsls	r2, r3, #20
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002074:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6899      	ldr	r1, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002082:	025a      	lsls	r2, r3, #9
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800209a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6899      	ldr	r1, [r3, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	029a      	lsls	r2, r3, #10
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	609a      	str	r2, [r3, #8]
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	40012300 	.word	0x40012300
 80020c0:	0f000001 	.word	0x0f000001

080020c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <__NVIC_SetPriorityGrouping+0x40>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020e0:	4013      	ands	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f2:	4a04      	ldr	r2, [pc, #16]	; (8002104 <__NVIC_SetPriorityGrouping+0x40>)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	60d3      	str	r3, [r2, #12]
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00
 8002108:	05fa0000 	.word	0x05fa0000

0800210c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002110:	4b04      	ldr	r3, [pc, #16]	; (8002124 <__NVIC_GetPriorityGrouping+0x18>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	0a1b      	lsrs	r3, r3, #8
 8002116:	f003 0307 	and.w	r3, r3, #7
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	6039      	str	r1, [r7, #0]
 8002132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	2b00      	cmp	r3, #0
 800213a:	db0a      	blt.n	8002152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	b2da      	uxtb	r2, r3
 8002140:	490c      	ldr	r1, [pc, #48]	; (8002174 <__NVIC_SetPriority+0x4c>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	0112      	lsls	r2, r2, #4
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	440b      	add	r3, r1
 800214c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002150:	e00a      	b.n	8002168 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4908      	ldr	r1, [pc, #32]	; (8002178 <__NVIC_SetPriority+0x50>)
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	3b04      	subs	r3, #4
 8002160:	0112      	lsls	r2, r2, #4
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	440b      	add	r3, r1
 8002166:	761a      	strb	r2, [r3, #24]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000e100 	.word	0xe000e100
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800217c:	b480      	push	{r7}
 800217e:	b089      	sub	sp, #36	; 0x24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f1c3 0307 	rsb	r3, r3, #7
 8002196:	2b04      	cmp	r3, #4
 8002198:	bf28      	it	cs
 800219a:	2304      	movcs	r3, #4
 800219c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3304      	adds	r3, #4
 80021a2:	2b06      	cmp	r3, #6
 80021a4:	d902      	bls.n	80021ac <NVIC_EncodePriority+0x30>
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3b03      	subs	r3, #3
 80021aa:	e000      	b.n	80021ae <NVIC_EncodePriority+0x32>
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	f04f 32ff 	mov.w	r2, #4294967295
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43da      	mvns	r2, r3
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	401a      	ands	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c4:	f04f 31ff 	mov.w	r1, #4294967295
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
 80021ce:	43d9      	mvns	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d4:	4313      	orrs	r3, r2
         );
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3724      	adds	r7, #36	; 0x24
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f4:	d301      	bcc.n	80021fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021f6:	2301      	movs	r3, #1
 80021f8:	e00f      	b.n	800221a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fa:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <SysTick_Config+0x40>)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002202:	210f      	movs	r1, #15
 8002204:	f04f 30ff 	mov.w	r0, #4294967295
 8002208:	f7ff ff8e 	bl	8002128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <SysTick_Config+0x40>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002212:	4b04      	ldr	r3, [pc, #16]	; (8002224 <SysTick_Config+0x40>)
 8002214:	2207      	movs	r2, #7
 8002216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	e000e010 	.word	0xe000e010

08002228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ff47 	bl	80020c4 <__NVIC_SetPriorityGrouping>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800223e:	b580      	push	{r7, lr}
 8002240:	b086      	sub	sp, #24
 8002242:	af00      	add	r7, sp, #0
 8002244:	4603      	mov	r3, r0
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002250:	f7ff ff5c 	bl	800210c <__NVIC_GetPriorityGrouping>
 8002254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68b9      	ldr	r1, [r7, #8]
 800225a:	6978      	ldr	r0, [r7, #20]
 800225c:	f7ff ff8e 	bl	800217c <NVIC_EncodePriority>
 8002260:	4602      	mov	r2, r0
 8002262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff5d 	bl	8002128 <__NVIC_SetPriority>
}
 800226e:	bf00      	nop
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff ffb0 	bl	80021e4 <SysTick_Config>
 8002284:	4603      	mov	r3, r0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e06a      	b.n	8002378 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d106      	bne.n	80022ba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2223      	movs	r2, #35	; 0x23
 80022b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7fe ffcb 	bl	8001250 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ba:	4b31      	ldr	r3, [pc, #196]	; (8002380 <HAL_ETH_Init+0xf0>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	4a30      	ldr	r2, [pc, #192]	; (8002380 <HAL_ETH_Init+0xf0>)
 80022c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c4:	6453      	str	r3, [r2, #68]	; 0x44
 80022c6:	4b2e      	ldr	r3, [pc, #184]	; (8002380 <HAL_ETH_Init+0xf0>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80022d2:	4b2c      	ldr	r3, [pc, #176]	; (8002384 <HAL_ETH_Init+0xf4>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	4a2b      	ldr	r2, [pc, #172]	; (8002384 <HAL_ETH_Init+0xf4>)
 80022d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022dc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80022de:	4b29      	ldr	r3, [pc, #164]	; (8002384 <HAL_ETH_Init+0xf4>)
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	4927      	ldr	r1, [pc, #156]	; (8002384 <HAL_ETH_Init+0xf4>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80022ec:	4b25      	ldr	r3, [pc, #148]	; (8002384 <HAL_ETH_Init+0xf4>)
 80022ee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6812      	ldr	r2, [r2, #0]
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002306:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002308:	f7ff fa7e 	bl	8001808 <HAL_GetTick>
 800230c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800230e:	e011      	b.n	8002334 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002310:	f7ff fa7a 	bl	8001808 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800231e:	d909      	bls.n	8002334 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2204      	movs	r2, #4
 8002324:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	22e0      	movs	r2, #224	; 0xe0
 800232c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e021      	b.n	8002378 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1e4      	bne.n	8002310 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f958 	bl	80025fc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f9ff 	bl	8002750 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 fa55 	bl	8002802 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	461a      	mov	r2, r3
 800235e:	2100      	movs	r1, #0
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f9bd 	bl	80026e0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2210      	movs	r2, #16
 8002372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40023800 	.word	0x40023800
 8002384:	40013800 	.word	0x40013800

08002388 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	4b51      	ldr	r3, [pc, #324]	; (80024e4 <ETH_SetMACConfig+0x15c>)
 800239e:	4013      	ands	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	7c1b      	ldrb	r3, [r3, #16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d102      	bne.n	80023b0 <ETH_SetMACConfig+0x28>
 80023aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80023ae:	e000      	b.n	80023b2 <ETH_SetMACConfig+0x2a>
 80023b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	7c5b      	ldrb	r3, [r3, #17]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d102      	bne.n	80023c0 <ETH_SetMACConfig+0x38>
 80023ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023be:	e000      	b.n	80023c2 <ETH_SetMACConfig+0x3a>
 80023c0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023c2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	7fdb      	ldrb	r3, [r3, #31]
 80023ce:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80023d0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80023d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	7f92      	ldrb	r2, [r2, #30]
 80023dc:	2a00      	cmp	r2, #0
 80023de:	d102      	bne.n	80023e6 <ETH_SetMACConfig+0x5e>
 80023e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023e4:	e000      	b.n	80023e8 <ETH_SetMACConfig+0x60>
 80023e6:	2200      	movs	r2, #0
                        macconf->Speed |
 80023e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	7f1b      	ldrb	r3, [r3, #28]
 80023ee:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80023f0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80023f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	791b      	ldrb	r3, [r3, #4]
 80023fc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80023fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002406:	2a00      	cmp	r2, #0
 8002408:	d102      	bne.n	8002410 <ETH_SetMACConfig+0x88>
 800240a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800240e:	e000      	b.n	8002412 <ETH_SetMACConfig+0x8a>
 8002410:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002412:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	7bdb      	ldrb	r3, [r3, #15]
 8002418:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800241a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002420:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002428:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800242a:	4313      	orrs	r3, r2
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002442:	2001      	movs	r0, #1
 8002444:	f7ff f9ec 	bl	8001820 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800245e:	4013      	ands	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002466:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800246e:	2a00      	cmp	r2, #0
 8002470:	d101      	bne.n	8002476 <ETH_SetMACConfig+0xee>
 8002472:	2280      	movs	r2, #128	; 0x80
 8002474:	e000      	b.n	8002478 <ETH_SetMACConfig+0xf0>
 8002476:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002478:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800247e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002486:	2a01      	cmp	r2, #1
 8002488:	d101      	bne.n	800248e <ETH_SetMACConfig+0x106>
 800248a:	2208      	movs	r2, #8
 800248c:	e000      	b.n	8002490 <ETH_SetMACConfig+0x108>
 800248e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002490:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002498:	2a01      	cmp	r2, #1
 800249a:	d101      	bne.n	80024a0 <ETH_SetMACConfig+0x118>
 800249c:	2204      	movs	r2, #4
 800249e:	e000      	b.n	80024a2 <ETH_SetMACConfig+0x11a>
 80024a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80024aa:	2a01      	cmp	r2, #1
 80024ac:	d101      	bne.n	80024b2 <ETH_SetMACConfig+0x12a>
 80024ae:	2202      	movs	r2, #2
 80024b0:	e000      	b.n	80024b4 <ETH_SetMACConfig+0x12c>
 80024b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024b4:	4313      	orrs	r3, r2
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024cc:	2001      	movs	r0, #1
 80024ce:	f7ff f9a7 	bl	8001820 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	619a      	str	r2, [r3, #24]
}
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	ff20810f 	.word	0xff20810f

080024e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4b3d      	ldr	r3, [pc, #244]	; (80025f8 <ETH_SetDMAConfig+0x110>)
 8002502:	4013      	ands	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	7b1b      	ldrb	r3, [r3, #12]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d102      	bne.n	8002514 <ETH_SetDMAConfig+0x2c>
 800250e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002512:	e000      	b.n	8002516 <ETH_SetDMAConfig+0x2e>
 8002514:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	7b5b      	ldrb	r3, [r3, #13]
 800251a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800251c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	7f52      	ldrb	r2, [r2, #29]
 8002522:	2a00      	cmp	r2, #0
 8002524:	d102      	bne.n	800252c <ETH_SetDMAConfig+0x44>
 8002526:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800252a:	e000      	b.n	800252e <ETH_SetDMAConfig+0x46>
 800252c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800252e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	7b9b      	ldrb	r3, [r3, #14]
 8002534:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002536:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800253c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	7f1b      	ldrb	r3, [r3, #28]
 8002542:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002544:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	7f9b      	ldrb	r3, [r3, #30]
 800254a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800254c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002552:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800255a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800255c:	4313      	orrs	r3, r2
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800256c:	461a      	mov	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800257e:	2001      	movs	r0, #1
 8002580:	f7ff f94e 	bl	8001820 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800258c:	461a      	mov	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	791b      	ldrb	r3, [r3, #4]
 8002596:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800259c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80025a2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025a8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025b0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80025b2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025ba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80025c0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025ce:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025dc:	2001      	movs	r0, #1
 80025de:	f7ff f91f 	bl	8001820 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ea:	461a      	mov	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6013      	str	r3, [r2, #0]
}
 80025f0:	bf00      	nop
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	f8de3f23 	.word	0xf8de3f23

080025fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b0a6      	sub	sp, #152	; 0x98
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002604:	2301      	movs	r3, #1
 8002606:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800260a:	2301      	movs	r3, #1
 800260c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002610:	2300      	movs	r3, #0
 8002612:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002614:	2300      	movs	r3, #0
 8002616:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800261a:	2301      	movs	r3, #1
 800261c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002620:	2300      	movs	r3, #0
 8002622:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002626:	2301      	movs	r3, #1
 8002628:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800262c:	2300      	movs	r3, #0
 800262e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002632:	2300      	movs	r3, #0
 8002634:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002638:	2300      	movs	r3, #0
 800263a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800263c:	2300      	movs	r3, #0
 800263e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002642:	2300      	movs	r3, #0
 8002644:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002646:	2300      	movs	r3, #0
 8002648:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800264c:	2300      	movs	r3, #0
 800264e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002652:	2300      	movs	r3, #0
 8002654:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002658:	2300      	movs	r3, #0
 800265a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800265e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002662:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002664:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002668:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800266a:	2300      	movs	r3, #0
 800266c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002670:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002674:	4619      	mov	r1, r3
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff fe86 	bl	8002388 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800267c:	2301      	movs	r3, #1
 800267e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002680:	2301      	movs	r3, #1
 8002682:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002684:	2301      	movs	r3, #1
 8002686:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800268a:	2301      	movs	r3, #1
 800268c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002692:	2300      	movs	r3, #0
 8002694:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002698:	2300      	movs	r3, #0
 800269a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800269e:	2300      	movs	r3, #0
 80026a0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80026a2:	2301      	movs	r3, #1
 80026a4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80026a8:	2301      	movs	r3, #1
 80026aa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80026ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026b0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80026b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026b6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80026b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026bc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80026be:	2301      	movs	r3, #1
 80026c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80026cc:	f107 0308 	add.w	r3, r7, #8
 80026d0:	4619      	mov	r1, r3
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff ff08 	bl	80024e8 <ETH_SetDMAConfig>
}
 80026d8:	bf00      	nop
 80026da:	3798      	adds	r7, #152	; 0x98
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3305      	adds	r3, #5
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	3204      	adds	r2, #4
 80026f8:	7812      	ldrb	r2, [r2, #0]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	4b11      	ldr	r3, [pc, #68]	; (8002748 <ETH_MACAddressConfig+0x68>)
 8002702:	4413      	add	r3, r2
 8002704:	461a      	mov	r2, r3
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3303      	adds	r3, #3
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	061a      	lsls	r2, r3, #24
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3302      	adds	r3, #2
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	041b      	lsls	r3, r3, #16
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3301      	adds	r3, #1
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	4313      	orrs	r3, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	7812      	ldrb	r2, [r2, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <ETH_MACAddressConfig+0x6c>)
 8002732:	4413      	add	r3, r2
 8002734:	461a      	mov	r2, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	6013      	str	r3, [r2, #0]
}
 800273a:	bf00      	nop
 800273c:	371c      	adds	r7, #28
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40028040 	.word	0x40028040
 800274c:	40028044 	.word	0x40028044

08002750 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	e03e      	b.n	80027dc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68d9      	ldr	r1, [r3, #12]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	440b      	add	r3, r1
 800276e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2200      	movs	r2, #0
 800277a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2200      	movs	r2, #0
 8002780:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2200      	movs	r2, #0
 8002786:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	3206      	adds	r2, #6
 8002790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d80c      	bhi.n	80027c0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68d9      	ldr	r1, [r3, #12]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	440b      	add	r3, r1
 80027b8:	461a      	mov	r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	e004      	b.n	80027ca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	461a      	mov	r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	3301      	adds	r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d9bd      	bls.n	800275e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027f4:	611a      	str	r2, [r3, #16]
}
 80027f6:	bf00      	nop
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002802:	b480      	push	{r7}
 8002804:	b085      	sub	sp, #20
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	e046      	b.n	800289e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6919      	ldr	r1, [r3, #16]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	440b      	add	r3, r1
 8002820:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2200      	movs	r2, #0
 800282c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2200      	movs	r2, #0
 8002838:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2200      	movs	r2, #0
 800283e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2200      	movs	r2, #0
 8002844:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800284c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002854:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002862:	68b9      	ldr	r1, [r7, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	3212      	adds	r2, #18
 800286a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2b02      	cmp	r3, #2
 8002872:	d80c      	bhi.n	800288e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6919      	ldr	r1, [r3, #16]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	440b      	add	r3, r1
 8002886:	461a      	mov	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	60da      	str	r2, [r3, #12]
 800288c:	e004      	b.n	8002898 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	461a      	mov	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	3301      	adds	r3, #1
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d9b5      	bls.n	8002810 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691a      	ldr	r2, [r3, #16]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ce:	60da      	str	r2, [r3, #12]
}
 80028d0:	bf00      	nop
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028dc:	b480      	push	{r7}
 80028de:	b089      	sub	sp, #36	; 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80028ee:	2300      	movs	r3, #0
 80028f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
 80028fa:	e175      	b.n	8002be8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80028fc:	2201      	movs	r2, #1
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4013      	ands	r3, r2
 800290e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	429a      	cmp	r2, r3
 8002916:	f040 8164 	bne.w	8002be2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b01      	cmp	r3, #1
 8002924:	d005      	beq.n	8002932 <HAL_GPIO_Init+0x56>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d130      	bne.n	8002994 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	2203      	movs	r2, #3
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4013      	ands	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002968:	2201      	movs	r2, #1
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 0201 	and.w	r2, r3, #1
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	2b03      	cmp	r3, #3
 800299e:	d017      	beq.n	80029d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	2203      	movs	r2, #3
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d123      	bne.n	8002a24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	08da      	lsrs	r2, r3, #3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3208      	adds	r2, #8
 80029e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	220f      	movs	r2, #15
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	691a      	ldr	r2, [r3, #16]
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	08da      	lsrs	r2, r3, #3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3208      	adds	r2, #8
 8002a1e:	69b9      	ldr	r1, [r7, #24]
 8002a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	2203      	movs	r2, #3
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0203 	and.w	r2, r3, #3
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80be 	beq.w	8002be2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a66:	4b66      	ldr	r3, [pc, #408]	; (8002c00 <HAL_GPIO_Init+0x324>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	4a65      	ldr	r2, [pc, #404]	; (8002c00 <HAL_GPIO_Init+0x324>)
 8002a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a70:	6453      	str	r3, [r2, #68]	; 0x44
 8002a72:	4b63      	ldr	r3, [pc, #396]	; (8002c00 <HAL_GPIO_Init+0x324>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a7e:	4a61      	ldr	r2, [pc, #388]	; (8002c04 <HAL_GPIO_Init+0x328>)
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	089b      	lsrs	r3, r3, #2
 8002a84:	3302      	adds	r3, #2
 8002a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	220f      	movs	r2, #15
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a58      	ldr	r2, [pc, #352]	; (8002c08 <HAL_GPIO_Init+0x32c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d037      	beq.n	8002b1a <HAL_GPIO_Init+0x23e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a57      	ldr	r2, [pc, #348]	; (8002c0c <HAL_GPIO_Init+0x330>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d031      	beq.n	8002b16 <HAL_GPIO_Init+0x23a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a56      	ldr	r2, [pc, #344]	; (8002c10 <HAL_GPIO_Init+0x334>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d02b      	beq.n	8002b12 <HAL_GPIO_Init+0x236>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a55      	ldr	r2, [pc, #340]	; (8002c14 <HAL_GPIO_Init+0x338>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d025      	beq.n	8002b0e <HAL_GPIO_Init+0x232>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a54      	ldr	r2, [pc, #336]	; (8002c18 <HAL_GPIO_Init+0x33c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d01f      	beq.n	8002b0a <HAL_GPIO_Init+0x22e>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a53      	ldr	r2, [pc, #332]	; (8002c1c <HAL_GPIO_Init+0x340>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d019      	beq.n	8002b06 <HAL_GPIO_Init+0x22a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a52      	ldr	r2, [pc, #328]	; (8002c20 <HAL_GPIO_Init+0x344>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <HAL_GPIO_Init+0x226>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a51      	ldr	r2, [pc, #324]	; (8002c24 <HAL_GPIO_Init+0x348>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00d      	beq.n	8002afe <HAL_GPIO_Init+0x222>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a50      	ldr	r2, [pc, #320]	; (8002c28 <HAL_GPIO_Init+0x34c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d007      	beq.n	8002afa <HAL_GPIO_Init+0x21e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a4f      	ldr	r2, [pc, #316]	; (8002c2c <HAL_GPIO_Init+0x350>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d101      	bne.n	8002af6 <HAL_GPIO_Init+0x21a>
 8002af2:	2309      	movs	r3, #9
 8002af4:	e012      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002af6:	230a      	movs	r3, #10
 8002af8:	e010      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002afa:	2308      	movs	r3, #8
 8002afc:	e00e      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002afe:	2307      	movs	r3, #7
 8002b00:	e00c      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b02:	2306      	movs	r3, #6
 8002b04:	e00a      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b06:	2305      	movs	r3, #5
 8002b08:	e008      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b0a:	2304      	movs	r3, #4
 8002b0c:	e006      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e004      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e002      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	69fa      	ldr	r2, [r7, #28]
 8002b1e:	f002 0203 	and.w	r2, r2, #3
 8002b22:	0092      	lsls	r2, r2, #2
 8002b24:	4093      	lsls	r3, r2
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b2c:	4935      	ldr	r1, [pc, #212]	; (8002c04 <HAL_GPIO_Init+0x328>)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	089b      	lsrs	r3, r3, #2
 8002b32:	3302      	adds	r3, #2
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b3a:	4b3d      	ldr	r3, [pc, #244]	; (8002c30 <HAL_GPIO_Init+0x354>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	43db      	mvns	r3, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4013      	ands	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b5e:	4a34      	ldr	r2, [pc, #208]	; (8002c30 <HAL_GPIO_Init+0x354>)
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b64:	4b32      	ldr	r3, [pc, #200]	; (8002c30 <HAL_GPIO_Init+0x354>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b88:	4a29      	ldr	r2, [pc, #164]	; (8002c30 <HAL_GPIO_Init+0x354>)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b8e:	4b28      	ldr	r3, [pc, #160]	; (8002c30 <HAL_GPIO_Init+0x354>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	43db      	mvns	r3, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bb2:	4a1f      	ldr	r2, [pc, #124]	; (8002c30 <HAL_GPIO_Init+0x354>)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bb8:	4b1d      	ldr	r3, [pc, #116]	; (8002c30 <HAL_GPIO_Init+0x354>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bdc:	4a14      	ldr	r2, [pc, #80]	; (8002c30 <HAL_GPIO_Init+0x354>)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3301      	adds	r3, #1
 8002be6:	61fb      	str	r3, [r7, #28]
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	2b0f      	cmp	r3, #15
 8002bec:	f67f ae86 	bls.w	80028fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop
 8002bf4:	3724      	adds	r7, #36	; 0x24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40013800 	.word	0x40013800
 8002c08:	40020000 	.word	0x40020000
 8002c0c:	40020400 	.word	0x40020400
 8002c10:	40020800 	.word	0x40020800
 8002c14:	40020c00 	.word	0x40020c00
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40021400 	.word	0x40021400
 8002c20:	40021800 	.word	0x40021800
 8002c24:	40021c00 	.word	0x40021c00
 8002c28:	40022000 	.word	0x40022000
 8002c2c:	40022400 	.word	0x40022400
 8002c30:	40013c00 	.word	0x40013c00

08002c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	807b      	strh	r3, [r7, #2]
 8002c40:	4613      	mov	r3, r2
 8002c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c44:	787b      	ldrb	r3, [r7, #1]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c4a:	887a      	ldrh	r2, [r7, #2]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c50:	e003      	b.n	8002c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c52:	887b      	ldrh	r3, [r7, #2]
 8002c54:	041a      	lsls	r2, r3, #16
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	619a      	str	r2, [r3, #24]
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e07f      	b.n	8002d7a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d106      	bne.n	8002c94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fe fb96 	bl	80013c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2224      	movs	r2, #36	; 0x24
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0201 	bic.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d107      	bne.n	8002ce2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	e006      	b.n	8002cf0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002cee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d104      	bne.n	8002d02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6859      	ldr	r1, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <HAL_I2C_Init+0x11c>)
 8002d0e:	430b      	orrs	r3, r1
 8002d10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691a      	ldr	r2, [r3, #16]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69d9      	ldr	r1, [r3, #28]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1a      	ldr	r2, [r3, #32]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0201 	orr.w	r2, r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	02008000 	.word	0x02008000

08002d88 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b088      	sub	sp, #32
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	4608      	mov	r0, r1
 8002d92:	4611      	mov	r1, r2
 8002d94:	461a      	mov	r2, r3
 8002d96:	4603      	mov	r3, r0
 8002d98:	817b      	strh	r3, [r7, #10]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	813b      	strh	r3, [r7, #8]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b20      	cmp	r3, #32
 8002dac:	f040 80f9 	bne.w	8002fa2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <HAL_I2C_Mem_Write+0x34>
 8002db6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d105      	bne.n	8002dc8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dc2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0ed      	b.n	8002fa4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_I2C_Mem_Write+0x4e>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e0e6      	b.n	8002fa4 <HAL_I2C_Mem_Write+0x21c>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dde:	f7fe fd13 	bl	8001808 <HAL_GetTick>
 8002de2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	2319      	movs	r3, #25
 8002dea:	2201      	movs	r2, #1
 8002dec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 f955 	bl	80030a0 <I2C_WaitOnFlagUntilTimeout>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e0d1      	b.n	8002fa4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2221      	movs	r2, #33	; 0x21
 8002e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2240      	movs	r2, #64	; 0x40
 8002e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a3a      	ldr	r2, [r7, #32]
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e28:	88f8      	ldrh	r0, [r7, #6]
 8002e2a:	893a      	ldrh	r2, [r7, #8]
 8002e2c:	8979      	ldrh	r1, [r7, #10]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	9301      	str	r3, [sp, #4]
 8002e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	4603      	mov	r3, r0
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 f8b9 	bl	8002fb0 <I2C_RequestMemoryWrite>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e0a9      	b.n	8002fa4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2bff      	cmp	r3, #255	; 0xff
 8002e58:	d90e      	bls.n	8002e78 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	22ff      	movs	r2, #255	; 0xff
 8002e5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	8979      	ldrh	r1, [r7, #10]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 fab1 	bl	80033d8 <I2C_TransferConfig>
 8002e76:	e00f      	b.n	8002e98 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	8979      	ldrh	r1, [r7, #10]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 faa0 	bl	80033d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 f93f 	bl	8003120 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e07b      	b.n	8002fa4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	781a      	ldrb	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	1c5a      	adds	r2, r3, #1
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d034      	beq.n	8002f50 <HAL_I2C_Mem_Write+0x1c8>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d130      	bne.n	8002f50 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	2180      	movs	r1, #128	; 0x80
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 f8d1 	bl	80030a0 <I2C_WaitOnFlagUntilTimeout>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e04d      	b.n	8002fa4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2bff      	cmp	r3, #255	; 0xff
 8002f10:	d90e      	bls.n	8002f30 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	22ff      	movs	r2, #255	; 0xff
 8002f16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	8979      	ldrh	r1, [r7, #10]
 8002f20:	2300      	movs	r3, #0
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 fa55 	bl	80033d8 <I2C_TransferConfig>
 8002f2e:	e00f      	b.n	8002f50 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	8979      	ldrh	r1, [r7, #10]
 8002f42:	2300      	movs	r3, #0
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 fa44 	bl	80033d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d19e      	bne.n	8002e98 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 f91e 	bl	80031a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e01a      	b.n	8002fa4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2220      	movs	r2, #32
 8002f74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6859      	ldr	r1, [r3, #4]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <HAL_I2C_Mem_Write+0x224>)
 8002f82:	400b      	ands	r3, r1
 8002f84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	e000      	b.n	8002fa4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002fa2:	2302      	movs	r3, #2
  }
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	fe00e800 	.word	0xfe00e800

08002fb0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	4608      	mov	r0, r1
 8002fba:	4611      	mov	r1, r2
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	817b      	strh	r3, [r7, #10]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	813b      	strh	r3, [r7, #8]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002fca:	88fb      	ldrh	r3, [r7, #6]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	8979      	ldrh	r1, [r7, #10]
 8002fd0:	4b20      	ldr	r3, [pc, #128]	; (8003054 <I2C_RequestMemoryWrite+0xa4>)
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f9fd 	bl	80033d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fde:	69fa      	ldr	r2, [r7, #28]
 8002fe0:	69b9      	ldr	r1, [r7, #24]
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f89c 	bl	8003120 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e02c      	b.n	800304c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d105      	bne.n	8003004 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ff8:	893b      	ldrh	r3, [r7, #8]
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	629a      	str	r2, [r3, #40]	; 0x28
 8003002:	e015      	b.n	8003030 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003004:	893b      	ldrh	r3, [r7, #8]
 8003006:	0a1b      	lsrs	r3, r3, #8
 8003008:	b29b      	uxth	r3, r3
 800300a:	b2da      	uxtb	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	69b9      	ldr	r1, [r7, #24]
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f882 	bl	8003120 <I2C_WaitOnTXISFlagUntilTimeout>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e012      	b.n	800304c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003026:	893b      	ldrh	r3, [r7, #8]
 8003028:	b2da      	uxtb	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2200      	movs	r2, #0
 8003038:	2180      	movs	r1, #128	; 0x80
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 f830 	bl	80030a0 <I2C_WaitOnFlagUntilTimeout>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	80002000 	.word	0x80002000

08003058 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b02      	cmp	r3, #2
 800306c:	d103      	bne.n	8003076 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2200      	movs	r2, #0
 8003074:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b01      	cmp	r3, #1
 8003082:	d007      	beq.n	8003094 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	619a      	str	r2, [r3, #24]
  }
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	4613      	mov	r3, r2
 80030ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030b0:	e022      	b.n	80030f8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b8:	d01e      	beq.n	80030f8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ba:	f7fe fba5 	bl	8001808 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d302      	bcc.n	80030d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d113      	bne.n	80030f8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d4:	f043 0220 	orr.w	r2, r3, #32
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e00f      	b.n	8003118 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699a      	ldr	r2, [r3, #24]
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	4013      	ands	r3, r2
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	429a      	cmp	r2, r3
 8003106:	bf0c      	ite	eq
 8003108:	2301      	moveq	r3, #1
 800310a:	2300      	movne	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	461a      	mov	r2, r3
 8003110:	79fb      	ldrb	r3, [r7, #7]
 8003112:	429a      	cmp	r2, r3
 8003114:	d0cd      	beq.n	80030b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800312c:	e02c      	b.n	8003188 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f870 	bl	8003218 <I2C_IsErrorOccurred>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e02a      	b.n	8003198 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003148:	d01e      	beq.n	8003188 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314a:	f7fe fb5d 	bl	8001808 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	429a      	cmp	r2, r3
 8003158:	d302      	bcc.n	8003160 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d113      	bne.n	8003188 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003164:	f043 0220 	orr.w	r2, r3, #32
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e007      	b.n	8003198 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b02      	cmp	r3, #2
 8003194:	d1cb      	bne.n	800312e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031ac:	e028      	b.n	8003200 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 f830 	bl	8003218 <I2C_IsErrorOccurred>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e026      	b.n	8003210 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c2:	f7fe fb21 	bl	8001808 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d302      	bcc.n	80031d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d113      	bne.n	8003200 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031dc:	f043 0220 	orr.w	r2, r3, #32
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e007      	b.n	8003210 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b20      	cmp	r3, #32
 800320c:	d1cf      	bne.n	80031ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08a      	sub	sp, #40	; 0x28
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	f003 0310 	and.w	r3, r3, #16
 8003240:	2b00      	cmp	r3, #0
 8003242:	d068      	beq.n	8003316 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2210      	movs	r2, #16
 800324a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800324c:	e049      	b.n	80032e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003254:	d045      	beq.n	80032e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003256:	f7fe fad7 	bl	8001808 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	429a      	cmp	r2, r3
 8003264:	d302      	bcc.n	800326c <I2C_IsErrorOccurred+0x54>
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d13a      	bne.n	80032e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003276:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800327e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800328a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800328e:	d121      	bne.n	80032d4 <I2C_IsErrorOccurred+0xbc>
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003296:	d01d      	beq.n	80032d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003298:	7cfb      	ldrb	r3, [r7, #19]
 800329a:	2b20      	cmp	r3, #32
 800329c:	d01a      	beq.n	80032d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80032ae:	f7fe faab 	bl	8001808 <HAL_GetTick>
 80032b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032b4:	e00e      	b.n	80032d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80032b6:	f7fe faa7 	bl	8001808 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b19      	cmp	r3, #25
 80032c2:	d907      	bls.n	80032d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	f043 0320 	orr.w	r3, r3, #32
 80032ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80032d2:	e006      	b.n	80032e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b20      	cmp	r3, #32
 80032e0:	d1e9      	bne.n	80032b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	f003 0320 	and.w	r3, r3, #32
 80032ec:	2b20      	cmp	r3, #32
 80032ee:	d003      	beq.n	80032f8 <I2C_IsErrorOccurred+0xe0>
 80032f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0aa      	beq.n	800324e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80032f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d103      	bne.n	8003308 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2220      	movs	r2, #32
 8003306:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	f043 0304 	orr.w	r3, r3, #4
 800330e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00b      	beq.n	8003340 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003338:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00b      	beq.n	8003362 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	f043 0308 	orr.w	r3, r3, #8
 8003350:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800335a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00b      	beq.n	8003384 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	f043 0302 	orr.w	r3, r3, #2
 8003372:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800337c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003388:	2b00      	cmp	r3, #0
 800338a:	d01c      	beq.n	80033c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f7ff fe63 	bl	8003058 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6859      	ldr	r1, [r3, #4]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <I2C_IsErrorOccurred+0x1bc>)
 800339e:	400b      	ands	r3, r1
 80033a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	431a      	orrs	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80033c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3728      	adds	r7, #40	; 0x28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	fe00e800 	.word	0xfe00e800

080033d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	607b      	str	r3, [r7, #4]
 80033e2:	460b      	mov	r3, r1
 80033e4:	817b      	strh	r3, [r7, #10]
 80033e6:	4613      	mov	r3, r2
 80033e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033ea:	897b      	ldrh	r3, [r7, #10]
 80033ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033f0:	7a7b      	ldrb	r3, [r7, #9]
 80033f2:	041b      	lsls	r3, r3, #16
 80033f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	4313      	orrs	r3, r2
 8003402:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003406:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	0d5b      	lsrs	r3, r3, #21
 8003412:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003416:	4b08      	ldr	r3, [pc, #32]	; (8003438 <I2C_TransferConfig+0x60>)
 8003418:	430b      	orrs	r3, r1
 800341a:	43db      	mvns	r3, r3
 800341c:	ea02 0103 	and.w	r1, r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	430a      	orrs	r2, r1
 8003428:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800342a:	bf00      	nop
 800342c:	371c      	adds	r7, #28
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	03ff63ff 	.word	0x03ff63ff

0800343c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b20      	cmp	r3, #32
 8003450:	d138      	bne.n	80034c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800345c:	2302      	movs	r3, #2
 800345e:	e032      	b.n	80034c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2224      	movs	r2, #36	; 0x24
 800346c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0201 	bic.w	r2, r2, #1
 800347e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800348e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6819      	ldr	r1, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	e000      	b.n	80034c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034c4:	2302      	movs	r3, #2
  }
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b085      	sub	sp, #20
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b20      	cmp	r3, #32
 80034e6:	d139      	bne.n	800355c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e033      	b.n	800355e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2224      	movs	r2, #36	; 0x24
 8003502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0201 	bic.w	r2, r2, #1
 8003514:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003524:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	021b      	lsls	r3, r3, #8
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4313      	orrs	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0201 	orr.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	e000      	b.n	800355e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800355c:	2302      	movs	r3, #2
  }
}
 800355e:	4618      	mov	r0, r3
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800356a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800356c:	b08f      	sub	sp, #60	; 0x3c
 800356e:	af0a      	add	r7, sp, #40	; 0x28
 8003570:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e116      	b.n	80037aa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d106      	bne.n	800359c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fd ffd0 	bl	800153c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2203      	movs	r2, #3
 80035a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d102      	bne.n	80035b6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f001 fe92 	bl	80052e4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	603b      	str	r3, [r7, #0]
 80035c6:	687e      	ldr	r6, [r7, #4]
 80035c8:	466d      	mov	r5, sp
 80035ca:	f106 0410 	add.w	r4, r6, #16
 80035ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035da:	e885 0003 	stmia.w	r5, {r0, r1}
 80035de:	1d33      	adds	r3, r6, #4
 80035e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035e2:	6838      	ldr	r0, [r7, #0]
 80035e4:	f001 fe26 	bl	8005234 <USB_CoreInit>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d005      	beq.n	80035fa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2202      	movs	r2, #2
 80035f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e0d7      	b.n	80037aa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2100      	movs	r1, #0
 8003600:	4618      	mov	r0, r3
 8003602:	f001 fe80 	bl	8005306 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003606:	2300      	movs	r3, #0
 8003608:	73fb      	strb	r3, [r7, #15]
 800360a:	e04a      	b.n	80036a2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800360c:	7bfa      	ldrb	r2, [r7, #15]
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	4613      	mov	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	333d      	adds	r3, #61	; 0x3d
 800361c:	2201      	movs	r2, #1
 800361e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003620:	7bfa      	ldrb	r2, [r7, #15]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	333c      	adds	r3, #60	; 0x3c
 8003630:	7bfa      	ldrb	r2, [r7, #15]
 8003632:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003634:	7bfa      	ldrb	r2, [r7, #15]
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	b298      	uxth	r0, r3
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	3344      	adds	r3, #68	; 0x44
 8003648:	4602      	mov	r2, r0
 800364a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800364c:	7bfa      	ldrb	r2, [r7, #15]
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	3340      	adds	r3, #64	; 0x40
 800365c:	2200      	movs	r2, #0
 800365e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003660:	7bfa      	ldrb	r2, [r7, #15]
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	3348      	adds	r3, #72	; 0x48
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003674:	7bfa      	ldrb	r2, [r7, #15]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	334c      	adds	r3, #76	; 0x4c
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003688:	7bfa      	ldrb	r2, [r7, #15]
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	3354      	adds	r3, #84	; 0x54
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	3301      	adds	r3, #1
 80036a0:	73fb      	strb	r3, [r7, #15]
 80036a2:	7bfa      	ldrb	r2, [r7, #15]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3af      	bcc.n	800360c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ac:	2300      	movs	r3, #0
 80036ae:	73fb      	strb	r3, [r7, #15]
 80036b0:	e044      	b.n	800373c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036b2:	7bfa      	ldrb	r2, [r7, #15]
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	4413      	add	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80036c4:	2200      	movs	r2, #0
 80036c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036c8:	7bfa      	ldrb	r2, [r7, #15]
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4413      	add	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80036da:	7bfa      	ldrb	r2, [r7, #15]
 80036dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036de:	7bfa      	ldrb	r2, [r7, #15]
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80036f0:	2200      	movs	r2, #0
 80036f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036f4:	7bfa      	ldrb	r2, [r7, #15]
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	4613      	mov	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800370a:	7bfa      	ldrb	r2, [r7, #15]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003720:	7bfa      	ldrb	r2, [r7, #15]
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003736:	7bfb      	ldrb	r3, [r7, #15]
 8003738:	3301      	adds	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
 800373c:	7bfa      	ldrb	r2, [r7, #15]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	429a      	cmp	r2, r3
 8003744:	d3b5      	bcc.n	80036b2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	687e      	ldr	r6, [r7, #4]
 800374e:	466d      	mov	r5, sp
 8003750:	f106 0410 	add.w	r4, r6, #16
 8003754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800375a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800375c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003760:	e885 0003 	stmia.w	r5, {r0, r1}
 8003764:	1d33      	adds	r3, r6, #4
 8003766:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003768:	6838      	ldr	r0, [r7, #0]
 800376a:	f001 fe19 	bl	80053a0 <USB_DevInit>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e014      	b.n	80037aa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	2b01      	cmp	r3, #1
 8003796:	d102      	bne.n	800379e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f80b 	bl	80037b4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f001 ffd7 	bl	8005756 <USB_DevDisconnect>

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080037b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037e2:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <HAL_PCDEx_ActivateLPM+0x44>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	10000003 	.word	0x10000003

080037fc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003800:	4b05      	ldr	r3, [pc, #20]	; (8003818 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a04      	ldr	r2, [pc, #16]	; (8003818 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800380a:	6013      	str	r3, [r2, #0]
}
 800380c:	bf00      	nop
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40007000 	.word	0x40007000

0800381c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003824:	2300      	movs	r3, #0
 8003826:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e291      	b.n	8003d56 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 8087 	beq.w	800394e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003840:	4b96      	ldr	r3, [pc, #600]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 030c 	and.w	r3, r3, #12
 8003848:	2b04      	cmp	r3, #4
 800384a:	d00c      	beq.n	8003866 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800384c:	4b93      	ldr	r3, [pc, #588]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 030c 	and.w	r3, r3, #12
 8003854:	2b08      	cmp	r3, #8
 8003856:	d112      	bne.n	800387e <HAL_RCC_OscConfig+0x62>
 8003858:	4b90      	ldr	r3, [pc, #576]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003860:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003864:	d10b      	bne.n	800387e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003866:	4b8d      	ldr	r3, [pc, #564]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d06c      	beq.n	800394c <HAL_RCC_OscConfig+0x130>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d168      	bne.n	800394c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e26b      	b.n	8003d56 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003886:	d106      	bne.n	8003896 <HAL_RCC_OscConfig+0x7a>
 8003888:	4b84      	ldr	r3, [pc, #528]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a83      	ldr	r2, [pc, #524]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 800388e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	e02e      	b.n	80038f4 <HAL_RCC_OscConfig+0xd8>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10c      	bne.n	80038b8 <HAL_RCC_OscConfig+0x9c>
 800389e:	4b7f      	ldr	r3, [pc, #508]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a7e      	ldr	r2, [pc, #504]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 80038a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	4b7c      	ldr	r3, [pc, #496]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a7b      	ldr	r2, [pc, #492]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 80038b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e01d      	b.n	80038f4 <HAL_RCC_OscConfig+0xd8>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038c0:	d10c      	bne.n	80038dc <HAL_RCC_OscConfig+0xc0>
 80038c2:	4b76      	ldr	r3, [pc, #472]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a75      	ldr	r2, [pc, #468]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 80038c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	4b73      	ldr	r3, [pc, #460]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a72      	ldr	r2, [pc, #456]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 80038d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	e00b      	b.n	80038f4 <HAL_RCC_OscConfig+0xd8>
 80038dc:	4b6f      	ldr	r3, [pc, #444]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a6e      	ldr	r2, [pc, #440]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 80038e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	4b6c      	ldr	r3, [pc, #432]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a6b      	ldr	r2, [pc, #428]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 80038ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d013      	beq.n	8003924 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fd ff84 	bl	8001808 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003904:	f7fd ff80 	bl	8001808 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b64      	cmp	r3, #100	; 0x64
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e21f      	b.n	8003d56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003916:	4b61      	ldr	r3, [pc, #388]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0xe8>
 8003922:	e014      	b.n	800394e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003924:	f7fd ff70 	bl	8001808 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800392c:	f7fd ff6c 	bl	8001808 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b64      	cmp	r3, #100	; 0x64
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e20b      	b.n	8003d56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393e:	4b57      	ldr	r3, [pc, #348]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0x110>
 800394a:	e000      	b.n	800394e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d069      	beq.n	8003a2e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800395a:	4b50      	ldr	r3, [pc, #320]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 030c 	and.w	r3, r3, #12
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00b      	beq.n	800397e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003966:	4b4d      	ldr	r3, [pc, #308]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 030c 	and.w	r3, r3, #12
 800396e:	2b08      	cmp	r3, #8
 8003970:	d11c      	bne.n	80039ac <HAL_RCC_OscConfig+0x190>
 8003972:	4b4a      	ldr	r3, [pc, #296]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d116      	bne.n	80039ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397e:	4b47      	ldr	r3, [pc, #284]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d005      	beq.n	8003996 <HAL_RCC_OscConfig+0x17a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d001      	beq.n	8003996 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e1df      	b.n	8003d56 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003996:	4b41      	ldr	r3, [pc, #260]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	493d      	ldr	r1, [pc, #244]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039aa:	e040      	b.n	8003a2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d023      	beq.n	80039fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b4:	4b39      	ldr	r3, [pc, #228]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a38      	ldr	r2, [pc, #224]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 80039ba:	f043 0301 	orr.w	r3, r3, #1
 80039be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c0:	f7fd ff22 	bl	8001808 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039c8:	f7fd ff1e 	bl	8001808 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e1bd      	b.n	8003d56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039da:	4b30      	ldr	r3, [pc, #192]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e6:	4b2d      	ldr	r3, [pc, #180]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	4929      	ldr	r1, [pc, #164]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]
 80039fa:	e018      	b.n	8003a2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039fc:	4b27      	ldr	r3, [pc, #156]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a26      	ldr	r2, [pc, #152]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 8003a02:	f023 0301 	bic.w	r3, r3, #1
 8003a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fd fefe 	bl	8001808 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a10:	f7fd fefa 	bl	8001808 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e199      	b.n	8003d56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a22:	4b1e      	ldr	r3, [pc, #120]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f0      	bne.n	8003a10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d038      	beq.n	8003aac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d019      	beq.n	8003a76 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a42:	4b16      	ldr	r3, [pc, #88]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 8003a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a46:	4a15      	ldr	r2, [pc, #84]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4e:	f7fd fedb 	bl	8001808 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a56:	f7fd fed7 	bl	8001808 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e176      	b.n	8003d56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a68:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 8003a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0f0      	beq.n	8003a56 <HAL_RCC_OscConfig+0x23a>
 8003a74:	e01a      	b.n	8003aac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a76:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 8003a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a7a:	4a08      	ldr	r2, [pc, #32]	; (8003a9c <HAL_RCC_OscConfig+0x280>)
 8003a7c:	f023 0301 	bic.w	r3, r3, #1
 8003a80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a82:	f7fd fec1 	bl	8001808 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a88:	e00a      	b.n	8003aa0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a8a:	f7fd febd 	bl	8001808 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d903      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e15c      	b.n	8003d56 <HAL_RCC_OscConfig+0x53a>
 8003a9c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa0:	4b91      	ldr	r3, [pc, #580]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1ee      	bne.n	8003a8a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 80a4 	beq.w	8003c02 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aba:	4b8b      	ldr	r3, [pc, #556]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10d      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac6:	4b88      	ldr	r3, [pc, #544]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	4a87      	ldr	r2, [pc, #540]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ad2:	4b85      	ldr	r3, [pc, #532]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ada:	60bb      	str	r3, [r7, #8]
 8003adc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ae2:	4b82      	ldr	r3, [pc, #520]	; (8003cec <HAL_RCC_OscConfig+0x4d0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d118      	bne.n	8003b20 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003aee:	4b7f      	ldr	r3, [pc, #508]	; (8003cec <HAL_RCC_OscConfig+0x4d0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a7e      	ldr	r2, [pc, #504]	; (8003cec <HAL_RCC_OscConfig+0x4d0>)
 8003af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003afa:	f7fd fe85 	bl	8001808 <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b00:	e008      	b.n	8003b14 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b02:	f7fd fe81 	bl	8001808 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b64      	cmp	r3, #100	; 0x64
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e120      	b.n	8003d56 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b14:	4b75      	ldr	r3, [pc, #468]	; (8003cec <HAL_RCC_OscConfig+0x4d0>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0f0      	beq.n	8003b02 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d106      	bne.n	8003b36 <HAL_RCC_OscConfig+0x31a>
 8003b28:	4b6f      	ldr	r3, [pc, #444]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2c:	4a6e      	ldr	r2, [pc, #440]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	6713      	str	r3, [r2, #112]	; 0x70
 8003b34:	e02d      	b.n	8003b92 <HAL_RCC_OscConfig+0x376>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10c      	bne.n	8003b58 <HAL_RCC_OscConfig+0x33c>
 8003b3e:	4b6a      	ldr	r3, [pc, #424]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b42:	4a69      	ldr	r2, [pc, #420]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003b44:	f023 0301 	bic.w	r3, r3, #1
 8003b48:	6713      	str	r3, [r2, #112]	; 0x70
 8003b4a:	4b67      	ldr	r3, [pc, #412]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4e:	4a66      	ldr	r2, [pc, #408]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003b50:	f023 0304 	bic.w	r3, r3, #4
 8003b54:	6713      	str	r3, [r2, #112]	; 0x70
 8003b56:	e01c      	b.n	8003b92 <HAL_RCC_OscConfig+0x376>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	2b05      	cmp	r3, #5
 8003b5e:	d10c      	bne.n	8003b7a <HAL_RCC_OscConfig+0x35e>
 8003b60:	4b61      	ldr	r3, [pc, #388]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b64:	4a60      	ldr	r2, [pc, #384]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003b66:	f043 0304 	orr.w	r3, r3, #4
 8003b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b6c:	4b5e      	ldr	r3, [pc, #376]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b70:	4a5d      	ldr	r2, [pc, #372]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	6713      	str	r3, [r2, #112]	; 0x70
 8003b78:	e00b      	b.n	8003b92 <HAL_RCC_OscConfig+0x376>
 8003b7a:	4b5b      	ldr	r3, [pc, #364]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7e:	4a5a      	ldr	r2, [pc, #360]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003b80:	f023 0301 	bic.w	r3, r3, #1
 8003b84:	6713      	str	r3, [r2, #112]	; 0x70
 8003b86:	4b58      	ldr	r3, [pc, #352]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8a:	4a57      	ldr	r2, [pc, #348]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003b8c:	f023 0304 	bic.w	r3, r3, #4
 8003b90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d015      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9a:	f7fd fe35 	bl	8001808 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba0:	e00a      	b.n	8003bb8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba2:	f7fd fe31 	bl	8001808 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e0ce      	b.n	8003d56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb8:	4b4b      	ldr	r3, [pc, #300]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0ee      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x386>
 8003bc4:	e014      	b.n	8003bf0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc6:	f7fd fe1f 	bl	8001808 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bcc:	e00a      	b.n	8003be4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bce:	f7fd fe1b 	bl	8001808 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e0b8      	b.n	8003d56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be4:	4b40      	ldr	r3, [pc, #256]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1ee      	bne.n	8003bce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bf0:	7dfb      	ldrb	r3, [r7, #23]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d105      	bne.n	8003c02 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf6:	4b3c      	ldr	r3, [pc, #240]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	4a3b      	ldr	r2, [pc, #236]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 80a4 	beq.w	8003d54 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c0c:	4b36      	ldr	r3, [pc, #216]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 030c 	and.w	r3, r3, #12
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d06b      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d149      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c20:	4b31      	ldr	r3, [pc, #196]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a30      	ldr	r2, [pc, #192]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003c26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2c:	f7fd fdec 	bl	8001808 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c34:	f7fd fde8 	bl	8001808 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e087      	b.n	8003d56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c46:	4b28      	ldr	r3, [pc, #160]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69da      	ldr	r2, [r3, #28]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	019b      	lsls	r3, r3, #6
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c68:	085b      	lsrs	r3, r3, #1
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	041b      	lsls	r3, r3, #16
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	061b      	lsls	r3, r3, #24
 8003c76:	4313      	orrs	r3, r2
 8003c78:	4a1b      	ldr	r2, [pc, #108]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003c7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c7e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c80:	4b19      	ldr	r3, [pc, #100]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a18      	ldr	r2, [pc, #96]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8c:	f7fd fdbc 	bl	8001808 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c94:	f7fd fdb8 	bl	8001808 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e057      	b.n	8003d56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca6:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0f0      	beq.n	8003c94 <HAL_RCC_OscConfig+0x478>
 8003cb2:	e04f      	b.n	8003d54 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a0b      	ldr	r2, [pc, #44]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003cba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7fd fda2 	bl	8001808 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc8:	f7fd fd9e 	bl	8001808 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e03d      	b.n	8003d56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cda:	4b03      	ldr	r3, [pc, #12]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x4ac>
 8003ce6:	e035      	b.n	8003d54 <HAL_RCC_OscConfig+0x538>
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003cf0:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <HAL_RCC_OscConfig+0x544>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d028      	beq.n	8003d50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d121      	bne.n	8003d50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d11a      	bne.n	8003d50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d20:	4013      	ands	r3, r2
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d26:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d111      	bne.n	8003d50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d36:	085b      	lsrs	r3, r3, #1
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d107      	bne.n	8003d50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d001      	beq.n	8003d54 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e000      	b.n	8003d56 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40023800 	.word	0x40023800

08003d64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e0d0      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d7c:	4b6a      	ldr	r3, [pc, #424]	; (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d910      	bls.n	8003dac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8a:	4b67      	ldr	r3, [pc, #412]	; (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f023 020f 	bic.w	r2, r3, #15
 8003d92:	4965      	ldr	r1, [pc, #404]	; (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9a:	4b63      	ldr	r3, [pc, #396]	; (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e0b8      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d020      	beq.n	8003dfa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dc4:	4b59      	ldr	r3, [pc, #356]	; (8003f2c <HAL_RCC_ClockConfig+0x1c8>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	4a58      	ldr	r2, [pc, #352]	; (8003f2c <HAL_RCC_ClockConfig+0x1c8>)
 8003dca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0308 	and.w	r3, r3, #8
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ddc:	4b53      	ldr	r3, [pc, #332]	; (8003f2c <HAL_RCC_ClockConfig+0x1c8>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	4a52      	ldr	r2, [pc, #328]	; (8003f2c <HAL_RCC_ClockConfig+0x1c8>)
 8003de2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003de6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de8:	4b50      	ldr	r3, [pc, #320]	; (8003f2c <HAL_RCC_ClockConfig+0x1c8>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	494d      	ldr	r1, [pc, #308]	; (8003f2c <HAL_RCC_ClockConfig+0x1c8>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d040      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d107      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0e:	4b47      	ldr	r3, [pc, #284]	; (8003f2c <HAL_RCC_ClockConfig+0x1c8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d115      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e07f      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d107      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e26:	4b41      	ldr	r3, [pc, #260]	; (8003f2c <HAL_RCC_ClockConfig+0x1c8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d109      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e073      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e36:	4b3d      	ldr	r3, [pc, #244]	; (8003f2c <HAL_RCC_ClockConfig+0x1c8>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e06b      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e46:	4b39      	ldr	r3, [pc, #228]	; (8003f2c <HAL_RCC_ClockConfig+0x1c8>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f023 0203 	bic.w	r2, r3, #3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	4936      	ldr	r1, [pc, #216]	; (8003f2c <HAL_RCC_ClockConfig+0x1c8>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e58:	f7fd fcd6 	bl	8001808 <HAL_GetTick>
 8003e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5e:	e00a      	b.n	8003e76 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e60:	f7fd fcd2 	bl	8001808 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e053      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e76:	4b2d      	ldr	r3, [pc, #180]	; (8003f2c <HAL_RCC_ClockConfig+0x1c8>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 020c 	and.w	r2, r3, #12
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d1eb      	bne.n	8003e60 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e88:	4b27      	ldr	r3, [pc, #156]	; (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 030f 	and.w	r3, r3, #15
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d210      	bcs.n	8003eb8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e96:	4b24      	ldr	r3, [pc, #144]	; (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f023 020f 	bic.w	r2, r3, #15
 8003e9e:	4922      	ldr	r1, [pc, #136]	; (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea6:	4b20      	ldr	r3, [pc, #128]	; (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d001      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e032      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d008      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ec4:	4b19      	ldr	r3, [pc, #100]	; (8003f2c <HAL_RCC_ClockConfig+0x1c8>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	4916      	ldr	r1, [pc, #88]	; (8003f2c <HAL_RCC_ClockConfig+0x1c8>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0308 	and.w	r3, r3, #8
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d009      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ee2:	4b12      	ldr	r3, [pc, #72]	; (8003f2c <HAL_RCC_ClockConfig+0x1c8>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	490e      	ldr	r1, [pc, #56]	; (8003f2c <HAL_RCC_ClockConfig+0x1c8>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ef6:	f000 f821 	bl	8003f3c <HAL_RCC_GetSysClockFreq>
 8003efa:	4602      	mov	r2, r0
 8003efc:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <HAL_RCC_ClockConfig+0x1c8>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	091b      	lsrs	r3, r3, #4
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	490a      	ldr	r1, [pc, #40]	; (8003f30 <HAL_RCC_ClockConfig+0x1cc>)
 8003f08:	5ccb      	ldrb	r3, [r1, r3]
 8003f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f0e:	4a09      	ldr	r2, [pc, #36]	; (8003f34 <HAL_RCC_ClockConfig+0x1d0>)
 8003f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f12:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <HAL_RCC_ClockConfig+0x1d4>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fd fc32 	bl	8001780 <HAL_InitTick>

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40023c00 	.word	0x40023c00
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	08007f18 	.word	0x08007f18
 8003f34:	20000018 	.word	0x20000018
 8003f38:	2000001c 	.word	0x2000001c

08003f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f40:	b094      	sub	sp, #80	; 0x50
 8003f42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003f44:	2300      	movs	r3, #0
 8003f46:	647b      	str	r3, [r7, #68]	; 0x44
 8003f48:	2300      	movs	r3, #0
 8003f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003f50:	2300      	movs	r3, #0
 8003f52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f54:	4b79      	ldr	r3, [pc, #484]	; (800413c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 030c 	and.w	r3, r3, #12
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d00d      	beq.n	8003f7c <HAL_RCC_GetSysClockFreq+0x40>
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	f200 80e1 	bhi.w	8004128 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <HAL_RCC_GetSysClockFreq+0x34>
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d003      	beq.n	8003f76 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f6e:	e0db      	b.n	8004128 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f70:	4b73      	ldr	r3, [pc, #460]	; (8004140 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f74:	e0db      	b.n	800412e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f76:	4b73      	ldr	r3, [pc, #460]	; (8004144 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f7a:	e0d8      	b.n	800412e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f7c:	4b6f      	ldr	r3, [pc, #444]	; (800413c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f84:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f86:	4b6d      	ldr	r3, [pc, #436]	; (800413c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d063      	beq.n	800405a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f92:	4b6a      	ldr	r3, [pc, #424]	; (800413c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	099b      	lsrs	r3, r3, #6
 8003f98:	2200      	movs	r2, #0
 8003f9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa4:	633b      	str	r3, [r7, #48]	; 0x30
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8003faa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003fae:	4622      	mov	r2, r4
 8003fb0:	462b      	mov	r3, r5
 8003fb2:	f04f 0000 	mov.w	r0, #0
 8003fb6:	f04f 0100 	mov.w	r1, #0
 8003fba:	0159      	lsls	r1, r3, #5
 8003fbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fc0:	0150      	lsls	r0, r2, #5
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4621      	mov	r1, r4
 8003fc8:	1a51      	subs	r1, r2, r1
 8003fca:	6139      	str	r1, [r7, #16]
 8003fcc:	4629      	mov	r1, r5
 8003fce:	eb63 0301 	sbc.w	r3, r3, r1
 8003fd2:	617b      	str	r3, [r7, #20]
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fe0:	4659      	mov	r1, fp
 8003fe2:	018b      	lsls	r3, r1, #6
 8003fe4:	4651      	mov	r1, sl
 8003fe6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fea:	4651      	mov	r1, sl
 8003fec:	018a      	lsls	r2, r1, #6
 8003fee:	4651      	mov	r1, sl
 8003ff0:	ebb2 0801 	subs.w	r8, r2, r1
 8003ff4:	4659      	mov	r1, fp
 8003ff6:	eb63 0901 	sbc.w	r9, r3, r1
 8003ffa:	f04f 0200 	mov.w	r2, #0
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004006:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800400a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800400e:	4690      	mov	r8, r2
 8004010:	4699      	mov	r9, r3
 8004012:	4623      	mov	r3, r4
 8004014:	eb18 0303 	adds.w	r3, r8, r3
 8004018:	60bb      	str	r3, [r7, #8]
 800401a:	462b      	mov	r3, r5
 800401c:	eb49 0303 	adc.w	r3, r9, r3
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	f04f 0200 	mov.w	r2, #0
 8004026:	f04f 0300 	mov.w	r3, #0
 800402a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800402e:	4629      	mov	r1, r5
 8004030:	024b      	lsls	r3, r1, #9
 8004032:	4621      	mov	r1, r4
 8004034:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004038:	4621      	mov	r1, r4
 800403a:	024a      	lsls	r2, r1, #9
 800403c:	4610      	mov	r0, r2
 800403e:	4619      	mov	r1, r3
 8004040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004042:	2200      	movs	r2, #0
 8004044:	62bb      	str	r3, [r7, #40]	; 0x28
 8004046:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004048:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800404c:	f7fc f930 	bl	80002b0 <__aeabi_uldivmod>
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	4613      	mov	r3, r2
 8004056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004058:	e058      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800405a:	4b38      	ldr	r3, [pc, #224]	; (800413c <HAL_RCC_GetSysClockFreq+0x200>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	099b      	lsrs	r3, r3, #6
 8004060:	2200      	movs	r2, #0
 8004062:	4618      	mov	r0, r3
 8004064:	4611      	mov	r1, r2
 8004066:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800406a:	623b      	str	r3, [r7, #32]
 800406c:	2300      	movs	r3, #0
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
 8004070:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004074:	4642      	mov	r2, r8
 8004076:	464b      	mov	r3, r9
 8004078:	f04f 0000 	mov.w	r0, #0
 800407c:	f04f 0100 	mov.w	r1, #0
 8004080:	0159      	lsls	r1, r3, #5
 8004082:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004086:	0150      	lsls	r0, r2, #5
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4641      	mov	r1, r8
 800408e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004092:	4649      	mov	r1, r9
 8004094:	eb63 0b01 	sbc.w	fp, r3, r1
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040ac:	ebb2 040a 	subs.w	r4, r2, sl
 80040b0:	eb63 050b 	sbc.w	r5, r3, fp
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	00eb      	lsls	r3, r5, #3
 80040be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040c2:	00e2      	lsls	r2, r4, #3
 80040c4:	4614      	mov	r4, r2
 80040c6:	461d      	mov	r5, r3
 80040c8:	4643      	mov	r3, r8
 80040ca:	18e3      	adds	r3, r4, r3
 80040cc:	603b      	str	r3, [r7, #0]
 80040ce:	464b      	mov	r3, r9
 80040d0:	eb45 0303 	adc.w	r3, r5, r3
 80040d4:	607b      	str	r3, [r7, #4]
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	f04f 0300 	mov.w	r3, #0
 80040de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040e2:	4629      	mov	r1, r5
 80040e4:	028b      	lsls	r3, r1, #10
 80040e6:	4621      	mov	r1, r4
 80040e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040ec:	4621      	mov	r1, r4
 80040ee:	028a      	lsls	r2, r1, #10
 80040f0:	4610      	mov	r0, r2
 80040f2:	4619      	mov	r1, r3
 80040f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040f6:	2200      	movs	r2, #0
 80040f8:	61bb      	str	r3, [r7, #24]
 80040fa:	61fa      	str	r2, [r7, #28]
 80040fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004100:	f7fc f8d6 	bl	80002b0 <__aeabi_uldivmod>
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	4613      	mov	r3, r2
 800410a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800410c:	4b0b      	ldr	r3, [pc, #44]	; (800413c <HAL_RCC_GetSysClockFreq+0x200>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	0c1b      	lsrs	r3, r3, #16
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	3301      	adds	r3, #1
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800411c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800411e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004120:	fbb2 f3f3 	udiv	r3, r2, r3
 8004124:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004126:	e002      	b.n	800412e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004128:	4b05      	ldr	r3, [pc, #20]	; (8004140 <HAL_RCC_GetSysClockFreq+0x204>)
 800412a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800412c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800412e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004130:	4618      	mov	r0, r3
 8004132:	3750      	adds	r7, #80	; 0x50
 8004134:	46bd      	mov	sp, r7
 8004136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800413a:	bf00      	nop
 800413c:	40023800 	.word	0x40023800
 8004140:	00f42400 	.word	0x00f42400
 8004144:	007a1200 	.word	0x007a1200

08004148 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800414c:	4b03      	ldr	r3, [pc, #12]	; (800415c <HAL_RCC_GetHCLKFreq+0x14>)
 800414e:	681b      	ldr	r3, [r3, #0]
}
 8004150:	4618      	mov	r0, r3
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	20000018 	.word	0x20000018

08004160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004164:	f7ff fff0 	bl	8004148 <HAL_RCC_GetHCLKFreq>
 8004168:	4602      	mov	r2, r0
 800416a:	4b05      	ldr	r3, [pc, #20]	; (8004180 <HAL_RCC_GetPCLK1Freq+0x20>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	0a9b      	lsrs	r3, r3, #10
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	4903      	ldr	r1, [pc, #12]	; (8004184 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004176:	5ccb      	ldrb	r3, [r1, r3]
 8004178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800417c:	4618      	mov	r0, r3
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40023800 	.word	0x40023800
 8004184:	08007f28 	.word	0x08007f28

08004188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800418c:	f7ff ffdc 	bl	8004148 <HAL_RCC_GetHCLKFreq>
 8004190:	4602      	mov	r2, r0
 8004192:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	0b5b      	lsrs	r3, r3, #13
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	4903      	ldr	r1, [pc, #12]	; (80041ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800419e:	5ccb      	ldrb	r3, [r1, r3]
 80041a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40023800 	.word	0x40023800
 80041ac:	08007f28 	.word	0x08007f28

080041b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d012      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041d8:	4b69      	ldr	r3, [pc, #420]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	4a68      	ldr	r2, [pc, #416]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80041e2:	6093      	str	r3, [r2, #8]
 80041e4:	4b66      	ldr	r3, [pc, #408]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ec:	4964      	ldr	r1, [pc, #400]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80041fa:	2301      	movs	r3, #1
 80041fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d017      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800420a:	4b5d      	ldr	r3, [pc, #372]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800420c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004210:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004218:	4959      	ldr	r1, [pc, #356]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004224:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004228:	d101      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800422a:	2301      	movs	r3, #1
 800422c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004236:	2301      	movs	r3, #1
 8004238:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d017      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004246:	4b4e      	ldr	r3, [pc, #312]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800424c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004254:	494a      	ldr	r1, [pc, #296]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004264:	d101      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004266:	2301      	movs	r3, #1
 8004268:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004272:	2301      	movs	r3, #1
 8004274:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004282:	2301      	movs	r3, #1
 8004284:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 808b 	beq.w	80043aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004294:	4b3a      	ldr	r3, [pc, #232]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004298:	4a39      	ldr	r2, [pc, #228]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800429e:	6413      	str	r3, [r2, #64]	; 0x40
 80042a0:	4b37      	ldr	r3, [pc, #220]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a8:	60bb      	str	r3, [r7, #8]
 80042aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80042ac:	4b35      	ldr	r3, [pc, #212]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a34      	ldr	r2, [pc, #208]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b8:	f7fd faa6 	bl	8001808 <HAL_GetTick>
 80042bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c0:	f7fd faa2 	bl	8001808 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b64      	cmp	r3, #100	; 0x64
 80042cc:	d901      	bls.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e357      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80042d2:	4b2c      	ldr	r3, [pc, #176]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0f0      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042de:	4b28      	ldr	r3, [pc, #160]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d035      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d02e      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042fc:	4b20      	ldr	r3, [pc, #128]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004304:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004306:	4b1e      	ldr	r3, [pc, #120]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430a:	4a1d      	ldr	r2, [pc, #116]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800430c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004310:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004312:	4b1b      	ldr	r3, [pc, #108]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004316:	4a1a      	ldr	r2, [pc, #104]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800431c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800431e:	4a18      	ldr	r2, [pc, #96]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004324:	4b16      	ldr	r3, [pc, #88]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b01      	cmp	r3, #1
 800432e:	d114      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004330:	f7fd fa6a 	bl	8001808 <HAL_GetTick>
 8004334:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004336:	e00a      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004338:	f7fd fa66 	bl	8001808 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	f241 3288 	movw	r2, #5000	; 0x1388
 8004346:	4293      	cmp	r3, r2
 8004348:	d901      	bls.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e319      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800434e:	4b0c      	ldr	r3, [pc, #48]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0ee      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004362:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004366:	d111      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004368:	4b05      	ldr	r3, [pc, #20]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004374:	4b04      	ldr	r3, [pc, #16]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004376:	400b      	ands	r3, r1
 8004378:	4901      	ldr	r1, [pc, #4]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800437a:	4313      	orrs	r3, r2
 800437c:	608b      	str	r3, [r1, #8]
 800437e:	e00b      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004380:	40023800 	.word	0x40023800
 8004384:	40007000 	.word	0x40007000
 8004388:	0ffffcff 	.word	0x0ffffcff
 800438c:	4baa      	ldr	r3, [pc, #680]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	4aa9      	ldr	r2, [pc, #676]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004392:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004396:	6093      	str	r3, [r2, #8]
 8004398:	4ba7      	ldr	r3, [pc, #668]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800439a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a4:	49a4      	ldr	r1, [pc, #656]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0310 	and.w	r3, r3, #16
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d010      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043b6:	4ba0      	ldr	r3, [pc, #640]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043bc:	4a9e      	ldr	r2, [pc, #632]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80043c6:	4b9c      	ldr	r3, [pc, #624]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	4999      	ldr	r1, [pc, #612]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00a      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043e4:	4b94      	ldr	r3, [pc, #592]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043f2:	4991      	ldr	r1, [pc, #580]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004406:	4b8c      	ldr	r3, [pc, #560]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004414:	4988      	ldr	r1, [pc, #544]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00a      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004428:	4b83      	ldr	r3, [pc, #524]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004436:	4980      	ldr	r1, [pc, #512]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004438:	4313      	orrs	r3, r2
 800443a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800444a:	4b7b      	ldr	r3, [pc, #492]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800444c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004450:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004458:	4977      	ldr	r1, [pc, #476]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00a      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800446c:	4b72      	ldr	r3, [pc, #456]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004472:	f023 0203 	bic.w	r2, r3, #3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447a:	496f      	ldr	r1, [pc, #444]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800447c:	4313      	orrs	r3, r2
 800447e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800448e:	4b6a      	ldr	r3, [pc, #424]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004494:	f023 020c 	bic.w	r2, r3, #12
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800449c:	4966      	ldr	r1, [pc, #408]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00a      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044b0:	4b61      	ldr	r3, [pc, #388]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044be:	495e      	ldr	r1, [pc, #376]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044d2:	4b59      	ldr	r3, [pc, #356]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e0:	4955      	ldr	r1, [pc, #340]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044f4:	4b50      	ldr	r3, [pc, #320]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004502:	494d      	ldr	r1, [pc, #308]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004516:	4b48      	ldr	r3, [pc, #288]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004524:	4944      	ldr	r1, [pc, #272]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004538:	4b3f      	ldr	r3, [pc, #252]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800453a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004546:	493c      	ldr	r1, [pc, #240]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004548:	4313      	orrs	r3, r2
 800454a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800455a:	4b37      	ldr	r3, [pc, #220]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800455c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004560:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004568:	4933      	ldr	r1, [pc, #204]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800456a:	4313      	orrs	r3, r2
 800456c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800457c:	4b2e      	ldr	r3, [pc, #184]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800457e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004582:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800458a:	492b      	ldr	r1, [pc, #172]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d011      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800459e:	4b26      	ldr	r3, [pc, #152]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045ac:	4922      	ldr	r1, [pc, #136]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045bc:	d101      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80045be:	2301      	movs	r3, #1
 80045c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80045ce:	2301      	movs	r3, #1
 80045d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045de:	4b16      	ldr	r3, [pc, #88]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ec:	4912      	ldr	r1, [pc, #72]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00b      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004600:	4b0d      	ldr	r3, [pc, #52]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004606:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004610:	4909      	ldr	r1, [pc, #36]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d006      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 80d9 	beq.w	80047de <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800462c:	4b02      	ldr	r3, [pc, #8]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a01      	ldr	r2, [pc, #4]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004632:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004636:	e001      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004638:	40023800 	.word	0x40023800
 800463c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800463e:	f7fd f8e3 	bl	8001808 <HAL_GetTick>
 8004642:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004644:	e008      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004646:	f7fd f8df 	bl	8001808 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b64      	cmp	r3, #100	; 0x64
 8004652:	d901      	bls.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e194      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004658:	4b6c      	ldr	r3, [pc, #432]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1f0      	bne.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	d021      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004674:	2b00      	cmp	r3, #0
 8004676:	d11d      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004678:	4b64      	ldr	r3, [pc, #400]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800467a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800467e:	0c1b      	lsrs	r3, r3, #16
 8004680:	f003 0303 	and.w	r3, r3, #3
 8004684:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004686:	4b61      	ldr	r3, [pc, #388]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800468c:	0e1b      	lsrs	r3, r3, #24
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	019a      	lsls	r2, r3, #6
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	041b      	lsls	r3, r3, #16
 800469e:	431a      	orrs	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	061b      	lsls	r3, r3, #24
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	071b      	lsls	r3, r3, #28
 80046ac:	4957      	ldr	r1, [pc, #348]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d004      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046c8:	d00a      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d02e      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046de:	d129      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046e0:	4b4a      	ldr	r3, [pc, #296]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e6:	0c1b      	lsrs	r3, r3, #16
 80046e8:	f003 0303 	and.w	r3, r3, #3
 80046ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046ee:	4b47      	ldr	r3, [pc, #284]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046f4:	0f1b      	lsrs	r3, r3, #28
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	019a      	lsls	r2, r3, #6
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	041b      	lsls	r3, r3, #16
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	061b      	lsls	r3, r3, #24
 800470e:	431a      	orrs	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	071b      	lsls	r3, r3, #28
 8004714:	493d      	ldr	r1, [pc, #244]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800471c:	4b3b      	ldr	r3, [pc, #236]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800471e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004722:	f023 021f 	bic.w	r2, r3, #31
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	3b01      	subs	r3, #1
 800472c:	4937      	ldr	r1, [pc, #220]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d01d      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004740:	4b32      	ldr	r3, [pc, #200]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004746:	0e1b      	lsrs	r3, r3, #24
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800474e:	4b2f      	ldr	r3, [pc, #188]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004754:	0f1b      	lsrs	r3, r3, #28
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	019a      	lsls	r2, r3, #6
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	041b      	lsls	r3, r3, #16
 8004768:	431a      	orrs	r2, r3
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	061b      	lsls	r3, r3, #24
 800476e:	431a      	orrs	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	071b      	lsls	r3, r3, #28
 8004774:	4925      	ldr	r1, [pc, #148]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d011      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	019a      	lsls	r2, r3, #6
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	041b      	lsls	r3, r3, #16
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	061b      	lsls	r3, r3, #24
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	071b      	lsls	r3, r3, #28
 80047a4:	4919      	ldr	r1, [pc, #100]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047ac:	4b17      	ldr	r3, [pc, #92]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a16      	ldr	r2, [pc, #88]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047b8:	f7fd f826 	bl	8001808 <HAL_GetTick>
 80047bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047be:	e008      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047c0:	f7fd f822 	bl	8001808 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b64      	cmp	r3, #100	; 0x64
 80047cc:	d901      	bls.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e0d7      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047d2:	4b0e      	ldr	r3, [pc, #56]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0f0      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	f040 80cd 	bne.w	8004980 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80047e6:	4b09      	ldr	r3, [pc, #36]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a08      	ldr	r2, [pc, #32]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047f2:	f7fd f809 	bl	8001808 <HAL_GetTick>
 80047f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047f8:	e00a      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047fa:	f7fd f805 	bl	8001808 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b64      	cmp	r3, #100	; 0x64
 8004806:	d903      	bls.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e0ba      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800480c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004810:	4b5e      	ldr	r3, [pc, #376]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800481c:	d0ed      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482e:	2b00      	cmp	r3, #0
 8004830:	d009      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800483a:	2b00      	cmp	r3, #0
 800483c:	d02e      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	d12a      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004846:	4b51      	ldr	r3, [pc, #324]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484c:	0c1b      	lsrs	r3, r3, #16
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004854:	4b4d      	ldr	r3, [pc, #308]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485a:	0f1b      	lsrs	r3, r3, #28
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	019a      	lsls	r2, r3, #6
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	041b      	lsls	r3, r3, #16
 800486c:	431a      	orrs	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	061b      	lsls	r3, r3, #24
 8004874:	431a      	orrs	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	071b      	lsls	r3, r3, #28
 800487a:	4944      	ldr	r1, [pc, #272]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004882:	4b42      	ldr	r3, [pc, #264]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004888:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004890:	3b01      	subs	r3, #1
 8004892:	021b      	lsls	r3, r3, #8
 8004894:	493d      	ldr	r1, [pc, #244]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d022      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048b0:	d11d      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048b2:	4b36      	ldr	r3, [pc, #216]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b8:	0e1b      	lsrs	r3, r3, #24
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048c0:	4b32      	ldr	r3, [pc, #200]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c6:	0f1b      	lsrs	r3, r3, #28
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	019a      	lsls	r2, r3, #6
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	041b      	lsls	r3, r3, #16
 80048da:	431a      	orrs	r2, r3
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	061b      	lsls	r3, r3, #24
 80048e0:	431a      	orrs	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	071b      	lsls	r3, r3, #28
 80048e6:	4929      	ldr	r1, [pc, #164]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d028      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048fa:	4b24      	ldr	r3, [pc, #144]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004900:	0e1b      	lsrs	r3, r3, #24
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004908:	4b20      	ldr	r3, [pc, #128]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800490a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490e:	0c1b      	lsrs	r3, r3, #16
 8004910:	f003 0303 	and.w	r3, r3, #3
 8004914:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	019a      	lsls	r2, r3, #6
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	041b      	lsls	r3, r3, #16
 8004920:	431a      	orrs	r2, r3
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	061b      	lsls	r3, r3, #24
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	071b      	lsls	r3, r3, #28
 800492e:	4917      	ldr	r1, [pc, #92]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004930:	4313      	orrs	r3, r2
 8004932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004936:	4b15      	ldr	r3, [pc, #84]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800493c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	4911      	ldr	r1, [pc, #68]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800494c:	4b0f      	ldr	r3, [pc, #60]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a0e      	ldr	r2, [pc, #56]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004956:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004958:	f7fc ff56 	bl	8001808 <HAL_GetTick>
 800495c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004960:	f7fc ff52 	bl	8001808 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b64      	cmp	r3, #100	; 0x64
 800496c:	d901      	bls.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e007      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004972:	4b06      	ldr	r3, [pc, #24]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800497a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800497e:	d1ef      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3720      	adds	r7, #32
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40023800 	.word	0x40023800

08004990 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e040      	b.n	8004a24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d106      	bne.n	80049b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7fc fd62 	bl	800147c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2224      	movs	r2, #36	; 0x24
 80049bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0201 	bic.w	r2, r2, #1
 80049cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f82c 	bl	8004a2c <UART_SetConfig>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d101      	bne.n	80049de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e022      	b.n	8004a24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fa84 	bl	8004ef4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689a      	ldr	r2, [r3, #8]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0201 	orr.w	r2, r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fb0b 	bl	8005038 <UART_CheckIdleState>
 8004a22:	4603      	mov	r3, r0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b088      	sub	sp, #32
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	4ba6      	ldr	r3, [pc, #664]	; (8004cf0 <UART_SetConfig+0x2c4>)
 8004a58:	4013      	ands	r3, r2
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6812      	ldr	r2, [r2, #0]
 8004a5e:	6979      	ldr	r1, [r7, #20]
 8004a60:	430b      	orrs	r3, r1
 8004a62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a94      	ldr	r2, [pc, #592]	; (8004cf4 <UART_SetConfig+0x2c8>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d120      	bne.n	8004aea <UART_SetConfig+0xbe>
 8004aa8:	4b93      	ldr	r3, [pc, #588]	; (8004cf8 <UART_SetConfig+0x2cc>)
 8004aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	2b03      	cmp	r3, #3
 8004ab4:	d816      	bhi.n	8004ae4 <UART_SetConfig+0xb8>
 8004ab6:	a201      	add	r2, pc, #4	; (adr r2, 8004abc <UART_SetConfig+0x90>)
 8004ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abc:	08004acd 	.word	0x08004acd
 8004ac0:	08004ad9 	.word	0x08004ad9
 8004ac4:	08004ad3 	.word	0x08004ad3
 8004ac8:	08004adf 	.word	0x08004adf
 8004acc:	2301      	movs	r3, #1
 8004ace:	77fb      	strb	r3, [r7, #31]
 8004ad0:	e150      	b.n	8004d74 <UART_SetConfig+0x348>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	77fb      	strb	r3, [r7, #31]
 8004ad6:	e14d      	b.n	8004d74 <UART_SetConfig+0x348>
 8004ad8:	2304      	movs	r3, #4
 8004ada:	77fb      	strb	r3, [r7, #31]
 8004adc:	e14a      	b.n	8004d74 <UART_SetConfig+0x348>
 8004ade:	2308      	movs	r3, #8
 8004ae0:	77fb      	strb	r3, [r7, #31]
 8004ae2:	e147      	b.n	8004d74 <UART_SetConfig+0x348>
 8004ae4:	2310      	movs	r3, #16
 8004ae6:	77fb      	strb	r3, [r7, #31]
 8004ae8:	e144      	b.n	8004d74 <UART_SetConfig+0x348>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a83      	ldr	r2, [pc, #524]	; (8004cfc <UART_SetConfig+0x2d0>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d132      	bne.n	8004b5a <UART_SetConfig+0x12e>
 8004af4:	4b80      	ldr	r3, [pc, #512]	; (8004cf8 <UART_SetConfig+0x2cc>)
 8004af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afa:	f003 030c 	and.w	r3, r3, #12
 8004afe:	2b0c      	cmp	r3, #12
 8004b00:	d828      	bhi.n	8004b54 <UART_SetConfig+0x128>
 8004b02:	a201      	add	r2, pc, #4	; (adr r2, 8004b08 <UART_SetConfig+0xdc>)
 8004b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b08:	08004b3d 	.word	0x08004b3d
 8004b0c:	08004b55 	.word	0x08004b55
 8004b10:	08004b55 	.word	0x08004b55
 8004b14:	08004b55 	.word	0x08004b55
 8004b18:	08004b49 	.word	0x08004b49
 8004b1c:	08004b55 	.word	0x08004b55
 8004b20:	08004b55 	.word	0x08004b55
 8004b24:	08004b55 	.word	0x08004b55
 8004b28:	08004b43 	.word	0x08004b43
 8004b2c:	08004b55 	.word	0x08004b55
 8004b30:	08004b55 	.word	0x08004b55
 8004b34:	08004b55 	.word	0x08004b55
 8004b38:	08004b4f 	.word	0x08004b4f
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	77fb      	strb	r3, [r7, #31]
 8004b40:	e118      	b.n	8004d74 <UART_SetConfig+0x348>
 8004b42:	2302      	movs	r3, #2
 8004b44:	77fb      	strb	r3, [r7, #31]
 8004b46:	e115      	b.n	8004d74 <UART_SetConfig+0x348>
 8004b48:	2304      	movs	r3, #4
 8004b4a:	77fb      	strb	r3, [r7, #31]
 8004b4c:	e112      	b.n	8004d74 <UART_SetConfig+0x348>
 8004b4e:	2308      	movs	r3, #8
 8004b50:	77fb      	strb	r3, [r7, #31]
 8004b52:	e10f      	b.n	8004d74 <UART_SetConfig+0x348>
 8004b54:	2310      	movs	r3, #16
 8004b56:	77fb      	strb	r3, [r7, #31]
 8004b58:	e10c      	b.n	8004d74 <UART_SetConfig+0x348>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a68      	ldr	r2, [pc, #416]	; (8004d00 <UART_SetConfig+0x2d4>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d120      	bne.n	8004ba6 <UART_SetConfig+0x17a>
 8004b64:	4b64      	ldr	r3, [pc, #400]	; (8004cf8 <UART_SetConfig+0x2cc>)
 8004b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b6e:	2b30      	cmp	r3, #48	; 0x30
 8004b70:	d013      	beq.n	8004b9a <UART_SetConfig+0x16e>
 8004b72:	2b30      	cmp	r3, #48	; 0x30
 8004b74:	d814      	bhi.n	8004ba0 <UART_SetConfig+0x174>
 8004b76:	2b20      	cmp	r3, #32
 8004b78:	d009      	beq.n	8004b8e <UART_SetConfig+0x162>
 8004b7a:	2b20      	cmp	r3, #32
 8004b7c:	d810      	bhi.n	8004ba0 <UART_SetConfig+0x174>
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <UART_SetConfig+0x15c>
 8004b82:	2b10      	cmp	r3, #16
 8004b84:	d006      	beq.n	8004b94 <UART_SetConfig+0x168>
 8004b86:	e00b      	b.n	8004ba0 <UART_SetConfig+0x174>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	77fb      	strb	r3, [r7, #31]
 8004b8c:	e0f2      	b.n	8004d74 <UART_SetConfig+0x348>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	77fb      	strb	r3, [r7, #31]
 8004b92:	e0ef      	b.n	8004d74 <UART_SetConfig+0x348>
 8004b94:	2304      	movs	r3, #4
 8004b96:	77fb      	strb	r3, [r7, #31]
 8004b98:	e0ec      	b.n	8004d74 <UART_SetConfig+0x348>
 8004b9a:	2308      	movs	r3, #8
 8004b9c:	77fb      	strb	r3, [r7, #31]
 8004b9e:	e0e9      	b.n	8004d74 <UART_SetConfig+0x348>
 8004ba0:	2310      	movs	r3, #16
 8004ba2:	77fb      	strb	r3, [r7, #31]
 8004ba4:	e0e6      	b.n	8004d74 <UART_SetConfig+0x348>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a56      	ldr	r2, [pc, #344]	; (8004d04 <UART_SetConfig+0x2d8>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d120      	bne.n	8004bf2 <UART_SetConfig+0x1c6>
 8004bb0:	4b51      	ldr	r3, [pc, #324]	; (8004cf8 <UART_SetConfig+0x2cc>)
 8004bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bba:	2bc0      	cmp	r3, #192	; 0xc0
 8004bbc:	d013      	beq.n	8004be6 <UART_SetConfig+0x1ba>
 8004bbe:	2bc0      	cmp	r3, #192	; 0xc0
 8004bc0:	d814      	bhi.n	8004bec <UART_SetConfig+0x1c0>
 8004bc2:	2b80      	cmp	r3, #128	; 0x80
 8004bc4:	d009      	beq.n	8004bda <UART_SetConfig+0x1ae>
 8004bc6:	2b80      	cmp	r3, #128	; 0x80
 8004bc8:	d810      	bhi.n	8004bec <UART_SetConfig+0x1c0>
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <UART_SetConfig+0x1a8>
 8004bce:	2b40      	cmp	r3, #64	; 0x40
 8004bd0:	d006      	beq.n	8004be0 <UART_SetConfig+0x1b4>
 8004bd2:	e00b      	b.n	8004bec <UART_SetConfig+0x1c0>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	77fb      	strb	r3, [r7, #31]
 8004bd8:	e0cc      	b.n	8004d74 <UART_SetConfig+0x348>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	77fb      	strb	r3, [r7, #31]
 8004bde:	e0c9      	b.n	8004d74 <UART_SetConfig+0x348>
 8004be0:	2304      	movs	r3, #4
 8004be2:	77fb      	strb	r3, [r7, #31]
 8004be4:	e0c6      	b.n	8004d74 <UART_SetConfig+0x348>
 8004be6:	2308      	movs	r3, #8
 8004be8:	77fb      	strb	r3, [r7, #31]
 8004bea:	e0c3      	b.n	8004d74 <UART_SetConfig+0x348>
 8004bec:	2310      	movs	r3, #16
 8004bee:	77fb      	strb	r3, [r7, #31]
 8004bf0:	e0c0      	b.n	8004d74 <UART_SetConfig+0x348>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a44      	ldr	r2, [pc, #272]	; (8004d08 <UART_SetConfig+0x2dc>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d125      	bne.n	8004c48 <UART_SetConfig+0x21c>
 8004bfc:	4b3e      	ldr	r3, [pc, #248]	; (8004cf8 <UART_SetConfig+0x2cc>)
 8004bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c0a:	d017      	beq.n	8004c3c <UART_SetConfig+0x210>
 8004c0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c10:	d817      	bhi.n	8004c42 <UART_SetConfig+0x216>
 8004c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c16:	d00b      	beq.n	8004c30 <UART_SetConfig+0x204>
 8004c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c1c:	d811      	bhi.n	8004c42 <UART_SetConfig+0x216>
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <UART_SetConfig+0x1fe>
 8004c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c26:	d006      	beq.n	8004c36 <UART_SetConfig+0x20a>
 8004c28:	e00b      	b.n	8004c42 <UART_SetConfig+0x216>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	77fb      	strb	r3, [r7, #31]
 8004c2e:	e0a1      	b.n	8004d74 <UART_SetConfig+0x348>
 8004c30:	2302      	movs	r3, #2
 8004c32:	77fb      	strb	r3, [r7, #31]
 8004c34:	e09e      	b.n	8004d74 <UART_SetConfig+0x348>
 8004c36:	2304      	movs	r3, #4
 8004c38:	77fb      	strb	r3, [r7, #31]
 8004c3a:	e09b      	b.n	8004d74 <UART_SetConfig+0x348>
 8004c3c:	2308      	movs	r3, #8
 8004c3e:	77fb      	strb	r3, [r7, #31]
 8004c40:	e098      	b.n	8004d74 <UART_SetConfig+0x348>
 8004c42:	2310      	movs	r3, #16
 8004c44:	77fb      	strb	r3, [r7, #31]
 8004c46:	e095      	b.n	8004d74 <UART_SetConfig+0x348>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a2f      	ldr	r2, [pc, #188]	; (8004d0c <UART_SetConfig+0x2e0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d125      	bne.n	8004c9e <UART_SetConfig+0x272>
 8004c52:	4b29      	ldr	r3, [pc, #164]	; (8004cf8 <UART_SetConfig+0x2cc>)
 8004c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c60:	d017      	beq.n	8004c92 <UART_SetConfig+0x266>
 8004c62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c66:	d817      	bhi.n	8004c98 <UART_SetConfig+0x26c>
 8004c68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c6c:	d00b      	beq.n	8004c86 <UART_SetConfig+0x25a>
 8004c6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c72:	d811      	bhi.n	8004c98 <UART_SetConfig+0x26c>
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <UART_SetConfig+0x254>
 8004c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c7c:	d006      	beq.n	8004c8c <UART_SetConfig+0x260>
 8004c7e:	e00b      	b.n	8004c98 <UART_SetConfig+0x26c>
 8004c80:	2301      	movs	r3, #1
 8004c82:	77fb      	strb	r3, [r7, #31]
 8004c84:	e076      	b.n	8004d74 <UART_SetConfig+0x348>
 8004c86:	2302      	movs	r3, #2
 8004c88:	77fb      	strb	r3, [r7, #31]
 8004c8a:	e073      	b.n	8004d74 <UART_SetConfig+0x348>
 8004c8c:	2304      	movs	r3, #4
 8004c8e:	77fb      	strb	r3, [r7, #31]
 8004c90:	e070      	b.n	8004d74 <UART_SetConfig+0x348>
 8004c92:	2308      	movs	r3, #8
 8004c94:	77fb      	strb	r3, [r7, #31]
 8004c96:	e06d      	b.n	8004d74 <UART_SetConfig+0x348>
 8004c98:	2310      	movs	r3, #16
 8004c9a:	77fb      	strb	r3, [r7, #31]
 8004c9c:	e06a      	b.n	8004d74 <UART_SetConfig+0x348>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a1b      	ldr	r2, [pc, #108]	; (8004d10 <UART_SetConfig+0x2e4>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d138      	bne.n	8004d1a <UART_SetConfig+0x2ee>
 8004ca8:	4b13      	ldr	r3, [pc, #76]	; (8004cf8 <UART_SetConfig+0x2cc>)
 8004caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004cb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cb6:	d017      	beq.n	8004ce8 <UART_SetConfig+0x2bc>
 8004cb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cbc:	d82a      	bhi.n	8004d14 <UART_SetConfig+0x2e8>
 8004cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc2:	d00b      	beq.n	8004cdc <UART_SetConfig+0x2b0>
 8004cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc8:	d824      	bhi.n	8004d14 <UART_SetConfig+0x2e8>
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <UART_SetConfig+0x2aa>
 8004cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd2:	d006      	beq.n	8004ce2 <UART_SetConfig+0x2b6>
 8004cd4:	e01e      	b.n	8004d14 <UART_SetConfig+0x2e8>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	77fb      	strb	r3, [r7, #31]
 8004cda:	e04b      	b.n	8004d74 <UART_SetConfig+0x348>
 8004cdc:	2302      	movs	r3, #2
 8004cde:	77fb      	strb	r3, [r7, #31]
 8004ce0:	e048      	b.n	8004d74 <UART_SetConfig+0x348>
 8004ce2:	2304      	movs	r3, #4
 8004ce4:	77fb      	strb	r3, [r7, #31]
 8004ce6:	e045      	b.n	8004d74 <UART_SetConfig+0x348>
 8004ce8:	2308      	movs	r3, #8
 8004cea:	77fb      	strb	r3, [r7, #31]
 8004cec:	e042      	b.n	8004d74 <UART_SetConfig+0x348>
 8004cee:	bf00      	nop
 8004cf0:	efff69f3 	.word	0xefff69f3
 8004cf4:	40011000 	.word	0x40011000
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	40004400 	.word	0x40004400
 8004d00:	40004800 	.word	0x40004800
 8004d04:	40004c00 	.word	0x40004c00
 8004d08:	40005000 	.word	0x40005000
 8004d0c:	40011400 	.word	0x40011400
 8004d10:	40007800 	.word	0x40007800
 8004d14:	2310      	movs	r3, #16
 8004d16:	77fb      	strb	r3, [r7, #31]
 8004d18:	e02c      	b.n	8004d74 <UART_SetConfig+0x348>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a72      	ldr	r2, [pc, #456]	; (8004ee8 <UART_SetConfig+0x4bc>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d125      	bne.n	8004d70 <UART_SetConfig+0x344>
 8004d24:	4b71      	ldr	r3, [pc, #452]	; (8004eec <UART_SetConfig+0x4c0>)
 8004d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004d2e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d32:	d017      	beq.n	8004d64 <UART_SetConfig+0x338>
 8004d34:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d38:	d817      	bhi.n	8004d6a <UART_SetConfig+0x33e>
 8004d3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d3e:	d00b      	beq.n	8004d58 <UART_SetConfig+0x32c>
 8004d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d44:	d811      	bhi.n	8004d6a <UART_SetConfig+0x33e>
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <UART_SetConfig+0x326>
 8004d4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d4e:	d006      	beq.n	8004d5e <UART_SetConfig+0x332>
 8004d50:	e00b      	b.n	8004d6a <UART_SetConfig+0x33e>
 8004d52:	2300      	movs	r3, #0
 8004d54:	77fb      	strb	r3, [r7, #31]
 8004d56:	e00d      	b.n	8004d74 <UART_SetConfig+0x348>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	77fb      	strb	r3, [r7, #31]
 8004d5c:	e00a      	b.n	8004d74 <UART_SetConfig+0x348>
 8004d5e:	2304      	movs	r3, #4
 8004d60:	77fb      	strb	r3, [r7, #31]
 8004d62:	e007      	b.n	8004d74 <UART_SetConfig+0x348>
 8004d64:	2308      	movs	r3, #8
 8004d66:	77fb      	strb	r3, [r7, #31]
 8004d68:	e004      	b.n	8004d74 <UART_SetConfig+0x348>
 8004d6a:	2310      	movs	r3, #16
 8004d6c:	77fb      	strb	r3, [r7, #31]
 8004d6e:	e001      	b.n	8004d74 <UART_SetConfig+0x348>
 8004d70:	2310      	movs	r3, #16
 8004d72:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d7c:	d15b      	bne.n	8004e36 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004d7e:	7ffb      	ldrb	r3, [r7, #31]
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d828      	bhi.n	8004dd6 <UART_SetConfig+0x3aa>
 8004d84:	a201      	add	r2, pc, #4	; (adr r2, 8004d8c <UART_SetConfig+0x360>)
 8004d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8a:	bf00      	nop
 8004d8c:	08004db1 	.word	0x08004db1
 8004d90:	08004db9 	.word	0x08004db9
 8004d94:	08004dc1 	.word	0x08004dc1
 8004d98:	08004dd7 	.word	0x08004dd7
 8004d9c:	08004dc7 	.word	0x08004dc7
 8004da0:	08004dd7 	.word	0x08004dd7
 8004da4:	08004dd7 	.word	0x08004dd7
 8004da8:	08004dd7 	.word	0x08004dd7
 8004dac:	08004dcf 	.word	0x08004dcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004db0:	f7ff f9d6 	bl	8004160 <HAL_RCC_GetPCLK1Freq>
 8004db4:	61b8      	str	r0, [r7, #24]
        break;
 8004db6:	e013      	b.n	8004de0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004db8:	f7ff f9e6 	bl	8004188 <HAL_RCC_GetPCLK2Freq>
 8004dbc:	61b8      	str	r0, [r7, #24]
        break;
 8004dbe:	e00f      	b.n	8004de0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dc0:	4b4b      	ldr	r3, [pc, #300]	; (8004ef0 <UART_SetConfig+0x4c4>)
 8004dc2:	61bb      	str	r3, [r7, #24]
        break;
 8004dc4:	e00c      	b.n	8004de0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dc6:	f7ff f8b9 	bl	8003f3c <HAL_RCC_GetSysClockFreq>
 8004dca:	61b8      	str	r0, [r7, #24]
        break;
 8004dcc:	e008      	b.n	8004de0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dd2:	61bb      	str	r3, [r7, #24]
        break;
 8004dd4:	e004      	b.n	8004de0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	77bb      	strb	r3, [r7, #30]
        break;
 8004dde:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d074      	beq.n	8004ed0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	005a      	lsls	r2, r3, #1
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	085b      	lsrs	r3, r3, #1
 8004df0:	441a      	add	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	2b0f      	cmp	r3, #15
 8004e00:	d916      	bls.n	8004e30 <UART_SetConfig+0x404>
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e08:	d212      	bcs.n	8004e30 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f023 030f 	bic.w	r3, r3, #15
 8004e12:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	085b      	lsrs	r3, r3, #1
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	89fb      	ldrh	r3, [r7, #14]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	89fa      	ldrh	r2, [r7, #14]
 8004e2c:	60da      	str	r2, [r3, #12]
 8004e2e:	e04f      	b.n	8004ed0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	77bb      	strb	r3, [r7, #30]
 8004e34:	e04c      	b.n	8004ed0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e36:	7ffb      	ldrb	r3, [r7, #31]
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d828      	bhi.n	8004e8e <UART_SetConfig+0x462>
 8004e3c:	a201      	add	r2, pc, #4	; (adr r2, 8004e44 <UART_SetConfig+0x418>)
 8004e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e42:	bf00      	nop
 8004e44:	08004e69 	.word	0x08004e69
 8004e48:	08004e71 	.word	0x08004e71
 8004e4c:	08004e79 	.word	0x08004e79
 8004e50:	08004e8f 	.word	0x08004e8f
 8004e54:	08004e7f 	.word	0x08004e7f
 8004e58:	08004e8f 	.word	0x08004e8f
 8004e5c:	08004e8f 	.word	0x08004e8f
 8004e60:	08004e8f 	.word	0x08004e8f
 8004e64:	08004e87 	.word	0x08004e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e68:	f7ff f97a 	bl	8004160 <HAL_RCC_GetPCLK1Freq>
 8004e6c:	61b8      	str	r0, [r7, #24]
        break;
 8004e6e:	e013      	b.n	8004e98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e70:	f7ff f98a 	bl	8004188 <HAL_RCC_GetPCLK2Freq>
 8004e74:	61b8      	str	r0, [r7, #24]
        break;
 8004e76:	e00f      	b.n	8004e98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e78:	4b1d      	ldr	r3, [pc, #116]	; (8004ef0 <UART_SetConfig+0x4c4>)
 8004e7a:	61bb      	str	r3, [r7, #24]
        break;
 8004e7c:	e00c      	b.n	8004e98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e7e:	f7ff f85d 	bl	8003f3c <HAL_RCC_GetSysClockFreq>
 8004e82:	61b8      	str	r0, [r7, #24]
        break;
 8004e84:	e008      	b.n	8004e98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e8a:	61bb      	str	r3, [r7, #24]
        break;
 8004e8c:	e004      	b.n	8004e98 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	77bb      	strb	r3, [r7, #30]
        break;
 8004e96:	bf00      	nop
    }

    if (pclk != 0U)
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d018      	beq.n	8004ed0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	085a      	lsrs	r2, r3, #1
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	441a      	add	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	2b0f      	cmp	r3, #15
 8004eb6:	d909      	bls.n	8004ecc <UART_SetConfig+0x4a0>
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ebe:	d205      	bcs.n	8004ecc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	60da      	str	r2, [r3, #12]
 8004eca:	e001      	b.n	8004ed0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004edc:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3720      	adds	r7, #32
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	40007c00 	.word	0x40007c00
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	00f42400 	.word	0x00f42400

08004ef4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	f003 0310 	and.w	r3, r3, #16
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	f003 0320 	and.w	r3, r3, #32
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d01a      	beq.n	800500a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ff2:	d10a      	bne.n	800500a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	605a      	str	r2, [r3, #4]
  }
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af02      	add	r7, sp, #8
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005048:	f7fc fbde 	bl	8001808 <HAL_GetTick>
 800504c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b08      	cmp	r3, #8
 800505a:	d10e      	bne.n	800507a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800505c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f81b 	bl	80050a6 <UART_WaitOnFlagUntilTimeout>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e011      	b.n	800509e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2220      	movs	r2, #32
 800507e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2220      	movs	r2, #32
 8005084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b09c      	sub	sp, #112	; 0x70
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	60f8      	str	r0, [r7, #12]
 80050ae:	60b9      	str	r1, [r7, #8]
 80050b0:	603b      	str	r3, [r7, #0]
 80050b2:	4613      	mov	r3, r2
 80050b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050b6:	e0a7      	b.n	8005208 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050be:	f000 80a3 	beq.w	8005208 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050c2:	f7fc fba1 	bl	8001808 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d302      	bcc.n	80050d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80050d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d13f      	bne.n	8005158 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050e0:	e853 3f00 	ldrex	r3, [r3]
 80050e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80050e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050ec:	667b      	str	r3, [r7, #100]	; 0x64
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050fe:	e841 2300 	strex	r3, r2, [r1]
 8005102:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1e6      	bne.n	80050d8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3308      	adds	r3, #8
 8005110:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800511a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511c:	f023 0301 	bic.w	r3, r3, #1
 8005120:	663b      	str	r3, [r7, #96]	; 0x60
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3308      	adds	r3, #8
 8005128:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800512a:	64ba      	str	r2, [r7, #72]	; 0x48
 800512c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005130:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e5      	bne.n	800510a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2220      	movs	r2, #32
 8005142:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2220      	movs	r2, #32
 8005148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e068      	b.n	800522a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0304 	and.w	r3, r3, #4
 8005162:	2b00      	cmp	r3, #0
 8005164:	d050      	beq.n	8005208 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005174:	d148      	bne.n	8005208 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800517e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005188:	e853 3f00 	ldrex	r3, [r3]
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005194:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	461a      	mov	r2, r3
 800519c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800519e:	637b      	str	r3, [r7, #52]	; 0x34
 80051a0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e6      	bne.n	8005180 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3308      	adds	r3, #8
 80051b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	e853 3f00 	ldrex	r3, [r3]
 80051c0:	613b      	str	r3, [r7, #16]
   return(result);
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f023 0301 	bic.w	r3, r3, #1
 80051c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3308      	adds	r3, #8
 80051d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80051d2:	623a      	str	r2, [r7, #32]
 80051d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d6:	69f9      	ldr	r1, [r7, #28]
 80051d8:	6a3a      	ldr	r2, [r7, #32]
 80051da:	e841 2300 	strex	r3, r2, [r1]
 80051de:	61bb      	str	r3, [r7, #24]
   return(result);
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1e5      	bne.n	80051b2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2220      	movs	r2, #32
 80051ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e010      	b.n	800522a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	69da      	ldr	r2, [r3, #28]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	4013      	ands	r3, r2
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	429a      	cmp	r2, r3
 8005216:	bf0c      	ite	eq
 8005218:	2301      	moveq	r3, #1
 800521a:	2300      	movne	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	461a      	mov	r2, r3
 8005220:	79fb      	ldrb	r3, [r7, #7]
 8005222:	429a      	cmp	r2, r3
 8005224:	f43f af48 	beq.w	80050b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3770      	adds	r7, #112	; 0x70
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
	...

08005234 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005234:	b084      	sub	sp, #16
 8005236:	b580      	push	{r7, lr}
 8005238:	b084      	sub	sp, #16
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	f107 001c 	add.w	r0, r7, #28
 8005242:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005248:	2b01      	cmp	r3, #1
 800524a:	d120      	bne.n	800528e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	4b20      	ldr	r3, [pc, #128]	; (80052e0 <USB_CoreInit+0xac>)
 800525e:	4013      	ands	r3, r2
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005272:	2b01      	cmp	r3, #1
 8005274:	d105      	bne.n	8005282 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fa96 	bl	80057b4 <USB_CoreReset>
 8005288:	4603      	mov	r3, r0
 800528a:	73fb      	strb	r3, [r7, #15]
 800528c:	e010      	b.n	80052b0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fa8a 	bl	80057b4 <USB_CoreReset>
 80052a0:	4603      	mov	r3, r0
 80052a2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80052b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d10b      	bne.n	80052ce <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f043 0206 	orr.w	r2, r3, #6
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f043 0220 	orr.w	r2, r3, #32
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052da:	b004      	add	sp, #16
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	ffbdffbf 	.word	0xffbdffbf

080052e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f023 0201 	bic.w	r2, r3, #1
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b084      	sub	sp, #16
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	460b      	mov	r3, r1
 8005310:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005312:	2300      	movs	r3, #0
 8005314:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005322:	78fb      	ldrb	r3, [r7, #3]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d115      	bne.n	8005354 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005334:	2001      	movs	r0, #1
 8005336:	f7fc fa73 	bl	8001820 <HAL_Delay>
      ms++;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	3301      	adds	r3, #1
 800533e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fa29 	bl	8005798 <USB_GetMode>
 8005346:	4603      	mov	r3, r0
 8005348:	2b01      	cmp	r3, #1
 800534a:	d01e      	beq.n	800538a <USB_SetCurrentMode+0x84>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b31      	cmp	r3, #49	; 0x31
 8005350:	d9f0      	bls.n	8005334 <USB_SetCurrentMode+0x2e>
 8005352:	e01a      	b.n	800538a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005354:	78fb      	ldrb	r3, [r7, #3]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d115      	bne.n	8005386 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005366:	2001      	movs	r0, #1
 8005368:	f7fc fa5a 	bl	8001820 <HAL_Delay>
      ms++;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	3301      	adds	r3, #1
 8005370:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fa10 	bl	8005798 <USB_GetMode>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <USB_SetCurrentMode+0x84>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2b31      	cmp	r3, #49	; 0x31
 8005382:	d9f0      	bls.n	8005366 <USB_SetCurrentMode+0x60>
 8005384:	e001      	b.n	800538a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e005      	b.n	8005396 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2b32      	cmp	r3, #50	; 0x32
 800538e:	d101      	bne.n	8005394 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e000      	b.n	8005396 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053a0:	b084      	sub	sp, #16
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b086      	sub	sp, #24
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80053ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053ba:	2300      	movs	r3, #0
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	e009      	b.n	80053d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	3340      	adds	r3, #64	; 0x40
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	2200      	movs	r2, #0
 80053cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	3301      	adds	r3, #1
 80053d2:	613b      	str	r3, [r7, #16]
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	2b0e      	cmp	r3, #14
 80053d8:	d9f2      	bls.n	80053c0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d11c      	bne.n	800541a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ee:	f043 0302 	orr.w	r3, r3, #2
 80053f2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	e005      	b.n	8005426 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800542c:	461a      	mov	r2, r3
 800542e:	2300      	movs	r3, #0
 8005430:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005438:	4619      	mov	r1, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005440:	461a      	mov	r2, r3
 8005442:	680b      	ldr	r3, [r1, #0]
 8005444:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005448:	2b01      	cmp	r3, #1
 800544a:	d10c      	bne.n	8005466 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800544c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544e:	2b00      	cmp	r3, #0
 8005450:	d104      	bne.n	800545c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005452:	2100      	movs	r1, #0
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f965 	bl	8005724 <USB_SetDevSpeed>
 800545a:	e008      	b.n	800546e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800545c:	2101      	movs	r1, #1
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f960 	bl	8005724 <USB_SetDevSpeed>
 8005464:	e003      	b.n	800546e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005466:	2103      	movs	r1, #3
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f95b 	bl	8005724 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800546e:	2110      	movs	r1, #16
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f8f3 	bl	800565c <USB_FlushTxFifo>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f91f 	bl	80056c4 <USB_FlushRxFifo>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005496:	461a      	mov	r2, r3
 8005498:	2300      	movs	r3, #0
 800549a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a2:	461a      	mov	r2, r3
 80054a4:	2300      	movs	r3, #0
 80054a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ae:	461a      	mov	r2, r3
 80054b0:	2300      	movs	r3, #0
 80054b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054b4:	2300      	movs	r3, #0
 80054b6:	613b      	str	r3, [r7, #16]
 80054b8:	e043      	b.n	8005542 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054d0:	d118      	bne.n	8005504 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10a      	bne.n	80054ee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e4:	461a      	mov	r2, r3
 80054e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054ea:	6013      	str	r3, [r2, #0]
 80054ec:	e013      	b.n	8005516 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fa:	461a      	mov	r2, r3
 80054fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	e008      	b.n	8005516 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005510:	461a      	mov	r2, r3
 8005512:	2300      	movs	r3, #0
 8005514:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4413      	add	r3, r2
 800551e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005522:	461a      	mov	r2, r3
 8005524:	2300      	movs	r3, #0
 8005526:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005534:	461a      	mov	r2, r3
 8005536:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800553a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	3301      	adds	r3, #1
 8005540:	613b      	str	r3, [r7, #16]
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	429a      	cmp	r2, r3
 8005548:	d3b7      	bcc.n	80054ba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800554a:	2300      	movs	r3, #0
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	e043      	b.n	80055d8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005562:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005566:	d118      	bne.n	800559a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10a      	bne.n	8005584 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557a:	461a      	mov	r2, r3
 800557c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	e013      	b.n	80055ac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005590:	461a      	mov	r2, r3
 8005592:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	e008      	b.n	80055ac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a6:	461a      	mov	r2, r3
 80055a8:	2300      	movs	r3, #0
 80055aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b8:	461a      	mov	r2, r3
 80055ba:	2300      	movs	r3, #0
 80055bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ca:	461a      	mov	r2, r3
 80055cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	3301      	adds	r3, #1
 80055d6:	613b      	str	r3, [r7, #16]
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d3b7      	bcc.n	8005550 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005600:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	2b00      	cmp	r3, #0
 8005606:	d105      	bne.n	8005614 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	f043 0210 	orr.w	r2, r3, #16
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699a      	ldr	r2, [r3, #24]
 8005618:	4b0e      	ldr	r3, [pc, #56]	; (8005654 <USB_DevInit+0x2b4>)
 800561a:	4313      	orrs	r3, r2
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005622:	2b00      	cmp	r3, #0
 8005624:	d005      	beq.n	8005632 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	f043 0208 	orr.w	r2, r3, #8
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005634:	2b01      	cmp	r3, #1
 8005636:	d105      	bne.n	8005644 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	699a      	ldr	r2, [r3, #24]
 800563c:	4b06      	ldr	r3, [pc, #24]	; (8005658 <USB_DevInit+0x2b8>)
 800563e:	4313      	orrs	r3, r2
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005644:	7dfb      	ldrb	r3, [r7, #23]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005650:	b004      	add	sp, #16
 8005652:	4770      	bx	lr
 8005654:	803c3800 	.word	0x803c3800
 8005658:	40000004 	.word	0x40000004

0800565c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3301      	adds	r3, #1
 800566e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4a13      	ldr	r2, [pc, #76]	; (80056c0 <USB_FlushTxFifo+0x64>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d901      	bls.n	800567c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e01b      	b.n	80056b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	daf2      	bge.n	800566a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	019b      	lsls	r3, r3, #6
 800568c:	f043 0220 	orr.w	r2, r3, #32
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	3301      	adds	r3, #1
 8005698:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4a08      	ldr	r2, [pc, #32]	; (80056c0 <USB_FlushTxFifo+0x64>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d901      	bls.n	80056a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e006      	b.n	80056b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	f003 0320 	and.w	r3, r3, #32
 80056ae:	2b20      	cmp	r3, #32
 80056b0:	d0f0      	beq.n	8005694 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	00030d40 	.word	0x00030d40

080056c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	3301      	adds	r3, #1
 80056d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4a11      	ldr	r2, [pc, #68]	; (8005720 <USB_FlushRxFifo+0x5c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d901      	bls.n	80056e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e018      	b.n	8005714 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	daf2      	bge.n	80056d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2210      	movs	r2, #16
 80056f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	3301      	adds	r3, #1
 80056f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4a08      	ldr	r2, [pc, #32]	; (8005720 <USB_FlushRxFifo+0x5c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d901      	bls.n	8005706 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e006      	b.n	8005714 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0310 	and.w	r3, r3, #16
 800570e:	2b10      	cmp	r3, #16
 8005710:	d0f0      	beq.n	80056f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	00030d40 	.word	0x00030d40

08005724 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	460b      	mov	r3, r1
 800572e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	78fb      	ldrb	r3, [r7, #3]
 800573e:	68f9      	ldr	r1, [r7, #12]
 8005740:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005744:	4313      	orrs	r3, r2
 8005746:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005756:	b480      	push	{r7}
 8005758:	b085      	sub	sp, #20
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005770:	f023 0303 	bic.w	r3, r3, #3
 8005774:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005784:	f043 0302 	orr.w	r3, r3, #2
 8005788:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	f003 0301 	and.w	r3, r3, #1
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057bc:	2300      	movs	r3, #0
 80057be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3301      	adds	r3, #1
 80057c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4a13      	ldr	r2, [pc, #76]	; (8005818 <USB_CoreReset+0x64>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d901      	bls.n	80057d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e01b      	b.n	800580a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	daf2      	bge.n	80057c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f043 0201 	orr.w	r2, r3, #1
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	3301      	adds	r3, #1
 80057ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4a09      	ldr	r2, [pc, #36]	; (8005818 <USB_CoreReset+0x64>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d901      	bls.n	80057fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e006      	b.n	800580a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b01      	cmp	r3, #1
 8005806:	d0f0      	beq.n	80057ea <USB_CoreReset+0x36>

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	00030d40 	.word	0x00030d40

0800581c <__errno>:
 800581c:	4b01      	ldr	r3, [pc, #4]	; (8005824 <__errno+0x8>)
 800581e:	6818      	ldr	r0, [r3, #0]
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	20000024 	.word	0x20000024

08005828 <__libc_init_array>:
 8005828:	b570      	push	{r4, r5, r6, lr}
 800582a:	4d0d      	ldr	r5, [pc, #52]	; (8005860 <__libc_init_array+0x38>)
 800582c:	4c0d      	ldr	r4, [pc, #52]	; (8005864 <__libc_init_array+0x3c>)
 800582e:	1b64      	subs	r4, r4, r5
 8005830:	10a4      	asrs	r4, r4, #2
 8005832:	2600      	movs	r6, #0
 8005834:	42a6      	cmp	r6, r4
 8005836:	d109      	bne.n	800584c <__libc_init_array+0x24>
 8005838:	4d0b      	ldr	r5, [pc, #44]	; (8005868 <__libc_init_array+0x40>)
 800583a:	4c0c      	ldr	r4, [pc, #48]	; (800586c <__libc_init_array+0x44>)
 800583c:	f000 fca2 	bl	8006184 <_init>
 8005840:	1b64      	subs	r4, r4, r5
 8005842:	10a4      	asrs	r4, r4, #2
 8005844:	2600      	movs	r6, #0
 8005846:	42a6      	cmp	r6, r4
 8005848:	d105      	bne.n	8005856 <__libc_init_array+0x2e>
 800584a:	bd70      	pop	{r4, r5, r6, pc}
 800584c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005850:	4798      	blx	r3
 8005852:	3601      	adds	r6, #1
 8005854:	e7ee      	b.n	8005834 <__libc_init_array+0xc>
 8005856:	f855 3b04 	ldr.w	r3, [r5], #4
 800585a:	4798      	blx	r3
 800585c:	3601      	adds	r6, #1
 800585e:	e7f2      	b.n	8005846 <__libc_init_array+0x1e>
 8005860:	08007f6c 	.word	0x08007f6c
 8005864:	08007f6c 	.word	0x08007f6c
 8005868:	08007f6c 	.word	0x08007f6c
 800586c:	08007f70 	.word	0x08007f70

08005870 <memcpy>:
 8005870:	440a      	add	r2, r1
 8005872:	4291      	cmp	r1, r2
 8005874:	f100 33ff 	add.w	r3, r0, #4294967295
 8005878:	d100      	bne.n	800587c <memcpy+0xc>
 800587a:	4770      	bx	lr
 800587c:	b510      	push	{r4, lr}
 800587e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005882:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005886:	4291      	cmp	r1, r2
 8005888:	d1f9      	bne.n	800587e <memcpy+0xe>
 800588a:	bd10      	pop	{r4, pc}

0800588c <memset>:
 800588c:	4402      	add	r2, r0
 800588e:	4603      	mov	r3, r0
 8005890:	4293      	cmp	r3, r2
 8005892:	d100      	bne.n	8005896 <memset+0xa>
 8005894:	4770      	bx	lr
 8005896:	f803 1b01 	strb.w	r1, [r3], #1
 800589a:	e7f9      	b.n	8005890 <memset+0x4>

0800589c <sniprintf>:
 800589c:	b40c      	push	{r2, r3}
 800589e:	b530      	push	{r4, r5, lr}
 80058a0:	4b17      	ldr	r3, [pc, #92]	; (8005900 <sniprintf+0x64>)
 80058a2:	1e0c      	subs	r4, r1, #0
 80058a4:	681d      	ldr	r5, [r3, #0]
 80058a6:	b09d      	sub	sp, #116	; 0x74
 80058a8:	da08      	bge.n	80058bc <sniprintf+0x20>
 80058aa:	238b      	movs	r3, #139	; 0x8b
 80058ac:	602b      	str	r3, [r5, #0]
 80058ae:	f04f 30ff 	mov.w	r0, #4294967295
 80058b2:	b01d      	add	sp, #116	; 0x74
 80058b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058b8:	b002      	add	sp, #8
 80058ba:	4770      	bx	lr
 80058bc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80058c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80058c4:	bf14      	ite	ne
 80058c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80058ca:	4623      	moveq	r3, r4
 80058cc:	9304      	str	r3, [sp, #16]
 80058ce:	9307      	str	r3, [sp, #28]
 80058d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80058d4:	9002      	str	r0, [sp, #8]
 80058d6:	9006      	str	r0, [sp, #24]
 80058d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80058dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80058de:	ab21      	add	r3, sp, #132	; 0x84
 80058e0:	a902      	add	r1, sp, #8
 80058e2:	4628      	mov	r0, r5
 80058e4:	9301      	str	r3, [sp, #4]
 80058e6:	f000 f869 	bl	80059bc <_svfiprintf_r>
 80058ea:	1c43      	adds	r3, r0, #1
 80058ec:	bfbc      	itt	lt
 80058ee:	238b      	movlt	r3, #139	; 0x8b
 80058f0:	602b      	strlt	r3, [r5, #0]
 80058f2:	2c00      	cmp	r4, #0
 80058f4:	d0dd      	beq.n	80058b2 <sniprintf+0x16>
 80058f6:	9b02      	ldr	r3, [sp, #8]
 80058f8:	2200      	movs	r2, #0
 80058fa:	701a      	strb	r2, [r3, #0]
 80058fc:	e7d9      	b.n	80058b2 <sniprintf+0x16>
 80058fe:	bf00      	nop
 8005900:	20000024 	.word	0x20000024

08005904 <__ssputs_r>:
 8005904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005908:	688e      	ldr	r6, [r1, #8]
 800590a:	429e      	cmp	r6, r3
 800590c:	4682      	mov	sl, r0
 800590e:	460c      	mov	r4, r1
 8005910:	4690      	mov	r8, r2
 8005912:	461f      	mov	r7, r3
 8005914:	d838      	bhi.n	8005988 <__ssputs_r+0x84>
 8005916:	898a      	ldrh	r2, [r1, #12]
 8005918:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800591c:	d032      	beq.n	8005984 <__ssputs_r+0x80>
 800591e:	6825      	ldr	r5, [r4, #0]
 8005920:	6909      	ldr	r1, [r1, #16]
 8005922:	eba5 0901 	sub.w	r9, r5, r1
 8005926:	6965      	ldr	r5, [r4, #20]
 8005928:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800592c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005930:	3301      	adds	r3, #1
 8005932:	444b      	add	r3, r9
 8005934:	106d      	asrs	r5, r5, #1
 8005936:	429d      	cmp	r5, r3
 8005938:	bf38      	it	cc
 800593a:	461d      	movcc	r5, r3
 800593c:	0553      	lsls	r3, r2, #21
 800593e:	d531      	bpl.n	80059a4 <__ssputs_r+0xa0>
 8005940:	4629      	mov	r1, r5
 8005942:	f000 fb55 	bl	8005ff0 <_malloc_r>
 8005946:	4606      	mov	r6, r0
 8005948:	b950      	cbnz	r0, 8005960 <__ssputs_r+0x5c>
 800594a:	230c      	movs	r3, #12
 800594c:	f8ca 3000 	str.w	r3, [sl]
 8005950:	89a3      	ldrh	r3, [r4, #12]
 8005952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005956:	81a3      	strh	r3, [r4, #12]
 8005958:	f04f 30ff 	mov.w	r0, #4294967295
 800595c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005960:	6921      	ldr	r1, [r4, #16]
 8005962:	464a      	mov	r2, r9
 8005964:	f7ff ff84 	bl	8005870 <memcpy>
 8005968:	89a3      	ldrh	r3, [r4, #12]
 800596a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800596e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005972:	81a3      	strh	r3, [r4, #12]
 8005974:	6126      	str	r6, [r4, #16]
 8005976:	6165      	str	r5, [r4, #20]
 8005978:	444e      	add	r6, r9
 800597a:	eba5 0509 	sub.w	r5, r5, r9
 800597e:	6026      	str	r6, [r4, #0]
 8005980:	60a5      	str	r5, [r4, #8]
 8005982:	463e      	mov	r6, r7
 8005984:	42be      	cmp	r6, r7
 8005986:	d900      	bls.n	800598a <__ssputs_r+0x86>
 8005988:	463e      	mov	r6, r7
 800598a:	6820      	ldr	r0, [r4, #0]
 800598c:	4632      	mov	r2, r6
 800598e:	4641      	mov	r1, r8
 8005990:	f000 faa8 	bl	8005ee4 <memmove>
 8005994:	68a3      	ldr	r3, [r4, #8]
 8005996:	1b9b      	subs	r3, r3, r6
 8005998:	60a3      	str	r3, [r4, #8]
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	4433      	add	r3, r6
 800599e:	6023      	str	r3, [r4, #0]
 80059a0:	2000      	movs	r0, #0
 80059a2:	e7db      	b.n	800595c <__ssputs_r+0x58>
 80059a4:	462a      	mov	r2, r5
 80059a6:	f000 fb97 	bl	80060d8 <_realloc_r>
 80059aa:	4606      	mov	r6, r0
 80059ac:	2800      	cmp	r0, #0
 80059ae:	d1e1      	bne.n	8005974 <__ssputs_r+0x70>
 80059b0:	6921      	ldr	r1, [r4, #16]
 80059b2:	4650      	mov	r0, sl
 80059b4:	f000 fab0 	bl	8005f18 <_free_r>
 80059b8:	e7c7      	b.n	800594a <__ssputs_r+0x46>
	...

080059bc <_svfiprintf_r>:
 80059bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c0:	4698      	mov	r8, r3
 80059c2:	898b      	ldrh	r3, [r1, #12]
 80059c4:	061b      	lsls	r3, r3, #24
 80059c6:	b09d      	sub	sp, #116	; 0x74
 80059c8:	4607      	mov	r7, r0
 80059ca:	460d      	mov	r5, r1
 80059cc:	4614      	mov	r4, r2
 80059ce:	d50e      	bpl.n	80059ee <_svfiprintf_r+0x32>
 80059d0:	690b      	ldr	r3, [r1, #16]
 80059d2:	b963      	cbnz	r3, 80059ee <_svfiprintf_r+0x32>
 80059d4:	2140      	movs	r1, #64	; 0x40
 80059d6:	f000 fb0b 	bl	8005ff0 <_malloc_r>
 80059da:	6028      	str	r0, [r5, #0]
 80059dc:	6128      	str	r0, [r5, #16]
 80059de:	b920      	cbnz	r0, 80059ea <_svfiprintf_r+0x2e>
 80059e0:	230c      	movs	r3, #12
 80059e2:	603b      	str	r3, [r7, #0]
 80059e4:	f04f 30ff 	mov.w	r0, #4294967295
 80059e8:	e0d1      	b.n	8005b8e <_svfiprintf_r+0x1d2>
 80059ea:	2340      	movs	r3, #64	; 0x40
 80059ec:	616b      	str	r3, [r5, #20]
 80059ee:	2300      	movs	r3, #0
 80059f0:	9309      	str	r3, [sp, #36]	; 0x24
 80059f2:	2320      	movs	r3, #32
 80059f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80059fc:	2330      	movs	r3, #48	; 0x30
 80059fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005ba8 <_svfiprintf_r+0x1ec>
 8005a02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a06:	f04f 0901 	mov.w	r9, #1
 8005a0a:	4623      	mov	r3, r4
 8005a0c:	469a      	mov	sl, r3
 8005a0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a12:	b10a      	cbz	r2, 8005a18 <_svfiprintf_r+0x5c>
 8005a14:	2a25      	cmp	r2, #37	; 0x25
 8005a16:	d1f9      	bne.n	8005a0c <_svfiprintf_r+0x50>
 8005a18:	ebba 0b04 	subs.w	fp, sl, r4
 8005a1c:	d00b      	beq.n	8005a36 <_svfiprintf_r+0x7a>
 8005a1e:	465b      	mov	r3, fp
 8005a20:	4622      	mov	r2, r4
 8005a22:	4629      	mov	r1, r5
 8005a24:	4638      	mov	r0, r7
 8005a26:	f7ff ff6d 	bl	8005904 <__ssputs_r>
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	f000 80aa 	beq.w	8005b84 <_svfiprintf_r+0x1c8>
 8005a30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a32:	445a      	add	r2, fp
 8005a34:	9209      	str	r2, [sp, #36]	; 0x24
 8005a36:	f89a 3000 	ldrb.w	r3, [sl]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 80a2 	beq.w	8005b84 <_svfiprintf_r+0x1c8>
 8005a40:	2300      	movs	r3, #0
 8005a42:	f04f 32ff 	mov.w	r2, #4294967295
 8005a46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a4a:	f10a 0a01 	add.w	sl, sl, #1
 8005a4e:	9304      	str	r3, [sp, #16]
 8005a50:	9307      	str	r3, [sp, #28]
 8005a52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a56:	931a      	str	r3, [sp, #104]	; 0x68
 8005a58:	4654      	mov	r4, sl
 8005a5a:	2205      	movs	r2, #5
 8005a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a60:	4851      	ldr	r0, [pc, #324]	; (8005ba8 <_svfiprintf_r+0x1ec>)
 8005a62:	f7fa fbd5 	bl	8000210 <memchr>
 8005a66:	9a04      	ldr	r2, [sp, #16]
 8005a68:	b9d8      	cbnz	r0, 8005aa2 <_svfiprintf_r+0xe6>
 8005a6a:	06d0      	lsls	r0, r2, #27
 8005a6c:	bf44      	itt	mi
 8005a6e:	2320      	movmi	r3, #32
 8005a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a74:	0711      	lsls	r1, r2, #28
 8005a76:	bf44      	itt	mi
 8005a78:	232b      	movmi	r3, #43	; 0x2b
 8005a7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a82:	2b2a      	cmp	r3, #42	; 0x2a
 8005a84:	d015      	beq.n	8005ab2 <_svfiprintf_r+0xf6>
 8005a86:	9a07      	ldr	r2, [sp, #28]
 8005a88:	4654      	mov	r4, sl
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	f04f 0c0a 	mov.w	ip, #10
 8005a90:	4621      	mov	r1, r4
 8005a92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a96:	3b30      	subs	r3, #48	; 0x30
 8005a98:	2b09      	cmp	r3, #9
 8005a9a:	d94e      	bls.n	8005b3a <_svfiprintf_r+0x17e>
 8005a9c:	b1b0      	cbz	r0, 8005acc <_svfiprintf_r+0x110>
 8005a9e:	9207      	str	r2, [sp, #28]
 8005aa0:	e014      	b.n	8005acc <_svfiprintf_r+0x110>
 8005aa2:	eba0 0308 	sub.w	r3, r0, r8
 8005aa6:	fa09 f303 	lsl.w	r3, r9, r3
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	9304      	str	r3, [sp, #16]
 8005aae:	46a2      	mov	sl, r4
 8005ab0:	e7d2      	b.n	8005a58 <_svfiprintf_r+0x9c>
 8005ab2:	9b03      	ldr	r3, [sp, #12]
 8005ab4:	1d19      	adds	r1, r3, #4
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	9103      	str	r1, [sp, #12]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	bfbb      	ittet	lt
 8005abe:	425b      	neglt	r3, r3
 8005ac0:	f042 0202 	orrlt.w	r2, r2, #2
 8005ac4:	9307      	strge	r3, [sp, #28]
 8005ac6:	9307      	strlt	r3, [sp, #28]
 8005ac8:	bfb8      	it	lt
 8005aca:	9204      	strlt	r2, [sp, #16]
 8005acc:	7823      	ldrb	r3, [r4, #0]
 8005ace:	2b2e      	cmp	r3, #46	; 0x2e
 8005ad0:	d10c      	bne.n	8005aec <_svfiprintf_r+0x130>
 8005ad2:	7863      	ldrb	r3, [r4, #1]
 8005ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8005ad6:	d135      	bne.n	8005b44 <_svfiprintf_r+0x188>
 8005ad8:	9b03      	ldr	r3, [sp, #12]
 8005ada:	1d1a      	adds	r2, r3, #4
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	9203      	str	r2, [sp, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	bfb8      	it	lt
 8005ae4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ae8:	3402      	adds	r4, #2
 8005aea:	9305      	str	r3, [sp, #20]
 8005aec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005bb8 <_svfiprintf_r+0x1fc>
 8005af0:	7821      	ldrb	r1, [r4, #0]
 8005af2:	2203      	movs	r2, #3
 8005af4:	4650      	mov	r0, sl
 8005af6:	f7fa fb8b 	bl	8000210 <memchr>
 8005afa:	b140      	cbz	r0, 8005b0e <_svfiprintf_r+0x152>
 8005afc:	2340      	movs	r3, #64	; 0x40
 8005afe:	eba0 000a 	sub.w	r0, r0, sl
 8005b02:	fa03 f000 	lsl.w	r0, r3, r0
 8005b06:	9b04      	ldr	r3, [sp, #16]
 8005b08:	4303      	orrs	r3, r0
 8005b0a:	3401      	adds	r4, #1
 8005b0c:	9304      	str	r3, [sp, #16]
 8005b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b12:	4826      	ldr	r0, [pc, #152]	; (8005bac <_svfiprintf_r+0x1f0>)
 8005b14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b18:	2206      	movs	r2, #6
 8005b1a:	f7fa fb79 	bl	8000210 <memchr>
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	d038      	beq.n	8005b94 <_svfiprintf_r+0x1d8>
 8005b22:	4b23      	ldr	r3, [pc, #140]	; (8005bb0 <_svfiprintf_r+0x1f4>)
 8005b24:	bb1b      	cbnz	r3, 8005b6e <_svfiprintf_r+0x1b2>
 8005b26:	9b03      	ldr	r3, [sp, #12]
 8005b28:	3307      	adds	r3, #7
 8005b2a:	f023 0307 	bic.w	r3, r3, #7
 8005b2e:	3308      	adds	r3, #8
 8005b30:	9303      	str	r3, [sp, #12]
 8005b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b34:	4433      	add	r3, r6
 8005b36:	9309      	str	r3, [sp, #36]	; 0x24
 8005b38:	e767      	b.n	8005a0a <_svfiprintf_r+0x4e>
 8005b3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b3e:	460c      	mov	r4, r1
 8005b40:	2001      	movs	r0, #1
 8005b42:	e7a5      	b.n	8005a90 <_svfiprintf_r+0xd4>
 8005b44:	2300      	movs	r3, #0
 8005b46:	3401      	adds	r4, #1
 8005b48:	9305      	str	r3, [sp, #20]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	f04f 0c0a 	mov.w	ip, #10
 8005b50:	4620      	mov	r0, r4
 8005b52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b56:	3a30      	subs	r2, #48	; 0x30
 8005b58:	2a09      	cmp	r2, #9
 8005b5a:	d903      	bls.n	8005b64 <_svfiprintf_r+0x1a8>
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0c5      	beq.n	8005aec <_svfiprintf_r+0x130>
 8005b60:	9105      	str	r1, [sp, #20]
 8005b62:	e7c3      	b.n	8005aec <_svfiprintf_r+0x130>
 8005b64:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b68:	4604      	mov	r4, r0
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e7f0      	b.n	8005b50 <_svfiprintf_r+0x194>
 8005b6e:	ab03      	add	r3, sp, #12
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	462a      	mov	r2, r5
 8005b74:	4b0f      	ldr	r3, [pc, #60]	; (8005bb4 <_svfiprintf_r+0x1f8>)
 8005b76:	a904      	add	r1, sp, #16
 8005b78:	4638      	mov	r0, r7
 8005b7a:	f3af 8000 	nop.w
 8005b7e:	1c42      	adds	r2, r0, #1
 8005b80:	4606      	mov	r6, r0
 8005b82:	d1d6      	bne.n	8005b32 <_svfiprintf_r+0x176>
 8005b84:	89ab      	ldrh	r3, [r5, #12]
 8005b86:	065b      	lsls	r3, r3, #25
 8005b88:	f53f af2c 	bmi.w	80059e4 <_svfiprintf_r+0x28>
 8005b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b8e:	b01d      	add	sp, #116	; 0x74
 8005b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b94:	ab03      	add	r3, sp, #12
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	462a      	mov	r2, r5
 8005b9a:	4b06      	ldr	r3, [pc, #24]	; (8005bb4 <_svfiprintf_r+0x1f8>)
 8005b9c:	a904      	add	r1, sp, #16
 8005b9e:	4638      	mov	r0, r7
 8005ba0:	f000 f87a 	bl	8005c98 <_printf_i>
 8005ba4:	e7eb      	b.n	8005b7e <_svfiprintf_r+0x1c2>
 8005ba6:	bf00      	nop
 8005ba8:	08007f30 	.word	0x08007f30
 8005bac:	08007f3a 	.word	0x08007f3a
 8005bb0:	00000000 	.word	0x00000000
 8005bb4:	08005905 	.word	0x08005905
 8005bb8:	08007f36 	.word	0x08007f36

08005bbc <_printf_common>:
 8005bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc0:	4616      	mov	r6, r2
 8005bc2:	4699      	mov	r9, r3
 8005bc4:	688a      	ldr	r2, [r1, #8]
 8005bc6:	690b      	ldr	r3, [r1, #16]
 8005bc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	bfb8      	it	lt
 8005bd0:	4613      	movlt	r3, r2
 8005bd2:	6033      	str	r3, [r6, #0]
 8005bd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bd8:	4607      	mov	r7, r0
 8005bda:	460c      	mov	r4, r1
 8005bdc:	b10a      	cbz	r2, 8005be2 <_printf_common+0x26>
 8005bde:	3301      	adds	r3, #1
 8005be0:	6033      	str	r3, [r6, #0]
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	0699      	lsls	r1, r3, #26
 8005be6:	bf42      	ittt	mi
 8005be8:	6833      	ldrmi	r3, [r6, #0]
 8005bea:	3302      	addmi	r3, #2
 8005bec:	6033      	strmi	r3, [r6, #0]
 8005bee:	6825      	ldr	r5, [r4, #0]
 8005bf0:	f015 0506 	ands.w	r5, r5, #6
 8005bf4:	d106      	bne.n	8005c04 <_printf_common+0x48>
 8005bf6:	f104 0a19 	add.w	sl, r4, #25
 8005bfa:	68e3      	ldr	r3, [r4, #12]
 8005bfc:	6832      	ldr	r2, [r6, #0]
 8005bfe:	1a9b      	subs	r3, r3, r2
 8005c00:	42ab      	cmp	r3, r5
 8005c02:	dc26      	bgt.n	8005c52 <_printf_common+0x96>
 8005c04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c08:	1e13      	subs	r3, r2, #0
 8005c0a:	6822      	ldr	r2, [r4, #0]
 8005c0c:	bf18      	it	ne
 8005c0e:	2301      	movne	r3, #1
 8005c10:	0692      	lsls	r2, r2, #26
 8005c12:	d42b      	bmi.n	8005c6c <_printf_common+0xb0>
 8005c14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c18:	4649      	mov	r1, r9
 8005c1a:	4638      	mov	r0, r7
 8005c1c:	47c0      	blx	r8
 8005c1e:	3001      	adds	r0, #1
 8005c20:	d01e      	beq.n	8005c60 <_printf_common+0xa4>
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	68e5      	ldr	r5, [r4, #12]
 8005c26:	6832      	ldr	r2, [r6, #0]
 8005c28:	f003 0306 	and.w	r3, r3, #6
 8005c2c:	2b04      	cmp	r3, #4
 8005c2e:	bf08      	it	eq
 8005c30:	1aad      	subeq	r5, r5, r2
 8005c32:	68a3      	ldr	r3, [r4, #8]
 8005c34:	6922      	ldr	r2, [r4, #16]
 8005c36:	bf0c      	ite	eq
 8005c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c3c:	2500      	movne	r5, #0
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	bfc4      	itt	gt
 8005c42:	1a9b      	subgt	r3, r3, r2
 8005c44:	18ed      	addgt	r5, r5, r3
 8005c46:	2600      	movs	r6, #0
 8005c48:	341a      	adds	r4, #26
 8005c4a:	42b5      	cmp	r5, r6
 8005c4c:	d11a      	bne.n	8005c84 <_printf_common+0xc8>
 8005c4e:	2000      	movs	r0, #0
 8005c50:	e008      	b.n	8005c64 <_printf_common+0xa8>
 8005c52:	2301      	movs	r3, #1
 8005c54:	4652      	mov	r2, sl
 8005c56:	4649      	mov	r1, r9
 8005c58:	4638      	mov	r0, r7
 8005c5a:	47c0      	blx	r8
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	d103      	bne.n	8005c68 <_printf_common+0xac>
 8005c60:	f04f 30ff 	mov.w	r0, #4294967295
 8005c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c68:	3501      	adds	r5, #1
 8005c6a:	e7c6      	b.n	8005bfa <_printf_common+0x3e>
 8005c6c:	18e1      	adds	r1, r4, r3
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	2030      	movs	r0, #48	; 0x30
 8005c72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c76:	4422      	add	r2, r4
 8005c78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c80:	3302      	adds	r3, #2
 8005c82:	e7c7      	b.n	8005c14 <_printf_common+0x58>
 8005c84:	2301      	movs	r3, #1
 8005c86:	4622      	mov	r2, r4
 8005c88:	4649      	mov	r1, r9
 8005c8a:	4638      	mov	r0, r7
 8005c8c:	47c0      	blx	r8
 8005c8e:	3001      	adds	r0, #1
 8005c90:	d0e6      	beq.n	8005c60 <_printf_common+0xa4>
 8005c92:	3601      	adds	r6, #1
 8005c94:	e7d9      	b.n	8005c4a <_printf_common+0x8e>
	...

08005c98 <_printf_i>:
 8005c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c9c:	7e0f      	ldrb	r7, [r1, #24]
 8005c9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ca0:	2f78      	cmp	r7, #120	; 0x78
 8005ca2:	4691      	mov	r9, r2
 8005ca4:	4680      	mov	r8, r0
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	469a      	mov	sl, r3
 8005caa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cae:	d807      	bhi.n	8005cc0 <_printf_i+0x28>
 8005cb0:	2f62      	cmp	r7, #98	; 0x62
 8005cb2:	d80a      	bhi.n	8005cca <_printf_i+0x32>
 8005cb4:	2f00      	cmp	r7, #0
 8005cb6:	f000 80d8 	beq.w	8005e6a <_printf_i+0x1d2>
 8005cba:	2f58      	cmp	r7, #88	; 0x58
 8005cbc:	f000 80a3 	beq.w	8005e06 <_printf_i+0x16e>
 8005cc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cc8:	e03a      	b.n	8005d40 <_printf_i+0xa8>
 8005cca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cce:	2b15      	cmp	r3, #21
 8005cd0:	d8f6      	bhi.n	8005cc0 <_printf_i+0x28>
 8005cd2:	a101      	add	r1, pc, #4	; (adr r1, 8005cd8 <_printf_i+0x40>)
 8005cd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cd8:	08005d31 	.word	0x08005d31
 8005cdc:	08005d45 	.word	0x08005d45
 8005ce0:	08005cc1 	.word	0x08005cc1
 8005ce4:	08005cc1 	.word	0x08005cc1
 8005ce8:	08005cc1 	.word	0x08005cc1
 8005cec:	08005cc1 	.word	0x08005cc1
 8005cf0:	08005d45 	.word	0x08005d45
 8005cf4:	08005cc1 	.word	0x08005cc1
 8005cf8:	08005cc1 	.word	0x08005cc1
 8005cfc:	08005cc1 	.word	0x08005cc1
 8005d00:	08005cc1 	.word	0x08005cc1
 8005d04:	08005e51 	.word	0x08005e51
 8005d08:	08005d75 	.word	0x08005d75
 8005d0c:	08005e33 	.word	0x08005e33
 8005d10:	08005cc1 	.word	0x08005cc1
 8005d14:	08005cc1 	.word	0x08005cc1
 8005d18:	08005e73 	.word	0x08005e73
 8005d1c:	08005cc1 	.word	0x08005cc1
 8005d20:	08005d75 	.word	0x08005d75
 8005d24:	08005cc1 	.word	0x08005cc1
 8005d28:	08005cc1 	.word	0x08005cc1
 8005d2c:	08005e3b 	.word	0x08005e3b
 8005d30:	682b      	ldr	r3, [r5, #0]
 8005d32:	1d1a      	adds	r2, r3, #4
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	602a      	str	r2, [r5, #0]
 8005d38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d40:	2301      	movs	r3, #1
 8005d42:	e0a3      	b.n	8005e8c <_printf_i+0x1f4>
 8005d44:	6820      	ldr	r0, [r4, #0]
 8005d46:	6829      	ldr	r1, [r5, #0]
 8005d48:	0606      	lsls	r6, r0, #24
 8005d4a:	f101 0304 	add.w	r3, r1, #4
 8005d4e:	d50a      	bpl.n	8005d66 <_printf_i+0xce>
 8005d50:	680e      	ldr	r6, [r1, #0]
 8005d52:	602b      	str	r3, [r5, #0]
 8005d54:	2e00      	cmp	r6, #0
 8005d56:	da03      	bge.n	8005d60 <_printf_i+0xc8>
 8005d58:	232d      	movs	r3, #45	; 0x2d
 8005d5a:	4276      	negs	r6, r6
 8005d5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d60:	485e      	ldr	r0, [pc, #376]	; (8005edc <_printf_i+0x244>)
 8005d62:	230a      	movs	r3, #10
 8005d64:	e019      	b.n	8005d9a <_printf_i+0x102>
 8005d66:	680e      	ldr	r6, [r1, #0]
 8005d68:	602b      	str	r3, [r5, #0]
 8005d6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d6e:	bf18      	it	ne
 8005d70:	b236      	sxthne	r6, r6
 8005d72:	e7ef      	b.n	8005d54 <_printf_i+0xbc>
 8005d74:	682b      	ldr	r3, [r5, #0]
 8005d76:	6820      	ldr	r0, [r4, #0]
 8005d78:	1d19      	adds	r1, r3, #4
 8005d7a:	6029      	str	r1, [r5, #0]
 8005d7c:	0601      	lsls	r1, r0, #24
 8005d7e:	d501      	bpl.n	8005d84 <_printf_i+0xec>
 8005d80:	681e      	ldr	r6, [r3, #0]
 8005d82:	e002      	b.n	8005d8a <_printf_i+0xf2>
 8005d84:	0646      	lsls	r6, r0, #25
 8005d86:	d5fb      	bpl.n	8005d80 <_printf_i+0xe8>
 8005d88:	881e      	ldrh	r6, [r3, #0]
 8005d8a:	4854      	ldr	r0, [pc, #336]	; (8005edc <_printf_i+0x244>)
 8005d8c:	2f6f      	cmp	r7, #111	; 0x6f
 8005d8e:	bf0c      	ite	eq
 8005d90:	2308      	moveq	r3, #8
 8005d92:	230a      	movne	r3, #10
 8005d94:	2100      	movs	r1, #0
 8005d96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d9a:	6865      	ldr	r5, [r4, #4]
 8005d9c:	60a5      	str	r5, [r4, #8]
 8005d9e:	2d00      	cmp	r5, #0
 8005da0:	bfa2      	ittt	ge
 8005da2:	6821      	ldrge	r1, [r4, #0]
 8005da4:	f021 0104 	bicge.w	r1, r1, #4
 8005da8:	6021      	strge	r1, [r4, #0]
 8005daa:	b90e      	cbnz	r6, 8005db0 <_printf_i+0x118>
 8005dac:	2d00      	cmp	r5, #0
 8005dae:	d04d      	beq.n	8005e4c <_printf_i+0x1b4>
 8005db0:	4615      	mov	r5, r2
 8005db2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005db6:	fb03 6711 	mls	r7, r3, r1, r6
 8005dba:	5dc7      	ldrb	r7, [r0, r7]
 8005dbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005dc0:	4637      	mov	r7, r6
 8005dc2:	42bb      	cmp	r3, r7
 8005dc4:	460e      	mov	r6, r1
 8005dc6:	d9f4      	bls.n	8005db2 <_printf_i+0x11a>
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	d10b      	bne.n	8005de4 <_printf_i+0x14c>
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	07de      	lsls	r6, r3, #31
 8005dd0:	d508      	bpl.n	8005de4 <_printf_i+0x14c>
 8005dd2:	6923      	ldr	r3, [r4, #16]
 8005dd4:	6861      	ldr	r1, [r4, #4]
 8005dd6:	4299      	cmp	r1, r3
 8005dd8:	bfde      	ittt	le
 8005dda:	2330      	movle	r3, #48	; 0x30
 8005ddc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005de0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005de4:	1b52      	subs	r2, r2, r5
 8005de6:	6122      	str	r2, [r4, #16]
 8005de8:	f8cd a000 	str.w	sl, [sp]
 8005dec:	464b      	mov	r3, r9
 8005dee:	aa03      	add	r2, sp, #12
 8005df0:	4621      	mov	r1, r4
 8005df2:	4640      	mov	r0, r8
 8005df4:	f7ff fee2 	bl	8005bbc <_printf_common>
 8005df8:	3001      	adds	r0, #1
 8005dfa:	d14c      	bne.n	8005e96 <_printf_i+0x1fe>
 8005dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005e00:	b004      	add	sp, #16
 8005e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e06:	4835      	ldr	r0, [pc, #212]	; (8005edc <_printf_i+0x244>)
 8005e08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e0c:	6829      	ldr	r1, [r5, #0]
 8005e0e:	6823      	ldr	r3, [r4, #0]
 8005e10:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e14:	6029      	str	r1, [r5, #0]
 8005e16:	061d      	lsls	r5, r3, #24
 8005e18:	d514      	bpl.n	8005e44 <_printf_i+0x1ac>
 8005e1a:	07df      	lsls	r7, r3, #31
 8005e1c:	bf44      	itt	mi
 8005e1e:	f043 0320 	orrmi.w	r3, r3, #32
 8005e22:	6023      	strmi	r3, [r4, #0]
 8005e24:	b91e      	cbnz	r6, 8005e2e <_printf_i+0x196>
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	f023 0320 	bic.w	r3, r3, #32
 8005e2c:	6023      	str	r3, [r4, #0]
 8005e2e:	2310      	movs	r3, #16
 8005e30:	e7b0      	b.n	8005d94 <_printf_i+0xfc>
 8005e32:	6823      	ldr	r3, [r4, #0]
 8005e34:	f043 0320 	orr.w	r3, r3, #32
 8005e38:	6023      	str	r3, [r4, #0]
 8005e3a:	2378      	movs	r3, #120	; 0x78
 8005e3c:	4828      	ldr	r0, [pc, #160]	; (8005ee0 <_printf_i+0x248>)
 8005e3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e42:	e7e3      	b.n	8005e0c <_printf_i+0x174>
 8005e44:	0659      	lsls	r1, r3, #25
 8005e46:	bf48      	it	mi
 8005e48:	b2b6      	uxthmi	r6, r6
 8005e4a:	e7e6      	b.n	8005e1a <_printf_i+0x182>
 8005e4c:	4615      	mov	r5, r2
 8005e4e:	e7bb      	b.n	8005dc8 <_printf_i+0x130>
 8005e50:	682b      	ldr	r3, [r5, #0]
 8005e52:	6826      	ldr	r6, [r4, #0]
 8005e54:	6961      	ldr	r1, [r4, #20]
 8005e56:	1d18      	adds	r0, r3, #4
 8005e58:	6028      	str	r0, [r5, #0]
 8005e5a:	0635      	lsls	r5, r6, #24
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	d501      	bpl.n	8005e64 <_printf_i+0x1cc>
 8005e60:	6019      	str	r1, [r3, #0]
 8005e62:	e002      	b.n	8005e6a <_printf_i+0x1d2>
 8005e64:	0670      	lsls	r0, r6, #25
 8005e66:	d5fb      	bpl.n	8005e60 <_printf_i+0x1c8>
 8005e68:	8019      	strh	r1, [r3, #0]
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	6123      	str	r3, [r4, #16]
 8005e6e:	4615      	mov	r5, r2
 8005e70:	e7ba      	b.n	8005de8 <_printf_i+0x150>
 8005e72:	682b      	ldr	r3, [r5, #0]
 8005e74:	1d1a      	adds	r2, r3, #4
 8005e76:	602a      	str	r2, [r5, #0]
 8005e78:	681d      	ldr	r5, [r3, #0]
 8005e7a:	6862      	ldr	r2, [r4, #4]
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	4628      	mov	r0, r5
 8005e80:	f7fa f9c6 	bl	8000210 <memchr>
 8005e84:	b108      	cbz	r0, 8005e8a <_printf_i+0x1f2>
 8005e86:	1b40      	subs	r0, r0, r5
 8005e88:	6060      	str	r0, [r4, #4]
 8005e8a:	6863      	ldr	r3, [r4, #4]
 8005e8c:	6123      	str	r3, [r4, #16]
 8005e8e:	2300      	movs	r3, #0
 8005e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e94:	e7a8      	b.n	8005de8 <_printf_i+0x150>
 8005e96:	6923      	ldr	r3, [r4, #16]
 8005e98:	462a      	mov	r2, r5
 8005e9a:	4649      	mov	r1, r9
 8005e9c:	4640      	mov	r0, r8
 8005e9e:	47d0      	blx	sl
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d0ab      	beq.n	8005dfc <_printf_i+0x164>
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	079b      	lsls	r3, r3, #30
 8005ea8:	d413      	bmi.n	8005ed2 <_printf_i+0x23a>
 8005eaa:	68e0      	ldr	r0, [r4, #12]
 8005eac:	9b03      	ldr	r3, [sp, #12]
 8005eae:	4298      	cmp	r0, r3
 8005eb0:	bfb8      	it	lt
 8005eb2:	4618      	movlt	r0, r3
 8005eb4:	e7a4      	b.n	8005e00 <_printf_i+0x168>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	4632      	mov	r2, r6
 8005eba:	4649      	mov	r1, r9
 8005ebc:	4640      	mov	r0, r8
 8005ebe:	47d0      	blx	sl
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d09b      	beq.n	8005dfc <_printf_i+0x164>
 8005ec4:	3501      	adds	r5, #1
 8005ec6:	68e3      	ldr	r3, [r4, #12]
 8005ec8:	9903      	ldr	r1, [sp, #12]
 8005eca:	1a5b      	subs	r3, r3, r1
 8005ecc:	42ab      	cmp	r3, r5
 8005ece:	dcf2      	bgt.n	8005eb6 <_printf_i+0x21e>
 8005ed0:	e7eb      	b.n	8005eaa <_printf_i+0x212>
 8005ed2:	2500      	movs	r5, #0
 8005ed4:	f104 0619 	add.w	r6, r4, #25
 8005ed8:	e7f5      	b.n	8005ec6 <_printf_i+0x22e>
 8005eda:	bf00      	nop
 8005edc:	08007f41 	.word	0x08007f41
 8005ee0:	08007f52 	.word	0x08007f52

08005ee4 <memmove>:
 8005ee4:	4288      	cmp	r0, r1
 8005ee6:	b510      	push	{r4, lr}
 8005ee8:	eb01 0402 	add.w	r4, r1, r2
 8005eec:	d902      	bls.n	8005ef4 <memmove+0x10>
 8005eee:	4284      	cmp	r4, r0
 8005ef0:	4623      	mov	r3, r4
 8005ef2:	d807      	bhi.n	8005f04 <memmove+0x20>
 8005ef4:	1e43      	subs	r3, r0, #1
 8005ef6:	42a1      	cmp	r1, r4
 8005ef8:	d008      	beq.n	8005f0c <memmove+0x28>
 8005efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005efe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f02:	e7f8      	b.n	8005ef6 <memmove+0x12>
 8005f04:	4402      	add	r2, r0
 8005f06:	4601      	mov	r1, r0
 8005f08:	428a      	cmp	r2, r1
 8005f0a:	d100      	bne.n	8005f0e <memmove+0x2a>
 8005f0c:	bd10      	pop	{r4, pc}
 8005f0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f16:	e7f7      	b.n	8005f08 <memmove+0x24>

08005f18 <_free_r>:
 8005f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f1a:	2900      	cmp	r1, #0
 8005f1c:	d044      	beq.n	8005fa8 <_free_r+0x90>
 8005f1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f22:	9001      	str	r0, [sp, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f1a1 0404 	sub.w	r4, r1, #4
 8005f2a:	bfb8      	it	lt
 8005f2c:	18e4      	addlt	r4, r4, r3
 8005f2e:	f000 f913 	bl	8006158 <__malloc_lock>
 8005f32:	4a1e      	ldr	r2, [pc, #120]	; (8005fac <_free_r+0x94>)
 8005f34:	9801      	ldr	r0, [sp, #4]
 8005f36:	6813      	ldr	r3, [r2, #0]
 8005f38:	b933      	cbnz	r3, 8005f48 <_free_r+0x30>
 8005f3a:	6063      	str	r3, [r4, #4]
 8005f3c:	6014      	str	r4, [r2, #0]
 8005f3e:	b003      	add	sp, #12
 8005f40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f44:	f000 b90e 	b.w	8006164 <__malloc_unlock>
 8005f48:	42a3      	cmp	r3, r4
 8005f4a:	d908      	bls.n	8005f5e <_free_r+0x46>
 8005f4c:	6825      	ldr	r5, [r4, #0]
 8005f4e:	1961      	adds	r1, r4, r5
 8005f50:	428b      	cmp	r3, r1
 8005f52:	bf01      	itttt	eq
 8005f54:	6819      	ldreq	r1, [r3, #0]
 8005f56:	685b      	ldreq	r3, [r3, #4]
 8005f58:	1949      	addeq	r1, r1, r5
 8005f5a:	6021      	streq	r1, [r4, #0]
 8005f5c:	e7ed      	b.n	8005f3a <_free_r+0x22>
 8005f5e:	461a      	mov	r2, r3
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	b10b      	cbz	r3, 8005f68 <_free_r+0x50>
 8005f64:	42a3      	cmp	r3, r4
 8005f66:	d9fa      	bls.n	8005f5e <_free_r+0x46>
 8005f68:	6811      	ldr	r1, [r2, #0]
 8005f6a:	1855      	adds	r5, r2, r1
 8005f6c:	42a5      	cmp	r5, r4
 8005f6e:	d10b      	bne.n	8005f88 <_free_r+0x70>
 8005f70:	6824      	ldr	r4, [r4, #0]
 8005f72:	4421      	add	r1, r4
 8005f74:	1854      	adds	r4, r2, r1
 8005f76:	42a3      	cmp	r3, r4
 8005f78:	6011      	str	r1, [r2, #0]
 8005f7a:	d1e0      	bne.n	8005f3e <_free_r+0x26>
 8005f7c:	681c      	ldr	r4, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	6053      	str	r3, [r2, #4]
 8005f82:	4421      	add	r1, r4
 8005f84:	6011      	str	r1, [r2, #0]
 8005f86:	e7da      	b.n	8005f3e <_free_r+0x26>
 8005f88:	d902      	bls.n	8005f90 <_free_r+0x78>
 8005f8a:	230c      	movs	r3, #12
 8005f8c:	6003      	str	r3, [r0, #0]
 8005f8e:	e7d6      	b.n	8005f3e <_free_r+0x26>
 8005f90:	6825      	ldr	r5, [r4, #0]
 8005f92:	1961      	adds	r1, r4, r5
 8005f94:	428b      	cmp	r3, r1
 8005f96:	bf04      	itt	eq
 8005f98:	6819      	ldreq	r1, [r3, #0]
 8005f9a:	685b      	ldreq	r3, [r3, #4]
 8005f9c:	6063      	str	r3, [r4, #4]
 8005f9e:	bf04      	itt	eq
 8005fa0:	1949      	addeq	r1, r1, r5
 8005fa2:	6021      	streq	r1, [r4, #0]
 8005fa4:	6054      	str	r4, [r2, #4]
 8005fa6:	e7ca      	b.n	8005f3e <_free_r+0x26>
 8005fa8:	b003      	add	sp, #12
 8005faa:	bd30      	pop	{r4, r5, pc}
 8005fac:	20000d14 	.word	0x20000d14

08005fb0 <sbrk_aligned>:
 8005fb0:	b570      	push	{r4, r5, r6, lr}
 8005fb2:	4e0e      	ldr	r6, [pc, #56]	; (8005fec <sbrk_aligned+0x3c>)
 8005fb4:	460c      	mov	r4, r1
 8005fb6:	6831      	ldr	r1, [r6, #0]
 8005fb8:	4605      	mov	r5, r0
 8005fba:	b911      	cbnz	r1, 8005fc2 <sbrk_aligned+0x12>
 8005fbc:	f000 f8bc 	bl	8006138 <_sbrk_r>
 8005fc0:	6030      	str	r0, [r6, #0]
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f000 f8b7 	bl	8006138 <_sbrk_r>
 8005fca:	1c43      	adds	r3, r0, #1
 8005fcc:	d00a      	beq.n	8005fe4 <sbrk_aligned+0x34>
 8005fce:	1cc4      	adds	r4, r0, #3
 8005fd0:	f024 0403 	bic.w	r4, r4, #3
 8005fd4:	42a0      	cmp	r0, r4
 8005fd6:	d007      	beq.n	8005fe8 <sbrk_aligned+0x38>
 8005fd8:	1a21      	subs	r1, r4, r0
 8005fda:	4628      	mov	r0, r5
 8005fdc:	f000 f8ac 	bl	8006138 <_sbrk_r>
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	d101      	bne.n	8005fe8 <sbrk_aligned+0x38>
 8005fe4:	f04f 34ff 	mov.w	r4, #4294967295
 8005fe8:	4620      	mov	r0, r4
 8005fea:	bd70      	pop	{r4, r5, r6, pc}
 8005fec:	20000d18 	.word	0x20000d18

08005ff0 <_malloc_r>:
 8005ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ff4:	1ccd      	adds	r5, r1, #3
 8005ff6:	f025 0503 	bic.w	r5, r5, #3
 8005ffa:	3508      	adds	r5, #8
 8005ffc:	2d0c      	cmp	r5, #12
 8005ffe:	bf38      	it	cc
 8006000:	250c      	movcc	r5, #12
 8006002:	2d00      	cmp	r5, #0
 8006004:	4607      	mov	r7, r0
 8006006:	db01      	blt.n	800600c <_malloc_r+0x1c>
 8006008:	42a9      	cmp	r1, r5
 800600a:	d905      	bls.n	8006018 <_malloc_r+0x28>
 800600c:	230c      	movs	r3, #12
 800600e:	603b      	str	r3, [r7, #0]
 8006010:	2600      	movs	r6, #0
 8006012:	4630      	mov	r0, r6
 8006014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006018:	4e2e      	ldr	r6, [pc, #184]	; (80060d4 <_malloc_r+0xe4>)
 800601a:	f000 f89d 	bl	8006158 <__malloc_lock>
 800601e:	6833      	ldr	r3, [r6, #0]
 8006020:	461c      	mov	r4, r3
 8006022:	bb34      	cbnz	r4, 8006072 <_malloc_r+0x82>
 8006024:	4629      	mov	r1, r5
 8006026:	4638      	mov	r0, r7
 8006028:	f7ff ffc2 	bl	8005fb0 <sbrk_aligned>
 800602c:	1c43      	adds	r3, r0, #1
 800602e:	4604      	mov	r4, r0
 8006030:	d14d      	bne.n	80060ce <_malloc_r+0xde>
 8006032:	6834      	ldr	r4, [r6, #0]
 8006034:	4626      	mov	r6, r4
 8006036:	2e00      	cmp	r6, #0
 8006038:	d140      	bne.n	80060bc <_malloc_r+0xcc>
 800603a:	6823      	ldr	r3, [r4, #0]
 800603c:	4631      	mov	r1, r6
 800603e:	4638      	mov	r0, r7
 8006040:	eb04 0803 	add.w	r8, r4, r3
 8006044:	f000 f878 	bl	8006138 <_sbrk_r>
 8006048:	4580      	cmp	r8, r0
 800604a:	d13a      	bne.n	80060c2 <_malloc_r+0xd2>
 800604c:	6821      	ldr	r1, [r4, #0]
 800604e:	3503      	adds	r5, #3
 8006050:	1a6d      	subs	r5, r5, r1
 8006052:	f025 0503 	bic.w	r5, r5, #3
 8006056:	3508      	adds	r5, #8
 8006058:	2d0c      	cmp	r5, #12
 800605a:	bf38      	it	cc
 800605c:	250c      	movcc	r5, #12
 800605e:	4629      	mov	r1, r5
 8006060:	4638      	mov	r0, r7
 8006062:	f7ff ffa5 	bl	8005fb0 <sbrk_aligned>
 8006066:	3001      	adds	r0, #1
 8006068:	d02b      	beq.n	80060c2 <_malloc_r+0xd2>
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	442b      	add	r3, r5
 800606e:	6023      	str	r3, [r4, #0]
 8006070:	e00e      	b.n	8006090 <_malloc_r+0xa0>
 8006072:	6822      	ldr	r2, [r4, #0]
 8006074:	1b52      	subs	r2, r2, r5
 8006076:	d41e      	bmi.n	80060b6 <_malloc_r+0xc6>
 8006078:	2a0b      	cmp	r2, #11
 800607a:	d916      	bls.n	80060aa <_malloc_r+0xba>
 800607c:	1961      	adds	r1, r4, r5
 800607e:	42a3      	cmp	r3, r4
 8006080:	6025      	str	r5, [r4, #0]
 8006082:	bf18      	it	ne
 8006084:	6059      	strne	r1, [r3, #4]
 8006086:	6863      	ldr	r3, [r4, #4]
 8006088:	bf08      	it	eq
 800608a:	6031      	streq	r1, [r6, #0]
 800608c:	5162      	str	r2, [r4, r5]
 800608e:	604b      	str	r3, [r1, #4]
 8006090:	4638      	mov	r0, r7
 8006092:	f104 060b 	add.w	r6, r4, #11
 8006096:	f000 f865 	bl	8006164 <__malloc_unlock>
 800609a:	f026 0607 	bic.w	r6, r6, #7
 800609e:	1d23      	adds	r3, r4, #4
 80060a0:	1af2      	subs	r2, r6, r3
 80060a2:	d0b6      	beq.n	8006012 <_malloc_r+0x22>
 80060a4:	1b9b      	subs	r3, r3, r6
 80060a6:	50a3      	str	r3, [r4, r2]
 80060a8:	e7b3      	b.n	8006012 <_malloc_r+0x22>
 80060aa:	6862      	ldr	r2, [r4, #4]
 80060ac:	42a3      	cmp	r3, r4
 80060ae:	bf0c      	ite	eq
 80060b0:	6032      	streq	r2, [r6, #0]
 80060b2:	605a      	strne	r2, [r3, #4]
 80060b4:	e7ec      	b.n	8006090 <_malloc_r+0xa0>
 80060b6:	4623      	mov	r3, r4
 80060b8:	6864      	ldr	r4, [r4, #4]
 80060ba:	e7b2      	b.n	8006022 <_malloc_r+0x32>
 80060bc:	4634      	mov	r4, r6
 80060be:	6876      	ldr	r6, [r6, #4]
 80060c0:	e7b9      	b.n	8006036 <_malloc_r+0x46>
 80060c2:	230c      	movs	r3, #12
 80060c4:	603b      	str	r3, [r7, #0]
 80060c6:	4638      	mov	r0, r7
 80060c8:	f000 f84c 	bl	8006164 <__malloc_unlock>
 80060cc:	e7a1      	b.n	8006012 <_malloc_r+0x22>
 80060ce:	6025      	str	r5, [r4, #0]
 80060d0:	e7de      	b.n	8006090 <_malloc_r+0xa0>
 80060d2:	bf00      	nop
 80060d4:	20000d14 	.word	0x20000d14

080060d8 <_realloc_r>:
 80060d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060dc:	4680      	mov	r8, r0
 80060de:	4614      	mov	r4, r2
 80060e0:	460e      	mov	r6, r1
 80060e2:	b921      	cbnz	r1, 80060ee <_realloc_r+0x16>
 80060e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060e8:	4611      	mov	r1, r2
 80060ea:	f7ff bf81 	b.w	8005ff0 <_malloc_r>
 80060ee:	b92a      	cbnz	r2, 80060fc <_realloc_r+0x24>
 80060f0:	f7ff ff12 	bl	8005f18 <_free_r>
 80060f4:	4625      	mov	r5, r4
 80060f6:	4628      	mov	r0, r5
 80060f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060fc:	f000 f838 	bl	8006170 <_malloc_usable_size_r>
 8006100:	4284      	cmp	r4, r0
 8006102:	4607      	mov	r7, r0
 8006104:	d802      	bhi.n	800610c <_realloc_r+0x34>
 8006106:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800610a:	d812      	bhi.n	8006132 <_realloc_r+0x5a>
 800610c:	4621      	mov	r1, r4
 800610e:	4640      	mov	r0, r8
 8006110:	f7ff ff6e 	bl	8005ff0 <_malloc_r>
 8006114:	4605      	mov	r5, r0
 8006116:	2800      	cmp	r0, #0
 8006118:	d0ed      	beq.n	80060f6 <_realloc_r+0x1e>
 800611a:	42bc      	cmp	r4, r7
 800611c:	4622      	mov	r2, r4
 800611e:	4631      	mov	r1, r6
 8006120:	bf28      	it	cs
 8006122:	463a      	movcs	r2, r7
 8006124:	f7ff fba4 	bl	8005870 <memcpy>
 8006128:	4631      	mov	r1, r6
 800612a:	4640      	mov	r0, r8
 800612c:	f7ff fef4 	bl	8005f18 <_free_r>
 8006130:	e7e1      	b.n	80060f6 <_realloc_r+0x1e>
 8006132:	4635      	mov	r5, r6
 8006134:	e7df      	b.n	80060f6 <_realloc_r+0x1e>
	...

08006138 <_sbrk_r>:
 8006138:	b538      	push	{r3, r4, r5, lr}
 800613a:	4d06      	ldr	r5, [pc, #24]	; (8006154 <_sbrk_r+0x1c>)
 800613c:	2300      	movs	r3, #0
 800613e:	4604      	mov	r4, r0
 8006140:	4608      	mov	r0, r1
 8006142:	602b      	str	r3, [r5, #0]
 8006144:	f7fb fa9e 	bl	8001684 <_sbrk>
 8006148:	1c43      	adds	r3, r0, #1
 800614a:	d102      	bne.n	8006152 <_sbrk_r+0x1a>
 800614c:	682b      	ldr	r3, [r5, #0]
 800614e:	b103      	cbz	r3, 8006152 <_sbrk_r+0x1a>
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	bd38      	pop	{r3, r4, r5, pc}
 8006154:	20000d1c 	.word	0x20000d1c

08006158 <__malloc_lock>:
 8006158:	4801      	ldr	r0, [pc, #4]	; (8006160 <__malloc_lock+0x8>)
 800615a:	f000 b811 	b.w	8006180 <__retarget_lock_acquire_recursive>
 800615e:	bf00      	nop
 8006160:	20000d20 	.word	0x20000d20

08006164 <__malloc_unlock>:
 8006164:	4801      	ldr	r0, [pc, #4]	; (800616c <__malloc_unlock+0x8>)
 8006166:	f000 b80c 	b.w	8006182 <__retarget_lock_release_recursive>
 800616a:	bf00      	nop
 800616c:	20000d20 	.word	0x20000d20

08006170 <_malloc_usable_size_r>:
 8006170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006174:	1f18      	subs	r0, r3, #4
 8006176:	2b00      	cmp	r3, #0
 8006178:	bfbc      	itt	lt
 800617a:	580b      	ldrlt	r3, [r1, r0]
 800617c:	18c0      	addlt	r0, r0, r3
 800617e:	4770      	bx	lr

08006180 <__retarget_lock_acquire_recursive>:
 8006180:	4770      	bx	lr

08006182 <__retarget_lock_release_recursive>:
 8006182:	4770      	bx	lr

08006184 <_init>:
 8006184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006186:	bf00      	nop
 8006188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800618a:	bc08      	pop	{r3}
 800618c:	469e      	mov	lr, r3
 800618e:	4770      	bx	lr

08006190 <_fini>:
 8006190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006192:	bf00      	nop
 8006194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006196:	bc08      	pop	{r3}
 8006198:	469e      	mov	lr, r3
 800619a:	4770      	bx	lr
