
OHMIO-FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000150a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005694  08015270  08015270  00025270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a904  0801a904  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  0801a904  0801a904  0002a904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a90c  0801a90c  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a90c  0801a90c  0002a90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a910  0801a910  0002a910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0801a914  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000ac  0801a9c0  000300ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000014c  0801aa60  0003014c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000ae74  200001ec  0801ab00  000301ec  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000b060  0801ab00  0003b060  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002c190  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006888  00000000  00000000  0005c3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f10  00000000  00000000  00062c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001dd8  00000000  00000000  00064b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00034bf7  00000000  00000000  00066920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00032330  00000000  00000000  0009b517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010a29c  00000000  00000000  000cd847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001d7ae3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008b38  00000000  00000000  001d7b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015258 	.word	0x08015258

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	08015258 	.word	0x08015258

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005b8:	f3bf 8f4f 	dsb	sy
}
 80005bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005be:	f3bf 8f6f 	isb	sy
}
 80005c2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005c4:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <SCB_EnableICache+0x48>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005cc:	f3bf 8f4f 	dsb	sy
}
 80005d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005d2:	f3bf 8f6f 	isb	sy
}
 80005d6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <SCB_EnableICache+0x48>)
 80005da:	695b      	ldr	r3, [r3, #20]
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <SCB_EnableICache+0x48>)
 80005de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005e4:	f3bf 8f4f 	dsb	sy
}
 80005e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ea:	f3bf 8f6f 	isb	sy
}
 80005ee:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000606:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <SCB_EnableDCache+0x84>)
 8000608:	2200      	movs	r2, #0
 800060a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800060e:	f3bf 8f4f 	dsb	sy
}
 8000612:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <SCB_EnableDCache+0x84>)
 8000616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800061a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	0b5b      	lsrs	r3, r3, #13
 8000620:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000624:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	08db      	lsrs	r3, r3, #3
 800062a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800062e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	015a      	lsls	r2, r3, #5
 8000634:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000638:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800063e:	4911      	ldr	r1, [pc, #68]	; (8000684 <SCB_EnableDCache+0x84>)
 8000640:	4313      	orrs	r3, r2
 8000642:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	1e5a      	subs	r2, r3, #1
 800064a:	60ba      	str	r2, [r7, #8]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1ef      	bne.n	8000630 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	1e5a      	subs	r2, r3, #1
 8000654:	60fa      	str	r2, [r7, #12]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1e5      	bne.n	8000626 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800065a:	f3bf 8f4f 	dsb	sy
}
 800065e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <SCB_EnableDCache+0x84>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <SCB_EnableDCache+0x84>)
 8000666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800066a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800066c:	f3bf 8f4f 	dsb	sy
}
 8000670:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000672:	f3bf 8f6f 	isb	sy
}
 8000676:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000678:	bf00      	nop
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000690:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000694:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	2b00      	cmp	r3, #0
 800069e:	d013      	beq.n	80006c8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006a4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80006a8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d00b      	beq.n	80006c8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006b0:	e000      	b.n	80006b4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80006b2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d0f9      	beq.n	80006b2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006be:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006c8:	687b      	ldr	r3, [r7, #4]
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b086      	sub	sp, #24
 80006da:	af00      	add	r7, sp, #0
 80006dc:	60f8      	str	r0, [r7, #12]
 80006de:	60b9      	str	r1, [r7, #8]
 80006e0:	607a      	str	r2, [r7, #4]
	int i =0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
	for (i=0; i<len; i++)
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
 80006ea:	e009      	b.n	8000700 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	1c5a      	adds	r2, r3, #1
 80006f0:	60ba      	str	r2, [r7, #8]
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ffc7 	bl	8000688 <ITM_SendChar>
	for (i=0; i<len; i++)
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	3301      	adds	r3, #1
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	697a      	ldr	r2, [r7, #20]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	429a      	cmp	r2, r3
 8000706:	dbf1      	blt.n	80006ec <_write+0x16>
	return len;
 8000708:	687b      	ldr	r3, [r7, #4]
}
 800070a:	4618      	mov	r0, r3
 800070c:	3718      	adds	r7, #24
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <main>:
static uint32_t last_arriba_time = 0; // keeps track of the last time "ARRIBA" was displayed
unsigned int analog_value_keypad;


int main(void)
{
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b08d      	sub	sp, #52	; 0x34
 8000718:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800071a:	f000 fbcb 	bl	8000eb4 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800071e:	f7ff ff49 	bl	80005b4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000722:	f7ff ff6d 	bl	8000600 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000726:	f002 f895 	bl	8002854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072a:	f000 f96b 	bl	8000a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072e:	f000 fb13 	bl	8000d58 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000732:	f000 fab3 	bl	8000c9c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000736:	f000 fae1 	bl	8000cfc <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 800073a:	f000 fa6f 	bl	8000c1c <MX_I2C2_Init>
  MX_ADC1_Init();
 800073e:	f000 f9c9 	bl	8000ad4 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000742:	f000 fa19 	bl	8000b78 <MX_ADC3_Init>
  MX_LWIP_Init();
 8000746:	f007 f80d 	bl	8007764 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 800074a:	f000 fbfb 	bl	8000f44 <ssd1306_Init>
  //INICIALIZAMOS EL SPLASH
  ssd1306_OhmioSplash();
 800074e:	f001 fc21 	bl	8001f94 <ssd1306_OhmioSplash>
  ssd1306_OhmioMenuPrincipal();
 8000752:	f001 fc2b 	bl	8001fac <ssd1306_OhmioMenuPrincipal>

  while (1)
  {
    /* USER CODE END WHILE */
	  //INICIALIZAMOS EL SPLASH
    ethernetif_input(&gnetif);
 8000756:	486c      	ldr	r0, [pc, #432]	; (8000908 <main+0x1f4>)
 8000758:	f007 f9b4 	bl	8007ac4 <ethernetif_input>
    sys_check_timeouts();
 800075c:	f00e fc9a 	bl	800f094 <sys_check_timeouts>

    ipaddr = netif_ip4_addr(&gnetif);
 8000760:	4b6a      	ldr	r3, [pc, #424]	; (800090c <main+0x1f8>)
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
    netmask = netif_ip4_netmask(&gnetif);
 8000764:	4b6a      	ldr	r3, [pc, #424]	; (8000910 <main+0x1fc>)
 8000766:	623b      	str	r3, [r7, #32]

// Convertir la dirección IP en una cadena de caracteres
sprintf(ip_str, "%d.%d.%d.%d", (ipaddr & 0xff), ((ipaddr >> 8) & 0xff), ((ipaddr >> 16) & 0xff), ((ipaddr >> 24) & 0xff));
 8000768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076a:	b2d9      	uxtb	r1, r3
 800076c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076e:	0a1b      	lsrs	r3, r3, #8
 8000770:	b2dc      	uxtb	r4, r3
 8000772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000774:	0c1b      	lsrs	r3, r3, #16
 8000776:	b2db      	uxtb	r3, r3
 8000778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800077a:	0e12      	lsrs	r2, r2, #24
 800077c:	f107 0010 	add.w	r0, r7, #16
 8000780:	9201      	str	r2, [sp, #4]
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	4623      	mov	r3, r4
 8000786:	460a      	mov	r2, r1
 8000788:	4962      	ldr	r1, [pc, #392]	; (8000914 <main+0x200>)
 800078a:	f013 fbb7 	bl	8013efc <siprintf>

// Convertir la máscara de subred en una cadena de caracteres
sprintf(netmask_str, "%d.%d.%d.%d", (netmask & 0xff), ((netmask >> 8) & 0xff), ((netmask >> 16) & 0xff), ((netmask >> 24) & 0xff));
 800078e:	6a3b      	ldr	r3, [r7, #32]
 8000790:	b2d9      	uxtb	r1, r3
 8000792:	6a3b      	ldr	r3, [r7, #32]
 8000794:	0a1b      	lsrs	r3, r3, #8
 8000796:	b2dc      	uxtb	r4, r3
 8000798:	6a3b      	ldr	r3, [r7, #32]
 800079a:	0c1b      	lsrs	r3, r3, #16
 800079c:	b2db      	uxtb	r3, r3
 800079e:	6a3a      	ldr	r2, [r7, #32]
 80007a0:	0e12      	lsrs	r2, r2, #24
 80007a2:	4638      	mov	r0, r7
 80007a4:	9201      	str	r2, [sp, #4]
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	4623      	mov	r3, r4
 80007aa:	460a      	mov	r2, r1
 80007ac:	4959      	ldr	r1, [pc, #356]	; (8000914 <main+0x200>)
 80007ae:	f013 fba5 	bl	8013efc <siprintf>

printf("IP");
 80007b2:	4859      	ldr	r0, [pc, #356]	; (8000918 <main+0x204>)
 80007b4:	f013 fb4c 	bl	8013e50 <iprintf>
printf("GATEWAY");
 80007b8:	4858      	ldr	r0, [pc, #352]	; (800091c <main+0x208>)
 80007ba:	f013 fb49 	bl	8013e50 <iprintf>


	  HAL_ADC_Start(&hadc3);
 80007be:	4858      	ldr	r0, [pc, #352]	; (8000920 <main+0x20c>)
 80007c0:	f002 f916 	bl	80029f0 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc3, 10)==HAL_OK){
 80007c4:	210a      	movs	r1, #10
 80007c6:	4856      	ldr	r0, [pc, #344]	; (8000920 <main+0x20c>)
 80007c8:	f002 fa14 	bl	8002bf4 <HAL_ADC_PollForConversion>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d112      	bne.n	80007f8 <main+0xe4>
		  analog_value_keypad=HAL_ADC_GetValue(&hadc3);
 80007d2:	4853      	ldr	r0, [pc, #332]	; (8000920 <main+0x20c>)
 80007d4:	f002 fa99 	bl	8002d0a <HAL_ADC_GetValue>
 80007d8:	4603      	mov	r3, r0
 80007da:	4a52      	ldr	r2, [pc, #328]	; (8000924 <main+0x210>)
 80007dc:	6013      	str	r3, [r2, #0]
		  ssd1306_DisplayAnalogValue(analog_value_keypad, indexMenu, screen, ip_str, netmask_str);
 80007de:	4b51      	ldr	r3, [pc, #324]	; (8000924 <main+0x210>)
 80007e0:	6818      	ldr	r0, [r3, #0]
 80007e2:	4b51      	ldr	r3, [pc, #324]	; (8000928 <main+0x214>)
 80007e4:	6819      	ldr	r1, [r3, #0]
 80007e6:	4b51      	ldr	r3, [pc, #324]	; (800092c <main+0x218>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	f107 0410 	add.w	r4, r7, #16
 80007ee:	463b      	mov	r3, r7
 80007f0:	9300      	str	r3, [sp, #0]
 80007f2:	4623      	mov	r3, r4
 80007f4:	f001 fb6e 	bl	8001ed4 <ssd1306_DisplayAnalogValue>
	  }

	  //Displacement vertical
	   if(analog_value_keypad >= 800 && analog_value_keypad <= 900){
 80007f8:	4b4a      	ldr	r3, [pc, #296]	; (8000924 <main+0x210>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000800:	d335      	bcc.n	800086e <main+0x15a>
 8000802:	4b48      	ldr	r3, [pc, #288]	; (8000924 <main+0x210>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800080a:	d830      	bhi.n	800086e <main+0x15a>
        if(screen==1){
 800080c:	4b47      	ldr	r3, [pc, #284]	; (800092c <main+0x218>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d10d      	bne.n	8000830 <main+0x11c>
          if (indexMenu==4){
 8000814:	4b44      	ldr	r3, [pc, #272]	; (8000928 <main+0x214>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b04      	cmp	r3, #4
 800081a:	d103      	bne.n	8000824 <main+0x110>
            indexMenu=0;
 800081c:	4b42      	ldr	r3, [pc, #264]	; (8000928 <main+0x214>)
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	e024      	b.n	800086e <main+0x15a>
          }
          else{
            indexMenu++;
 8000824:	4b40      	ldr	r3, [pc, #256]	; (8000928 <main+0x214>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	3301      	adds	r3, #1
 800082a:	4a3f      	ldr	r2, [pc, #252]	; (8000928 <main+0x214>)
 800082c:	6013      	str	r3, [r2, #0]
 800082e:	e01e      	b.n	800086e <main+0x15a>
          }
        }else if(screen==4){
 8000830:	4b3e      	ldr	r3, [pc, #248]	; (800092c <main+0x218>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b04      	cmp	r3, #4
 8000836:	d10d      	bne.n	8000854 <main+0x140>
          if (indexMenu==4){
 8000838:	4b3b      	ldr	r3, [pc, #236]	; (8000928 <main+0x214>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b04      	cmp	r3, #4
 800083e:	d103      	bne.n	8000848 <main+0x134>
            indexMenu=0;
 8000840:	4b39      	ldr	r3, [pc, #228]	; (8000928 <main+0x214>)
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	e012      	b.n	800086e <main+0x15a>
          }
          else{
            indexMenu++;
 8000848:	4b37      	ldr	r3, [pc, #220]	; (8000928 <main+0x214>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	3301      	adds	r3, #1
 800084e:	4a36      	ldr	r2, [pc, #216]	; (8000928 <main+0x214>)
 8000850:	6013      	str	r3, [r2, #0]
 8000852:	e00c      	b.n	800086e <main+0x15a>
          }
        }
        else{
          if (indexMenu==2){
 8000854:	4b34      	ldr	r3, [pc, #208]	; (8000928 <main+0x214>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b02      	cmp	r3, #2
 800085a:	d103      	bne.n	8000864 <main+0x150>
            indexMenu=0;
 800085c:	4b32      	ldr	r3, [pc, #200]	; (8000928 <main+0x214>)
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	e004      	b.n	800086e <main+0x15a>
          }
          else{
            indexMenu++;
 8000864:	4b30      	ldr	r3, [pc, #192]	; (8000928 <main+0x214>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	3301      	adds	r3, #1
 800086a:	4a2f      	ldr	r2, [pc, #188]	; (8000928 <main+0x214>)
 800086c:	6013      	str	r3, [r2, #0]
	   //screen=4 -> BROADCASt
     //screen=5 -> CLOUD



	      if(analog_value_keypad >= 0 && analog_value_keypad <= 100){
 800086e:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <main+0x210>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b64      	cmp	r3, #100	; 0x64
 8000874:	f200 80b8 	bhi.w	80009e8 <main+0x2d4>
			//Select
	    	//Menu Principal
			if(screen==0){
 8000878:	4b2c      	ldr	r3, [pc, #176]	; (800092c <main+0x218>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d125      	bne.n	80008cc <main+0x1b8>
				if(indexMenu==0){
 8000880:	4b29      	ldr	r3, [pc, #164]	; (8000928 <main+0x214>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d108      	bne.n	800089a <main+0x186>
					//option Dashboard
					screen=1;
 8000888:	4b28      	ldr	r3, [pc, #160]	; (800092c <main+0x218>)
 800088a:	2201      	movs	r2, #1
 800088c:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 800088e:	4b26      	ldr	r3, [pc, #152]	; (8000928 <main+0x214>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 8000894:	f000 fbe4 	bl	8001060 <ssd1306_UpdateScreen>
 8000898:	e018      	b.n	80008cc <main+0x1b8>
				}else if (indexMenu==1){
 800089a:	4b23      	ldr	r3, [pc, #140]	; (8000928 <main+0x214>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d108      	bne.n	80008b4 <main+0x1a0>
					//option Energy
					screen=2;
 80008a2:	4b22      	ldr	r3, [pc, #136]	; (800092c <main+0x218>)
 80008a4:	2202      	movs	r2, #2
 80008a6:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <main+0x214>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 80008ae:	f000 fbd7 	bl	8001060 <ssd1306_UpdateScreen>
 80008b2:	e00b      	b.n	80008cc <main+0x1b8>
				}else if (indexMenu==2){
 80008b4:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <main+0x214>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d107      	bne.n	80008cc <main+0x1b8>
					screen=3;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <main+0x218>)
 80008be:	2203      	movs	r2, #3
 80008c0:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 80008c2:	4b19      	ldr	r3, [pc, #100]	; (8000928 <main+0x214>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 80008c8:	f000 fbca 	bl	8001060 <ssd1306_UpdateScreen>
				}
			}
			// Dashboard
				if(screen==1){
 80008cc:	4b17      	ldr	r3, [pc, #92]	; (800092c <main+0x218>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d139      	bne.n	8000948 <main+0x234>
					if (indexMenu==0){
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <main+0x214>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d108      	bne.n	80008ee <main+0x1da>
						//option RF
						screen=4;
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <main+0x218>)
 80008de:	2204      	movs	r2, #4
 80008e0:	601a      	str	r2, [r3, #0]
						indexMenu=0;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <main+0x214>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
						ssd1306_UpdateScreen();
 80008e8:	f000 fbba 	bl	8001060 <ssd1306_UpdateScreen>
 80008ec:	e02c      	b.n	8000948 <main+0x234>
					}else if (indexMenu==1){
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <main+0x214>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d11c      	bne.n	8000930 <main+0x21c>
						//option CLOUD
						screen=5;
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <main+0x218>)
 80008f8:	2205      	movs	r2, #5
 80008fa:	601a      	str	r2, [r3, #0]
						indexMenu=0;
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <main+0x214>)
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
						ssd1306_UpdateScreen();
 8000902:	f000 fbad 	bl	8001060 <ssd1306_UpdateScreen>
 8000906:	e01f      	b.n	8000948 <main+0x234>
 8000908:	20000c98 	.word	0x20000c98
 800090c:	20000c9c 	.word	0x20000c9c
 8000910:	20000ca0 	.word	0x20000ca0
 8000914:	08015270 	.word	0x08015270
 8000918:	0801527c 	.word	0x0801527c
 800091c:	08015280 	.word	0x08015280
 8000920:	20000250 	.word	0x20000250
 8000924:	20000884 	.word	0x20000884
 8000928:	2000087c 	.word	0x2000087c
 800092c:	20000880 	.word	0x20000880
					}
          else if (indexMenu==3){
 8000930:	4b31      	ldr	r3, [pc, #196]	; (80009f8 <main+0x2e4>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b03      	cmp	r3, #3
 8000936:	d107      	bne.n	8000948 <main+0x234>
						//option Atras back
						screen=0;
 8000938:	4b30      	ldr	r3, [pc, #192]	; (80009fc <main+0x2e8>)
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
						indexMenu=0;
 800093e:	4b2e      	ldr	r3, [pc, #184]	; (80009f8 <main+0x2e4>)
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
						ssd1306_UpdateScreen();
 8000944:	f000 fb8c 	bl	8001060 <ssd1306_UpdateScreen>
					}
				}
			// Energy
				if(screen==2){
 8000948:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <main+0x2e8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b02      	cmp	r3, #2
 800094e:	d10f      	bne.n	8000970 <main+0x25c>
					if(indexMenu==0){
 8000950:	4b29      	ldr	r3, [pc, #164]	; (80009f8 <main+0x2e4>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d00b      	beq.n	8000970 <main+0x25c>
						//option power no hace nada
						//screen=1;
					}else if (indexMenu==2){
 8000958:	4b27      	ldr	r3, [pc, #156]	; (80009f8 <main+0x2e4>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b02      	cmp	r3, #2
 800095e:	d107      	bne.n	8000970 <main+0x25c>
						//option Atras back
						screen=0;
 8000960:	4b26      	ldr	r3, [pc, #152]	; (80009fc <main+0x2e8>)
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
						indexMenu=0;
 8000966:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <main+0x2e4>)
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
						ssd1306_UpdateScreen();
 800096c:	f000 fb78 	bl	8001060 <ssd1306_UpdateScreen>
					}
				}
			// Settings
			if(screen==3){
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <main+0x2e8>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b03      	cmp	r3, #3
 8000976:	d10f      	bne.n	8000998 <main+0x284>
				if(indexMenu==0){
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <main+0x2e4>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d00b      	beq.n	8000998 <main+0x284>
					//option Version no hace nada
					//screen=1;
				}else if (indexMenu==2){
 8000980:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <main+0x2e4>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b02      	cmp	r3, #2
 8000986:	d107      	bne.n	8000998 <main+0x284>
					//option Atras back
					screen=0;
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <main+0x2e8>)
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <main+0x2e4>)
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 8000994:	f000 fb64 	bl	8001060 <ssd1306_UpdateScreen>
				}
			}
      // BROADCAST
      if(screen==4){
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <main+0x2e8>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b04      	cmp	r3, #4
 800099e:	d10f      	bne.n	80009c0 <main+0x2ac>
        if(indexMenu==0){
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <main+0x2e4>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d00b      	beq.n	80009c0 <main+0x2ac>
					//screen=1;
				}
        else if (indexMenu==4){
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <main+0x2e4>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b04      	cmp	r3, #4
 80009ae:	d107      	bne.n	80009c0 <main+0x2ac>
					//option Atras back
					screen=1;
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <main+0x2e8>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <main+0x2e4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 80009bc:	f000 fb50 	bl	8001060 <ssd1306_UpdateScreen>
				}
      }
      // CLOUD
      if(screen==5){
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <main+0x2e8>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b05      	cmp	r3, #5
 80009c6:	d10f      	bne.n	80009e8 <main+0x2d4>
        if(indexMenu==0){
 80009c8:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <main+0x2e4>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d00b      	beq.n	80009e8 <main+0x2d4>
					//screen=1;
				}
        else if (indexMenu==2){
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <main+0x2e4>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d107      	bne.n	80009e8 <main+0x2d4>
					//option Atras back
					screen=1;
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <main+0x2e8>)
 80009da:	2201      	movs	r2, #1
 80009dc:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <main+0x2e4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 80009e4:	f000 fb3c 	bl	8001060 <ssd1306_UpdateScreen>
      }
	      }



	  HAL_ADC_Stop(&hadc3);
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <main+0x2ec>)
 80009ea:	f002 f8cf 	bl	8002b8c <HAL_ADC_Stop>
	  HAL_Delay(50);
 80009ee:	2032      	movs	r0, #50	; 0x32
 80009f0:	f001 ff96 	bl	8002920 <HAL_Delay>
    ethernetif_input(&gnetif);
 80009f4:	e6af      	b.n	8000756 <main+0x42>
 80009f6:	bf00      	nop
 80009f8:	2000087c 	.word	0x2000087c
 80009fc:	20000880 	.word	0x20000880
 8000a00:	20000250 	.word	0x20000250

08000a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b094      	sub	sp, #80	; 0x50
 8000a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	f107 0320 	add.w	r3, r7, #32
 8000a0e:	2230      	movs	r2, #48	; 0x30
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f013 fa14 	bl	8013e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a28:	f004 fe8c 	bl	8005744 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2c:	4b27      	ldr	r3, [pc, #156]	; (8000acc <SystemClock_Config+0xc8>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	4a26      	ldr	r2, [pc, #152]	; (8000acc <SystemClock_Config+0xc8>)
 8000a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a36:	6413      	str	r3, [r2, #64]	; 0x40
 8000a38:	4b24      	ldr	r3, [pc, #144]	; (8000acc <SystemClock_Config+0xc8>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a44:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <SystemClock_Config+0xcc>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a4c:	4a20      	ldr	r2, [pc, #128]	; (8000ad0 <SystemClock_Config+0xcc>)
 8000a4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <SystemClock_Config+0xcc>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a60:	2301      	movs	r3, #1
 8000a62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a64:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a74:	2304      	movs	r3, #4
 8000a76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a78:	2348      	movs	r3, #72	; 0x48
 8000a7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a80:	2303      	movs	r3, #3
 8000a82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a84:	f107 0320 	add.w	r3, r7, #32
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f004 fe6b 	bl	8005764 <HAL_RCC_OscConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a94:	f000 fa17 	bl	8000ec6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a98:	230f      	movs	r3, #15
 8000a9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	2102      	movs	r1, #2
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f005 f8f9 	bl	8005cac <HAL_RCC_ClockConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ac0:	f000 fa01 	bl	8000ec6 <Error_Handler>
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	3750      	adds	r7, #80	; 0x50
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40007000 	.word	0x40007000

08000ad4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ada:	463b      	mov	r3, r7
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <MX_ADC1_Init+0x98>)
 8000ae8:	4a21      	ldr	r2, [pc, #132]	; (8000b70 <MX_ADC1_Init+0x9c>)
 8000aea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000aec:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <MX_ADC1_Init+0x98>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000af2:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <MX_ADC1_Init+0x98>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000af8:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <MX_ADC1_Init+0x98>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000afe:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <MX_ADC1_Init+0x98>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b04:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <MX_ADC1_Init+0x98>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b0c:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <MX_ADC1_Init+0x98>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b12:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <MX_ADC1_Init+0x98>)
 8000b14:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <MX_ADC1_Init+0xa0>)
 8000b16:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_ADC1_Init+0x98>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <MX_ADC1_Init+0x98>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_ADC1_Init+0x98>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_ADC1_Init+0x98>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b32:	480e      	ldr	r0, [pc, #56]	; (8000b6c <MX_ADC1_Init+0x98>)
 8000b34:	f001 ff18 	bl	8002968 <HAL_ADC_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b3e:	f000 f9c2 	bl	8000ec6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b42:	2304      	movs	r3, #4
 8000b44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b46:	2301      	movs	r3, #1
 8000b48:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b4e:	463b      	mov	r3, r7
 8000b50:	4619      	mov	r1, r3
 8000b52:	4806      	ldr	r0, [pc, #24]	; (8000b6c <MX_ADC1_Init+0x98>)
 8000b54:	f002 f8e6 	bl	8002d24 <HAL_ADC_ConfigChannel>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000b5e:	f000 f9b2 	bl	8000ec6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000208 	.word	0x20000208
 8000b70:	40012000 	.word	0x40012000
 8000b74:	0f000001 	.word	0x0f000001

08000b78 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000b8a:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <MX_ADC3_Init+0x98>)
 8000b8c:	4a21      	ldr	r2, [pc, #132]	; (8000c14 <MX_ADC3_Init+0x9c>)
 8000b8e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b90:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <MX_ADC3_Init+0x98>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000b96:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <MX_ADC3_Init+0x98>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <MX_ADC3_Init+0x98>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <MX_ADC3_Init+0x98>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ba8:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <MX_ADC3_Init+0x98>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bb0:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <MX_ADC3_Init+0x98>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bb6:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <MX_ADC3_Init+0x98>)
 8000bb8:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <MX_ADC3_Init+0xa0>)
 8000bba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bbc:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <MX_ADC3_Init+0x98>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <MX_ADC3_Init+0x98>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_ADC3_Init+0x98>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <MX_ADC3_Init+0x98>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000bd6:	480e      	ldr	r0, [pc, #56]	; (8000c10 <MX_ADC3_Init+0x98>)
 8000bd8:	f001 fec6 	bl	8002968 <HAL_ADC_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8000be2:	f000 f970 	bl	8000ec6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000be6:	230f      	movs	r3, #15
 8000be8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bea:	2301      	movs	r3, #1
 8000bec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4806      	ldr	r0, [pc, #24]	; (8000c10 <MX_ADC3_Init+0x98>)
 8000bf8:	f002 f894 	bl	8002d24 <HAL_ADC_ConfigChannel>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000c02:	f000 f960 	bl	8000ec6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000250 	.word	0x20000250
 8000c14:	40012200 	.word	0x40012200
 8000c18:	0f000001 	.word	0x0f000001

08000c1c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <MX_I2C2_Init+0x74>)
 8000c22:	4a1c      	ldr	r2, [pc, #112]	; (8000c94 <MX_I2C2_Init+0x78>)
 8000c24:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301739;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <MX_I2C2_Init+0x74>)
 8000c28:	4a1b      	ldr	r2, [pc, #108]	; (8000c98 <MX_I2C2_Init+0x7c>)
 8000c2a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c2c:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <MX_I2C2_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c32:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <MX_I2C2_Init+0x74>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c38:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <MX_I2C2_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <MX_I2C2_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <MX_I2C2_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <MX_I2C2_Init+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <MX_I2C2_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c56:	480e      	ldr	r0, [pc, #56]	; (8000c90 <MX_I2C2_Init+0x74>)
 8000c58:	f003 ffaa 	bl	8004bb0 <HAL_I2C_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c62:	f000 f930 	bl	8000ec6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c66:	2100      	movs	r1, #0
 8000c68:	4809      	ldr	r0, [pc, #36]	; (8000c90 <MX_I2C2_Init+0x74>)
 8000c6a:	f004 fb8b 	bl	8005384 <HAL_I2CEx_ConfigAnalogFilter>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c74:	f000 f927 	bl	8000ec6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <MX_I2C2_Init+0x74>)
 8000c7c:	f004 fbcd 	bl	800541a <HAL_I2CEx_ConfigDigitalFilter>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c86:	f000 f91e 	bl	8000ec6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000298 	.word	0x20000298
 8000c94:	40005800 	.word	0x40005800
 8000c98:	00301739 	.word	0x00301739

08000c9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000ca2:	4a15      	ldr	r2, [pc, #84]	; (8000cf8 <MX_USART3_UART_Init+0x5c>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000ce0:	f005 fdfa 	bl	80068d8 <HAL_UART_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cea:	f000 f8ec 	bl	8000ec6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200002ec 	.word	0x200002ec
 8000cf8:	40004800 	.word	0x40004800

08000cfc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d0a:	2206      	movs	r2, #6
 8000d0c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d10:	2202      	movs	r2, #2
 8000d12:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d40:	f004 fbb7 	bl	80054b2 <HAL_PCD_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d4a:	f000 f8bc 	bl	8000ec6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000374 	.word	0x20000374

08000d58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08c      	sub	sp, #48	; 0x30
 8000d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	4b4d      	ldr	r3, [pc, #308]	; (8000ea4 <MX_GPIO_Init+0x14c>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a4c      	ldr	r2, [pc, #304]	; (8000ea4 <MX_GPIO_Init+0x14c>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b4a      	ldr	r3, [pc, #296]	; (8000ea4 <MX_GPIO_Init+0x14c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	61bb      	str	r3, [r7, #24]
 8000d84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d86:	4b47      	ldr	r3, [pc, #284]	; (8000ea4 <MX_GPIO_Init+0x14c>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a46      	ldr	r2, [pc, #280]	; (8000ea4 <MX_GPIO_Init+0x14c>)
 8000d8c:	f043 0320 	orr.w	r3, r3, #32
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b44      	ldr	r3, [pc, #272]	; (8000ea4 <MX_GPIO_Init+0x14c>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0320 	and.w	r3, r3, #32
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9e:	4b41      	ldr	r3, [pc, #260]	; (8000ea4 <MX_GPIO_Init+0x14c>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a40      	ldr	r2, [pc, #256]	; (8000ea4 <MX_GPIO_Init+0x14c>)
 8000da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b3e      	ldr	r3, [pc, #248]	; (8000ea4 <MX_GPIO_Init+0x14c>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	4b3b      	ldr	r3, [pc, #236]	; (8000ea4 <MX_GPIO_Init+0x14c>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a3a      	ldr	r2, [pc, #232]	; (8000ea4 <MX_GPIO_Init+0x14c>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b38      	ldr	r3, [pc, #224]	; (8000ea4 <MX_GPIO_Init+0x14c>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	4b35      	ldr	r3, [pc, #212]	; (8000ea4 <MX_GPIO_Init+0x14c>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a34      	ldr	r2, [pc, #208]	; (8000ea4 <MX_GPIO_Init+0x14c>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b32      	ldr	r3, [pc, #200]	; (8000ea4 <MX_GPIO_Init+0x14c>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de6:	4b2f      	ldr	r3, [pc, #188]	; (8000ea4 <MX_GPIO_Init+0x14c>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a2e      	ldr	r2, [pc, #184]	; (8000ea4 <MX_GPIO_Init+0x14c>)
 8000dec:	f043 0308 	orr.w	r3, r3, #8
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <MX_GPIO_Init+0x14c>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dfe:	4b29      	ldr	r3, [pc, #164]	; (8000ea4 <MX_GPIO_Init+0x14c>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a28      	ldr	r2, [pc, #160]	; (8000ea4 <MX_GPIO_Init+0x14c>)
 8000e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b26      	ldr	r3, [pc, #152]	; (8000ea4 <MX_GPIO_Init+0x14c>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000e1c:	4822      	ldr	r0, [pc, #136]	; (8000ea8 <MX_GPIO_Init+0x150>)
 8000e1e:	f003 fead 	bl	8004b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2140      	movs	r1, #64	; 0x40
 8000e26:	4821      	ldr	r0, [pc, #132]	; (8000eac <MX_GPIO_Init+0x154>)
 8000e28:	f003 fea8 	bl	8004b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	4619      	mov	r1, r3
 8000e42:	481b      	ldr	r0, [pc, #108]	; (8000eb0 <MX_GPIO_Init+0x158>)
 8000e44:	f003 fcee 	bl	8004824 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000e48:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4811      	ldr	r0, [pc, #68]	; (8000ea8 <MX_GPIO_Init+0x150>)
 8000e62:	f003 fcdf 	bl	8004824 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e66:	2340      	movs	r3, #64	; 0x40
 8000e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480b      	ldr	r0, [pc, #44]	; (8000eac <MX_GPIO_Init+0x154>)
 8000e7e:	f003 fcd1 	bl	8004824 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e86:	2300      	movs	r3, #0
 8000e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 031c 	add.w	r3, r7, #28
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_GPIO_Init+0x154>)
 8000e96:	f003 fcc5 	bl	8004824 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e9a:	bf00      	nop
 8000e9c:	3730      	adds	r7, #48	; 0x30
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020400 	.word	0x40020400
 8000eac:	40021800 	.word	0x40021800
 8000eb0:	40020800 	.word	0x40020800

08000eb4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000eb8:	f002 fa96 	bl	80033e8 <HAL_MPU_Disable>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ebc:	2004      	movs	r0, #4
 8000ebe:	f002 faab 	bl	8003418 <HAL_MPU_Enable>

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000eca:	b672      	cpsid	i
}
 8000ecc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ece:	e7fe      	b.n	8000ece <Error_Handler+0x8>

08000ed0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af04      	add	r7, sp, #16
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
 8000eee:	9302      	str	r3, [sp, #8]
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	1dfb      	adds	r3, r7, #7
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	2200      	movs	r2, #0
 8000efc:	2178      	movs	r1, #120	; 0x78
 8000efe:	4803      	ldr	r0, [pc, #12]	; (8000f0c <ssd1306_WriteCommand+0x2c>)
 8000f00:	f003 fee6 	bl	8004cd0 <HAL_I2C_Mem_Write>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000298 	.word	0x20000298

08000f10 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af04      	add	r7, sp, #16
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f22:	9202      	str	r2, [sp, #8]
 8000f24:	9301      	str	r3, [sp, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	2240      	movs	r2, #64	; 0x40
 8000f2e:	2178      	movs	r1, #120	; 0x78
 8000f30:	4803      	ldr	r0, [pc, #12]	; (8000f40 <ssd1306_WriteData+0x30>)
 8000f32:	f003 fecd 	bl	8004cd0 <HAL_I2C_Mem_Write>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000298 	.word	0x20000298

08000f44 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000f48:	f7ff ffc2 	bl	8000ed0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000f4c:	2064      	movs	r0, #100	; 0x64
 8000f4e:	f001 fce7 	bl	8002920 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000f52:	2000      	movs	r0, #0
 8000f54:	f000 fa34 	bl	80013c0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000f58:	2020      	movs	r0, #32
 8000f5a:	f7ff ffc1 	bl	8000ee0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f7ff ffbe 	bl	8000ee0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000f64:	20b0      	movs	r0, #176	; 0xb0
 8000f66:	f7ff ffbb 	bl	8000ee0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000f6a:	20c8      	movs	r0, #200	; 0xc8
 8000f6c:	f7ff ffb8 	bl	8000ee0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000f70:	2000      	movs	r0, #0
 8000f72:	f7ff ffb5 	bl	8000ee0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000f76:	2010      	movs	r0, #16
 8000f78:	f7ff ffb2 	bl	8000ee0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000f7c:	2040      	movs	r0, #64	; 0x40
 8000f7e:	f7ff ffaf 	bl	8000ee0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000f82:	20ff      	movs	r0, #255	; 0xff
 8000f84:	f000 fa09 	bl	800139a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000f88:	20a1      	movs	r0, #161	; 0xa1
 8000f8a:	f7ff ffa9 	bl	8000ee0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000f8e:	20a6      	movs	r0, #166	; 0xa6
 8000f90:	f7ff ffa6 	bl	8000ee0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000f94:	20a8      	movs	r0, #168	; 0xa8
 8000f96:	f7ff ffa3 	bl	8000ee0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000f9a:	203f      	movs	r0, #63	; 0x3f
 8000f9c:	f7ff ffa0 	bl	8000ee0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000fa0:	20a4      	movs	r0, #164	; 0xa4
 8000fa2:	f7ff ff9d 	bl	8000ee0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000fa6:	20d3      	movs	r0, #211	; 0xd3
 8000fa8:	f7ff ff9a 	bl	8000ee0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000fac:	2000      	movs	r0, #0
 8000fae:	f7ff ff97 	bl	8000ee0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000fb2:	20d5      	movs	r0, #213	; 0xd5
 8000fb4:	f7ff ff94 	bl	8000ee0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000fb8:	20f0      	movs	r0, #240	; 0xf0
 8000fba:	f7ff ff91 	bl	8000ee0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000fbe:	20d9      	movs	r0, #217	; 0xd9
 8000fc0:	f7ff ff8e 	bl	8000ee0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000fc4:	2022      	movs	r0, #34	; 0x22
 8000fc6:	f7ff ff8b 	bl	8000ee0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000fca:	20da      	movs	r0, #218	; 0xda
 8000fcc:	f7ff ff88 	bl	8000ee0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000fd0:	2012      	movs	r0, #18
 8000fd2:	f7ff ff85 	bl	8000ee0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000fd6:	20db      	movs	r0, #219	; 0xdb
 8000fd8:	f7ff ff82 	bl	8000ee0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000fdc:	2020      	movs	r0, #32
 8000fde:	f7ff ff7f 	bl	8000ee0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000fe2:	208d      	movs	r0, #141	; 0x8d
 8000fe4:	f7ff ff7c 	bl	8000ee0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000fe8:	2014      	movs	r0, #20
 8000fea:	f7ff ff79 	bl	8000ee0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f000 f9e6 	bl	80013c0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f000 f80f 	bl	8001018 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000ffa:	f000 f831 	bl	8001060 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000ffe:	4b05      	ldr	r3, [pc, #20]	; (8001014 <ssd1306_Init+0xd0>)
 8001000:	2200      	movs	r2, #0
 8001002:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <ssd1306_Init+0xd0>)
 8001006:	2200      	movs	r2, #0
 8001008:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800100a:	4b02      	ldr	r3, [pc, #8]	; (8001014 <ssd1306_Init+0xd0>)
 800100c:	2201      	movs	r2, #1
 800100e:	711a      	strb	r2, [r3, #4]
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000c88 	.word	0x20000c88

08001018 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	e00d      	b.n	8001044 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <ssd1306_Fill+0x1a>
 800102e:	2100      	movs	r1, #0
 8001030:	e000      	b.n	8001034 <ssd1306_Fill+0x1c>
 8001032:	21ff      	movs	r1, #255	; 0xff
 8001034:	4a09      	ldr	r2, [pc, #36]	; (800105c <ssd1306_Fill+0x44>)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4413      	add	r3, r2
 800103a:	460a      	mov	r2, r1
 800103c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	3301      	adds	r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800104a:	d3ed      	bcc.n	8001028 <ssd1306_Fill+0x10>
    }
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000888 	.word	0x20000888

08001060 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001066:	2300      	movs	r3, #0
 8001068:	71fb      	strb	r3, [r7, #7]
 800106a:	e016      	b.n	800109a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	3b50      	subs	r3, #80	; 0x50
 8001070:	b2db      	uxtb	r3, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff34 	bl	8000ee0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001078:	2002      	movs	r0, #2
 800107a:	f7ff ff31 	bl	8000ee0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800107e:	2010      	movs	r0, #16
 8001080:	f7ff ff2e 	bl	8000ee0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	01db      	lsls	r3, r3, #7
 8001088:	4a08      	ldr	r2, [pc, #32]	; (80010ac <ssd1306_UpdateScreen+0x4c>)
 800108a:	4413      	add	r3, r2
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff3e 	bl	8000f10 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	3301      	adds	r3, #1
 8001098:	71fb      	strb	r3, [r7, #7]
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	2b07      	cmp	r3, #7
 800109e:	d9e5      	bls.n	800106c <ssd1306_UpdateScreen+0xc>
    }
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000888 	.word	0x20000888

080010b0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
 80010ba:	460b      	mov	r3, r1
 80010bc:	71bb      	strb	r3, [r7, #6]
 80010be:	4613      	mov	r3, r2
 80010c0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	db3d      	blt.n	8001146 <ssd1306_DrawPixel+0x96>
 80010ca:	79bb      	ldrb	r3, [r7, #6]
 80010cc:	2b3f      	cmp	r3, #63	; 0x3f
 80010ce:	d83a      	bhi.n	8001146 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80010d0:	797b      	ldrb	r3, [r7, #5]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d11a      	bne.n	800110c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80010d6:	79fa      	ldrb	r2, [r7, #7]
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	08db      	lsrs	r3, r3, #3
 80010dc:	b2d8      	uxtb	r0, r3
 80010de:	4603      	mov	r3, r0
 80010e0:	01db      	lsls	r3, r3, #7
 80010e2:	4413      	add	r3, r2
 80010e4:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <ssd1306_DrawPixel+0xa4>)
 80010e6:	5cd3      	ldrb	r3, [r2, r3]
 80010e8:	b25a      	sxtb	r2, r3
 80010ea:	79bb      	ldrb	r3, [r7, #6]
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	2101      	movs	r1, #1
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b259      	sxtb	r1, r3
 80010fc:	79fa      	ldrb	r2, [r7, #7]
 80010fe:	4603      	mov	r3, r0
 8001100:	01db      	lsls	r3, r3, #7
 8001102:	4413      	add	r3, r2
 8001104:	b2c9      	uxtb	r1, r1
 8001106:	4a13      	ldr	r2, [pc, #76]	; (8001154 <ssd1306_DrawPixel+0xa4>)
 8001108:	54d1      	strb	r1, [r2, r3]
 800110a:	e01d      	b.n	8001148 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800110c:	79fa      	ldrb	r2, [r7, #7]
 800110e:	79bb      	ldrb	r3, [r7, #6]
 8001110:	08db      	lsrs	r3, r3, #3
 8001112:	b2d8      	uxtb	r0, r3
 8001114:	4603      	mov	r3, r0
 8001116:	01db      	lsls	r3, r3, #7
 8001118:	4413      	add	r3, r2
 800111a:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <ssd1306_DrawPixel+0xa4>)
 800111c:	5cd3      	ldrb	r3, [r2, r3]
 800111e:	b25a      	sxtb	r2, r3
 8001120:	79bb      	ldrb	r3, [r7, #6]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	2101      	movs	r1, #1
 8001128:	fa01 f303 	lsl.w	r3, r1, r3
 800112c:	b25b      	sxtb	r3, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	b25b      	sxtb	r3, r3
 8001132:	4013      	ands	r3, r2
 8001134:	b259      	sxtb	r1, r3
 8001136:	79fa      	ldrb	r2, [r7, #7]
 8001138:	4603      	mov	r3, r0
 800113a:	01db      	lsls	r3, r3, #7
 800113c:	4413      	add	r3, r2
 800113e:	b2c9      	uxtb	r1, r1
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <ssd1306_DrawPixel+0xa4>)
 8001142:	54d1      	strb	r1, [r2, r3]
 8001144:	e000      	b.n	8001148 <ssd1306_DrawPixel+0x98>
        return;
 8001146:	bf00      	nop
    }
}
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000888 	.word	0x20000888

08001158 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	4604      	mov	r4, r0
 8001160:	1d38      	adds	r0, r7, #4
 8001162:	e880 0006 	stmia.w	r0, {r1, r2}
 8001166:	461a      	mov	r2, r3
 8001168:	4623      	mov	r3, r4
 800116a:	73fb      	strb	r3, [r7, #15]
 800116c:	4613      	mov	r3, r2
 800116e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	2b1f      	cmp	r3, #31
 8001174:	d902      	bls.n	800117c <ssd1306_WriteChar+0x24>
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	2b7e      	cmp	r3, #126	; 0x7e
 800117a:	d901      	bls.n	8001180 <ssd1306_WriteChar+0x28>
        return 0;
 800117c:	2300      	movs	r3, #0
 800117e:	e06d      	b.n	800125c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001180:	4b38      	ldr	r3, [pc, #224]	; (8001264 <ssd1306_WriteChar+0x10c>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	793b      	ldrb	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	2b80      	cmp	r3, #128	; 0x80
 800118c:	dc06      	bgt.n	800119c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800118e:	4b35      	ldr	r3, [pc, #212]	; (8001264 <ssd1306_WriteChar+0x10c>)
 8001190:	885b      	ldrh	r3, [r3, #2]
 8001192:	461a      	mov	r2, r3
 8001194:	797b      	ldrb	r3, [r7, #5]
 8001196:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001198:	2b40      	cmp	r3, #64	; 0x40
 800119a:	dd01      	ble.n	80011a0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800119c:	2300      	movs	r3, #0
 800119e:	e05d      	b.n	800125c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
 80011a4:	e04c      	b.n	8001240 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	3b20      	subs	r3, #32
 80011ac:	7979      	ldrb	r1, [r7, #5]
 80011ae:	fb01 f303 	mul.w	r3, r1, r3
 80011b2:	4619      	mov	r1, r3
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	440b      	add	r3, r1
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80011c0:	2300      	movs	r3, #0
 80011c2:	61bb      	str	r3, [r7, #24]
 80011c4:	e034      	b.n	8001230 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d012      	beq.n	80011fc <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80011d6:	4b23      	ldr	r3, [pc, #140]	; (8001264 <ssd1306_WriteChar+0x10c>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	4413      	add	r3, r2
 80011e2:	b2d8      	uxtb	r0, r3
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <ssd1306_WriteChar+0x10c>)
 80011e6:	885b      	ldrh	r3, [r3, #2]
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	4413      	add	r3, r2
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	7bba      	ldrb	r2, [r7, #14]
 80011f4:	4619      	mov	r1, r3
 80011f6:	f7ff ff5b 	bl	80010b0 <ssd1306_DrawPixel>
 80011fa:	e016      	b.n	800122a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <ssd1306_WriteChar+0x10c>)
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	4413      	add	r3, r2
 8001208:	b2d8      	uxtb	r0, r3
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <ssd1306_WriteChar+0x10c>)
 800120c:	885b      	ldrh	r3, [r3, #2]
 800120e:	b2da      	uxtb	r2, r3
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	4413      	add	r3, r2
 8001216:	b2d9      	uxtb	r1, r3
 8001218:	7bbb      	ldrb	r3, [r7, #14]
 800121a:	2b00      	cmp	r3, #0
 800121c:	bf0c      	ite	eq
 800121e:	2301      	moveq	r3, #1
 8001220:	2300      	movne	r3, #0
 8001222:	b2db      	uxtb	r3, r3
 8001224:	461a      	mov	r2, r3
 8001226:	f7ff ff43 	bl	80010b0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	3301      	adds	r3, #1
 800122e:	61bb      	str	r3, [r7, #24]
 8001230:	793b      	ldrb	r3, [r7, #4]
 8001232:	461a      	mov	r2, r3
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	4293      	cmp	r3, r2
 8001238:	d3c5      	bcc.n	80011c6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3301      	adds	r3, #1
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	797b      	ldrb	r3, [r7, #5]
 8001242:	461a      	mov	r2, r3
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	4293      	cmp	r3, r2
 8001248:	d3ad      	bcc.n	80011a6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <ssd1306_WriteChar+0x10c>)
 800124c:	881a      	ldrh	r2, [r3, #0]
 800124e:	793b      	ldrb	r3, [r7, #4]
 8001250:	b29b      	uxth	r3, r3
 8001252:	4413      	add	r3, r2
 8001254:	b29a      	uxth	r2, r3
 8001256:	4b03      	ldr	r3, [pc, #12]	; (8001264 <ssd1306_WriteChar+0x10c>)
 8001258:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800125a:	7bfb      	ldrb	r3, [r7, #15]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3724      	adds	r7, #36	; 0x24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd90      	pop	{r4, r7, pc}
 8001264:	20000c88 	.word	0x20000c88

08001268 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	1d38      	adds	r0, r7, #4
 8001272:	e880 0006 	stmia.w	r0, {r1, r2}
 8001276:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001278:	e012      	b.n	80012a0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	7818      	ldrb	r0, [r3, #0]
 800127e:	78fb      	ldrb	r3, [r7, #3]
 8001280:	1d3a      	adds	r2, r7, #4
 8001282:	ca06      	ldmia	r2, {r1, r2}
 8001284:	f7ff ff68 	bl	8001158 <ssd1306_WriteChar>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	d002      	beq.n	800129a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	e008      	b.n	80012ac <ssd1306_WriteString+0x44>
        }
        str++;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3301      	adds	r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1e8      	bne.n	800127a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	781b      	ldrb	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	460a      	mov	r2, r1
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	4613      	mov	r3, r2
 80012c2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <ssd1306_SetCursor+0x2c>)
 80012ca:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80012cc:	79bb      	ldrb	r3, [r7, #6]
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <ssd1306_SetCursor+0x2c>)
 80012d2:	805a      	strh	r2, [r3, #2]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	20000c88 	.word	0x20000c88

080012e4 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	603a      	str	r2, [r7, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
 80012f2:	460b      	mov	r3, r1
 80012f4:	71bb      	strb	r3, [r7, #6]
 80012f6:	4613      	mov	r3, r2
 80012f8:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80012fa:	797b      	ldrb	r3, [r7, #5]
 80012fc:	3307      	adds	r3, #7
 80012fe:	2b00      	cmp	r3, #0
 8001300:	da00      	bge.n	8001304 <ssd1306_DrawBitmap+0x20>
 8001302:	3307      	adds	r3, #7
 8001304:	10db      	asrs	r3, r3, #3
 8001306:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	db3e      	blt.n	8001392 <ssd1306_DrawBitmap+0xae>
 8001314:	79bb      	ldrb	r3, [r7, #6]
 8001316:	2b3f      	cmp	r3, #63	; 0x3f
 8001318:	d83b      	bhi.n	8001392 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 800131a:	2300      	movs	r3, #0
 800131c:	73bb      	strb	r3, [r7, #14]
 800131e:	e033      	b.n	8001388 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8001320:	2300      	movs	r3, #0
 8001322:	737b      	strb	r3, [r7, #13]
 8001324:	e026      	b.n	8001374 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8001326:	7b7b      	ldrb	r3, [r7, #13]
 8001328:	f003 0307 	and.w	r3, r3, #7
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	73fb      	strb	r3, [r7, #15]
 8001336:	e00d      	b.n	8001354 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001338:	7bbb      	ldrb	r3, [r7, #14]
 800133a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800133e:	fb02 f303 	mul.w	r3, r2, r3
 8001342:	7b7a      	ldrb	r2, [r7, #13]
 8001344:	08d2      	lsrs	r2, r2, #3
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	4413      	add	r3, r2
 800134a:	461a      	mov	r2, r3
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	4413      	add	r3, r2
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8001354:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001358:	2b00      	cmp	r3, #0
 800135a:	da08      	bge.n	800136e <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 800135c:	79fa      	ldrb	r2, [r7, #7]
 800135e:	7b7b      	ldrb	r3, [r7, #13]
 8001360:	4413      	add	r3, r2
 8001362:	b2db      	uxtb	r3, r3
 8001364:	7f3a      	ldrb	r2, [r7, #28]
 8001366:	79b9      	ldrb	r1, [r7, #6]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fea1 	bl	80010b0 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800136e:	7b7b      	ldrb	r3, [r7, #13]
 8001370:	3301      	adds	r3, #1
 8001372:	737b      	strb	r3, [r7, #13]
 8001374:	7b7a      	ldrb	r2, [r7, #13]
 8001376:	797b      	ldrb	r3, [r7, #5]
 8001378:	429a      	cmp	r2, r3
 800137a:	d3d4      	bcc.n	8001326 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 800137c:	7bbb      	ldrb	r3, [r7, #14]
 800137e:	3301      	adds	r3, #1
 8001380:	73bb      	strb	r3, [r7, #14]
 8001382:	79bb      	ldrb	r3, [r7, #6]
 8001384:	3301      	adds	r3, #1
 8001386:	71bb      	strb	r3, [r7, #6]
 8001388:	7bba      	ldrb	r2, [r7, #14]
 800138a:	7e3b      	ldrb	r3, [r7, #24]
 800138c:	429a      	cmp	r2, r3
 800138e:	d3c7      	bcc.n	8001320 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8001390:	e000      	b.n	8001394 <ssd1306_DrawBitmap+0xb0>
        return;
 8001392:	bf00      	nop
}
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800139a:	b580      	push	{r7, lr}
 800139c:	b084      	sub	sp, #16
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80013a4:	2381      	movs	r3, #129	; 0x81
 80013a6:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fd98 	bl	8000ee0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fd94 	bl	8000ee0 <ssd1306_WriteCommand>
}
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80013d0:	23af      	movs	r3, #175	; 0xaf
 80013d2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <ssd1306_SetDisplayOn+0x38>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	715a      	strb	r2, [r3, #5]
 80013da:	e004      	b.n	80013e6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80013dc:	23ae      	movs	r3, #174	; 0xae
 80013de:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <ssd1306_SetDisplayOn+0x38>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fd79 	bl	8000ee0 <ssd1306_WriteCommand>
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000c88 	.word	0x20000c88

080013fc <ssd1306_TestFonts1>:
   
    HAL_Delay(1000);
}


void ssd1306_TestFonts1() {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
    uint8_t y = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 8001406:	2000      	movs	r0, #0
 8001408:	f7ff fe06 	bl	8001018 <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	4619      	mov	r1, r3
 8001410:	2002      	movs	r0, #2
 8001412:	f7ff ff4f 	bl	80012b4 <ssd1306_SetCursor>
    ssd1306_WriteString("OHMIO BOX", Font_11x18, White);
 8001416:	4a1b      	ldr	r2, [pc, #108]	; (8001484 <ssd1306_TestFonts1+0x88>)
 8001418:	2301      	movs	r3, #1
 800141a:	ca06      	ldmia	r2, {r1, r2}
 800141c:	481a      	ldr	r0, [pc, #104]	; (8001488 <ssd1306_TestFonts1+0x8c>)
 800141e:	f7ff ff23 	bl	8001268 <ssd1306_WriteString>
    y += 26;
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	331a      	adds	r3, #26
 8001426:	71fb      	strb	r3, [r7, #7]
    #endif



    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	4619      	mov	r1, r3
 800142c:	2002      	movs	r0, #2
 800142e:	f7ff ff41 	bl	80012b4 <ssd1306_SetCursor>
    ssd1306_WriteString("Web 3.0 for", Font_7x10, White);
 8001432:	4a16      	ldr	r2, [pc, #88]	; (800148c <ssd1306_TestFonts1+0x90>)
 8001434:	2301      	movs	r3, #1
 8001436:	ca06      	ldmia	r2, {r1, r2}
 8001438:	4815      	ldr	r0, [pc, #84]	; (8001490 <ssd1306_TestFonts1+0x94>)
 800143a:	f7ff ff15 	bl	8001268 <ssd1306_WriteString>
    y += 10;
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	330a      	adds	r3, #10
 8001442:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	4619      	mov	r1, r3
 8001448:	2002      	movs	r0, #2
 800144a:	f7ff ff33 	bl	80012b4 <ssd1306_SetCursor>
    ssd1306_WriteString("Broadcast Industry", Font_6x8, White);
 800144e:	4a11      	ldr	r2, [pc, #68]	; (8001494 <ssd1306_TestFonts1+0x98>)
 8001450:	2301      	movs	r3, #1
 8001452:	ca06      	ldmia	r2, {r1, r2}
 8001454:	4810      	ldr	r0, [pc, #64]	; (8001498 <ssd1306_TestFonts1+0x9c>)
 8001456:	f7ff ff07 	bl	8001268 <ssd1306_WriteString>
    y += 10;
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	330a      	adds	r3, #10
 800145e:	71fb      	strb	r3, [r7, #7]
    #endif

#ifdef SSD1306_INCLUDE_FONT_6x8
   ssd1306_SetCursor(2, y);
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	4619      	mov	r1, r3
 8001464:	2002      	movs	r0, #2
 8001466:	f7ff ff25 	bl	80012b4 <ssd1306_SetCursor>
   ssd1306_WriteString("Version 1.0", Font_6x8, White);
 800146a:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <ssd1306_TestFonts1+0x98>)
 800146c:	2301      	movs	r3, #1
 800146e:	ca06      	ldmia	r2, {r1, r2}
 8001470:	480a      	ldr	r0, [pc, #40]	; (800149c <ssd1306_TestFonts1+0xa0>)
 8001472:	f7ff fef9 	bl	8001268 <ssd1306_WriteString>
   #endif

    ssd1306_UpdateScreen();
 8001476:	f7ff fdf3 	bl	8001060 <ssd1306_UpdateScreen>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000010 	.word	0x20000010
 8001488:	08015288 	.word	0x08015288
 800148c:	20000008 	.word	0x20000008
 8001490:	08015294 	.word	0x08015294
 8001494:	20000000 	.word	0x20000000
 8001498:	080152a0 	.word	0x080152a0
 800149c:	080152b4 	.word	0x080152b4

080014a0 <ssd1306_PrintPrincipalMenu>:
void ssd1306_PrintSettingsToolbar(){
	  ssd1306_DrawBitmap(80,0,garfield_128x64,128,64,Black);
	    ssd1306_UpdateScreen();
}

void ssd1306_PrintPrincipalMenu(int value, int indexMenu, int screen){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	f107 0318 	add.w	r3, r7, #24
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 80014be:	2000      	movs	r0, #0
 80014c0:	f7ff fdaa 	bl	8001018 <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(2, y);
 80014c4:	7ffb      	ldrb	r3, [r7, #31]
 80014c6:	4619      	mov	r1, r3
 80014c8:	2002      	movs	r0, #2
 80014ca:	f7ff fef3 	bl	80012b4 <ssd1306_SetCursor>
	    ssd1306_WriteString("MENU", Font_11x18, White);
 80014ce:	4a51      	ldr	r2, [pc, #324]	; (8001614 <ssd1306_PrintPrincipalMenu+0x174>)
 80014d0:	2301      	movs	r3, #1
 80014d2:	ca06      	ldmia	r2, {r1, r2}
 80014d4:	4850      	ldr	r0, [pc, #320]	; (8001618 <ssd1306_PrintPrincipalMenu+0x178>)
 80014d6:	f7ff fec7 	bl	8001268 <ssd1306_WriteString>
	    //INTERNET
		  ssd1306_DrawBitmap(70,y,icon_rf,15,15,White);
 80014da:	7ff9      	ldrb	r1, [r7, #31]
 80014dc:	2301      	movs	r3, #1
 80014de:	9301      	str	r3, [sp, #4]
 80014e0:	230f      	movs	r3, #15
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	230f      	movs	r3, #15
 80014e6:	4a4d      	ldr	r2, [pc, #308]	; (800161c <ssd1306_PrintPrincipalMenu+0x17c>)
 80014e8:	2046      	movs	r0, #70	; 0x46
 80014ea:	f7ff fefb 	bl	80012e4 <ssd1306_DrawBitmap>

	    //BATERIA
		  ssd1306_DrawBitmap(90,y,icon_cloud,15,15,White);
 80014ee:	7ff9      	ldrb	r1, [r7, #31]
 80014f0:	2301      	movs	r3, #1
 80014f2:	9301      	str	r3, [sp, #4]
 80014f4:	230f      	movs	r3, #15
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	230f      	movs	r3, #15
 80014fa:	4a49      	ldr	r2, [pc, #292]	; (8001620 <ssd1306_PrintPrincipalMenu+0x180>)
 80014fc:	205a      	movs	r0, #90	; 0x5a
 80014fe:	f7ff fef1 	bl	80012e4 <ssd1306_DrawBitmap>

	    //SEÑAL GSM
		  ssd1306_DrawBitmap(110,y,icon_battery_full,15,15,White);
 8001502:	7ff9      	ldrb	r1, [r7, #31]
 8001504:	2301      	movs	r3, #1
 8001506:	9301      	str	r3, [sp, #4]
 8001508:	230f      	movs	r3, #15
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	230f      	movs	r3, #15
 800150e:	4a45      	ldr	r2, [pc, #276]	; (8001624 <ssd1306_PrintPrincipalMenu+0x184>)
 8001510:	206e      	movs	r0, #110	; 0x6e
 8001512:	f7ff fee7 	bl	80012e4 <ssd1306_DrawBitmap>



	    y += 20;
 8001516:	7ffb      	ldrb	r3, [r7, #31]
 8001518:	3314      	adds	r3, #20
 800151a:	77fb      	strb	r3, [r7, #31]
	    #endif

	    #ifdef SSD1306_INCLUDE_FONT_7x10
	    ssd1306_SetCursor(2, y);
 800151c:	7ffb      	ldrb	r3, [r7, #31]
 800151e:	4619      	mov	r1, r3
 8001520:	2002      	movs	r0, #2
 8001522:	f7ff fec7 	bl	80012b4 <ssd1306_SetCursor>
	    if(indexMenu==0){
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d106      	bne.n	800153a <ssd1306_PrintPrincipalMenu+0x9a>
	        ssd1306_WriteString("DASHBOARD", Font_7x10, Black);
 800152c:	4a3e      	ldr	r2, [pc, #248]	; (8001628 <ssd1306_PrintPrincipalMenu+0x188>)
 800152e:	2300      	movs	r3, #0
 8001530:	ca06      	ldmia	r2, {r1, r2}
 8001532:	483e      	ldr	r0, [pc, #248]	; (800162c <ssd1306_PrintPrincipalMenu+0x18c>)
 8001534:	f7ff fe98 	bl	8001268 <ssd1306_WriteString>
 8001538:	e005      	b.n	8001546 <ssd1306_PrintPrincipalMenu+0xa6>
	    }else{
	        ssd1306_WriteString("DASHBOARD", Font_7x10, White);
 800153a:	4a3b      	ldr	r2, [pc, #236]	; (8001628 <ssd1306_PrintPrincipalMenu+0x188>)
 800153c:	2301      	movs	r3, #1
 800153e:	ca06      	ldmia	r2, {r1, r2}
 8001540:	483a      	ldr	r0, [pc, #232]	; (800162c <ssd1306_PrintPrincipalMenu+0x18c>)
 8001542:	f7ff fe91 	bl	8001268 <ssd1306_WriteString>

	    }
	    y += 10;
 8001546:	7ffb      	ldrb	r3, [r7, #31]
 8001548:	330a      	adds	r3, #10
 800154a:	77fb      	strb	r3, [r7, #31]
	    #endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 800154c:	7ffb      	ldrb	r3, [r7, #31]
 800154e:	4619      	mov	r1, r3
 8001550:	2002      	movs	r0, #2
 8001552:	f7ff feaf 	bl	80012b4 <ssd1306_SetCursor>
	    if(indexMenu==1){
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d106      	bne.n	800156a <ssd1306_PrintPrincipalMenu+0xca>
	        ssd1306_WriteString("ENERGY", Font_7x10, Black);
 800155c:	4a32      	ldr	r2, [pc, #200]	; (8001628 <ssd1306_PrintPrincipalMenu+0x188>)
 800155e:	2300      	movs	r3, #0
 8001560:	ca06      	ldmia	r2, {r1, r2}
 8001562:	4833      	ldr	r0, [pc, #204]	; (8001630 <ssd1306_PrintPrincipalMenu+0x190>)
 8001564:	f7ff fe80 	bl	8001268 <ssd1306_WriteString>
 8001568:	e005      	b.n	8001576 <ssd1306_PrintPrincipalMenu+0xd6>
	    }
	    else{
	        ssd1306_WriteString("ENERGY", Font_7x10, White);
 800156a:	4a2f      	ldr	r2, [pc, #188]	; (8001628 <ssd1306_PrintPrincipalMenu+0x188>)
 800156c:	2301      	movs	r3, #1
 800156e:	ca06      	ldmia	r2, {r1, r2}
 8001570:	482f      	ldr	r0, [pc, #188]	; (8001630 <ssd1306_PrintPrincipalMenu+0x190>)
 8001572:	f7ff fe79 	bl	8001268 <ssd1306_WriteString>

	    }
		y += 10;
 8001576:	7ffb      	ldrb	r3, [r7, #31]
 8001578:	330a      	adds	r3, #10
 800157a:	77fb      	strb	r3, [r7, #31]

		#endif
		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 800157c:	7ffb      	ldrb	r3, [r7, #31]
 800157e:	4619      	mov	r1, r3
 8001580:	2002      	movs	r0, #2
 8001582:	f7ff fe97 	bl	80012b4 <ssd1306_SetCursor>
	    if(indexMenu==2){
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d106      	bne.n	800159a <ssd1306_PrintPrincipalMenu+0xfa>
	        ssd1306_WriteString("SETTINGS", Font_7x10, Black);
 800158c:	4a26      	ldr	r2, [pc, #152]	; (8001628 <ssd1306_PrintPrincipalMenu+0x188>)
 800158e:	2300      	movs	r3, #0
 8001590:	ca06      	ldmia	r2, {r1, r2}
 8001592:	4828      	ldr	r0, [pc, #160]	; (8001634 <ssd1306_PrintPrincipalMenu+0x194>)
 8001594:	f7ff fe68 	bl	8001268 <ssd1306_WriteString>
 8001598:	e005      	b.n	80015a6 <ssd1306_PrintPrincipalMenu+0x106>
	    }
	    else{
	        ssd1306_WriteString("SETTINGS", Font_7x10, White);
 800159a:	4a23      	ldr	r2, [pc, #140]	; (8001628 <ssd1306_PrintPrincipalMenu+0x188>)
 800159c:	2301      	movs	r3, #1
 800159e:	ca06      	ldmia	r2, {r1, r2}
 80015a0:	4824      	ldr	r0, [pc, #144]	; (8001634 <ssd1306_PrintPrincipalMenu+0x194>)
 80015a2:	f7ff fe61 	bl	8001268 <ssd1306_WriteString>

	    }
		y += 10;
 80015a6:	7ffb      	ldrb	r3, [r7, #31]
 80015a8:	330a      	adds	r3, #10
 80015aa:	77fb      	strb	r3, [r7, #31]
		#endif




	         if(value >= 2850 && value <= 2950){
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f640 3221 	movw	r2, #2849	; 0xb21
 80015b2:	4293      	cmp	r3, r2
 80015b4:	dd0c      	ble.n	80015d0 <ssd1306_PrintPrincipalMenu+0x130>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f640 3286 	movw	r2, #2950	; 0xb86
 80015bc:	4293      	cmp	r3, r2
 80015be:	dc07      	bgt.n	80015d0 <ssd1306_PrintPrincipalMenu+0x130>
	            strcpy(stringDirection, "DERECHA");
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4a1c      	ldr	r2, [pc, #112]	; (8001638 <ssd1306_PrintPrincipalMenu+0x198>)
 80015c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80015ce:	e01b      	b.n	8001608 <ssd1306_PrintPrincipalMenu+0x168>
	        }
	        else if(value >= 1850 && value <= 1950){
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f240 7239 	movw	r2, #1849	; 0x739
 80015d6:	4293      	cmp	r3, r2
 80015d8:	dd0b      	ble.n	80015f2 <ssd1306_PrintPrincipalMenu+0x152>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f240 729e 	movw	r2, #1950	; 0x79e
 80015e0:	4293      	cmp	r3, r2
 80015e2:	dc06      	bgt.n	80015f2 <ssd1306_PrintPrincipalMenu+0x152>
	            strcpy(stringDirection, "IZQUIERDA");
 80015e4:	4a15      	ldr	r2, [pc, #84]	; (800163c <ssd1306_PrintPrincipalMenu+0x19c>)
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80015ec:	c303      	stmia	r3!, {r0, r1}
 80015ee:	801a      	strh	r2, [r3, #0]
 80015f0:	e00a      	b.n	8001608 <ssd1306_PrintPrincipalMenu+0x168>
	        }
	        else {
	            strcpy(stringDirection, "NORMAL");
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4a12      	ldr	r2, [pc, #72]	; (8001640 <ssd1306_PrintPrincipalMenu+0x1a0>)
 80015f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015fc:	6018      	str	r0, [r3, #0]
 80015fe:	3304      	adds	r3, #4
 8001600:	8019      	strh	r1, [r3, #0]
 8001602:	3302      	adds	r3, #2
 8001604:	0c0a      	lsrs	r2, r1, #16
 8001606:	701a      	strb	r2, [r3, #0]
	         //sprintf(screen_str, "%d", screen); // convert index to a string
	         //ssd1306_SetCursor(20, y); // set the cursor position
	         //ssd1306_WriteString(screen_str, Font_7x10, White); // write the string to the display    y += 10;
	         //   #endif

	    ssd1306_UpdateScreen();
 8001608:	f7ff fd2a 	bl	8001060 <ssd1306_UpdateScreen>
}
 800160c:	bf00      	nop
 800160e:	3720      	adds	r7, #32
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000010 	.word	0x20000010
 8001618:	080152c0 	.word	0x080152c0
 800161c:	08019c70 	.word	0x08019c70
 8001620:	08019c30 	.word	0x08019c30
 8001624:	08019c50 	.word	0x08019c50
 8001628:	20000008 	.word	0x20000008
 800162c:	080152c8 	.word	0x080152c8
 8001630:	080152d4 	.word	0x080152d4
 8001634:	080152dc 	.word	0x080152dc
 8001638:	080152e8 	.word	0x080152e8
 800163c:	080152f0 	.word	0x080152f0
 8001640:	080152fc 	.word	0x080152fc

08001644 <ssd1306_PrintDashboardMenu>:

void ssd1306_PrintDashboardMenu(int value, int indexMenu, int screen){
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	; 0x28
 8001648:	af02      	add	r7, sp, #8
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	f107 0318 	add.w	r3, r7, #24
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 8001662:	2000      	movs	r0, #0
 8001664:	f7ff fcd8 	bl	8001018 <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(20, y);
 8001668:	7ffb      	ldrb	r3, [r7, #31]
 800166a:	4619      	mov	r1, r3
 800166c:	2014      	movs	r0, #20
 800166e:	f7ff fe21 	bl	80012b4 <ssd1306_SetCursor>
	    ssd1306_WriteString("OHMIO BOX", Font_11x18, White);
 8001672:	4a73      	ldr	r2, [pc, #460]	; (8001840 <ssd1306_PrintDashboardMenu+0x1fc>)
 8001674:	2301      	movs	r3, #1
 8001676:	ca06      	ldmia	r2, {r1, r2}
 8001678:	4872      	ldr	r0, [pc, #456]	; (8001844 <ssd1306_PrintDashboardMenu+0x200>)
 800167a:	f7ff fdf5 	bl	8001268 <ssd1306_WriteString>
	    //ssd1306_DrawRectangle(0,y, 128, 10, White);

	    y += 20;
 800167e:	7ffb      	ldrb	r3, [r7, #31]
 8001680:	3314      	adds	r3, #20
 8001682:	77fb      	strb	r3, [r7, #31]
	    #endif

		ssd1306_SetCursor(2, y);
 8001684:	7ffb      	ldrb	r3, [r7, #31]
 8001686:	4619      	mov	r1, r3
 8001688:	2002      	movs	r0, #2
 800168a:	f7ff fe13 	bl	80012b4 <ssd1306_SetCursor>
	    if(indexMenu==0){
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d11d      	bne.n	80016d0 <ssd1306_PrintDashboardMenu+0x8c>
			ssd1306_DrawBitmap(2,y,Dashboard_2_BLOCKCHAIN,40,40, White);
 8001694:	7ff9      	ldrb	r1, [r7, #31]
 8001696:	2301      	movs	r3, #1
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	2328      	movs	r3, #40	; 0x28
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	2328      	movs	r3, #40	; 0x28
 80016a0:	4a69      	ldr	r2, [pc, #420]	; (8001848 <ssd1306_PrintDashboardMenu+0x204>)
 80016a2:	2002      	movs	r0, #2
 80016a4:	f7ff fe1e 	bl	80012e4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_1_RF,40,40, White);
 80016a8:	7ff9      	ldrb	r1, [r7, #31]
 80016aa:	2301      	movs	r3, #1
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	2328      	movs	r3, #40	; 0x28
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2328      	movs	r3, #40	; 0x28
 80016b4:	4a65      	ldr	r2, [pc, #404]	; (800184c <ssd1306_PrintDashboardMenu+0x208>)
 80016b6:	202c      	movs	r0, #44	; 0x2c
 80016b8:	f7ff fe14 	bl	80012e4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_3_CLOUD,40,40, White);
 80016bc:	7ff9      	ldrb	r1, [r7, #31]
 80016be:	2301      	movs	r3, #1
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	2328      	movs	r3, #40	; 0x28
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2328      	movs	r3, #40	; 0x28
 80016c8:	4a61      	ldr	r2, [pc, #388]	; (8001850 <ssd1306_PrintDashboardMenu+0x20c>)
 80016ca:	2056      	movs	r0, #86	; 0x56
 80016cc:	f7ff fe0a 	bl	80012e4 <ssd1306_DrawBitmap>
		}
		if(indexMenu==1){
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d11d      	bne.n	8001712 <ssd1306_PrintDashboardMenu+0xce>
			ssd1306_DrawBitmap(2,y,Dashboard_1_RF,40,40, White);
 80016d6:	7ff9      	ldrb	r1, [r7, #31]
 80016d8:	2301      	movs	r3, #1
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	2328      	movs	r3, #40	; 0x28
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2328      	movs	r3, #40	; 0x28
 80016e2:	4a5c      	ldr	r2, [pc, #368]	; (8001854 <ssd1306_PrintDashboardMenu+0x210>)
 80016e4:	2002      	movs	r0, #2
 80016e6:	f7ff fdfd 	bl	80012e4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_3_CLOUD,40,40, White);
 80016ea:	7ff9      	ldrb	r1, [r7, #31]
 80016ec:	2301      	movs	r3, #1
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	2328      	movs	r3, #40	; 0x28
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2328      	movs	r3, #40	; 0x28
 80016f6:	4a58      	ldr	r2, [pc, #352]	; (8001858 <ssd1306_PrintDashboardMenu+0x214>)
 80016f8:	202c      	movs	r0, #44	; 0x2c
 80016fa:	f7ff fdf3 	bl	80012e4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_4_LORA,40,40, White);
 80016fe:	7ff9      	ldrb	r1, [r7, #31]
 8001700:	2301      	movs	r3, #1
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	2328      	movs	r3, #40	; 0x28
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	2328      	movs	r3, #40	; 0x28
 800170a:	4a54      	ldr	r2, [pc, #336]	; (800185c <ssd1306_PrintDashboardMenu+0x218>)
 800170c:	2056      	movs	r0, #86	; 0x56
 800170e:	f7ff fde9 	bl	80012e4 <ssd1306_DrawBitmap>
		}
		if(indexMenu==2){
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	2b02      	cmp	r3, #2
 8001716:	d11d      	bne.n	8001754 <ssd1306_PrintDashboardMenu+0x110>
			ssd1306_DrawBitmap(2,y,Dashboard_3_CLOUD,40,40, White);
 8001718:	7ff9      	ldrb	r1, [r7, #31]
 800171a:	2301      	movs	r3, #1
 800171c:	9301      	str	r3, [sp, #4]
 800171e:	2328      	movs	r3, #40	; 0x28
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	2328      	movs	r3, #40	; 0x28
 8001724:	4a4a      	ldr	r2, [pc, #296]	; (8001850 <ssd1306_PrintDashboardMenu+0x20c>)
 8001726:	2002      	movs	r0, #2
 8001728:	f7ff fddc 	bl	80012e4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_4_LORA,40,40, White);
 800172c:	7ff9      	ldrb	r1, [r7, #31]
 800172e:	2301      	movs	r3, #1
 8001730:	9301      	str	r3, [sp, #4]
 8001732:	2328      	movs	r3, #40	; 0x28
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	2328      	movs	r3, #40	; 0x28
 8001738:	4a49      	ldr	r2, [pc, #292]	; (8001860 <ssd1306_PrintDashboardMenu+0x21c>)
 800173a:	202c      	movs	r0, #44	; 0x2c
 800173c:	f7ff fdd2 	bl	80012e4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_5_BACK,40,40, White);
 8001740:	7ff9      	ldrb	r1, [r7, #31]
 8001742:	2301      	movs	r3, #1
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	2328      	movs	r3, #40	; 0x28
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	2328      	movs	r3, #40	; 0x28
 800174c:	4a45      	ldr	r2, [pc, #276]	; (8001864 <ssd1306_PrintDashboardMenu+0x220>)
 800174e:	2056      	movs	r0, #86	; 0x56
 8001750:	f7ff fdc8 	bl	80012e4 <ssd1306_DrawBitmap>
		}
		if(indexMenu==3){
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b03      	cmp	r3, #3
 8001758:	d11d      	bne.n	8001796 <ssd1306_PrintDashboardMenu+0x152>
			ssd1306_DrawBitmap(2,y,Dashboard_3_CLOUD,40,40, White);
 800175a:	7ff9      	ldrb	r1, [r7, #31]
 800175c:	2301      	movs	r3, #1
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	2328      	movs	r3, #40	; 0x28
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	2328      	movs	r3, #40	; 0x28
 8001766:	4a3a      	ldr	r2, [pc, #232]	; (8001850 <ssd1306_PrintDashboardMenu+0x20c>)
 8001768:	2002      	movs	r0, #2
 800176a:	f7ff fdbb 	bl	80012e4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_5_BACK,40,40, White);
 800176e:	7ff9      	ldrb	r1, [r7, #31]
 8001770:	2301      	movs	r3, #1
 8001772:	9301      	str	r3, [sp, #4]
 8001774:	2328      	movs	r3, #40	; 0x28
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2328      	movs	r3, #40	; 0x28
 800177a:	4a3b      	ldr	r2, [pc, #236]	; (8001868 <ssd1306_PrintDashboardMenu+0x224>)
 800177c:	202c      	movs	r0, #44	; 0x2c
 800177e:	f7ff fdb1 	bl	80012e4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_2_BLOCKCHAIN,40,40, White);
 8001782:	7ff9      	ldrb	r1, [r7, #31]
 8001784:	2301      	movs	r3, #1
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	2328      	movs	r3, #40	; 0x28
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	2328      	movs	r3, #40	; 0x28
 800178e:	4a2e      	ldr	r2, [pc, #184]	; (8001848 <ssd1306_PrintDashboardMenu+0x204>)
 8001790:	2056      	movs	r0, #86	; 0x56
 8001792:	f7ff fda7 	bl	80012e4 <ssd1306_DrawBitmap>
		}
		if(indexMenu==4){
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2b04      	cmp	r3, #4
 800179a:	d11d      	bne.n	80017d8 <ssd1306_PrintDashboardMenu+0x194>
			ssd1306_DrawBitmap(2,y,Dashboard_5_BACK,40,40, White);
 800179c:	7ff9      	ldrb	r1, [r7, #31]
 800179e:	2301      	movs	r3, #1
 80017a0:	9301      	str	r3, [sp, #4]
 80017a2:	2328      	movs	r3, #40	; 0x28
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2328      	movs	r3, #40	; 0x28
 80017a8:	4a2e      	ldr	r2, [pc, #184]	; (8001864 <ssd1306_PrintDashboardMenu+0x220>)
 80017aa:	2002      	movs	r0, #2
 80017ac:	f7ff fd9a 	bl	80012e4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_2_BLOCKCHAIN,40,40, White);
 80017b0:	7ff9      	ldrb	r1, [r7, #31]
 80017b2:	2301      	movs	r3, #1
 80017b4:	9301      	str	r3, [sp, #4]
 80017b6:	2328      	movs	r3, #40	; 0x28
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2328      	movs	r3, #40	; 0x28
 80017bc:	4a2b      	ldr	r2, [pc, #172]	; (800186c <ssd1306_PrintDashboardMenu+0x228>)
 80017be:	202c      	movs	r0, #44	; 0x2c
 80017c0:	f7ff fd90 	bl	80012e4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_1_RF,40,40, White);
 80017c4:	7ff9      	ldrb	r1, [r7, #31]
 80017c6:	2301      	movs	r3, #1
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	2328      	movs	r3, #40	; 0x28
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2328      	movs	r3, #40	; 0x28
 80017d0:	4a20      	ldr	r2, [pc, #128]	; (8001854 <ssd1306_PrintDashboardMenu+0x210>)
 80017d2:	2056      	movs	r0, #86	; 0x56
 80017d4:	f7ff fd86 	bl	80012e4 <ssd1306_DrawBitmap>
		}
		 if(value >= 2850 && value <= 2950){
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f640 3221 	movw	r2, #2849	; 0xb21
 80017de:	4293      	cmp	r3, r2
 80017e0:	dd0c      	ble.n	80017fc <ssd1306_PrintDashboardMenu+0x1b8>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f640 3286 	movw	r2, #2950	; 0xb86
 80017e8:	4293      	cmp	r3, r2
 80017ea:	dc07      	bgt.n	80017fc <ssd1306_PrintDashboardMenu+0x1b8>
			strcpy(stringDirection, "DERECHA");
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	4a1f      	ldr	r2, [pc, #124]	; (8001870 <ssd1306_PrintDashboardMenu+0x22c>)
 80017f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80017fa:	e01b      	b.n	8001834 <ssd1306_PrintDashboardMenu+0x1f0>
		}
		else if(value >= 1850 && value <= 1950){
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f240 7239 	movw	r2, #1849	; 0x739
 8001802:	4293      	cmp	r3, r2
 8001804:	dd0b      	ble.n	800181e <ssd1306_PrintDashboardMenu+0x1da>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f240 729e 	movw	r2, #1950	; 0x79e
 800180c:	4293      	cmp	r3, r2
 800180e:	dc06      	bgt.n	800181e <ssd1306_PrintDashboardMenu+0x1da>
			strcpy(stringDirection, "IZQUIERDA");
 8001810:	4a18      	ldr	r2, [pc, #96]	; (8001874 <ssd1306_PrintDashboardMenu+0x230>)
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	ca07      	ldmia	r2, {r0, r1, r2}
 8001818:	c303      	stmia	r3!, {r0, r1}
 800181a:	801a      	strh	r2, [r3, #0]
 800181c:	e00a      	b.n	8001834 <ssd1306_PrintDashboardMenu+0x1f0>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4a15      	ldr	r2, [pc, #84]	; (8001878 <ssd1306_PrintDashboardMenu+0x234>)
 8001824:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001828:	6018      	str	r0, [r3, #0]
 800182a:	3304      	adds	r3, #4
 800182c:	8019      	strh	r1, [r3, #0]
 800182e:	3302      	adds	r3, #2
 8001830:	0c0a      	lsrs	r2, r1, #16
 8001832:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8001834:	f7ff fc14 	bl	8001060 <ssd1306_UpdateScreen>
}
 8001838:	bf00      	nop
 800183a:	3720      	adds	r7, #32
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000010 	.word	0x20000010
 8001844:	08015288 	.word	0x08015288
 8001848:	08019e20 	.word	0x08019e20
 800184c:	0801a140 	.word	0x0801a140
 8001850:	08019ee8 	.word	0x08019ee8
 8001854:	08019d58 	.word	0x08019d58
 8001858:	0801a2d0 	.word	0x0801a2d0
 800185c:	08019c90 	.word	0x08019c90
 8001860:	0801a078 	.word	0x0801a078
 8001864:	08019fb0 	.word	0x08019fb0
 8001868:	0801a398 	.word	0x0801a398
 800186c:	0801a208 	.word	0x0801a208
 8001870:	080152e8 	.word	0x080152e8
 8001874:	080152f0 	.word	0x080152f0
 8001878:	080152fc 	.word	0x080152fc

0800187c <ssd1306_PrintEnergyMenu>:

void ssd1306_PrintEnergyMenu(int value, int indexMenu, int screen){
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	f107 0318 	add.w	r3, r7, #24
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 800189a:	2000      	movs	r0, #0
 800189c:	f7ff fbbc 	bl	8001018 <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(2, y);
 80018a0:	7ffb      	ldrb	r3, [r7, #31]
 80018a2:	4619      	mov	r1, r3
 80018a4:	2002      	movs	r0, #2
 80018a6:	f7ff fd05 	bl	80012b4 <ssd1306_SetCursor>
	    ssd1306_WriteString("ENERGY", Font_11x18, White);
 80018aa:	4a42      	ldr	r2, [pc, #264]	; (80019b4 <ssd1306_PrintEnergyMenu+0x138>)
 80018ac:	2301      	movs	r3, #1
 80018ae:	ca06      	ldmia	r2, {r1, r2}
 80018b0:	4841      	ldr	r0, [pc, #260]	; (80019b8 <ssd1306_PrintEnergyMenu+0x13c>)
 80018b2:	f7ff fcd9 	bl	8001268 <ssd1306_WriteString>
	    //ssd1306_DrawRectangle(0,y, 128, 10, White);

	    y += 20;
 80018b6:	7ffb      	ldrb	r3, [r7, #31]
 80018b8:	3314      	adds	r3, #20
 80018ba:	77fb      	strb	r3, [r7, #31]
	    #endif



		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 80018bc:	7ffb      	ldrb	r3, [r7, #31]
 80018be:	4619      	mov	r1, r3
 80018c0:	2002      	movs	r0, #2
 80018c2:	f7ff fcf7 	bl	80012b4 <ssd1306_SetCursor>
	    if(indexMenu==0){
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d106      	bne.n	80018da <ssd1306_PrintEnergyMenu+0x5e>
	        ssd1306_WriteString("Power Supply", Font_7x10, Black);
 80018cc:	4a3b      	ldr	r2, [pc, #236]	; (80019bc <ssd1306_PrintEnergyMenu+0x140>)
 80018ce:	2300      	movs	r3, #0
 80018d0:	ca06      	ldmia	r2, {r1, r2}
 80018d2:	483b      	ldr	r0, [pc, #236]	; (80019c0 <ssd1306_PrintEnergyMenu+0x144>)
 80018d4:	f7ff fcc8 	bl	8001268 <ssd1306_WriteString>
 80018d8:	e005      	b.n	80018e6 <ssd1306_PrintEnergyMenu+0x6a>
	    }
	    else{
	        ssd1306_WriteString("Power Supply", Font_7x10, White);
 80018da:	4a38      	ldr	r2, [pc, #224]	; (80019bc <ssd1306_PrintEnergyMenu+0x140>)
 80018dc:	2301      	movs	r3, #1
 80018de:	ca06      	ldmia	r2, {r1, r2}
 80018e0:	4837      	ldr	r0, [pc, #220]	; (80019c0 <ssd1306_PrintEnergyMenu+0x144>)
 80018e2:	f7ff fcc1 	bl	8001268 <ssd1306_WriteString>
	    }
		y += 10;
 80018e6:	7ffb      	ldrb	r3, [r7, #31]
 80018e8:	330a      	adds	r3, #10
 80018ea:	77fb      	strb	r3, [r7, #31]
		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 80018ec:	7ffb      	ldrb	r3, [r7, #31]
 80018ee:	4619      	mov	r1, r3
 80018f0:	2002      	movs	r0, #2
 80018f2:	f7ff fcdf 	bl	80012b4 <ssd1306_SetCursor>
		if(indexMenu==1){
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d106      	bne.n	800190a <ssd1306_PrintEnergyMenu+0x8e>
	        ssd1306_WriteString("Status: 80%", Font_7x10, Black);
 80018fc:	4a2f      	ldr	r2, [pc, #188]	; (80019bc <ssd1306_PrintEnergyMenu+0x140>)
 80018fe:	2300      	movs	r3, #0
 8001900:	ca06      	ldmia	r2, {r1, r2}
 8001902:	4830      	ldr	r0, [pc, #192]	; (80019c4 <ssd1306_PrintEnergyMenu+0x148>)
 8001904:	f7ff fcb0 	bl	8001268 <ssd1306_WriteString>
 8001908:	e005      	b.n	8001916 <ssd1306_PrintEnergyMenu+0x9a>
		}
		else{
	        ssd1306_WriteString("Status: 80%", Font_7x10, White);
 800190a:	4a2c      	ldr	r2, [pc, #176]	; (80019bc <ssd1306_PrintEnergyMenu+0x140>)
 800190c:	2301      	movs	r3, #1
 800190e:	ca06      	ldmia	r2, {r1, r2}
 8001910:	482c      	ldr	r0, [pc, #176]	; (80019c4 <ssd1306_PrintEnergyMenu+0x148>)
 8001912:	f7ff fca9 	bl	8001268 <ssd1306_WriteString>
		}
		y += 10;
 8001916:	7ffb      	ldrb	r3, [r7, #31]
 8001918:	330a      	adds	r3, #10
 800191a:	77fb      	strb	r3, [r7, #31]

		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 800191c:	7ffb      	ldrb	r3, [r7, #31]
 800191e:	4619      	mov	r1, r3
 8001920:	2002      	movs	r0, #2
 8001922:	f7ff fcc7 	bl	80012b4 <ssd1306_SetCursor>
		if(indexMenu==2){
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d106      	bne.n	800193a <ssd1306_PrintEnergyMenu+0xbe>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 800192c:	4a23      	ldr	r2, [pc, #140]	; (80019bc <ssd1306_PrintEnergyMenu+0x140>)
 800192e:	2300      	movs	r3, #0
 8001930:	ca06      	ldmia	r2, {r1, r2}
 8001932:	4825      	ldr	r0, [pc, #148]	; (80019c8 <ssd1306_PrintEnergyMenu+0x14c>)
 8001934:	f7ff fc98 	bl	8001268 <ssd1306_WriteString>
 8001938:	e005      	b.n	8001946 <ssd1306_PrintEnergyMenu+0xca>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 800193a:	4a20      	ldr	r2, [pc, #128]	; (80019bc <ssd1306_PrintEnergyMenu+0x140>)
 800193c:	2301      	movs	r3, #1
 800193e:	ca06      	ldmia	r2, {r1, r2}
 8001940:	4821      	ldr	r0, [pc, #132]	; (80019c8 <ssd1306_PrintEnergyMenu+0x14c>)
 8001942:	f7ff fc91 	bl	8001268 <ssd1306_WriteString>
		}
		y += 10;
 8001946:	7ffb      	ldrb	r3, [r7, #31]
 8001948:	330a      	adds	r3, #10
 800194a:	77fb      	strb	r3, [r7, #31]

		#endif



		 if(value >= 2850 && value <= 2950){
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f640 3221 	movw	r2, #2849	; 0xb21
 8001952:	4293      	cmp	r3, r2
 8001954:	dd0c      	ble.n	8001970 <ssd1306_PrintEnergyMenu+0xf4>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f640 3286 	movw	r2, #2950	; 0xb86
 800195c:	4293      	cmp	r3, r2
 800195e:	dc07      	bgt.n	8001970 <ssd1306_PrintEnergyMenu+0xf4>
			strcpy(stringDirection, "DERECHA");
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	4a19      	ldr	r2, [pc, #100]	; (80019cc <ssd1306_PrintEnergyMenu+0x150>)
 8001966:	e892 0003 	ldmia.w	r2, {r0, r1}
 800196a:	e883 0003 	stmia.w	r3, {r0, r1}
 800196e:	e01b      	b.n	80019a8 <ssd1306_PrintEnergyMenu+0x12c>
		}
		else if(value >= 1850 && value <= 1950){
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f240 7239 	movw	r2, #1849	; 0x739
 8001976:	4293      	cmp	r3, r2
 8001978:	dd0b      	ble.n	8001992 <ssd1306_PrintEnergyMenu+0x116>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f240 729e 	movw	r2, #1950	; 0x79e
 8001980:	4293      	cmp	r3, r2
 8001982:	dc06      	bgt.n	8001992 <ssd1306_PrintEnergyMenu+0x116>
			strcpy(stringDirection, "IZQUIERDA");
 8001984:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <ssd1306_PrintEnergyMenu+0x154>)
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	ca07      	ldmia	r2, {r0, r1, r2}
 800198c:	c303      	stmia	r3!, {r0, r1}
 800198e:	801a      	strh	r2, [r3, #0]
 8001990:	e00a      	b.n	80019a8 <ssd1306_PrintEnergyMenu+0x12c>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <ssd1306_PrintEnergyMenu+0x158>)
 8001998:	e892 0003 	ldmia.w	r2, {r0, r1}
 800199c:	6018      	str	r0, [r3, #0]
 800199e:	3304      	adds	r3, #4
 80019a0:	8019      	strh	r1, [r3, #0]
 80019a2:	3302      	adds	r3, #2
 80019a4:	0c0a      	lsrs	r2, r1, #16
 80019a6:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 80019a8:	f7ff fb5a 	bl	8001060 <ssd1306_UpdateScreen>
}
 80019ac:	bf00      	nop
 80019ae:	3720      	adds	r7, #32
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000010 	.word	0x20000010
 80019b8:	080152d4 	.word	0x080152d4
 80019bc:	20000008 	.word	0x20000008
 80019c0:	08015304 	.word	0x08015304
 80019c4:	08015314 	.word	0x08015314
 80019c8:	08015320 	.word	0x08015320
 80019cc:	080152e8 	.word	0x080152e8
 80019d0:	080152f0 	.word	0x080152f0
 80019d4:	080152fc 	.word	0x080152fc

080019d8 <ssd1306_PrintRFMenu>:

void ssd1306_PrintRFMenu(int value, int indexMenu, int screen){
 80019d8:	b580      	push	{r7, lr}
 80019da:	b088      	sub	sp, #32
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
		 uint8_t y = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	f107 0318 	add.w	r3, r7, #24
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 80019f6:	2000      	movs	r0, #0
 80019f8:	f7ff fb0e 	bl	8001018 <ssd1306_Fill>

	    ssd1306_SetCursor(35, y);
 80019fc:	7ffb      	ldrb	r3, [r7, #31]
 80019fe:	4619      	mov	r1, r3
 8001a00:	2023      	movs	r0, #35	; 0x23
 8001a02:	f7ff fc57 	bl	80012b4 <ssd1306_SetCursor>
	    ssd1306_WriteString("BROADCAST", Font_7x10, White);
 8001a06:	4a5a      	ldr	r2, [pc, #360]	; (8001b70 <ssd1306_PrintRFMenu+0x198>)
 8001a08:	2301      	movs	r3, #1
 8001a0a:	ca06      	ldmia	r2, {r1, r2}
 8001a0c:	4859      	ldr	r0, [pc, #356]	; (8001b74 <ssd1306_PrintRFMenu+0x19c>)
 8001a0e:	f7ff fc2b 	bl	8001268 <ssd1306_WriteString>
	    y += 10;
 8001a12:	7ffb      	ldrb	r3, [r7, #31]
 8001a14:	330a      	adds	r3, #10
 8001a16:	77fb      	strb	r3, [r7, #31]


		ssd1306_SetCursor(2, y);
 8001a18:	7ffb      	ldrb	r3, [r7, #31]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	2002      	movs	r0, #2
 8001a1e:	f7ff fc49 	bl	80012b4 <ssd1306_SetCursor>
			if(indexMenu==0){
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d106      	bne.n	8001a36 <ssd1306_PrintRFMenu+0x5e>
				ssd1306_WriteString("Channel: 102.9 MHz", Font_7x10, Black);
 8001a28:	4a51      	ldr	r2, [pc, #324]	; (8001b70 <ssd1306_PrintRFMenu+0x198>)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	ca06      	ldmia	r2, {r1, r2}
 8001a2e:	4852      	ldr	r0, [pc, #328]	; (8001b78 <ssd1306_PrintRFMenu+0x1a0>)
 8001a30:	f7ff fc1a 	bl	8001268 <ssd1306_WriteString>
 8001a34:	e005      	b.n	8001a42 <ssd1306_PrintRFMenu+0x6a>
			}
			else{
				ssd1306_WriteString("Channel: 102.9 MHz", Font_7x10, White);
 8001a36:	4a4e      	ldr	r2, [pc, #312]	; (8001b70 <ssd1306_PrintRFMenu+0x198>)
 8001a38:	2301      	movs	r3, #1
 8001a3a:	ca06      	ldmia	r2, {r1, r2}
 8001a3c:	484e      	ldr	r0, [pc, #312]	; (8001b78 <ssd1306_PrintRFMenu+0x1a0>)
 8001a3e:	f7ff fc13 	bl	8001268 <ssd1306_WriteString>
			}
		y += 10;
 8001a42:	7ffb      	ldrb	r3, [r7, #31]
 8001a44:	330a      	adds	r3, #10
 8001a46:	77fb      	strb	r3, [r7, #31]
		

		ssd1306_SetCursor(2, y);
 8001a48:	7ffb      	ldrb	r3, [r7, #31]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	2002      	movs	r0, #2
 8001a4e:	f7ff fc31 	bl	80012b4 <ssd1306_SetCursor>
		if(indexMenu==1){
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d106      	bne.n	8001a66 <ssd1306_PrintRFMenu+0x8e>
	        ssd1306_WriteString("Standard: DVB-T2", Font_7x10, Black);
 8001a58:	4a45      	ldr	r2, [pc, #276]	; (8001b70 <ssd1306_PrintRFMenu+0x198>)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	ca06      	ldmia	r2, {r1, r2}
 8001a5e:	4847      	ldr	r0, [pc, #284]	; (8001b7c <ssd1306_PrintRFMenu+0x1a4>)
 8001a60:	f7ff fc02 	bl	8001268 <ssd1306_WriteString>
 8001a64:	e005      	b.n	8001a72 <ssd1306_PrintRFMenu+0x9a>
		}
		else{
	        ssd1306_WriteString("Standard: DVB-T2", Font_7x10, White);
 8001a66:	4a42      	ldr	r2, [pc, #264]	; (8001b70 <ssd1306_PrintRFMenu+0x198>)
 8001a68:	2301      	movs	r3, #1
 8001a6a:	ca06      	ldmia	r2, {r1, r2}
 8001a6c:	4843      	ldr	r0, [pc, #268]	; (8001b7c <ssd1306_PrintRFMenu+0x1a4>)
 8001a6e:	f7ff fbfb 	bl	8001268 <ssd1306_WriteString>
		}
		y += 10;
 8001a72:	7ffb      	ldrb	r3, [r7, #31]
 8001a74:	330a      	adds	r3, #10
 8001a76:	77fb      	strb	r3, [r7, #31]

		ssd1306_SetCursor(2, y);
 8001a78:	7ffb      	ldrb	r3, [r7, #31]
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	2002      	movs	r0, #2
 8001a7e:	f7ff fc19 	bl	80012b4 <ssd1306_SetCursor>
		if(indexMenu==2){
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d106      	bne.n	8001a96 <ssd1306_PrintRFMenu+0xbe>
	        ssd1306_WriteString("MER: 0.5 dB", Font_7x10, Black);
 8001a88:	4a39      	ldr	r2, [pc, #228]	; (8001b70 <ssd1306_PrintRFMenu+0x198>)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	ca06      	ldmia	r2, {r1, r2}
 8001a8e:	483c      	ldr	r0, [pc, #240]	; (8001b80 <ssd1306_PrintRFMenu+0x1a8>)
 8001a90:	f7ff fbea 	bl	8001268 <ssd1306_WriteString>
 8001a94:	e005      	b.n	8001aa2 <ssd1306_PrintRFMenu+0xca>
		}
		else{
	        ssd1306_WriteString("MER: 0.5 dB", Font_7x10, White);
 8001a96:	4a36      	ldr	r2, [pc, #216]	; (8001b70 <ssd1306_PrintRFMenu+0x198>)
 8001a98:	2301      	movs	r3, #1
 8001a9a:	ca06      	ldmia	r2, {r1, r2}
 8001a9c:	4838      	ldr	r0, [pc, #224]	; (8001b80 <ssd1306_PrintRFMenu+0x1a8>)
 8001a9e:	f7ff fbe3 	bl	8001268 <ssd1306_WriteString>
		}
		y += 10;
 8001aa2:	7ffb      	ldrb	r3, [r7, #31]
 8001aa4:	330a      	adds	r3, #10
 8001aa6:	77fb      	strb	r3, [r7, #31]
		

		ssd1306_SetCursor(2, y);
 8001aa8:	7ffb      	ldrb	r3, [r7, #31]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	2002      	movs	r0, #2
 8001aae:	f7ff fc01 	bl	80012b4 <ssd1306_SetCursor>
		if(indexMenu==3){
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d106      	bne.n	8001ac6 <ssd1306_PrintRFMenu+0xee>
	        ssd1306_WriteString("BER: 0.5", Font_7x10, Black);
 8001ab8:	4a2d      	ldr	r2, [pc, #180]	; (8001b70 <ssd1306_PrintRFMenu+0x198>)
 8001aba:	2300      	movs	r3, #0
 8001abc:	ca06      	ldmia	r2, {r1, r2}
 8001abe:	4831      	ldr	r0, [pc, #196]	; (8001b84 <ssd1306_PrintRFMenu+0x1ac>)
 8001ac0:	f7ff fbd2 	bl	8001268 <ssd1306_WriteString>
 8001ac4:	e005      	b.n	8001ad2 <ssd1306_PrintRFMenu+0xfa>
		}
		else{
	        ssd1306_WriteString("BER: 0.5", Font_7x10, White);
 8001ac6:	4a2a      	ldr	r2, [pc, #168]	; (8001b70 <ssd1306_PrintRFMenu+0x198>)
 8001ac8:	2301      	movs	r3, #1
 8001aca:	ca06      	ldmia	r2, {r1, r2}
 8001acc:	482d      	ldr	r0, [pc, #180]	; (8001b84 <ssd1306_PrintRFMenu+0x1ac>)
 8001ace:	f7ff fbcb 	bl	8001268 <ssd1306_WriteString>
		}
		y += 10;
 8001ad2:	7ffb      	ldrb	r3, [r7, #31]
 8001ad4:	330a      	adds	r3, #10
 8001ad6:	77fb      	strb	r3, [r7, #31]

		

		ssd1306_SetCursor(2, y);
 8001ad8:	7ffb      	ldrb	r3, [r7, #31]
 8001ada:	4619      	mov	r1, r3
 8001adc:	2002      	movs	r0, #2
 8001ade:	f7ff fbe9 	bl	80012b4 <ssd1306_SetCursor>
		if(indexMenu==4){
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d106      	bne.n	8001af6 <ssd1306_PrintRFMenu+0x11e>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 8001ae8:	4a21      	ldr	r2, [pc, #132]	; (8001b70 <ssd1306_PrintRFMenu+0x198>)
 8001aea:	2300      	movs	r3, #0
 8001aec:	ca06      	ldmia	r2, {r1, r2}
 8001aee:	4826      	ldr	r0, [pc, #152]	; (8001b88 <ssd1306_PrintRFMenu+0x1b0>)
 8001af0:	f7ff fbba 	bl	8001268 <ssd1306_WriteString>
 8001af4:	e005      	b.n	8001b02 <ssd1306_PrintRFMenu+0x12a>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 8001af6:	4a1e      	ldr	r2, [pc, #120]	; (8001b70 <ssd1306_PrintRFMenu+0x198>)
 8001af8:	2301      	movs	r3, #1
 8001afa:	ca06      	ldmia	r2, {r1, r2}
 8001afc:	4822      	ldr	r0, [pc, #136]	; (8001b88 <ssd1306_PrintRFMenu+0x1b0>)
 8001afe:	f7ff fbb3 	bl	8001268 <ssd1306_WriteString>
		}
		y += 10;
 8001b02:	7ffb      	ldrb	r3, [r7, #31]
 8001b04:	330a      	adds	r3, #10
 8001b06:	77fb      	strb	r3, [r7, #31]

		



		 if(value >= 2850 && value <= 2950){
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f640 3221 	movw	r2, #2849	; 0xb21
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	dd0c      	ble.n	8001b2c <ssd1306_PrintRFMenu+0x154>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f640 3286 	movw	r2, #2950	; 0xb86
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	dc07      	bgt.n	8001b2c <ssd1306_PrintRFMenu+0x154>
			strcpy(stringDirection, "DERECHA");
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4a1a      	ldr	r2, [pc, #104]	; (8001b8c <ssd1306_PrintRFMenu+0x1b4>)
 8001b22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b26:	e883 0003 	stmia.w	r3, {r0, r1}
 8001b2a:	e01b      	b.n	8001b64 <ssd1306_PrintRFMenu+0x18c>
		}
		else if(value >= 1850 && value <= 1950){
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f240 7239 	movw	r2, #1849	; 0x739
 8001b32:	4293      	cmp	r3, r2
 8001b34:	dd0b      	ble.n	8001b4e <ssd1306_PrintRFMenu+0x176>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f240 729e 	movw	r2, #1950	; 0x79e
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	dc06      	bgt.n	8001b4e <ssd1306_PrintRFMenu+0x176>
			strcpy(stringDirection, "IZQUIERDA");
 8001b40:	4a13      	ldr	r2, [pc, #76]	; (8001b90 <ssd1306_PrintRFMenu+0x1b8>)
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b48:	c303      	stmia	r3!, {r0, r1}
 8001b4a:	801a      	strh	r2, [r3, #0]
 8001b4c:	e00a      	b.n	8001b64 <ssd1306_PrintRFMenu+0x18c>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	4a10      	ldr	r2, [pc, #64]	; (8001b94 <ssd1306_PrintRFMenu+0x1bc>)
 8001b54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b58:	6018      	str	r0, [r3, #0]
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	8019      	strh	r1, [r3, #0]
 8001b5e:	3302      	adds	r3, #2
 8001b60:	0c0a      	lsrs	r2, r1, #16
 8001b62:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8001b64:	f7ff fa7c 	bl	8001060 <ssd1306_UpdateScreen>
}
 8001b68:	bf00      	nop
 8001b6a:	3720      	adds	r7, #32
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000008 	.word	0x20000008
 8001b74:	08015328 	.word	0x08015328
 8001b78:	08015334 	.word	0x08015334
 8001b7c:	08015348 	.word	0x08015348
 8001b80:	0801535c 	.word	0x0801535c
 8001b84:	08015368 	.word	0x08015368
 8001b88:	08015320 	.word	0x08015320
 8001b8c:	080152e8 	.word	0x080152e8
 8001b90:	080152f0 	.word	0x080152f0
 8001b94:	080152fc 	.word	0x080152fc

08001b98 <ssd1306_PrintCloudMenu>:
void ssd1306_PrintCloudMenu(int value, int indexMenu, int screen, char  IPv4, char  Gateway){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	70fb      	strb	r3, [r7, #3]
		 uint8_t y = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	f107 0318 	add.w	r3, r7, #24
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f7ff fa2d 	bl	8001018 <ssd1306_Fill>

	    ssd1306_SetCursor(35, y);
 8001bbe:	7ffb      	ldrb	r3, [r7, #31]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	2023      	movs	r0, #35	; 0x23
 8001bc4:	f7ff fb76 	bl	80012b4 <ssd1306_SetCursor>
	    ssd1306_WriteString("CLOUD", Font_7x10, White);
 8001bc8:	4a61      	ldr	r2, [pc, #388]	; (8001d50 <ssd1306_PrintCloudMenu+0x1b8>)
 8001bca:	2301      	movs	r3, #1
 8001bcc:	ca06      	ldmia	r2, {r1, r2}
 8001bce:	4861      	ldr	r0, [pc, #388]	; (8001d54 <ssd1306_PrintCloudMenu+0x1bc>)
 8001bd0:	f7ff fb4a 	bl	8001268 <ssd1306_WriteString>
	    y += 10;
 8001bd4:	7ffb      	ldrb	r3, [r7, #31]
 8001bd6:	330a      	adds	r3, #10
 8001bd8:	77fb      	strb	r3, [r7, #31]


		ssd1306_SetCursor(2, y);
 8001bda:	7ffb      	ldrb	r3, [r7, #31]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	2002      	movs	r0, #2
 8001be0:	f7ff fb68 	bl	80012b4 <ssd1306_SetCursor>
			if(indexMenu==0){
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d115      	bne.n	8001c16 <ssd1306_PrintCloudMenu+0x7e>
				ssd1306_WriteString("IPv4:", Font_7x10, Black);
 8001bea:	4a59      	ldr	r2, [pc, #356]	; (8001d50 <ssd1306_PrintCloudMenu+0x1b8>)
 8001bec:	2300      	movs	r3, #0
 8001bee:	ca06      	ldmia	r2, {r1, r2}
 8001bf0:	4859      	ldr	r0, [pc, #356]	; (8001d58 <ssd1306_PrintCloudMenu+0x1c0>)
 8001bf2:	f7ff fb39 	bl	8001268 <ssd1306_WriteString>
				y += 10;
 8001bf6:	7ffb      	ldrb	r3, [r7, #31]
 8001bf8:	330a      	adds	r3, #10
 8001bfa:	77fb      	strb	r3, [r7, #31]
				ssd1306_SetCursor(2, y);
 8001bfc:	7ffb      	ldrb	r3, [r7, #31]
 8001bfe:	4619      	mov	r1, r3
 8001c00:	2002      	movs	r0, #2
 8001c02:	f7ff fb57 	bl	80012b4 <ssd1306_SetCursor>
				ssd1306_WriteString(IPv4, Font_6x8, Black);
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	4a54      	ldr	r2, [pc, #336]	; (8001d5c <ssd1306_PrintCloudMenu+0x1c4>)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	ca06      	ldmia	r2, {r1, r2}
 8001c10:	f7ff fb2a 	bl	8001268 <ssd1306_WriteString>
 8001c14:	e014      	b.n	8001c40 <ssd1306_PrintCloudMenu+0xa8>

			}
			else{
				ssd1306_WriteString("IPV4:", Font_7x10, White);
 8001c16:	4a4e      	ldr	r2, [pc, #312]	; (8001d50 <ssd1306_PrintCloudMenu+0x1b8>)
 8001c18:	2301      	movs	r3, #1
 8001c1a:	ca06      	ldmia	r2, {r1, r2}
 8001c1c:	4850      	ldr	r0, [pc, #320]	; (8001d60 <ssd1306_PrintCloudMenu+0x1c8>)
 8001c1e:	f7ff fb23 	bl	8001268 <ssd1306_WriteString>
				y += 10;
 8001c22:	7ffb      	ldrb	r3, [r7, #31]
 8001c24:	330a      	adds	r3, #10
 8001c26:	77fb      	strb	r3, [r7, #31]
				ssd1306_SetCursor(2, y);
 8001c28:	7ffb      	ldrb	r3, [r7, #31]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	2002      	movs	r0, #2
 8001c2e:	f7ff fb41 	bl	80012b4 <ssd1306_SetCursor>
				ssd1306_WriteString(IPv4, Font_6x8, White);
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	4618      	mov	r0, r3
 8001c36:	4a49      	ldr	r2, [pc, #292]	; (8001d5c <ssd1306_PrintCloudMenu+0x1c4>)
 8001c38:	2301      	movs	r3, #1
 8001c3a:	ca06      	ldmia	r2, {r1, r2}
 8001c3c:	f7ff fb14 	bl	8001268 <ssd1306_WriteString>
			}
		y += 10;
 8001c40:	7ffb      	ldrb	r3, [r7, #31]
 8001c42:	330a      	adds	r3, #10
 8001c44:	77fb      	strb	r3, [r7, #31]
		
		ssd1306_SetCursor(2, y);
 8001c46:	7ffb      	ldrb	r3, [r7, #31]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	2002      	movs	r0, #2
 8001c4c:	f7ff fb32 	bl	80012b4 <ssd1306_SetCursor>
		if(indexMenu==1){
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d116      	bne.n	8001c84 <ssd1306_PrintCloudMenu+0xec>
			ssd1306_WriteString("Gateway:", Font_7x10, Black);
 8001c56:	4a3e      	ldr	r2, [pc, #248]	; (8001d50 <ssd1306_PrintCloudMenu+0x1b8>)
 8001c58:	2300      	movs	r3, #0
 8001c5a:	ca06      	ldmia	r2, {r1, r2}
 8001c5c:	4841      	ldr	r0, [pc, #260]	; (8001d64 <ssd1306_PrintCloudMenu+0x1cc>)
 8001c5e:	f7ff fb03 	bl	8001268 <ssd1306_WriteString>
			y += 10;
 8001c62:	7ffb      	ldrb	r3, [r7, #31]
 8001c64:	330a      	adds	r3, #10
 8001c66:	77fb      	strb	r3, [r7, #31]
			ssd1306_SetCursor(2, y);
 8001c68:	7ffb      	ldrb	r3, [r7, #31]
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	2002      	movs	r0, #2
 8001c6e:	f7ff fb21 	bl	80012b4 <ssd1306_SetCursor>
			ssd1306_WriteString(Gateway, Font_6x8, Black);	
 8001c72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c76:	4618      	mov	r0, r3
 8001c78:	4a38      	ldr	r2, [pc, #224]	; (8001d5c <ssd1306_PrintCloudMenu+0x1c4>)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	ca06      	ldmia	r2, {r1, r2}
 8001c7e:	f7ff faf3 	bl	8001268 <ssd1306_WriteString>
 8001c82:	e015      	b.n	8001cb0 <ssd1306_PrintCloudMenu+0x118>
		}
		else{
		ssd1306_WriteString("Gateway:", Font_7x10, White);
 8001c84:	4a32      	ldr	r2, [pc, #200]	; (8001d50 <ssd1306_PrintCloudMenu+0x1b8>)
 8001c86:	2301      	movs	r3, #1
 8001c88:	ca06      	ldmia	r2, {r1, r2}
 8001c8a:	4836      	ldr	r0, [pc, #216]	; (8001d64 <ssd1306_PrintCloudMenu+0x1cc>)
 8001c8c:	f7ff faec 	bl	8001268 <ssd1306_WriteString>
			y += 10;
 8001c90:	7ffb      	ldrb	r3, [r7, #31]
 8001c92:	330a      	adds	r3, #10
 8001c94:	77fb      	strb	r3, [r7, #31]
			ssd1306_SetCursor(2, y);
 8001c96:	7ffb      	ldrb	r3, [r7, #31]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	2002      	movs	r0, #2
 8001c9c:	f7ff fb0a 	bl	80012b4 <ssd1306_SetCursor>
			ssd1306_WriteString(Gateway, Font_6x8, White);
 8001ca0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	4a2d      	ldr	r2, [pc, #180]	; (8001d5c <ssd1306_PrintCloudMenu+0x1c4>)
 8001ca8:	2301      	movs	r3, #1
 8001caa:	ca06      	ldmia	r2, {r1, r2}
 8001cac:	f7ff fadc 	bl	8001268 <ssd1306_WriteString>
		}
		y += 10;
 8001cb0:	7ffb      	ldrb	r3, [r7, #31]
 8001cb2:	330a      	adds	r3, #10
 8001cb4:	77fb      	strb	r3, [r7, #31]
		}
		y += 10; */

		

		ssd1306_SetCursor(2, y);
 8001cb6:	7ffb      	ldrb	r3, [r7, #31]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	2002      	movs	r0, #2
 8001cbc:	f7ff fafa 	bl	80012b4 <ssd1306_SetCursor>
		if(indexMenu==2){
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d106      	bne.n	8001cd4 <ssd1306_PrintCloudMenu+0x13c>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 8001cc6:	4a22      	ldr	r2, [pc, #136]	; (8001d50 <ssd1306_PrintCloudMenu+0x1b8>)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	ca06      	ldmia	r2, {r1, r2}
 8001ccc:	4826      	ldr	r0, [pc, #152]	; (8001d68 <ssd1306_PrintCloudMenu+0x1d0>)
 8001cce:	f7ff facb 	bl	8001268 <ssd1306_WriteString>
 8001cd2:	e005      	b.n	8001ce0 <ssd1306_PrintCloudMenu+0x148>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 8001cd4:	4a1e      	ldr	r2, [pc, #120]	; (8001d50 <ssd1306_PrintCloudMenu+0x1b8>)
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	ca06      	ldmia	r2, {r1, r2}
 8001cda:	4823      	ldr	r0, [pc, #140]	; (8001d68 <ssd1306_PrintCloudMenu+0x1d0>)
 8001cdc:	f7ff fac4 	bl	8001268 <ssd1306_WriteString>
		}
		y += 10;
 8001ce0:	7ffb      	ldrb	r3, [r7, #31]
 8001ce2:	330a      	adds	r3, #10
 8001ce4:	77fb      	strb	r3, [r7, #31]


		 if(value >= 2850 && value <= 2950){
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f640 3221 	movw	r2, #2849	; 0xb21
 8001cec:	4293      	cmp	r3, r2
 8001cee:	dd0c      	ble.n	8001d0a <ssd1306_PrintCloudMenu+0x172>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f640 3286 	movw	r2, #2950	; 0xb86
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	dc07      	bgt.n	8001d0a <ssd1306_PrintCloudMenu+0x172>
			strcpy(stringDirection, "DERECHA");
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4a1b      	ldr	r2, [pc, #108]	; (8001d6c <ssd1306_PrintCloudMenu+0x1d4>)
 8001d00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d04:	e883 0003 	stmia.w	r3, {r0, r1}
 8001d08:	e01b      	b.n	8001d42 <ssd1306_PrintCloudMenu+0x1aa>
		}
		else if(value >= 1850 && value <= 1950){
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f240 7239 	movw	r2, #1849	; 0x739
 8001d10:	4293      	cmp	r3, r2
 8001d12:	dd0b      	ble.n	8001d2c <ssd1306_PrintCloudMenu+0x194>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f240 729e 	movw	r2, #1950	; 0x79e
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	dc06      	bgt.n	8001d2c <ssd1306_PrintCloudMenu+0x194>
			strcpy(stringDirection, "IZQUIERDA");
 8001d1e:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <ssd1306_PrintCloudMenu+0x1d8>)
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d26:	c303      	stmia	r3!, {r0, r1}
 8001d28:	801a      	strh	r2, [r3, #0]
 8001d2a:	e00a      	b.n	8001d42 <ssd1306_PrintCloudMenu+0x1aa>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	4a10      	ldr	r2, [pc, #64]	; (8001d74 <ssd1306_PrintCloudMenu+0x1dc>)
 8001d32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d36:	6018      	str	r0, [r3, #0]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	8019      	strh	r1, [r3, #0]
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	0c0a      	lsrs	r2, r1, #16
 8001d40:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8001d42:	f7ff f98d 	bl	8001060 <ssd1306_UpdateScreen>
}
 8001d46:	bf00      	nop
 8001d48:	3720      	adds	r7, #32
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000008 	.word	0x20000008
 8001d54:	08015374 	.word	0x08015374
 8001d58:	0801537c 	.word	0x0801537c
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	08015384 	.word	0x08015384
 8001d64:	0801538c 	.word	0x0801538c
 8001d68:	08015320 	.word	0x08015320
 8001d6c:	080152e8 	.word	0x080152e8
 8001d70:	080152f0 	.word	0x080152f0
 8001d74:	080152fc 	.word	0x080152fc

08001d78 <ssd1306_PrintSettingsMenu>:

void ssd1306_PrintSettingsMenu(int value, int indexMenu, int screen){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	f107 0318 	add.w	r3, r7, #24
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 8001d96:	2000      	movs	r0, #0
 8001d98:	f7ff f93e 	bl	8001018 <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(2, y);
 8001d9c:	7ffb      	ldrb	r3, [r7, #31]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	2002      	movs	r0, #2
 8001da2:	f7ff fa87 	bl	80012b4 <ssd1306_SetCursor>
	    ssd1306_WriteString("SETTINGS", Font_11x18, White);
 8001da6:	4a42      	ldr	r2, [pc, #264]	; (8001eb0 <ssd1306_PrintSettingsMenu+0x138>)
 8001da8:	2301      	movs	r3, #1
 8001daa:	ca06      	ldmia	r2, {r1, r2}
 8001dac:	4841      	ldr	r0, [pc, #260]	; (8001eb4 <ssd1306_PrintSettingsMenu+0x13c>)
 8001dae:	f7ff fa5b 	bl	8001268 <ssd1306_WriteString>
	    //ssd1306_DrawRectangle(0,y, 128, 10, White);

	    y += 20;
 8001db2:	7ffb      	ldrb	r3, [r7, #31]
 8001db4:	3314      	adds	r3, #20
 8001db6:	77fb      	strb	r3, [r7, #31]
	    #endif



		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001db8:	7ffb      	ldrb	r3, [r7, #31]
 8001dba:	4619      	mov	r1, r3
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	f7ff fa79 	bl	80012b4 <ssd1306_SetCursor>
	    if(indexMenu==0){
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d106      	bne.n	8001dd6 <ssd1306_PrintSettingsMenu+0x5e>
	        ssd1306_WriteString("ID: a23d-4f5g6", Font_7x10, Black);
 8001dc8:	4a3b      	ldr	r2, [pc, #236]	; (8001eb8 <ssd1306_PrintSettingsMenu+0x140>)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	ca06      	ldmia	r2, {r1, r2}
 8001dce:	483b      	ldr	r0, [pc, #236]	; (8001ebc <ssd1306_PrintSettingsMenu+0x144>)
 8001dd0:	f7ff fa4a 	bl	8001268 <ssd1306_WriteString>
 8001dd4:	e005      	b.n	8001de2 <ssd1306_PrintSettingsMenu+0x6a>
	    }
	    else{
	        ssd1306_WriteString("ID: a23d-4f5g6", Font_7x10, White);
 8001dd6:	4a38      	ldr	r2, [pc, #224]	; (8001eb8 <ssd1306_PrintSettingsMenu+0x140>)
 8001dd8:	2301      	movs	r3, #1
 8001dda:	ca06      	ldmia	r2, {r1, r2}
 8001ddc:	4837      	ldr	r0, [pc, #220]	; (8001ebc <ssd1306_PrintSettingsMenu+0x144>)
 8001dde:	f7ff fa43 	bl	8001268 <ssd1306_WriteString>
	    }
		y += 10;
 8001de2:	7ffb      	ldrb	r3, [r7, #31]
 8001de4:	330a      	adds	r3, #10
 8001de6:	77fb      	strb	r3, [r7, #31]
		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001de8:	7ffb      	ldrb	r3, [r7, #31]
 8001dea:	4619      	mov	r1, r3
 8001dec:	2002      	movs	r0, #2
 8001dee:	f7ff fa61 	bl	80012b4 <ssd1306_SetCursor>
		if(indexMenu==1){
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d106      	bne.n	8001e06 <ssd1306_PrintSettingsMenu+0x8e>
	        ssd1306_WriteString("OHMIO Box v1.0", Font_7x10, Black);
 8001df8:	4a2f      	ldr	r2, [pc, #188]	; (8001eb8 <ssd1306_PrintSettingsMenu+0x140>)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	ca06      	ldmia	r2, {r1, r2}
 8001dfe:	4830      	ldr	r0, [pc, #192]	; (8001ec0 <ssd1306_PrintSettingsMenu+0x148>)
 8001e00:	f7ff fa32 	bl	8001268 <ssd1306_WriteString>
 8001e04:	e005      	b.n	8001e12 <ssd1306_PrintSettingsMenu+0x9a>
		}
		else{
	        ssd1306_WriteString("OHMIO Box v1.0", Font_7x10, White);
 8001e06:	4a2c      	ldr	r2, [pc, #176]	; (8001eb8 <ssd1306_PrintSettingsMenu+0x140>)
 8001e08:	2301      	movs	r3, #1
 8001e0a:	ca06      	ldmia	r2, {r1, r2}
 8001e0c:	482c      	ldr	r0, [pc, #176]	; (8001ec0 <ssd1306_PrintSettingsMenu+0x148>)
 8001e0e:	f7ff fa2b 	bl	8001268 <ssd1306_WriteString>
		}
		y += 10;
 8001e12:	7ffb      	ldrb	r3, [r7, #31]
 8001e14:	330a      	adds	r3, #10
 8001e16:	77fb      	strb	r3, [r7, #31]

		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001e18:	7ffb      	ldrb	r3, [r7, #31]
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	2002      	movs	r0, #2
 8001e1e:	f7ff fa49 	bl	80012b4 <ssd1306_SetCursor>
		if(indexMenu==2){
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d106      	bne.n	8001e36 <ssd1306_PrintSettingsMenu+0xbe>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 8001e28:	4a23      	ldr	r2, [pc, #140]	; (8001eb8 <ssd1306_PrintSettingsMenu+0x140>)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	ca06      	ldmia	r2, {r1, r2}
 8001e2e:	4825      	ldr	r0, [pc, #148]	; (8001ec4 <ssd1306_PrintSettingsMenu+0x14c>)
 8001e30:	f7ff fa1a 	bl	8001268 <ssd1306_WriteString>
 8001e34:	e005      	b.n	8001e42 <ssd1306_PrintSettingsMenu+0xca>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 8001e36:	4a20      	ldr	r2, [pc, #128]	; (8001eb8 <ssd1306_PrintSettingsMenu+0x140>)
 8001e38:	2301      	movs	r3, #1
 8001e3a:	ca06      	ldmia	r2, {r1, r2}
 8001e3c:	4821      	ldr	r0, [pc, #132]	; (8001ec4 <ssd1306_PrintSettingsMenu+0x14c>)
 8001e3e:	f7ff fa13 	bl	8001268 <ssd1306_WriteString>
		}
		y += 10;
 8001e42:	7ffb      	ldrb	r3, [r7, #31]
 8001e44:	330a      	adds	r3, #10
 8001e46:	77fb      	strb	r3, [r7, #31]

		#endif



		 if(value >= 2850 && value <= 2950){
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f640 3221 	movw	r2, #2849	; 0xb21
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	dd0c      	ble.n	8001e6c <ssd1306_PrintSettingsMenu+0xf4>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f640 3286 	movw	r2, #2950	; 0xb86
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	dc07      	bgt.n	8001e6c <ssd1306_PrintSettingsMenu+0xf4>
			strcpy(stringDirection, "DERECHA");
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	4a19      	ldr	r2, [pc, #100]	; (8001ec8 <ssd1306_PrintSettingsMenu+0x150>)
 8001e62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e66:	e883 0003 	stmia.w	r3, {r0, r1}
 8001e6a:	e01b      	b.n	8001ea4 <ssd1306_PrintSettingsMenu+0x12c>
		}
		else if(value >= 1850 && value <= 1950){
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f240 7239 	movw	r2, #1849	; 0x739
 8001e72:	4293      	cmp	r3, r2
 8001e74:	dd0b      	ble.n	8001e8e <ssd1306_PrintSettingsMenu+0x116>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f240 729e 	movw	r2, #1950	; 0x79e
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	dc06      	bgt.n	8001e8e <ssd1306_PrintSettingsMenu+0x116>
			strcpy(stringDirection, "IZQUIERDA");
 8001e80:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <ssd1306_PrintSettingsMenu+0x154>)
 8001e82:	f107 0314 	add.w	r3, r7, #20
 8001e86:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e88:	c303      	stmia	r3!, {r0, r1}
 8001e8a:	801a      	strh	r2, [r3, #0]
 8001e8c:	e00a      	b.n	8001ea4 <ssd1306_PrintSettingsMenu+0x12c>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4a0f      	ldr	r2, [pc, #60]	; (8001ed0 <ssd1306_PrintSettingsMenu+0x158>)
 8001e94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e98:	6018      	str	r0, [r3, #0]
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	8019      	strh	r1, [r3, #0]
 8001e9e:	3302      	adds	r3, #2
 8001ea0:	0c0a      	lsrs	r2, r1, #16
 8001ea2:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8001ea4:	f7ff f8dc 	bl	8001060 <ssd1306_UpdateScreen>
}
 8001ea8:	bf00      	nop
 8001eaa:	3720      	adds	r7, #32
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000010 	.word	0x20000010
 8001eb4:	080152dc 	.word	0x080152dc
 8001eb8:	20000008 	.word	0x20000008
 8001ebc:	08015398 	.word	0x08015398
 8001ec0:	080153a8 	.word	0x080153a8
 8001ec4:	08015320 	.word	0x08015320
 8001ec8:	080152e8 	.word	0x080152e8
 8001ecc:	080152f0 	.word	0x080152f0
 8001ed0:	080152fc 	.word	0x080152fc

08001ed4 <ssd1306_DisplayAnalogValue>:

void ssd1306_DisplayAnalogValue(int value, int indexMenu, int screen, char IPv4, char Gateway) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	70fb      	strb	r3, [r7, #3]
	if (screen==1){
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d105      	bne.n	8001ef4 <ssd1306_DisplayAnalogValue+0x20>
			   ssd1306_PrintDashboardMenu(value, indexMenu, screen);
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	68b9      	ldr	r1, [r7, #8]
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f7ff fba9 	bl	8001644 <ssd1306_PrintDashboardMenu>
 8001ef2:	e02c      	b.n	8001f4e <ssd1306_DisplayAnalogValue+0x7a>
		}
	else if (screen==2){
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d105      	bne.n	8001f06 <ssd1306_DisplayAnalogValue+0x32>
		   ssd1306_PrintEnergyMenu(value, indexMenu, screen);
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f7ff fcbc 	bl	800187c <ssd1306_PrintEnergyMenu>
 8001f04:	e023      	b.n	8001f4e <ssd1306_DisplayAnalogValue+0x7a>
	}
	else if (screen==3){
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d105      	bne.n	8001f18 <ssd1306_DisplayAnalogValue+0x44>
		   ssd1306_PrintSettingsMenu(value, indexMenu, screen);
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	68b9      	ldr	r1, [r7, #8]
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f7ff ff31 	bl	8001d78 <ssd1306_PrintSettingsMenu>
 8001f16:	e01a      	b.n	8001f4e <ssd1306_DisplayAnalogValue+0x7a>
	}else if (screen==4){
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d105      	bne.n	8001f2a <ssd1306_DisplayAnalogValue+0x56>
		   ssd1306_PrintRFMenu(value, indexMenu, screen);
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f7ff fd58 	bl	80019d8 <ssd1306_PrintRFMenu>
 8001f28:	e011      	b.n	8001f4e <ssd1306_DisplayAnalogValue+0x7a>
	}
	else if (screen==5){
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b05      	cmp	r3, #5
 8001f2e:	d109      	bne.n	8001f44 <ssd1306_DisplayAnalogValue+0x70>
		   ssd1306_PrintCloudMenu(value, indexMenu, screen, IPv4, Gateway);
 8001f30:	78fa      	ldrb	r2, [r7, #3]
 8001f32:	7e3b      	ldrb	r3, [r7, #24]
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	4613      	mov	r3, r2
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	68b9      	ldr	r1, [r7, #8]
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f7ff fe2b 	bl	8001b98 <ssd1306_PrintCloudMenu>
 8001f42:	e004      	b.n	8001f4e <ssd1306_DisplayAnalogValue+0x7a>
	}
	else{
		   ssd1306_PrintPrincipalMenu(value, indexMenu, screen);
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	68b9      	ldr	r1, [r7, #8]
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f7ff faa9 	bl	80014a0 <ssd1306_PrintPrincipalMenu>
	}
    HAL_Delay(50);
 8001f4e:	2032      	movs	r0, #50	; 0x32
 8001f50:	f000 fce6 	bl	8002920 <HAL_Delay>
}
 8001f54:	bf00      	nop
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <ssd1306_TestDrawBitmapOHMIO>:
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
    ssd1306_UpdateScreen();
}

void ssd1306_TestDrawBitmapOHMIO()
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 8001f62:	2000      	movs	r0, #0
 8001f64:	f7ff f858 	bl	8001018 <ssd1306_Fill>
	    ssd1306_DrawBitmap(32,0,ohmio_logo_fondoblanco,72,64,White);
 8001f68:	2301      	movs	r3, #1
 8001f6a:	9301      	str	r3, [sp, #4]
 8001f6c:	2340      	movs	r3, #64	; 0x40
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	2348      	movs	r3, #72	; 0x48
 8001f72:	4a07      	ldr	r2, [pc, #28]	; (8001f90 <ssd1306_TestDrawBitmapOHMIO+0x34>)
 8001f74:	2100      	movs	r1, #0
 8001f76:	2020      	movs	r0, #32
 8001f78:	f7ff f9b4 	bl	80012e4 <ssd1306_DrawBitmap>
	    ssd1306_UpdateScreen();
 8001f7c:	f7ff f870 	bl	8001060 <ssd1306_UpdateScreen>
    HAL_Delay(1000);
 8001f80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f84:	f000 fccc 	bl	8002920 <HAL_Delay>

}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	0801a460 	.word	0x0801a460

08001f94 <ssd1306_OhmioSplash>:



void ssd1306_OhmioSplash() {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8001f98:	f7fe ffd4 	bl	8000f44 <ssd1306_Init>
    ssd1306_TestFonts1();
 8001f9c:	f7ff fa2e 	bl	80013fc <ssd1306_TestFonts1>
    HAL_Delay(3000);
 8001fa0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001fa4:	f000 fcbc 	bl	8002920 <HAL_Delay>
}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}

08001fac <ssd1306_OhmioMenuPrincipal>:

void ssd1306_OhmioMenuPrincipal() {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8001fb0:	f7fe ffc8 	bl	8000f44 <ssd1306_Init>
    ssd1306_TestDrawBitmapOHMIO();
 8001fb4:	f7ff ffd2 	bl	8001f5c <ssd1306_TestDrawBitmapOHMIO>
    HAL_Delay(3000);
 8001fb8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001fbc:	f000 fcb0 	bl	8002920 <HAL_Delay>
}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fca:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <HAL_MspInit+0x44>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	4a0e      	ldr	r2, [pc, #56]	; (8002008 <HAL_MspInit+0x44>)
 8001fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd6:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <HAL_MspInit+0x44>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <HAL_MspInit+0x44>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	4a08      	ldr	r2, [pc, #32]	; (8002008 <HAL_MspInit+0x44>)
 8001fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fec:	6453      	str	r3, [r2, #68]	; 0x44
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_MspInit+0x44>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff6:	603b      	str	r3, [r7, #0]
 8001ff8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800

0800200c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08c      	sub	sp, #48	; 0x30
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 031c 	add.w	r3, r7, #28
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a2a      	ldr	r2, [pc, #168]	; (80020d4 <HAL_ADC_MspInit+0xc8>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d124      	bne.n	8002078 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800202e:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <HAL_ADC_MspInit+0xcc>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4a29      	ldr	r2, [pc, #164]	; (80020d8 <HAL_ADC_MspInit+0xcc>)
 8002034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002038:	6453      	str	r3, [r2, #68]	; 0x44
 800203a:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <HAL_ADC_MspInit+0xcc>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002042:	61bb      	str	r3, [r7, #24]
 8002044:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002046:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <HAL_ADC_MspInit+0xcc>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a23      	ldr	r2, [pc, #140]	; (80020d8 <HAL_ADC_MspInit+0xcc>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b21      	ldr	r3, [pc, #132]	; (80020d8 <HAL_ADC_MspInit+0xcc>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800205e:	2310      	movs	r3, #16
 8002060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002062:	2303      	movs	r3, #3
 8002064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206a:	f107 031c 	add.w	r3, r7, #28
 800206e:	4619      	mov	r1, r3
 8002070:	481a      	ldr	r0, [pc, #104]	; (80020dc <HAL_ADC_MspInit+0xd0>)
 8002072:	f002 fbd7 	bl	8004824 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002076:	e028      	b.n	80020ca <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC3)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a18      	ldr	r2, [pc, #96]	; (80020e0 <HAL_ADC_MspInit+0xd4>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d123      	bne.n	80020ca <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <HAL_ADC_MspInit+0xcc>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <HAL_ADC_MspInit+0xcc>)
 8002088:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800208c:	6453      	str	r3, [r2, #68]	; 0x44
 800208e:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <HAL_ADC_MspInit+0xcc>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800209a:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <HAL_ADC_MspInit+0xcc>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a0e      	ldr	r2, [pc, #56]	; (80020d8 <HAL_ADC_MspInit+0xcc>)
 80020a0:	f043 0320 	orr.w	r3, r3, #32
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <HAL_ADC_MspInit+0xcc>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0320 	and.w	r3, r3, #32
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020b2:	2320      	movs	r3, #32
 80020b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020b6:	2303      	movs	r3, #3
 80020b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020be:	f107 031c 	add.w	r3, r7, #28
 80020c2:	4619      	mov	r1, r3
 80020c4:	4807      	ldr	r0, [pc, #28]	; (80020e4 <HAL_ADC_MspInit+0xd8>)
 80020c6:	f002 fbad 	bl	8004824 <HAL_GPIO_Init>
}
 80020ca:	bf00      	nop
 80020cc:	3730      	adds	r7, #48	; 0x30
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40012000 	.word	0x40012000
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40020000 	.word	0x40020000
 80020e0:	40012200 	.word	0x40012200
 80020e4:	40021400 	.word	0x40021400

080020e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b0aa      	sub	sp, #168	; 0xa8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002100:	f107 0310 	add.w	r3, r7, #16
 8002104:	2284      	movs	r2, #132	; 0x84
 8002106:	2100      	movs	r1, #0
 8002108:	4618      	mov	r0, r3
 800210a:	f011 fe99 	bl	8013e40 <memset>
  if(hi2c->Instance==I2C2)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a21      	ldr	r2, [pc, #132]	; (8002198 <HAL_I2C_MspInit+0xb0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d13b      	bne.n	8002190 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002118:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800211c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800211e:	2300      	movs	r3, #0
 8002120:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002122:	f107 0310 	add.w	r3, r7, #16
 8002126:	4618      	mov	r0, r3
 8002128:	f003 ffe6 	bl	80060f8 <HAL_RCCEx_PeriphCLKConfig>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002132:	f7fe fec8 	bl	8000ec6 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002136:	4b19      	ldr	r3, [pc, #100]	; (800219c <HAL_I2C_MspInit+0xb4>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	4a18      	ldr	r2, [pc, #96]	; (800219c <HAL_I2C_MspInit+0xb4>)
 800213c:	f043 0320 	orr.w	r3, r3, #32
 8002140:	6313      	str	r3, [r2, #48]	; 0x30
 8002142:	4b16      	ldr	r3, [pc, #88]	; (800219c <HAL_I2C_MspInit+0xb4>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	f003 0320 	and.w	r3, r3, #32
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800214e:	2303      	movs	r3, #3
 8002150:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002154:	2312      	movs	r3, #18
 8002156:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002160:	2303      	movs	r3, #3
 8002162:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002166:	2304      	movs	r3, #4
 8002168:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800216c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002170:	4619      	mov	r1, r3
 8002172:	480b      	ldr	r0, [pc, #44]	; (80021a0 <HAL_I2C_MspInit+0xb8>)
 8002174:	f002 fb56 	bl	8004824 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <HAL_I2C_MspInit+0xb4>)
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	4a07      	ldr	r2, [pc, #28]	; (800219c <HAL_I2C_MspInit+0xb4>)
 800217e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002182:	6413      	str	r3, [r2, #64]	; 0x40
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <HAL_I2C_MspInit+0xb4>)
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002190:	bf00      	nop
 8002192:	37a8      	adds	r7, #168	; 0xa8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40005800 	.word	0x40005800
 800219c:	40023800 	.word	0x40023800
 80021a0:	40021400 	.word	0x40021400

080021a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b0aa      	sub	sp, #168	; 0xa8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021bc:	f107 0310 	add.w	r3, r7, #16
 80021c0:	2284      	movs	r2, #132	; 0x84
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f011 fe3b 	bl	8013e40 <memset>
  if(huart->Instance==USART3)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a22      	ldr	r2, [pc, #136]	; (8002258 <HAL_UART_MspInit+0xb4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d13c      	bne.n	800224e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80021d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021d8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80021da:	2300      	movs	r3, #0
 80021dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021de:	f107 0310 	add.w	r3, r7, #16
 80021e2:	4618      	mov	r0, r3
 80021e4:	f003 ff88 	bl	80060f8 <HAL_RCCEx_PeriphCLKConfig>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80021ee:	f7fe fe6a 	bl	8000ec6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021f2:	4b1a      	ldr	r3, [pc, #104]	; (800225c <HAL_UART_MspInit+0xb8>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	4a19      	ldr	r2, [pc, #100]	; (800225c <HAL_UART_MspInit+0xb8>)
 80021f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021fc:	6413      	str	r3, [r2, #64]	; 0x40
 80021fe:	4b17      	ldr	r3, [pc, #92]	; (800225c <HAL_UART_MspInit+0xb8>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800220a:	4b14      	ldr	r3, [pc, #80]	; (800225c <HAL_UART_MspInit+0xb8>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a13      	ldr	r2, [pc, #76]	; (800225c <HAL_UART_MspInit+0xb8>)
 8002210:	f043 0308 	orr.w	r3, r3, #8
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b11      	ldr	r3, [pc, #68]	; (800225c <HAL_UART_MspInit+0xb8>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002222:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002226:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	2302      	movs	r3, #2
 800222c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002230:	2301      	movs	r3, #1
 8002232:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002236:	2303      	movs	r3, #3
 8002238:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800223c:	2307      	movs	r3, #7
 800223e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002242:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002246:	4619      	mov	r1, r3
 8002248:	4805      	ldr	r0, [pc, #20]	; (8002260 <HAL_UART_MspInit+0xbc>)
 800224a:	f002 faeb 	bl	8004824 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800224e:	bf00      	nop
 8002250:	37a8      	adds	r7, #168	; 0xa8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40004800 	.word	0x40004800
 800225c:	40023800 	.word	0x40023800
 8002260:	40020c00 	.word	0x40020c00

08002264 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b0ac      	sub	sp, #176	; 0xb0
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800227c:	f107 0318 	add.w	r3, r7, #24
 8002280:	2284      	movs	r2, #132	; 0x84
 8002282:	2100      	movs	r1, #0
 8002284:	4618      	mov	r0, r3
 8002286:	f011 fddb 	bl	8013e40 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002292:	d159      	bne.n	8002348 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002294:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002298:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800229a:	2300      	movs	r3, #0
 800229c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022a0:	f107 0318 	add.w	r3, r7, #24
 80022a4:	4618      	mov	r0, r3
 80022a6:	f003 ff27 	bl	80060f8 <HAL_RCCEx_PeriphCLKConfig>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80022b0:	f7fe fe09 	bl	8000ec6 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b4:	4b26      	ldr	r3, [pc, #152]	; (8002350 <HAL_PCD_MspInit+0xec>)
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	4a25      	ldr	r2, [pc, #148]	; (8002350 <HAL_PCD_MspInit+0xec>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6313      	str	r3, [r2, #48]	; 0x30
 80022c0:	4b23      	ldr	r3, [pc, #140]	; (8002350 <HAL_PCD_MspInit+0xec>)
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80022cc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80022d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	2302      	movs	r3, #2
 80022d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e0:	2303      	movs	r3, #3
 80022e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80022e6:	230a      	movs	r3, #10
 80022e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022f0:	4619      	mov	r1, r3
 80022f2:	4818      	ldr	r0, [pc, #96]	; (8002354 <HAL_PCD_MspInit+0xf0>)
 80022f4:	f002 fa96 	bl	8004824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80022f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002300:	2300      	movs	r3, #0
 8002302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800230c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002310:	4619      	mov	r1, r3
 8002312:	4810      	ldr	r0, [pc, #64]	; (8002354 <HAL_PCD_MspInit+0xf0>)
 8002314:	f002 fa86 	bl	8004824 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002318:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <HAL_PCD_MspInit+0xec>)
 800231a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231c:	4a0c      	ldr	r2, [pc, #48]	; (8002350 <HAL_PCD_MspInit+0xec>)
 800231e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002322:	6353      	str	r3, [r2, #52]	; 0x34
 8002324:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <HAL_PCD_MspInit+0xec>)
 8002326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <HAL_PCD_MspInit+0xec>)
 8002332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002334:	4a06      	ldr	r2, [pc, #24]	; (8002350 <HAL_PCD_MspInit+0xec>)
 8002336:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800233a:	6453      	str	r3, [r2, #68]	; 0x44
 800233c:	4b04      	ldr	r3, [pc, #16]	; (8002350 <HAL_PCD_MspInit+0xec>)
 800233e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002348:	bf00      	nop
 800234a:	37b0      	adds	r7, #176	; 0xb0
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40023800 	.word	0x40023800
 8002354:	40020000 	.word	0x40020000

08002358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800235c:	e7fe      	b.n	800235c <NMI_Handler+0x4>

0800235e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002362:	e7fe      	b.n	8002362 <HardFault_Handler+0x4>

08002364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002368:	e7fe      	b.n	8002368 <MemManage_Handler+0x4>

0800236a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800236e:	e7fe      	b.n	800236e <BusFault_Handler+0x4>

08002370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002374:	e7fe      	b.n	8002374 <UsageFault_Handler+0x4>

08002376 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023a4:	f000 fa9c 	bl	80028e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023a8:	bf00      	nop
 80023aa:	bd80      	pop	{r7, pc}

080023ac <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80023b0:	4802      	ldr	r0, [pc, #8]	; (80023bc <ETH_IRQHandler+0x10>)
 80023b2:	f001 fb51 	bl	8003a58 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20005668 	.word	0x20005668

080023c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return 1;
 80023c4:	2301      	movs	r3, #1
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <_kill>:

int _kill(int pid, int sig)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <_kill+0x20>)
 80023dc:	2216      	movs	r2, #22
 80023de:	601a      	str	r2, [r3, #0]
  return -1;
 80023e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	2000b050 	.word	0x2000b050

080023f4 <_exit>:

void _exit (int status)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7ff ffe5 	bl	80023d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002406:	e7fe      	b.n	8002406 <_exit+0x12>

08002408 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	e00a      	b.n	8002430 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800241a:	f3af 8000 	nop.w
 800241e:	4601      	mov	r1, r0
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	60ba      	str	r2, [r7, #8]
 8002426:	b2ca      	uxtb	r2, r1
 8002428:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	3301      	adds	r3, #1
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	429a      	cmp	r2, r3
 8002436:	dbf0      	blt.n	800241a <_read+0x12>
  }

  return len;
 8002438:	687b      	ldr	r3, [r7, #4]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800244a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800246a:	605a      	str	r2, [r3, #4]
  return 0;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <_isatty>:

int _isatty(int file)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002482:	2301      	movs	r3, #1
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b4:	4a14      	ldr	r2, [pc, #80]	; (8002508 <_sbrk+0x5c>)
 80024b6:	4b15      	ldr	r3, [pc, #84]	; (800250c <_sbrk+0x60>)
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024c0:	4b13      	ldr	r3, [pc, #76]	; (8002510 <_sbrk+0x64>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d102      	bne.n	80024ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <_sbrk+0x64>)
 80024ca:	4a12      	ldr	r2, [pc, #72]	; (8002514 <_sbrk+0x68>)
 80024cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <_sbrk+0x64>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d205      	bcs.n	80024e8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80024dc:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <_sbrk+0x6c>)
 80024de:	220c      	movs	r2, #12
 80024e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295
 80024e6:	e009      	b.n	80024fc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <_sbrk+0x64>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ee:	4b08      	ldr	r3, [pc, #32]	; (8002510 <_sbrk+0x64>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	4a06      	ldr	r2, [pc, #24]	; (8002510 <_sbrk+0x64>)
 80024f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024fa:	68fb      	ldr	r3, [r7, #12]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	371c      	adds	r7, #28
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	20050000 	.word	0x20050000
 800250c:	00000400 	.word	0x00000400
 8002510:	20000c90 	.word	0x20000c90
 8002514:	2000b060 	.word	0x2000b060
 8002518:	2000b050 	.word	0x2000b050

0800251c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <SystemInit+0x20>)
 8002522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002526:	4a05      	ldr	r2, [pc, #20]	; (800253c <SystemInit+0x20>)
 8002528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800252c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002578 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002544:	480d      	ldr	r0, [pc, #52]	; (800257c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002546:	490e      	ldr	r1, [pc, #56]	; (8002580 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002548:	4a0e      	ldr	r2, [pc, #56]	; (8002584 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800254a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800254c:	e002      	b.n	8002554 <LoopCopyDataInit>

0800254e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800254e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002552:	3304      	adds	r3, #4

08002554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002558:	d3f9      	bcc.n	800254e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800255a:	4a0b      	ldr	r2, [pc, #44]	; (8002588 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800255c:	4c0b      	ldr	r4, [pc, #44]	; (800258c <LoopFillZerobss+0x26>)
  movs r3, #0
 800255e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002560:	e001      	b.n	8002566 <LoopFillZerobss>

08002562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002564:	3204      	adds	r2, #4

08002566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002568:	d3fb      	bcc.n	8002562 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800256a:	f7ff ffd7 	bl	800251c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800256e:	f011 fc0b 	bl	8013d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002572:	f7fe f8cf 	bl	8000714 <main>
  bx  lr    
 8002576:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002578:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800257c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002580:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8002584:	0801a914 	.word	0x0801a914
  ldr r2, =_sbss
 8002588:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800258c:	2000b060 	.word	0x2000b060

08002590 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002590:	e7fe      	b.n	8002590 <ADC_IRQHandler>

08002592 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00b      	beq.n	80025ba <LAN8742_RegisterBusIO+0x28>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d007      	beq.n	80025ba <LAN8742_RegisterBusIO+0x28>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <LAN8742_RegisterBusIO+0x28>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d102      	bne.n	80025c0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80025ba:	f04f 33ff 	mov.w	r3, #4294967295
 80025be:	e014      	b.n	80025ea <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b086      	sub	sp, #24
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d17c      	bne.n	8002710 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2220      	movs	r2, #32
 8002628:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	e01c      	b.n	800266a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f107 0208 	add.w	r2, r7, #8
 8002638:	2112      	movs	r1, #18
 800263a:	6978      	ldr	r0, [r7, #20]
 800263c:	4798      	blx	r3
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	da03      	bge.n	800264c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8002644:	f06f 0304 	mvn.w	r3, #4
 8002648:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800264a:	e00b      	b.n	8002664 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	f003 031f 	and.w	r3, r3, #31
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	429a      	cmp	r2, r3
 8002656:	d105      	bne.n	8002664 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
         break;
 8002662:	e005      	b.n	8002670 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	3301      	adds	r3, #1
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b1f      	cmp	r3, #31
 800266e:	d9df      	bls.n	8002630 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b1f      	cmp	r3, #31
 8002676:	d902      	bls.n	800267e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002678:	f06f 0302 	mvn.w	r3, #2
 800267c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d145      	bne.n	8002710 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6810      	ldr	r0, [r2, #0]
 800268c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002690:	2100      	movs	r1, #0
 8002692:	4798      	blx	r3
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	db37      	blt.n	800270a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6810      	ldr	r0, [r2, #0]
 80026a2:	f107 0208 	add.w	r2, r7, #8
 80026a6:	2100      	movs	r1, #0
 80026a8:	4798      	blx	r3
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	db28      	blt.n	8002702 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	4798      	blx	r3
 80026b6:	4603      	mov	r3, r0
 80026b8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80026ba:	e01c      	b.n	80026f6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	4798      	blx	r3
 80026c2:	4603      	mov	r3, r0
 80026c4:	461a      	mov	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026ce:	d80e      	bhi.n	80026ee <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6810      	ldr	r0, [r2, #0]
 80026d8:	f107 0208 	add.w	r2, r7, #8
 80026dc:	2100      	movs	r1, #0
 80026de:	4798      	blx	r3
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	da07      	bge.n	80026f6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80026e6:	f06f 0304 	mvn.w	r3, #4
 80026ea:	613b      	str	r3, [r7, #16]
                 break;
 80026ec:	e010      	b.n	8002710 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80026ee:	f06f 0301 	mvn.w	r3, #1
 80026f2:	613b      	str	r3, [r7, #16]
               break;
 80026f4:	e00c      	b.n	8002710 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1dd      	bne.n	80026bc <LAN8742_Init+0xc6>
 8002700:	e006      	b.n	8002710 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002702:	f06f 0304 	mvn.w	r3, #4
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	e002      	b.n	8002710 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800270a:	f06f 0303 	mvn.w	r3, #3
 800270e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d112      	bne.n	800273c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	4798      	blx	r3
 800271c:	4603      	mov	r3, r0
 800271e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002720:	bf00      	nop
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	4798      	blx	r3
 8002728:	4603      	mov	r3, r0
 800272a:	461a      	mov	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002734:	d9f5      	bls.n	8002722 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800273c:	693b      	ldr	r3, [r7, #16]
 }
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6810      	ldr	r0, [r2, #0]
 800275a:	f107 020c 	add.w	r2, r7, #12
 800275e:	2101      	movs	r1, #1
 8002760:	4798      	blx	r3
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	da02      	bge.n	800276e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002768:	f06f 0304 	mvn.w	r3, #4
 800276c:	e06e      	b.n	800284c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6810      	ldr	r0, [r2, #0]
 8002776:	f107 020c 	add.w	r2, r7, #12
 800277a:	2101      	movs	r1, #1
 800277c:	4798      	blx	r3
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	da02      	bge.n	800278a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002784:	f06f 0304 	mvn.w	r3, #4
 8002788:	e060      	b.n	800284c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8002794:	2301      	movs	r3, #1
 8002796:	e059      	b.n	800284c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6810      	ldr	r0, [r2, #0]
 80027a0:	f107 020c 	add.w	r2, r7, #12
 80027a4:	2100      	movs	r1, #0
 80027a6:	4798      	blx	r3
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	da02      	bge.n	80027b4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80027ae:	f06f 0304 	mvn.w	r3, #4
 80027b2:	e04b      	b.n	800284c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d11b      	bne.n	80027f6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d006      	beq.n	80027d6 <LAN8742_GetLinkState+0x90>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80027d2:	2302      	movs	r3, #2
 80027d4:	e03a      	b.n	800284c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e033      	b.n	800284c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80027ee:	2304      	movs	r3, #4
 80027f0:	e02c      	b.n	800284c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80027f2:	2305      	movs	r3, #5
 80027f4:	e02a      	b.n	800284c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6810      	ldr	r0, [r2, #0]
 80027fe:	f107 020c 	add.w	r2, r7, #12
 8002802:	211f      	movs	r1, #31
 8002804:	4798      	blx	r3
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	da02      	bge.n	8002812 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800280c:	f06f 0304 	mvn.w	r3, #4
 8002810:	e01c      	b.n	800284c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800281c:	2306      	movs	r3, #6
 800281e:	e015      	b.n	800284c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 031c 	and.w	r3, r3, #28
 8002826:	2b18      	cmp	r3, #24
 8002828:	d101      	bne.n	800282e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800282a:	2302      	movs	r3, #2
 800282c:	e00e      	b.n	800284c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f003 031c 	and.w	r3, r3, #28
 8002834:	2b08      	cmp	r3, #8
 8002836:	d101      	bne.n	800283c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002838:	2303      	movs	r3, #3
 800283a:	e007      	b.n	800284c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 031c 	and.w	r3, r3, #28
 8002842:	2b14      	cmp	r3, #20
 8002844:	d101      	bne.n	800284a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002846:	2304      	movs	r3, #4
 8002848:	e000      	b.n	800284c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800284a:	2305      	movs	r3, #5
    }				
  }
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <HAL_Init+0x28>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a07      	ldr	r2, [pc, #28]	; (800287c <HAL_Init+0x28>)
 800285e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002864:	2003      	movs	r0, #3
 8002866:	f000 fd7d 	bl	8003364 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800286a:	2000      	movs	r0, #0
 800286c:	f000 f808 	bl	8002880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002870:	f7ff fba8 	bl	8001fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40023c00 	.word	0x40023c00

08002880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002888:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_InitTick+0x54>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <HAL_InitTick+0x58>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	4619      	mov	r1, r3
 8002892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002896:	fbb3 f3f1 	udiv	r3, r3, r1
 800289a:	fbb2 f3f3 	udiv	r3, r2, r3
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 fd95 	bl	80033ce <HAL_SYSTICK_Config>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e00e      	b.n	80028cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b0f      	cmp	r3, #15
 80028b2:	d80a      	bhi.n	80028ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028b4:	2200      	movs	r2, #0
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	f04f 30ff 	mov.w	r0, #4294967295
 80028bc:	f000 fd5d 	bl	800337a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028c0:	4a06      	ldr	r2, [pc, #24]	; (80028dc <HAL_InitTick+0x5c>)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e000      	b.n	80028cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20000018 	.word	0x20000018
 80028d8:	20000020 	.word	0x20000020
 80028dc:	2000001c 	.word	0x2000001c

080028e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_IncTick+0x20>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	461a      	mov	r2, r3
 80028ea:	4b06      	ldr	r3, [pc, #24]	; (8002904 <HAL_IncTick+0x24>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4413      	add	r3, r2
 80028f0:	4a04      	ldr	r2, [pc, #16]	; (8002904 <HAL_IncTick+0x24>)
 80028f2:	6013      	str	r3, [r2, #0]
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	20000020 	.word	0x20000020
 8002904:	20000c94 	.word	0x20000c94

08002908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  return uwTick;
 800290c:	4b03      	ldr	r3, [pc, #12]	; (800291c <HAL_GetTick+0x14>)
 800290e:	681b      	ldr	r3, [r3, #0]
}
 8002910:	4618      	mov	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	20000c94 	.word	0x20000c94

08002920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002928:	f7ff ffee 	bl	8002908 <HAL_GetTick>
 800292c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002938:	d005      	beq.n	8002946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800293a:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <HAL_Delay+0x44>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4413      	add	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002946:	bf00      	nop
 8002948:	f7ff ffde 	bl	8002908 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	429a      	cmp	r2, r3
 8002956:	d8f7      	bhi.n	8002948 <HAL_Delay+0x28>
  {
  }
}
 8002958:	bf00      	nop
 800295a:	bf00      	nop
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000020 	.word	0x20000020

08002968 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002970:	2300      	movs	r3, #0
 8002972:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e031      	b.n	80029e2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff fb40 	bl	800200c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d116      	bne.n	80029d4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029aa:	4b10      	ldr	r3, [pc, #64]	; (80029ec <HAL_ADC_Init+0x84>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	f043 0202 	orr.w	r2, r3, #2
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 fb0a 	bl	8002fd0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f023 0303 	bic.w	r3, r3, #3
 80029ca:	f043 0201 	orr.w	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	641a      	str	r2, [r3, #64]	; 0x40
 80029d2:	e001      	b.n	80029d8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	ffffeefd 	.word	0xffffeefd

080029f0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_ADC_Start+0x1a>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e0ad      	b.n	8002b66 <HAL_ADC_Start+0x176>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d018      	beq.n	8002a52 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002a30:	4b50      	ldr	r3, [pc, #320]	; (8002b74 <HAL_ADC_Start+0x184>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a50      	ldr	r2, [pc, #320]	; (8002b78 <HAL_ADC_Start+0x188>)
 8002a36:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3a:	0c9a      	lsrs	r2, r3, #18
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002a44:	e002      	b.n	8002a4c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f9      	bne.n	8002a46 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d175      	bne.n	8002b4c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a64:	4b45      	ldr	r3, [pc, #276]	; (8002b7c <HAL_ADC_Start+0x18c>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a9a:	d106      	bne.n	8002aaa <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa0:	f023 0206 	bic.w	r2, r3, #6
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	645a      	str	r2, [r3, #68]	; 0x44
 8002aa8:	e002      	b.n	8002ab0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ac0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002ac2:	4b2f      	ldr	r3, [pc, #188]	; (8002b80 <HAL_ADC_Start+0x190>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 031f 	and.w	r3, r3, #31
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10f      	bne.n	8002aee <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d143      	bne.n	8002b64 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	e03a      	b.n	8002b64 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a24      	ldr	r2, [pc, #144]	; (8002b84 <HAL_ADC_Start+0x194>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d10e      	bne.n	8002b16 <HAL_ADC_Start+0x126>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d107      	bne.n	8002b16 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b14:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002b16:	4b1a      	ldr	r3, [pc, #104]	; (8002b80 <HAL_ADC_Start+0x190>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d120      	bne.n	8002b64 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a18      	ldr	r2, [pc, #96]	; (8002b88 <HAL_ADC_Start+0x198>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d11b      	bne.n	8002b64 <HAL_ADC_Start+0x174>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d114      	bne.n	8002b64 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b48:	609a      	str	r2, [r3, #8]
 8002b4a:	e00b      	b.n	8002b64 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	f043 0210 	orr.w	r2, r3, #16
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5c:	f043 0201 	orr.w	r2, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000018 	.word	0x20000018
 8002b78:	431bde83 	.word	0x431bde83
 8002b7c:	fffff8fe 	.word	0xfffff8fe
 8002b80:	40012300 	.word	0x40012300
 8002b84:	40012000 	.word	0x40012000
 8002b88:	40012200 	.word	0x40012200

08002b8c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_ADC_Stop+0x16>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e01f      	b.n	8002be2 <HAL_ADC_Stop+0x56>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0201 	bic.w	r2, r2, #1
 8002bb8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d107      	bne.n	8002bd8 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bcc:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <HAL_ADC_Stop+0x64>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	f043 0201 	orr.w	r2, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	ffffeefe 	.word	0xffffeefe

08002bf4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c10:	d113      	bne.n	8002c3a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c20:	d10b      	bne.n	8002c3a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f043 0220 	orr.w	r2, r3, #32
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e063      	b.n	8002d02 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002c3a:	f7ff fe65 	bl	8002908 <HAL_GetTick>
 8002c3e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c40:	e021      	b.n	8002c86 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c48:	d01d      	beq.n	8002c86 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d007      	beq.n	8002c60 <HAL_ADC_PollForConversion+0x6c>
 8002c50:	f7ff fe5a 	bl	8002908 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d212      	bcs.n	8002c86 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d00b      	beq.n	8002c86 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f043 0204 	orr.w	r2, r3, #4
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e03d      	b.n	8002d02 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d1d6      	bne.n	8002c42 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0212 	mvn.w	r2, #18
 8002c9c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d123      	bne.n	8002d00 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d11f      	bne.n	8002d00 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d006      	beq.n	8002cdc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d111      	bne.n	8002d00 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d105      	bne.n	8002d00 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	f043 0201 	orr.w	r2, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x1c>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e136      	b.n	8002fae <HAL_ADC_ConfigChannel+0x28a>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b09      	cmp	r3, #9
 8002d4e:	d93a      	bls.n	8002dc6 <HAL_ADC_ConfigChannel+0xa2>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d58:	d035      	beq.n	8002dc6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68d9      	ldr	r1, [r3, #12]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	461a      	mov	r2, r3
 8002d68:	4613      	mov	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3b1e      	subs	r3, #30
 8002d70:	2207      	movs	r2, #7
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43da      	mvns	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	400a      	ands	r2, r1
 8002d7e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a8d      	ldr	r2, [pc, #564]	; (8002fbc <HAL_ADC_ConfigChannel+0x298>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d10a      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68d9      	ldr	r1, [r3, #12]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	061a      	lsls	r2, r3, #24
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d9e:	e035      	b.n	8002e0c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68d9      	ldr	r1, [r3, #12]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	4618      	mov	r0, r3
 8002db2:	4603      	mov	r3, r0
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4403      	add	r3, r0
 8002db8:	3b1e      	subs	r3, #30
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dc4:	e022      	b.n	8002e0c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6919      	ldr	r1, [r3, #16]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	4413      	add	r3, r2
 8002dda:	2207      	movs	r2, #7
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43da      	mvns	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	400a      	ands	r2, r1
 8002de8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6919      	ldr	r1, [r3, #16]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4403      	add	r3, r0
 8002e02:	409a      	lsls	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b06      	cmp	r3, #6
 8002e12:	d824      	bhi.n	8002e5e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	3b05      	subs	r3, #5
 8002e26:	221f      	movs	r2, #31
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43da      	mvns	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	400a      	ands	r2, r1
 8002e34:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	4618      	mov	r0, r3
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3b05      	subs	r3, #5
 8002e50:	fa00 f203 	lsl.w	r2, r0, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	635a      	str	r2, [r3, #52]	; 0x34
 8002e5c:	e04c      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	d824      	bhi.n	8002eb0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	3b23      	subs	r3, #35	; 0x23
 8002e78:	221f      	movs	r2, #31
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43da      	mvns	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	400a      	ands	r2, r1
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	4618      	mov	r0, r3
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3b23      	subs	r3, #35	; 0x23
 8002ea2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	631a      	str	r2, [r3, #48]	; 0x30
 8002eae:	e023      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3b41      	subs	r3, #65	; 0x41
 8002ec2:	221f      	movs	r2, #31
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43da      	mvns	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	400a      	ands	r2, r1
 8002ed0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	4618      	mov	r0, r3
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	3b41      	subs	r3, #65	; 0x41
 8002eec:	fa00 f203 	lsl.w	r2, r0, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a30      	ldr	r2, [pc, #192]	; (8002fc0 <HAL_ADC_ConfigChannel+0x29c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d10a      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x1f4>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f0a:	d105      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002f0c:	4b2d      	ldr	r3, [pc, #180]	; (8002fc4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4a2c      	ldr	r2, [pc, #176]	; (8002fc4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f12:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002f16:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a28      	ldr	r2, [pc, #160]	; (8002fc0 <HAL_ADC_ConfigChannel+0x29c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d10f      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x21e>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b12      	cmp	r3, #18
 8002f28:	d10b      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002f2a:	4b26      	ldr	r3, [pc, #152]	; (8002fc4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4a25      	ldr	r2, [pc, #148]	; (8002fc4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f30:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f34:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002f36:	4b23      	ldr	r3, [pc, #140]	; (8002fc4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	4a22      	ldr	r2, [pc, #136]	; (8002fc4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f40:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1e      	ldr	r2, [pc, #120]	; (8002fc0 <HAL_ADC_ConfigChannel+0x29c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d12b      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x280>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1a      	ldr	r2, [pc, #104]	; (8002fbc <HAL_ADC_ConfigChannel+0x298>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d003      	beq.n	8002f5e <HAL_ADC_ConfigChannel+0x23a>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b11      	cmp	r3, #17
 8002f5c:	d122      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002f5e:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	4a18      	ldr	r2, [pc, #96]	; (8002fc4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f64:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002f68:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002f6a:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	4a15      	ldr	r2, [pc, #84]	; (8002fc4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f74:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a10      	ldr	r2, [pc, #64]	; (8002fbc <HAL_ADC_ConfigChannel+0x298>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d111      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002f80:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <HAL_ADC_ConfigChannel+0x2a4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a11      	ldr	r2, [pc, #68]	; (8002fcc <HAL_ADC_ConfigChannel+0x2a8>)
 8002f86:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8a:	0c9a      	lsrs	r2, r3, #18
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f96:	e002      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f9      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	10000012 	.word	0x10000012
 8002fc0:	40012000 	.word	0x40012000
 8002fc4:	40012300 	.word	0x40012300
 8002fc8:	20000018 	.word	0x20000018
 8002fcc:	431bde83 	.word	0x431bde83

08002fd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002fd8:	4b78      	ldr	r3, [pc, #480]	; (80031bc <ADC_Init+0x1ec>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	4a77      	ldr	r2, [pc, #476]	; (80031bc <ADC_Init+0x1ec>)
 8002fde:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002fe2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002fe4:	4b75      	ldr	r3, [pc, #468]	; (80031bc <ADC_Init+0x1ec>)
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4973      	ldr	r1, [pc, #460]	; (80031bc <ADC_Init+0x1ec>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003000:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	021a      	lsls	r2, r3, #8
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003024:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6859      	ldr	r1, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003046:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6899      	ldr	r1, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	4a58      	ldr	r2, [pc, #352]	; (80031c0 <ADC_Init+0x1f0>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d022      	beq.n	80030aa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003072:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6899      	ldr	r1, [r3, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003094:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6899      	ldr	r1, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	e00f      	b.n	80030ca <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0202 	bic.w	r2, r2, #2
 80030d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6899      	ldr	r1, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	005a      	lsls	r2, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d01b      	beq.n	8003130 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003106:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003116:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6859      	ldr	r1, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	3b01      	subs	r3, #1
 8003124:	035a      	lsls	r2, r3, #13
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	e007      	b.n	8003140 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800313e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800314e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	3b01      	subs	r3, #1
 800315c:	051a      	lsls	r2, r3, #20
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003174:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6899      	ldr	r1, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003182:	025a      	lsls	r2, r3, #9
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800319a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6899      	ldr	r1, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	029a      	lsls	r2, r3, #10
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	609a      	str	r2, [r3, #8]
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	40012300 	.word	0x40012300
 80031c0:	0f000001 	.word	0x0f000001

080031c4 <__NVIC_SetPriorityGrouping>:
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <__NVIC_SetPriorityGrouping+0x40>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031e0:	4013      	ands	r3, r2
 80031e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031ec:	4b06      	ldr	r3, [pc, #24]	; (8003208 <__NVIC_SetPriorityGrouping+0x44>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031f2:	4a04      	ldr	r2, [pc, #16]	; (8003204 <__NVIC_SetPriorityGrouping+0x40>)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	60d3      	str	r3, [r2, #12]
}
 80031f8:	bf00      	nop
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	e000ed00 	.word	0xe000ed00
 8003208:	05fa0000 	.word	0x05fa0000

0800320c <__NVIC_GetPriorityGrouping>:
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003210:	4b04      	ldr	r3, [pc, #16]	; (8003224 <__NVIC_GetPriorityGrouping+0x18>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	0a1b      	lsrs	r3, r3, #8
 8003216:	f003 0307 	and.w	r3, r3, #7
}
 800321a:	4618      	mov	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <__NVIC_EnableIRQ>:
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003236:	2b00      	cmp	r3, #0
 8003238:	db0b      	blt.n	8003252 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	f003 021f 	and.w	r2, r3, #31
 8003240:	4907      	ldr	r1, [pc, #28]	; (8003260 <__NVIC_EnableIRQ+0x38>)
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	2001      	movs	r0, #1
 800324a:	fa00 f202 	lsl.w	r2, r0, r2
 800324e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	e000e100 	.word	0xe000e100

08003264 <__NVIC_SetPriority>:
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	6039      	str	r1, [r7, #0]
 800326e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003274:	2b00      	cmp	r3, #0
 8003276:	db0a      	blt.n	800328e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	b2da      	uxtb	r2, r3
 800327c:	490c      	ldr	r1, [pc, #48]	; (80032b0 <__NVIC_SetPriority+0x4c>)
 800327e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003282:	0112      	lsls	r2, r2, #4
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	440b      	add	r3, r1
 8003288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800328c:	e00a      	b.n	80032a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	b2da      	uxtb	r2, r3
 8003292:	4908      	ldr	r1, [pc, #32]	; (80032b4 <__NVIC_SetPriority+0x50>)
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	3b04      	subs	r3, #4
 800329c:	0112      	lsls	r2, r2, #4
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	440b      	add	r3, r1
 80032a2:	761a      	strb	r2, [r3, #24]
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	e000e100 	.word	0xe000e100
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <NVIC_EncodePriority>:
{
 80032b8:	b480      	push	{r7}
 80032ba:	b089      	sub	sp, #36	; 0x24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f1c3 0307 	rsb	r3, r3, #7
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	bf28      	it	cs
 80032d6:	2304      	movcs	r3, #4
 80032d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	3304      	adds	r3, #4
 80032de:	2b06      	cmp	r3, #6
 80032e0:	d902      	bls.n	80032e8 <NVIC_EncodePriority+0x30>
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	3b03      	subs	r3, #3
 80032e6:	e000      	b.n	80032ea <NVIC_EncodePriority+0x32>
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ec:	f04f 32ff 	mov.w	r2, #4294967295
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43da      	mvns	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	401a      	ands	r2, r3
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003300:	f04f 31ff 	mov.w	r1, #4294967295
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	fa01 f303 	lsl.w	r3, r1, r3
 800330a:	43d9      	mvns	r1, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003310:	4313      	orrs	r3, r2
}
 8003312:	4618      	mov	r0, r3
 8003314:	3724      	adds	r7, #36	; 0x24
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <SysTick_Config>:
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3b01      	subs	r3, #1
 800332c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003330:	d301      	bcc.n	8003336 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003332:	2301      	movs	r3, #1
 8003334:	e00f      	b.n	8003356 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003336:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <SysTick_Config+0x40>)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3b01      	subs	r3, #1
 800333c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800333e:	210f      	movs	r1, #15
 8003340:	f04f 30ff 	mov.w	r0, #4294967295
 8003344:	f7ff ff8e 	bl	8003264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003348:	4b05      	ldr	r3, [pc, #20]	; (8003360 <SysTick_Config+0x40>)
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800334e:	4b04      	ldr	r3, [pc, #16]	; (8003360 <SysTick_Config+0x40>)
 8003350:	2207      	movs	r2, #7
 8003352:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	e000e010 	.word	0xe000e010

08003364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7ff ff29 	bl	80031c4 <__NVIC_SetPriorityGrouping>
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800337a:	b580      	push	{r7, lr}
 800337c:	b086      	sub	sp, #24
 800337e:	af00      	add	r7, sp, #0
 8003380:	4603      	mov	r3, r0
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	607a      	str	r2, [r7, #4]
 8003386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800338c:	f7ff ff3e 	bl	800320c <__NVIC_GetPriorityGrouping>
 8003390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	68b9      	ldr	r1, [r7, #8]
 8003396:	6978      	ldr	r0, [r7, #20]
 8003398:	f7ff ff8e 	bl	80032b8 <NVIC_EncodePriority>
 800339c:	4602      	mov	r2, r0
 800339e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ff5d 	bl	8003264 <__NVIC_SetPriority>
}
 80033aa:	bf00      	nop
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	4603      	mov	r3, r0
 80033ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff ff31 	bl	8003228 <__NVIC_EnableIRQ>
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff ffa2 	bl	8003320 <SysTick_Config>
 80033dc:	4603      	mov	r3, r0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80033ec:	f3bf 8f5f 	dmb	sy
}
 80033f0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80033f2:	4b07      	ldr	r3, [pc, #28]	; (8003410 <HAL_MPU_Disable+0x28>)
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	4a06      	ldr	r2, [pc, #24]	; (8003410 <HAL_MPU_Disable+0x28>)
 80033f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033fc:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80033fe:	4b05      	ldr	r3, [pc, #20]	; (8003414 <HAL_MPU_Disable+0x2c>)
 8003400:	2200      	movs	r2, #0
 8003402:	605a      	str	r2, [r3, #4]
}
 8003404:	bf00      	nop
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	e000ed00 	.word	0xe000ed00
 8003414:	e000ed90 	.word	0xe000ed90

08003418 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003420:	4a0b      	ldr	r2, [pc, #44]	; (8003450 <HAL_MPU_Enable+0x38>)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800342a:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <HAL_MPU_Enable+0x3c>)
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	4a09      	ldr	r2, [pc, #36]	; (8003454 <HAL_MPU_Enable+0x3c>)
 8003430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003434:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003436:	f3bf 8f4f 	dsb	sy
}
 800343a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800343c:	f3bf 8f6f 	isb	sy
}
 8003440:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	e000ed90 	.word	0xe000ed90
 8003454:	e000ed00 	.word	0xe000ed00

08003458 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e06a      	b.n	8003540 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003470:	2b00      	cmp	r3, #0
 8003472:	d106      	bne.n	8003482 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2223      	movs	r2, #35	; 0x23
 8003478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f004 fb91 	bl	8007ba4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003482:	4b31      	ldr	r3, [pc, #196]	; (8003548 <HAL_ETH_Init+0xf0>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	4a30      	ldr	r2, [pc, #192]	; (8003548 <HAL_ETH_Init+0xf0>)
 8003488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800348c:	6453      	str	r3, [r2, #68]	; 0x44
 800348e:	4b2e      	ldr	r3, [pc, #184]	; (8003548 <HAL_ETH_Init+0xf0>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800349a:	4b2c      	ldr	r3, [pc, #176]	; (800354c <HAL_ETH_Init+0xf4>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	4a2b      	ldr	r2, [pc, #172]	; (800354c <HAL_ETH_Init+0xf4>)
 80034a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80034a4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80034a6:	4b29      	ldr	r3, [pc, #164]	; (800354c <HAL_ETH_Init+0xf4>)
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	4927      	ldr	r1, [pc, #156]	; (800354c <HAL_ETH_Init+0xf4>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80034b4:	4b25      	ldr	r3, [pc, #148]	; (800354c <HAL_ETH_Init+0xf4>)
 80034b6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	f043 0301 	orr.w	r3, r3, #1
 80034ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80034ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034d0:	f7ff fa1a 	bl	8002908 <HAL_GetTick>
 80034d4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80034d6:	e011      	b.n	80034fc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80034d8:	f7ff fa16 	bl	8002908 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80034e6:	d909      	bls.n	80034fc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2204      	movs	r2, #4
 80034ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	22e0      	movs	r2, #224	; 0xe0
 80034f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e021      	b.n	8003540 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1e4      	bne.n	80034d8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 fee4 	bl	80042dc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 ff8b 	bl	8004430 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 ffe1 	bl	80044e2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	461a      	mov	r2, r3
 8003526:	2100      	movs	r1, #0
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 ff49 	bl	80043c0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2210      	movs	r2, #16
 800353a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40023800 	.word	0x40023800
 800354c:	40013800 	.word	0x40013800

08003550 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800355e:	2b10      	cmp	r3, #16
 8003560:	d150      	bne.n	8003604 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2223      	movs	r2, #35	; 0x23
 8003566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2204      	movs	r2, #4
 800356e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f9fd 	bl	8003970 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0208 	orr.w	r2, r2, #8
 8003584:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800358e:	2001      	movs	r0, #1
 8003590:	f7ff f9c6 	bl	8002920 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0204 	orr.w	r2, r2, #4
 80035aa:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80035b4:	2001      	movs	r0, #1
 80035b6:	f7ff f9b3 	bl	8002920 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fd2a 	bl	800401c <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6812      	ldr	r2, [r2, #0]
 80035d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80035da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035de:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6812      	ldr	r2, [r2, #0]
 80035ee:	f043 0302 	orr.w	r3, r3, #2
 80035f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035f6:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2223      	movs	r2, #35	; 0x23
 80035fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	e000      	b.n	8003606 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
  }
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b084      	sub	sp, #16
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800361c:	2b23      	cmp	r3, #35	; 0x23
 800361e:	d14a      	bne.n	80036b6 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2223      	movs	r2, #35	; 0x23
 8003624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800363a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800363e:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6812      	ldr	r2, [r2, #0]
 800364e:	f023 0302 	bic.w	r3, r3, #2
 8003652:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003656:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0204 	bic.w	r2, r2, #4
 8003666:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003670:	2001      	movs	r0, #1
 8003672:	f7ff f955 	bl	8002920 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fccc 	bl	800401c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0208 	bic.w	r2, r2, #8
 8003692:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800369c:	2001      	movs	r0, #1
 800369e:	f7ff f93f 	bl	8002920 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2210      	movs	r2, #16
 80036ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	e000      	b.n	80036b8 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
  }
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d8:	f043 0201 	orr.w	r2, r3, #1
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e07c      	b.n	80037e0 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ec:	2b23      	cmp	r3, #35	; 0x23
 80036ee:	d176      	bne.n	80037de <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80036f0:	2200      	movs	r2, #0
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 ff61 	bl	80045bc <ETH_Prepare_Tx_Descriptors>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d009      	beq.n	8003714 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003706:	f043 0202 	orr.w	r2, r3, #2
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e065      	b.n	80037e0 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8003714:	f3bf 8f4f 	dsb	sy
}
 8003718:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3206      	adds	r2, #6
 8003722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003726:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	629a      	str	r2, [r3, #40]	; 0x28
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003736:	2b03      	cmp	r3, #3
 8003738:	d904      	bls.n	8003744 <HAL_ETH_Transmit+0x84>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373e:	1f1a      	subs	r2, r3, #4
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	3106      	adds	r1, #6
 8003750:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003754:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003758:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800375a:	f7ff f8d5 	bl	8002908 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003760:	e037      	b.n	80037d2 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d011      	beq.n	8003798 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377a:	f043 0208 	orr.w	r2, r3, #8
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e023      	b.n	80037e0 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379e:	d018      	beq.n	80037d2 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037a0:	f7ff f8b2 	bl	8002908 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d302      	bcc.n	80037b6 <HAL_ETH_Transmit+0xf6>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10d      	bne.n	80037d2 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037bc:	f043 0204 	orr.w	r2, r3, #4
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80037cc:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e006      	b.n	80037e0 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	dbc3      	blt.n	8003762 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	e000      	b.n	80037e0 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
  }
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b088      	sub	sp, #32
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d109      	bne.n	8003814 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003806:	f043 0201 	orr.w	r2, r3, #1
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e0a8      	b.n	8003966 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800381a:	2b23      	cmp	r3, #35	; 0x23
 800381c:	d001      	beq.n	8003822 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e0a1      	b.n	8003966 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003826:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69fa      	ldr	r2, [r7, #28]
 800382c:	3212      	adds	r2, #18
 800382e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003832:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003838:	f1c3 0304 	rsb	r3, r3, #4
 800383c:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800383e:	e06a      	b.n	8003916 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003848:	2b00      	cmp	r3, #0
 800384a:	d007      	beq.n	800385c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	699a      	ldr	r2, [r3, #24]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	69da      	ldr	r2, [r3, #28]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003864:	2b00      	cmp	r3, #0
 8003866:	d103      	bne.n	8003870 <HAL_ETH_ReadData+0x88>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800386c:	2b00      	cmp	r3, #0
 800386e:	d040      	beq.n	80038f2 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00c      	beq.n	80038b4 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	0c1b      	lsrs	r3, r3, #16
 80038a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80038a4:	3b04      	subs	r3, #4
 80038a6:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80038b0:	2301      	movs	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80038cc:	461a      	mov	r2, r3
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	f004 fb31 	bl	8007f38 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	441a      	add	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	2200      	movs	r2, #0
 80038f0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	3301      	adds	r3, #1
 80038f6:	61fb      	str	r3, [r7, #28]
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d902      	bls.n	8003904 <HAL_ETH_ReadData+0x11c>
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	3b04      	subs	r3, #4
 8003902:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	3212      	adds	r2, #18
 800390a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800390e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	3301      	adds	r3, #1
 8003914:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	db06      	blt.n	800392c <HAL_ETH_ReadData+0x144>
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	429a      	cmp	r2, r3
 8003924:	d202      	bcs.n	800392c <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8003926:	7bfb      	ldrb	r3, [r7, #15]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d089      	beq.n	8003840 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	441a      	add	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800393c:	2b00      	cmp	r3, #0
 800393e:	d002      	beq.n	8003946 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f815 	bl	8003970 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69fa      	ldr	r2, [r7, #28]
 800394a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800394c:	7bfb      	ldrb	r3, [r7, #15]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d108      	bne.n	8003964 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	e000      	b.n	8003966 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
}
 8003966:	4618      	mov	r0, r3
 8003968:	3720      	adds	r7, #32
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
	...

08003970 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800397c:	2301      	movs	r3, #1
 800397e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003984:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69fa      	ldr	r2, [r7, #28]
 800398a:	3212      	adds	r2, #18
 800398c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003990:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003996:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003998:	e040      	b.n	8003a1c <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d112      	bne.n	80039c8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80039a2:	f107 030c 	add.w	r3, r7, #12
 80039a6:	4618      	mov	r0, r3
 80039a8:	f004 fa96 	bl	8007ed8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d102      	bne.n	80039b8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	74fb      	strb	r3, [r7, #19]
 80039b6:	e007      	b.n	80039c8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	461a      	mov	r2, r3
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	461a      	mov	r2, r3
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80039c8:	7cfb      	ldrb	r3, [r7, #19]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d026      	beq.n	8003a1c <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d103      	bne.n	80039de <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	4a1e      	ldr	r2, [pc, #120]	; (8003a54 <ETH_UpdateDescriptor+0xe4>)
 80039da:	605a      	str	r2, [r3, #4]
 80039dc:	e003      	b.n	80039e6 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80039e4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 80039e6:	f3bf 8f5f 	dmb	sy
}
 80039ea:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	3301      	adds	r3, #1
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d902      	bls.n	8003a0a <ETH_UpdateDescriptor+0x9a>
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	3b04      	subs	r3, #4
 8003a08:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69fa      	ldr	r2, [r7, #28]
 8003a0e:	3212      	adds	r2, #18
 8003a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a14:	617b      	str	r3, [r7, #20]
      desccount--;
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <ETH_UpdateDescriptor+0xb8>
 8003a22:	7cfb      	ldrb	r3, [r7, #19]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1b8      	bne.n	800399a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d00c      	beq.n	8003a4c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8003a4c:	bf00      	nop
 8003a4e:	3720      	adds	r7, #32
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	80004600 	.word	0x80004600

08003a58 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6e:	2b40      	cmp	r3, #64	; 0x40
 8003a70:	d112      	bne.n	8003a98 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a80:	2b40      	cmp	r3, #64	; 0x40
 8003a82:	d109      	bne.n	8003a98 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4b50      	ldr	r3, [pc, #320]	; (8003bd0 <HAL_ETH_IRQHandler+0x178>)
 8003a90:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f8ac 	bl	8003bf0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d113      	bne.n	8003ad2 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d10a      	bne.n	8003ad2 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003aca:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f885 	bl	8003bdc <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae4:	d14c      	bne.n	8003b80 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003af8:	d142      	bne.n	8003b80 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b00:	f043 0208 	orr.w	r2, r3, #8
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b1c:	d11a      	bne.n	8003b54 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b26:	695a      	ldr	r2, [r3, #20]
 8003b28:	4b2a      	ldr	r3, [pc, #168]	; (8003bd4 <HAL_ETH_IRQHandler+0x17c>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8003b44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b48:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	22e0      	movs	r2, #224	; 0xe0
 8003b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003b52:	e012      	b.n	8003b7a <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b5c:	695a      	ldr	r2, [r3, #20]
 8003b5e:	f248 6380 	movw	r3, #34432	; 0x8680
 8003b62:	4013      	ands	r3, r2
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b72:	461a      	mov	r2, r3
 8003b74:	f248 6380 	movw	r3, #34432	; 0x8680
 8003b78:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f842 	bl	8003c04 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	d10e      	bne.n	8003bac <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f83a 	bl	8003c18 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8003bac:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <HAL_ETH_IRQHandler+0x180>)
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d006      	beq.n	8003bc6 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003bb8:	4b07      	ldr	r3, [pc, #28]	; (8003bd8 <HAL_ETH_IRQHandler+0x180>)
 8003bba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003bbe:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f833 	bl	8003c2c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	00010040 	.word	0x00010040
 8003bd4:	007e2000 	.word	0x007e2000
 8003bd8:	40013c00 	.word	0x40013c00

08003bdc <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
 8003c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f003 031c 	and.w	r3, r3, #28
 8003c5c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	02db      	lsls	r3, r3, #11
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	019b      	lsls	r3, r3, #6
 8003c6e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f023 0302 	bic.w	r3, r3, #2
 8003c7e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003c90:	f7fe fe3a 	bl	8002908 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003c96:	e00d      	b.n	8003cb4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003c98:	f7fe fe36 	bl	8002908 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca6:	d301      	bcc.n	8003cac <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e010      	b.n	8003cce <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1ec      	bne.n	8003c98 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b086      	sub	sp, #24
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	607a      	str	r2, [r7, #4]
 8003ce2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f003 031c 	and.w	r3, r3, #28
 8003cf2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	02db      	lsls	r3, r3, #11
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	019b      	lsls	r3, r3, #6
 8003d04:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f043 0302 	orr.w	r3, r3, #2
 8003d14:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d30:	f7fe fdea 	bl	8002908 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003d36:	e00d      	b.n	8003d54 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003d38:	f7fe fde6 	bl	8002908 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d46:	d301      	bcc.n	8003d4c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e009      	b.n	8003d60 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1ec      	bne.n	8003d38 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e0d9      	b.n	8003f30 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0310 	and.w	r3, r3, #16
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	bf14      	ite	ne
 8003d8a:	2301      	movne	r3, #1
 8003d8c:	2300      	moveq	r3, #0
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	461a      	mov	r2, r3
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	bf0c      	ite	eq
 8003db4:	2301      	moveq	r3, #1
 8003db6:	2300      	movne	r3, #0
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	461a      	mov	r2, r3
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	bf14      	ite	ne
 8003dd0:	2301      	movne	r3, #1
 8003dd2:	2300      	moveq	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	bf0c      	ite	eq
 8003dea:	2301      	moveq	r3, #1
 8003dec:	2300      	movne	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	461a      	mov	r2, r3
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	bf14      	ite	ne
 8003e04:	2301      	movne	r3, #1
 8003e06:	2300      	moveq	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	bf0c      	ite	eq
 8003e3a:	2301      	moveq	r3, #1
 8003e3c:	2300      	movne	r3, #0
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	461a      	mov	r2, r3
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	bf0c      	ite	eq
 8003e54:	2301      	moveq	r3, #1
 8003e56:	2300      	movne	r3, #0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	bf14      	ite	ne
 8003e6e:	2301      	movne	r3, #1
 8003e70:	2300      	moveq	r3, #0
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	461a      	mov	r2, r3
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bf14      	ite	ne
 8003e96:	2301      	movne	r3, #1
 8003e98:	2300      	moveq	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf14      	ite	ne
 8003eb0:	2301      	movne	r3, #1
 8003eb2:	2300      	moveq	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	bf0c      	ite	eq
 8003ecc:	2301      	moveq	r3, #1
 8003ece:	2300      	movne	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	0c1b      	lsrs	r3, r3, #16
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	bf14      	ite	ne
 8003f04:	2301      	movne	r3, #1
 8003f06:	2300      	moveq	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	bf14      	ite	ne
 8003f20:	2301      	movne	r3, #1
 8003f22:	2300      	moveq	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e00b      	b.n	8003f68 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f56:	2b10      	cmp	r3, #16
 8003f58:	d105      	bne.n	8003f66 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003f5a:	6839      	ldr	r1, [r7, #0]
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f883 	bl	8004068 <ETH_SetMACConfig>

    return HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	e000      	b.n	8003f68 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
  }
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 031c 	bic.w	r3, r3, #28
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003f88:	f002 f882 	bl	8006090 <HAL_RCC_GetHCLKFreq>
 8003f8c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	4a1d      	ldr	r2, [pc, #116]	; (8004008 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d908      	bls.n	8003fa8 <HAL_ETH_SetMDIOClockRange+0x38>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	4a1c      	ldr	r2, [pc, #112]	; (800400c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d804      	bhi.n	8003fa8 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f043 0308 	orr.w	r3, r3, #8
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	e027      	b.n	8003ff8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4a18      	ldr	r2, [pc, #96]	; (800400c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d908      	bls.n	8003fc2 <HAL_ETH_SetMDIOClockRange+0x52>
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	4a17      	ldr	r2, [pc, #92]	; (8004010 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d204      	bcs.n	8003fc2 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f043 030c 	orr.w	r3, r3, #12
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	e01a      	b.n	8003ff8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	4a12      	ldr	r2, [pc, #72]	; (8004010 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d303      	bcc.n	8003fd2 <HAL_ETH_SetMDIOClockRange+0x62>
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	4a11      	ldr	r2, [pc, #68]	; (8004014 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d911      	bls.n	8003ff6 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	4a0f      	ldr	r2, [pc, #60]	; (8004014 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d908      	bls.n	8003fec <HAL_ETH_SetMDIOClockRange+0x7c>
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	4a0e      	ldr	r2, [pc, #56]	; (8004018 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d804      	bhi.n	8003fec <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f043 0304 	orr.w	r3, r3, #4
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	e005      	b.n	8003ff8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f043 0310 	orr.w	r3, r3, #16
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	e000      	b.n	8003ff8 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003ff6:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	611a      	str	r2, [r3, #16]
}
 8004000:	bf00      	nop
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	01312cff 	.word	0x01312cff
 800400c:	02160ebf 	.word	0x02160ebf
 8004010:	03938700 	.word	0x03938700
 8004014:	05f5e0ff 	.word	0x05f5e0ff
 8004018:	08f0d17f 	.word	0x08f0d17f

0800401c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6812      	ldr	r2, [r2, #0]
 8004036:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800403a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800403e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800404c:	2001      	movs	r0, #1
 800404e:	f7fe fc67 	bl	8002920 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800405c:	6193      	str	r3, [r2, #24]
}
 800405e:	bf00      	nop
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4b51      	ldr	r3, [pc, #324]	; (80041c4 <ETH_SetMACConfig+0x15c>)
 800407e:	4013      	ands	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	7c1b      	ldrb	r3, [r3, #16]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d102      	bne.n	8004090 <ETH_SetMACConfig+0x28>
 800408a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800408e:	e000      	b.n	8004092 <ETH_SetMACConfig+0x2a>
 8004090:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	7c5b      	ldrb	r3, [r3, #17]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d102      	bne.n	80040a0 <ETH_SetMACConfig+0x38>
 800409a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800409e:	e000      	b.n	80040a2 <ETH_SetMACConfig+0x3a>
 80040a0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80040a2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80040a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	7fdb      	ldrb	r3, [r3, #31]
 80040ae:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80040b0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80040b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	7f92      	ldrb	r2, [r2, #30]
 80040bc:	2a00      	cmp	r2, #0
 80040be:	d102      	bne.n	80040c6 <ETH_SetMACConfig+0x5e>
 80040c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040c4:	e000      	b.n	80040c8 <ETH_SetMACConfig+0x60>
 80040c6:	2200      	movs	r2, #0
                        macconf->Speed |
 80040c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	7f1b      	ldrb	r3, [r3, #28]
 80040ce:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80040d0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80040d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	791b      	ldrb	r3, [r3, #4]
 80040dc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80040de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80040e6:	2a00      	cmp	r2, #0
 80040e8:	d102      	bne.n	80040f0 <ETH_SetMACConfig+0x88>
 80040ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040ee:	e000      	b.n	80040f2 <ETH_SetMACConfig+0x8a>
 80040f0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80040f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	7bdb      	ldrb	r3, [r3, #15]
 80040f8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80040fa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004100:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004108:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800410a:	4313      	orrs	r3, r2
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	4313      	orrs	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004122:	2001      	movs	r0, #1
 8004124:	f7fe fbfc 	bl	8002920 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800413e:	4013      	ands	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004146:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800414e:	2a00      	cmp	r2, #0
 8004150:	d101      	bne.n	8004156 <ETH_SetMACConfig+0xee>
 8004152:	2280      	movs	r2, #128	; 0x80
 8004154:	e000      	b.n	8004158 <ETH_SetMACConfig+0xf0>
 8004156:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004158:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800415e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004166:	2a01      	cmp	r2, #1
 8004168:	d101      	bne.n	800416e <ETH_SetMACConfig+0x106>
 800416a:	2208      	movs	r2, #8
 800416c:	e000      	b.n	8004170 <ETH_SetMACConfig+0x108>
 800416e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004170:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004178:	2a01      	cmp	r2, #1
 800417a:	d101      	bne.n	8004180 <ETH_SetMACConfig+0x118>
 800417c:	2204      	movs	r2, #4
 800417e:	e000      	b.n	8004182 <ETH_SetMACConfig+0x11a>
 8004180:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004182:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800418a:	2a01      	cmp	r2, #1
 800418c:	d101      	bne.n	8004192 <ETH_SetMACConfig+0x12a>
 800418e:	2202      	movs	r2, #2
 8004190:	e000      	b.n	8004194 <ETH_SetMACConfig+0x12c>
 8004192:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004194:	4313      	orrs	r3, r2
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4313      	orrs	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80041ac:	2001      	movs	r0, #1
 80041ae:	f7fe fbb7 	bl	8002920 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	619a      	str	r2, [r3, #24]
}
 80041ba:	bf00      	nop
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	ff20810f 	.word	0xff20810f

080041c8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4b3d      	ldr	r3, [pc, #244]	; (80042d8 <ETH_SetDMAConfig+0x110>)
 80041e2:	4013      	ands	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	7b1b      	ldrb	r3, [r3, #12]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d102      	bne.n	80041f4 <ETH_SetDMAConfig+0x2c>
 80041ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80041f2:	e000      	b.n	80041f6 <ETH_SetDMAConfig+0x2e>
 80041f4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	7b5b      	ldrb	r3, [r3, #13]
 80041fa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80041fc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	7f52      	ldrb	r2, [r2, #29]
 8004202:	2a00      	cmp	r2, #0
 8004204:	d102      	bne.n	800420c <ETH_SetDMAConfig+0x44>
 8004206:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800420a:	e000      	b.n	800420e <ETH_SetDMAConfig+0x46>
 800420c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800420e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	7b9b      	ldrb	r3, [r3, #14]
 8004214:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004216:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800421c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	7f1b      	ldrb	r3, [r3, #28]
 8004222:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004224:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	7f9b      	ldrb	r3, [r3, #30]
 800422a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800422c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004232:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800423a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800423c:	4313      	orrs	r3, r2
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4313      	orrs	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800424c:	461a      	mov	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800425e:	2001      	movs	r0, #1
 8004260:	f7fe fb5e 	bl	8002920 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800426c:	461a      	mov	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	791b      	ldrb	r3, [r3, #4]
 8004276:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800427c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004282:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004288:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004290:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004292:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004298:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800429a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80042a0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6812      	ldr	r2, [r2, #0]
 80042a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042ae:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80042bc:	2001      	movs	r0, #1
 80042be:	f7fe fb2f 	bl	8002920 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ca:	461a      	mov	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6013      	str	r3, [r2, #0]
}
 80042d0:	bf00      	nop
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	f8de3f23 	.word	0xf8de3f23

080042dc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b0a6      	sub	sp, #152	; 0x98
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80042e4:	2301      	movs	r3, #1
 80042e6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80042ea:	2301      	movs	r3, #1
 80042ec:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80042f0:	2300      	movs	r3, #0
 80042f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80042f4:	2300      	movs	r3, #0
 80042f6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004300:	2300      	movs	r3, #0
 8004302:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004306:	2301      	movs	r3, #1
 8004308:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800430c:	2300      	movs	r3, #0
 800430e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004312:	2300      	movs	r3, #0
 8004314:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004318:	2300      	movs	r3, #0
 800431a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800431c:	2300      	movs	r3, #0
 800431e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004322:	2300      	movs	r3, #0
 8004324:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004326:	2300      	movs	r3, #0
 8004328:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800432c:	2300      	movs	r3, #0
 800432e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004332:	2300      	movs	r3, #0
 8004334:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004338:	2300      	movs	r3, #0
 800433a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800433e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004342:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004344:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004348:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800434a:	2300      	movs	r3, #0
 800434c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004350:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004354:	4619      	mov	r1, r3
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7ff fe86 	bl	8004068 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800435c:	2301      	movs	r3, #1
 800435e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004360:	2301      	movs	r3, #1
 8004362:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004364:	2301      	movs	r3, #1
 8004366:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800436a:	2301      	movs	r3, #1
 800436c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800436e:	2300      	movs	r3, #0
 8004370:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004372:	2300      	movs	r3, #0
 8004374:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004378:	2300      	movs	r3, #0
 800437a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800437e:	2300      	movs	r3, #0
 8004380:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004382:	2301      	movs	r3, #1
 8004384:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004388:	2301      	movs	r3, #1
 800438a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800438c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004390:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004392:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004396:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800439c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800439e:	2301      	movs	r3, #1
 80043a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80043a8:	2300      	movs	r3, #0
 80043aa:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80043ac:	f107 0308 	add.w	r3, r7, #8
 80043b0:	4619      	mov	r1, r3
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7ff ff08 	bl	80041c8 <ETH_SetDMAConfig>
}
 80043b8:	bf00      	nop
 80043ba:	3798      	adds	r7, #152	; 0x98
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3305      	adds	r3, #5
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	021b      	lsls	r3, r3, #8
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	3204      	adds	r2, #4
 80043d8:	7812      	ldrb	r2, [r2, #0]
 80043da:	4313      	orrs	r3, r2
 80043dc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	4b11      	ldr	r3, [pc, #68]	; (8004428 <ETH_MACAddressConfig+0x68>)
 80043e2:	4413      	add	r3, r2
 80043e4:	461a      	mov	r2, r3
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3303      	adds	r3, #3
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	061a      	lsls	r2, r3, #24
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3302      	adds	r3, #2
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	041b      	lsls	r3, r3, #16
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3301      	adds	r3, #1
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	021b      	lsls	r3, r3, #8
 8004404:	4313      	orrs	r3, r2
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	7812      	ldrb	r2, [r2, #0]
 800440a:	4313      	orrs	r3, r2
 800440c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	4b06      	ldr	r3, [pc, #24]	; (800442c <ETH_MACAddressConfig+0x6c>)
 8004412:	4413      	add	r3, r2
 8004414:	461a      	mov	r2, r3
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	6013      	str	r3, [r2, #0]
}
 800441a:	bf00      	nop
 800441c:	371c      	adds	r7, #28
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40028040 	.word	0x40028040
 800442c:	40028044 	.word	0x40028044

08004430 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	e03e      	b.n	80044bc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68d9      	ldr	r1, [r3, #12]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	440b      	add	r3, r1
 800444e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2200      	movs	r2, #0
 800445a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2200      	movs	r2, #0
 8004460:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2200      	movs	r2, #0
 8004466:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004468:	68b9      	ldr	r1, [r7, #8]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	3206      	adds	r2, #6
 8004470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d80c      	bhi.n	80044a0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68d9      	ldr	r1, [r3, #12]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	4613      	mov	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	440b      	add	r3, r1
 8004498:	461a      	mov	r2, r3
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	60da      	str	r2, [r3, #12]
 800449e:	e004      	b.n	80044aa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	461a      	mov	r2, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3301      	adds	r3, #1
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b03      	cmp	r3, #3
 80044c0:	d9bd      	bls.n	800443e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044d4:	611a      	str	r2, [r3, #16]
}
 80044d6:	bf00      	nop
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b085      	sub	sp, #20
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80044ea:	2300      	movs	r3, #0
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	e046      	b.n	800457e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6919      	ldr	r1, [r3, #16]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4613      	mov	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	440b      	add	r3, r1
 8004500:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2200      	movs	r2, #0
 800450c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2200      	movs	r2, #0
 8004512:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2200      	movs	r2, #0
 8004518:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2200      	movs	r2, #0
 800451e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2200      	movs	r2, #0
 8004524:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800452c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8004534:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004542:	68b9      	ldr	r1, [r7, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	3212      	adds	r2, #18
 800454a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2b02      	cmp	r3, #2
 8004552:	d80c      	bhi.n	800456e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6919      	ldr	r1, [r3, #16]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	440b      	add	r3, r1
 8004566:	461a      	mov	r2, r3
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	60da      	str	r2, [r3, #12]
 800456c:	e004      	b.n	8004578 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	461a      	mov	r2, r3
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	3301      	adds	r3, #1
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2b03      	cmp	r3, #3
 8004582:	d9b5      	bls.n	80044f0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691a      	ldr	r2, [r3, #16]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ae:	60da      	str	r2, [r3, #12]
}
 80045b0:	bf00      	nop
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80045bc:	b480      	push	{r7}
 80045be:	b08d      	sub	sp, #52	; 0x34
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	3318      	adds	r3, #24
 80045cc:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80045da:	2300      	movs	r3, #0
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045e6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045fe:	d007      	beq.n	8004610 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004604:	3304      	adds	r3, #4
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004610:	2302      	movs	r3, #2
 8004612:	e0ff      	b.n	8004814 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	3301      	adds	r3, #1
 8004618:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	4b7d      	ldr	r3, [pc, #500]	; (8004820 <ETH_Prepare_Tx_Descriptors+0x264>)
 800462a:	4013      	ands	r3, r2
 800462c:	69fa      	ldr	r2, [r7, #28]
 800462e:	6852      	ldr	r2, [r2, #4]
 8004630:	431a      	orrs	r2, r3
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d008      	beq.n	8004654 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	431a      	orrs	r2, r3
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0320 	and.w	r3, r3, #32
 800465c:	2b00      	cmp	r3, #0
 800465e:	d008      	beq.n	8004672 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	431a      	orrs	r2, r3
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0304 	and.w	r3, r3, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	d005      	beq.n	800468a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8004696:	f3bf 8f5f 	dmb	sy
}
 800469a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80046a8:	e082      	b.n	80047b0 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d006      	beq.n	80046ca <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	e005      	b.n	80046d6 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80046d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d8:	3301      	adds	r3, #1
 80046da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046de:	2b03      	cmp	r3, #3
 80046e0:	d902      	bls.n	80046e8 <ETH_Prepare_Tx_Descriptors+0x12c>
 80046e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e4:	3b04      	subs	r3, #4
 80046e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046f0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004706:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800470a:	d007      	beq.n	800471c <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004710:	3304      	adds	r3, #4
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d029      	beq.n	8004770 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004728:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800472a:	2300      	movs	r3, #0
 800472c:	62bb      	str	r3, [r7, #40]	; 0x28
 800472e:	e019      	b.n	8004764 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8004730:	f3bf 8f5f 	dmb	sy
}
 8004734:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004744:	3301      	adds	r3, #1
 8004746:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474a:	2b03      	cmp	r3, #3
 800474c:	d902      	bls.n	8004754 <ETH_Prepare_Tx_Descriptors+0x198>
 800474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004750:	3b04      	subs	r3, #4
 8004752:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800475c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	3301      	adds	r3, #1
 8004762:	62bb      	str	r3, [r7, #40]	; 0x28
 8004764:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	429a      	cmp	r2, r3
 800476a:	d3e1      	bcc.n	8004730 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 800476c:	2302      	movs	r3, #2
 800476e:	e051      	b.n	8004814 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	3301      	adds	r3, #1
 8004774:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	461a      	mov	r2, r3
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	4b25      	ldr	r3, [pc, #148]	; (8004820 <ETH_Prepare_Tx_Descriptors+0x264>)
 800478c:	4013      	ands	r3, r2
 800478e:	69fa      	ldr	r2, [r7, #28]
 8004790:	6852      	ldr	r2, [r2, #4]
 8004792:	431a      	orrs	r2, r3
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	3301      	adds	r3, #1
 800479c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800479e:	f3bf 8f5f 	dmb	sy
}
 80047a2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f47f af78 	bne.w	80046aa <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d006      	beq.n	80047ce <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	e005      	b.n	80047da <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047ea:	6979      	ldr	r1, [r7, #20]
 80047ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ee:	3304      	adds	r3, #4
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047fa:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80047fc:	b672      	cpsid	i
}
 80047fe:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	4413      	add	r3, r2
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800480e:	b662      	cpsie	i
}
 8004810:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3734      	adds	r7, #52	; 0x34
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	ffffe000 	.word	0xffffe000

08004824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004824:	b480      	push	{r7}
 8004826:	b089      	sub	sp, #36	; 0x24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800482e:	2300      	movs	r3, #0
 8004830:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004832:	2300      	movs	r3, #0
 8004834:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004836:	2300      	movs	r3, #0
 8004838:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800483a:	2300      	movs	r3, #0
 800483c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800483e:	2300      	movs	r3, #0
 8004840:	61fb      	str	r3, [r7, #28]
 8004842:	e175      	b.n	8004b30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004844:	2201      	movs	r2, #1
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4013      	ands	r3, r2
 8004856:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	429a      	cmp	r2, r3
 800485e:	f040 8164 	bne.w	8004b2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	2b01      	cmp	r3, #1
 800486c:	d005      	beq.n	800487a <HAL_GPIO_Init+0x56>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d130      	bne.n	80048dc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	2203      	movs	r2, #3
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	43db      	mvns	r3, r3
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	4013      	ands	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048b0:	2201      	movs	r2, #1
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	43db      	mvns	r3, r3
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	4013      	ands	r3, r2
 80048be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	091b      	lsrs	r3, r3, #4
 80048c6:	f003 0201 	and.w	r2, r3, #1
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f003 0303 	and.w	r3, r3, #3
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d017      	beq.n	8004918 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	2203      	movs	r2, #3
 80048f4:	fa02 f303 	lsl.w	r3, r2, r3
 80048f8:	43db      	mvns	r3, r3
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	4013      	ands	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	4313      	orrs	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f003 0303 	and.w	r3, r3, #3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d123      	bne.n	800496c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	08da      	lsrs	r2, r3, #3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3208      	adds	r2, #8
 800492c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	220f      	movs	r2, #15
 800493c:	fa02 f303 	lsl.w	r3, r2, r3
 8004940:	43db      	mvns	r3, r3
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	4013      	ands	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	691a      	ldr	r2, [r3, #16]
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	4313      	orrs	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	08da      	lsrs	r2, r3, #3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	3208      	adds	r2, #8
 8004966:	69b9      	ldr	r1, [r7, #24]
 8004968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	2203      	movs	r2, #3
 8004978:	fa02 f303 	lsl.w	r3, r2, r3
 800497c:	43db      	mvns	r3, r3
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	4013      	ands	r3, r2
 8004982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f003 0203 	and.w	r2, r3, #3
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	fa02 f303 	lsl.w	r3, r2, r3
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	4313      	orrs	r3, r2
 8004998:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 80be 	beq.w	8004b2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ae:	4b66      	ldr	r3, [pc, #408]	; (8004b48 <HAL_GPIO_Init+0x324>)
 80049b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b2:	4a65      	ldr	r2, [pc, #404]	; (8004b48 <HAL_GPIO_Init+0x324>)
 80049b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049b8:	6453      	str	r3, [r2, #68]	; 0x44
 80049ba:	4b63      	ldr	r3, [pc, #396]	; (8004b48 <HAL_GPIO_Init+0x324>)
 80049bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80049c6:	4a61      	ldr	r2, [pc, #388]	; (8004b4c <HAL_GPIO_Init+0x328>)
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	089b      	lsrs	r3, r3, #2
 80049cc:	3302      	adds	r3, #2
 80049ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	220f      	movs	r2, #15
 80049de:	fa02 f303 	lsl.w	r3, r2, r3
 80049e2:	43db      	mvns	r3, r3
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	4013      	ands	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a58      	ldr	r2, [pc, #352]	; (8004b50 <HAL_GPIO_Init+0x32c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d037      	beq.n	8004a62 <HAL_GPIO_Init+0x23e>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a57      	ldr	r2, [pc, #348]	; (8004b54 <HAL_GPIO_Init+0x330>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d031      	beq.n	8004a5e <HAL_GPIO_Init+0x23a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a56      	ldr	r2, [pc, #344]	; (8004b58 <HAL_GPIO_Init+0x334>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d02b      	beq.n	8004a5a <HAL_GPIO_Init+0x236>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a55      	ldr	r2, [pc, #340]	; (8004b5c <HAL_GPIO_Init+0x338>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d025      	beq.n	8004a56 <HAL_GPIO_Init+0x232>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a54      	ldr	r2, [pc, #336]	; (8004b60 <HAL_GPIO_Init+0x33c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d01f      	beq.n	8004a52 <HAL_GPIO_Init+0x22e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a53      	ldr	r2, [pc, #332]	; (8004b64 <HAL_GPIO_Init+0x340>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d019      	beq.n	8004a4e <HAL_GPIO_Init+0x22a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a52      	ldr	r2, [pc, #328]	; (8004b68 <HAL_GPIO_Init+0x344>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d013      	beq.n	8004a4a <HAL_GPIO_Init+0x226>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a51      	ldr	r2, [pc, #324]	; (8004b6c <HAL_GPIO_Init+0x348>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d00d      	beq.n	8004a46 <HAL_GPIO_Init+0x222>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a50      	ldr	r2, [pc, #320]	; (8004b70 <HAL_GPIO_Init+0x34c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d007      	beq.n	8004a42 <HAL_GPIO_Init+0x21e>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a4f      	ldr	r2, [pc, #316]	; (8004b74 <HAL_GPIO_Init+0x350>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d101      	bne.n	8004a3e <HAL_GPIO_Init+0x21a>
 8004a3a:	2309      	movs	r3, #9
 8004a3c:	e012      	b.n	8004a64 <HAL_GPIO_Init+0x240>
 8004a3e:	230a      	movs	r3, #10
 8004a40:	e010      	b.n	8004a64 <HAL_GPIO_Init+0x240>
 8004a42:	2308      	movs	r3, #8
 8004a44:	e00e      	b.n	8004a64 <HAL_GPIO_Init+0x240>
 8004a46:	2307      	movs	r3, #7
 8004a48:	e00c      	b.n	8004a64 <HAL_GPIO_Init+0x240>
 8004a4a:	2306      	movs	r3, #6
 8004a4c:	e00a      	b.n	8004a64 <HAL_GPIO_Init+0x240>
 8004a4e:	2305      	movs	r3, #5
 8004a50:	e008      	b.n	8004a64 <HAL_GPIO_Init+0x240>
 8004a52:	2304      	movs	r3, #4
 8004a54:	e006      	b.n	8004a64 <HAL_GPIO_Init+0x240>
 8004a56:	2303      	movs	r3, #3
 8004a58:	e004      	b.n	8004a64 <HAL_GPIO_Init+0x240>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	e002      	b.n	8004a64 <HAL_GPIO_Init+0x240>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e000      	b.n	8004a64 <HAL_GPIO_Init+0x240>
 8004a62:	2300      	movs	r3, #0
 8004a64:	69fa      	ldr	r2, [r7, #28]
 8004a66:	f002 0203 	and.w	r2, r2, #3
 8004a6a:	0092      	lsls	r2, r2, #2
 8004a6c:	4093      	lsls	r3, r2
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004a74:	4935      	ldr	r1, [pc, #212]	; (8004b4c <HAL_GPIO_Init+0x328>)
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	089b      	lsrs	r3, r3, #2
 8004a7a:	3302      	adds	r3, #2
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a82:	4b3d      	ldr	r3, [pc, #244]	; (8004b78 <HAL_GPIO_Init+0x354>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	43db      	mvns	r3, r3
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004aa6:	4a34      	ldr	r2, [pc, #208]	; (8004b78 <HAL_GPIO_Init+0x354>)
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004aac:	4b32      	ldr	r3, [pc, #200]	; (8004b78 <HAL_GPIO_Init+0x354>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ad0:	4a29      	ldr	r2, [pc, #164]	; (8004b78 <HAL_GPIO_Init+0x354>)
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ad6:	4b28      	ldr	r3, [pc, #160]	; (8004b78 <HAL_GPIO_Init+0x354>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004afa:	4a1f      	ldr	r2, [pc, #124]	; (8004b78 <HAL_GPIO_Init+0x354>)
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b00:	4b1d      	ldr	r3, [pc, #116]	; (8004b78 <HAL_GPIO_Init+0x354>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	43db      	mvns	r3, r3
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b24:	4a14      	ldr	r2, [pc, #80]	; (8004b78 <HAL_GPIO_Init+0x354>)
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	61fb      	str	r3, [r7, #28]
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	2b0f      	cmp	r3, #15
 8004b34:	f67f ae86 	bls.w	8004844 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004b38:	bf00      	nop
 8004b3a:	bf00      	nop
 8004b3c:	3724      	adds	r7, #36	; 0x24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	40013800 	.word	0x40013800
 8004b50:	40020000 	.word	0x40020000
 8004b54:	40020400 	.word	0x40020400
 8004b58:	40020800 	.word	0x40020800
 8004b5c:	40020c00 	.word	0x40020c00
 8004b60:	40021000 	.word	0x40021000
 8004b64:	40021400 	.word	0x40021400
 8004b68:	40021800 	.word	0x40021800
 8004b6c:	40021c00 	.word	0x40021c00
 8004b70:	40022000 	.word	0x40022000
 8004b74:	40022400 	.word	0x40022400
 8004b78:	40013c00 	.word	0x40013c00

08004b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	460b      	mov	r3, r1
 8004b86:	807b      	strh	r3, [r7, #2]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b8c:	787b      	ldrb	r3, [r7, #1]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b92:	887a      	ldrh	r2, [r7, #2]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004b98:	e003      	b.n	8004ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004b9a:	887b      	ldrh	r3, [r7, #2]
 8004b9c:	041a      	lsls	r2, r3, #16
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	619a      	str	r2, [r3, #24]
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
	...

08004bb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e07f      	b.n	8004cc2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d106      	bne.n	8004bdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7fd fa86 	bl	80020e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2224      	movs	r2, #36	; 0x24
 8004be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0201 	bic.w	r2, r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d107      	bne.n	8004c2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689a      	ldr	r2, [r3, #8]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c26:	609a      	str	r2, [r3, #8]
 8004c28:	e006      	b.n	8004c38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004c36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d104      	bne.n	8004c4a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6859      	ldr	r1, [r3, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	4b1d      	ldr	r3, [pc, #116]	; (8004ccc <HAL_I2C_Init+0x11c>)
 8004c56:	430b      	orrs	r3, r1
 8004c58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68da      	ldr	r2, [r3, #12]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691a      	ldr	r2, [r3, #16]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	69d9      	ldr	r1, [r3, #28]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1a      	ldr	r2, [r3, #32]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0201 	orr.w	r2, r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	02008000 	.word	0x02008000

08004cd0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	4608      	mov	r0, r1
 8004cda:	4611      	mov	r1, r2
 8004cdc:	461a      	mov	r2, r3
 8004cde:	4603      	mov	r3, r0
 8004ce0:	817b      	strh	r3, [r7, #10]
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	813b      	strh	r3, [r7, #8]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	f040 80f9 	bne.w	8004eea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <HAL_I2C_Mem_Write+0x34>
 8004cfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d105      	bne.n	8004d10 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d0a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e0ed      	b.n	8004eec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d101      	bne.n	8004d1e <HAL_I2C_Mem_Write+0x4e>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e0e6      	b.n	8004eec <HAL_I2C_Mem_Write+0x21c>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d26:	f7fd fdef 	bl	8002908 <HAL_GetTick>
 8004d2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	2319      	movs	r3, #25
 8004d32:	2201      	movs	r2, #1
 8004d34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 f955 	bl	8004fe8 <I2C_WaitOnFlagUntilTimeout>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0d1      	b.n	8004eec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2221      	movs	r2, #33	; 0x21
 8004d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2240      	movs	r2, #64	; 0x40
 8004d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a3a      	ldr	r2, [r7, #32]
 8004d62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d70:	88f8      	ldrh	r0, [r7, #6]
 8004d72:	893a      	ldrh	r2, [r7, #8]
 8004d74:	8979      	ldrh	r1, [r7, #10]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	9301      	str	r3, [sp, #4]
 8004d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	4603      	mov	r3, r0
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f000 f8b9 	bl	8004ef8 <I2C_RequestMemoryWrite>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d005      	beq.n	8004d98 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e0a9      	b.n	8004eec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2bff      	cmp	r3, #255	; 0xff
 8004da0:	d90e      	bls.n	8004dc0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	22ff      	movs	r2, #255	; 0xff
 8004da6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	8979      	ldrh	r1, [r7, #10]
 8004db0:	2300      	movs	r3, #0
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 fab1 	bl	8005320 <I2C_TransferConfig>
 8004dbe:	e00f      	b.n	8004de0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	8979      	ldrh	r1, [r7, #10]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 faa0 	bl	8005320 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 f93f 	bl	8005068 <I2C_WaitOnTXISFlagUntilTimeout>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e07b      	b.n	8004eec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	781a      	ldrb	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d034      	beq.n	8004e98 <HAL_I2C_Mem_Write+0x1c8>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d130      	bne.n	8004e98 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	2180      	movs	r1, #128	; 0x80
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 f8d1 	bl	8004fe8 <I2C_WaitOnFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e04d      	b.n	8004eec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2bff      	cmp	r3, #255	; 0xff
 8004e58:	d90e      	bls.n	8004e78 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	22ff      	movs	r2, #255	; 0xff
 8004e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	8979      	ldrh	r1, [r7, #10]
 8004e68:	2300      	movs	r3, #0
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 fa55 	bl	8005320 <I2C_TransferConfig>
 8004e76:	e00f      	b.n	8004e98 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	8979      	ldrh	r1, [r7, #10]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 fa44 	bl	8005320 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d19e      	bne.n	8004de0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 f91e 	bl	80050e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e01a      	b.n	8004eec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6859      	ldr	r1, [r3, #4]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	4b0a      	ldr	r3, [pc, #40]	; (8004ef4 <HAL_I2C_Mem_Write+0x224>)
 8004eca:	400b      	ands	r3, r1
 8004ecc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	e000      	b.n	8004eec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004eea:	2302      	movs	r3, #2
  }
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	fe00e800 	.word	0xfe00e800

08004ef8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af02      	add	r7, sp, #8
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	4608      	mov	r0, r1
 8004f02:	4611      	mov	r1, r2
 8004f04:	461a      	mov	r2, r3
 8004f06:	4603      	mov	r3, r0
 8004f08:	817b      	strh	r3, [r7, #10]
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	813b      	strh	r3, [r7, #8]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004f12:	88fb      	ldrh	r3, [r7, #6]
 8004f14:	b2da      	uxtb	r2, r3
 8004f16:	8979      	ldrh	r1, [r7, #10]
 8004f18:	4b20      	ldr	r3, [pc, #128]	; (8004f9c <I2C_RequestMemoryWrite+0xa4>)
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 f9fd 	bl	8005320 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f26:	69fa      	ldr	r2, [r7, #28]
 8004f28:	69b9      	ldr	r1, [r7, #24]
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 f89c 	bl	8005068 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e02c      	b.n	8004f94 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f3a:	88fb      	ldrh	r3, [r7, #6]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d105      	bne.n	8004f4c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f40:	893b      	ldrh	r3, [r7, #8]
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	629a      	str	r2, [r3, #40]	; 0x28
 8004f4a:	e015      	b.n	8004f78 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f4c:	893b      	ldrh	r3, [r7, #8]
 8004f4e:	0a1b      	lsrs	r3, r3, #8
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f5a:	69fa      	ldr	r2, [r7, #28]
 8004f5c:	69b9      	ldr	r1, [r7, #24]
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 f882 	bl	8005068 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e012      	b.n	8004f94 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f6e:	893b      	ldrh	r3, [r7, #8]
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	2180      	movs	r1, #128	; 0x80
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 f830 	bl	8004fe8 <I2C_WaitOnFlagUntilTimeout>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	80002000 	.word	0x80002000

08004fa0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d103      	bne.n	8004fbe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d007      	beq.n	8004fdc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699a      	ldr	r2, [r3, #24]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0201 	orr.w	r2, r2, #1
 8004fda:	619a      	str	r2, [r3, #24]
  }
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	603b      	str	r3, [r7, #0]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ff8:	e022      	b.n	8005040 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005000:	d01e      	beq.n	8005040 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005002:	f7fd fc81 	bl	8002908 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	d302      	bcc.n	8005018 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d113      	bne.n	8005040 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501c:	f043 0220 	orr.w	r2, r3, #32
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e00f      	b.n	8005060 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699a      	ldr	r2, [r3, #24]
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	4013      	ands	r3, r2
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	429a      	cmp	r2, r3
 800504e:	bf0c      	ite	eq
 8005050:	2301      	moveq	r3, #1
 8005052:	2300      	movne	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	461a      	mov	r2, r3
 8005058:	79fb      	ldrb	r3, [r7, #7]
 800505a:	429a      	cmp	r2, r3
 800505c:	d0cd      	beq.n	8004ffa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005074:	e02c      	b.n	80050d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	68b9      	ldr	r1, [r7, #8]
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 f870 	bl	8005160 <I2C_IsErrorOccurred>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e02a      	b.n	80050e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005090:	d01e      	beq.n	80050d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005092:	f7fd fc39 	bl	8002908 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d302      	bcc.n	80050a8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d113      	bne.n	80050d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ac:	f043 0220 	orr.w	r2, r3, #32
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e007      	b.n	80050e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d1cb      	bne.n	8005076 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050f4:	e028      	b.n	8005148 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	68b9      	ldr	r1, [r7, #8]
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 f830 	bl	8005160 <I2C_IsErrorOccurred>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e026      	b.n	8005158 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800510a:	f7fd fbfd 	bl	8002908 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	429a      	cmp	r2, r3
 8005118:	d302      	bcc.n	8005120 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d113      	bne.n	8005148 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005124:	f043 0220 	orr.w	r2, r3, #32
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2220      	movs	r2, #32
 8005130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e007      	b.n	8005158 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	f003 0320 	and.w	r3, r3, #32
 8005152:	2b20      	cmp	r3, #32
 8005154:	d1cf      	bne.n	80050f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b08a      	sub	sp, #40	; 0x28
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800516c:	2300      	movs	r3, #0
 800516e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800517a:	2300      	movs	r3, #0
 800517c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	f003 0310 	and.w	r3, r3, #16
 8005188:	2b00      	cmp	r3, #0
 800518a:	d068      	beq.n	800525e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2210      	movs	r2, #16
 8005192:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005194:	e049      	b.n	800522a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519c:	d045      	beq.n	800522a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800519e:	f7fd fbb3 	bl	8002908 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d302      	bcc.n	80051b4 <I2C_IsErrorOccurred+0x54>
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d13a      	bne.n	800522a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051d6:	d121      	bne.n	800521c <I2C_IsErrorOccurred+0xbc>
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051de:	d01d      	beq.n	800521c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80051e0:	7cfb      	ldrb	r3, [r7, #19]
 80051e2:	2b20      	cmp	r3, #32
 80051e4:	d01a      	beq.n	800521c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80051f6:	f7fd fb87 	bl	8002908 <HAL_GetTick>
 80051fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051fc:	e00e      	b.n	800521c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80051fe:	f7fd fb83 	bl	8002908 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b19      	cmp	r3, #25
 800520a:	d907      	bls.n	800521c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	f043 0320 	orr.w	r3, r3, #32
 8005212:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800521a:	e006      	b.n	800522a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	f003 0320 	and.w	r3, r3, #32
 8005226:	2b20      	cmp	r3, #32
 8005228:	d1e9      	bne.n	80051fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	f003 0320 	and.w	r3, r3, #32
 8005234:	2b20      	cmp	r3, #32
 8005236:	d003      	beq.n	8005240 <I2C_IsErrorOccurred+0xe0>
 8005238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800523c:	2b00      	cmp	r3, #0
 800523e:	d0aa      	beq.n	8005196 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005244:	2b00      	cmp	r3, #0
 8005246:	d103      	bne.n	8005250 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2220      	movs	r2, #32
 800524e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	f043 0304 	orr.w	r3, r3, #4
 8005256:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00b      	beq.n	8005288 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	f043 0301 	orr.w	r3, r3, #1
 8005276:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005280:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00b      	beq.n	80052aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	f043 0308 	orr.w	r3, r3, #8
 8005298:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00b      	beq.n	80052cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	f043 0302 	orr.w	r3, r3, #2
 80052ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80052cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d01c      	beq.n	800530e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f7ff fe63 	bl	8004fa0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6859      	ldr	r1, [r3, #4]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	4b0d      	ldr	r3, [pc, #52]	; (800531c <I2C_IsErrorOccurred+0x1bc>)
 80052e6:	400b      	ands	r3, r1
 80052e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	431a      	orrs	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2220      	movs	r2, #32
 80052fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800530e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005312:	4618      	mov	r0, r3
 8005314:	3728      	adds	r7, #40	; 0x28
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	fe00e800 	.word	0xfe00e800

08005320 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	607b      	str	r3, [r7, #4]
 800532a:	460b      	mov	r3, r1
 800532c:	817b      	strh	r3, [r7, #10]
 800532e:	4613      	mov	r3, r2
 8005330:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005332:	897b      	ldrh	r3, [r7, #10]
 8005334:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005338:	7a7b      	ldrb	r3, [r7, #9]
 800533a:	041b      	lsls	r3, r3, #16
 800533c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005340:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	4313      	orrs	r3, r2
 800534a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800534e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	0d5b      	lsrs	r3, r3, #21
 800535a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800535e:	4b08      	ldr	r3, [pc, #32]	; (8005380 <I2C_TransferConfig+0x60>)
 8005360:	430b      	orrs	r3, r1
 8005362:	43db      	mvns	r3, r3
 8005364:	ea02 0103 	and.w	r1, r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	430a      	orrs	r2, r1
 8005370:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005372:	bf00      	nop
 8005374:	371c      	adds	r7, #28
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	03ff63ff 	.word	0x03ff63ff

08005384 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b20      	cmp	r3, #32
 8005398:	d138      	bne.n	800540c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d101      	bne.n	80053a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80053a4:	2302      	movs	r3, #2
 80053a6:	e032      	b.n	800540e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2224      	movs	r2, #36	; 0x24
 80053b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0201 	bic.w	r2, r2, #1
 80053c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6819      	ldr	r1, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0201 	orr.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005408:	2300      	movs	r3, #0
 800540a:	e000      	b.n	800540e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800540c:	2302      	movs	r3, #2
  }
}
 800540e:	4618      	mov	r0, r3
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800541a:	b480      	push	{r7}
 800541c:	b085      	sub	sp, #20
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b20      	cmp	r3, #32
 800542e:	d139      	bne.n	80054a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005436:	2b01      	cmp	r3, #1
 8005438:	d101      	bne.n	800543e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800543a:	2302      	movs	r3, #2
 800543c:	e033      	b.n	80054a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2224      	movs	r2, #36	; 0x24
 800544a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 0201 	bic.w	r2, r2, #1
 800545c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800546c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	021b      	lsls	r3, r3, #8
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	4313      	orrs	r3, r2
 8005476:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f042 0201 	orr.w	r2, r2, #1
 800548e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054a0:	2300      	movs	r3, #0
 80054a2:	e000      	b.n	80054a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80054a4:	2302      	movs	r3, #2
  }
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80054b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054b4:	b08f      	sub	sp, #60	; 0x3c
 80054b6:	af0a      	add	r7, sp, #40	; 0x28
 80054b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e116      	b.n	80056f2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d106      	bne.n	80054e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7fc fec0 	bl	8002264 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2203      	movs	r2, #3
 80054e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d102      	bne.n	80054fe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4618      	mov	r0, r3
 8005504:	f001 fe92 	bl	800722c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	603b      	str	r3, [r7, #0]
 800550e:	687e      	ldr	r6, [r7, #4]
 8005510:	466d      	mov	r5, sp
 8005512:	f106 0410 	add.w	r4, r6, #16
 8005516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800551a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800551c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800551e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005522:	e885 0003 	stmia.w	r5, {r0, r1}
 8005526:	1d33      	adds	r3, r6, #4
 8005528:	cb0e      	ldmia	r3, {r1, r2, r3}
 800552a:	6838      	ldr	r0, [r7, #0]
 800552c:	f001 fe26 	bl	800717c <USB_CoreInit>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d005      	beq.n	8005542 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2202      	movs	r2, #2
 800553a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e0d7      	b.n	80056f2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2100      	movs	r1, #0
 8005548:	4618      	mov	r0, r3
 800554a:	f001 fe80 	bl	800724e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800554e:	2300      	movs	r3, #0
 8005550:	73fb      	strb	r3, [r7, #15]
 8005552:	e04a      	b.n	80055ea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005554:	7bfa      	ldrb	r2, [r7, #15]
 8005556:	6879      	ldr	r1, [r7, #4]
 8005558:	4613      	mov	r3, r2
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	440b      	add	r3, r1
 8005562:	333d      	adds	r3, #61	; 0x3d
 8005564:	2201      	movs	r2, #1
 8005566:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005568:	7bfa      	ldrb	r2, [r7, #15]
 800556a:	6879      	ldr	r1, [r7, #4]
 800556c:	4613      	mov	r3, r2
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	4413      	add	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	333c      	adds	r3, #60	; 0x3c
 8005578:	7bfa      	ldrb	r2, [r7, #15]
 800557a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800557c:	7bfa      	ldrb	r2, [r7, #15]
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	b298      	uxth	r0, r3
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	4613      	mov	r3, r2
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	4413      	add	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	440b      	add	r3, r1
 800558e:	3344      	adds	r3, #68	; 0x44
 8005590:	4602      	mov	r2, r0
 8005592:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005594:	7bfa      	ldrb	r2, [r7, #15]
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	4613      	mov	r3, r2
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	4413      	add	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	3340      	adds	r3, #64	; 0x40
 80055a4:	2200      	movs	r2, #0
 80055a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80055a8:	7bfa      	ldrb	r2, [r7, #15]
 80055aa:	6879      	ldr	r1, [r7, #4]
 80055ac:	4613      	mov	r3, r2
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	4413      	add	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	440b      	add	r3, r1
 80055b6:	3348      	adds	r3, #72	; 0x48
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80055bc:	7bfa      	ldrb	r2, [r7, #15]
 80055be:	6879      	ldr	r1, [r7, #4]
 80055c0:	4613      	mov	r3, r2
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	4413      	add	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	440b      	add	r3, r1
 80055ca:	334c      	adds	r3, #76	; 0x4c
 80055cc:	2200      	movs	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80055d0:	7bfa      	ldrb	r2, [r7, #15]
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	4613      	mov	r3, r2
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	4413      	add	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	440b      	add	r3, r1
 80055de:	3354      	adds	r3, #84	; 0x54
 80055e0:	2200      	movs	r2, #0
 80055e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
 80055e6:	3301      	adds	r3, #1
 80055e8:	73fb      	strb	r3, [r7, #15]
 80055ea:	7bfa      	ldrb	r2, [r7, #15]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d3af      	bcc.n	8005554 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055f4:	2300      	movs	r3, #0
 80055f6:	73fb      	strb	r3, [r7, #15]
 80055f8:	e044      	b.n	8005684 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80055fa:	7bfa      	ldrb	r2, [r7, #15]
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	4613      	mov	r3, r2
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	4413      	add	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	440b      	add	r3, r1
 8005608:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800560c:	2200      	movs	r2, #0
 800560e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005610:	7bfa      	ldrb	r2, [r7, #15]
 8005612:	6879      	ldr	r1, [r7, #4]
 8005614:	4613      	mov	r3, r2
 8005616:	00db      	lsls	r3, r3, #3
 8005618:	4413      	add	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	440b      	add	r3, r1
 800561e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005622:	7bfa      	ldrb	r2, [r7, #15]
 8005624:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005626:	7bfa      	ldrb	r2, [r7, #15]
 8005628:	6879      	ldr	r1, [r7, #4]
 800562a:	4613      	mov	r3, r2
 800562c:	00db      	lsls	r3, r3, #3
 800562e:	4413      	add	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	440b      	add	r3, r1
 8005634:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005638:	2200      	movs	r2, #0
 800563a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800563c:	7bfa      	ldrb	r2, [r7, #15]
 800563e:	6879      	ldr	r1, [r7, #4]
 8005640:	4613      	mov	r3, r2
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	4413      	add	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	440b      	add	r3, r1
 800564a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800564e:	2200      	movs	r2, #0
 8005650:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005652:	7bfa      	ldrb	r2, [r7, #15]
 8005654:	6879      	ldr	r1, [r7, #4]
 8005656:	4613      	mov	r3, r2
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	4413      	add	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	440b      	add	r3, r1
 8005660:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005664:	2200      	movs	r2, #0
 8005666:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005668:	7bfa      	ldrb	r2, [r7, #15]
 800566a:	6879      	ldr	r1, [r7, #4]
 800566c:	4613      	mov	r3, r2
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	4413      	add	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	440b      	add	r3, r1
 8005676:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800567a:	2200      	movs	r2, #0
 800567c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800567e:	7bfb      	ldrb	r3, [r7, #15]
 8005680:	3301      	adds	r3, #1
 8005682:	73fb      	strb	r3, [r7, #15]
 8005684:	7bfa      	ldrb	r2, [r7, #15]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	429a      	cmp	r2, r3
 800568c:	d3b5      	bcc.n	80055fa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	687e      	ldr	r6, [r7, #4]
 8005696:	466d      	mov	r5, sp
 8005698:	f106 0410 	add.w	r4, r6, #16
 800569c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800569e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80056a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80056ac:	1d33      	adds	r3, r6, #4
 80056ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056b0:	6838      	ldr	r0, [r7, #0]
 80056b2:	f001 fe19 	bl	80072e8 <USB_DevInit>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d005      	beq.n	80056c8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e014      	b.n	80056f2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d102      	bne.n	80056e6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f80b 	bl	80056fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f001 ffd7 	bl	800769e <USB_DevDisconnect>

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080056fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800572a:	4b05      	ldr	r3, [pc, #20]	; (8005740 <HAL_PCDEx_ActivateLPM+0x44>)
 800572c:	4313      	orrs	r3, r2
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	10000003 	.word	0x10000003

08005744 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005748:	4b05      	ldr	r3, [pc, #20]	; (8005760 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a04      	ldr	r2, [pc, #16]	; (8005760 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800574e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005752:	6013      	str	r3, [r2, #0]
}
 8005754:	bf00      	nop
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40007000 	.word	0x40007000

08005764 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800576c:	2300      	movs	r3, #0
 800576e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e291      	b.n	8005c9e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 8087 	beq.w	8005896 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005788:	4b96      	ldr	r3, [pc, #600]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f003 030c 	and.w	r3, r3, #12
 8005790:	2b04      	cmp	r3, #4
 8005792:	d00c      	beq.n	80057ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005794:	4b93      	ldr	r3, [pc, #588]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f003 030c 	and.w	r3, r3, #12
 800579c:	2b08      	cmp	r3, #8
 800579e:	d112      	bne.n	80057c6 <HAL_RCC_OscConfig+0x62>
 80057a0:	4b90      	ldr	r3, [pc, #576]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057ac:	d10b      	bne.n	80057c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057ae:	4b8d      	ldr	r3, [pc, #564]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d06c      	beq.n	8005894 <HAL_RCC_OscConfig+0x130>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d168      	bne.n	8005894 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e26b      	b.n	8005c9e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ce:	d106      	bne.n	80057de <HAL_RCC_OscConfig+0x7a>
 80057d0:	4b84      	ldr	r3, [pc, #528]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a83      	ldr	r2, [pc, #524]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 80057d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	e02e      	b.n	800583c <HAL_RCC_OscConfig+0xd8>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10c      	bne.n	8005800 <HAL_RCC_OscConfig+0x9c>
 80057e6:	4b7f      	ldr	r3, [pc, #508]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a7e      	ldr	r2, [pc, #504]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 80057ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	4b7c      	ldr	r3, [pc, #496]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a7b      	ldr	r2, [pc, #492]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 80057f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057fc:	6013      	str	r3, [r2, #0]
 80057fe:	e01d      	b.n	800583c <HAL_RCC_OscConfig+0xd8>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005808:	d10c      	bne.n	8005824 <HAL_RCC_OscConfig+0xc0>
 800580a:	4b76      	ldr	r3, [pc, #472]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a75      	ldr	r2, [pc, #468]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 8005810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	4b73      	ldr	r3, [pc, #460]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a72      	ldr	r2, [pc, #456]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 800581c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005820:	6013      	str	r3, [r2, #0]
 8005822:	e00b      	b.n	800583c <HAL_RCC_OscConfig+0xd8>
 8005824:	4b6f      	ldr	r3, [pc, #444]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a6e      	ldr	r2, [pc, #440]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 800582a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800582e:	6013      	str	r3, [r2, #0]
 8005830:	4b6c      	ldr	r3, [pc, #432]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a6b      	ldr	r2, [pc, #428]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 8005836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800583a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d013      	beq.n	800586c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005844:	f7fd f860 	bl	8002908 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800584c:	f7fd f85c 	bl	8002908 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b64      	cmp	r3, #100	; 0x64
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e21f      	b.n	8005c9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800585e:	4b61      	ldr	r3, [pc, #388]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0f0      	beq.n	800584c <HAL_RCC_OscConfig+0xe8>
 800586a:	e014      	b.n	8005896 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586c:	f7fd f84c 	bl	8002908 <HAL_GetTick>
 8005870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005872:	e008      	b.n	8005886 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005874:	f7fd f848 	bl	8002908 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b64      	cmp	r3, #100	; 0x64
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e20b      	b.n	8005c9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005886:	4b57      	ldr	r3, [pc, #348]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1f0      	bne.n	8005874 <HAL_RCC_OscConfig+0x110>
 8005892:	e000      	b.n	8005896 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d069      	beq.n	8005976 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058a2:	4b50      	ldr	r3, [pc, #320]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 030c 	and.w	r3, r3, #12
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00b      	beq.n	80058c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058ae:	4b4d      	ldr	r3, [pc, #308]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f003 030c 	and.w	r3, r3, #12
 80058b6:	2b08      	cmp	r3, #8
 80058b8:	d11c      	bne.n	80058f4 <HAL_RCC_OscConfig+0x190>
 80058ba:	4b4a      	ldr	r3, [pc, #296]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d116      	bne.n	80058f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058c6:	4b47      	ldr	r3, [pc, #284]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d005      	beq.n	80058de <HAL_RCC_OscConfig+0x17a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d001      	beq.n	80058de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e1df      	b.n	8005c9e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058de:	4b41      	ldr	r3, [pc, #260]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	00db      	lsls	r3, r3, #3
 80058ec:	493d      	ldr	r1, [pc, #244]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058f2:	e040      	b.n	8005976 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d023      	beq.n	8005944 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058fc:	4b39      	ldr	r3, [pc, #228]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a38      	ldr	r2, [pc, #224]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 8005902:	f043 0301 	orr.w	r3, r3, #1
 8005906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005908:	f7fc fffe 	bl	8002908 <HAL_GetTick>
 800590c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800590e:	e008      	b.n	8005922 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005910:	f7fc fffa 	bl	8002908 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d901      	bls.n	8005922 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e1bd      	b.n	8005c9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005922:	4b30      	ldr	r3, [pc, #192]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d0f0      	beq.n	8005910 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800592e:	4b2d      	ldr	r3, [pc, #180]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	4929      	ldr	r1, [pc, #164]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 800593e:	4313      	orrs	r3, r2
 8005940:	600b      	str	r3, [r1, #0]
 8005942:	e018      	b.n	8005976 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005944:	4b27      	ldr	r3, [pc, #156]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a26      	ldr	r2, [pc, #152]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 800594a:	f023 0301 	bic.w	r3, r3, #1
 800594e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005950:	f7fc ffda 	bl	8002908 <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005958:	f7fc ffd6 	bl	8002908 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e199      	b.n	8005c9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800596a:	4b1e      	ldr	r3, [pc, #120]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1f0      	bne.n	8005958 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0308 	and.w	r3, r3, #8
 800597e:	2b00      	cmp	r3, #0
 8005980:	d038      	beq.n	80059f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d019      	beq.n	80059be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800598a:	4b16      	ldr	r3, [pc, #88]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 800598c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800598e:	4a15      	ldr	r2, [pc, #84]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 8005990:	f043 0301 	orr.w	r3, r3, #1
 8005994:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005996:	f7fc ffb7 	bl	8002908 <HAL_GetTick>
 800599a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800599c:	e008      	b.n	80059b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800599e:	f7fc ffb3 	bl	8002908 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d901      	bls.n	80059b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e176      	b.n	8005c9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059b0:	4b0c      	ldr	r3, [pc, #48]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 80059b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d0f0      	beq.n	800599e <HAL_RCC_OscConfig+0x23a>
 80059bc:	e01a      	b.n	80059f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059be:	4b09      	ldr	r3, [pc, #36]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 80059c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c2:	4a08      	ldr	r2, [pc, #32]	; (80059e4 <HAL_RCC_OscConfig+0x280>)
 80059c4:	f023 0301 	bic.w	r3, r3, #1
 80059c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ca:	f7fc ff9d 	bl	8002908 <HAL_GetTick>
 80059ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059d0:	e00a      	b.n	80059e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059d2:	f7fc ff99 	bl	8002908 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d903      	bls.n	80059e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e15c      	b.n	8005c9e <HAL_RCC_OscConfig+0x53a>
 80059e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059e8:	4b91      	ldr	r3, [pc, #580]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 80059ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1ee      	bne.n	80059d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 80a4 	beq.w	8005b4a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a02:	4b8b      	ldr	r3, [pc, #556]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10d      	bne.n	8005a2a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a0e:	4b88      	ldr	r3, [pc, #544]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	4a87      	ldr	r2, [pc, #540]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a18:	6413      	str	r3, [r2, #64]	; 0x40
 8005a1a:	4b85      	ldr	r3, [pc, #532]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a22:	60bb      	str	r3, [r7, #8]
 8005a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a26:	2301      	movs	r3, #1
 8005a28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a2a:	4b82      	ldr	r3, [pc, #520]	; (8005c34 <HAL_RCC_OscConfig+0x4d0>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d118      	bne.n	8005a68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005a36:	4b7f      	ldr	r3, [pc, #508]	; (8005c34 <HAL_RCC_OscConfig+0x4d0>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a7e      	ldr	r2, [pc, #504]	; (8005c34 <HAL_RCC_OscConfig+0x4d0>)
 8005a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a42:	f7fc ff61 	bl	8002908 <HAL_GetTick>
 8005a46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a48:	e008      	b.n	8005a5c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a4a:	f7fc ff5d 	bl	8002908 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b64      	cmp	r3, #100	; 0x64
 8005a56:	d901      	bls.n	8005a5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e120      	b.n	8005c9e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a5c:	4b75      	ldr	r3, [pc, #468]	; (8005c34 <HAL_RCC_OscConfig+0x4d0>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d0f0      	beq.n	8005a4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d106      	bne.n	8005a7e <HAL_RCC_OscConfig+0x31a>
 8005a70:	4b6f      	ldr	r3, [pc, #444]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a74:	4a6e      	ldr	r2, [pc, #440]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005a76:	f043 0301 	orr.w	r3, r3, #1
 8005a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a7c:	e02d      	b.n	8005ada <HAL_RCC_OscConfig+0x376>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10c      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x33c>
 8005a86:	4b6a      	ldr	r3, [pc, #424]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8a:	4a69      	ldr	r2, [pc, #420]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005a8c:	f023 0301 	bic.w	r3, r3, #1
 8005a90:	6713      	str	r3, [r2, #112]	; 0x70
 8005a92:	4b67      	ldr	r3, [pc, #412]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a96:	4a66      	ldr	r2, [pc, #408]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005a98:	f023 0304 	bic.w	r3, r3, #4
 8005a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a9e:	e01c      	b.n	8005ada <HAL_RCC_OscConfig+0x376>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	2b05      	cmp	r3, #5
 8005aa6:	d10c      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x35e>
 8005aa8:	4b61      	ldr	r3, [pc, #388]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aac:	4a60      	ldr	r2, [pc, #384]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005aae:	f043 0304 	orr.w	r3, r3, #4
 8005ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ab4:	4b5e      	ldr	r3, [pc, #376]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab8:	4a5d      	ldr	r2, [pc, #372]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005aba:	f043 0301 	orr.w	r3, r3, #1
 8005abe:	6713      	str	r3, [r2, #112]	; 0x70
 8005ac0:	e00b      	b.n	8005ada <HAL_RCC_OscConfig+0x376>
 8005ac2:	4b5b      	ldr	r3, [pc, #364]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac6:	4a5a      	ldr	r2, [pc, #360]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005ac8:	f023 0301 	bic.w	r3, r3, #1
 8005acc:	6713      	str	r3, [r2, #112]	; 0x70
 8005ace:	4b58      	ldr	r3, [pc, #352]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad2:	4a57      	ldr	r2, [pc, #348]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005ad4:	f023 0304 	bic.w	r3, r3, #4
 8005ad8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d015      	beq.n	8005b0e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae2:	f7fc ff11 	bl	8002908 <HAL_GetTick>
 8005ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ae8:	e00a      	b.n	8005b00 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aea:	f7fc ff0d 	bl	8002908 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e0ce      	b.n	8005c9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b00:	4b4b      	ldr	r3, [pc, #300]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0ee      	beq.n	8005aea <HAL_RCC_OscConfig+0x386>
 8005b0c:	e014      	b.n	8005b38 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b0e:	f7fc fefb 	bl	8002908 <HAL_GetTick>
 8005b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b14:	e00a      	b.n	8005b2c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b16:	f7fc fef7 	bl	8002908 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d901      	bls.n	8005b2c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e0b8      	b.n	8005c9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b2c:	4b40      	ldr	r3, [pc, #256]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1ee      	bne.n	8005b16 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b38:	7dfb      	ldrb	r3, [r7, #23]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d105      	bne.n	8005b4a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b3e:	4b3c      	ldr	r3, [pc, #240]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	4a3b      	ldr	r2, [pc, #236]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 80a4 	beq.w	8005c9c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b54:	4b36      	ldr	r3, [pc, #216]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f003 030c 	and.w	r3, r3, #12
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d06b      	beq.n	8005c38 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d149      	bne.n	8005bfc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b68:	4b31      	ldr	r3, [pc, #196]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a30      	ldr	r2, [pc, #192]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b74:	f7fc fec8 	bl	8002908 <HAL_GetTick>
 8005b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b7a:	e008      	b.n	8005b8e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b7c:	f7fc fec4 	bl	8002908 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d901      	bls.n	8005b8e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e087      	b.n	8005c9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b8e:	4b28      	ldr	r3, [pc, #160]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1f0      	bne.n	8005b7c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	69da      	ldr	r2, [r3, #28]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	019b      	lsls	r3, r3, #6
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb0:	085b      	lsrs	r3, r3, #1
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	041b      	lsls	r3, r3, #16
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbc:	061b      	lsls	r3, r3, #24
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	4a1b      	ldr	r2, [pc, #108]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005bc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bc6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bc8:	4b19      	ldr	r3, [pc, #100]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a18      	ldr	r2, [pc, #96]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005bce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd4:	f7fc fe98 	bl	8002908 <HAL_GetTick>
 8005bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bda:	e008      	b.n	8005bee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bdc:	f7fc fe94 	bl	8002908 <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e057      	b.n	8005c9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bee:	4b10      	ldr	r3, [pc, #64]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0f0      	beq.n	8005bdc <HAL_RCC_OscConfig+0x478>
 8005bfa:	e04f      	b.n	8005c9c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bfc:	4b0c      	ldr	r3, [pc, #48]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a0b      	ldr	r2, [pc, #44]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005c02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c08:	f7fc fe7e 	bl	8002908 <HAL_GetTick>
 8005c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c0e:	e008      	b.n	8005c22 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c10:	f7fc fe7a 	bl	8002908 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d901      	bls.n	8005c22 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e03d      	b.n	8005c9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c22:	4b03      	ldr	r3, [pc, #12]	; (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1f0      	bne.n	8005c10 <HAL_RCC_OscConfig+0x4ac>
 8005c2e:	e035      	b.n	8005c9c <HAL_RCC_OscConfig+0x538>
 8005c30:	40023800 	.word	0x40023800
 8005c34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005c38:	4b1b      	ldr	r3, [pc, #108]	; (8005ca8 <HAL_RCC_OscConfig+0x544>)
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d028      	beq.n	8005c98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d121      	bne.n	8005c98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d11a      	bne.n	8005c98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c68:	4013      	ands	r3, r2
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c6e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d111      	bne.n	8005c98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7e:	085b      	lsrs	r3, r3, #1
 8005c80:	3b01      	subs	r3, #1
 8005c82:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d107      	bne.n	8005c98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c92:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d001      	beq.n	8005c9c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e000      	b.n	8005c9e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3718      	adds	r7, #24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40023800 	.word	0x40023800

08005cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e0d0      	b.n	8005e66 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cc4:	4b6a      	ldr	r3, [pc, #424]	; (8005e70 <HAL_RCC_ClockConfig+0x1c4>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 030f 	and.w	r3, r3, #15
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d910      	bls.n	8005cf4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cd2:	4b67      	ldr	r3, [pc, #412]	; (8005e70 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f023 020f 	bic.w	r2, r3, #15
 8005cda:	4965      	ldr	r1, [pc, #404]	; (8005e70 <HAL_RCC_ClockConfig+0x1c4>)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ce2:	4b63      	ldr	r3, [pc, #396]	; (8005e70 <HAL_RCC_ClockConfig+0x1c4>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 030f 	and.w	r3, r3, #15
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d001      	beq.n	8005cf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e0b8      	b.n	8005e66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d020      	beq.n	8005d42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d0c:	4b59      	ldr	r3, [pc, #356]	; (8005e74 <HAL_RCC_ClockConfig+0x1c8>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	4a58      	ldr	r2, [pc, #352]	; (8005e74 <HAL_RCC_ClockConfig+0x1c8>)
 8005d12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0308 	and.w	r3, r3, #8
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d005      	beq.n	8005d30 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d24:	4b53      	ldr	r3, [pc, #332]	; (8005e74 <HAL_RCC_ClockConfig+0x1c8>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	4a52      	ldr	r2, [pc, #328]	; (8005e74 <HAL_RCC_ClockConfig+0x1c8>)
 8005d2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d30:	4b50      	ldr	r3, [pc, #320]	; (8005e74 <HAL_RCC_ClockConfig+0x1c8>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	494d      	ldr	r1, [pc, #308]	; (8005e74 <HAL_RCC_ClockConfig+0x1c8>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d040      	beq.n	8005dd0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d107      	bne.n	8005d66 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d56:	4b47      	ldr	r3, [pc, #284]	; (8005e74 <HAL_RCC_ClockConfig+0x1c8>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d115      	bne.n	8005d8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e07f      	b.n	8005e66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d107      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d6e:	4b41      	ldr	r3, [pc, #260]	; (8005e74 <HAL_RCC_ClockConfig+0x1c8>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d109      	bne.n	8005d8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e073      	b.n	8005e66 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d7e:	4b3d      	ldr	r3, [pc, #244]	; (8005e74 <HAL_RCC_ClockConfig+0x1c8>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e06b      	b.n	8005e66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d8e:	4b39      	ldr	r3, [pc, #228]	; (8005e74 <HAL_RCC_ClockConfig+0x1c8>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f023 0203 	bic.w	r2, r3, #3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	4936      	ldr	r1, [pc, #216]	; (8005e74 <HAL_RCC_ClockConfig+0x1c8>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005da0:	f7fc fdb2 	bl	8002908 <HAL_GetTick>
 8005da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005da6:	e00a      	b.n	8005dbe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005da8:	f7fc fdae 	bl	8002908 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d901      	bls.n	8005dbe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e053      	b.n	8005e66 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dbe:	4b2d      	ldr	r3, [pc, #180]	; (8005e74 <HAL_RCC_ClockConfig+0x1c8>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 020c 	and.w	r2, r3, #12
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d1eb      	bne.n	8005da8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005dd0:	4b27      	ldr	r3, [pc, #156]	; (8005e70 <HAL_RCC_ClockConfig+0x1c4>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 030f 	and.w	r3, r3, #15
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d210      	bcs.n	8005e00 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dde:	4b24      	ldr	r3, [pc, #144]	; (8005e70 <HAL_RCC_ClockConfig+0x1c4>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f023 020f 	bic.w	r2, r3, #15
 8005de6:	4922      	ldr	r1, [pc, #136]	; (8005e70 <HAL_RCC_ClockConfig+0x1c4>)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dee:	4b20      	ldr	r3, [pc, #128]	; (8005e70 <HAL_RCC_ClockConfig+0x1c4>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d001      	beq.n	8005e00 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e032      	b.n	8005e66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d008      	beq.n	8005e1e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e0c:	4b19      	ldr	r3, [pc, #100]	; (8005e74 <HAL_RCC_ClockConfig+0x1c8>)
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	4916      	ldr	r1, [pc, #88]	; (8005e74 <HAL_RCC_ClockConfig+0x1c8>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0308 	and.w	r3, r3, #8
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d009      	beq.n	8005e3e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e2a:	4b12      	ldr	r3, [pc, #72]	; (8005e74 <HAL_RCC_ClockConfig+0x1c8>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	00db      	lsls	r3, r3, #3
 8005e38:	490e      	ldr	r1, [pc, #56]	; (8005e74 <HAL_RCC_ClockConfig+0x1c8>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e3e:	f000 f821 	bl	8005e84 <HAL_RCC_GetSysClockFreq>
 8005e42:	4602      	mov	r2, r0
 8005e44:	4b0b      	ldr	r3, [pc, #44]	; (8005e74 <HAL_RCC_ClockConfig+0x1c8>)
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	091b      	lsrs	r3, r3, #4
 8005e4a:	f003 030f 	and.w	r3, r3, #15
 8005e4e:	490a      	ldr	r1, [pc, #40]	; (8005e78 <HAL_RCC_ClockConfig+0x1cc>)
 8005e50:	5ccb      	ldrb	r3, [r1, r3]
 8005e52:	fa22 f303 	lsr.w	r3, r2, r3
 8005e56:	4a09      	ldr	r2, [pc, #36]	; (8005e7c <HAL_RCC_ClockConfig+0x1d0>)
 8005e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e5a:	4b09      	ldr	r3, [pc, #36]	; (8005e80 <HAL_RCC_ClockConfig+0x1d4>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fc fd0e 	bl	8002880 <HAL_InitTick>

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	40023c00 	.word	0x40023c00
 8005e74:	40023800 	.word	0x40023800
 8005e78:	0801a6a0 	.word	0x0801a6a0
 8005e7c:	20000018 	.word	0x20000018
 8005e80:	2000001c 	.word	0x2000001c

08005e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e88:	b094      	sub	sp, #80	; 0x50
 8005e8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e90:	2300      	movs	r3, #0
 8005e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e94:	2300      	movs	r3, #0
 8005e96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e9c:	4b79      	ldr	r3, [pc, #484]	; (8006084 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 030c 	and.w	r3, r3, #12
 8005ea4:	2b08      	cmp	r3, #8
 8005ea6:	d00d      	beq.n	8005ec4 <HAL_RCC_GetSysClockFreq+0x40>
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	f200 80e1 	bhi.w	8006070 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	d003      	beq.n	8005ebe <HAL_RCC_GetSysClockFreq+0x3a>
 8005eb6:	e0db      	b.n	8006070 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005eb8:	4b73      	ldr	r3, [pc, #460]	; (8006088 <HAL_RCC_GetSysClockFreq+0x204>)
 8005eba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ebc:	e0db      	b.n	8006076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ebe:	4b73      	ldr	r3, [pc, #460]	; (800608c <HAL_RCC_GetSysClockFreq+0x208>)
 8005ec0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ec2:	e0d8      	b.n	8006076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ec4:	4b6f      	ldr	r3, [pc, #444]	; (8006084 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ecc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005ece:	4b6d      	ldr	r3, [pc, #436]	; (8006084 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d063      	beq.n	8005fa2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eda:	4b6a      	ldr	r3, [pc, #424]	; (8006084 <HAL_RCC_GetSysClockFreq+0x200>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	099b      	lsrs	r3, r3, #6
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ee4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eec:	633b      	str	r3, [r7, #48]	; 0x30
 8005eee:	2300      	movs	r3, #0
 8005ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ef2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005ef6:	4622      	mov	r2, r4
 8005ef8:	462b      	mov	r3, r5
 8005efa:	f04f 0000 	mov.w	r0, #0
 8005efe:	f04f 0100 	mov.w	r1, #0
 8005f02:	0159      	lsls	r1, r3, #5
 8005f04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f08:	0150      	lsls	r0, r2, #5
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	4621      	mov	r1, r4
 8005f10:	1a51      	subs	r1, r2, r1
 8005f12:	6139      	str	r1, [r7, #16]
 8005f14:	4629      	mov	r1, r5
 8005f16:	eb63 0301 	sbc.w	r3, r3, r1
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	f04f 0300 	mov.w	r3, #0
 8005f24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f28:	4659      	mov	r1, fp
 8005f2a:	018b      	lsls	r3, r1, #6
 8005f2c:	4651      	mov	r1, sl
 8005f2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f32:	4651      	mov	r1, sl
 8005f34:	018a      	lsls	r2, r1, #6
 8005f36:	4651      	mov	r1, sl
 8005f38:	ebb2 0801 	subs.w	r8, r2, r1
 8005f3c:	4659      	mov	r1, fp
 8005f3e:	eb63 0901 	sbc.w	r9, r3, r1
 8005f42:	f04f 0200 	mov.w	r2, #0
 8005f46:	f04f 0300 	mov.w	r3, #0
 8005f4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f56:	4690      	mov	r8, r2
 8005f58:	4699      	mov	r9, r3
 8005f5a:	4623      	mov	r3, r4
 8005f5c:	eb18 0303 	adds.w	r3, r8, r3
 8005f60:	60bb      	str	r3, [r7, #8]
 8005f62:	462b      	mov	r3, r5
 8005f64:	eb49 0303 	adc.w	r3, r9, r3
 8005f68:	60fb      	str	r3, [r7, #12]
 8005f6a:	f04f 0200 	mov.w	r2, #0
 8005f6e:	f04f 0300 	mov.w	r3, #0
 8005f72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f76:	4629      	mov	r1, r5
 8005f78:	024b      	lsls	r3, r1, #9
 8005f7a:	4621      	mov	r1, r4
 8005f7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f80:	4621      	mov	r1, r4
 8005f82:	024a      	lsls	r2, r1, #9
 8005f84:	4610      	mov	r0, r2
 8005f86:	4619      	mov	r1, r3
 8005f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f94:	f7fa f98c 	bl	80002b0 <__aeabi_uldivmod>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fa0:	e058      	b.n	8006054 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fa2:	4b38      	ldr	r3, [pc, #224]	; (8006084 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	099b      	lsrs	r3, r3, #6
 8005fa8:	2200      	movs	r2, #0
 8005faa:	4618      	mov	r0, r3
 8005fac:	4611      	mov	r1, r2
 8005fae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005fb2:	623b      	str	r3, [r7, #32]
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005fbc:	4642      	mov	r2, r8
 8005fbe:	464b      	mov	r3, r9
 8005fc0:	f04f 0000 	mov.w	r0, #0
 8005fc4:	f04f 0100 	mov.w	r1, #0
 8005fc8:	0159      	lsls	r1, r3, #5
 8005fca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fce:	0150      	lsls	r0, r2, #5
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4641      	mov	r1, r8
 8005fd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005fda:	4649      	mov	r1, r9
 8005fdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005fe0:	f04f 0200 	mov.w	r2, #0
 8005fe4:	f04f 0300 	mov.w	r3, #0
 8005fe8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005fec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ff0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ff4:	ebb2 040a 	subs.w	r4, r2, sl
 8005ff8:	eb63 050b 	sbc.w	r5, r3, fp
 8005ffc:	f04f 0200 	mov.w	r2, #0
 8006000:	f04f 0300 	mov.w	r3, #0
 8006004:	00eb      	lsls	r3, r5, #3
 8006006:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800600a:	00e2      	lsls	r2, r4, #3
 800600c:	4614      	mov	r4, r2
 800600e:	461d      	mov	r5, r3
 8006010:	4643      	mov	r3, r8
 8006012:	18e3      	adds	r3, r4, r3
 8006014:	603b      	str	r3, [r7, #0]
 8006016:	464b      	mov	r3, r9
 8006018:	eb45 0303 	adc.w	r3, r5, r3
 800601c:	607b      	str	r3, [r7, #4]
 800601e:	f04f 0200 	mov.w	r2, #0
 8006022:	f04f 0300 	mov.w	r3, #0
 8006026:	e9d7 4500 	ldrd	r4, r5, [r7]
 800602a:	4629      	mov	r1, r5
 800602c:	028b      	lsls	r3, r1, #10
 800602e:	4621      	mov	r1, r4
 8006030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006034:	4621      	mov	r1, r4
 8006036:	028a      	lsls	r2, r1, #10
 8006038:	4610      	mov	r0, r2
 800603a:	4619      	mov	r1, r3
 800603c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800603e:	2200      	movs	r2, #0
 8006040:	61bb      	str	r3, [r7, #24]
 8006042:	61fa      	str	r2, [r7, #28]
 8006044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006048:	f7fa f932 	bl	80002b0 <__aeabi_uldivmod>
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	4613      	mov	r3, r2
 8006052:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006054:	4b0b      	ldr	r3, [pc, #44]	; (8006084 <HAL_RCC_GetSysClockFreq+0x200>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	0c1b      	lsrs	r3, r3, #16
 800605a:	f003 0303 	and.w	r3, r3, #3
 800605e:	3301      	adds	r3, #1
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006064:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006068:	fbb2 f3f3 	udiv	r3, r2, r3
 800606c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800606e:	e002      	b.n	8006076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006070:	4b05      	ldr	r3, [pc, #20]	; (8006088 <HAL_RCC_GetSysClockFreq+0x204>)
 8006072:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006078:	4618      	mov	r0, r3
 800607a:	3750      	adds	r7, #80	; 0x50
 800607c:	46bd      	mov	sp, r7
 800607e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006082:	bf00      	nop
 8006084:	40023800 	.word	0x40023800
 8006088:	00f42400 	.word	0x00f42400
 800608c:	007a1200 	.word	0x007a1200

08006090 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006090:	b480      	push	{r7}
 8006092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006094:	4b03      	ldr	r3, [pc, #12]	; (80060a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006096:	681b      	ldr	r3, [r3, #0]
}
 8006098:	4618      	mov	r0, r3
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	20000018 	.word	0x20000018

080060a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80060ac:	f7ff fff0 	bl	8006090 <HAL_RCC_GetHCLKFreq>
 80060b0:	4602      	mov	r2, r0
 80060b2:	4b05      	ldr	r3, [pc, #20]	; (80060c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	0a9b      	lsrs	r3, r3, #10
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	4903      	ldr	r1, [pc, #12]	; (80060cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80060be:	5ccb      	ldrb	r3, [r1, r3]
 80060c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40023800 	.word	0x40023800
 80060cc:	0801a6b0 	.word	0x0801a6b0

080060d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80060d4:	f7ff ffdc 	bl	8006090 <HAL_RCC_GetHCLKFreq>
 80060d8:	4602      	mov	r2, r0
 80060da:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	0b5b      	lsrs	r3, r3, #13
 80060e0:	f003 0307 	and.w	r3, r3, #7
 80060e4:	4903      	ldr	r1, [pc, #12]	; (80060f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060e6:	5ccb      	ldrb	r3, [r1, r3]
 80060e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	40023800 	.word	0x40023800
 80060f4:	0801a6b0 	.word	0x0801a6b0

080060f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b088      	sub	sp, #32
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006100:	2300      	movs	r3, #0
 8006102:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006104:	2300      	movs	r3, #0
 8006106:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006108:	2300      	movs	r3, #0
 800610a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800610c:	2300      	movs	r3, #0
 800610e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006110:	2300      	movs	r3, #0
 8006112:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b00      	cmp	r3, #0
 800611e:	d012      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006120:	4b69      	ldr	r3, [pc, #420]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	4a68      	ldr	r2, [pc, #416]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006126:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800612a:	6093      	str	r3, [r2, #8]
 800612c:	4b66      	ldr	r3, [pc, #408]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800612e:	689a      	ldr	r2, [r3, #8]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006134:	4964      	ldr	r1, [pc, #400]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006136:	4313      	orrs	r3, r2
 8006138:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006142:	2301      	movs	r3, #1
 8006144:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d017      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006152:	4b5d      	ldr	r3, [pc, #372]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006158:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006160:	4959      	ldr	r1, [pc, #356]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006162:	4313      	orrs	r3, r2
 8006164:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006170:	d101      	bne.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006172:	2301      	movs	r3, #1
 8006174:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800617e:	2301      	movs	r3, #1
 8006180:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d017      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800618e:	4b4e      	ldr	r3, [pc, #312]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006194:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619c:	494a      	ldr	r1, [pc, #296]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061ac:	d101      	bne.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80061ae:	2301      	movs	r3, #1
 80061b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80061ba:	2301      	movs	r3, #1
 80061bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80061ca:	2301      	movs	r3, #1
 80061cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f000 808b 	beq.w	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80061dc:	4b3a      	ldr	r3, [pc, #232]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e0:	4a39      	ldr	r2, [pc, #228]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061e6:	6413      	str	r3, [r2, #64]	; 0x40
 80061e8:	4b37      	ldr	r3, [pc, #220]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061f0:	60bb      	str	r3, [r7, #8]
 80061f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80061f4:	4b35      	ldr	r3, [pc, #212]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a34      	ldr	r2, [pc, #208]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006200:	f7fc fb82 	bl	8002908 <HAL_GetTick>
 8006204:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006206:	e008      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006208:	f7fc fb7e 	bl	8002908 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	2b64      	cmp	r3, #100	; 0x64
 8006214:	d901      	bls.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e357      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800621a:	4b2c      	ldr	r3, [pc, #176]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0f0      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006226:	4b28      	ldr	r3, [pc, #160]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800622e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d035      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	429a      	cmp	r2, r3
 8006242:	d02e      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006244:	4b20      	ldr	r3, [pc, #128]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800624c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800624e:	4b1e      	ldr	r3, [pc, #120]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006252:	4a1d      	ldr	r2, [pc, #116]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006258:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800625a:	4b1b      	ldr	r3, [pc, #108]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800625c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625e:	4a1a      	ldr	r2, [pc, #104]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006264:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006266:	4a18      	ldr	r2, [pc, #96]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800626c:	4b16      	ldr	r3, [pc, #88]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800626e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b01      	cmp	r3, #1
 8006276:	d114      	bne.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006278:	f7fc fb46 	bl	8002908 <HAL_GetTick>
 800627c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800627e:	e00a      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006280:	f7fc fb42 	bl	8002908 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	f241 3288 	movw	r2, #5000	; 0x1388
 800628e:	4293      	cmp	r3, r2
 8006290:	d901      	bls.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e319      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006296:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0ee      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062ae:	d111      	bne.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80062b0:	4b05      	ldr	r3, [pc, #20]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80062bc:	4b04      	ldr	r3, [pc, #16]	; (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80062be:	400b      	ands	r3, r1
 80062c0:	4901      	ldr	r1, [pc, #4]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	608b      	str	r3, [r1, #8]
 80062c6:	e00b      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80062c8:	40023800 	.word	0x40023800
 80062cc:	40007000 	.word	0x40007000
 80062d0:	0ffffcff 	.word	0x0ffffcff
 80062d4:	4baa      	ldr	r3, [pc, #680]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	4aa9      	ldr	r2, [pc, #676]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80062de:	6093      	str	r3, [r2, #8]
 80062e0:	4ba7      	ldr	r3, [pc, #668]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ec:	49a4      	ldr	r1, [pc, #656]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0310 	and.w	r3, r3, #16
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d010      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80062fe:	4ba0      	ldr	r3, [pc, #640]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006304:	4a9e      	ldr	r2, [pc, #632]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800630a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800630e:	4b9c      	ldr	r3, [pc, #624]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006310:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006318:	4999      	ldr	r1, [pc, #612]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800631a:	4313      	orrs	r3, r2
 800631c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00a      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800632c:	4b94      	ldr	r3, [pc, #592]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800632e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006332:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800633a:	4991      	ldr	r1, [pc, #580]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800633c:	4313      	orrs	r3, r2
 800633e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800634e:	4b8c      	ldr	r3, [pc, #560]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006354:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800635c:	4988      	ldr	r1, [pc, #544]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800635e:	4313      	orrs	r3, r2
 8006360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00a      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006370:	4b83      	ldr	r3, [pc, #524]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006376:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800637e:	4980      	ldr	r1, [pc, #512]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006380:	4313      	orrs	r3, r2
 8006382:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00a      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006392:	4b7b      	ldr	r3, [pc, #492]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006398:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a0:	4977      	ldr	r1, [pc, #476]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00a      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063b4:	4b72      	ldr	r3, [pc, #456]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ba:	f023 0203 	bic.w	r2, r3, #3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c2:	496f      	ldr	r1, [pc, #444]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00a      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063d6:	4b6a      	ldr	r3, [pc, #424]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063dc:	f023 020c 	bic.w	r2, r3, #12
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063e4:	4966      	ldr	r1, [pc, #408]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00a      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063f8:	4b61      	ldr	r3, [pc, #388]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006406:	495e      	ldr	r1, [pc, #376]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006408:	4313      	orrs	r3, r2
 800640a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800641a:	4b59      	ldr	r3, [pc, #356]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800641c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006420:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006428:	4955      	ldr	r1, [pc, #340]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800642a:	4313      	orrs	r3, r2
 800642c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00a      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800643c:	4b50      	ldr	r3, [pc, #320]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800643e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006442:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644a:	494d      	ldr	r1, [pc, #308]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800644c:	4313      	orrs	r3, r2
 800644e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00a      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800645e:	4b48      	ldr	r3, [pc, #288]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006464:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800646c:	4944      	ldr	r1, [pc, #272]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800646e:	4313      	orrs	r3, r2
 8006470:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00a      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006480:	4b3f      	ldr	r3, [pc, #252]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006486:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800648e:	493c      	ldr	r1, [pc, #240]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006490:	4313      	orrs	r3, r2
 8006492:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00a      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80064a2:	4b37      	ldr	r3, [pc, #220]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064b0:	4933      	ldr	r1, [pc, #204]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00a      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80064c4:	4b2e      	ldr	r3, [pc, #184]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064d2:	492b      	ldr	r1, [pc, #172]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d011      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80064e6:	4b26      	ldr	r3, [pc, #152]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064f4:	4922      	ldr	r1, [pc, #136]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006500:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006504:	d101      	bne.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006506:	2301      	movs	r3, #1
 8006508:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0308 	and.w	r3, r3, #8
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006516:	2301      	movs	r3, #1
 8006518:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006526:	4b16      	ldr	r3, [pc, #88]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800652c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006534:	4912      	ldr	r1, [pc, #72]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006536:	4313      	orrs	r3, r2
 8006538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00b      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006548:	4b0d      	ldr	r3, [pc, #52]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800654a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800654e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006558:	4909      	ldr	r1, [pc, #36]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800655a:	4313      	orrs	r3, r2
 800655c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d006      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 80d9 	beq.w	8006726 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006574:	4b02      	ldr	r3, [pc, #8]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a01      	ldr	r2, [pc, #4]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800657a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800657e:	e001      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006580:	40023800 	.word	0x40023800
 8006584:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006586:	f7fc f9bf 	bl	8002908 <HAL_GetTick>
 800658a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800658c:	e008      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800658e:	f7fc f9bb 	bl	8002908 <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	2b64      	cmp	r3, #100	; 0x64
 800659a:	d901      	bls.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e194      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065a0:	4b6c      	ldr	r3, [pc, #432]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1f0      	bne.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d021      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x504>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d11d      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80065c0:	4b64      	ldr	r3, [pc, #400]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065c6:	0c1b      	lsrs	r3, r3, #16
 80065c8:	f003 0303 	and.w	r3, r3, #3
 80065cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80065ce:	4b61      	ldr	r3, [pc, #388]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065d4:	0e1b      	lsrs	r3, r3, #24
 80065d6:	f003 030f 	and.w	r3, r3, #15
 80065da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	019a      	lsls	r2, r3, #6
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	041b      	lsls	r3, r3, #16
 80065e6:	431a      	orrs	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	061b      	lsls	r3, r3, #24
 80065ec:	431a      	orrs	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	071b      	lsls	r3, r3, #28
 80065f4:	4957      	ldr	r1, [pc, #348]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d004      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800660c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006610:	d00a      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800661a:	2b00      	cmp	r3, #0
 800661c:	d02e      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006626:	d129      	bne.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006628:	4b4a      	ldr	r3, [pc, #296]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800662a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800662e:	0c1b      	lsrs	r3, r3, #16
 8006630:	f003 0303 	and.w	r3, r3, #3
 8006634:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006636:	4b47      	ldr	r3, [pc, #284]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800663c:	0f1b      	lsrs	r3, r3, #28
 800663e:	f003 0307 	and.w	r3, r3, #7
 8006642:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	019a      	lsls	r2, r3, #6
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	041b      	lsls	r3, r3, #16
 800664e:	431a      	orrs	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	061b      	lsls	r3, r3, #24
 8006656:	431a      	orrs	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	071b      	lsls	r3, r3, #28
 800665c:	493d      	ldr	r1, [pc, #244]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800665e:	4313      	orrs	r3, r2
 8006660:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006664:	4b3b      	ldr	r3, [pc, #236]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800666a:	f023 021f 	bic.w	r2, r3, #31
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	3b01      	subs	r3, #1
 8006674:	4937      	ldr	r1, [pc, #220]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006676:	4313      	orrs	r3, r2
 8006678:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d01d      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006688:	4b32      	ldr	r3, [pc, #200]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800668a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800668e:	0e1b      	lsrs	r3, r3, #24
 8006690:	f003 030f 	and.w	r3, r3, #15
 8006694:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006696:	4b2f      	ldr	r3, [pc, #188]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800669c:	0f1b      	lsrs	r3, r3, #28
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	019a      	lsls	r2, r3, #6
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	041b      	lsls	r3, r3, #16
 80066b0:	431a      	orrs	r2, r3
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	061b      	lsls	r3, r3, #24
 80066b6:	431a      	orrs	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	071b      	lsls	r3, r3, #28
 80066bc:	4925      	ldr	r1, [pc, #148]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d011      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	019a      	lsls	r2, r3, #6
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	041b      	lsls	r3, r3, #16
 80066dc:	431a      	orrs	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	061b      	lsls	r3, r3, #24
 80066e4:	431a      	orrs	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	071b      	lsls	r3, r3, #28
 80066ec:	4919      	ldr	r1, [pc, #100]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80066f4:	4b17      	ldr	r3, [pc, #92]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a16      	ldr	r2, [pc, #88]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006700:	f7fc f902 	bl	8002908 <HAL_GetTick>
 8006704:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006706:	e008      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006708:	f7fc f8fe 	bl	8002908 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	2b64      	cmp	r3, #100	; 0x64
 8006714:	d901      	bls.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e0d7      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800671a:	4b0e      	ldr	r3, [pc, #56]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0f0      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	2b01      	cmp	r3, #1
 800672a:	f040 80cd 	bne.w	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800672e:	4b09      	ldr	r3, [pc, #36]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a08      	ldr	r2, [pc, #32]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800673a:	f7fc f8e5 	bl	8002908 <HAL_GetTick>
 800673e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006740:	e00a      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006742:	f7fc f8e1 	bl	8002908 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	2b64      	cmp	r3, #100	; 0x64
 800674e:	d903      	bls.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e0ba      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006754:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006758:	4b5e      	ldr	r3, [pc, #376]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006764:	d0ed      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006776:	2b00      	cmp	r3, #0
 8006778:	d009      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006782:	2b00      	cmp	r3, #0
 8006784:	d02e      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	2b00      	cmp	r3, #0
 800678c:	d12a      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800678e:	4b51      	ldr	r3, [pc, #324]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006794:	0c1b      	lsrs	r3, r3, #16
 8006796:	f003 0303 	and.w	r3, r3, #3
 800679a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800679c:	4b4d      	ldr	r3, [pc, #308]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800679e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a2:	0f1b      	lsrs	r3, r3, #28
 80067a4:	f003 0307 	and.w	r3, r3, #7
 80067a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	019a      	lsls	r2, r3, #6
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	041b      	lsls	r3, r3, #16
 80067b4:	431a      	orrs	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	061b      	lsls	r3, r3, #24
 80067bc:	431a      	orrs	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	071b      	lsls	r3, r3, #28
 80067c2:	4944      	ldr	r1, [pc, #272]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80067ca:	4b42      	ldr	r3, [pc, #264]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d8:	3b01      	subs	r3, #1
 80067da:	021b      	lsls	r3, r3, #8
 80067dc:	493d      	ldr	r1, [pc, #244]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d022      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067f8:	d11d      	bne.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067fa:	4b36      	ldr	r3, [pc, #216]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006800:	0e1b      	lsrs	r3, r3, #24
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006808:	4b32      	ldr	r3, [pc, #200]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800680a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680e:	0f1b      	lsrs	r3, r3, #28
 8006810:	f003 0307 	and.w	r3, r3, #7
 8006814:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	019a      	lsls	r2, r3, #6
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a1b      	ldr	r3, [r3, #32]
 8006820:	041b      	lsls	r3, r3, #16
 8006822:	431a      	orrs	r2, r3
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	061b      	lsls	r3, r3, #24
 8006828:	431a      	orrs	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	071b      	lsls	r3, r3, #28
 800682e:	4929      	ldr	r1, [pc, #164]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006830:	4313      	orrs	r3, r2
 8006832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0308 	and.w	r3, r3, #8
 800683e:	2b00      	cmp	r3, #0
 8006840:	d028      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006842:	4b24      	ldr	r3, [pc, #144]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006848:	0e1b      	lsrs	r3, r3, #24
 800684a:	f003 030f 	and.w	r3, r3, #15
 800684e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006850:	4b20      	ldr	r3, [pc, #128]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006856:	0c1b      	lsrs	r3, r3, #16
 8006858:	f003 0303 	and.w	r3, r3, #3
 800685c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	019a      	lsls	r2, r3, #6
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	041b      	lsls	r3, r3, #16
 8006868:	431a      	orrs	r2, r3
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	061b      	lsls	r3, r3, #24
 800686e:	431a      	orrs	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	071b      	lsls	r3, r3, #28
 8006876:	4917      	ldr	r1, [pc, #92]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006878:	4313      	orrs	r3, r2
 800687a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800687e:	4b15      	ldr	r3, [pc, #84]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006884:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688c:	4911      	ldr	r1, [pc, #68]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800688e:	4313      	orrs	r3, r2
 8006890:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006894:	4b0f      	ldr	r3, [pc, #60]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a0e      	ldr	r2, [pc, #56]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800689a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800689e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068a0:	f7fc f832 	bl	8002908 <HAL_GetTick>
 80068a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068a6:	e008      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80068a8:	f7fc f82e 	bl	8002908 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b64      	cmp	r3, #100	; 0x64
 80068b4:	d901      	bls.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e007      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068ba:	4b06      	ldr	r3, [pc, #24]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068c6:	d1ef      	bne.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3720      	adds	r7, #32
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	40023800 	.word	0x40023800

080068d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e040      	b.n	800696c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d106      	bne.n	8006900 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7fb fc52 	bl	80021a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2224      	movs	r2, #36	; 0x24
 8006904:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 0201 	bic.w	r2, r2, #1
 8006914:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f82c 	bl	8006974 <UART_SetConfig>
 800691c:	4603      	mov	r3, r0
 800691e:	2b01      	cmp	r3, #1
 8006920:	d101      	bne.n	8006926 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e022      	b.n	800696c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692a:	2b00      	cmp	r3, #0
 800692c:	d002      	beq.n	8006934 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fa84 	bl	8006e3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006942:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689a      	ldr	r2, [r3, #8]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006952:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f042 0201 	orr.w	r2, r2, #1
 8006962:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fb0b 	bl	8006f80 <UART_CheckIdleState>
 800696a:	4603      	mov	r3, r0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800697c:	2300      	movs	r3, #0
 800697e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	431a      	orrs	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	69db      	ldr	r3, [r3, #28]
 8006994:	4313      	orrs	r3, r2
 8006996:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	4ba6      	ldr	r3, [pc, #664]	; (8006c38 <UART_SetConfig+0x2c4>)
 80069a0:	4013      	ands	r3, r2
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	6812      	ldr	r2, [r2, #0]
 80069a6:	6979      	ldr	r1, [r7, #20]
 80069a8:	430b      	orrs	r3, r1
 80069aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68da      	ldr	r2, [r3, #12]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	430a      	orrs	r2, r1
 80069c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a94      	ldr	r2, [pc, #592]	; (8006c3c <UART_SetConfig+0x2c8>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d120      	bne.n	8006a32 <UART_SetConfig+0xbe>
 80069f0:	4b93      	ldr	r3, [pc, #588]	; (8006c40 <UART_SetConfig+0x2cc>)
 80069f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	d816      	bhi.n	8006a2c <UART_SetConfig+0xb8>
 80069fe:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <UART_SetConfig+0x90>)
 8006a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a04:	08006a15 	.word	0x08006a15
 8006a08:	08006a21 	.word	0x08006a21
 8006a0c:	08006a1b 	.word	0x08006a1b
 8006a10:	08006a27 	.word	0x08006a27
 8006a14:	2301      	movs	r3, #1
 8006a16:	77fb      	strb	r3, [r7, #31]
 8006a18:	e150      	b.n	8006cbc <UART_SetConfig+0x348>
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	77fb      	strb	r3, [r7, #31]
 8006a1e:	e14d      	b.n	8006cbc <UART_SetConfig+0x348>
 8006a20:	2304      	movs	r3, #4
 8006a22:	77fb      	strb	r3, [r7, #31]
 8006a24:	e14a      	b.n	8006cbc <UART_SetConfig+0x348>
 8006a26:	2308      	movs	r3, #8
 8006a28:	77fb      	strb	r3, [r7, #31]
 8006a2a:	e147      	b.n	8006cbc <UART_SetConfig+0x348>
 8006a2c:	2310      	movs	r3, #16
 8006a2e:	77fb      	strb	r3, [r7, #31]
 8006a30:	e144      	b.n	8006cbc <UART_SetConfig+0x348>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a83      	ldr	r2, [pc, #524]	; (8006c44 <UART_SetConfig+0x2d0>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d132      	bne.n	8006aa2 <UART_SetConfig+0x12e>
 8006a3c:	4b80      	ldr	r3, [pc, #512]	; (8006c40 <UART_SetConfig+0x2cc>)
 8006a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a42:	f003 030c 	and.w	r3, r3, #12
 8006a46:	2b0c      	cmp	r3, #12
 8006a48:	d828      	bhi.n	8006a9c <UART_SetConfig+0x128>
 8006a4a:	a201      	add	r2, pc, #4	; (adr r2, 8006a50 <UART_SetConfig+0xdc>)
 8006a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a50:	08006a85 	.word	0x08006a85
 8006a54:	08006a9d 	.word	0x08006a9d
 8006a58:	08006a9d 	.word	0x08006a9d
 8006a5c:	08006a9d 	.word	0x08006a9d
 8006a60:	08006a91 	.word	0x08006a91
 8006a64:	08006a9d 	.word	0x08006a9d
 8006a68:	08006a9d 	.word	0x08006a9d
 8006a6c:	08006a9d 	.word	0x08006a9d
 8006a70:	08006a8b 	.word	0x08006a8b
 8006a74:	08006a9d 	.word	0x08006a9d
 8006a78:	08006a9d 	.word	0x08006a9d
 8006a7c:	08006a9d 	.word	0x08006a9d
 8006a80:	08006a97 	.word	0x08006a97
 8006a84:	2300      	movs	r3, #0
 8006a86:	77fb      	strb	r3, [r7, #31]
 8006a88:	e118      	b.n	8006cbc <UART_SetConfig+0x348>
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	77fb      	strb	r3, [r7, #31]
 8006a8e:	e115      	b.n	8006cbc <UART_SetConfig+0x348>
 8006a90:	2304      	movs	r3, #4
 8006a92:	77fb      	strb	r3, [r7, #31]
 8006a94:	e112      	b.n	8006cbc <UART_SetConfig+0x348>
 8006a96:	2308      	movs	r3, #8
 8006a98:	77fb      	strb	r3, [r7, #31]
 8006a9a:	e10f      	b.n	8006cbc <UART_SetConfig+0x348>
 8006a9c:	2310      	movs	r3, #16
 8006a9e:	77fb      	strb	r3, [r7, #31]
 8006aa0:	e10c      	b.n	8006cbc <UART_SetConfig+0x348>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a68      	ldr	r2, [pc, #416]	; (8006c48 <UART_SetConfig+0x2d4>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d120      	bne.n	8006aee <UART_SetConfig+0x17a>
 8006aac:	4b64      	ldr	r3, [pc, #400]	; (8006c40 <UART_SetConfig+0x2cc>)
 8006aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ab6:	2b30      	cmp	r3, #48	; 0x30
 8006ab8:	d013      	beq.n	8006ae2 <UART_SetConfig+0x16e>
 8006aba:	2b30      	cmp	r3, #48	; 0x30
 8006abc:	d814      	bhi.n	8006ae8 <UART_SetConfig+0x174>
 8006abe:	2b20      	cmp	r3, #32
 8006ac0:	d009      	beq.n	8006ad6 <UART_SetConfig+0x162>
 8006ac2:	2b20      	cmp	r3, #32
 8006ac4:	d810      	bhi.n	8006ae8 <UART_SetConfig+0x174>
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d002      	beq.n	8006ad0 <UART_SetConfig+0x15c>
 8006aca:	2b10      	cmp	r3, #16
 8006acc:	d006      	beq.n	8006adc <UART_SetConfig+0x168>
 8006ace:	e00b      	b.n	8006ae8 <UART_SetConfig+0x174>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	77fb      	strb	r3, [r7, #31]
 8006ad4:	e0f2      	b.n	8006cbc <UART_SetConfig+0x348>
 8006ad6:	2302      	movs	r3, #2
 8006ad8:	77fb      	strb	r3, [r7, #31]
 8006ada:	e0ef      	b.n	8006cbc <UART_SetConfig+0x348>
 8006adc:	2304      	movs	r3, #4
 8006ade:	77fb      	strb	r3, [r7, #31]
 8006ae0:	e0ec      	b.n	8006cbc <UART_SetConfig+0x348>
 8006ae2:	2308      	movs	r3, #8
 8006ae4:	77fb      	strb	r3, [r7, #31]
 8006ae6:	e0e9      	b.n	8006cbc <UART_SetConfig+0x348>
 8006ae8:	2310      	movs	r3, #16
 8006aea:	77fb      	strb	r3, [r7, #31]
 8006aec:	e0e6      	b.n	8006cbc <UART_SetConfig+0x348>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a56      	ldr	r2, [pc, #344]	; (8006c4c <UART_SetConfig+0x2d8>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d120      	bne.n	8006b3a <UART_SetConfig+0x1c6>
 8006af8:	4b51      	ldr	r3, [pc, #324]	; (8006c40 <UART_SetConfig+0x2cc>)
 8006afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006afe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b02:	2bc0      	cmp	r3, #192	; 0xc0
 8006b04:	d013      	beq.n	8006b2e <UART_SetConfig+0x1ba>
 8006b06:	2bc0      	cmp	r3, #192	; 0xc0
 8006b08:	d814      	bhi.n	8006b34 <UART_SetConfig+0x1c0>
 8006b0a:	2b80      	cmp	r3, #128	; 0x80
 8006b0c:	d009      	beq.n	8006b22 <UART_SetConfig+0x1ae>
 8006b0e:	2b80      	cmp	r3, #128	; 0x80
 8006b10:	d810      	bhi.n	8006b34 <UART_SetConfig+0x1c0>
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d002      	beq.n	8006b1c <UART_SetConfig+0x1a8>
 8006b16:	2b40      	cmp	r3, #64	; 0x40
 8006b18:	d006      	beq.n	8006b28 <UART_SetConfig+0x1b4>
 8006b1a:	e00b      	b.n	8006b34 <UART_SetConfig+0x1c0>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	77fb      	strb	r3, [r7, #31]
 8006b20:	e0cc      	b.n	8006cbc <UART_SetConfig+0x348>
 8006b22:	2302      	movs	r3, #2
 8006b24:	77fb      	strb	r3, [r7, #31]
 8006b26:	e0c9      	b.n	8006cbc <UART_SetConfig+0x348>
 8006b28:	2304      	movs	r3, #4
 8006b2a:	77fb      	strb	r3, [r7, #31]
 8006b2c:	e0c6      	b.n	8006cbc <UART_SetConfig+0x348>
 8006b2e:	2308      	movs	r3, #8
 8006b30:	77fb      	strb	r3, [r7, #31]
 8006b32:	e0c3      	b.n	8006cbc <UART_SetConfig+0x348>
 8006b34:	2310      	movs	r3, #16
 8006b36:	77fb      	strb	r3, [r7, #31]
 8006b38:	e0c0      	b.n	8006cbc <UART_SetConfig+0x348>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a44      	ldr	r2, [pc, #272]	; (8006c50 <UART_SetConfig+0x2dc>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d125      	bne.n	8006b90 <UART_SetConfig+0x21c>
 8006b44:	4b3e      	ldr	r3, [pc, #248]	; (8006c40 <UART_SetConfig+0x2cc>)
 8006b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b52:	d017      	beq.n	8006b84 <UART_SetConfig+0x210>
 8006b54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b58:	d817      	bhi.n	8006b8a <UART_SetConfig+0x216>
 8006b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b5e:	d00b      	beq.n	8006b78 <UART_SetConfig+0x204>
 8006b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b64:	d811      	bhi.n	8006b8a <UART_SetConfig+0x216>
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <UART_SetConfig+0x1fe>
 8006b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b6e:	d006      	beq.n	8006b7e <UART_SetConfig+0x20a>
 8006b70:	e00b      	b.n	8006b8a <UART_SetConfig+0x216>
 8006b72:	2300      	movs	r3, #0
 8006b74:	77fb      	strb	r3, [r7, #31]
 8006b76:	e0a1      	b.n	8006cbc <UART_SetConfig+0x348>
 8006b78:	2302      	movs	r3, #2
 8006b7a:	77fb      	strb	r3, [r7, #31]
 8006b7c:	e09e      	b.n	8006cbc <UART_SetConfig+0x348>
 8006b7e:	2304      	movs	r3, #4
 8006b80:	77fb      	strb	r3, [r7, #31]
 8006b82:	e09b      	b.n	8006cbc <UART_SetConfig+0x348>
 8006b84:	2308      	movs	r3, #8
 8006b86:	77fb      	strb	r3, [r7, #31]
 8006b88:	e098      	b.n	8006cbc <UART_SetConfig+0x348>
 8006b8a:	2310      	movs	r3, #16
 8006b8c:	77fb      	strb	r3, [r7, #31]
 8006b8e:	e095      	b.n	8006cbc <UART_SetConfig+0x348>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a2f      	ldr	r2, [pc, #188]	; (8006c54 <UART_SetConfig+0x2e0>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d125      	bne.n	8006be6 <UART_SetConfig+0x272>
 8006b9a:	4b29      	ldr	r3, [pc, #164]	; (8006c40 <UART_SetConfig+0x2cc>)
 8006b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ba0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ba4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ba8:	d017      	beq.n	8006bda <UART_SetConfig+0x266>
 8006baa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bae:	d817      	bhi.n	8006be0 <UART_SetConfig+0x26c>
 8006bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bb4:	d00b      	beq.n	8006bce <UART_SetConfig+0x25a>
 8006bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bba:	d811      	bhi.n	8006be0 <UART_SetConfig+0x26c>
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d003      	beq.n	8006bc8 <UART_SetConfig+0x254>
 8006bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bc4:	d006      	beq.n	8006bd4 <UART_SetConfig+0x260>
 8006bc6:	e00b      	b.n	8006be0 <UART_SetConfig+0x26c>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	77fb      	strb	r3, [r7, #31]
 8006bcc:	e076      	b.n	8006cbc <UART_SetConfig+0x348>
 8006bce:	2302      	movs	r3, #2
 8006bd0:	77fb      	strb	r3, [r7, #31]
 8006bd2:	e073      	b.n	8006cbc <UART_SetConfig+0x348>
 8006bd4:	2304      	movs	r3, #4
 8006bd6:	77fb      	strb	r3, [r7, #31]
 8006bd8:	e070      	b.n	8006cbc <UART_SetConfig+0x348>
 8006bda:	2308      	movs	r3, #8
 8006bdc:	77fb      	strb	r3, [r7, #31]
 8006bde:	e06d      	b.n	8006cbc <UART_SetConfig+0x348>
 8006be0:	2310      	movs	r3, #16
 8006be2:	77fb      	strb	r3, [r7, #31]
 8006be4:	e06a      	b.n	8006cbc <UART_SetConfig+0x348>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a1b      	ldr	r2, [pc, #108]	; (8006c58 <UART_SetConfig+0x2e4>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d138      	bne.n	8006c62 <UART_SetConfig+0x2ee>
 8006bf0:	4b13      	ldr	r3, [pc, #76]	; (8006c40 <UART_SetConfig+0x2cc>)
 8006bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006bfa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bfe:	d017      	beq.n	8006c30 <UART_SetConfig+0x2bc>
 8006c00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c04:	d82a      	bhi.n	8006c5c <UART_SetConfig+0x2e8>
 8006c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c0a:	d00b      	beq.n	8006c24 <UART_SetConfig+0x2b0>
 8006c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c10:	d824      	bhi.n	8006c5c <UART_SetConfig+0x2e8>
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <UART_SetConfig+0x2aa>
 8006c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c1a:	d006      	beq.n	8006c2a <UART_SetConfig+0x2b6>
 8006c1c:	e01e      	b.n	8006c5c <UART_SetConfig+0x2e8>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	77fb      	strb	r3, [r7, #31]
 8006c22:	e04b      	b.n	8006cbc <UART_SetConfig+0x348>
 8006c24:	2302      	movs	r3, #2
 8006c26:	77fb      	strb	r3, [r7, #31]
 8006c28:	e048      	b.n	8006cbc <UART_SetConfig+0x348>
 8006c2a:	2304      	movs	r3, #4
 8006c2c:	77fb      	strb	r3, [r7, #31]
 8006c2e:	e045      	b.n	8006cbc <UART_SetConfig+0x348>
 8006c30:	2308      	movs	r3, #8
 8006c32:	77fb      	strb	r3, [r7, #31]
 8006c34:	e042      	b.n	8006cbc <UART_SetConfig+0x348>
 8006c36:	bf00      	nop
 8006c38:	efff69f3 	.word	0xefff69f3
 8006c3c:	40011000 	.word	0x40011000
 8006c40:	40023800 	.word	0x40023800
 8006c44:	40004400 	.word	0x40004400
 8006c48:	40004800 	.word	0x40004800
 8006c4c:	40004c00 	.word	0x40004c00
 8006c50:	40005000 	.word	0x40005000
 8006c54:	40011400 	.word	0x40011400
 8006c58:	40007800 	.word	0x40007800
 8006c5c:	2310      	movs	r3, #16
 8006c5e:	77fb      	strb	r3, [r7, #31]
 8006c60:	e02c      	b.n	8006cbc <UART_SetConfig+0x348>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a72      	ldr	r2, [pc, #456]	; (8006e30 <UART_SetConfig+0x4bc>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d125      	bne.n	8006cb8 <UART_SetConfig+0x344>
 8006c6c:	4b71      	ldr	r3, [pc, #452]	; (8006e34 <UART_SetConfig+0x4c0>)
 8006c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c76:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c7a:	d017      	beq.n	8006cac <UART_SetConfig+0x338>
 8006c7c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c80:	d817      	bhi.n	8006cb2 <UART_SetConfig+0x33e>
 8006c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c86:	d00b      	beq.n	8006ca0 <UART_SetConfig+0x32c>
 8006c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c8c:	d811      	bhi.n	8006cb2 <UART_SetConfig+0x33e>
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <UART_SetConfig+0x326>
 8006c92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c96:	d006      	beq.n	8006ca6 <UART_SetConfig+0x332>
 8006c98:	e00b      	b.n	8006cb2 <UART_SetConfig+0x33e>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	77fb      	strb	r3, [r7, #31]
 8006c9e:	e00d      	b.n	8006cbc <UART_SetConfig+0x348>
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	77fb      	strb	r3, [r7, #31]
 8006ca4:	e00a      	b.n	8006cbc <UART_SetConfig+0x348>
 8006ca6:	2304      	movs	r3, #4
 8006ca8:	77fb      	strb	r3, [r7, #31]
 8006caa:	e007      	b.n	8006cbc <UART_SetConfig+0x348>
 8006cac:	2308      	movs	r3, #8
 8006cae:	77fb      	strb	r3, [r7, #31]
 8006cb0:	e004      	b.n	8006cbc <UART_SetConfig+0x348>
 8006cb2:	2310      	movs	r3, #16
 8006cb4:	77fb      	strb	r3, [r7, #31]
 8006cb6:	e001      	b.n	8006cbc <UART_SetConfig+0x348>
 8006cb8:	2310      	movs	r3, #16
 8006cba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	69db      	ldr	r3, [r3, #28]
 8006cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cc4:	d15b      	bne.n	8006d7e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006cc6:	7ffb      	ldrb	r3, [r7, #31]
 8006cc8:	2b08      	cmp	r3, #8
 8006cca:	d828      	bhi.n	8006d1e <UART_SetConfig+0x3aa>
 8006ccc:	a201      	add	r2, pc, #4	; (adr r2, 8006cd4 <UART_SetConfig+0x360>)
 8006cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd2:	bf00      	nop
 8006cd4:	08006cf9 	.word	0x08006cf9
 8006cd8:	08006d01 	.word	0x08006d01
 8006cdc:	08006d09 	.word	0x08006d09
 8006ce0:	08006d1f 	.word	0x08006d1f
 8006ce4:	08006d0f 	.word	0x08006d0f
 8006ce8:	08006d1f 	.word	0x08006d1f
 8006cec:	08006d1f 	.word	0x08006d1f
 8006cf0:	08006d1f 	.word	0x08006d1f
 8006cf4:	08006d17 	.word	0x08006d17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cf8:	f7ff f9d6 	bl	80060a8 <HAL_RCC_GetPCLK1Freq>
 8006cfc:	61b8      	str	r0, [r7, #24]
        break;
 8006cfe:	e013      	b.n	8006d28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d00:	f7ff f9e6 	bl	80060d0 <HAL_RCC_GetPCLK2Freq>
 8006d04:	61b8      	str	r0, [r7, #24]
        break;
 8006d06:	e00f      	b.n	8006d28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d08:	4b4b      	ldr	r3, [pc, #300]	; (8006e38 <UART_SetConfig+0x4c4>)
 8006d0a:	61bb      	str	r3, [r7, #24]
        break;
 8006d0c:	e00c      	b.n	8006d28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d0e:	f7ff f8b9 	bl	8005e84 <HAL_RCC_GetSysClockFreq>
 8006d12:	61b8      	str	r0, [r7, #24]
        break;
 8006d14:	e008      	b.n	8006d28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d1a:	61bb      	str	r3, [r7, #24]
        break;
 8006d1c:	e004      	b.n	8006d28 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	77bb      	strb	r3, [r7, #30]
        break;
 8006d26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d074      	beq.n	8006e18 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	005a      	lsls	r2, r3, #1
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	085b      	lsrs	r3, r3, #1
 8006d38:	441a      	add	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	2b0f      	cmp	r3, #15
 8006d48:	d916      	bls.n	8006d78 <UART_SetConfig+0x404>
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d50:	d212      	bcs.n	8006d78 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	f023 030f 	bic.w	r3, r3, #15
 8006d5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	085b      	lsrs	r3, r3, #1
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	f003 0307 	and.w	r3, r3, #7
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	89fb      	ldrh	r3, [r7, #14]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	89fa      	ldrh	r2, [r7, #14]
 8006d74:	60da      	str	r2, [r3, #12]
 8006d76:	e04f      	b.n	8006e18 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	77bb      	strb	r3, [r7, #30]
 8006d7c:	e04c      	b.n	8006e18 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d7e:	7ffb      	ldrb	r3, [r7, #31]
 8006d80:	2b08      	cmp	r3, #8
 8006d82:	d828      	bhi.n	8006dd6 <UART_SetConfig+0x462>
 8006d84:	a201      	add	r2, pc, #4	; (adr r2, 8006d8c <UART_SetConfig+0x418>)
 8006d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8a:	bf00      	nop
 8006d8c:	08006db1 	.word	0x08006db1
 8006d90:	08006db9 	.word	0x08006db9
 8006d94:	08006dc1 	.word	0x08006dc1
 8006d98:	08006dd7 	.word	0x08006dd7
 8006d9c:	08006dc7 	.word	0x08006dc7
 8006da0:	08006dd7 	.word	0x08006dd7
 8006da4:	08006dd7 	.word	0x08006dd7
 8006da8:	08006dd7 	.word	0x08006dd7
 8006dac:	08006dcf 	.word	0x08006dcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006db0:	f7ff f97a 	bl	80060a8 <HAL_RCC_GetPCLK1Freq>
 8006db4:	61b8      	str	r0, [r7, #24]
        break;
 8006db6:	e013      	b.n	8006de0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006db8:	f7ff f98a 	bl	80060d0 <HAL_RCC_GetPCLK2Freq>
 8006dbc:	61b8      	str	r0, [r7, #24]
        break;
 8006dbe:	e00f      	b.n	8006de0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dc0:	4b1d      	ldr	r3, [pc, #116]	; (8006e38 <UART_SetConfig+0x4c4>)
 8006dc2:	61bb      	str	r3, [r7, #24]
        break;
 8006dc4:	e00c      	b.n	8006de0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dc6:	f7ff f85d 	bl	8005e84 <HAL_RCC_GetSysClockFreq>
 8006dca:	61b8      	str	r0, [r7, #24]
        break;
 8006dcc:	e008      	b.n	8006de0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dd2:	61bb      	str	r3, [r7, #24]
        break;
 8006dd4:	e004      	b.n	8006de0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	77bb      	strb	r3, [r7, #30]
        break;
 8006dde:	bf00      	nop
    }

    if (pclk != 0U)
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d018      	beq.n	8006e18 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	085a      	lsrs	r2, r3, #1
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	441a      	add	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	2b0f      	cmp	r3, #15
 8006dfe:	d909      	bls.n	8006e14 <UART_SetConfig+0x4a0>
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e06:	d205      	bcs.n	8006e14 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	60da      	str	r2, [r3, #12]
 8006e12:	e001      	b.n	8006e18 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006e24:	7fbb      	ldrb	r3, [r7, #30]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3720      	adds	r7, #32
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	40007c00 	.word	0x40007c00
 8006e34:	40023800 	.word	0x40023800
 8006e38:	00f42400 	.word	0x00f42400

08006e3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00a      	beq.n	8006e66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00a      	beq.n	8006e88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8c:	f003 0304 	and.w	r3, r3, #4
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00a      	beq.n	8006eaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	f003 0308 	and.w	r3, r3, #8
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00a      	beq.n	8006ecc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed0:	f003 0310 	and.w	r3, r3, #16
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00a      	beq.n	8006eee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	430a      	orrs	r2, r1
 8006eec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef2:	f003 0320 	and.w	r3, r3, #32
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00a      	beq.n	8006f10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d01a      	beq.n	8006f52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f3a:	d10a      	bne.n	8006f52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00a      	beq.n	8006f74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	430a      	orrs	r2, r1
 8006f72:	605a      	str	r2, [r3, #4]
  }
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af02      	add	r7, sp, #8
 8006f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f90:	f7fb fcba 	bl	8002908 <HAL_GetTick>
 8006f94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0308 	and.w	r3, r3, #8
 8006fa0:	2b08      	cmp	r3, #8
 8006fa2:	d10e      	bne.n	8006fc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f81b 	bl	8006fee <UART_WaitOnFlagUntilTimeout>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e011      	b.n	8006fe6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b09c      	sub	sp, #112	; 0x70
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	60f8      	str	r0, [r7, #12]
 8006ff6:	60b9      	str	r1, [r7, #8]
 8006ff8:	603b      	str	r3, [r7, #0]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ffe:	e0a7      	b.n	8007150 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007000:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007006:	f000 80a3 	beq.w	8007150 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800700a:	f7fb fc7d 	bl	8002908 <HAL_GetTick>
 800700e:	4602      	mov	r2, r0
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007016:	429a      	cmp	r2, r3
 8007018:	d302      	bcc.n	8007020 <UART_WaitOnFlagUntilTimeout+0x32>
 800701a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800701c:	2b00      	cmp	r3, #0
 800701e:	d13f      	bne.n	80070a0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007028:	e853 3f00 	ldrex	r3, [r3]
 800702c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800702e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007030:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007034:	667b      	str	r3, [r7, #100]	; 0x64
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800703e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007040:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007042:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007044:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007046:	e841 2300 	strex	r3, r2, [r1]
 800704a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800704c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1e6      	bne.n	8007020 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3308      	adds	r3, #8
 8007058:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800705c:	e853 3f00 	ldrex	r3, [r3]
 8007060:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007064:	f023 0301 	bic.w	r3, r3, #1
 8007068:	663b      	str	r3, [r7, #96]	; 0x60
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3308      	adds	r3, #8
 8007070:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007072:	64ba      	str	r2, [r7, #72]	; 0x48
 8007074:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007076:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800707a:	e841 2300 	strex	r3, r2, [r1]
 800707e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1e5      	bne.n	8007052 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2220      	movs	r2, #32
 800708a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2220      	movs	r2, #32
 8007090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e068      	b.n	8007172 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 0304 	and.w	r3, r3, #4
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d050      	beq.n	8007150 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	69db      	ldr	r3, [r3, #28]
 80070b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070bc:	d148      	bne.n	8007150 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070c6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d0:	e853 3f00 	ldrex	r3, [r3]
 80070d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	461a      	mov	r2, r3
 80070e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e6:	637b      	str	r3, [r7, #52]	; 0x34
 80070e8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070ee:	e841 2300 	strex	r3, r2, [r1]
 80070f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1e6      	bne.n	80070c8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	3308      	adds	r3, #8
 8007100:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	e853 3f00 	ldrex	r3, [r3]
 8007108:	613b      	str	r3, [r7, #16]
   return(result);
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	f023 0301 	bic.w	r3, r3, #1
 8007110:	66bb      	str	r3, [r7, #104]	; 0x68
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3308      	adds	r3, #8
 8007118:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800711a:	623a      	str	r2, [r7, #32]
 800711c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711e:	69f9      	ldr	r1, [r7, #28]
 8007120:	6a3a      	ldr	r2, [r7, #32]
 8007122:	e841 2300 	strex	r3, r2, [r1]
 8007126:	61bb      	str	r3, [r7, #24]
   return(result);
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1e5      	bne.n	80070fa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2220      	movs	r2, #32
 8007132:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2220      	movs	r2, #32
 8007138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2220      	movs	r2, #32
 8007140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e010      	b.n	8007172 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	69da      	ldr	r2, [r3, #28]
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	4013      	ands	r3, r2
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	429a      	cmp	r2, r3
 800715e:	bf0c      	ite	eq
 8007160:	2301      	moveq	r3, #1
 8007162:	2300      	movne	r3, #0
 8007164:	b2db      	uxtb	r3, r3
 8007166:	461a      	mov	r2, r3
 8007168:	79fb      	ldrb	r3, [r7, #7]
 800716a:	429a      	cmp	r2, r3
 800716c:	f43f af48 	beq.w	8007000 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3770      	adds	r7, #112	; 0x70
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
	...

0800717c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800717c:	b084      	sub	sp, #16
 800717e:	b580      	push	{r7, lr}
 8007180:	b084      	sub	sp, #16
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	f107 001c 	add.w	r0, r7, #28
 800718a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800718e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007190:	2b01      	cmp	r3, #1
 8007192:	d120      	bne.n	80071d6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007198:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	68da      	ldr	r2, [r3, #12]
 80071a4:	4b20      	ldr	r3, [pc, #128]	; (8007228 <USB_CoreInit+0xac>)
 80071a6:	4013      	ands	r3, r2
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80071b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d105      	bne.n	80071ca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fa96 	bl	80076fc <USB_CoreReset>
 80071d0:	4603      	mov	r3, r0
 80071d2:	73fb      	strb	r3, [r7, #15]
 80071d4:	e010      	b.n	80071f8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fa8a 	bl	80076fc <USB_CoreReset>
 80071e8:	4603      	mov	r3, r0
 80071ea:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80071f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d10b      	bne.n	8007216 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f043 0206 	orr.w	r2, r3, #6
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f043 0220 	orr.w	r2, r3, #32
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007216:	7bfb      	ldrb	r3, [r7, #15]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007222:	b004      	add	sp, #16
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	ffbdffbf 	.word	0xffbdffbf

0800722c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	f023 0201 	bic.w	r2, r3, #1
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	370c      	adds	r7, #12
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	460b      	mov	r3, r1
 8007258:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800725a:	2300      	movs	r3, #0
 800725c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800726a:	78fb      	ldrb	r3, [r7, #3]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d115      	bne.n	800729c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800727c:	2001      	movs	r0, #1
 800727e:	f7fb fb4f 	bl	8002920 <HAL_Delay>
      ms++;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	3301      	adds	r3, #1
 8007286:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fa29 	bl	80076e0 <USB_GetMode>
 800728e:	4603      	mov	r3, r0
 8007290:	2b01      	cmp	r3, #1
 8007292:	d01e      	beq.n	80072d2 <USB_SetCurrentMode+0x84>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2b31      	cmp	r3, #49	; 0x31
 8007298:	d9f0      	bls.n	800727c <USB_SetCurrentMode+0x2e>
 800729a:	e01a      	b.n	80072d2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800729c:	78fb      	ldrb	r3, [r7, #3]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d115      	bne.n	80072ce <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072ae:	2001      	movs	r0, #1
 80072b0:	f7fb fb36 	bl	8002920 <HAL_Delay>
      ms++;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	3301      	adds	r3, #1
 80072b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fa10 	bl	80076e0 <USB_GetMode>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d005      	beq.n	80072d2 <USB_SetCurrentMode+0x84>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2b31      	cmp	r3, #49	; 0x31
 80072ca:	d9f0      	bls.n	80072ae <USB_SetCurrentMode+0x60>
 80072cc:	e001      	b.n	80072d2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e005      	b.n	80072de <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2b32      	cmp	r3, #50	; 0x32
 80072d6:	d101      	bne.n	80072dc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e000      	b.n	80072de <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
	...

080072e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072e8:	b084      	sub	sp, #16
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b086      	sub	sp, #24
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80072f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007302:	2300      	movs	r3, #0
 8007304:	613b      	str	r3, [r7, #16]
 8007306:	e009      	b.n	800731c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	3340      	adds	r3, #64	; 0x40
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4413      	add	r3, r2
 8007312:	2200      	movs	r2, #0
 8007314:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	3301      	adds	r3, #1
 800731a:	613b      	str	r3, [r7, #16]
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	2b0e      	cmp	r3, #14
 8007320:	d9f2      	bls.n	8007308 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007324:	2b00      	cmp	r3, #0
 8007326:	d11c      	bne.n	8007362 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007336:	f043 0302 	orr.w	r3, r3, #2
 800733a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007340:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	e005      	b.n	800736e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007366:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007374:	461a      	mov	r2, r3
 8007376:	2300      	movs	r3, #0
 8007378:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007380:	4619      	mov	r1, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007388:	461a      	mov	r2, r3
 800738a:	680b      	ldr	r3, [r1, #0]
 800738c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800738e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007390:	2b01      	cmp	r3, #1
 8007392:	d10c      	bne.n	80073ae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007396:	2b00      	cmp	r3, #0
 8007398:	d104      	bne.n	80073a4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800739a:	2100      	movs	r1, #0
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f965 	bl	800766c <USB_SetDevSpeed>
 80073a2:	e008      	b.n	80073b6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80073a4:	2101      	movs	r1, #1
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f960 	bl	800766c <USB_SetDevSpeed>
 80073ac:	e003      	b.n	80073b6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80073ae:	2103      	movs	r1, #3
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f95b 	bl	800766c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073b6:	2110      	movs	r1, #16
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f8f3 	bl	80075a4 <USB_FlushTxFifo>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f91f 	bl	800760c <USB_FlushRxFifo>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073de:	461a      	mov	r2, r3
 80073e0:	2300      	movs	r3, #0
 80073e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ea:	461a      	mov	r2, r3
 80073ec:	2300      	movs	r3, #0
 80073ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f6:	461a      	mov	r2, r3
 80073f8:	2300      	movs	r3, #0
 80073fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073fc:	2300      	movs	r3, #0
 80073fe:	613b      	str	r3, [r7, #16]
 8007400:	e043      	b.n	800748a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	4413      	add	r3, r2
 800740a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007414:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007418:	d118      	bne.n	800744c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10a      	bne.n	8007436 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4413      	add	r3, r2
 8007428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800742c:	461a      	mov	r2, r3
 800742e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007432:	6013      	str	r3, [r2, #0]
 8007434:	e013      	b.n	800745e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	4413      	add	r3, r2
 800743e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007442:	461a      	mov	r2, r3
 8007444:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007448:	6013      	str	r3, [r2, #0]
 800744a:	e008      	b.n	800745e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4413      	add	r3, r2
 8007454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007458:	461a      	mov	r2, r3
 800745a:	2300      	movs	r3, #0
 800745c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	4413      	add	r3, r2
 8007466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746a:	461a      	mov	r2, r3
 800746c:	2300      	movs	r3, #0
 800746e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4413      	add	r3, r2
 8007478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747c:	461a      	mov	r2, r3
 800747e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007482:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	3301      	adds	r3, #1
 8007488:	613b      	str	r3, [r7, #16]
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	429a      	cmp	r2, r3
 8007490:	d3b7      	bcc.n	8007402 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007492:	2300      	movs	r3, #0
 8007494:	613b      	str	r3, [r7, #16]
 8007496:	e043      	b.n	8007520 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074ae:	d118      	bne.n	80074e2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10a      	bne.n	80074cc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	015a      	lsls	r2, r3, #5
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	4413      	add	r3, r2
 80074be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c2:	461a      	mov	r2, r3
 80074c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074c8:	6013      	str	r3, [r2, #0]
 80074ca:	e013      	b.n	80074f4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d8:	461a      	mov	r2, r3
 80074da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074de:	6013      	str	r3, [r2, #0]
 80074e0:	e008      	b.n	80074f4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	015a      	lsls	r2, r3, #5
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	4413      	add	r3, r2
 80074ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ee:	461a      	mov	r2, r3
 80074f0:	2300      	movs	r3, #0
 80074f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007500:	461a      	mov	r2, r3
 8007502:	2300      	movs	r3, #0
 8007504:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	4413      	add	r3, r2
 800750e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007512:	461a      	mov	r2, r3
 8007514:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007518:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	3301      	adds	r3, #1
 800751e:	613b      	str	r3, [r7, #16]
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	429a      	cmp	r2, r3
 8007526:	d3b7      	bcc.n	8007498 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007536:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800753a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007548:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	2b00      	cmp	r3, #0
 800754e:	d105      	bne.n	800755c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	f043 0210 	orr.w	r2, r3, #16
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	699a      	ldr	r2, [r3, #24]
 8007560:	4b0e      	ldr	r3, [pc, #56]	; (800759c <USB_DevInit+0x2b4>)
 8007562:	4313      	orrs	r3, r2
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800756a:	2b00      	cmp	r3, #0
 800756c:	d005      	beq.n	800757a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	f043 0208 	orr.w	r2, r3, #8
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800757a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800757c:	2b01      	cmp	r3, #1
 800757e:	d105      	bne.n	800758c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	699a      	ldr	r2, [r3, #24]
 8007584:	4b06      	ldr	r3, [pc, #24]	; (80075a0 <USB_DevInit+0x2b8>)
 8007586:	4313      	orrs	r3, r2
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800758c:	7dfb      	ldrb	r3, [r7, #23]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3718      	adds	r7, #24
 8007592:	46bd      	mov	sp, r7
 8007594:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007598:	b004      	add	sp, #16
 800759a:	4770      	bx	lr
 800759c:	803c3800 	.word	0x803c3800
 80075a0:	40000004 	.word	0x40000004

080075a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3301      	adds	r3, #1
 80075b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4a13      	ldr	r2, [pc, #76]	; (8007608 <USB_FlushTxFifo+0x64>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d901      	bls.n	80075c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e01b      	b.n	80075fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	daf2      	bge.n	80075b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80075cc:	2300      	movs	r3, #0
 80075ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	019b      	lsls	r3, r3, #6
 80075d4:	f043 0220 	orr.w	r2, r3, #32
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3301      	adds	r3, #1
 80075e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4a08      	ldr	r2, [pc, #32]	; (8007608 <USB_FlushTxFifo+0x64>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d901      	bls.n	80075ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e006      	b.n	80075fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	f003 0320 	and.w	r3, r3, #32
 80075f6:	2b20      	cmp	r3, #32
 80075f8:	d0f0      	beq.n	80075dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	00030d40 	.word	0x00030d40

0800760c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007614:	2300      	movs	r3, #0
 8007616:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	3301      	adds	r3, #1
 800761c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	4a11      	ldr	r2, [pc, #68]	; (8007668 <USB_FlushRxFifo+0x5c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d901      	bls.n	800762a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e018      	b.n	800765c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	daf2      	bge.n	8007618 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2210      	movs	r2, #16
 800763a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	3301      	adds	r3, #1
 8007640:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4a08      	ldr	r2, [pc, #32]	; (8007668 <USB_FlushRxFifo+0x5c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d901      	bls.n	800764e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e006      	b.n	800765c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	f003 0310 	and.w	r3, r3, #16
 8007656:	2b10      	cmp	r3, #16
 8007658:	d0f0      	beq.n	800763c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr
 8007668:	00030d40 	.word	0x00030d40

0800766c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	460b      	mov	r3, r1
 8007676:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	78fb      	ldrb	r3, [r7, #3]
 8007686:	68f9      	ldr	r1, [r7, #12]
 8007688:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800768c:	4313      	orrs	r3, r2
 800768e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800769e:	b480      	push	{r7}
 80076a0:	b085      	sub	sp, #20
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076b8:	f023 0303 	bic.w	r3, r3, #3
 80076bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076cc:	f043 0302 	orr.w	r3, r3, #2
 80076d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3714      	adds	r7, #20
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	695b      	ldr	r3, [r3, #20]
 80076ec:	f003 0301 	and.w	r3, r3, #1
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007704:	2300      	movs	r3, #0
 8007706:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	3301      	adds	r3, #1
 800770c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	4a13      	ldr	r2, [pc, #76]	; (8007760 <USB_CoreReset+0x64>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d901      	bls.n	800771a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e01b      	b.n	8007752 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	daf2      	bge.n	8007708 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007722:	2300      	movs	r3, #0
 8007724:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	f043 0201 	orr.w	r2, r3, #1
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	3301      	adds	r3, #1
 8007736:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	4a09      	ldr	r2, [pc, #36]	; (8007760 <USB_CoreReset+0x64>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d901      	bls.n	8007744 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e006      	b.n	8007752 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b01      	cmp	r3, #1
 800774e:	d0f0      	beq.n	8007732 <USB_CoreReset+0x36>

  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	00030d40 	.word	0x00030d40

08007764 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800776a:	f000 fc55 	bl	8008018 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800776e:	4b19      	ldr	r3, [pc, #100]	; (80077d4 <MX_LWIP_Init+0x70>)
 8007770:	2200      	movs	r2, #0
 8007772:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8007774:	4b18      	ldr	r3, [pc, #96]	; (80077d8 <MX_LWIP_Init+0x74>)
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800777a:	4b18      	ldr	r3, [pc, #96]	; (80077dc <MX_LWIP_Init+0x78>)
 800777c:	2200      	movs	r2, #0
 800777e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007780:	4b17      	ldr	r3, [pc, #92]	; (80077e0 <MX_LWIP_Init+0x7c>)
 8007782:	9302      	str	r3, [sp, #8]
 8007784:	4b17      	ldr	r3, [pc, #92]	; (80077e4 <MX_LWIP_Init+0x80>)
 8007786:	9301      	str	r3, [sp, #4]
 8007788:	2300      	movs	r3, #0
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	4b13      	ldr	r3, [pc, #76]	; (80077dc <MX_LWIP_Init+0x78>)
 800778e:	4a12      	ldr	r2, [pc, #72]	; (80077d8 <MX_LWIP_Init+0x74>)
 8007790:	4910      	ldr	r1, [pc, #64]	; (80077d4 <MX_LWIP_Init+0x70>)
 8007792:	4815      	ldr	r0, [pc, #84]	; (80077e8 <MX_LWIP_Init+0x84>)
 8007794:	f001 f92c 	bl	80089f0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007798:	4813      	ldr	r0, [pc, #76]	; (80077e8 <MX_LWIP_Init+0x84>)
 800779a:	f001 fae3 	bl	8008d64 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800779e:	4b12      	ldr	r3, [pc, #72]	; (80077e8 <MX_LWIP_Init+0x84>)
 80077a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80077a4:	089b      	lsrs	r3, r3, #2
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d003      	beq.n	80077b8 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80077b0:	480d      	ldr	r0, [pc, #52]	; (80077e8 <MX_LWIP_Init+0x84>)
 80077b2:	f001 fae7 	bl	8008d84 <netif_set_up>
 80077b6:	e002      	b.n	80077be <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80077b8:	480b      	ldr	r0, [pc, #44]	; (80077e8 <MX_LWIP_Init+0x84>)
 80077ba:	f001 fb4f 	bl	8008e5c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80077be:	490b      	ldr	r1, [pc, #44]	; (80077ec <MX_LWIP_Init+0x88>)
 80077c0:	4809      	ldr	r0, [pc, #36]	; (80077e8 <MX_LWIP_Init+0x84>)
 80077c2:	f001 fbe5 	bl	8008f90 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80077c6:	4808      	ldr	r0, [pc, #32]	; (80077e8 <MX_LWIP_Init+0x84>)
 80077c8:	f008 fce0 	bl	801018c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80077cc:	bf00      	nop
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	20000cd0 	.word	0x20000cd0
 80077d8:	20000cd4 	.word	0x20000cd4
 80077dc:	20000cd8 	.word	0x20000cd8
 80077e0:	08013bdd 	.word	0x08013bdd
 80077e4:	08007b05 	.word	0x08007b05
 80077e8:	20000c98 	.word	0x20000c98
 80077ec:	080077f1 	.word	0x080077f1

080077f0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <SCB_InvalidateDCache_by_Addr>:
{
 8007804:	b480      	push	{r7}
 8007806:	b087      	sub	sp, #28
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8007816:	2320      	movs	r3, #32
 8007818:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800781a:	f3bf 8f4f 	dsb	sy
}
 800781e:	bf00      	nop
    while (op_size > 0) {
 8007820:	e00b      	b.n	800783a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8007822:	4a0d      	ldr	r2, [pc, #52]	; (8007858 <SCB_InvalidateDCache_by_Addr+0x54>)
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	693a      	ldr	r2, [r7, #16]
 800782e:	4413      	add	r3, r2
 8007830:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2b00      	cmp	r3, #0
 800783e:	dcf0      	bgt.n	8007822 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8007840:	f3bf 8f4f 	dsb	sy
}
 8007844:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007846:	f3bf 8f6f 	isb	sy
}
 800784a:	bf00      	nop
}
 800784c:	bf00      	nop
 800784e:	371c      	adds	r7, #28
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr
 8007858:	e000ed00 	.word	0xe000ed00

0800785c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007864:	2300      	movs	r3, #0
 8007866:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007868:	4b40      	ldr	r3, [pc, #256]	; (800796c <low_level_init+0x110>)
 800786a:	4a41      	ldr	r2, [pc, #260]	; (8007970 <low_level_init+0x114>)
 800786c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800786e:	2300      	movs	r3, #0
 8007870:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007872:	2380      	movs	r3, #128	; 0x80
 8007874:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007876:	23e1      	movs	r3, #225	; 0xe1
 8007878:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800787a:	2300      	movs	r3, #0
 800787c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800787e:	2300      	movs	r3, #0
 8007880:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007882:	2300      	movs	r3, #0
 8007884:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007886:	4a39      	ldr	r2, [pc, #228]	; (800796c <low_level_init+0x110>)
 8007888:	f107 0308 	add.w	r3, r7, #8
 800788c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800788e:	4b37      	ldr	r3, [pc, #220]	; (800796c <low_level_init+0x110>)
 8007890:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007894:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007896:	4b35      	ldr	r3, [pc, #212]	; (800796c <low_level_init+0x110>)
 8007898:	4a36      	ldr	r2, [pc, #216]	; (8007974 <low_level_init+0x118>)
 800789a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800789c:	4b33      	ldr	r3, [pc, #204]	; (800796c <low_level_init+0x110>)
 800789e:	4a36      	ldr	r2, [pc, #216]	; (8007978 <low_level_init+0x11c>)
 80078a0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80078a2:	4b32      	ldr	r3, [pc, #200]	; (800796c <low_level_init+0x110>)
 80078a4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80078a8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80078aa:	4830      	ldr	r0, [pc, #192]	; (800796c <low_level_init+0x110>)
 80078ac:	f7fb fdd4 	bl	8003458 <HAL_ETH_Init>
 80078b0:	4603      	mov	r3, r0
 80078b2:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80078b4:	2238      	movs	r2, #56	; 0x38
 80078b6:	2100      	movs	r1, #0
 80078b8:	4830      	ldr	r0, [pc, #192]	; (800797c <low_level_init+0x120>)
 80078ba:	f00c fac1 	bl	8013e40 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80078be:	4b2f      	ldr	r3, [pc, #188]	; (800797c <low_level_init+0x120>)
 80078c0:	2221      	movs	r2, #33	; 0x21
 80078c2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80078c4:	4b2d      	ldr	r3, [pc, #180]	; (800797c <low_level_init+0x120>)
 80078c6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80078ca:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80078cc:	4b2b      	ldr	r3, [pc, #172]	; (800797c <low_level_init+0x120>)
 80078ce:	2200      	movs	r2, #0
 80078d0:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80078d2:	482b      	ldr	r0, [pc, #172]	; (8007980 <low_level_init+0x124>)
 80078d4:	f000 ff54 	bl	8008780 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2206      	movs	r2, #6
 80078dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80078e0:	4b22      	ldr	r3, [pc, #136]	; (800796c <low_level_init+0x110>)
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	781a      	ldrb	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80078ec:	4b1f      	ldr	r3, [pc, #124]	; (800796c <low_level_init+0x110>)
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	785a      	ldrb	r2, [r3, #1]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80078f8:	4b1c      	ldr	r3, [pc, #112]	; (800796c <low_level_init+0x110>)
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	789a      	ldrb	r2, [r3, #2]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007904:	4b19      	ldr	r3, [pc, #100]	; (800796c <low_level_init+0x110>)
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	78da      	ldrb	r2, [r3, #3]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007910:	4b16      	ldr	r3, [pc, #88]	; (800796c <low_level_init+0x110>)
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	791a      	ldrb	r2, [r3, #4]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800791c:	4b13      	ldr	r3, [pc, #76]	; (800796c <low_level_init+0x110>)
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	795a      	ldrb	r2, [r3, #5]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800792e:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007936:	f043 030a 	orr.w	r3, r3, #10
 800793a:	b2da      	uxtb	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007942:	4910      	ldr	r1, [pc, #64]	; (8007984 <low_level_init+0x128>)
 8007944:	4810      	ldr	r0, [pc, #64]	; (8007988 <low_level_init+0x12c>)
 8007946:	f7fa fe24 	bl	8002592 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800794a:	480f      	ldr	r0, [pc, #60]	; (8007988 <low_level_init+0x12c>)
 800794c:	f7fa fe53 	bl	80025f6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8007950:	7bfb      	ldrb	r3, [r7, #15]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d103      	bne.n	800795e <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fa32 	bl	8007dc0 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800795c:	e001      	b.n	8007962 <low_level_init+0x106>
    Error_Handler();
 800795e:	f7f9 fab2 	bl	8000ec6 <Error_Handler>
}
 8007962:	bf00      	nop
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	20005668 	.word	0x20005668
 8007970:	40028000 	.word	0x40028000
 8007974:	2000014c 	.word	0x2000014c
 8007978:	200000ac 	.word	0x200000ac
 800797c:	20005718 	.word	0x20005718
 8007980:	0801a6b8 	.word	0x0801a6b8
 8007984:	20000024 	.word	0x20000024
 8007988:	20005750 	.word	0x20005750

0800798c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b092      	sub	sp, #72	; 0x48
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8007996:	2300      	movs	r3, #0
 8007998:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800799a:	2300      	movs	r3, #0
 800799c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80079a4:	f107 030c 	add.w	r3, r7, #12
 80079a8:	2230      	movs	r2, #48	; 0x30
 80079aa:	2100      	movs	r1, #0
 80079ac:	4618      	mov	r0, r3
 80079ae:	f00c fa47 	bl	8013e40 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80079b2:	f107 030c 	add.w	r3, r7, #12
 80079b6:	2230      	movs	r2, #48	; 0x30
 80079b8:	2100      	movs	r1, #0
 80079ba:	4618      	mov	r0, r3
 80079bc:	f00c fa40 	bl	8013e40 <memset>

  for(q = p; q != NULL; q = q->next)
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	643b      	str	r3, [r7, #64]	; 0x40
 80079c4:	e045      	b.n	8007a52 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80079c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079c8:	2b03      	cmp	r3, #3
 80079ca:	d902      	bls.n	80079d2 <low_level_output+0x46>
      return ERR_IF;
 80079cc:	f06f 030b 	mvn.w	r3, #11
 80079d0:	e055      	b.n	8007a7e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80079d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079d4:	6859      	ldr	r1, [r3, #4]
 80079d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079d8:	4613      	mov	r3, r2
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	4413      	add	r3, r2
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	3348      	adds	r3, #72	; 0x48
 80079e2:	443b      	add	r3, r7
 80079e4:	3b3c      	subs	r3, #60	; 0x3c
 80079e6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80079e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079ea:	895b      	ldrh	r3, [r3, #10]
 80079ec:	4619      	mov	r1, r3
 80079ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079f0:	4613      	mov	r3, r2
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	4413      	add	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	3348      	adds	r3, #72	; 0x48
 80079fa:	443b      	add	r3, r7
 80079fc:	3b38      	subs	r3, #56	; 0x38
 80079fe:	6019      	str	r1, [r3, #0]

    if(i>0)
 8007a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d011      	beq.n	8007a2a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a08:	1e5a      	subs	r2, r3, #1
 8007a0a:	f107 000c 	add.w	r0, r7, #12
 8007a0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a10:	460b      	mov	r3, r1
 8007a12:	005b      	lsls	r3, r3, #1
 8007a14:	440b      	add	r3, r1
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	18c1      	adds	r1, r0, r3
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	005b      	lsls	r3, r3, #1
 8007a1e:	4413      	add	r3, r2
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	3348      	adds	r3, #72	; 0x48
 8007a24:	443b      	add	r3, r7
 8007a26:	3b34      	subs	r3, #52	; 0x34
 8007a28:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8007a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d109      	bne.n	8007a46 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8007a32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a34:	4613      	mov	r3, r2
 8007a36:	005b      	lsls	r3, r3, #1
 8007a38:	4413      	add	r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	3348      	adds	r3, #72	; 0x48
 8007a3e:	443b      	add	r3, r7
 8007a40:	3b34      	subs	r3, #52	; 0x34
 8007a42:	2200      	movs	r2, #0
 8007a44:	601a      	str	r2, [r3, #0]
    }

    i++;
 8007a46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a48:	3301      	adds	r3, #1
 8007a4a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8007a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	643b      	str	r3, [r7, #64]	; 0x40
 8007a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1b6      	bne.n	80079c6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	891b      	ldrh	r3, [r3, #8]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	4b0a      	ldr	r3, [pc, #40]	; (8007a88 <low_level_output+0xfc>)
 8007a60:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8007a62:	4a09      	ldr	r2, [pc, #36]	; (8007a88 <low_level_output+0xfc>)
 8007a64:	f107 030c 	add.w	r3, r7, #12
 8007a68:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8007a6a:	4a07      	ldr	r2, [pc, #28]	; (8007a88 <low_level_output+0xfc>)
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8007a70:	2214      	movs	r2, #20
 8007a72:	4905      	ldr	r1, [pc, #20]	; (8007a88 <low_level_output+0xfc>)
 8007a74:	4805      	ldr	r0, [pc, #20]	; (8007a8c <low_level_output+0x100>)
 8007a76:	f7fb fe23 	bl	80036c0 <HAL_ETH_Transmit>

  return errval;
 8007a7a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3748      	adds	r7, #72	; 0x48
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	20005718 	.word	0x20005718
 8007a8c:	20005668 	.word	0x20005668

08007a90 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8007a9c:	4b07      	ldr	r3, [pc, #28]	; (8007abc <low_level_input+0x2c>)
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d105      	bne.n	8007ab0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8007aa4:	f107 030c 	add.w	r3, r7, #12
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	4805      	ldr	r0, [pc, #20]	; (8007ac0 <low_level_input+0x30>)
 8007aac:	f7fb fe9c 	bl	80037e8 <HAL_ETH_ReadData>
  }

  return p;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	20005664 	.word	0x20005664
 8007ac0:	20005668 	.word	0x20005668

08007ac4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007acc:	2300      	movs	r3, #0
 8007ace:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7ff ffdd 	bl	8007a90 <low_level_input>
 8007ad6:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00a      	beq.n	8007af4 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	6879      	ldr	r1, [r7, #4]
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	4798      	blx	r3
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d002      	beq.n	8007af4 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f001 fdce 	bl	8009690 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1ea      	bne.n	8007ad0 <ethernetif_input+0xc>
}
 8007afa:	bf00      	nop
 8007afc:	bf00      	nop
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d106      	bne.n	8007b20 <ethernetif_init+0x1c>
 8007b12:	4b0e      	ldr	r3, [pc, #56]	; (8007b4c <ethernetif_init+0x48>)
 8007b14:	f44f 72bd 	mov.w	r2, #378	; 0x17a
 8007b18:	490d      	ldr	r1, [pc, #52]	; (8007b50 <ethernetif_init+0x4c>)
 8007b1a:	480e      	ldr	r0, [pc, #56]	; (8007b54 <ethernetif_init+0x50>)
 8007b1c:	f00c f998 	bl	8013e50 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2273      	movs	r2, #115	; 0x73
 8007b24:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2274      	movs	r2, #116	; 0x74
 8007b2c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a09      	ldr	r2, [pc, #36]	; (8007b58 <ethernetif_init+0x54>)
 8007b34:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a08      	ldr	r2, [pc, #32]	; (8007b5c <ethernetif_init+0x58>)
 8007b3a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7ff fe8d 	bl	800785c <low_level_init>

  return ERR_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	080153f8 	.word	0x080153f8
 8007b50:	08015414 	.word	0x08015414
 8007b54:	08015424 	.word	0x08015424
 8007b58:	08012059 	.word	0x08012059
 8007b5c:	0800798d 	.word	0x0800798d

08007b60 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007b6c:	68f9      	ldr	r1, [r7, #12]
 8007b6e:	4807      	ldr	r0, [pc, #28]	; (8007b8c <pbuf_free_custom+0x2c>)
 8007b70:	f000 fee8 	bl	8008944 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8007b74:	4b06      	ldr	r3, [pc, #24]	; (8007b90 <pbuf_free_custom+0x30>)
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d102      	bne.n	8007b82 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8007b7c:	4b04      	ldr	r3, [pc, #16]	; (8007b90 <pbuf_free_custom+0x30>)
 8007b7e:	2200      	movs	r2, #0
 8007b80:	701a      	strb	r2, [r3, #0]
  }
}
 8007b82:	bf00      	nop
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	0801a6b8 	.word	0x0801a6b8
 8007b90:	20005664 	.word	0x20005664

08007b94 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007b98:	f7fa feb6 	bl	8002908 <HAL_GetTick>
 8007b9c:	4603      	mov	r3, r0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	bd80      	pop	{r7, pc}
	...

08007ba4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b08e      	sub	sp, #56	; 0x38
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	605a      	str	r2, [r3, #4]
 8007bb6:	609a      	str	r2, [r3, #8]
 8007bb8:	60da      	str	r2, [r3, #12]
 8007bba:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a52      	ldr	r2, [pc, #328]	; (8007d0c <HAL_ETH_MspInit+0x168>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	f040 809e 	bne.w	8007d04 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007bc8:	4b51      	ldr	r3, [pc, #324]	; (8007d10 <HAL_ETH_MspInit+0x16c>)
 8007bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bcc:	4a50      	ldr	r2, [pc, #320]	; (8007d10 <HAL_ETH_MspInit+0x16c>)
 8007bce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8007bd4:	4b4e      	ldr	r3, [pc, #312]	; (8007d10 <HAL_ETH_MspInit+0x16c>)
 8007bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bdc:	623b      	str	r3, [r7, #32]
 8007bde:	6a3b      	ldr	r3, [r7, #32]
 8007be0:	4b4b      	ldr	r3, [pc, #300]	; (8007d10 <HAL_ETH_MspInit+0x16c>)
 8007be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be4:	4a4a      	ldr	r2, [pc, #296]	; (8007d10 <HAL_ETH_MspInit+0x16c>)
 8007be6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007bea:	6313      	str	r3, [r2, #48]	; 0x30
 8007bec:	4b48      	ldr	r3, [pc, #288]	; (8007d10 <HAL_ETH_MspInit+0x16c>)
 8007bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007bf4:	61fb      	str	r3, [r7, #28]
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	4b45      	ldr	r3, [pc, #276]	; (8007d10 <HAL_ETH_MspInit+0x16c>)
 8007bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfc:	4a44      	ldr	r2, [pc, #272]	; (8007d10 <HAL_ETH_MspInit+0x16c>)
 8007bfe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c02:	6313      	str	r3, [r2, #48]	; 0x30
 8007c04:	4b42      	ldr	r3, [pc, #264]	; (8007d10 <HAL_ETH_MspInit+0x16c>)
 8007c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c0c:	61bb      	str	r3, [r7, #24]
 8007c0e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c10:	4b3f      	ldr	r3, [pc, #252]	; (8007d10 <HAL_ETH_MspInit+0x16c>)
 8007c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c14:	4a3e      	ldr	r2, [pc, #248]	; (8007d10 <HAL_ETH_MspInit+0x16c>)
 8007c16:	f043 0304 	orr.w	r3, r3, #4
 8007c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8007c1c:	4b3c      	ldr	r3, [pc, #240]	; (8007d10 <HAL_ETH_MspInit+0x16c>)
 8007c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c20:	f003 0304 	and.w	r3, r3, #4
 8007c24:	617b      	str	r3, [r7, #20]
 8007c26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c28:	4b39      	ldr	r3, [pc, #228]	; (8007d10 <HAL_ETH_MspInit+0x16c>)
 8007c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2c:	4a38      	ldr	r2, [pc, #224]	; (8007d10 <HAL_ETH_MspInit+0x16c>)
 8007c2e:	f043 0301 	orr.w	r3, r3, #1
 8007c32:	6313      	str	r3, [r2, #48]	; 0x30
 8007c34:	4b36      	ldr	r3, [pc, #216]	; (8007d10 <HAL_ETH_MspInit+0x16c>)
 8007c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c38:	f003 0301 	and.w	r3, r3, #1
 8007c3c:	613b      	str	r3, [r7, #16]
 8007c3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c40:	4b33      	ldr	r3, [pc, #204]	; (8007d10 <HAL_ETH_MspInit+0x16c>)
 8007c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c44:	4a32      	ldr	r2, [pc, #200]	; (8007d10 <HAL_ETH_MspInit+0x16c>)
 8007c46:	f043 0302 	orr.w	r3, r3, #2
 8007c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8007c4c:	4b30      	ldr	r3, [pc, #192]	; (8007d10 <HAL_ETH_MspInit+0x16c>)
 8007c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c50:	f003 0302 	and.w	r3, r3, #2
 8007c54:	60fb      	str	r3, [r7, #12]
 8007c56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007c58:	4b2d      	ldr	r3, [pc, #180]	; (8007d10 <HAL_ETH_MspInit+0x16c>)
 8007c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c5c:	4a2c      	ldr	r2, [pc, #176]	; (8007d10 <HAL_ETH_MspInit+0x16c>)
 8007c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c62:	6313      	str	r3, [r2, #48]	; 0x30
 8007c64:	4b2a      	ldr	r3, [pc, #168]	; (8007d10 <HAL_ETH_MspInit+0x16c>)
 8007c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6c:	60bb      	str	r3, [r7, #8]
 8007c6e:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8007c70:	2332      	movs	r3, #50	; 0x32
 8007c72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c74:	2302      	movs	r3, #2
 8007c76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007c80:	230b      	movs	r3, #11
 8007c82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c88:	4619      	mov	r1, r3
 8007c8a:	4822      	ldr	r0, [pc, #136]	; (8007d14 <HAL_ETH_MspInit+0x170>)
 8007c8c:	f7fc fdca 	bl	8004824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8007c90:	2386      	movs	r3, #134	; 0x86
 8007c92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c94:	2302      	movs	r3, #2
 8007c96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007ca0:	230b      	movs	r3, #11
 8007ca2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ca8:	4619      	mov	r1, r3
 8007caa:	481b      	ldr	r0, [pc, #108]	; (8007d18 <HAL_ETH_MspInit+0x174>)
 8007cac:	f7fc fdba 	bl	8004824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|RMII_TXD1_Pin;
 8007cb0:	f242 0301 	movw	r3, #8193	; 0x2001
 8007cb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cb6:	2302      	movs	r3, #2
 8007cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007cc2:	230b      	movs	r3, #11
 8007cc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cca:	4619      	mov	r1, r3
 8007ccc:	4813      	ldr	r0, [pc, #76]	; (8007d1c <HAL_ETH_MspInit+0x178>)
 8007cce:	f7fc fda9 	bl	8004824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8007cd2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007cd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cd8:	2302      	movs	r3, #2
 8007cda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007ce4:	230b      	movs	r3, #11
 8007ce6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cec:	4619      	mov	r1, r3
 8007cee:	480c      	ldr	r0, [pc, #48]	; (8007d20 <HAL_ETH_MspInit+0x17c>)
 8007cf0:	f7fc fd98 	bl	8004824 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	203d      	movs	r0, #61	; 0x3d
 8007cfa:	f7fb fb3e 	bl	800337a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007cfe:	203d      	movs	r0, #61	; 0x3d
 8007d00:	f7fb fb57 	bl	80033b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007d04:	bf00      	nop
 8007d06:	3738      	adds	r7, #56	; 0x38
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	40028000 	.word	0x40028000
 8007d10:	40023800 	.word	0x40023800
 8007d14:	40020800 	.word	0x40020800
 8007d18:	40020000 	.word	0x40020000
 8007d1c:	40020400 	.word	0x40020400
 8007d20:	40021800 	.word	0x40021800

08007d24 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8007d28:	4802      	ldr	r0, [pc, #8]	; (8007d34 <ETH_PHY_IO_Init+0x10>)
 8007d2a:	f7fc f921 	bl	8003f70 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	20005668 	.word	0x20005668

08007d38 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	af00      	add	r7, sp, #0
  return 0;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	68f9      	ldr	r1, [r7, #12]
 8007d5a:	4807      	ldr	r0, [pc, #28]	; (8007d78 <ETH_PHY_IO_ReadReg+0x30>)
 8007d5c:	f7fb ff70 	bl	8003c40 <HAL_ETH_ReadPHYRegister>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d002      	beq.n	8007d6c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8007d66:	f04f 33ff 	mov.w	r3, #4294967295
 8007d6a:	e000      	b.n	8007d6e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	20005668 	.word	0x20005668

08007d7c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	68f9      	ldr	r1, [r7, #12]
 8007d8e:	4807      	ldr	r0, [pc, #28]	; (8007dac <ETH_PHY_IO_WriteReg+0x30>)
 8007d90:	f7fb ffa1 	bl	8003cd6 <HAL_ETH_WritePHYRegister>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d002      	beq.n	8007da0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8007d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d9e:	e000      	b.n	8007da2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	20005668 	.word	0x20005668

08007db0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007db4:	f7fa fda8 	bl	8002908 <HAL_GetTick>
 8007db8:	4603      	mov	r3, r0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	bd80      	pop	{r7, pc}
	...

08007dc0 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b0a0      	sub	sp, #128	; 0x80
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8007dc8:	f107 030c 	add.w	r3, r7, #12
 8007dcc:	2264      	movs	r2, #100	; 0x64
 8007dce:	2100      	movs	r1, #0
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f00c f835 	bl	8013e40 <memset>
  int32_t PHYLinkState = 0;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007dde:	2300      	movs	r3, #0
 8007de0:	67bb      	str	r3, [r7, #120]	; 0x78
 8007de2:	2300      	movs	r3, #0
 8007de4:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007de6:	483a      	ldr	r0, [pc, #232]	; (8007ed0 <ethernet_link_check_state+0x110>)
 8007de8:	f7fa fcad 	bl	8002746 <LAN8742_GetLinkState>
 8007dec:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007df4:	089b      	lsrs	r3, r3, #2
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00c      	beq.n	8007e1a <ethernet_link_check_state+0x5a>
 8007e00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	dc09      	bgt.n	8007e1a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8007e06:	4833      	ldr	r0, [pc, #204]	; (8007ed4 <ethernet_link_check_state+0x114>)
 8007e08:	f7fb fc01 	bl	800360e <HAL_ETH_Stop>
    netif_set_down(netif);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f001 f825 	bl	8008e5c <netif_set_down>
    netif_set_link_down(netif);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f001 f88c 	bl	8008f30 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8007e18:	e055      	b.n	8007ec6 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007e20:	f003 0304 	and.w	r3, r3, #4
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d14e      	bne.n	8007ec6 <ethernet_link_check_state+0x106>
 8007e28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	dd4b      	ble.n	8007ec6 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8007e2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e30:	3b02      	subs	r3, #2
 8007e32:	2b03      	cmp	r3, #3
 8007e34:	d82a      	bhi.n	8007e8c <ethernet_link_check_state+0xcc>
 8007e36:	a201      	add	r2, pc, #4	; (adr r2, 8007e3c <ethernet_link_check_state+0x7c>)
 8007e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e3c:	08007e4d 	.word	0x08007e4d
 8007e40:	08007e5f 	.word	0x08007e5f
 8007e44:	08007e6f 	.word	0x08007e6f
 8007e48:	08007e7f 	.word	0x08007e7f
      duplex = ETH_FULLDUPLEX_MODE;
 8007e4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e50:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007e52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007e56:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007e5c:	e017      	b.n	8007e8e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007e62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007e66:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007e6c:	e00f      	b.n	8007e8e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8007e6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e72:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007e74:	2300      	movs	r3, #0
 8007e76:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007e7c:	e007      	b.n	8007e8e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007e82:	2300      	movs	r3, #0
 8007e84:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007e86:	2301      	movs	r3, #1
 8007e88:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007e8a:	e000      	b.n	8007e8e <ethernet_link_check_state+0xce>
      break;
 8007e8c:	bf00      	nop
    if(linkchanged)
 8007e8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d018      	beq.n	8007ec6 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007e94:	f107 030c 	add.w	r3, r7, #12
 8007e98:	4619      	mov	r1, r3
 8007e9a:	480e      	ldr	r0, [pc, #56]	; (8007ed4 <ethernet_link_check_state+0x114>)
 8007e9c:	f7fb ff64 	bl	8003d68 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8007ea0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ea2:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8007ea4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ea6:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007ea8:	f107 030c 	add.w	r3, r7, #12
 8007eac:	4619      	mov	r1, r3
 8007eae:	4809      	ldr	r0, [pc, #36]	; (8007ed4 <ethernet_link_check_state+0x114>)
 8007eb0:	f7fc f844 	bl	8003f3c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8007eb4:	4807      	ldr	r0, [pc, #28]	; (8007ed4 <ethernet_link_check_state+0x114>)
 8007eb6:	f7fb fb4b 	bl	8003550 <HAL_ETH_Start>
      netif_set_up(netif);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 ff62 	bl	8008d84 <netif_set_up>
      netif_set_link_up(netif);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 fffd 	bl	8008ec0 <netif_set_link_up>
}
 8007ec6:	bf00      	nop
 8007ec8:	3780      	adds	r7, #128	; 0x80
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20005750 	.word	0x20005750
 8007ed4:	20005668 	.word	0x20005668

08007ed8 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b086      	sub	sp, #24
 8007edc:	af02      	add	r7, sp, #8
 8007ede:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007ee0:	4812      	ldr	r0, [pc, #72]	; (8007f2c <HAL_ETH_RxAllocateCallback+0x54>)
 8007ee2:	f000 fcc1 	bl	8008868 <memp_malloc_pool>
 8007ee6:	60f8      	str	r0, [r7, #12]
  if (p)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d014      	beq.n	8007f18 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f103 0220 	add.w	r2, r3, #32
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	4a0d      	ldr	r2, [pc, #52]	; (8007f30 <HAL_ETH_RxAllocateCallback+0x58>)
 8007efc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007f06:	9201      	str	r2, [sp, #4]
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2241      	movs	r2, #65	; 0x41
 8007f0e:	2100      	movs	r1, #0
 8007f10:	2000      	movs	r0, #0
 8007f12:	f001 fa03 	bl	800931c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8007f16:	e005      	b.n	8007f24 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007f18:	4b06      	ldr	r3, [pc, #24]	; (8007f34 <HAL_ETH_RxAllocateCallback+0x5c>)
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	601a      	str	r2, [r3, #0]
}
 8007f24:	bf00      	nop
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	0801a6b8 	.word	0x0801a6b8
 8007f30:	08007b61 	.word	0x08007b61
 8007f34:	20005664 	.word	0x20005664

08007f38 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b088      	sub	sp, #32
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
 8007f44:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	3b20      	subs	r3, #32
 8007f56:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	2200      	movs	r2, #0
 8007f62:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	887a      	ldrh	r2, [r7, #2]
 8007f68:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d103      	bne.n	8007f7a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	69fa      	ldr	r2, [r7, #28]
 8007f76:	601a      	str	r2, [r3, #0]
 8007f78:	e003      	b.n	8007f82 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	69fa      	ldr	r2, [r7, #28]
 8007f80:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	69fa      	ldr	r2, [r7, #28]
 8007f86:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	61fb      	str	r3, [r7, #28]
 8007f8e:	e009      	b.n	8007fa4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	891a      	ldrh	r2, [r3, #8]
 8007f94:	887b      	ldrh	r3, [r7, #2]
 8007f96:	4413      	add	r3, r2
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	61fb      	str	r3, [r7, #28]
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1f2      	bne.n	8007f90 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8007faa:	887b      	ldrh	r3, [r7, #2]
 8007fac:	4619      	mov	r1, r3
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f7ff fc28 	bl	8007804 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007fb4:	bf00      	nop
 8007fb6:	3720      	adds	r7, #32
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007fc6:	88fb      	ldrh	r3, [r7, #6]
 8007fc8:	021b      	lsls	r3, r3, #8
 8007fca:	b21a      	sxth	r2, r3
 8007fcc:	88fb      	ldrh	r3, [r7, #6]
 8007fce:	0a1b      	lsrs	r3, r3, #8
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	b21b      	sxth	r3, r3
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	b21b      	sxth	r3, r3
 8007fd8:	b29b      	uxth	r3, r3
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	370c      	adds	r7, #12
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b083      	sub	sp, #12
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	061a      	lsls	r2, r3, #24
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	021b      	lsls	r3, r3, #8
 8007ff6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ffa:	431a      	orrs	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	0a1b      	lsrs	r3, r3, #8
 8008000:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008004:	431a      	orrs	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	0e1b      	lsrs	r3, r3, #24
 800800a:	4313      	orrs	r3, r2
}
 800800c:	4618      	mov	r0, r3
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800801e:	2300      	movs	r3, #0
 8008020:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8008022:	f000 f8d5 	bl	80081d0 <mem_init>
  memp_init();
 8008026:	f000 fbdb 	bl	80087e0 <memp_init>
  pbuf_init();
  netif_init();
 800802a:	f000 fcd9 	bl	80089e0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800802e:	f007 f873 	bl	800f118 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008032:	f001 fdcb 	bl	8009bcc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8008036:	f006 ffe5 	bl	800f004 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800803a:	bf00      	nop
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
	...

08008044 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	4603      	mov	r3, r0
 800804c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800804e:	4b05      	ldr	r3, [pc, #20]	; (8008064 <ptr_to_mem+0x20>)
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	88fb      	ldrh	r3, [r7, #6]
 8008054:	4413      	add	r3, r2
}
 8008056:	4618      	mov	r0, r3
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	20007f9c 	.word	0x20007f9c

08008068 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8008070:	4b05      	ldr	r3, [pc, #20]	; (8008088 <mem_to_ptr+0x20>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	b29b      	uxth	r3, r3
}
 800807a:	4618      	mov	r0, r3
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	20007f9c 	.word	0x20007f9c

0800808c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800808c:	b590      	push	{r4, r7, lr}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008094:	4b45      	ldr	r3, [pc, #276]	; (80081ac <plug_holes+0x120>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	429a      	cmp	r2, r3
 800809c:	d206      	bcs.n	80080ac <plug_holes+0x20>
 800809e:	4b44      	ldr	r3, [pc, #272]	; (80081b0 <plug_holes+0x124>)
 80080a0:	f240 12df 	movw	r2, #479	; 0x1df
 80080a4:	4943      	ldr	r1, [pc, #268]	; (80081b4 <plug_holes+0x128>)
 80080a6:	4844      	ldr	r0, [pc, #272]	; (80081b8 <plug_holes+0x12c>)
 80080a8:	f00b fed2 	bl	8013e50 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80080ac:	4b43      	ldr	r3, [pc, #268]	; (80081bc <plug_holes+0x130>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d306      	bcc.n	80080c4 <plug_holes+0x38>
 80080b6:	4b3e      	ldr	r3, [pc, #248]	; (80081b0 <plug_holes+0x124>)
 80080b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80080bc:	4940      	ldr	r1, [pc, #256]	; (80081c0 <plug_holes+0x134>)
 80080be:	483e      	ldr	r0, [pc, #248]	; (80081b8 <plug_holes+0x12c>)
 80080c0:	f00b fec6 	bl	8013e50 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	791b      	ldrb	r3, [r3, #4]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d006      	beq.n	80080da <plug_holes+0x4e>
 80080cc:	4b38      	ldr	r3, [pc, #224]	; (80081b0 <plug_holes+0x124>)
 80080ce:	f240 12e1 	movw	r2, #481	; 0x1e1
 80080d2:	493c      	ldr	r1, [pc, #240]	; (80081c4 <plug_holes+0x138>)
 80080d4:	4838      	ldr	r0, [pc, #224]	; (80081b8 <plug_holes+0x12c>)
 80080d6:	f00b febb 	bl	8013e50 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	881b      	ldrh	r3, [r3, #0]
 80080de:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80080e2:	d906      	bls.n	80080f2 <plug_holes+0x66>
 80080e4:	4b32      	ldr	r3, [pc, #200]	; (80081b0 <plug_holes+0x124>)
 80080e6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80080ea:	4937      	ldr	r1, [pc, #220]	; (80081c8 <plug_holes+0x13c>)
 80080ec:	4832      	ldr	r0, [pc, #200]	; (80081b8 <plug_holes+0x12c>)
 80080ee:	f00b feaf 	bl	8013e50 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	881b      	ldrh	r3, [r3, #0]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff ffa4 	bl	8008044 <ptr_to_mem>
 80080fc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	429a      	cmp	r2, r3
 8008104:	d024      	beq.n	8008150 <plug_holes+0xc4>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	791b      	ldrb	r3, [r3, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d120      	bne.n	8008150 <plug_holes+0xc4>
 800810e:	4b2b      	ldr	r3, [pc, #172]	; (80081bc <plug_holes+0x130>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	429a      	cmp	r2, r3
 8008116:	d01b      	beq.n	8008150 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008118:	4b2c      	ldr	r3, [pc, #176]	; (80081cc <plug_holes+0x140>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	429a      	cmp	r2, r3
 8008120:	d102      	bne.n	8008128 <plug_holes+0x9c>
      lfree = mem;
 8008122:	4a2a      	ldr	r2, [pc, #168]	; (80081cc <plug_holes+0x140>)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	881a      	ldrh	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	881b      	ldrh	r3, [r3, #0]
 8008134:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008138:	d00a      	beq.n	8008150 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	881b      	ldrh	r3, [r3, #0]
 800813e:	4618      	mov	r0, r3
 8008140:	f7ff ff80 	bl	8008044 <ptr_to_mem>
 8008144:	4604      	mov	r4, r0
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7ff ff8e 	bl	8008068 <mem_to_ptr>
 800814c:	4603      	mov	r3, r0
 800814e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	885b      	ldrh	r3, [r3, #2]
 8008154:	4618      	mov	r0, r3
 8008156:	f7ff ff75 	bl	8008044 <ptr_to_mem>
 800815a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	429a      	cmp	r2, r3
 8008162:	d01f      	beq.n	80081a4 <plug_holes+0x118>
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	791b      	ldrb	r3, [r3, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d11b      	bne.n	80081a4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800816c:	4b17      	ldr	r3, [pc, #92]	; (80081cc <plug_holes+0x140>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	429a      	cmp	r2, r3
 8008174:	d102      	bne.n	800817c <plug_holes+0xf0>
      lfree = pmem;
 8008176:	4a15      	ldr	r2, [pc, #84]	; (80081cc <plug_holes+0x140>)
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	881a      	ldrh	r2, [r3, #0]
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	881b      	ldrh	r3, [r3, #0]
 8008188:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800818c:	d00a      	beq.n	80081a4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	881b      	ldrh	r3, [r3, #0]
 8008192:	4618      	mov	r0, r3
 8008194:	f7ff ff56 	bl	8008044 <ptr_to_mem>
 8008198:	4604      	mov	r4, r0
 800819a:	68b8      	ldr	r0, [r7, #8]
 800819c:	f7ff ff64 	bl	8008068 <mem_to_ptr>
 80081a0:	4603      	mov	r3, r0
 80081a2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80081a4:	bf00      	nop
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd90      	pop	{r4, r7, pc}
 80081ac:	20007f9c 	.word	0x20007f9c
 80081b0:	0801544c 	.word	0x0801544c
 80081b4:	0801547c 	.word	0x0801547c
 80081b8:	08015494 	.word	0x08015494
 80081bc:	20007fa0 	.word	0x20007fa0
 80081c0:	080154bc 	.word	0x080154bc
 80081c4:	080154d8 	.word	0x080154d8
 80081c8:	080154f4 	.word	0x080154f4
 80081cc:	20007fa4 	.word	0x20007fa4

080081d0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80081d6:	4b18      	ldr	r3, [pc, #96]	; (8008238 <mem_init+0x68>)
 80081d8:	3303      	adds	r3, #3
 80081da:	f023 0303 	bic.w	r3, r3, #3
 80081de:	461a      	mov	r2, r3
 80081e0:	4b16      	ldr	r3, [pc, #88]	; (800823c <mem_init+0x6c>)
 80081e2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80081e4:	4b15      	ldr	r3, [pc, #84]	; (800823c <mem_init+0x6c>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80081f0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80081fe:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8008202:	f7ff ff1f 	bl	8008044 <ptr_to_mem>
 8008206:	4603      	mov	r3, r0
 8008208:	4a0d      	ldr	r2, [pc, #52]	; (8008240 <mem_init+0x70>)
 800820a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800820c:	4b0c      	ldr	r3, [pc, #48]	; (8008240 <mem_init+0x70>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2201      	movs	r2, #1
 8008212:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008214:	4b0a      	ldr	r3, [pc, #40]	; (8008240 <mem_init+0x70>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800821c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800821e:	4b08      	ldr	r3, [pc, #32]	; (8008240 <mem_init+0x70>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8008226:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008228:	4b04      	ldr	r3, [pc, #16]	; (800823c <mem_init+0x6c>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a05      	ldr	r2, [pc, #20]	; (8008244 <mem_init+0x74>)
 800822e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8008230:	bf00      	nop
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	20005788 	.word	0x20005788
 800823c:	20007f9c 	.word	0x20007f9c
 8008240:	20007fa0 	.word	0x20007fa0
 8008244:	20007fa4 	.word	0x20007fa4

08008248 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b086      	sub	sp, #24
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f7ff ff09 	bl	8008068 <mem_to_ptr>
 8008256:	4603      	mov	r3, r0
 8008258:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	881b      	ldrh	r3, [r3, #0]
 800825e:	4618      	mov	r0, r3
 8008260:	f7ff fef0 	bl	8008044 <ptr_to_mem>
 8008264:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	885b      	ldrh	r3, [r3, #2]
 800826a:	4618      	mov	r0, r3
 800826c:	f7ff feea 	bl	8008044 <ptr_to_mem>
 8008270:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	881b      	ldrh	r3, [r3, #0]
 8008276:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800827a:	d818      	bhi.n	80082ae <mem_link_valid+0x66>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	885b      	ldrh	r3, [r3, #2]
 8008280:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008284:	d813      	bhi.n	80082ae <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800828a:	8afa      	ldrh	r2, [r7, #22]
 800828c:	429a      	cmp	r2, r3
 800828e:	d004      	beq.n	800829a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	881b      	ldrh	r3, [r3, #0]
 8008294:	8afa      	ldrh	r2, [r7, #22]
 8008296:	429a      	cmp	r2, r3
 8008298:	d109      	bne.n	80082ae <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800829a:	4b08      	ldr	r3, [pc, #32]	; (80082bc <mem_link_valid+0x74>)
 800829c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d006      	beq.n	80082b2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	885b      	ldrh	r3, [r3, #2]
 80082a8:	8afa      	ldrh	r2, [r7, #22]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d001      	beq.n	80082b2 <mem_link_valid+0x6a>
    return 0;
 80082ae:	2300      	movs	r3, #0
 80082b0:	e000      	b.n	80082b4 <mem_link_valid+0x6c>
  }
  return 1;
 80082b2:	2301      	movs	r3, #1
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3718      	adds	r7, #24
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	20007fa0 	.word	0x20007fa0

080082c0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d04c      	beq.n	8008368 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f003 0303 	and.w	r3, r3, #3
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d007      	beq.n	80082e8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80082d8:	4b25      	ldr	r3, [pc, #148]	; (8008370 <mem_free+0xb0>)
 80082da:	f240 2273 	movw	r2, #627	; 0x273
 80082de:	4925      	ldr	r1, [pc, #148]	; (8008374 <mem_free+0xb4>)
 80082e0:	4825      	ldr	r0, [pc, #148]	; (8008378 <mem_free+0xb8>)
 80082e2:	f00b fdb5 	bl	8013e50 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80082e6:	e040      	b.n	800836a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	3b08      	subs	r3, #8
 80082ec:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80082ee:	4b23      	ldr	r3, [pc, #140]	; (800837c <mem_free+0xbc>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d306      	bcc.n	8008306 <mem_free+0x46>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f103 020c 	add.w	r2, r3, #12
 80082fe:	4b20      	ldr	r3, [pc, #128]	; (8008380 <mem_free+0xc0>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	429a      	cmp	r2, r3
 8008304:	d907      	bls.n	8008316 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008306:	4b1a      	ldr	r3, [pc, #104]	; (8008370 <mem_free+0xb0>)
 8008308:	f240 227f 	movw	r2, #639	; 0x27f
 800830c:	491d      	ldr	r1, [pc, #116]	; (8008384 <mem_free+0xc4>)
 800830e:	481a      	ldr	r0, [pc, #104]	; (8008378 <mem_free+0xb8>)
 8008310:	f00b fd9e 	bl	8013e50 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008314:	e029      	b.n	800836a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	791b      	ldrb	r3, [r3, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d107      	bne.n	800832e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800831e:	4b14      	ldr	r3, [pc, #80]	; (8008370 <mem_free+0xb0>)
 8008320:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8008324:	4918      	ldr	r1, [pc, #96]	; (8008388 <mem_free+0xc8>)
 8008326:	4814      	ldr	r0, [pc, #80]	; (8008378 <mem_free+0xb8>)
 8008328:	f00b fd92 	bl	8013e50 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800832c:	e01d      	b.n	800836a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f7ff ff8a 	bl	8008248 <mem_link_valid>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d107      	bne.n	800834a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800833a:	4b0d      	ldr	r3, [pc, #52]	; (8008370 <mem_free+0xb0>)
 800833c:	f240 2295 	movw	r2, #661	; 0x295
 8008340:	4912      	ldr	r1, [pc, #72]	; (800838c <mem_free+0xcc>)
 8008342:	480d      	ldr	r0, [pc, #52]	; (8008378 <mem_free+0xb8>)
 8008344:	f00b fd84 	bl	8013e50 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008348:	e00f      	b.n	800836a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2200      	movs	r2, #0
 800834e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008350:	4b0f      	ldr	r3, [pc, #60]	; (8008390 <mem_free+0xd0>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	429a      	cmp	r2, r3
 8008358:	d202      	bcs.n	8008360 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800835a:	4a0d      	ldr	r2, [pc, #52]	; (8008390 <mem_free+0xd0>)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f7ff fe93 	bl	800808c <plug_holes>
 8008366:	e000      	b.n	800836a <mem_free+0xaa>
    return;
 8008368:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	0801544c 	.word	0x0801544c
 8008374:	08015520 	.word	0x08015520
 8008378:	08015494 	.word	0x08015494
 800837c:	20007f9c 	.word	0x20007f9c
 8008380:	20007fa0 	.word	0x20007fa0
 8008384:	08015544 	.word	0x08015544
 8008388:	08015560 	.word	0x08015560
 800838c:	08015588 	.word	0x08015588
 8008390:	20007fa4 	.word	0x20007fa4

08008394 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b088      	sub	sp, #32
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	460b      	mov	r3, r1
 800839e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80083a0:	887b      	ldrh	r3, [r7, #2]
 80083a2:	3303      	adds	r3, #3
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	f023 0303 	bic.w	r3, r3, #3
 80083aa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80083ac:	8bfb      	ldrh	r3, [r7, #30]
 80083ae:	2b0b      	cmp	r3, #11
 80083b0:	d801      	bhi.n	80083b6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80083b2:	230c      	movs	r3, #12
 80083b4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80083b6:	8bfb      	ldrh	r3, [r7, #30]
 80083b8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80083bc:	d803      	bhi.n	80083c6 <mem_trim+0x32>
 80083be:	8bfa      	ldrh	r2, [r7, #30]
 80083c0:	887b      	ldrh	r3, [r7, #2]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d201      	bcs.n	80083ca <mem_trim+0x36>
    return NULL;
 80083c6:	2300      	movs	r3, #0
 80083c8:	e0cc      	b.n	8008564 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80083ca:	4b68      	ldr	r3, [pc, #416]	; (800856c <mem_trim+0x1d8>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d304      	bcc.n	80083de <mem_trim+0x4a>
 80083d4:	4b66      	ldr	r3, [pc, #408]	; (8008570 <mem_trim+0x1dc>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d306      	bcc.n	80083ec <mem_trim+0x58>
 80083de:	4b65      	ldr	r3, [pc, #404]	; (8008574 <mem_trim+0x1e0>)
 80083e0:	f240 22d1 	movw	r2, #721	; 0x2d1
 80083e4:	4964      	ldr	r1, [pc, #400]	; (8008578 <mem_trim+0x1e4>)
 80083e6:	4865      	ldr	r0, [pc, #404]	; (800857c <mem_trim+0x1e8>)
 80083e8:	f00b fd32 	bl	8013e50 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80083ec:	4b5f      	ldr	r3, [pc, #380]	; (800856c <mem_trim+0x1d8>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d304      	bcc.n	8008400 <mem_trim+0x6c>
 80083f6:	4b5e      	ldr	r3, [pc, #376]	; (8008570 <mem_trim+0x1dc>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d301      	bcc.n	8008404 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	e0af      	b.n	8008564 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	3b08      	subs	r3, #8
 8008408:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800840a:	69b8      	ldr	r0, [r7, #24]
 800840c:	f7ff fe2c 	bl	8008068 <mem_to_ptr>
 8008410:	4603      	mov	r3, r0
 8008412:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	881a      	ldrh	r2, [r3, #0]
 8008418:	8afb      	ldrh	r3, [r7, #22]
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	b29b      	uxth	r3, r3
 800841e:	3b08      	subs	r3, #8
 8008420:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008422:	8bfa      	ldrh	r2, [r7, #30]
 8008424:	8abb      	ldrh	r3, [r7, #20]
 8008426:	429a      	cmp	r2, r3
 8008428:	d906      	bls.n	8008438 <mem_trim+0xa4>
 800842a:	4b52      	ldr	r3, [pc, #328]	; (8008574 <mem_trim+0x1e0>)
 800842c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8008430:	4953      	ldr	r1, [pc, #332]	; (8008580 <mem_trim+0x1ec>)
 8008432:	4852      	ldr	r0, [pc, #328]	; (800857c <mem_trim+0x1e8>)
 8008434:	f00b fd0c 	bl	8013e50 <iprintf>
  if (newsize > size) {
 8008438:	8bfa      	ldrh	r2, [r7, #30]
 800843a:	8abb      	ldrh	r3, [r7, #20]
 800843c:	429a      	cmp	r2, r3
 800843e:	d901      	bls.n	8008444 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8008440:	2300      	movs	r3, #0
 8008442:	e08f      	b.n	8008564 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8008444:	8bfa      	ldrh	r2, [r7, #30]
 8008446:	8abb      	ldrh	r3, [r7, #20]
 8008448:	429a      	cmp	r2, r3
 800844a:	d101      	bne.n	8008450 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	e089      	b.n	8008564 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	881b      	ldrh	r3, [r3, #0]
 8008454:	4618      	mov	r0, r3
 8008456:	f7ff fdf5 	bl	8008044 <ptr_to_mem>
 800845a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	791b      	ldrb	r3, [r3, #4]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d13f      	bne.n	80084e4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	881b      	ldrh	r3, [r3, #0]
 8008468:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800846c:	d106      	bne.n	800847c <mem_trim+0xe8>
 800846e:	4b41      	ldr	r3, [pc, #260]	; (8008574 <mem_trim+0x1e0>)
 8008470:	f240 22f5 	movw	r2, #757	; 0x2f5
 8008474:	4943      	ldr	r1, [pc, #268]	; (8008584 <mem_trim+0x1f0>)
 8008476:	4841      	ldr	r0, [pc, #260]	; (800857c <mem_trim+0x1e8>)
 8008478:	f00b fcea 	bl	8013e50 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	881b      	ldrh	r3, [r3, #0]
 8008480:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008482:	8afa      	ldrh	r2, [r7, #22]
 8008484:	8bfb      	ldrh	r3, [r7, #30]
 8008486:	4413      	add	r3, r2
 8008488:	b29b      	uxth	r3, r3
 800848a:	3308      	adds	r3, #8
 800848c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800848e:	4b3e      	ldr	r3, [pc, #248]	; (8008588 <mem_trim+0x1f4>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	429a      	cmp	r2, r3
 8008496:	d106      	bne.n	80084a6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8008498:	89fb      	ldrh	r3, [r7, #14]
 800849a:	4618      	mov	r0, r3
 800849c:	f7ff fdd2 	bl	8008044 <ptr_to_mem>
 80084a0:	4603      	mov	r3, r0
 80084a2:	4a39      	ldr	r2, [pc, #228]	; (8008588 <mem_trim+0x1f4>)
 80084a4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80084a6:	89fb      	ldrh	r3, [r7, #14]
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7ff fdcb 	bl	8008044 <ptr_to_mem>
 80084ae:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	2200      	movs	r2, #0
 80084b4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	89ba      	ldrh	r2, [r7, #12]
 80084ba:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	8afa      	ldrh	r2, [r7, #22]
 80084c0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	89fa      	ldrh	r2, [r7, #14]
 80084c6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80084d0:	d047      	beq.n	8008562 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	881b      	ldrh	r3, [r3, #0]
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7ff fdb4 	bl	8008044 <ptr_to_mem>
 80084dc:	4602      	mov	r2, r0
 80084de:	89fb      	ldrh	r3, [r7, #14]
 80084e0:	8053      	strh	r3, [r2, #2]
 80084e2:	e03e      	b.n	8008562 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80084e4:	8bfb      	ldrh	r3, [r7, #30]
 80084e6:	f103 0214 	add.w	r2, r3, #20
 80084ea:	8abb      	ldrh	r3, [r7, #20]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d838      	bhi.n	8008562 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80084f0:	8afa      	ldrh	r2, [r7, #22]
 80084f2:	8bfb      	ldrh	r3, [r7, #30]
 80084f4:	4413      	add	r3, r2
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	3308      	adds	r3, #8
 80084fa:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	881b      	ldrh	r3, [r3, #0]
 8008500:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008504:	d106      	bne.n	8008514 <mem_trim+0x180>
 8008506:	4b1b      	ldr	r3, [pc, #108]	; (8008574 <mem_trim+0x1e0>)
 8008508:	f240 3216 	movw	r2, #790	; 0x316
 800850c:	491d      	ldr	r1, [pc, #116]	; (8008584 <mem_trim+0x1f0>)
 800850e:	481b      	ldr	r0, [pc, #108]	; (800857c <mem_trim+0x1e8>)
 8008510:	f00b fc9e 	bl	8013e50 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008514:	89fb      	ldrh	r3, [r7, #14]
 8008516:	4618      	mov	r0, r3
 8008518:	f7ff fd94 	bl	8008044 <ptr_to_mem>
 800851c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800851e:	4b1a      	ldr	r3, [pc, #104]	; (8008588 <mem_trim+0x1f4>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	693a      	ldr	r2, [r7, #16]
 8008524:	429a      	cmp	r2, r3
 8008526:	d202      	bcs.n	800852e <mem_trim+0x19a>
      lfree = mem2;
 8008528:	4a17      	ldr	r2, [pc, #92]	; (8008588 <mem_trim+0x1f4>)
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	2200      	movs	r2, #0
 8008532:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	881a      	ldrh	r2, [r3, #0]
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	8afa      	ldrh	r2, [r7, #22]
 8008540:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	89fa      	ldrh	r2, [r7, #14]
 8008546:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008550:	d007      	beq.n	8008562 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	881b      	ldrh	r3, [r3, #0]
 8008556:	4618      	mov	r0, r3
 8008558:	f7ff fd74 	bl	8008044 <ptr_to_mem>
 800855c:	4602      	mov	r2, r0
 800855e:	89fb      	ldrh	r3, [r7, #14]
 8008560:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8008562:	687b      	ldr	r3, [r7, #4]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3720      	adds	r7, #32
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	20007f9c 	.word	0x20007f9c
 8008570:	20007fa0 	.word	0x20007fa0
 8008574:	0801544c 	.word	0x0801544c
 8008578:	080155bc 	.word	0x080155bc
 800857c:	08015494 	.word	0x08015494
 8008580:	080155d4 	.word	0x080155d4
 8008584:	080155f4 	.word	0x080155f4
 8008588:	20007fa4 	.word	0x20007fa4

0800858c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b088      	sub	sp, #32
 8008590:	af00      	add	r7, sp, #0
 8008592:	4603      	mov	r3, r0
 8008594:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008596:	88fb      	ldrh	r3, [r7, #6]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d101      	bne.n	80085a0 <mem_malloc+0x14>
    return NULL;
 800859c:	2300      	movs	r3, #0
 800859e:	e0d9      	b.n	8008754 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80085a0:	88fb      	ldrh	r3, [r7, #6]
 80085a2:	3303      	adds	r3, #3
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	f023 0303 	bic.w	r3, r3, #3
 80085aa:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80085ac:	8bbb      	ldrh	r3, [r7, #28]
 80085ae:	2b0b      	cmp	r3, #11
 80085b0:	d801      	bhi.n	80085b6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80085b2:	230c      	movs	r3, #12
 80085b4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80085b6:	8bbb      	ldrh	r3, [r7, #28]
 80085b8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80085bc:	d803      	bhi.n	80085c6 <mem_malloc+0x3a>
 80085be:	8bba      	ldrh	r2, [r7, #28]
 80085c0:	88fb      	ldrh	r3, [r7, #6]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d201      	bcs.n	80085ca <mem_malloc+0x3e>
    return NULL;
 80085c6:	2300      	movs	r3, #0
 80085c8:	e0c4      	b.n	8008754 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80085ca:	4b64      	ldr	r3, [pc, #400]	; (800875c <mem_malloc+0x1d0>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7ff fd4a 	bl	8008068 <mem_to_ptr>
 80085d4:	4603      	mov	r3, r0
 80085d6:	83fb      	strh	r3, [r7, #30]
 80085d8:	e0b4      	b.n	8008744 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80085da:	8bfb      	ldrh	r3, [r7, #30]
 80085dc:	4618      	mov	r0, r3
 80085de:	f7ff fd31 	bl	8008044 <ptr_to_mem>
 80085e2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	791b      	ldrb	r3, [r3, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f040 80a4 	bne.w	8008736 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	881b      	ldrh	r3, [r3, #0]
 80085f2:	461a      	mov	r2, r3
 80085f4:	8bfb      	ldrh	r3, [r7, #30]
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	f1a3 0208 	sub.w	r2, r3, #8
 80085fc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80085fe:	429a      	cmp	r2, r3
 8008600:	f0c0 8099 	bcc.w	8008736 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	881b      	ldrh	r3, [r3, #0]
 8008608:	461a      	mov	r2, r3
 800860a:	8bfb      	ldrh	r3, [r7, #30]
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	f1a3 0208 	sub.w	r2, r3, #8
 8008612:	8bbb      	ldrh	r3, [r7, #28]
 8008614:	3314      	adds	r3, #20
 8008616:	429a      	cmp	r2, r3
 8008618:	d333      	bcc.n	8008682 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800861a:	8bfa      	ldrh	r2, [r7, #30]
 800861c:	8bbb      	ldrh	r3, [r7, #28]
 800861e:	4413      	add	r3, r2
 8008620:	b29b      	uxth	r3, r3
 8008622:	3308      	adds	r3, #8
 8008624:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008626:	8a7b      	ldrh	r3, [r7, #18]
 8008628:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800862c:	d106      	bne.n	800863c <mem_malloc+0xb0>
 800862e:	4b4c      	ldr	r3, [pc, #304]	; (8008760 <mem_malloc+0x1d4>)
 8008630:	f240 3287 	movw	r2, #903	; 0x387
 8008634:	494b      	ldr	r1, [pc, #300]	; (8008764 <mem_malloc+0x1d8>)
 8008636:	484c      	ldr	r0, [pc, #304]	; (8008768 <mem_malloc+0x1dc>)
 8008638:	f00b fc0a 	bl	8013e50 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800863c:	8a7b      	ldrh	r3, [r7, #18]
 800863e:	4618      	mov	r0, r3
 8008640:	f7ff fd00 	bl	8008044 <ptr_to_mem>
 8008644:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2200      	movs	r2, #0
 800864a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	881a      	ldrh	r2, [r3, #0]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	8bfa      	ldrh	r2, [r7, #30]
 8008658:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	8a7a      	ldrh	r2, [r7, #18]
 800865e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	2201      	movs	r2, #1
 8008664:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	881b      	ldrh	r3, [r3, #0]
 800866a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800866e:	d00b      	beq.n	8008688 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	881b      	ldrh	r3, [r3, #0]
 8008674:	4618      	mov	r0, r3
 8008676:	f7ff fce5 	bl	8008044 <ptr_to_mem>
 800867a:	4602      	mov	r2, r0
 800867c:	8a7b      	ldrh	r3, [r7, #18]
 800867e:	8053      	strh	r3, [r2, #2]
 8008680:	e002      	b.n	8008688 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	2201      	movs	r2, #1
 8008686:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008688:	4b34      	ldr	r3, [pc, #208]	; (800875c <mem_malloc+0x1d0>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	697a      	ldr	r2, [r7, #20]
 800868e:	429a      	cmp	r2, r3
 8008690:	d127      	bne.n	80086e2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8008692:	4b32      	ldr	r3, [pc, #200]	; (800875c <mem_malloc+0x1d0>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008698:	e005      	b.n	80086a6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	881b      	ldrh	r3, [r3, #0]
 800869e:	4618      	mov	r0, r3
 80086a0:	f7ff fcd0 	bl	8008044 <ptr_to_mem>
 80086a4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	791b      	ldrb	r3, [r3, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d004      	beq.n	80086b8 <mem_malloc+0x12c>
 80086ae:	4b2f      	ldr	r3, [pc, #188]	; (800876c <mem_malloc+0x1e0>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	69ba      	ldr	r2, [r7, #24]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d1f0      	bne.n	800869a <mem_malloc+0x10e>
          }
          lfree = cur;
 80086b8:	4a28      	ldr	r2, [pc, #160]	; (800875c <mem_malloc+0x1d0>)
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80086be:	4b27      	ldr	r3, [pc, #156]	; (800875c <mem_malloc+0x1d0>)
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	4b2a      	ldr	r3, [pc, #168]	; (800876c <mem_malloc+0x1e0>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d00b      	beq.n	80086e2 <mem_malloc+0x156>
 80086ca:	4b24      	ldr	r3, [pc, #144]	; (800875c <mem_malloc+0x1d0>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	791b      	ldrb	r3, [r3, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d006      	beq.n	80086e2 <mem_malloc+0x156>
 80086d4:	4b22      	ldr	r3, [pc, #136]	; (8008760 <mem_malloc+0x1d4>)
 80086d6:	f240 32b5 	movw	r2, #949	; 0x3b5
 80086da:	4925      	ldr	r1, [pc, #148]	; (8008770 <mem_malloc+0x1e4>)
 80086dc:	4822      	ldr	r0, [pc, #136]	; (8008768 <mem_malloc+0x1dc>)
 80086de:	f00b fbb7 	bl	8013e50 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80086e2:	8bba      	ldrh	r2, [r7, #28]
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	4413      	add	r3, r2
 80086e8:	3308      	adds	r3, #8
 80086ea:	4a20      	ldr	r2, [pc, #128]	; (800876c <mem_malloc+0x1e0>)
 80086ec:	6812      	ldr	r2, [r2, #0]
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d906      	bls.n	8008700 <mem_malloc+0x174>
 80086f2:	4b1b      	ldr	r3, [pc, #108]	; (8008760 <mem_malloc+0x1d4>)
 80086f4:	f240 32b9 	movw	r2, #953	; 0x3b9
 80086f8:	491e      	ldr	r1, [pc, #120]	; (8008774 <mem_malloc+0x1e8>)
 80086fa:	481b      	ldr	r0, [pc, #108]	; (8008768 <mem_malloc+0x1dc>)
 80086fc:	f00b fba8 	bl	8013e50 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	f003 0303 	and.w	r3, r3, #3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d006      	beq.n	8008718 <mem_malloc+0x18c>
 800870a:	4b15      	ldr	r3, [pc, #84]	; (8008760 <mem_malloc+0x1d4>)
 800870c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8008710:	4919      	ldr	r1, [pc, #100]	; (8008778 <mem_malloc+0x1ec>)
 8008712:	4815      	ldr	r0, [pc, #84]	; (8008768 <mem_malloc+0x1dc>)
 8008714:	f00b fb9c 	bl	8013e50 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	f003 0303 	and.w	r3, r3, #3
 800871e:	2b00      	cmp	r3, #0
 8008720:	d006      	beq.n	8008730 <mem_malloc+0x1a4>
 8008722:	4b0f      	ldr	r3, [pc, #60]	; (8008760 <mem_malloc+0x1d4>)
 8008724:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008728:	4914      	ldr	r1, [pc, #80]	; (800877c <mem_malloc+0x1f0>)
 800872a:	480f      	ldr	r0, [pc, #60]	; (8008768 <mem_malloc+0x1dc>)
 800872c:	f00b fb90 	bl	8013e50 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	3308      	adds	r3, #8
 8008734:	e00e      	b.n	8008754 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8008736:	8bfb      	ldrh	r3, [r7, #30]
 8008738:	4618      	mov	r0, r3
 800873a:	f7ff fc83 	bl	8008044 <ptr_to_mem>
 800873e:	4603      	mov	r3, r0
 8008740:	881b      	ldrh	r3, [r3, #0]
 8008742:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008744:	8bfa      	ldrh	r2, [r7, #30]
 8008746:	8bbb      	ldrh	r3, [r7, #28]
 8008748:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800874c:	429a      	cmp	r2, r3
 800874e:	f4ff af44 	bcc.w	80085da <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3720      	adds	r7, #32
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	20007fa4 	.word	0x20007fa4
 8008760:	0801544c 	.word	0x0801544c
 8008764:	080155f4 	.word	0x080155f4
 8008768:	08015494 	.word	0x08015494
 800876c:	20007fa0 	.word	0x20007fa0
 8008770:	08015608 	.word	0x08015608
 8008774:	08015624 	.word	0x08015624
 8008778:	08015654 	.word	0x08015654
 800877c:	08015684 	.word	0x08015684

08008780 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	2200      	movs	r2, #0
 800878e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	3303      	adds	r3, #3
 8008796:	f023 0303 	bic.w	r3, r3, #3
 800879a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800879c:	2300      	movs	r3, #0
 800879e:	60fb      	str	r3, [r7, #12]
 80087a0:	e011      	b.n	80087c6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	68ba      	ldr	r2, [r7, #8]
 80087b2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	881b      	ldrh	r3, [r3, #0]
 80087b8:	461a      	mov	r2, r3
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	4413      	add	r3, r2
 80087be:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	3301      	adds	r3, #1
 80087c4:	60fb      	str	r3, [r7, #12]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	885b      	ldrh	r3, [r3, #2]
 80087ca:	461a      	mov	r2, r3
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	4293      	cmp	r3, r2
 80087d0:	dbe7      	blt.n	80087a2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80087d2:	bf00      	nop
 80087d4:	bf00      	nop
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80087e6:	2300      	movs	r3, #0
 80087e8:	80fb      	strh	r3, [r7, #6]
 80087ea:	e009      	b.n	8008800 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80087ec:	88fb      	ldrh	r3, [r7, #6]
 80087ee:	4a08      	ldr	r2, [pc, #32]	; (8008810 <memp_init+0x30>)
 80087f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7ff ffc3 	bl	8008780 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80087fa:	88fb      	ldrh	r3, [r7, #6]
 80087fc:	3301      	adds	r3, #1
 80087fe:	80fb      	strh	r3, [r7, #6]
 8008800:	88fb      	ldrh	r3, [r7, #6]
 8008802:	2b08      	cmp	r3, #8
 8008804:	d9f2      	bls.n	80087ec <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008806:	bf00      	nop
 8008808:	bf00      	nop
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	0801a730 	.word	0x0801a730

08008814 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d012      	beq.n	8008850 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	6812      	ldr	r2, [r2, #0]
 8008832:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f003 0303 	and.w	r3, r3, #3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d006      	beq.n	800884c <do_memp_malloc_pool+0x38>
 800883e:	4b07      	ldr	r3, [pc, #28]	; (800885c <do_memp_malloc_pool+0x48>)
 8008840:	f44f 728c 	mov.w	r2, #280	; 0x118
 8008844:	4906      	ldr	r1, [pc, #24]	; (8008860 <do_memp_malloc_pool+0x4c>)
 8008846:	4807      	ldr	r0, [pc, #28]	; (8008864 <do_memp_malloc_pool+0x50>)
 8008848:	f00b fb02 	bl	8013e50 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	e000      	b.n	8008852 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	080156a8 	.word	0x080156a8
 8008860:	080156d8 	.word	0x080156d8
 8008864:	080156fc 	.word	0x080156fc

08008868 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d106      	bne.n	8008884 <memp_malloc_pool+0x1c>
 8008876:	4b0a      	ldr	r3, [pc, #40]	; (80088a0 <memp_malloc_pool+0x38>)
 8008878:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800887c:	4909      	ldr	r1, [pc, #36]	; (80088a4 <memp_malloc_pool+0x3c>)
 800887e:	480a      	ldr	r0, [pc, #40]	; (80088a8 <memp_malloc_pool+0x40>)
 8008880:	f00b fae6 	bl	8013e50 <iprintf>
  if (desc == NULL) {
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d101      	bne.n	800888e <memp_malloc_pool+0x26>
    return NULL;
 800888a:	2300      	movs	r3, #0
 800888c:	e003      	b.n	8008896 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f7ff ffc0 	bl	8008814 <do_memp_malloc_pool>
 8008894:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8008896:	4618      	mov	r0, r3
 8008898:	3708      	adds	r7, #8
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	080156a8 	.word	0x080156a8
 80088a4:	08015724 	.word	0x08015724
 80088a8:	080156fc 	.word	0x080156fc

080088ac <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	4603      	mov	r3, r0
 80088b4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80088b6:	79fb      	ldrb	r3, [r7, #7]
 80088b8:	2b08      	cmp	r3, #8
 80088ba:	d908      	bls.n	80088ce <memp_malloc+0x22>
 80088bc:	4b0a      	ldr	r3, [pc, #40]	; (80088e8 <memp_malloc+0x3c>)
 80088be:	f240 1257 	movw	r2, #343	; 0x157
 80088c2:	490a      	ldr	r1, [pc, #40]	; (80088ec <memp_malloc+0x40>)
 80088c4:	480a      	ldr	r0, [pc, #40]	; (80088f0 <memp_malloc+0x44>)
 80088c6:	f00b fac3 	bl	8013e50 <iprintf>
 80088ca:	2300      	movs	r3, #0
 80088cc:	e008      	b.n	80088e0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80088ce:	79fb      	ldrb	r3, [r7, #7]
 80088d0:	4a08      	ldr	r2, [pc, #32]	; (80088f4 <memp_malloc+0x48>)
 80088d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7ff ff9c 	bl	8008814 <do_memp_malloc_pool>
 80088dc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80088de:	68fb      	ldr	r3, [r7, #12]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	080156a8 	.word	0x080156a8
 80088ec:	08015738 	.word	0x08015738
 80088f0:	080156fc 	.word	0x080156fc
 80088f4:	0801a730 	.word	0x0801a730

080088f8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	f003 0303 	and.w	r3, r3, #3
 8008908:	2b00      	cmp	r3, #0
 800890a:	d006      	beq.n	800891a <do_memp_free_pool+0x22>
 800890c:	4b0a      	ldr	r3, [pc, #40]	; (8008938 <do_memp_free_pool+0x40>)
 800890e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008912:	490a      	ldr	r1, [pc, #40]	; (800893c <do_memp_free_pool+0x44>)
 8008914:	480a      	ldr	r0, [pc, #40]	; (8008940 <do_memp_free_pool+0x48>)
 8008916:	f00b fa9b 	bl	8013e50 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8008930:	bf00      	nop
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	080156a8 	.word	0x080156a8
 800893c:	08015758 	.word	0x08015758
 8008940:	080156fc 	.word	0x080156fc

08008944 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d106      	bne.n	8008962 <memp_free_pool+0x1e>
 8008954:	4b0a      	ldr	r3, [pc, #40]	; (8008980 <memp_free_pool+0x3c>)
 8008956:	f240 1295 	movw	r2, #405	; 0x195
 800895a:	490a      	ldr	r1, [pc, #40]	; (8008984 <memp_free_pool+0x40>)
 800895c:	480a      	ldr	r0, [pc, #40]	; (8008988 <memp_free_pool+0x44>)
 800895e:	f00b fa77 	bl	8013e50 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d007      	beq.n	8008978 <memp_free_pool+0x34>
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d004      	beq.n	8008978 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800896e:	6839      	ldr	r1, [r7, #0]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f7ff ffc1 	bl	80088f8 <do_memp_free_pool>
 8008976:	e000      	b.n	800897a <memp_free_pool+0x36>
    return;
 8008978:	bf00      	nop
}
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	080156a8 	.word	0x080156a8
 8008984:	08015724 	.word	0x08015724
 8008988:	080156fc 	.word	0x080156fc

0800898c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	4603      	mov	r3, r0
 8008994:	6039      	str	r1, [r7, #0]
 8008996:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008998:	79fb      	ldrb	r3, [r7, #7]
 800899a:	2b08      	cmp	r3, #8
 800899c:	d907      	bls.n	80089ae <memp_free+0x22>
 800899e:	4b0c      	ldr	r3, [pc, #48]	; (80089d0 <memp_free+0x44>)
 80089a0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80089a4:	490b      	ldr	r1, [pc, #44]	; (80089d4 <memp_free+0x48>)
 80089a6:	480c      	ldr	r0, [pc, #48]	; (80089d8 <memp_free+0x4c>)
 80089a8:	f00b fa52 	bl	8013e50 <iprintf>
 80089ac:	e00c      	b.n	80089c8 <memp_free+0x3c>

  if (mem == NULL) {
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d008      	beq.n	80089c6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80089b4:	79fb      	ldrb	r3, [r7, #7]
 80089b6:	4a09      	ldr	r2, [pc, #36]	; (80089dc <memp_free+0x50>)
 80089b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089bc:	6839      	ldr	r1, [r7, #0]
 80089be:	4618      	mov	r0, r3
 80089c0:	f7ff ff9a 	bl	80088f8 <do_memp_free_pool>
 80089c4:	e000      	b.n	80089c8 <memp_free+0x3c>
    return;
 80089c6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80089c8:	3708      	adds	r7, #8
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	080156a8 	.word	0x080156a8
 80089d4:	08015778 	.word	0x08015778
 80089d8:	080156fc 	.word	0x080156fc
 80089dc:	0801a730 	.word	0x0801a730

080089e0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80089e0:	b480      	push	{r7}
 80089e2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80089e4:	bf00      	nop
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
	...

080089f0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b086      	sub	sp, #24
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
 80089fc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d108      	bne.n	8008a16 <netif_add+0x26>
 8008a04:	4b5b      	ldr	r3, [pc, #364]	; (8008b74 <netif_add+0x184>)
 8008a06:	f240 1227 	movw	r2, #295	; 0x127
 8008a0a:	495b      	ldr	r1, [pc, #364]	; (8008b78 <netif_add+0x188>)
 8008a0c:	485b      	ldr	r0, [pc, #364]	; (8008b7c <netif_add+0x18c>)
 8008a0e:	f00b fa1f 	bl	8013e50 <iprintf>
 8008a12:	2300      	movs	r3, #0
 8008a14:	e0a9      	b.n	8008b6a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d108      	bne.n	8008a2e <netif_add+0x3e>
 8008a1c:	4b55      	ldr	r3, [pc, #340]	; (8008b74 <netif_add+0x184>)
 8008a1e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8008a22:	4957      	ldr	r1, [pc, #348]	; (8008b80 <netif_add+0x190>)
 8008a24:	4855      	ldr	r0, [pc, #340]	; (8008b7c <netif_add+0x18c>)
 8008a26:	f00b fa13 	bl	8013e50 <iprintf>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	e09d      	b.n	8008b6a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d101      	bne.n	8008a38 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008a34:	4b53      	ldr	r3, [pc, #332]	; (8008b84 <netif_add+0x194>)
 8008a36:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d101      	bne.n	8008a42 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8008a3e:	4b51      	ldr	r3, [pc, #324]	; (8008b84 <netif_add+0x194>)
 8008a40:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008a48:	4b4e      	ldr	r3, [pc, #312]	; (8008b84 <netif_add+0x194>)
 8008a4a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	4a49      	ldr	r2, [pc, #292]	; (8008b88 <netif_add+0x198>)
 8008a62:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2200      	movs	r2, #0
 8008a68:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	3324      	adds	r3, #36	; 0x24
 8008a76:	2204      	movs	r2, #4
 8008a78:	2100      	movs	r1, #0
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f00b f9e0 	bl	8013e40 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2200      	movs	r2, #0
 8008a84:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6a3a      	ldr	r2, [r7, #32]
 8008a8a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8008a8c:	4b3f      	ldr	r3, [pc, #252]	; (8008b8c <netif_add+0x19c>)
 8008a8e:	781a      	ldrb	r2, [r3, #0]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a9a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	68b9      	ldr	r1, [r7, #8]
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f000 f914 	bl	8008cd0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	4798      	blx	r3
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d001      	beq.n	8008ab8 <netif_add+0xc8>
    return NULL;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	e058      	b.n	8008b6a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008abe:	2bff      	cmp	r3, #255	; 0xff
 8008ac0:	d103      	bne.n	8008aca <netif_add+0xda>
        netif->num = 0;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8008aca:	2300      	movs	r3, #0
 8008acc:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008ace:	4b30      	ldr	r3, [pc, #192]	; (8008b90 <netif_add+0x1a0>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	617b      	str	r3, [r7, #20]
 8008ad4:	e02b      	b.n	8008b2e <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008ad6:	697a      	ldr	r2, [r7, #20]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d106      	bne.n	8008aec <netif_add+0xfc>
 8008ade:	4b25      	ldr	r3, [pc, #148]	; (8008b74 <netif_add+0x184>)
 8008ae0:	f240 128b 	movw	r2, #395	; 0x18b
 8008ae4:	492b      	ldr	r1, [pc, #172]	; (8008b94 <netif_add+0x1a4>)
 8008ae6:	4825      	ldr	r0, [pc, #148]	; (8008b7c <netif_add+0x18c>)
 8008ae8:	f00b f9b2 	bl	8013e50 <iprintf>
        num_netifs++;
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	3301      	adds	r3, #1
 8008af0:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	2bff      	cmp	r3, #255	; 0xff
 8008af6:	dd06      	ble.n	8008b06 <netif_add+0x116>
 8008af8:	4b1e      	ldr	r3, [pc, #120]	; (8008b74 <netif_add+0x184>)
 8008afa:	f240 128d 	movw	r2, #397	; 0x18d
 8008afe:	4926      	ldr	r1, [pc, #152]	; (8008b98 <netif_add+0x1a8>)
 8008b00:	481e      	ldr	r0, [pc, #120]	; (8008b7c <netif_add+0x18c>)
 8008b02:	f00b f9a5 	bl	8013e50 <iprintf>
        if (netif2->num == netif->num) {
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d108      	bne.n	8008b28 <netif_add+0x138>
          netif->num++;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	b2da      	uxtb	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8008b26:	e005      	b.n	8008b34 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	617b      	str	r3, [r7, #20]
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1d0      	bne.n	8008ad6 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1be      	bne.n	8008ab8 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b40:	2bfe      	cmp	r3, #254	; 0xfe
 8008b42:	d103      	bne.n	8008b4c <netif_add+0x15c>
    netif_num = 0;
 8008b44:	4b11      	ldr	r3, [pc, #68]	; (8008b8c <netif_add+0x19c>)
 8008b46:	2200      	movs	r2, #0
 8008b48:	701a      	strb	r2, [r3, #0]
 8008b4a:	e006      	b.n	8008b5a <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b52:	3301      	adds	r3, #1
 8008b54:	b2da      	uxtb	r2, r3
 8008b56:	4b0d      	ldr	r3, [pc, #52]	; (8008b8c <netif_add+0x19c>)
 8008b58:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8008b5a:	4b0d      	ldr	r3, [pc, #52]	; (8008b90 <netif_add+0x1a0>)
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008b62:	4a0b      	ldr	r2, [pc, #44]	; (8008b90 <netif_add+0x1a0>)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8008b68:	68fb      	ldr	r3, [r7, #12]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3718      	adds	r7, #24
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	08015794 	.word	0x08015794
 8008b78:	08015828 	.word	0x08015828
 8008b7c:	080157e4 	.word	0x080157e4
 8008b80:	08015844 	.word	0x08015844
 8008b84:	0801a7a4 	.word	0x0801a7a4
 8008b88:	08008fb3 	.word	0x08008fb3
 8008b8c:	2000aebc 	.word	0x2000aebc
 8008b90:	2000aeb4 	.word	0x2000aeb4
 8008b94:	08015868 	.word	0x08015868
 8008b98:	0801587c 	.word	0x0801587c

08008b9c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f002 fb57 	bl	800b25c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008bae:	6839      	ldr	r1, [r7, #0]
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f006 ff3d 	bl	800fa30 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8008bb6:	bf00      	nop
 8008bb8:	3708      	adds	r7, #8
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
	...

08008bc0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d106      	bne.n	8008be0 <netif_do_set_ipaddr+0x20>
 8008bd2:	4b1d      	ldr	r3, [pc, #116]	; (8008c48 <netif_do_set_ipaddr+0x88>)
 8008bd4:	f240 12cb 	movw	r2, #459	; 0x1cb
 8008bd8:	491c      	ldr	r1, [pc, #112]	; (8008c4c <netif_do_set_ipaddr+0x8c>)
 8008bda:	481d      	ldr	r0, [pc, #116]	; (8008c50 <netif_do_set_ipaddr+0x90>)
 8008bdc:	f00b f938 	bl	8013e50 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d106      	bne.n	8008bf4 <netif_do_set_ipaddr+0x34>
 8008be6:	4b18      	ldr	r3, [pc, #96]	; (8008c48 <netif_do_set_ipaddr+0x88>)
 8008be8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8008bec:	4917      	ldr	r1, [pc, #92]	; (8008c4c <netif_do_set_ipaddr+0x8c>)
 8008bee:	4818      	ldr	r0, [pc, #96]	; (8008c50 <netif_do_set_ipaddr+0x90>)
 8008bf0:	f00b f92e 	bl	8013e50 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d01c      	beq.n	8008c3c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	3304      	adds	r3, #4
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8008c12:	f107 0314 	add.w	r3, r7, #20
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f7ff ffbf 	bl	8008b9c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d002      	beq.n	8008c2a <netif_do_set_ipaddr+0x6a>
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	e000      	b.n	8008c2c <netif_do_set_ipaddr+0x6c>
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008c30:	2101      	movs	r1, #1
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f000 f8d2 	bl	8008ddc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e000      	b.n	8008c3e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3718      	adds	r7, #24
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	08015794 	.word	0x08015794
 8008c4c:	080158ac 	.word	0x080158ac
 8008c50:	080157e4 	.word	0x080157e4

08008c54 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	3308      	adds	r3, #8
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d00a      	beq.n	8008c84 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d002      	beq.n	8008c7a <netif_do_set_netmask+0x26>
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	e000      	b.n	8008c7c <netif_do_set_netmask+0x28>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008c80:	2301      	movs	r3, #1
 8008c82:	e000      	b.n	8008c86 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3714      	adds	r7, #20
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr

08008c92 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b085      	sub	sp, #20
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	60f8      	str	r0, [r7, #12]
 8008c9a:	60b9      	str	r1, [r7, #8]
 8008c9c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	330c      	adds	r3, #12
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d00a      	beq.n	8008cc2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d002      	beq.n	8008cb8 <netif_do_set_gw+0x26>
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	e000      	b.n	8008cba <netif_do_set_gw+0x28>
 8008cb8:	2300      	movs	r3, #0
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e000      	b.n	8008cc4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3714      	adds	r7, #20
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b088      	sub	sp, #32
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
 8008cdc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d101      	bne.n	8008cf0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8008cec:	4b1c      	ldr	r3, [pc, #112]	; (8008d60 <netif_set_addr+0x90>)
 8008cee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8008cf6:	4b1a      	ldr	r3, [pc, #104]	; (8008d60 <netif_set_addr+0x90>)
 8008cf8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d101      	bne.n	8008d04 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8008d00:	4b17      	ldr	r3, [pc, #92]	; (8008d60 <netif_set_addr+0x90>)
 8008d02:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d003      	beq.n	8008d12 <netif_set_addr+0x42>
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d101      	bne.n	8008d16 <netif_set_addr+0x46>
 8008d12:	2301      	movs	r3, #1
 8008d14:	e000      	b.n	8008d18 <netif_set_addr+0x48>
 8008d16:	2300      	movs	r3, #0
 8008d18:	617b      	str	r3, [r7, #20]
  if (remove) {
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d006      	beq.n	8008d2e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008d20:	f107 0310 	add.w	r3, r7, #16
 8008d24:	461a      	mov	r2, r3
 8008d26:	68b9      	ldr	r1, [r7, #8]
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f7ff ff49 	bl	8008bc0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8008d2e:	69fa      	ldr	r2, [r7, #28]
 8008d30:	6879      	ldr	r1, [r7, #4]
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f7ff ff8e 	bl	8008c54 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8008d38:	69ba      	ldr	r2, [r7, #24]
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f7ff ffa8 	bl	8008c92 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d106      	bne.n	8008d56 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008d48:	f107 0310 	add.w	r3, r7, #16
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	68b9      	ldr	r1, [r7, #8]
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f7ff ff35 	bl	8008bc0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8008d56:	bf00      	nop
 8008d58:	3720      	adds	r7, #32
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	0801a7a4 	.word	0x0801a7a4

08008d64 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008d6c:	4a04      	ldr	r2, [pc, #16]	; (8008d80 <netif_set_default+0x1c>)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008d72:	bf00      	nop
 8008d74:	370c      	adds	r7, #12
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	2000aeb8 	.word	0x2000aeb8

08008d84 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d107      	bne.n	8008da2 <netif_set_up+0x1e>
 8008d92:	4b0f      	ldr	r3, [pc, #60]	; (8008dd0 <netif_set_up+0x4c>)
 8008d94:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008d98:	490e      	ldr	r1, [pc, #56]	; (8008dd4 <netif_set_up+0x50>)
 8008d9a:	480f      	ldr	r0, [pc, #60]	; (8008dd8 <netif_set_up+0x54>)
 8008d9c:	f00b f858 	bl	8013e50 <iprintf>
 8008da0:	e013      	b.n	8008dca <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008da8:	f003 0301 	and.w	r3, r3, #1
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10c      	bne.n	8008dca <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008db6:	f043 0301 	orr.w	r3, r3, #1
 8008dba:	b2da      	uxtb	r2, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008dc2:	2103      	movs	r1, #3
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 f809 	bl	8008ddc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	08015794 	.word	0x08015794
 8008dd4:	0801591c 	.word	0x0801591c
 8008dd8:	080157e4 	.word	0x080157e4

08008ddc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	460b      	mov	r3, r1
 8008de6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d106      	bne.n	8008dfc <netif_issue_reports+0x20>
 8008dee:	4b18      	ldr	r3, [pc, #96]	; (8008e50 <netif_issue_reports+0x74>)
 8008df0:	f240 326d 	movw	r2, #877	; 0x36d
 8008df4:	4917      	ldr	r1, [pc, #92]	; (8008e54 <netif_issue_reports+0x78>)
 8008df6:	4818      	ldr	r0, [pc, #96]	; (8008e58 <netif_issue_reports+0x7c>)
 8008df8:	f00b f82a 	bl	8013e50 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008e02:	f003 0304 	and.w	r3, r3, #4
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d01e      	beq.n	8008e48 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008e10:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d017      	beq.n	8008e48 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008e18:	78fb      	ldrb	r3, [r7, #3]
 8008e1a:	f003 0301 	and.w	r3, r3, #1
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d013      	beq.n	8008e4a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	3304      	adds	r3, #4
 8008e26:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00e      	beq.n	8008e4a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008e32:	f003 0308 	and.w	r3, r3, #8
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d007      	beq.n	8008e4a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	3304      	adds	r3, #4
 8008e3e:	4619      	mov	r1, r3
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f009 fbf7 	bl	8012634 <etharp_request>
 8008e46:	e000      	b.n	8008e4a <netif_issue_reports+0x6e>
    return;
 8008e48:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	08015794 	.word	0x08015794
 8008e54:	08015938 	.word	0x08015938
 8008e58:	080157e4 	.word	0x080157e4

08008e5c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d107      	bne.n	8008e7a <netif_set_down+0x1e>
 8008e6a:	4b12      	ldr	r3, [pc, #72]	; (8008eb4 <netif_set_down+0x58>)
 8008e6c:	f240 329b 	movw	r2, #923	; 0x39b
 8008e70:	4911      	ldr	r1, [pc, #68]	; (8008eb8 <netif_set_down+0x5c>)
 8008e72:	4812      	ldr	r0, [pc, #72]	; (8008ebc <netif_set_down+0x60>)
 8008e74:	f00a ffec 	bl	8013e50 <iprintf>
 8008e78:	e019      	b.n	8008eae <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008e80:	f003 0301 	and.w	r3, r3, #1
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d012      	beq.n	8008eae <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008e8e:	f023 0301 	bic.w	r3, r3, #1
 8008e92:	b2da      	uxtb	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008ea0:	f003 0308 	and.w	r3, r3, #8
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d002      	beq.n	8008eae <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f008 ff7d 	bl	8011da8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	08015794 	.word	0x08015794
 8008eb8:	0801595c 	.word	0x0801595c
 8008ebc:	080157e4 	.word	0x080157e4

08008ec0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d107      	bne.n	8008ede <netif_set_link_up+0x1e>
 8008ece:	4b15      	ldr	r3, [pc, #84]	; (8008f24 <netif_set_link_up+0x64>)
 8008ed0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8008ed4:	4914      	ldr	r1, [pc, #80]	; (8008f28 <netif_set_link_up+0x68>)
 8008ed6:	4815      	ldr	r0, [pc, #84]	; (8008f2c <netif_set_link_up+0x6c>)
 8008ed8:	f00a ffba 	bl	8013e50 <iprintf>
 8008edc:	e01e      	b.n	8008f1c <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008ee4:	f003 0304 	and.w	r3, r3, #4
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d117      	bne.n	8008f1c <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008ef2:	f043 0304 	orr.w	r3, r3, #4
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f007 f9c2 	bl	8010288 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008f04:	2103      	movs	r1, #3
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f7ff ff68 	bl	8008ddc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	69db      	ldr	r3, [r3, #28]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d003      	beq.n	8008f1c <netif_set_link_up+0x5c>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	69db      	ldr	r3, [r3, #28]
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008f1c:	3708      	adds	r7, #8
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	08015794 	.word	0x08015794
 8008f28:	0801597c 	.word	0x0801597c
 8008f2c:	080157e4 	.word	0x080157e4

08008f30 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d107      	bne.n	8008f4e <netif_set_link_down+0x1e>
 8008f3e:	4b11      	ldr	r3, [pc, #68]	; (8008f84 <netif_set_link_down+0x54>)
 8008f40:	f240 4206 	movw	r2, #1030	; 0x406
 8008f44:	4910      	ldr	r1, [pc, #64]	; (8008f88 <netif_set_link_down+0x58>)
 8008f46:	4811      	ldr	r0, [pc, #68]	; (8008f8c <netif_set_link_down+0x5c>)
 8008f48:	f00a ff82 	bl	8013e50 <iprintf>
 8008f4c:	e017      	b.n	8008f7e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008f54:	f003 0304 	and.w	r3, r3, #4
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d010      	beq.n	8008f7e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008f62:	f023 0304 	bic.w	r3, r3, #4
 8008f66:	b2da      	uxtb	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	69db      	ldr	r3, [r3, #28]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d003      	beq.n	8008f7e <netif_set_link_down+0x4e>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008f7e:	3708      	adds	r7, #8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	08015794 	.word	0x08015794
 8008f88:	080159a0 	.word	0x080159a0
 8008f8c:	080157e4 	.word	0x080157e4

08008f90 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d002      	beq.n	8008fa6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	683a      	ldr	r2, [r7, #0]
 8008fa4:	61da      	str	r2, [r3, #28]
  }
}
 8008fa6:	bf00      	nop
 8008fa8:	370c      	adds	r7, #12
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b085      	sub	sp, #20
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	60f8      	str	r0, [r7, #12]
 8008fba:	60b9      	str	r1, [r7, #8]
 8008fbc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008fbe:	f06f 030b 	mvn.w	r3, #11
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3714      	adds	r7, #20
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr
	...

08008fd0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008fda:	79fb      	ldrb	r3, [r7, #7]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d013      	beq.n	8009008 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008fe0:	4b0d      	ldr	r3, [pc, #52]	; (8009018 <netif_get_by_index+0x48>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	60fb      	str	r3, [r7, #12]
 8008fe6:	e00c      	b.n	8009002 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008fee:	3301      	adds	r3, #1
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	79fa      	ldrb	r2, [r7, #7]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d101      	bne.n	8008ffc <netif_get_by_index+0x2c>
        return netif; /* found! */
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	e006      	b.n	800900a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	60fb      	str	r3, [r7, #12]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1ef      	bne.n	8008fe8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3714      	adds	r7, #20
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	2000aeb4 	.word	0x2000aeb4

0800901c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009022:	4b0c      	ldr	r3, [pc, #48]	; (8009054 <pbuf_free_ooseq+0x38>)
 8009024:	2200      	movs	r2, #0
 8009026:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009028:	4b0b      	ldr	r3, [pc, #44]	; (8009058 <pbuf_free_ooseq+0x3c>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	607b      	str	r3, [r7, #4]
 800902e:	e00a      	b.n	8009046 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009034:	2b00      	cmp	r3, #0
 8009036:	d003      	beq.n	8009040 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f002 f94d 	bl	800b2d8 <tcp_free_ooseq>
      return;
 800903e:	e005      	b.n	800904c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	607b      	str	r3, [r7, #4]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d1f1      	bne.n	8009030 <pbuf_free_ooseq+0x14>
    }
  }
}
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	2000aebd 	.word	0x2000aebd
 8009058:	2000aecc 	.word	0x2000aecc

0800905c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800905c:	b480      	push	{r7}
 800905e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8009060:	4b03      	ldr	r3, [pc, #12]	; (8009070 <pbuf_pool_is_empty+0x14>)
 8009062:	2201      	movs	r2, #1
 8009064:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8009066:	bf00      	nop
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	2000aebd 	.word	0x2000aebd

08009074 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	4611      	mov	r1, r2
 8009080:	461a      	mov	r2, r3
 8009082:	460b      	mov	r3, r1
 8009084:	80fb      	strh	r3, [r7, #6]
 8009086:	4613      	mov	r3, r2
 8009088:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	68ba      	ldr	r2, [r7, #8]
 8009094:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	88fa      	ldrh	r2, [r7, #6]
 800909a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	88ba      	ldrh	r2, [r7, #4]
 80090a0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80090a2:	8b3b      	ldrh	r3, [r7, #24]
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	7f3a      	ldrb	r2, [r7, #28]
 80090ae:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2201      	movs	r2, #1
 80090b4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2200      	movs	r2, #0
 80090ba:	73da      	strb	r2, [r3, #15]
}
 80090bc:	bf00      	nop
 80090be:	3714      	adds	r7, #20
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b08c      	sub	sp, #48	; 0x30
 80090cc:	af02      	add	r7, sp, #8
 80090ce:	4603      	mov	r3, r0
 80090d0:	71fb      	strb	r3, [r7, #7]
 80090d2:	460b      	mov	r3, r1
 80090d4:	80bb      	strh	r3, [r7, #4]
 80090d6:	4613      	mov	r3, r2
 80090d8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80090da:	79fb      	ldrb	r3, [r7, #7]
 80090dc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80090de:	887b      	ldrh	r3, [r7, #2]
 80090e0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80090e4:	d07f      	beq.n	80091e6 <pbuf_alloc+0x11e>
 80090e6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80090ea:	f300 80c8 	bgt.w	800927e <pbuf_alloc+0x1b6>
 80090ee:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80090f2:	d010      	beq.n	8009116 <pbuf_alloc+0x4e>
 80090f4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80090f8:	f300 80c1 	bgt.w	800927e <pbuf_alloc+0x1b6>
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d002      	beq.n	8009106 <pbuf_alloc+0x3e>
 8009100:	2b41      	cmp	r3, #65	; 0x41
 8009102:	f040 80bc 	bne.w	800927e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8009106:	887a      	ldrh	r2, [r7, #2]
 8009108:	88bb      	ldrh	r3, [r7, #4]
 800910a:	4619      	mov	r1, r3
 800910c:	2000      	movs	r0, #0
 800910e:	f000 f8d1 	bl	80092b4 <pbuf_alloc_reference>
 8009112:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8009114:	e0bd      	b.n	8009292 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8009116:	2300      	movs	r3, #0
 8009118:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800911a:	2300      	movs	r3, #0
 800911c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800911e:	88bb      	ldrh	r3, [r7, #4]
 8009120:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009122:	2008      	movs	r0, #8
 8009124:	f7ff fbc2 	bl	80088ac <memp_malloc>
 8009128:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d109      	bne.n	8009144 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8009130:	f7ff ff94 	bl	800905c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8009134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009136:	2b00      	cmp	r3, #0
 8009138:	d002      	beq.n	8009140 <pbuf_alloc+0x78>
            pbuf_free(p);
 800913a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800913c:	f000 faa8 	bl	8009690 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009140:	2300      	movs	r3, #0
 8009142:	e0a7      	b.n	8009294 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009144:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009146:	3303      	adds	r3, #3
 8009148:	b29b      	uxth	r3, r3
 800914a:	f023 0303 	bic.w	r3, r3, #3
 800914e:	b29b      	uxth	r3, r3
 8009150:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8009154:	b29b      	uxth	r3, r3
 8009156:	8b7a      	ldrh	r2, [r7, #26]
 8009158:	4293      	cmp	r3, r2
 800915a:	bf28      	it	cs
 800915c:	4613      	movcs	r3, r2
 800915e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009160:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009162:	3310      	adds	r3, #16
 8009164:	693a      	ldr	r2, [r7, #16]
 8009166:	4413      	add	r3, r2
 8009168:	3303      	adds	r3, #3
 800916a:	f023 0303 	bic.w	r3, r3, #3
 800916e:	4618      	mov	r0, r3
 8009170:	89f9      	ldrh	r1, [r7, #14]
 8009172:	8b7a      	ldrh	r2, [r7, #26]
 8009174:	2300      	movs	r3, #0
 8009176:	9301      	str	r3, [sp, #4]
 8009178:	887b      	ldrh	r3, [r7, #2]
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	460b      	mov	r3, r1
 800917e:	4601      	mov	r1, r0
 8009180:	6938      	ldr	r0, [r7, #16]
 8009182:	f7ff ff77 	bl	8009074 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	f003 0303 	and.w	r3, r3, #3
 800918e:	2b00      	cmp	r3, #0
 8009190:	d006      	beq.n	80091a0 <pbuf_alloc+0xd8>
 8009192:	4b42      	ldr	r3, [pc, #264]	; (800929c <pbuf_alloc+0x1d4>)
 8009194:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009198:	4941      	ldr	r1, [pc, #260]	; (80092a0 <pbuf_alloc+0x1d8>)
 800919a:	4842      	ldr	r0, [pc, #264]	; (80092a4 <pbuf_alloc+0x1dc>)
 800919c:	f00a fe58 	bl	8013e50 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80091a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80091a2:	3303      	adds	r3, #3
 80091a4:	f023 0303 	bic.w	r3, r3, #3
 80091a8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80091ac:	d106      	bne.n	80091bc <pbuf_alloc+0xf4>
 80091ae:	4b3b      	ldr	r3, [pc, #236]	; (800929c <pbuf_alloc+0x1d4>)
 80091b0:	f44f 7281 	mov.w	r2, #258	; 0x102
 80091b4:	493c      	ldr	r1, [pc, #240]	; (80092a8 <pbuf_alloc+0x1e0>)
 80091b6:	483b      	ldr	r0, [pc, #236]	; (80092a4 <pbuf_alloc+0x1dc>)
 80091b8:	f00a fe4a 	bl	8013e50 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80091bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d102      	bne.n	80091c8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	627b      	str	r3, [r7, #36]	; 0x24
 80091c6:	e002      	b.n	80091ce <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	693a      	ldr	r2, [r7, #16]
 80091cc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80091d2:	8b7a      	ldrh	r2, [r7, #26]
 80091d4:	89fb      	ldrh	r3, [r7, #14]
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80091da:	2300      	movs	r3, #0
 80091dc:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80091de:	8b7b      	ldrh	r3, [r7, #26]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d19e      	bne.n	8009122 <pbuf_alloc+0x5a>
      break;
 80091e4:	e055      	b.n	8009292 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80091e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80091e8:	3303      	adds	r3, #3
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	f023 0303 	bic.w	r3, r3, #3
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	88bb      	ldrh	r3, [r7, #4]
 80091f4:	3303      	adds	r3, #3
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	f023 0303 	bic.w	r3, r3, #3
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	4413      	add	r3, r2
 8009200:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8009202:	8b3b      	ldrh	r3, [r7, #24]
 8009204:	3310      	adds	r3, #16
 8009206:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009208:	8b3a      	ldrh	r2, [r7, #24]
 800920a:	88bb      	ldrh	r3, [r7, #4]
 800920c:	3303      	adds	r3, #3
 800920e:	f023 0303 	bic.w	r3, r3, #3
 8009212:	429a      	cmp	r2, r3
 8009214:	d306      	bcc.n	8009224 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8009216:	8afa      	ldrh	r2, [r7, #22]
 8009218:	88bb      	ldrh	r3, [r7, #4]
 800921a:	3303      	adds	r3, #3
 800921c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009220:	429a      	cmp	r2, r3
 8009222:	d201      	bcs.n	8009228 <pbuf_alloc+0x160>
        return NULL;
 8009224:	2300      	movs	r3, #0
 8009226:	e035      	b.n	8009294 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009228:	8afb      	ldrh	r3, [r7, #22]
 800922a:	4618      	mov	r0, r3
 800922c:	f7ff f9ae 	bl	800858c <mem_malloc>
 8009230:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8009232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009234:	2b00      	cmp	r3, #0
 8009236:	d101      	bne.n	800923c <pbuf_alloc+0x174>
        return NULL;
 8009238:	2300      	movs	r3, #0
 800923a:	e02b      	b.n	8009294 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800923c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800923e:	3310      	adds	r3, #16
 8009240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009242:	4413      	add	r3, r2
 8009244:	3303      	adds	r3, #3
 8009246:	f023 0303 	bic.w	r3, r3, #3
 800924a:	4618      	mov	r0, r3
 800924c:	88b9      	ldrh	r1, [r7, #4]
 800924e:	88ba      	ldrh	r2, [r7, #4]
 8009250:	2300      	movs	r3, #0
 8009252:	9301      	str	r3, [sp, #4]
 8009254:	887b      	ldrh	r3, [r7, #2]
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	460b      	mov	r3, r1
 800925a:	4601      	mov	r1, r0
 800925c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800925e:	f7ff ff09 	bl	8009074 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8009262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	f003 0303 	and.w	r3, r3, #3
 800926a:	2b00      	cmp	r3, #0
 800926c:	d010      	beq.n	8009290 <pbuf_alloc+0x1c8>
 800926e:	4b0b      	ldr	r3, [pc, #44]	; (800929c <pbuf_alloc+0x1d4>)
 8009270:	f44f 7291 	mov.w	r2, #290	; 0x122
 8009274:	490d      	ldr	r1, [pc, #52]	; (80092ac <pbuf_alloc+0x1e4>)
 8009276:	480b      	ldr	r0, [pc, #44]	; (80092a4 <pbuf_alloc+0x1dc>)
 8009278:	f00a fdea 	bl	8013e50 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800927c:	e008      	b.n	8009290 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800927e:	4b07      	ldr	r3, [pc, #28]	; (800929c <pbuf_alloc+0x1d4>)
 8009280:	f240 1227 	movw	r2, #295	; 0x127
 8009284:	490a      	ldr	r1, [pc, #40]	; (80092b0 <pbuf_alloc+0x1e8>)
 8009286:	4807      	ldr	r0, [pc, #28]	; (80092a4 <pbuf_alloc+0x1dc>)
 8009288:	f00a fde2 	bl	8013e50 <iprintf>
      return NULL;
 800928c:	2300      	movs	r3, #0
 800928e:	e001      	b.n	8009294 <pbuf_alloc+0x1cc>
      break;
 8009290:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8009292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009294:	4618      	mov	r0, r3
 8009296:	3728      	adds	r7, #40	; 0x28
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	080159c4 	.word	0x080159c4
 80092a0:	080159f4 	.word	0x080159f4
 80092a4:	08015a24 	.word	0x08015a24
 80092a8:	08015a4c 	.word	0x08015a4c
 80092ac:	08015a80 	.word	0x08015a80
 80092b0:	08015aac 	.word	0x08015aac

080092b4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b086      	sub	sp, #24
 80092b8:	af02      	add	r7, sp, #8
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	460b      	mov	r3, r1
 80092be:	807b      	strh	r3, [r7, #2]
 80092c0:	4613      	mov	r3, r2
 80092c2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80092c4:	883b      	ldrh	r3, [r7, #0]
 80092c6:	2b41      	cmp	r3, #65	; 0x41
 80092c8:	d009      	beq.n	80092de <pbuf_alloc_reference+0x2a>
 80092ca:	883b      	ldrh	r3, [r7, #0]
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d006      	beq.n	80092de <pbuf_alloc_reference+0x2a>
 80092d0:	4b0f      	ldr	r3, [pc, #60]	; (8009310 <pbuf_alloc_reference+0x5c>)
 80092d2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80092d6:	490f      	ldr	r1, [pc, #60]	; (8009314 <pbuf_alloc_reference+0x60>)
 80092d8:	480f      	ldr	r0, [pc, #60]	; (8009318 <pbuf_alloc_reference+0x64>)
 80092da:	f00a fdb9 	bl	8013e50 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80092de:	2007      	movs	r0, #7
 80092e0:	f7ff fae4 	bl	80088ac <memp_malloc>
 80092e4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d101      	bne.n	80092f0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80092ec:	2300      	movs	r3, #0
 80092ee:	e00b      	b.n	8009308 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80092f0:	8879      	ldrh	r1, [r7, #2]
 80092f2:	887a      	ldrh	r2, [r7, #2]
 80092f4:	2300      	movs	r3, #0
 80092f6:	9301      	str	r3, [sp, #4]
 80092f8:	883b      	ldrh	r3, [r7, #0]
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	460b      	mov	r3, r1
 80092fe:	6879      	ldr	r1, [r7, #4]
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f7ff feb7 	bl	8009074 <pbuf_init_alloced_pbuf>
  return p;
 8009306:	68fb      	ldr	r3, [r7, #12]
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	080159c4 	.word	0x080159c4
 8009314:	08015ac8 	.word	0x08015ac8
 8009318:	08015a24 	.word	0x08015a24

0800931c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b088      	sub	sp, #32
 8009320:	af02      	add	r7, sp, #8
 8009322:	607b      	str	r3, [r7, #4]
 8009324:	4603      	mov	r3, r0
 8009326:	73fb      	strb	r3, [r7, #15]
 8009328:	460b      	mov	r3, r1
 800932a:	81bb      	strh	r3, [r7, #12]
 800932c:	4613      	mov	r3, r2
 800932e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009330:	7bfb      	ldrb	r3, [r7, #15]
 8009332:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009334:	8a7b      	ldrh	r3, [r7, #18]
 8009336:	3303      	adds	r3, #3
 8009338:	f023 0203 	bic.w	r2, r3, #3
 800933c:	89bb      	ldrh	r3, [r7, #12]
 800933e:	441a      	add	r2, r3
 8009340:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009342:	429a      	cmp	r2, r3
 8009344:	d901      	bls.n	800934a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8009346:	2300      	movs	r3, #0
 8009348:	e018      	b.n	800937c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800934a:	6a3b      	ldr	r3, [r7, #32]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d007      	beq.n	8009360 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009350:	8a7b      	ldrh	r3, [r7, #18]
 8009352:	3303      	adds	r3, #3
 8009354:	f023 0303 	bic.w	r3, r3, #3
 8009358:	6a3a      	ldr	r2, [r7, #32]
 800935a:	4413      	add	r3, r2
 800935c:	617b      	str	r3, [r7, #20]
 800935e:	e001      	b.n	8009364 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009360:	2300      	movs	r3, #0
 8009362:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	89b9      	ldrh	r1, [r7, #12]
 8009368:	89ba      	ldrh	r2, [r7, #12]
 800936a:	2302      	movs	r3, #2
 800936c:	9301      	str	r3, [sp, #4]
 800936e:	897b      	ldrh	r3, [r7, #10]
 8009370:	9300      	str	r3, [sp, #0]
 8009372:	460b      	mov	r3, r1
 8009374:	6979      	ldr	r1, [r7, #20]
 8009376:	f7ff fe7d 	bl	8009074 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800937a:	687b      	ldr	r3, [r7, #4]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3718      	adds	r7, #24
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	460b      	mov	r3, r1
 800938e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d106      	bne.n	80093a4 <pbuf_realloc+0x20>
 8009396:	4b3a      	ldr	r3, [pc, #232]	; (8009480 <pbuf_realloc+0xfc>)
 8009398:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800939c:	4939      	ldr	r1, [pc, #228]	; (8009484 <pbuf_realloc+0x100>)
 800939e:	483a      	ldr	r0, [pc, #232]	; (8009488 <pbuf_realloc+0x104>)
 80093a0:	f00a fd56 	bl	8013e50 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	891b      	ldrh	r3, [r3, #8]
 80093a8:	887a      	ldrh	r2, [r7, #2]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d263      	bcs.n	8009476 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	891a      	ldrh	r2, [r3, #8]
 80093b2:	887b      	ldrh	r3, [r7, #2]
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80093b8:	887b      	ldrh	r3, [r7, #2]
 80093ba:	817b      	strh	r3, [r7, #10]
  q = p;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80093c0:	e018      	b.n	80093f4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	895b      	ldrh	r3, [r3, #10]
 80093c6:	897a      	ldrh	r2, [r7, #10]
 80093c8:	1ad3      	subs	r3, r2, r3
 80093ca:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	891a      	ldrh	r2, [r3, #8]
 80093d0:	893b      	ldrh	r3, [r7, #8]
 80093d2:	1ad3      	subs	r3, r2, r3
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d106      	bne.n	80093f4 <pbuf_realloc+0x70>
 80093e6:	4b26      	ldr	r3, [pc, #152]	; (8009480 <pbuf_realloc+0xfc>)
 80093e8:	f240 12af 	movw	r2, #431	; 0x1af
 80093ec:	4927      	ldr	r1, [pc, #156]	; (800948c <pbuf_realloc+0x108>)
 80093ee:	4826      	ldr	r0, [pc, #152]	; (8009488 <pbuf_realloc+0x104>)
 80093f0:	f00a fd2e 	bl	8013e50 <iprintf>
  while (rem_len > q->len) {
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	895b      	ldrh	r3, [r3, #10]
 80093f8:	897a      	ldrh	r2, [r7, #10]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d8e1      	bhi.n	80093c2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	7b1b      	ldrb	r3, [r3, #12]
 8009402:	f003 030f 	and.w	r3, r3, #15
 8009406:	2b00      	cmp	r3, #0
 8009408:	d121      	bne.n	800944e <pbuf_realloc+0xca>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	895b      	ldrh	r3, [r3, #10]
 800940e:	897a      	ldrh	r2, [r7, #10]
 8009410:	429a      	cmp	r2, r3
 8009412:	d01c      	beq.n	800944e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	7b5b      	ldrb	r3, [r3, #13]
 8009418:	f003 0302 	and.w	r3, r3, #2
 800941c:	2b00      	cmp	r3, #0
 800941e:	d116      	bne.n	800944e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	685a      	ldr	r2, [r3, #4]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	1ad3      	subs	r3, r2, r3
 8009428:	b29a      	uxth	r2, r3
 800942a:	897b      	ldrh	r3, [r7, #10]
 800942c:	4413      	add	r3, r2
 800942e:	b29b      	uxth	r3, r3
 8009430:	4619      	mov	r1, r3
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f7fe ffae 	bl	8008394 <mem_trim>
 8009438:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d106      	bne.n	800944e <pbuf_realloc+0xca>
 8009440:	4b0f      	ldr	r3, [pc, #60]	; (8009480 <pbuf_realloc+0xfc>)
 8009442:	f240 12bd 	movw	r2, #445	; 0x1bd
 8009446:	4912      	ldr	r1, [pc, #72]	; (8009490 <pbuf_realloc+0x10c>)
 8009448:	480f      	ldr	r0, [pc, #60]	; (8009488 <pbuf_realloc+0x104>)
 800944a:	f00a fd01 	bl	8013e50 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	897a      	ldrh	r2, [r7, #10]
 8009452:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	895a      	ldrh	r2, [r3, #10]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d004      	beq.n	800946e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4618      	mov	r0, r3
 800946a:	f000 f911 	bl	8009690 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	601a      	str	r2, [r3, #0]
 8009474:	e000      	b.n	8009478 <pbuf_realloc+0xf4>
    return;
 8009476:	bf00      	nop

}
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	080159c4 	.word	0x080159c4
 8009484:	08015adc 	.word	0x08015adc
 8009488:	08015a24 	.word	0x08015a24
 800948c:	08015af4 	.word	0x08015af4
 8009490:	08015b0c 	.word	0x08015b0c

08009494 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b086      	sub	sp, #24
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	4613      	mov	r3, r2
 80094a0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d106      	bne.n	80094b6 <pbuf_add_header_impl+0x22>
 80094a8:	4b2b      	ldr	r3, [pc, #172]	; (8009558 <pbuf_add_header_impl+0xc4>)
 80094aa:	f240 12df 	movw	r2, #479	; 0x1df
 80094ae:	492b      	ldr	r1, [pc, #172]	; (800955c <pbuf_add_header_impl+0xc8>)
 80094b0:	482b      	ldr	r0, [pc, #172]	; (8009560 <pbuf_add_header_impl+0xcc>)
 80094b2:	f00a fccd 	bl	8013e50 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d003      	beq.n	80094c4 <pbuf_add_header_impl+0x30>
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094c2:	d301      	bcc.n	80094c8 <pbuf_add_header_impl+0x34>
    return 1;
 80094c4:	2301      	movs	r3, #1
 80094c6:	e043      	b.n	8009550 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d101      	bne.n	80094d2 <pbuf_add_header_impl+0x3e>
    return 0;
 80094ce:	2300      	movs	r3, #0
 80094d0:	e03e      	b.n	8009550 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	891a      	ldrh	r2, [r3, #8]
 80094da:	8a7b      	ldrh	r3, [r7, #18]
 80094dc:	4413      	add	r3, r2
 80094de:	b29b      	uxth	r3, r3
 80094e0:	8a7a      	ldrh	r2, [r7, #18]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d901      	bls.n	80094ea <pbuf_add_header_impl+0x56>
    return 1;
 80094e6:	2301      	movs	r3, #1
 80094e8:	e032      	b.n	8009550 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	7b1b      	ldrb	r3, [r3, #12]
 80094ee:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80094f0:	8a3b      	ldrh	r3, [r7, #16]
 80094f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00c      	beq.n	8009514 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	685a      	ldr	r2, [r3, #4]
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	425b      	negs	r3, r3
 8009502:	4413      	add	r3, r2
 8009504:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	3310      	adds	r3, #16
 800950a:	697a      	ldr	r2, [r7, #20]
 800950c:	429a      	cmp	r2, r3
 800950e:	d20d      	bcs.n	800952c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009510:	2301      	movs	r3, #1
 8009512:	e01d      	b.n	8009550 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009514:	79fb      	ldrb	r3, [r7, #7]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d006      	beq.n	8009528 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	685a      	ldr	r2, [r3, #4]
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	425b      	negs	r3, r3
 8009522:	4413      	add	r3, r2
 8009524:	617b      	str	r3, [r7, #20]
 8009526:	e001      	b.n	800952c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009528:	2301      	movs	r3, #1
 800952a:	e011      	b.n	8009550 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	697a      	ldr	r2, [r7, #20]
 8009530:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	895a      	ldrh	r2, [r3, #10]
 8009536:	8a7b      	ldrh	r3, [r7, #18]
 8009538:	4413      	add	r3, r2
 800953a:	b29a      	uxth	r2, r3
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	891a      	ldrh	r2, [r3, #8]
 8009544:	8a7b      	ldrh	r3, [r7, #18]
 8009546:	4413      	add	r3, r2
 8009548:	b29a      	uxth	r2, r3
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	811a      	strh	r2, [r3, #8]


  return 0;
 800954e:	2300      	movs	r3, #0
}
 8009550:	4618      	mov	r0, r3
 8009552:	3718      	adds	r7, #24
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}
 8009558:	080159c4 	.word	0x080159c4
 800955c:	08015b28 	.word	0x08015b28
 8009560:	08015a24 	.word	0x08015a24

08009564 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800956e:	2200      	movs	r2, #0
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7ff ff8e 	bl	8009494 <pbuf_add_header_impl>
 8009578:	4603      	mov	r3, r0
}
 800957a:	4618      	mov	r0, r3
 800957c:	3708      	adds	r7, #8
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
	...

08009584 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d106      	bne.n	80095a2 <pbuf_remove_header+0x1e>
 8009594:	4b20      	ldr	r3, [pc, #128]	; (8009618 <pbuf_remove_header+0x94>)
 8009596:	f240 224b 	movw	r2, #587	; 0x24b
 800959a:	4920      	ldr	r1, [pc, #128]	; (800961c <pbuf_remove_header+0x98>)
 800959c:	4820      	ldr	r0, [pc, #128]	; (8009620 <pbuf_remove_header+0x9c>)
 800959e:	f00a fc57 	bl	8013e50 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d003      	beq.n	80095b0 <pbuf_remove_header+0x2c>
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095ae:	d301      	bcc.n	80095b4 <pbuf_remove_header+0x30>
    return 1;
 80095b0:	2301      	movs	r3, #1
 80095b2:	e02c      	b.n	800960e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d101      	bne.n	80095be <pbuf_remove_header+0x3a>
    return 0;
 80095ba:	2300      	movs	r3, #0
 80095bc:	e027      	b.n	800960e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	895b      	ldrh	r3, [r3, #10]
 80095c6:	89fa      	ldrh	r2, [r7, #14]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d908      	bls.n	80095de <pbuf_remove_header+0x5a>
 80095cc:	4b12      	ldr	r3, [pc, #72]	; (8009618 <pbuf_remove_header+0x94>)
 80095ce:	f240 2255 	movw	r2, #597	; 0x255
 80095d2:	4914      	ldr	r1, [pc, #80]	; (8009624 <pbuf_remove_header+0xa0>)
 80095d4:	4812      	ldr	r0, [pc, #72]	; (8009620 <pbuf_remove_header+0x9c>)
 80095d6:	f00a fc3b 	bl	8013e50 <iprintf>
 80095da:	2301      	movs	r3, #1
 80095dc:	e017      	b.n	800960e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	685a      	ldr	r2, [r3, #4]
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	441a      	add	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	895a      	ldrh	r2, [r3, #10]
 80095f4:	89fb      	ldrh	r3, [r7, #14]
 80095f6:	1ad3      	subs	r3, r2, r3
 80095f8:	b29a      	uxth	r2, r3
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	891a      	ldrh	r2, [r3, #8]
 8009602:	89fb      	ldrh	r3, [r7, #14]
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	b29a      	uxth	r2, r3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	080159c4 	.word	0x080159c4
 800961c:	08015b28 	.word	0x08015b28
 8009620:	08015a24 	.word	0x08015a24
 8009624:	08015b34 	.word	0x08015b34

08009628 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	460b      	mov	r3, r1
 8009632:	807b      	strh	r3, [r7, #2]
 8009634:	4613      	mov	r3, r2
 8009636:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009638:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800963c:	2b00      	cmp	r3, #0
 800963e:	da08      	bge.n	8009652 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009640:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009644:	425b      	negs	r3, r3
 8009646:	4619      	mov	r1, r3
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f7ff ff9b 	bl	8009584 <pbuf_remove_header>
 800964e:	4603      	mov	r3, r0
 8009650:	e007      	b.n	8009662 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009652:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009656:	787a      	ldrb	r2, [r7, #1]
 8009658:	4619      	mov	r1, r3
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f7ff ff1a 	bl	8009494 <pbuf_add_header_impl>
 8009660:	4603      	mov	r3, r0
  }
}
 8009662:	4618      	mov	r0, r3
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}

0800966a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800966a:	b580      	push	{r7, lr}
 800966c:	b082      	sub	sp, #8
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
 8009672:	460b      	mov	r3, r1
 8009674:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8009676:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800967a:	2201      	movs	r2, #1
 800967c:	4619      	mov	r1, r3
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f7ff ffd2 	bl	8009628 <pbuf_header_impl>
 8009684:	4603      	mov	r3, r0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3708      	adds	r7, #8
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
	...

08009690 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d10b      	bne.n	80096b6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d106      	bne.n	80096b2 <pbuf_free+0x22>
 80096a4:	4b38      	ldr	r3, [pc, #224]	; (8009788 <pbuf_free+0xf8>)
 80096a6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80096aa:	4938      	ldr	r1, [pc, #224]	; (800978c <pbuf_free+0xfc>)
 80096ac:	4838      	ldr	r0, [pc, #224]	; (8009790 <pbuf_free+0x100>)
 80096ae:	f00a fbcf 	bl	8013e50 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80096b2:	2300      	movs	r3, #0
 80096b4:	e063      	b.n	800977e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80096b6:	2300      	movs	r3, #0
 80096b8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80096ba:	e05c      	b.n	8009776 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	7b9b      	ldrb	r3, [r3, #14]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d106      	bne.n	80096d2 <pbuf_free+0x42>
 80096c4:	4b30      	ldr	r3, [pc, #192]	; (8009788 <pbuf_free+0xf8>)
 80096c6:	f240 22f1 	movw	r2, #753	; 0x2f1
 80096ca:	4932      	ldr	r1, [pc, #200]	; (8009794 <pbuf_free+0x104>)
 80096cc:	4830      	ldr	r0, [pc, #192]	; (8009790 <pbuf_free+0x100>)
 80096ce:	f00a fbbf 	bl	8013e50 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	7b9b      	ldrb	r3, [r3, #14]
 80096d6:	3b01      	subs	r3, #1
 80096d8:	b2da      	uxtb	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	739a      	strb	r2, [r3, #14]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	7b9b      	ldrb	r3, [r3, #14]
 80096e2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80096e4:	7dbb      	ldrb	r3, [r7, #22]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d143      	bne.n	8009772 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	7b1b      	ldrb	r3, [r3, #12]
 80096f4:	f003 030f 	and.w	r3, r3, #15
 80096f8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	7b5b      	ldrb	r3, [r3, #13]
 80096fe:	f003 0302 	and.w	r3, r3, #2
 8009702:	2b00      	cmp	r3, #0
 8009704:	d011      	beq.n	800972a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d106      	bne.n	8009720 <pbuf_free+0x90>
 8009712:	4b1d      	ldr	r3, [pc, #116]	; (8009788 <pbuf_free+0xf8>)
 8009714:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009718:	491f      	ldr	r1, [pc, #124]	; (8009798 <pbuf_free+0x108>)
 800971a:	481d      	ldr	r0, [pc, #116]	; (8009790 <pbuf_free+0x100>)
 800971c:	f00a fb98 	bl	8013e50 <iprintf>
        pc->custom_free_function(p);
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	4798      	blx	r3
 8009728:	e01d      	b.n	8009766 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800972a:	7bfb      	ldrb	r3, [r7, #15]
 800972c:	2b02      	cmp	r3, #2
 800972e:	d104      	bne.n	800973a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8009730:	6879      	ldr	r1, [r7, #4]
 8009732:	2008      	movs	r0, #8
 8009734:	f7ff f92a 	bl	800898c <memp_free>
 8009738:	e015      	b.n	8009766 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800973a:	7bfb      	ldrb	r3, [r7, #15]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d104      	bne.n	800974a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8009740:	6879      	ldr	r1, [r7, #4]
 8009742:	2007      	movs	r0, #7
 8009744:	f7ff f922 	bl	800898c <memp_free>
 8009748:	e00d      	b.n	8009766 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800974a:	7bfb      	ldrb	r3, [r7, #15]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d103      	bne.n	8009758 <pbuf_free+0xc8>
          mem_free(p);
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f7fe fdb5 	bl	80082c0 <mem_free>
 8009756:	e006      	b.n	8009766 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009758:	4b0b      	ldr	r3, [pc, #44]	; (8009788 <pbuf_free+0xf8>)
 800975a:	f240 320f 	movw	r2, #783	; 0x30f
 800975e:	490f      	ldr	r1, [pc, #60]	; (800979c <pbuf_free+0x10c>)
 8009760:	480b      	ldr	r0, [pc, #44]	; (8009790 <pbuf_free+0x100>)
 8009762:	f00a fb75 	bl	8013e50 <iprintf>
        }
      }
      count++;
 8009766:	7dfb      	ldrb	r3, [r7, #23]
 8009768:	3301      	adds	r3, #1
 800976a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	607b      	str	r3, [r7, #4]
 8009770:	e001      	b.n	8009776 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8009772:	2300      	movs	r3, #0
 8009774:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d19f      	bne.n	80096bc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800977c:	7dfb      	ldrb	r3, [r7, #23]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3718      	adds	r7, #24
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	080159c4 	.word	0x080159c4
 800978c:	08015b28 	.word	0x08015b28
 8009790:	08015a24 	.word	0x08015a24
 8009794:	08015b54 	.word	0x08015b54
 8009798:	08015b6c 	.word	0x08015b6c
 800979c:	08015b90 	.word	0x08015b90

080097a0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b085      	sub	sp, #20
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80097a8:	2300      	movs	r3, #0
 80097aa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80097ac:	e005      	b.n	80097ba <pbuf_clen+0x1a>
    ++len;
 80097ae:	89fb      	ldrh	r3, [r7, #14]
 80097b0:	3301      	adds	r3, #1
 80097b2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1f6      	bne.n	80097ae <pbuf_clen+0xe>
  }
  return len;
 80097c0:	89fb      	ldrh	r3, [r7, #14]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
	...

080097d0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d010      	beq.n	8009800 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	7b9b      	ldrb	r3, [r3, #14]
 80097e2:	3301      	adds	r3, #1
 80097e4:	b2da      	uxtb	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	7b9b      	ldrb	r3, [r3, #14]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d106      	bne.n	8009800 <pbuf_ref+0x30>
 80097f2:	4b05      	ldr	r3, [pc, #20]	; (8009808 <pbuf_ref+0x38>)
 80097f4:	f240 3242 	movw	r2, #834	; 0x342
 80097f8:	4904      	ldr	r1, [pc, #16]	; (800980c <pbuf_ref+0x3c>)
 80097fa:	4805      	ldr	r0, [pc, #20]	; (8009810 <pbuf_ref+0x40>)
 80097fc:	f00a fb28 	bl	8013e50 <iprintf>
  }
}
 8009800:	bf00      	nop
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	080159c4 	.word	0x080159c4
 800980c:	08015ba4 	.word	0x08015ba4
 8009810:	08015a24 	.word	0x08015a24

08009814 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d002      	beq.n	800982a <pbuf_cat+0x16>
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d107      	bne.n	800983a <pbuf_cat+0x26>
 800982a:	4b20      	ldr	r3, [pc, #128]	; (80098ac <pbuf_cat+0x98>)
 800982c:	f240 3259 	movw	r2, #857	; 0x359
 8009830:	491f      	ldr	r1, [pc, #124]	; (80098b0 <pbuf_cat+0x9c>)
 8009832:	4820      	ldr	r0, [pc, #128]	; (80098b4 <pbuf_cat+0xa0>)
 8009834:	f00a fb0c 	bl	8013e50 <iprintf>
 8009838:	e034      	b.n	80098a4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	60fb      	str	r3, [r7, #12]
 800983e:	e00a      	b.n	8009856 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	891a      	ldrh	r2, [r3, #8]
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	891b      	ldrh	r3, [r3, #8]
 8009848:	4413      	add	r3, r2
 800984a:	b29a      	uxth	r2, r3
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	60fb      	str	r3, [r7, #12]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1f0      	bne.n	8009840 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	891a      	ldrh	r2, [r3, #8]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	895b      	ldrh	r3, [r3, #10]
 8009866:	429a      	cmp	r2, r3
 8009868:	d006      	beq.n	8009878 <pbuf_cat+0x64>
 800986a:	4b10      	ldr	r3, [pc, #64]	; (80098ac <pbuf_cat+0x98>)
 800986c:	f240 3262 	movw	r2, #866	; 0x362
 8009870:	4911      	ldr	r1, [pc, #68]	; (80098b8 <pbuf_cat+0xa4>)
 8009872:	4810      	ldr	r0, [pc, #64]	; (80098b4 <pbuf_cat+0xa0>)
 8009874:	f00a faec 	bl	8013e50 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d006      	beq.n	800988e <pbuf_cat+0x7a>
 8009880:	4b0a      	ldr	r3, [pc, #40]	; (80098ac <pbuf_cat+0x98>)
 8009882:	f240 3263 	movw	r2, #867	; 0x363
 8009886:	490d      	ldr	r1, [pc, #52]	; (80098bc <pbuf_cat+0xa8>)
 8009888:	480a      	ldr	r0, [pc, #40]	; (80098b4 <pbuf_cat+0xa0>)
 800988a:	f00a fae1 	bl	8013e50 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	891a      	ldrh	r2, [r3, #8]
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	891b      	ldrh	r3, [r3, #8]
 8009896:	4413      	add	r3, r2
 8009898:	b29a      	uxth	r2, r3
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	683a      	ldr	r2, [r7, #0]
 80098a2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	080159c4 	.word	0x080159c4
 80098b0:	08015bb8 	.word	0x08015bb8
 80098b4:	08015a24 	.word	0x08015a24
 80098b8:	08015bf0 	.word	0x08015bf0
 80098bc:	08015c20 	.word	0x08015c20

080098c0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80098ca:	6839      	ldr	r1, [r7, #0]
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f7ff ffa1 	bl	8009814 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80098d2:	6838      	ldr	r0, [r7, #0]
 80098d4:	f7ff ff7c 	bl	80097d0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80098d8:	bf00      	nop
 80098da:	3708      	adds	r7, #8
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80098ea:	2300      	movs	r3, #0
 80098ec:	617b      	str	r3, [r7, #20]
 80098ee:	2300      	movs	r3, #0
 80098f0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d008      	beq.n	800990a <pbuf_copy+0x2a>
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d005      	beq.n	800990a <pbuf_copy+0x2a>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	891a      	ldrh	r2, [r3, #8]
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	891b      	ldrh	r3, [r3, #8]
 8009906:	429a      	cmp	r2, r3
 8009908:	d209      	bcs.n	800991e <pbuf_copy+0x3e>
 800990a:	4b57      	ldr	r3, [pc, #348]	; (8009a68 <pbuf_copy+0x188>)
 800990c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8009910:	4956      	ldr	r1, [pc, #344]	; (8009a6c <pbuf_copy+0x18c>)
 8009912:	4857      	ldr	r0, [pc, #348]	; (8009a70 <pbuf_copy+0x190>)
 8009914:	f00a fa9c 	bl	8013e50 <iprintf>
 8009918:	f06f 030f 	mvn.w	r3, #15
 800991c:	e09f      	b.n	8009a5e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	895b      	ldrh	r3, [r3, #10]
 8009922:	461a      	mov	r2, r3
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	1ad2      	subs	r2, r2, r3
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	895b      	ldrh	r3, [r3, #10]
 800992c:	4619      	mov	r1, r3
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	1acb      	subs	r3, r1, r3
 8009932:	429a      	cmp	r2, r3
 8009934:	d306      	bcc.n	8009944 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	895b      	ldrh	r3, [r3, #10]
 800993a:	461a      	mov	r2, r3
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	1ad3      	subs	r3, r2, r3
 8009940:	60fb      	str	r3, [r7, #12]
 8009942:	e005      	b.n	8009950 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	895b      	ldrh	r3, [r3, #10]
 8009948:	461a      	mov	r2, r3
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	1ad3      	subs	r3, r2, r3
 800994e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	685a      	ldr	r2, [r3, #4]
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	18d0      	adds	r0, r2, r3
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	685a      	ldr	r2, [r3, #4]
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	4413      	add	r3, r2
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	4619      	mov	r1, r3
 8009964:	f00a fa44 	bl	8013df0 <memcpy>
    offset_to += len;
 8009968:	697a      	ldr	r2, [r7, #20]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	4413      	add	r3, r2
 800996e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	4413      	add	r3, r2
 8009976:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	895b      	ldrh	r3, [r3, #10]
 800997c:	461a      	mov	r2, r3
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	4293      	cmp	r3, r2
 8009982:	d906      	bls.n	8009992 <pbuf_copy+0xb2>
 8009984:	4b38      	ldr	r3, [pc, #224]	; (8009a68 <pbuf_copy+0x188>)
 8009986:	f240 32d9 	movw	r2, #985	; 0x3d9
 800998a:	493a      	ldr	r1, [pc, #232]	; (8009a74 <pbuf_copy+0x194>)
 800998c:	4838      	ldr	r0, [pc, #224]	; (8009a70 <pbuf_copy+0x190>)
 800998e:	f00a fa5f 	bl	8013e50 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	895b      	ldrh	r3, [r3, #10]
 8009996:	461a      	mov	r2, r3
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	4293      	cmp	r3, r2
 800999c:	d906      	bls.n	80099ac <pbuf_copy+0xcc>
 800999e:	4b32      	ldr	r3, [pc, #200]	; (8009a68 <pbuf_copy+0x188>)
 80099a0:	f240 32da 	movw	r2, #986	; 0x3da
 80099a4:	4934      	ldr	r1, [pc, #208]	; (8009a78 <pbuf_copy+0x198>)
 80099a6:	4832      	ldr	r0, [pc, #200]	; (8009a70 <pbuf_copy+0x190>)
 80099a8:	f00a fa52 	bl	8013e50 <iprintf>
    if (offset_from >= p_from->len) {
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	895b      	ldrh	r3, [r3, #10]
 80099b0:	461a      	mov	r2, r3
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d304      	bcc.n	80099c2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80099b8:	2300      	movs	r3, #0
 80099ba:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	895b      	ldrh	r3, [r3, #10]
 80099c6:	461a      	mov	r2, r3
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d114      	bne.n	80099f8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80099ce:	2300      	movs	r3, #0
 80099d0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d10c      	bne.n	80099f8 <pbuf_copy+0x118>
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d009      	beq.n	80099f8 <pbuf_copy+0x118>
 80099e4:	4b20      	ldr	r3, [pc, #128]	; (8009a68 <pbuf_copy+0x188>)
 80099e6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80099ea:	4924      	ldr	r1, [pc, #144]	; (8009a7c <pbuf_copy+0x19c>)
 80099ec:	4820      	ldr	r0, [pc, #128]	; (8009a70 <pbuf_copy+0x190>)
 80099ee:	f00a fa2f 	bl	8013e50 <iprintf>
 80099f2:	f06f 030f 	mvn.w	r3, #15
 80099f6:	e032      	b.n	8009a5e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d013      	beq.n	8009a26 <pbuf_copy+0x146>
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	895a      	ldrh	r2, [r3, #10]
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	891b      	ldrh	r3, [r3, #8]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d10d      	bne.n	8009a26 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d009      	beq.n	8009a26 <pbuf_copy+0x146>
 8009a12:	4b15      	ldr	r3, [pc, #84]	; (8009a68 <pbuf_copy+0x188>)
 8009a14:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8009a18:	4919      	ldr	r1, [pc, #100]	; (8009a80 <pbuf_copy+0x1a0>)
 8009a1a:	4815      	ldr	r0, [pc, #84]	; (8009a70 <pbuf_copy+0x190>)
 8009a1c:	f00a fa18 	bl	8013e50 <iprintf>
 8009a20:	f06f 0305 	mvn.w	r3, #5
 8009a24:	e01b      	b.n	8009a5e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d013      	beq.n	8009a54 <pbuf_copy+0x174>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	895a      	ldrh	r2, [r3, #10]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	891b      	ldrh	r3, [r3, #8]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d10d      	bne.n	8009a54 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d009      	beq.n	8009a54 <pbuf_copy+0x174>
 8009a40:	4b09      	ldr	r3, [pc, #36]	; (8009a68 <pbuf_copy+0x188>)
 8009a42:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009a46:	490e      	ldr	r1, [pc, #56]	; (8009a80 <pbuf_copy+0x1a0>)
 8009a48:	4809      	ldr	r0, [pc, #36]	; (8009a70 <pbuf_copy+0x190>)
 8009a4a:	f00a fa01 	bl	8013e50 <iprintf>
 8009a4e:	f06f 0305 	mvn.w	r3, #5
 8009a52:	e004      	b.n	8009a5e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	f47f af61 	bne.w	800991e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3718      	adds	r7, #24
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	080159c4 	.word	0x080159c4
 8009a6c:	08015c6c 	.word	0x08015c6c
 8009a70:	08015a24 	.word	0x08015a24
 8009a74:	08015c9c 	.word	0x08015c9c
 8009a78:	08015cb4 	.word	0x08015cb4
 8009a7c:	08015cd0 	.word	0x08015cd0
 8009a80:	08015ce0 	.word	0x08015ce0

08009a84 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b088      	sub	sp, #32
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	4611      	mov	r1, r2
 8009a90:	461a      	mov	r2, r3
 8009a92:	460b      	mov	r3, r1
 8009a94:	80fb      	strh	r3, [r7, #6]
 8009a96:	4613      	mov	r3, r2
 8009a98:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d108      	bne.n	8009aba <pbuf_copy_partial+0x36>
 8009aa8:	4b2b      	ldr	r3, [pc, #172]	; (8009b58 <pbuf_copy_partial+0xd4>)
 8009aaa:	f240 420a 	movw	r2, #1034	; 0x40a
 8009aae:	492b      	ldr	r1, [pc, #172]	; (8009b5c <pbuf_copy_partial+0xd8>)
 8009ab0:	482b      	ldr	r0, [pc, #172]	; (8009b60 <pbuf_copy_partial+0xdc>)
 8009ab2:	f00a f9cd 	bl	8013e50 <iprintf>
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	e04a      	b.n	8009b50 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d108      	bne.n	8009ad2 <pbuf_copy_partial+0x4e>
 8009ac0:	4b25      	ldr	r3, [pc, #148]	; (8009b58 <pbuf_copy_partial+0xd4>)
 8009ac2:	f240 420b 	movw	r2, #1035	; 0x40b
 8009ac6:	4927      	ldr	r1, [pc, #156]	; (8009b64 <pbuf_copy_partial+0xe0>)
 8009ac8:	4825      	ldr	r0, [pc, #148]	; (8009b60 <pbuf_copy_partial+0xdc>)
 8009aca:	f00a f9c1 	bl	8013e50 <iprintf>
 8009ace:	2300      	movs	r3, #0
 8009ad0:	e03e      	b.n	8009b50 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	61fb      	str	r3, [r7, #28]
 8009ad6:	e034      	b.n	8009b42 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009ad8:	88bb      	ldrh	r3, [r7, #4]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d00a      	beq.n	8009af4 <pbuf_copy_partial+0x70>
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	895b      	ldrh	r3, [r3, #10]
 8009ae2:	88ba      	ldrh	r2, [r7, #4]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d305      	bcc.n	8009af4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	895b      	ldrh	r3, [r3, #10]
 8009aec:	88ba      	ldrh	r2, [r7, #4]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	80bb      	strh	r3, [r7, #4]
 8009af2:	e023      	b.n	8009b3c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	895a      	ldrh	r2, [r3, #10]
 8009af8:	88bb      	ldrh	r3, [r7, #4]
 8009afa:	1ad3      	subs	r3, r2, r3
 8009afc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8009afe:	8b3a      	ldrh	r2, [r7, #24]
 8009b00:	88fb      	ldrh	r3, [r7, #6]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d901      	bls.n	8009b0a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8009b06:	88fb      	ldrh	r3, [r7, #6]
 8009b08:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009b0a:	8b7b      	ldrh	r3, [r7, #26]
 8009b0c:	68ba      	ldr	r2, [r7, #8]
 8009b0e:	18d0      	adds	r0, r2, r3
 8009b10:	69fb      	ldr	r3, [r7, #28]
 8009b12:	685a      	ldr	r2, [r3, #4]
 8009b14:	88bb      	ldrh	r3, [r7, #4]
 8009b16:	4413      	add	r3, r2
 8009b18:	8b3a      	ldrh	r2, [r7, #24]
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	f00a f968 	bl	8013df0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009b20:	8afa      	ldrh	r2, [r7, #22]
 8009b22:	8b3b      	ldrh	r3, [r7, #24]
 8009b24:	4413      	add	r3, r2
 8009b26:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8009b28:	8b7a      	ldrh	r2, [r7, #26]
 8009b2a:	8b3b      	ldrh	r3, [r7, #24]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8009b30:	88fa      	ldrh	r2, [r7, #6]
 8009b32:	8b3b      	ldrh	r3, [r7, #24]
 8009b34:	1ad3      	subs	r3, r2, r3
 8009b36:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	61fb      	str	r3, [r7, #28]
 8009b42:	88fb      	ldrh	r3, [r7, #6]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d002      	beq.n	8009b4e <pbuf_copy_partial+0xca>
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d1c4      	bne.n	8009ad8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8009b4e:	8afb      	ldrh	r3, [r7, #22]
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3720      	adds	r7, #32
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	080159c4 	.word	0x080159c4
 8009b5c:	08015d0c 	.word	0x08015d0c
 8009b60:	08015a24 	.word	0x08015a24
 8009b64:	08015d2c 	.word	0x08015d2c

08009b68 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	4603      	mov	r3, r0
 8009b70:	603a      	str	r2, [r7, #0]
 8009b72:	71fb      	strb	r3, [r7, #7]
 8009b74:	460b      	mov	r3, r1
 8009b76:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	8919      	ldrh	r1, [r3, #8]
 8009b7c:	88ba      	ldrh	r2, [r7, #4]
 8009b7e:	79fb      	ldrb	r3, [r7, #7]
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7ff faa1 	bl	80090c8 <pbuf_alloc>
 8009b86:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d101      	bne.n	8009b92 <pbuf_clone+0x2a>
    return NULL;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	e011      	b.n	8009bb6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8009b92:	6839      	ldr	r1, [r7, #0]
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f7ff fea3 	bl	80098e0 <pbuf_copy>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009b9e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d006      	beq.n	8009bb4 <pbuf_clone+0x4c>
 8009ba6:	4b06      	ldr	r3, [pc, #24]	; (8009bc0 <pbuf_clone+0x58>)
 8009ba8:	f240 5224 	movw	r2, #1316	; 0x524
 8009bac:	4905      	ldr	r1, [pc, #20]	; (8009bc4 <pbuf_clone+0x5c>)
 8009bae:	4806      	ldr	r0, [pc, #24]	; (8009bc8 <pbuf_clone+0x60>)
 8009bb0:	f00a f94e 	bl	8013e50 <iprintf>
  return q;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3710      	adds	r7, #16
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	080159c4 	.word	0x080159c4
 8009bc4:	08015e38 	.word	0x08015e38
 8009bc8:	08015a24 	.word	0x08015a24

08009bcc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009bd0:	f00a f956 	bl	8013e80 <rand>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8009be2:	b29a      	uxth	r2, r3
 8009be4:	4b01      	ldr	r3, [pc, #4]	; (8009bec <tcp_init+0x20>)
 8009be6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8009be8:	bf00      	nop
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	20000038 	.word	0x20000038

08009bf0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	7d1b      	ldrb	r3, [r3, #20]
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d105      	bne.n	8009c0c <tcp_free+0x1c>
 8009c00:	4b06      	ldr	r3, [pc, #24]	; (8009c1c <tcp_free+0x2c>)
 8009c02:	22d4      	movs	r2, #212	; 0xd4
 8009c04:	4906      	ldr	r1, [pc, #24]	; (8009c20 <tcp_free+0x30>)
 8009c06:	4807      	ldr	r0, [pc, #28]	; (8009c24 <tcp_free+0x34>)
 8009c08:	f00a f922 	bl	8013e50 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8009c0c:	6879      	ldr	r1, [r7, #4]
 8009c0e:	2001      	movs	r0, #1
 8009c10:	f7fe febc 	bl	800898c <memp_free>
}
 8009c14:	bf00      	nop
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	08015ec4 	.word	0x08015ec4
 8009c20:	08015ef4 	.word	0x08015ef4
 8009c24:	08015f08 	.word	0x08015f08

08009c28 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	7d1b      	ldrb	r3, [r3, #20]
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d105      	bne.n	8009c44 <tcp_free_listen+0x1c>
 8009c38:	4b06      	ldr	r3, [pc, #24]	; (8009c54 <tcp_free_listen+0x2c>)
 8009c3a:	22df      	movs	r2, #223	; 0xdf
 8009c3c:	4906      	ldr	r1, [pc, #24]	; (8009c58 <tcp_free_listen+0x30>)
 8009c3e:	4807      	ldr	r0, [pc, #28]	; (8009c5c <tcp_free_listen+0x34>)
 8009c40:	f00a f906 	bl	8013e50 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009c44:	6879      	ldr	r1, [r7, #4]
 8009c46:	2002      	movs	r0, #2
 8009c48:	f7fe fea0 	bl	800898c <memp_free>
}
 8009c4c:	bf00      	nop
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	08015ec4 	.word	0x08015ec4
 8009c58:	08015f30 	.word	0x08015f30
 8009c5c:	08015f08 	.word	0x08015f08

08009c60 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009c64:	f000 fea2 	bl	800a9ac <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009c68:	4b07      	ldr	r3, [pc, #28]	; (8009c88 <tcp_tmr+0x28>)
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	b2da      	uxtb	r2, r3
 8009c70:	4b05      	ldr	r3, [pc, #20]	; (8009c88 <tcp_tmr+0x28>)
 8009c72:	701a      	strb	r2, [r3, #0]
 8009c74:	4b04      	ldr	r3, [pc, #16]	; (8009c88 <tcp_tmr+0x28>)
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	f003 0301 	and.w	r3, r3, #1
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d001      	beq.n	8009c84 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8009c80:	f000 fb54 	bl	800a32c <tcp_slowtmr>
  }
}
 8009c84:	bf00      	nop
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	2000aed5 	.word	0x2000aed5

08009c8c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d105      	bne.n	8009ca8 <tcp_remove_listener+0x1c>
 8009c9c:	4b0d      	ldr	r3, [pc, #52]	; (8009cd4 <tcp_remove_listener+0x48>)
 8009c9e:	22ff      	movs	r2, #255	; 0xff
 8009ca0:	490d      	ldr	r1, [pc, #52]	; (8009cd8 <tcp_remove_listener+0x4c>)
 8009ca2:	480e      	ldr	r0, [pc, #56]	; (8009cdc <tcp_remove_listener+0x50>)
 8009ca4:	f00a f8d4 	bl	8013e50 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	60fb      	str	r3, [r7, #12]
 8009cac:	e00a      	b.n	8009cc4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cb2:	683a      	ldr	r2, [r7, #0]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d102      	bne.n	8009cbe <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	60fb      	str	r3, [r7, #12]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1f1      	bne.n	8009cae <tcp_remove_listener+0x22>
    }
  }
}
 8009cca:	bf00      	nop
 8009ccc:	bf00      	nop
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	08015ec4 	.word	0x08015ec4
 8009cd8:	08015f4c 	.word	0x08015f4c
 8009cdc:	08015f08 	.word	0x08015f08

08009ce0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d106      	bne.n	8009cfc <tcp_listen_closed+0x1c>
 8009cee:	4b14      	ldr	r3, [pc, #80]	; (8009d40 <tcp_listen_closed+0x60>)
 8009cf0:	f240 1211 	movw	r2, #273	; 0x111
 8009cf4:	4913      	ldr	r1, [pc, #76]	; (8009d44 <tcp_listen_closed+0x64>)
 8009cf6:	4814      	ldr	r0, [pc, #80]	; (8009d48 <tcp_listen_closed+0x68>)
 8009cf8:	f00a f8aa 	bl	8013e50 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	7d1b      	ldrb	r3, [r3, #20]
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d006      	beq.n	8009d12 <tcp_listen_closed+0x32>
 8009d04:	4b0e      	ldr	r3, [pc, #56]	; (8009d40 <tcp_listen_closed+0x60>)
 8009d06:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009d0a:	4910      	ldr	r1, [pc, #64]	; (8009d4c <tcp_listen_closed+0x6c>)
 8009d0c:	480e      	ldr	r0, [pc, #56]	; (8009d48 <tcp_listen_closed+0x68>)
 8009d0e:	f00a f89f 	bl	8013e50 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009d12:	2301      	movs	r3, #1
 8009d14:	60fb      	str	r3, [r7, #12]
 8009d16:	e00b      	b.n	8009d30 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009d18:	4a0d      	ldr	r2, [pc, #52]	; (8009d50 <tcp_listen_closed+0x70>)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	6879      	ldr	r1, [r7, #4]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7ff ffb1 	bl	8009c8c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	60fb      	str	r3, [r7, #12]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2b03      	cmp	r3, #3
 8009d34:	d9f0      	bls.n	8009d18 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8009d36:	bf00      	nop
 8009d38:	bf00      	nop
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	08015ec4 	.word	0x08015ec4
 8009d44:	08015f74 	.word	0x08015f74
 8009d48:	08015f08 	.word	0x08015f08
 8009d4c:	08015f80 	.word	0x08015f80
 8009d50:	0801a76c 	.word	0x0801a76c

08009d54 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009d54:	b5b0      	push	{r4, r5, r7, lr}
 8009d56:	b088      	sub	sp, #32
 8009d58:	af04      	add	r7, sp, #16
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d106      	bne.n	8009d74 <tcp_close_shutdown+0x20>
 8009d66:	4b63      	ldr	r3, [pc, #396]	; (8009ef4 <tcp_close_shutdown+0x1a0>)
 8009d68:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009d6c:	4962      	ldr	r1, [pc, #392]	; (8009ef8 <tcp_close_shutdown+0x1a4>)
 8009d6e:	4863      	ldr	r0, [pc, #396]	; (8009efc <tcp_close_shutdown+0x1a8>)
 8009d70:	f00a f86e 	bl	8013e50 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009d74:	78fb      	ldrb	r3, [r7, #3]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d066      	beq.n	8009e48 <tcp_close_shutdown+0xf4>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	7d1b      	ldrb	r3, [r3, #20]
 8009d7e:	2b04      	cmp	r3, #4
 8009d80:	d003      	beq.n	8009d8a <tcp_close_shutdown+0x36>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	7d1b      	ldrb	r3, [r3, #20]
 8009d86:	2b07      	cmp	r3, #7
 8009d88:	d15e      	bne.n	8009e48 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d104      	bne.n	8009d9c <tcp_close_shutdown+0x48>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d96:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009d9a:	d055      	beq.n	8009e48 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	8b5b      	ldrh	r3, [r3, #26]
 8009da0:	f003 0310 	and.w	r3, r3, #16
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d106      	bne.n	8009db6 <tcp_close_shutdown+0x62>
 8009da8:	4b52      	ldr	r3, [pc, #328]	; (8009ef4 <tcp_close_shutdown+0x1a0>)
 8009daa:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009dae:	4954      	ldr	r1, [pc, #336]	; (8009f00 <tcp_close_shutdown+0x1ac>)
 8009db0:	4852      	ldr	r0, [pc, #328]	; (8009efc <tcp_close_shutdown+0x1a8>)
 8009db2:	f00a f84d 	bl	8013e50 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009dbe:	687d      	ldr	r5, [r7, #4]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	3304      	adds	r3, #4
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	8ad2      	ldrh	r2, [r2, #22]
 8009dc8:	6879      	ldr	r1, [r7, #4]
 8009dca:	8b09      	ldrh	r1, [r1, #24]
 8009dcc:	9102      	str	r1, [sp, #8]
 8009dce:	9201      	str	r2, [sp, #4]
 8009dd0:	9300      	str	r3, [sp, #0]
 8009dd2:	462b      	mov	r3, r5
 8009dd4:	4622      	mov	r2, r4
 8009dd6:	4601      	mov	r1, r0
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f004 fe91 	bl	800eb00 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f001 f8c6 	bl	800af70 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009de4:	4b47      	ldr	r3, [pc, #284]	; (8009f04 <tcp_close_shutdown+0x1b0>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d105      	bne.n	8009dfa <tcp_close_shutdown+0xa6>
 8009dee:	4b45      	ldr	r3, [pc, #276]	; (8009f04 <tcp_close_shutdown+0x1b0>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	4a43      	ldr	r2, [pc, #268]	; (8009f04 <tcp_close_shutdown+0x1b0>)
 8009df6:	6013      	str	r3, [r2, #0]
 8009df8:	e013      	b.n	8009e22 <tcp_close_shutdown+0xce>
 8009dfa:	4b42      	ldr	r3, [pc, #264]	; (8009f04 <tcp_close_shutdown+0x1b0>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	60fb      	str	r3, [r7, #12]
 8009e00:	e00c      	b.n	8009e1c <tcp_close_shutdown+0xc8>
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d104      	bne.n	8009e16 <tcp_close_shutdown+0xc2>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	68da      	ldr	r2, [r3, #12]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	60da      	str	r2, [r3, #12]
 8009e14:	e005      	b.n	8009e22 <tcp_close_shutdown+0xce>
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	60fb      	str	r3, [r7, #12]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1ef      	bne.n	8009e02 <tcp_close_shutdown+0xae>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	60da      	str	r2, [r3, #12]
 8009e28:	4b37      	ldr	r3, [pc, #220]	; (8009f08 <tcp_close_shutdown+0x1b4>)
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8009e2e:	4b37      	ldr	r3, [pc, #220]	; (8009f0c <tcp_close_shutdown+0x1b8>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d102      	bne.n	8009e3e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009e38:	f003 fd5e 	bl	800d8f8 <tcp_trigger_input_pcb_close>
 8009e3c:	e002      	b.n	8009e44 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f7ff fed6 	bl	8009bf0 <tcp_free>
      }
      return ERR_OK;
 8009e44:	2300      	movs	r3, #0
 8009e46:	e050      	b.n	8009eea <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	7d1b      	ldrb	r3, [r3, #20]
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	d03b      	beq.n	8009ec8 <tcp_close_shutdown+0x174>
 8009e50:	2b02      	cmp	r3, #2
 8009e52:	dc44      	bgt.n	8009ede <tcp_close_shutdown+0x18a>
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d002      	beq.n	8009e5e <tcp_close_shutdown+0x10a>
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d02a      	beq.n	8009eb2 <tcp_close_shutdown+0x15e>
 8009e5c:	e03f      	b.n	8009ede <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	8adb      	ldrh	r3, [r3, #22]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d021      	beq.n	8009eaa <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009e66:	4b2a      	ldr	r3, [pc, #168]	; (8009f10 <tcp_close_shutdown+0x1bc>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d105      	bne.n	8009e7c <tcp_close_shutdown+0x128>
 8009e70:	4b27      	ldr	r3, [pc, #156]	; (8009f10 <tcp_close_shutdown+0x1bc>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	4a26      	ldr	r2, [pc, #152]	; (8009f10 <tcp_close_shutdown+0x1bc>)
 8009e78:	6013      	str	r3, [r2, #0]
 8009e7a:	e013      	b.n	8009ea4 <tcp_close_shutdown+0x150>
 8009e7c:	4b24      	ldr	r3, [pc, #144]	; (8009f10 <tcp_close_shutdown+0x1bc>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	60bb      	str	r3, [r7, #8]
 8009e82:	e00c      	b.n	8009e9e <tcp_close_shutdown+0x14a>
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d104      	bne.n	8009e98 <tcp_close_shutdown+0x144>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	68da      	ldr	r2, [r3, #12]
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	60da      	str	r2, [r3, #12]
 8009e96:	e005      	b.n	8009ea4 <tcp_close_shutdown+0x150>
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	60bb      	str	r3, [r7, #8]
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d1ef      	bne.n	8009e84 <tcp_close_shutdown+0x130>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f7ff fea0 	bl	8009bf0 <tcp_free>
      break;
 8009eb0:	e01a      	b.n	8009ee8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f7ff ff14 	bl	8009ce0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009eb8:	6879      	ldr	r1, [r7, #4]
 8009eba:	4816      	ldr	r0, [pc, #88]	; (8009f14 <tcp_close_shutdown+0x1c0>)
 8009ebc:	f001 f8a8 	bl	800b010 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f7ff feb1 	bl	8009c28 <tcp_free_listen>
      break;
 8009ec6:	e00f      	b.n	8009ee8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009ec8:	6879      	ldr	r1, [r7, #4]
 8009eca:	480e      	ldr	r0, [pc, #56]	; (8009f04 <tcp_close_shutdown+0x1b0>)
 8009ecc:	f001 f8a0 	bl	800b010 <tcp_pcb_remove>
 8009ed0:	4b0d      	ldr	r3, [pc, #52]	; (8009f08 <tcp_close_shutdown+0x1b4>)
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7ff fe8a 	bl	8009bf0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009edc:	e004      	b.n	8009ee8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f81a 	bl	8009f18 <tcp_close_shutdown_fin>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	e000      	b.n	8009eea <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8009ee8:	2300      	movs	r3, #0
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bdb0      	pop	{r4, r5, r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	08015ec4 	.word	0x08015ec4
 8009ef8:	08015f98 	.word	0x08015f98
 8009efc:	08015f08 	.word	0x08015f08
 8009f00:	08015fb8 	.word	0x08015fb8
 8009f04:	2000aecc 	.word	0x2000aecc
 8009f08:	2000aed4 	.word	0x2000aed4
 8009f0c:	2000af0c 	.word	0x2000af0c
 8009f10:	2000aec4 	.word	0x2000aec4
 8009f14:	2000aec8 	.word	0x2000aec8

08009f18 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d106      	bne.n	8009f34 <tcp_close_shutdown_fin+0x1c>
 8009f26:	4b2e      	ldr	r3, [pc, #184]	; (8009fe0 <tcp_close_shutdown_fin+0xc8>)
 8009f28:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009f2c:	492d      	ldr	r1, [pc, #180]	; (8009fe4 <tcp_close_shutdown_fin+0xcc>)
 8009f2e:	482e      	ldr	r0, [pc, #184]	; (8009fe8 <tcp_close_shutdown_fin+0xd0>)
 8009f30:	f009 ff8e 	bl	8013e50 <iprintf>

  switch (pcb->state) {
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	7d1b      	ldrb	r3, [r3, #20]
 8009f38:	2b07      	cmp	r3, #7
 8009f3a:	d020      	beq.n	8009f7e <tcp_close_shutdown_fin+0x66>
 8009f3c:	2b07      	cmp	r3, #7
 8009f3e:	dc2b      	bgt.n	8009f98 <tcp_close_shutdown_fin+0x80>
 8009f40:	2b03      	cmp	r3, #3
 8009f42:	d002      	beq.n	8009f4a <tcp_close_shutdown_fin+0x32>
 8009f44:	2b04      	cmp	r3, #4
 8009f46:	d00d      	beq.n	8009f64 <tcp_close_shutdown_fin+0x4c>
 8009f48:	e026      	b.n	8009f98 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f003 fee6 	bl	800dd1c <tcp_send_fin>
 8009f50:	4603      	mov	r3, r0
 8009f52:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d11f      	bne.n	8009f9c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2205      	movs	r2, #5
 8009f60:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009f62:	e01b      	b.n	8009f9c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f003 fed9 	bl	800dd1c <tcp_send_fin>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d114      	bne.n	8009fa0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2205      	movs	r2, #5
 8009f7a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009f7c:	e010      	b.n	8009fa0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f003 fecc 	bl	800dd1c <tcp_send_fin>
 8009f84:	4603      	mov	r3, r0
 8009f86:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d109      	bne.n	8009fa4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2209      	movs	r2, #9
 8009f94:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009f96:	e005      	b.n	8009fa4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	e01c      	b.n	8009fd6 <tcp_close_shutdown_fin+0xbe>
      break;
 8009f9c:	bf00      	nop
 8009f9e:	e002      	b.n	8009fa6 <tcp_close_shutdown_fin+0x8e>
      break;
 8009fa0:	bf00      	nop
 8009fa2:	e000      	b.n	8009fa6 <tcp_close_shutdown_fin+0x8e>
      break;
 8009fa4:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d103      	bne.n	8009fb6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f003 fff2 	bl	800df98 <tcp_output>
 8009fb4:	e00d      	b.n	8009fd2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8009fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fbe:	d108      	bne.n	8009fd2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	8b5b      	ldrh	r3, [r3, #26]
 8009fc4:	f043 0308 	orr.w	r3, r3, #8
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	e001      	b.n	8009fd6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8009fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	08015ec4 	.word	0x08015ec4
 8009fe4:	08015f74 	.word	0x08015f74
 8009fe8:	08015f08 	.word	0x08015f08

08009fec <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d109      	bne.n	800a00e <tcp_close+0x22>
 8009ffa:	4b0f      	ldr	r3, [pc, #60]	; (800a038 <tcp_close+0x4c>)
 8009ffc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800a000:	490e      	ldr	r1, [pc, #56]	; (800a03c <tcp_close+0x50>)
 800a002:	480f      	ldr	r0, [pc, #60]	; (800a040 <tcp_close+0x54>)
 800a004:	f009 ff24 	bl	8013e50 <iprintf>
 800a008:	f06f 030f 	mvn.w	r3, #15
 800a00c:	e00f      	b.n	800a02e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	7d1b      	ldrb	r3, [r3, #20]
 800a012:	2b01      	cmp	r3, #1
 800a014:	d006      	beq.n	800a024 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	8b5b      	ldrh	r3, [r3, #26]
 800a01a:	f043 0310 	orr.w	r3, r3, #16
 800a01e:	b29a      	uxth	r2, r3
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a024:	2101      	movs	r1, #1
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f7ff fe94 	bl	8009d54 <tcp_close_shutdown>
 800a02c:	4603      	mov	r3, r0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3708      	adds	r7, #8
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	08015ec4 	.word	0x08015ec4
 800a03c:	08015fd4 	.word	0x08015fd4
 800a040:	08015f08 	.word	0x08015f08

0800a044 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b08e      	sub	sp, #56	; 0x38
 800a048:	af04      	add	r7, sp, #16
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d107      	bne.n	800a064 <tcp_abandon+0x20>
 800a054:	4b52      	ldr	r3, [pc, #328]	; (800a1a0 <tcp_abandon+0x15c>)
 800a056:	f240 223d 	movw	r2, #573	; 0x23d
 800a05a:	4952      	ldr	r1, [pc, #328]	; (800a1a4 <tcp_abandon+0x160>)
 800a05c:	4852      	ldr	r0, [pc, #328]	; (800a1a8 <tcp_abandon+0x164>)
 800a05e:	f009 fef7 	bl	8013e50 <iprintf>
 800a062:	e099      	b.n	800a198 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	7d1b      	ldrb	r3, [r3, #20]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d106      	bne.n	800a07a <tcp_abandon+0x36>
 800a06c:	4b4c      	ldr	r3, [pc, #304]	; (800a1a0 <tcp_abandon+0x15c>)
 800a06e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800a072:	494e      	ldr	r1, [pc, #312]	; (800a1ac <tcp_abandon+0x168>)
 800a074:	484c      	ldr	r0, [pc, #304]	; (800a1a8 <tcp_abandon+0x164>)
 800a076:	f009 feeb 	bl	8013e50 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	7d1b      	ldrb	r3, [r3, #20]
 800a07e:	2b0a      	cmp	r3, #10
 800a080:	d107      	bne.n	800a092 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a082:	6879      	ldr	r1, [r7, #4]
 800a084:	484a      	ldr	r0, [pc, #296]	; (800a1b0 <tcp_abandon+0x16c>)
 800a086:	f000 ffc3 	bl	800b010 <tcp_pcb_remove>
    tcp_free(pcb);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f7ff fdb0 	bl	8009bf0 <tcp_free>
 800a090:	e082      	b.n	800a198 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800a092:	2300      	movs	r3, #0
 800a094:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800a096:	2300      	movs	r3, #0
 800a098:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a09e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0ac:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	7d1b      	ldrb	r3, [r3, #20]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d126      	bne.n	800a10a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	8adb      	ldrh	r3, [r3, #22]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d02e      	beq.n	800a122 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a0c4:	4b3b      	ldr	r3, [pc, #236]	; (800a1b4 <tcp_abandon+0x170>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d105      	bne.n	800a0da <tcp_abandon+0x96>
 800a0ce:	4b39      	ldr	r3, [pc, #228]	; (800a1b4 <tcp_abandon+0x170>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	4a37      	ldr	r2, [pc, #220]	; (800a1b4 <tcp_abandon+0x170>)
 800a0d6:	6013      	str	r3, [r2, #0]
 800a0d8:	e013      	b.n	800a102 <tcp_abandon+0xbe>
 800a0da:	4b36      	ldr	r3, [pc, #216]	; (800a1b4 <tcp_abandon+0x170>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	61fb      	str	r3, [r7, #28]
 800a0e0:	e00c      	b.n	800a0fc <tcp_abandon+0xb8>
 800a0e2:	69fb      	ldr	r3, [r7, #28]
 800a0e4:	68db      	ldr	r3, [r3, #12]
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d104      	bne.n	800a0f6 <tcp_abandon+0xb2>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	68da      	ldr	r2, [r3, #12]
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	60da      	str	r2, [r3, #12]
 800a0f4:	e005      	b.n	800a102 <tcp_abandon+0xbe>
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	61fb      	str	r3, [r7, #28]
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d1ef      	bne.n	800a0e2 <tcp_abandon+0x9e>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	60da      	str	r2, [r3, #12]
 800a108:	e00b      	b.n	800a122 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	8adb      	ldrh	r3, [r3, #22]
 800a112:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a114:	6879      	ldr	r1, [r7, #4]
 800a116:	4828      	ldr	r0, [pc, #160]	; (800a1b8 <tcp_abandon+0x174>)
 800a118:	f000 ff7a 	bl	800b010 <tcp_pcb_remove>
 800a11c:	4b27      	ldr	r3, [pc, #156]	; (800a1bc <tcp_abandon+0x178>)
 800a11e:	2201      	movs	r2, #1
 800a120:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a126:	2b00      	cmp	r3, #0
 800a128:	d004      	beq.n	800a134 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a12e:	4618      	mov	r0, r3
 800a130:	f000 fd1c 	bl	800ab6c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d004      	beq.n	800a146 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a140:	4618      	mov	r0, r3
 800a142:	f000 fd13 	bl	800ab6c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d004      	beq.n	800a158 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a152:	4618      	mov	r0, r3
 800a154:	f000 fd0a 	bl	800ab6c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800a158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d00e      	beq.n	800a17c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a15e:	6879      	ldr	r1, [r7, #4]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	3304      	adds	r3, #4
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	8b12      	ldrh	r2, [r2, #24]
 800a168:	9202      	str	r2, [sp, #8]
 800a16a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a16c:	9201      	str	r2, [sp, #4]
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	460b      	mov	r3, r1
 800a172:	697a      	ldr	r2, [r7, #20]
 800a174:	69b9      	ldr	r1, [r7, #24]
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f004 fcc2 	bl	800eb00 <tcp_rst>
    }
    last_state = pcb->state;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	7d1b      	ldrb	r3, [r3, #20]
 800a180:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f7ff fd34 	bl	8009bf0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d004      	beq.n	800a198 <tcp_abandon+0x154>
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	f06f 010c 	mvn.w	r1, #12
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	4798      	blx	r3
  }
}
 800a198:	3728      	adds	r7, #40	; 0x28
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	08015ec4 	.word	0x08015ec4
 800a1a4:	08016008 	.word	0x08016008
 800a1a8:	08015f08 	.word	0x08015f08
 800a1ac:	08016024 	.word	0x08016024
 800a1b0:	2000aed0 	.word	0x2000aed0
 800a1b4:	2000aec4 	.word	0x2000aec4
 800a1b8:	2000aecc 	.word	0x2000aecc
 800a1bc:	2000aed4 	.word	0x2000aed4

0800a1c0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a1c8:	2101      	movs	r1, #1
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f7ff ff3a 	bl	800a044 <tcp_abandon>
}
 800a1d0:	bf00      	nop
 800a1d2:	3708      	adds	r7, #8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d106      	bne.n	800a1f4 <tcp_update_rcv_ann_wnd+0x1c>
 800a1e6:	4b25      	ldr	r3, [pc, #148]	; (800a27c <tcp_update_rcv_ann_wnd+0xa4>)
 800a1e8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a1ec:	4924      	ldr	r1, [pc, #144]	; (800a280 <tcp_update_rcv_ann_wnd+0xa8>)
 800a1ee:	4825      	ldr	r0, [pc, #148]	; (800a284 <tcp_update_rcv_ann_wnd+0xac>)
 800a1f0:	f009 fe2e 	bl	8013e50 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a1fc:	4413      	add	r3, r2
 800a1fe:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a208:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800a20c:	bf28      	it	cs
 800a20e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800a212:	b292      	uxth	r2, r2
 800a214:	4413      	add	r3, r2
 800a216:	68fa      	ldr	r2, [r7, #12]
 800a218:	1ad3      	subs	r3, r2, r3
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	db08      	blt.n	800a230 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	1ad3      	subs	r3, r2, r3
 800a22e:	e020      	b.n	800a272 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a238:	1ad3      	subs	r3, r2, r3
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	dd03      	ble.n	800a246 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a244:	e014      	b.n	800a270 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24e:	1ad3      	subs	r3, r2, r3
 800a250:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a258:	d306      	bcc.n	800a268 <tcp_update_rcv_ann_wnd+0x90>
 800a25a:	4b08      	ldr	r3, [pc, #32]	; (800a27c <tcp_update_rcv_ann_wnd+0xa4>)
 800a25c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800a260:	4909      	ldr	r1, [pc, #36]	; (800a288 <tcp_update_rcv_ann_wnd+0xb0>)
 800a262:	4808      	ldr	r0, [pc, #32]	; (800a284 <tcp_update_rcv_ann_wnd+0xac>)
 800a264:	f009 fdf4 	bl	8013e50 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	b29a      	uxth	r2, r3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800a270:	2300      	movs	r3, #0
  }
}
 800a272:	4618      	mov	r0, r3
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	08015ec4 	.word	0x08015ec4
 800a280:	08016120 	.word	0x08016120
 800a284:	08015f08 	.word	0x08015f08
 800a288:	08016144 	.word	0x08016144

0800a28c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	460b      	mov	r3, r1
 800a296:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d107      	bne.n	800a2ae <tcp_recved+0x22>
 800a29e:	4b1f      	ldr	r3, [pc, #124]	; (800a31c <tcp_recved+0x90>)
 800a2a0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800a2a4:	491e      	ldr	r1, [pc, #120]	; (800a320 <tcp_recved+0x94>)
 800a2a6:	481f      	ldr	r0, [pc, #124]	; (800a324 <tcp_recved+0x98>)
 800a2a8:	f009 fdd2 	bl	8013e50 <iprintf>
 800a2ac:	e032      	b.n	800a314 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	7d1b      	ldrb	r3, [r3, #20]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d106      	bne.n	800a2c4 <tcp_recved+0x38>
 800a2b6:	4b19      	ldr	r3, [pc, #100]	; (800a31c <tcp_recved+0x90>)
 800a2b8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800a2bc:	491a      	ldr	r1, [pc, #104]	; (800a328 <tcp_recved+0x9c>)
 800a2be:	4819      	ldr	r0, [pc, #100]	; (800a324 <tcp_recved+0x98>)
 800a2c0:	f009 fdc6 	bl	8013e50 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a2c8:	887b      	ldrh	r3, [r7, #2]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a2ce:	89fb      	ldrh	r3, [r7, #14]
 800a2d0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a2d4:	d804      	bhi.n	800a2e0 <tcp_recved+0x54>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2da:	89fa      	ldrh	r2, [r7, #14]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d204      	bcs.n	800a2ea <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a2e6:	851a      	strh	r2, [r3, #40]	; 0x28
 800a2e8:	e002      	b.n	800a2f0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	89fa      	ldrh	r2, [r7, #14]
 800a2ee:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f7ff ff71 	bl	800a1d8 <tcp_update_rcv_ann_wnd>
 800a2f6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a2fe:	d309      	bcc.n	800a314 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	8b5b      	ldrh	r3, [r3, #26]
 800a304:	f043 0302 	orr.w	r3, r3, #2
 800a308:	b29a      	uxth	r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f003 fe42 	bl	800df98 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	08015ec4 	.word	0x08015ec4
 800a320:	08016160 	.word	0x08016160
 800a324:	08015f08 	.word	0x08015f08
 800a328:	08016178 	.word	0x08016178

0800a32c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a32c:	b5b0      	push	{r4, r5, r7, lr}
 800a32e:	b090      	sub	sp, #64	; 0x40
 800a330:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a332:	2300      	movs	r3, #0
 800a334:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800a338:	4b94      	ldr	r3, [pc, #592]	; (800a58c <tcp_slowtmr+0x260>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	3301      	adds	r3, #1
 800a33e:	4a93      	ldr	r2, [pc, #588]	; (800a58c <tcp_slowtmr+0x260>)
 800a340:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a342:	4b93      	ldr	r3, [pc, #588]	; (800a590 <tcp_slowtmr+0x264>)
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	3301      	adds	r3, #1
 800a348:	b2da      	uxtb	r2, r3
 800a34a:	4b91      	ldr	r3, [pc, #580]	; (800a590 <tcp_slowtmr+0x264>)
 800a34c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a34e:	2300      	movs	r3, #0
 800a350:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800a352:	4b90      	ldr	r3, [pc, #576]	; (800a594 <tcp_slowtmr+0x268>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a358:	e29d      	b.n	800a896 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35c:	7d1b      	ldrb	r3, [r3, #20]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d106      	bne.n	800a370 <tcp_slowtmr+0x44>
 800a362:	4b8d      	ldr	r3, [pc, #564]	; (800a598 <tcp_slowtmr+0x26c>)
 800a364:	f240 42be 	movw	r2, #1214	; 0x4be
 800a368:	498c      	ldr	r1, [pc, #560]	; (800a59c <tcp_slowtmr+0x270>)
 800a36a:	488d      	ldr	r0, [pc, #564]	; (800a5a0 <tcp_slowtmr+0x274>)
 800a36c:	f009 fd70 	bl	8013e50 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a372:	7d1b      	ldrb	r3, [r3, #20]
 800a374:	2b01      	cmp	r3, #1
 800a376:	d106      	bne.n	800a386 <tcp_slowtmr+0x5a>
 800a378:	4b87      	ldr	r3, [pc, #540]	; (800a598 <tcp_slowtmr+0x26c>)
 800a37a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a37e:	4989      	ldr	r1, [pc, #548]	; (800a5a4 <tcp_slowtmr+0x278>)
 800a380:	4887      	ldr	r0, [pc, #540]	; (800a5a0 <tcp_slowtmr+0x274>)
 800a382:	f009 fd65 	bl	8013e50 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a388:	7d1b      	ldrb	r3, [r3, #20]
 800a38a:	2b0a      	cmp	r3, #10
 800a38c:	d106      	bne.n	800a39c <tcp_slowtmr+0x70>
 800a38e:	4b82      	ldr	r3, [pc, #520]	; (800a598 <tcp_slowtmr+0x26c>)
 800a390:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a394:	4984      	ldr	r1, [pc, #528]	; (800a5a8 <tcp_slowtmr+0x27c>)
 800a396:	4882      	ldr	r0, [pc, #520]	; (800a5a0 <tcp_slowtmr+0x274>)
 800a398:	f009 fd5a 	bl	8013e50 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39e:	7f9a      	ldrb	r2, [r3, #30]
 800a3a0:	4b7b      	ldr	r3, [pc, #492]	; (800a590 <tcp_slowtmr+0x264>)
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d105      	bne.n	800a3b4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3aa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800a3b2:	e270      	b.n	800a896 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a3b4:	4b76      	ldr	r3, [pc, #472]	; (800a590 <tcp_slowtmr+0x264>)
 800a3b6:	781a      	ldrb	r2, [r3, #0]
 800a3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ba:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ca:	7d1b      	ldrb	r3, [r3, #20]
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	d10a      	bne.n	800a3e6 <tcp_slowtmr+0xba>
 800a3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a3d6:	2b05      	cmp	r3, #5
 800a3d8:	d905      	bls.n	800a3e6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800a3da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3de:	3301      	adds	r3, #1
 800a3e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a3e4:	e11e      	b.n	800a624 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a3ec:	2b0b      	cmp	r3, #11
 800a3ee:	d905      	bls.n	800a3fc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800a3f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a3fa:	e113      	b.n	800a624 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a402:	2b00      	cmp	r3, #0
 800a404:	d075      	beq.n	800a4f2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d006      	beq.n	800a41c <tcp_slowtmr+0xf0>
 800a40e:	4b62      	ldr	r3, [pc, #392]	; (800a598 <tcp_slowtmr+0x26c>)
 800a410:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a414:	4965      	ldr	r1, [pc, #404]	; (800a5ac <tcp_slowtmr+0x280>)
 800a416:	4862      	ldr	r0, [pc, #392]	; (800a5a0 <tcp_slowtmr+0x274>)
 800a418:	f009 fd1a 	bl	8013e50 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a420:	2b00      	cmp	r3, #0
 800a422:	d106      	bne.n	800a432 <tcp_slowtmr+0x106>
 800a424:	4b5c      	ldr	r3, [pc, #368]	; (800a598 <tcp_slowtmr+0x26c>)
 800a426:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a42a:	4961      	ldr	r1, [pc, #388]	; (800a5b0 <tcp_slowtmr+0x284>)
 800a42c:	485c      	ldr	r0, [pc, #368]	; (800a5a0 <tcp_slowtmr+0x274>)
 800a42e:	f009 fd0f 	bl	8013e50 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a434:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a438:	2b0b      	cmp	r3, #11
 800a43a:	d905      	bls.n	800a448 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800a43c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a440:	3301      	adds	r3, #1
 800a442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a446:	e0ed      	b.n	800a624 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a44a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a44e:	3b01      	subs	r3, #1
 800a450:	4a58      	ldr	r2, [pc, #352]	; (800a5b4 <tcp_slowtmr+0x288>)
 800a452:	5cd3      	ldrb	r3, [r2, r3]
 800a454:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800a456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a458:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a45c:	7c7a      	ldrb	r2, [r7, #17]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d907      	bls.n	800a472 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800a462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a464:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a468:	3301      	adds	r3, #1
 800a46a:	b2da      	uxtb	r2, r3
 800a46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800a472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a474:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a478:	7c7a      	ldrb	r2, [r7, #17]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	f200 80d2 	bhi.w	800a624 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800a480:	2301      	movs	r3, #1
 800a482:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800a484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a486:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d108      	bne.n	800a4a0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a48e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a490:	f004 fc2a 	bl	800ece8 <tcp_zero_window_probe>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d014      	beq.n	800a4c4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800a49a:	2300      	movs	r3, #0
 800a49c:	623b      	str	r3, [r7, #32]
 800a49e:	e011      	b.n	800a4c4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4aa:	f003 faef 	bl	800da8c <tcp_split_unsent_seg>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d107      	bne.n	800a4c4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800a4b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4b6:	f003 fd6f 	bl	800df98 <tcp_output>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d101      	bne.n	800a4c4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800a4c4:	6a3b      	ldr	r3, [r7, #32]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	f000 80ac 	beq.w	800a624 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800a4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a4da:	2b06      	cmp	r3, #6
 800a4dc:	f200 80a2 	bhi.w	800a624 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800a4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	b2da      	uxtb	r2, r3
 800a4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800a4f0:	e098      	b.n	800a624 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	db0f      	blt.n	800a51c <tcp_slowtmr+0x1f0>
 800a4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a502:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a506:	4293      	cmp	r3, r2
 800a508:	d008      	beq.n	800a51c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800a50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a510:	b29b      	uxth	r3, r3
 800a512:	3301      	adds	r3, #1
 800a514:	b29b      	uxth	r3, r3
 800a516:	b21a      	sxth	r2, r3
 800a518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800a51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a524:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a528:	429a      	cmp	r2, r3
 800a52a:	db7b      	blt.n	800a624 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a52c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a52e:	f004 f825 	bl	800e57c <tcp_rexmit_rto_prepare>
 800a532:	4603      	mov	r3, r0
 800a534:	2b00      	cmp	r3, #0
 800a536:	d007      	beq.n	800a548 <tcp_slowtmr+0x21c>
 800a538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d171      	bne.n	800a624 <tcp_slowtmr+0x2f8>
 800a540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a544:	2b00      	cmp	r3, #0
 800a546:	d06d      	beq.n	800a624 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800a548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54a:	7d1b      	ldrb	r3, [r3, #20]
 800a54c:	2b02      	cmp	r3, #2
 800a54e:	d03a      	beq.n	800a5c6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a552:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a556:	2b0c      	cmp	r3, #12
 800a558:	bf28      	it	cs
 800a55a:	230c      	movcs	r3, #12
 800a55c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a560:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a564:	10db      	asrs	r3, r3, #3
 800a566:	b21b      	sxth	r3, r3
 800a568:	461a      	mov	r2, r3
 800a56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a570:	4413      	add	r3, r2
 800a572:	7efa      	ldrb	r2, [r7, #27]
 800a574:	4910      	ldr	r1, [pc, #64]	; (800a5b8 <tcp_slowtmr+0x28c>)
 800a576:	5c8a      	ldrb	r2, [r1, r2]
 800a578:	4093      	lsls	r3, r2
 800a57a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a582:	4293      	cmp	r3, r2
 800a584:	dc1a      	bgt.n	800a5bc <tcp_slowtmr+0x290>
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	b21a      	sxth	r2, r3
 800a58a:	e019      	b.n	800a5c0 <tcp_slowtmr+0x294>
 800a58c:	2000aec0 	.word	0x2000aec0
 800a590:	2000aed6 	.word	0x2000aed6
 800a594:	2000aecc 	.word	0x2000aecc
 800a598:	08015ec4 	.word	0x08015ec4
 800a59c:	08016208 	.word	0x08016208
 800a5a0:	08015f08 	.word	0x08015f08
 800a5a4:	08016234 	.word	0x08016234
 800a5a8:	08016260 	.word	0x08016260
 800a5ac:	08016290 	.word	0x08016290
 800a5b0:	080162c4 	.word	0x080162c4
 800a5b4:	0801a764 	.word	0x0801a764
 800a5b8:	0801a754 	.word	0x0801a754
 800a5bc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800a5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	bf28      	it	cs
 800a5dc:	4613      	movcs	r3, r2
 800a5de:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800a5e0:	8a7b      	ldrh	r3, [r7, #18]
 800a5e2:	085b      	lsrs	r3, r3, #1
 800a5e4:	b29a      	uxth	r2, r3
 800a5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a5f6:	005b      	lsls	r3, r3, #1
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d206      	bcs.n	800a60c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a600:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a602:	005b      	lsls	r3, r3, #1
 800a604:	b29a      	uxth	r2, r3
 800a606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a608:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800a60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a612:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800a616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a618:	2200      	movs	r2, #0
 800a61a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800a61e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a620:	f004 f81c 	bl	800e65c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a626:	7d1b      	ldrb	r3, [r3, #20]
 800a628:	2b06      	cmp	r3, #6
 800a62a:	d111      	bne.n	800a650 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62e:	8b5b      	ldrh	r3, [r3, #26]
 800a630:	f003 0310 	and.w	r3, r3, #16
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00b      	beq.n	800a650 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a638:	4b9c      	ldr	r3, [pc, #624]	; (800a8ac <tcp_slowtmr+0x580>)
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63e:	6a1b      	ldr	r3, [r3, #32]
 800a640:	1ad3      	subs	r3, r2, r3
 800a642:	2b28      	cmp	r3, #40	; 0x28
 800a644:	d904      	bls.n	800a650 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800a646:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a64a:	3301      	adds	r3, #1
 800a64c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a652:	7a5b      	ldrb	r3, [r3, #9]
 800a654:	f003 0308 	and.w	r3, r3, #8
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d04a      	beq.n	800a6f2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800a65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a660:	2b04      	cmp	r3, #4
 800a662:	d003      	beq.n	800a66c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800a664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a666:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800a668:	2b07      	cmp	r3, #7
 800a66a:	d142      	bne.n	800a6f2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a66c:	4b8f      	ldr	r3, [pc, #572]	; (800a8ac <tcp_slowtmr+0x580>)
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a672:	6a1b      	ldr	r3, [r3, #32]
 800a674:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a678:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a67c:	4b8c      	ldr	r3, [pc, #560]	; (800a8b0 <tcp_slowtmr+0x584>)
 800a67e:	440b      	add	r3, r1
 800a680:	498c      	ldr	r1, [pc, #560]	; (800a8b4 <tcp_slowtmr+0x588>)
 800a682:	fba1 1303 	umull	r1, r3, r1, r3
 800a686:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a688:	429a      	cmp	r2, r3
 800a68a:	d90a      	bls.n	800a6a2 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a68c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a690:	3301      	adds	r3, #1
 800a692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800a696:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a69a:	3301      	adds	r3, #1
 800a69c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a6a0:	e027      	b.n	800a6f2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a6a2:	4b82      	ldr	r3, [pc, #520]	; (800a8ac <tcp_slowtmr+0x580>)
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a8:	6a1b      	ldr	r3, [r3, #32]
 800a6aa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ae:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	4b7f      	ldr	r3, [pc, #508]	; (800a8b8 <tcp_slowtmr+0x58c>)
 800a6bc:	fb00 f303 	mul.w	r3, r0, r3
 800a6c0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800a6c2:	497c      	ldr	r1, [pc, #496]	; (800a8b4 <tcp_slowtmr+0x588>)
 800a6c4:	fba1 1303 	umull	r1, r3, r1, r3
 800a6c8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d911      	bls.n	800a6f2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800a6ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6d0:	f004 faca 	bl	800ec68 <tcp_keepalive>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800a6da:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d107      	bne.n	800a6f2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800a6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	b2da      	uxtb	r2, r3
 800a6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ee:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d011      	beq.n	800a71e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a6fa:	4b6c      	ldr	r3, [pc, #432]	; (800a8ac <tcp_slowtmr+0x580>)
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a700:	6a1b      	ldr	r3, [r3, #32]
 800a702:	1ad2      	subs	r2, r2, r3
 800a704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a706:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a70a:	4619      	mov	r1, r3
 800a70c:	460b      	mov	r3, r1
 800a70e:	005b      	lsls	r3, r3, #1
 800a710:	440b      	add	r3, r1
 800a712:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a714:	429a      	cmp	r2, r3
 800a716:	d302      	bcc.n	800a71e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800a718:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a71a:	f000 fddd 	bl	800b2d8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a720:	7d1b      	ldrb	r3, [r3, #20]
 800a722:	2b03      	cmp	r3, #3
 800a724:	d10b      	bne.n	800a73e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a726:	4b61      	ldr	r3, [pc, #388]	; (800a8ac <tcp_slowtmr+0x580>)
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a72c:	6a1b      	ldr	r3, [r3, #32]
 800a72e:	1ad3      	subs	r3, r2, r3
 800a730:	2b28      	cmp	r3, #40	; 0x28
 800a732:	d904      	bls.n	800a73e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a738:	3301      	adds	r3, #1
 800a73a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a740:	7d1b      	ldrb	r3, [r3, #20]
 800a742:	2b09      	cmp	r3, #9
 800a744:	d10b      	bne.n	800a75e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a746:	4b59      	ldr	r3, [pc, #356]	; (800a8ac <tcp_slowtmr+0x580>)
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a74c:	6a1b      	ldr	r3, [r3, #32]
 800a74e:	1ad3      	subs	r3, r2, r3
 800a750:	2bf0      	cmp	r3, #240	; 0xf0
 800a752:	d904      	bls.n	800a75e <tcp_slowtmr+0x432>
        ++pcb_remove;
 800a754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a758:	3301      	adds	r3, #1
 800a75a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a75e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a762:	2b00      	cmp	r3, #0
 800a764:	d060      	beq.n	800a828 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a76c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a76e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a770:	f000 fbfe 	bl	800af70 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a776:	2b00      	cmp	r3, #0
 800a778:	d010      	beq.n	800a79c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a77a:	4b50      	ldr	r3, [pc, #320]	; (800a8bc <tcp_slowtmr+0x590>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a780:	429a      	cmp	r2, r3
 800a782:	d106      	bne.n	800a792 <tcp_slowtmr+0x466>
 800a784:	4b4e      	ldr	r3, [pc, #312]	; (800a8c0 <tcp_slowtmr+0x594>)
 800a786:	f240 526d 	movw	r2, #1389	; 0x56d
 800a78a:	494e      	ldr	r1, [pc, #312]	; (800a8c4 <tcp_slowtmr+0x598>)
 800a78c:	484e      	ldr	r0, [pc, #312]	; (800a8c8 <tcp_slowtmr+0x59c>)
 800a78e:	f009 fb5f 	bl	8013e50 <iprintf>
        prev->next = pcb->next;
 800a792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a794:	68da      	ldr	r2, [r3, #12]
 800a796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a798:	60da      	str	r2, [r3, #12]
 800a79a:	e00f      	b.n	800a7bc <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a79c:	4b47      	ldr	r3, [pc, #284]	; (800a8bc <tcp_slowtmr+0x590>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d006      	beq.n	800a7b4 <tcp_slowtmr+0x488>
 800a7a6:	4b46      	ldr	r3, [pc, #280]	; (800a8c0 <tcp_slowtmr+0x594>)
 800a7a8:	f240 5271 	movw	r2, #1393	; 0x571
 800a7ac:	4947      	ldr	r1, [pc, #284]	; (800a8cc <tcp_slowtmr+0x5a0>)
 800a7ae:	4846      	ldr	r0, [pc, #280]	; (800a8c8 <tcp_slowtmr+0x59c>)
 800a7b0:	f009 fb4e 	bl	8013e50 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	4a40      	ldr	r2, [pc, #256]	; (800a8bc <tcp_slowtmr+0x590>)
 800a7ba:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a7bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d013      	beq.n	800a7ec <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ca:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a7cc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800a7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d0:	3304      	adds	r3, #4
 800a7d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7d4:	8ad2      	ldrh	r2, [r2, #22]
 800a7d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a7d8:	8b09      	ldrh	r1, [r1, #24]
 800a7da:	9102      	str	r1, [sp, #8]
 800a7dc:	9201      	str	r2, [sp, #4]
 800a7de:	9300      	str	r3, [sp, #0]
 800a7e0:	462b      	mov	r3, r5
 800a7e2:	4622      	mov	r2, r4
 800a7e4:	4601      	mov	r1, r0
 800a7e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7e8:	f004 f98a 	bl	800eb00 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ee:	691b      	ldr	r3, [r3, #16]
 800a7f0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f4:	7d1b      	ldrb	r3, [r3, #20]
 800a7f6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a802:	6838      	ldr	r0, [r7, #0]
 800a804:	f7ff f9f4 	bl	8009bf0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800a808:	4b31      	ldr	r3, [pc, #196]	; (800a8d0 <tcp_slowtmr+0x5a4>)
 800a80a:	2200      	movs	r2, #0
 800a80c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d004      	beq.n	800a81e <tcp_slowtmr+0x4f2>
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f06f 010c 	mvn.w	r1, #12
 800a81a:	68b8      	ldr	r0, [r7, #8]
 800a81c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a81e:	4b2c      	ldr	r3, [pc, #176]	; (800a8d0 <tcp_slowtmr+0x5a4>)
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d037      	beq.n	800a896 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800a826:	e592      	b.n	800a34e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a834:	7f1b      	ldrb	r3, [r3, #28]
 800a836:	3301      	adds	r3, #1
 800a838:	b2da      	uxtb	r2, r3
 800a83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a840:	7f1a      	ldrb	r2, [r3, #28]
 800a842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a844:	7f5b      	ldrb	r3, [r3, #29]
 800a846:	429a      	cmp	r2, r3
 800a848:	d325      	bcc.n	800a896 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800a84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84c:	2200      	movs	r2, #0
 800a84e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a850:	4b1f      	ldr	r3, [pc, #124]	; (800a8d0 <tcp_slowtmr+0x5a4>)
 800a852:	2200      	movs	r2, #0
 800a854:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d00b      	beq.n	800a878 <tcp_slowtmr+0x54c>
 800a860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a868:	6912      	ldr	r2, [r2, #16]
 800a86a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a86c:	4610      	mov	r0, r2
 800a86e:	4798      	blx	r3
 800a870:	4603      	mov	r3, r0
 800a872:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a876:	e002      	b.n	800a87e <tcp_slowtmr+0x552>
 800a878:	2300      	movs	r3, #0
 800a87a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800a87e:	4b14      	ldr	r3, [pc, #80]	; (800a8d0 <tcp_slowtmr+0x5a4>)
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d000      	beq.n	800a888 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800a886:	e562      	b.n	800a34e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a888:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d102      	bne.n	800a896 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800a890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a892:	f003 fb81 	bl	800df98 <tcp_output>
  while (pcb != NULL) {
 800a896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f47f ad5e 	bne.w	800a35a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800a8a2:	4b0c      	ldr	r3, [pc, #48]	; (800a8d4 <tcp_slowtmr+0x5a8>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a8a8:	e069      	b.n	800a97e <tcp_slowtmr+0x652>
 800a8aa:	bf00      	nop
 800a8ac:	2000aec0 	.word	0x2000aec0
 800a8b0:	000a4cb8 	.word	0x000a4cb8
 800a8b4:	10624dd3 	.word	0x10624dd3
 800a8b8:	000124f8 	.word	0x000124f8
 800a8bc:	2000aecc 	.word	0x2000aecc
 800a8c0:	08015ec4 	.word	0x08015ec4
 800a8c4:	080162fc 	.word	0x080162fc
 800a8c8:	08015f08 	.word	0x08015f08
 800a8cc:	08016328 	.word	0x08016328
 800a8d0:	2000aed4 	.word	0x2000aed4
 800a8d4:	2000aed0 	.word	0x2000aed0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8da:	7d1b      	ldrb	r3, [r3, #20]
 800a8dc:	2b0a      	cmp	r3, #10
 800a8de:	d006      	beq.n	800a8ee <tcp_slowtmr+0x5c2>
 800a8e0:	4b2b      	ldr	r3, [pc, #172]	; (800a990 <tcp_slowtmr+0x664>)
 800a8e2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a8e6:	492b      	ldr	r1, [pc, #172]	; (800a994 <tcp_slowtmr+0x668>)
 800a8e8:	482b      	ldr	r0, [pc, #172]	; (800a998 <tcp_slowtmr+0x66c>)
 800a8ea:	f009 fab1 	bl	8013e50 <iprintf>
    pcb_remove = 0;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a8f4:	4b29      	ldr	r3, [pc, #164]	; (800a99c <tcp_slowtmr+0x670>)
 800a8f6:	681a      	ldr	r2, [r3, #0]
 800a8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8fa:	6a1b      	ldr	r3, [r3, #32]
 800a8fc:	1ad3      	subs	r3, r2, r3
 800a8fe:	2bf0      	cmp	r3, #240	; 0xf0
 800a900:	d904      	bls.n	800a90c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800a902:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a906:	3301      	adds	r3, #1
 800a908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a90c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a910:	2b00      	cmp	r3, #0
 800a912:	d02f      	beq.n	800a974 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a914:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a916:	f000 fb2b 	bl	800af70 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d010      	beq.n	800a942 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a920:	4b1f      	ldr	r3, [pc, #124]	; (800a9a0 <tcp_slowtmr+0x674>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a926:	429a      	cmp	r2, r3
 800a928:	d106      	bne.n	800a938 <tcp_slowtmr+0x60c>
 800a92a:	4b19      	ldr	r3, [pc, #100]	; (800a990 <tcp_slowtmr+0x664>)
 800a92c:	f240 52af 	movw	r2, #1455	; 0x5af
 800a930:	491c      	ldr	r1, [pc, #112]	; (800a9a4 <tcp_slowtmr+0x678>)
 800a932:	4819      	ldr	r0, [pc, #100]	; (800a998 <tcp_slowtmr+0x66c>)
 800a934:	f009 fa8c 	bl	8013e50 <iprintf>
        prev->next = pcb->next;
 800a938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a93a:	68da      	ldr	r2, [r3, #12]
 800a93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93e:	60da      	str	r2, [r3, #12]
 800a940:	e00f      	b.n	800a962 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a942:	4b17      	ldr	r3, [pc, #92]	; (800a9a0 <tcp_slowtmr+0x674>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a948:	429a      	cmp	r2, r3
 800a94a:	d006      	beq.n	800a95a <tcp_slowtmr+0x62e>
 800a94c:	4b10      	ldr	r3, [pc, #64]	; (800a990 <tcp_slowtmr+0x664>)
 800a94e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a952:	4915      	ldr	r1, [pc, #84]	; (800a9a8 <tcp_slowtmr+0x67c>)
 800a954:	4810      	ldr	r0, [pc, #64]	; (800a998 <tcp_slowtmr+0x66c>)
 800a956:	f009 fa7b 	bl	8013e50 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	4a10      	ldr	r2, [pc, #64]	; (800a9a0 <tcp_slowtmr+0x674>)
 800a960:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a964:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800a966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a96c:	69f8      	ldr	r0, [r7, #28]
 800a96e:	f7ff f93f 	bl	8009bf0 <tcp_free>
 800a972:	e004      	b.n	800a97e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800a974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a976:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a97a:	68db      	ldr	r3, [r3, #12]
 800a97c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a980:	2b00      	cmp	r3, #0
 800a982:	d1a9      	bne.n	800a8d8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800a984:	bf00      	nop
 800a986:	bf00      	nop
 800a988:	3730      	adds	r7, #48	; 0x30
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bdb0      	pop	{r4, r5, r7, pc}
 800a98e:	bf00      	nop
 800a990:	08015ec4 	.word	0x08015ec4
 800a994:	08016354 	.word	0x08016354
 800a998:	08015f08 	.word	0x08015f08
 800a99c:	2000aec0 	.word	0x2000aec0
 800a9a0:	2000aed0 	.word	0x2000aed0
 800a9a4:	08016384 	.word	0x08016384
 800a9a8:	080163ac 	.word	0x080163ac

0800a9ac <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a9b2:	4b2d      	ldr	r3, [pc, #180]	; (800aa68 <tcp_fasttmr+0xbc>)
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	b2da      	uxtb	r2, r3
 800a9ba:	4b2b      	ldr	r3, [pc, #172]	; (800aa68 <tcp_fasttmr+0xbc>)
 800a9bc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a9be:	4b2b      	ldr	r3, [pc, #172]	; (800aa6c <tcp_fasttmr+0xc0>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a9c4:	e048      	b.n	800aa58 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	7f9a      	ldrb	r2, [r3, #30]
 800a9ca:	4b27      	ldr	r3, [pc, #156]	; (800aa68 <tcp_fasttmr+0xbc>)
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d03f      	beq.n	800aa52 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a9d2:	4b25      	ldr	r3, [pc, #148]	; (800aa68 <tcp_fasttmr+0xbc>)
 800a9d4:	781a      	ldrb	r2, [r3, #0]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	8b5b      	ldrh	r3, [r3, #26]
 800a9de:	f003 0301 	and.w	r3, r3, #1
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d010      	beq.n	800aa08 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	8b5b      	ldrh	r3, [r3, #26]
 800a9ea:	f043 0302 	orr.w	r3, r3, #2
 800a9ee:	b29a      	uxth	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f003 facf 	bl	800df98 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	8b5b      	ldrh	r3, [r3, #26]
 800a9fe:	f023 0303 	bic.w	r3, r3, #3
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	8b5b      	ldrh	r3, [r3, #26]
 800aa0c:	f003 0308 	and.w	r3, r3, #8
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d009      	beq.n	800aa28 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	8b5b      	ldrh	r3, [r3, #26]
 800aa18:	f023 0308 	bic.w	r3, r3, #8
 800aa1c:	b29a      	uxth	r2, r3
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f7ff fa78 	bl	8009f18 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00a      	beq.n	800aa4c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800aa36:	4b0e      	ldr	r3, [pc, #56]	; (800aa70 <tcp_fasttmr+0xc4>)
 800aa38:	2200      	movs	r2, #0
 800aa3a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 f819 	bl	800aa74 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800aa42:	4b0b      	ldr	r3, [pc, #44]	; (800aa70 <tcp_fasttmr+0xc4>)
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d000      	beq.n	800aa4c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800aa4a:	e7b8      	b.n	800a9be <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	607b      	str	r3, [r7, #4]
 800aa50:	e002      	b.n	800aa58 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d1b3      	bne.n	800a9c6 <tcp_fasttmr+0x1a>
    }
  }
}
 800aa5e:	bf00      	nop
 800aa60:	bf00      	nop
 800aa62:	3708      	adds	r7, #8
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	2000aed6 	.word	0x2000aed6
 800aa6c:	2000aecc 	.word	0x2000aecc
 800aa70:	2000aed4 	.word	0x2000aed4

0800aa74 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800aa74:	b590      	push	{r4, r7, lr}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d109      	bne.n	800aa96 <tcp_process_refused_data+0x22>
 800aa82:	4b37      	ldr	r3, [pc, #220]	; (800ab60 <tcp_process_refused_data+0xec>)
 800aa84:	f240 6209 	movw	r2, #1545	; 0x609
 800aa88:	4936      	ldr	r1, [pc, #216]	; (800ab64 <tcp_process_refused_data+0xf0>)
 800aa8a:	4837      	ldr	r0, [pc, #220]	; (800ab68 <tcp_process_refused_data+0xf4>)
 800aa8c:	f009 f9e0 	bl	8013e50 <iprintf>
 800aa90:	f06f 030f 	mvn.w	r3, #15
 800aa94:	e060      	b.n	800ab58 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa9a:	7b5b      	ldrb	r3, [r3, #13]
 800aa9c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aaa2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d00b      	beq.n	800aacc <tcp_process_refused_data+0x58>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6918      	ldr	r0, [r3, #16]
 800aabe:	2300      	movs	r3, #0
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	6879      	ldr	r1, [r7, #4]
 800aac4:	47a0      	blx	r4
 800aac6:	4603      	mov	r3, r0
 800aac8:	73fb      	strb	r3, [r7, #15]
 800aaca:	e007      	b.n	800aadc <tcp_process_refused_data+0x68>
 800aacc:	2300      	movs	r3, #0
 800aace:	68ba      	ldr	r2, [r7, #8]
 800aad0:	6879      	ldr	r1, [r7, #4]
 800aad2:	2000      	movs	r0, #0
 800aad4:	f000 f8a4 	bl	800ac20 <tcp_recv_null>
 800aad8:	4603      	mov	r3, r0
 800aada:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800aadc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d12a      	bne.n	800ab3a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800aae4:	7bbb      	ldrb	r3, [r7, #14]
 800aae6:	f003 0320 	and.w	r3, r3, #32
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d033      	beq.n	800ab56 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aaf2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800aaf6:	d005      	beq.n	800ab04 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aafc:	3301      	adds	r3, #1
 800aafe:	b29a      	uxth	r2, r3
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d00b      	beq.n	800ab26 <tcp_process_refused_data+0xb2>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6918      	ldr	r0, [r3, #16]
 800ab18:	2300      	movs	r3, #0
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	6879      	ldr	r1, [r7, #4]
 800ab1e:	47a0      	blx	r4
 800ab20:	4603      	mov	r3, r0
 800ab22:	73fb      	strb	r3, [r7, #15]
 800ab24:	e001      	b.n	800ab2a <tcp_process_refused_data+0xb6>
 800ab26:	2300      	movs	r3, #0
 800ab28:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ab2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab2e:	f113 0f0d 	cmn.w	r3, #13
 800ab32:	d110      	bne.n	800ab56 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ab34:	f06f 030c 	mvn.w	r3, #12
 800ab38:	e00e      	b.n	800ab58 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ab3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab3e:	f113 0f0d 	cmn.w	r3, #13
 800ab42:	d102      	bne.n	800ab4a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ab44:	f06f 030c 	mvn.w	r3, #12
 800ab48:	e006      	b.n	800ab58 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	68ba      	ldr	r2, [r7, #8]
 800ab4e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ab50:	f06f 0304 	mvn.w	r3, #4
 800ab54:	e000      	b.n	800ab58 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ab56:	2300      	movs	r3, #0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3714      	adds	r7, #20
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd90      	pop	{r4, r7, pc}
 800ab60:	08015ec4 	.word	0x08015ec4
 800ab64:	080163d4 	.word	0x080163d4
 800ab68:	08015f08 	.word	0x08015f08

0800ab6c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ab74:	e007      	b.n	800ab86 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f000 f80a 	bl	800ab96 <tcp_seg_free>
    seg = next;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1f4      	bne.n	800ab76 <tcp_segs_free+0xa>
  }
}
 800ab8c:	bf00      	nop
 800ab8e:	bf00      	nop
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b082      	sub	sp, #8
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00c      	beq.n	800abbe <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d004      	beq.n	800abb6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7fe fd6d 	bl	8009690 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800abb6:	6879      	ldr	r1, [r7, #4]
 800abb8:	2003      	movs	r0, #3
 800abba:	f7fd fee7 	bl	800898c <memp_free>
  }
}
 800abbe:	bf00      	nop
 800abc0:	3708      	adds	r7, #8
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
	...

0800abc8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d106      	bne.n	800abe4 <tcp_seg_copy+0x1c>
 800abd6:	4b0f      	ldr	r3, [pc, #60]	; (800ac14 <tcp_seg_copy+0x4c>)
 800abd8:	f240 6282 	movw	r2, #1666	; 0x682
 800abdc:	490e      	ldr	r1, [pc, #56]	; (800ac18 <tcp_seg_copy+0x50>)
 800abde:	480f      	ldr	r0, [pc, #60]	; (800ac1c <tcp_seg_copy+0x54>)
 800abe0:	f009 f936 	bl	8013e50 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800abe4:	2003      	movs	r0, #3
 800abe6:	f7fd fe61 	bl	80088ac <memp_malloc>
 800abea:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d101      	bne.n	800abf6 <tcp_seg_copy+0x2e>
    return NULL;
 800abf2:	2300      	movs	r3, #0
 800abf4:	e00a      	b.n	800ac0c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800abf6:	2210      	movs	r2, #16
 800abf8:	6879      	ldr	r1, [r7, #4]
 800abfa:	68f8      	ldr	r0, [r7, #12]
 800abfc:	f009 f8f8 	bl	8013df0 <memcpy>
  pbuf_ref(cseg->p);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7fe fde3 	bl	80097d0 <pbuf_ref>
  return cseg;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3710      	adds	r7, #16
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	08015ec4 	.word	0x08015ec4
 800ac18:	08016418 	.word	0x08016418
 800ac1c:	08015f08 	.word	0x08015f08

0800ac20 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	607a      	str	r2, [r7, #4]
 800ac2c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d109      	bne.n	800ac48 <tcp_recv_null+0x28>
 800ac34:	4b12      	ldr	r3, [pc, #72]	; (800ac80 <tcp_recv_null+0x60>)
 800ac36:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ac3a:	4912      	ldr	r1, [pc, #72]	; (800ac84 <tcp_recv_null+0x64>)
 800ac3c:	4812      	ldr	r0, [pc, #72]	; (800ac88 <tcp_recv_null+0x68>)
 800ac3e:	f009 f907 	bl	8013e50 <iprintf>
 800ac42:	f06f 030f 	mvn.w	r3, #15
 800ac46:	e016      	b.n	800ac76 <tcp_recv_null+0x56>

  if (p != NULL) {
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d009      	beq.n	800ac62 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	891b      	ldrh	r3, [r3, #8]
 800ac52:	4619      	mov	r1, r3
 800ac54:	68b8      	ldr	r0, [r7, #8]
 800ac56:	f7ff fb19 	bl	800a28c <tcp_recved>
    pbuf_free(p);
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f7fe fd18 	bl	8009690 <pbuf_free>
 800ac60:	e008      	b.n	800ac74 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ac62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d104      	bne.n	800ac74 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ac6a:	68b8      	ldr	r0, [r7, #8]
 800ac6c:	f7ff f9be 	bl	8009fec <tcp_close>
 800ac70:	4603      	mov	r3, r0
 800ac72:	e000      	b.n	800ac76 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	08015ec4 	.word	0x08015ec4
 800ac84:	08016434 	.word	0x08016434
 800ac88:	08015f08 	.word	0x08015f08

0800ac8c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b086      	sub	sp, #24
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	4603      	mov	r3, r0
 800ac94:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ac96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	db01      	blt.n	800aca2 <tcp_kill_prio+0x16>
 800ac9e:	79fb      	ldrb	r3, [r7, #7]
 800aca0:	e000      	b.n	800aca4 <tcp_kill_prio+0x18>
 800aca2:	237f      	movs	r3, #127	; 0x7f
 800aca4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800aca6:	7afb      	ldrb	r3, [r7, #11]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d034      	beq.n	800ad16 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800acac:	7afb      	ldrb	r3, [r7, #11]
 800acae:	3b01      	subs	r3, #1
 800acb0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800acb2:	2300      	movs	r3, #0
 800acb4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800acb6:	2300      	movs	r3, #0
 800acb8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800acba:	4b19      	ldr	r3, [pc, #100]	; (800ad20 <tcp_kill_prio+0x94>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	617b      	str	r3, [r7, #20]
 800acc0:	e01f      	b.n	800ad02 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	7d5b      	ldrb	r3, [r3, #21]
 800acc6:	7afa      	ldrb	r2, [r7, #11]
 800acc8:	429a      	cmp	r2, r3
 800acca:	d80c      	bhi.n	800ace6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800acd0:	7afa      	ldrb	r2, [r7, #11]
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d112      	bne.n	800acfc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800acd6:	4b13      	ldr	r3, [pc, #76]	; (800ad24 <tcp_kill_prio+0x98>)
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	6a1b      	ldr	r3, [r3, #32]
 800acde:	1ad3      	subs	r3, r2, r3
 800ace0:	68fa      	ldr	r2, [r7, #12]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d80a      	bhi.n	800acfc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ace6:	4b0f      	ldr	r3, [pc, #60]	; (800ad24 <tcp_kill_prio+0x98>)
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	6a1b      	ldr	r3, [r3, #32]
 800acee:	1ad3      	subs	r3, r2, r3
 800acf0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	7d5b      	ldrb	r3, [r3, #21]
 800acfa:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	617b      	str	r3, [r7, #20]
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d1dc      	bne.n	800acc2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d004      	beq.n	800ad18 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ad0e:	6938      	ldr	r0, [r7, #16]
 800ad10:	f7ff fa56 	bl	800a1c0 <tcp_abort>
 800ad14:	e000      	b.n	800ad18 <tcp_kill_prio+0x8c>
    return;
 800ad16:	bf00      	nop
  }
}
 800ad18:	3718      	adds	r7, #24
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	2000aecc 	.word	0x2000aecc
 800ad24:	2000aec0 	.word	0x2000aec0

0800ad28 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b086      	sub	sp, #24
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	4603      	mov	r3, r0
 800ad30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ad32:	79fb      	ldrb	r3, [r7, #7]
 800ad34:	2b08      	cmp	r3, #8
 800ad36:	d009      	beq.n	800ad4c <tcp_kill_state+0x24>
 800ad38:	79fb      	ldrb	r3, [r7, #7]
 800ad3a:	2b09      	cmp	r3, #9
 800ad3c:	d006      	beq.n	800ad4c <tcp_kill_state+0x24>
 800ad3e:	4b1a      	ldr	r3, [pc, #104]	; (800ada8 <tcp_kill_state+0x80>)
 800ad40:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ad44:	4919      	ldr	r1, [pc, #100]	; (800adac <tcp_kill_state+0x84>)
 800ad46:	481a      	ldr	r0, [pc, #104]	; (800adb0 <tcp_kill_state+0x88>)
 800ad48:	f009 f882 	bl	8013e50 <iprintf>

  inactivity = 0;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ad50:	2300      	movs	r3, #0
 800ad52:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad54:	4b17      	ldr	r3, [pc, #92]	; (800adb4 <tcp_kill_state+0x8c>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	617b      	str	r3, [r7, #20]
 800ad5a:	e017      	b.n	800ad8c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	7d1b      	ldrb	r3, [r3, #20]
 800ad60:	79fa      	ldrb	r2, [r7, #7]
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d10f      	bne.n	800ad86 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ad66:	4b14      	ldr	r3, [pc, #80]	; (800adb8 <tcp_kill_state+0x90>)
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	6a1b      	ldr	r3, [r3, #32]
 800ad6e:	1ad3      	subs	r3, r2, r3
 800ad70:	68fa      	ldr	r2, [r7, #12]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d807      	bhi.n	800ad86 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ad76:	4b10      	ldr	r3, [pc, #64]	; (800adb8 <tcp_kill_state+0x90>)
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	6a1b      	ldr	r3, [r3, #32]
 800ad7e:	1ad3      	subs	r3, r2, r3
 800ad80:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	68db      	ldr	r3, [r3, #12]
 800ad8a:	617b      	str	r3, [r7, #20]
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d1e4      	bne.n	800ad5c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d003      	beq.n	800ada0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ad98:	2100      	movs	r1, #0
 800ad9a:	6938      	ldr	r0, [r7, #16]
 800ad9c:	f7ff f952 	bl	800a044 <tcp_abandon>
  }
}
 800ada0:	bf00      	nop
 800ada2:	3718      	adds	r7, #24
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	08015ec4 	.word	0x08015ec4
 800adac:	08016450 	.word	0x08016450
 800adb0:	08015f08 	.word	0x08015f08
 800adb4:	2000aecc 	.word	0x2000aecc
 800adb8:	2000aec0 	.word	0x2000aec0

0800adbc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800adc2:	2300      	movs	r3, #0
 800adc4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800adc6:	2300      	movs	r3, #0
 800adc8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800adca:	4b12      	ldr	r3, [pc, #72]	; (800ae14 <tcp_kill_timewait+0x58>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	60fb      	str	r3, [r7, #12]
 800add0:	e012      	b.n	800adf8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800add2:	4b11      	ldr	r3, [pc, #68]	; (800ae18 <tcp_kill_timewait+0x5c>)
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	6a1b      	ldr	r3, [r3, #32]
 800adda:	1ad3      	subs	r3, r2, r3
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d807      	bhi.n	800adf2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ade2:	4b0d      	ldr	r3, [pc, #52]	; (800ae18 <tcp_kill_timewait+0x5c>)
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	6a1b      	ldr	r3, [r3, #32]
 800adea:	1ad3      	subs	r3, r2, r3
 800adec:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	60fb      	str	r3, [r7, #12]
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d1e9      	bne.n	800add2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d002      	beq.n	800ae0a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ae04:	68b8      	ldr	r0, [r7, #8]
 800ae06:	f7ff f9db 	bl	800a1c0 <tcp_abort>
  }
}
 800ae0a:	bf00      	nop
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	2000aed0 	.word	0x2000aed0
 800ae18:	2000aec0 	.word	0x2000aec0

0800ae1c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ae22:	4b10      	ldr	r3, [pc, #64]	; (800ae64 <tcp_handle_closepend+0x48>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ae28:	e014      	b.n	800ae54 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	8b5b      	ldrh	r3, [r3, #26]
 800ae34:	f003 0308 	and.w	r3, r3, #8
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d009      	beq.n	800ae50 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	8b5b      	ldrh	r3, [r3, #26]
 800ae40:	f023 0308 	bic.w	r3, r3, #8
 800ae44:	b29a      	uxth	r2, r3
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f7ff f864 	bl	8009f18 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d1e7      	bne.n	800ae2a <tcp_handle_closepend+0xe>
  }
}
 800ae5a:	bf00      	nop
 800ae5c:	bf00      	nop
 800ae5e:	3708      	adds	r7, #8
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	2000aecc 	.word	0x2000aecc

0800ae68 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	4603      	mov	r3, r0
 800ae70:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ae72:	2001      	movs	r0, #1
 800ae74:	f7fd fd1a 	bl	80088ac <memp_malloc>
 800ae78:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d126      	bne.n	800aece <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ae80:	f7ff ffcc 	bl	800ae1c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ae84:	f7ff ff9a 	bl	800adbc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ae88:	2001      	movs	r0, #1
 800ae8a:	f7fd fd0f 	bl	80088ac <memp_malloc>
 800ae8e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d11b      	bne.n	800aece <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ae96:	2009      	movs	r0, #9
 800ae98:	f7ff ff46 	bl	800ad28 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ae9c:	2001      	movs	r0, #1
 800ae9e:	f7fd fd05 	bl	80088ac <memp_malloc>
 800aea2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d111      	bne.n	800aece <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800aeaa:	2008      	movs	r0, #8
 800aeac:	f7ff ff3c 	bl	800ad28 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aeb0:	2001      	movs	r0, #1
 800aeb2:	f7fd fcfb 	bl	80088ac <memp_malloc>
 800aeb6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d107      	bne.n	800aece <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800aebe:	79fb      	ldrb	r3, [r7, #7]
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7ff fee3 	bl	800ac8c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aec6:	2001      	movs	r0, #1
 800aec8:	f7fd fcf0 	bl	80088ac <memp_malloc>
 800aecc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d03f      	beq.n	800af54 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800aed4:	229c      	movs	r2, #156	; 0x9c
 800aed6:	2100      	movs	r1, #0
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	f008 ffb1 	bl	8013e40 <memset>
    pcb->prio = prio;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	79fa      	ldrb	r2, [r7, #7]
 800aee2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800aeea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800aef4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	22ff      	movs	r2, #255	; 0xff
 800af02:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f44f 7206 	mov.w	r2, #536	; 0x218
 800af0a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2206      	movs	r2, #6
 800af10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2206      	movs	r2, #6
 800af18:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af20:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2201      	movs	r2, #1
 800af26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800af2a:	4b0d      	ldr	r3, [pc, #52]	; (800af60 <tcp_alloc+0xf8>)
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800af32:	4b0c      	ldr	r3, [pc, #48]	; (800af64 <tcp_alloc+0xfc>)
 800af34:	781a      	ldrb	r2, [r3, #0]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800af40:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	4a08      	ldr	r2, [pc, #32]	; (800af68 <tcp_alloc+0x100>)
 800af48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	4a07      	ldr	r2, [pc, #28]	; (800af6c <tcp_alloc+0x104>)
 800af50:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800af54:	68fb      	ldr	r3, [r7, #12]
}
 800af56:	4618      	mov	r0, r3
 800af58:	3710      	adds	r7, #16
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	2000aec0 	.word	0x2000aec0
 800af64:	2000aed6 	.word	0x2000aed6
 800af68:	0800ac21 	.word	0x0800ac21
 800af6c:	006ddd00 	.word	0x006ddd00

0800af70 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d107      	bne.n	800af8e <tcp_pcb_purge+0x1e>
 800af7e:	4b21      	ldr	r3, [pc, #132]	; (800b004 <tcp_pcb_purge+0x94>)
 800af80:	f640 0251 	movw	r2, #2129	; 0x851
 800af84:	4920      	ldr	r1, [pc, #128]	; (800b008 <tcp_pcb_purge+0x98>)
 800af86:	4821      	ldr	r0, [pc, #132]	; (800b00c <tcp_pcb_purge+0x9c>)
 800af88:	f008 ff62 	bl	8013e50 <iprintf>
 800af8c:	e037      	b.n	800affe <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	7d1b      	ldrb	r3, [r3, #20]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d033      	beq.n	800affe <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800af9a:	2b0a      	cmp	r3, #10
 800af9c:	d02f      	beq.n	800affe <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d02b      	beq.n	800affe <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d007      	beq.n	800afbe <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7fe fb6c 	bl	8009690 <pbuf_free>
      pcb->refused_data = NULL;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d002      	beq.n	800afcc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 f986 	bl	800b2d8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800afd2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afd8:	4618      	mov	r0, r3
 800afda:	f7ff fdc7 	bl	800ab6c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7ff fdc2 	bl	800ab6c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	66da      	str	r2, [r3, #108]	; 0x6c
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800affe:	3708      	adds	r7, #8
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}
 800b004:	08015ec4 	.word	0x08015ec4
 800b008:	08016510 	.word	0x08016510
 800b00c:	08015f08 	.word	0x08015f08

0800b010 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d106      	bne.n	800b02e <tcp_pcb_remove+0x1e>
 800b020:	4b3e      	ldr	r3, [pc, #248]	; (800b11c <tcp_pcb_remove+0x10c>)
 800b022:	f640 0283 	movw	r2, #2179	; 0x883
 800b026:	493e      	ldr	r1, [pc, #248]	; (800b120 <tcp_pcb_remove+0x110>)
 800b028:	483e      	ldr	r0, [pc, #248]	; (800b124 <tcp_pcb_remove+0x114>)
 800b02a:	f008 ff11 	bl	8013e50 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d106      	bne.n	800b042 <tcp_pcb_remove+0x32>
 800b034:	4b39      	ldr	r3, [pc, #228]	; (800b11c <tcp_pcb_remove+0x10c>)
 800b036:	f640 0284 	movw	r2, #2180	; 0x884
 800b03a:	493b      	ldr	r1, [pc, #236]	; (800b128 <tcp_pcb_remove+0x118>)
 800b03c:	4839      	ldr	r0, [pc, #228]	; (800b124 <tcp_pcb_remove+0x114>)
 800b03e:	f008 ff07 	bl	8013e50 <iprintf>

  TCP_RMV(pcblist, pcb);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	683a      	ldr	r2, [r7, #0]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d105      	bne.n	800b058 <tcp_pcb_remove+0x48>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	68da      	ldr	r2, [r3, #12]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	601a      	str	r2, [r3, #0]
 800b056:	e013      	b.n	800b080 <tcp_pcb_remove+0x70>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	60fb      	str	r3, [r7, #12]
 800b05e:	e00c      	b.n	800b07a <tcp_pcb_remove+0x6a>
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	68db      	ldr	r3, [r3, #12]
 800b064:	683a      	ldr	r2, [r7, #0]
 800b066:	429a      	cmp	r2, r3
 800b068:	d104      	bne.n	800b074 <tcp_pcb_remove+0x64>
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	68da      	ldr	r2, [r3, #12]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	60da      	str	r2, [r3, #12]
 800b072:	e005      	b.n	800b080 <tcp_pcb_remove+0x70>
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	60fb      	str	r3, [r7, #12]
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d1ef      	bne.n	800b060 <tcp_pcb_remove+0x50>
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	2200      	movs	r2, #0
 800b084:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b086:	6838      	ldr	r0, [r7, #0]
 800b088:	f7ff ff72 	bl	800af70 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	7d1b      	ldrb	r3, [r3, #20]
 800b090:	2b0a      	cmp	r3, #10
 800b092:	d013      	beq.n	800b0bc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d00f      	beq.n	800b0bc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	8b5b      	ldrh	r3, [r3, #26]
 800b0a0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d009      	beq.n	800b0bc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	8b5b      	ldrh	r3, [r3, #26]
 800b0ac:	f043 0302 	orr.w	r3, r3, #2
 800b0b0:	b29a      	uxth	r2, r3
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b0b6:	6838      	ldr	r0, [r7, #0]
 800b0b8:	f002 ff6e 	bl	800df98 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	7d1b      	ldrb	r3, [r3, #20]
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d020      	beq.n	800b106 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d006      	beq.n	800b0da <tcp_pcb_remove+0xca>
 800b0cc:	4b13      	ldr	r3, [pc, #76]	; (800b11c <tcp_pcb_remove+0x10c>)
 800b0ce:	f640 0293 	movw	r2, #2195	; 0x893
 800b0d2:	4916      	ldr	r1, [pc, #88]	; (800b12c <tcp_pcb_remove+0x11c>)
 800b0d4:	4813      	ldr	r0, [pc, #76]	; (800b124 <tcp_pcb_remove+0x114>)
 800b0d6:	f008 febb 	bl	8013e50 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d006      	beq.n	800b0f0 <tcp_pcb_remove+0xe0>
 800b0e2:	4b0e      	ldr	r3, [pc, #56]	; (800b11c <tcp_pcb_remove+0x10c>)
 800b0e4:	f640 0294 	movw	r2, #2196	; 0x894
 800b0e8:	4911      	ldr	r1, [pc, #68]	; (800b130 <tcp_pcb_remove+0x120>)
 800b0ea:	480e      	ldr	r0, [pc, #56]	; (800b124 <tcp_pcb_remove+0x114>)
 800b0ec:	f008 feb0 	bl	8013e50 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d006      	beq.n	800b106 <tcp_pcb_remove+0xf6>
 800b0f8:	4b08      	ldr	r3, [pc, #32]	; (800b11c <tcp_pcb_remove+0x10c>)
 800b0fa:	f640 0296 	movw	r2, #2198	; 0x896
 800b0fe:	490d      	ldr	r1, [pc, #52]	; (800b134 <tcp_pcb_remove+0x124>)
 800b100:	4808      	ldr	r0, [pc, #32]	; (800b124 <tcp_pcb_remove+0x114>)
 800b102:	f008 fea5 	bl	8013e50 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	2200      	movs	r2, #0
 800b10a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	2200      	movs	r2, #0
 800b110:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b112:	bf00      	nop
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	08015ec4 	.word	0x08015ec4
 800b120:	0801652c 	.word	0x0801652c
 800b124:	08015f08 	.word	0x08015f08
 800b128:	08016548 	.word	0x08016548
 800b12c:	08016568 	.word	0x08016568
 800b130:	08016580 	.word	0x08016580
 800b134:	0801659c 	.word	0x0801659c

0800b138 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d106      	bne.n	800b154 <tcp_next_iss+0x1c>
 800b146:	4b0a      	ldr	r3, [pc, #40]	; (800b170 <tcp_next_iss+0x38>)
 800b148:	f640 02af 	movw	r2, #2223	; 0x8af
 800b14c:	4909      	ldr	r1, [pc, #36]	; (800b174 <tcp_next_iss+0x3c>)
 800b14e:	480a      	ldr	r0, [pc, #40]	; (800b178 <tcp_next_iss+0x40>)
 800b150:	f008 fe7e 	bl	8013e50 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b154:	4b09      	ldr	r3, [pc, #36]	; (800b17c <tcp_next_iss+0x44>)
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	4b09      	ldr	r3, [pc, #36]	; (800b180 <tcp_next_iss+0x48>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	4413      	add	r3, r2
 800b15e:	4a07      	ldr	r2, [pc, #28]	; (800b17c <tcp_next_iss+0x44>)
 800b160:	6013      	str	r3, [r2, #0]
  return iss;
 800b162:	4b06      	ldr	r3, [pc, #24]	; (800b17c <tcp_next_iss+0x44>)
 800b164:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b166:	4618      	mov	r0, r3
 800b168:	3708      	adds	r7, #8
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	08015ec4 	.word	0x08015ec4
 800b174:	080165b4 	.word	0x080165b4
 800b178:	08015f08 	.word	0x08015f08
 800b17c:	2000003c 	.word	0x2000003c
 800b180:	2000aec0 	.word	0x2000aec0

0800b184 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b086      	sub	sp, #24
 800b188:	af00      	add	r7, sp, #0
 800b18a:	4603      	mov	r3, r0
 800b18c:	60b9      	str	r1, [r7, #8]
 800b18e:	607a      	str	r2, [r7, #4]
 800b190:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d106      	bne.n	800b1a6 <tcp_eff_send_mss_netif+0x22>
 800b198:	4b14      	ldr	r3, [pc, #80]	; (800b1ec <tcp_eff_send_mss_netif+0x68>)
 800b19a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800b19e:	4914      	ldr	r1, [pc, #80]	; (800b1f0 <tcp_eff_send_mss_netif+0x6c>)
 800b1a0:	4814      	ldr	r0, [pc, #80]	; (800b1f4 <tcp_eff_send_mss_netif+0x70>)
 800b1a2:	f008 fe55 	bl	8013e50 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d101      	bne.n	800b1b0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b1ac:	89fb      	ldrh	r3, [r7, #14]
 800b1ae:	e019      	b.n	800b1e4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1b4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b1b6:	8afb      	ldrh	r3, [r7, #22]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d012      	beq.n	800b1e2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b1bc:	2328      	movs	r3, #40	; 0x28
 800b1be:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b1c0:	8afa      	ldrh	r2, [r7, #22]
 800b1c2:	8abb      	ldrh	r3, [r7, #20]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d904      	bls.n	800b1d2 <tcp_eff_send_mss_netif+0x4e>
 800b1c8:	8afa      	ldrh	r2, [r7, #22]
 800b1ca:	8abb      	ldrh	r3, [r7, #20]
 800b1cc:	1ad3      	subs	r3, r2, r3
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	e000      	b.n	800b1d4 <tcp_eff_send_mss_netif+0x50>
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b1d6:	8a7a      	ldrh	r2, [r7, #18]
 800b1d8:	89fb      	ldrh	r3, [r7, #14]
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	bf28      	it	cs
 800b1de:	4613      	movcs	r3, r2
 800b1e0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b1e2:	89fb      	ldrh	r3, [r7, #14]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3718      	adds	r7, #24
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	08015ec4 	.word	0x08015ec4
 800b1f0:	080165d0 	.word	0x080165d0
 800b1f4:	08015f08 	.word	0x08015f08

0800b1f8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d119      	bne.n	800b240 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b20c:	4b10      	ldr	r3, [pc, #64]	; (800b250 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b20e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b212:	4910      	ldr	r1, [pc, #64]	; (800b254 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b214:	4810      	ldr	r0, [pc, #64]	; (800b258 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b216:	f008 fe1b 	bl	8013e50 <iprintf>

  while (pcb != NULL) {
 800b21a:	e011      	b.n	800b240 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	429a      	cmp	r2, r3
 800b226:	d108      	bne.n	800b23a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	68db      	ldr	r3, [r3, #12]
 800b22c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b22e:	68f8      	ldr	r0, [r7, #12]
 800b230:	f7fe ffc6 	bl	800a1c0 <tcp_abort>
      pcb = next;
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	60fb      	str	r3, [r7, #12]
 800b238:	e002      	b.n	800b240 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	68db      	ldr	r3, [r3, #12]
 800b23e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d1ea      	bne.n	800b21c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b246:	bf00      	nop
 800b248:	bf00      	nop
 800b24a:	3710      	adds	r7, #16
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	08015ec4 	.word	0x08015ec4
 800b254:	080165f8 	.word	0x080165f8
 800b258:	08015f08 	.word	0x08015f08

0800b25c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d02a      	beq.n	800b2c2 <tcp_netif_ip_addr_changed+0x66>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d026      	beq.n	800b2c2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b274:	4b15      	ldr	r3, [pc, #84]	; (800b2cc <tcp_netif_ip_addr_changed+0x70>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4619      	mov	r1, r3
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f7ff ffbc 	bl	800b1f8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b280:	4b13      	ldr	r3, [pc, #76]	; (800b2d0 <tcp_netif_ip_addr_changed+0x74>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4619      	mov	r1, r3
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f7ff ffb6 	bl	800b1f8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d017      	beq.n	800b2c2 <tcp_netif_ip_addr_changed+0x66>
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d013      	beq.n	800b2c2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b29a:	4b0e      	ldr	r3, [pc, #56]	; (800b2d4 <tcp_netif_ip_addr_changed+0x78>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	60fb      	str	r3, [r7, #12]
 800b2a0:	e00c      	b.n	800b2bc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681a      	ldr	r2, [r3, #0]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d103      	bne.n	800b2b6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	68db      	ldr	r3, [r3, #12]
 800b2ba:	60fb      	str	r3, [r7, #12]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d1ef      	bne.n	800b2a2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b2c2:	bf00      	nop
 800b2c4:	3710      	adds	r7, #16
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	2000aecc 	.word	0x2000aecc
 800b2d0:	2000aec4 	.word	0x2000aec4
 800b2d4:	2000aec8 	.word	0x2000aec8

0800b2d8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d007      	beq.n	800b2f8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7ff fc3d 	bl	800ab6c <tcp_segs_free>
    pcb->ooseq = NULL;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b2f8:	bf00      	nop
 800b2fa:	3708      	adds	r7, #8
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b300:	b590      	push	{r4, r7, lr}
 800b302:	b08d      	sub	sp, #52	; 0x34
 800b304:	af04      	add	r7, sp, #16
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d105      	bne.n	800b31c <tcp_input+0x1c>
 800b310:	4b9b      	ldr	r3, [pc, #620]	; (800b580 <tcp_input+0x280>)
 800b312:	2283      	movs	r2, #131	; 0x83
 800b314:	499b      	ldr	r1, [pc, #620]	; (800b584 <tcp_input+0x284>)
 800b316:	489c      	ldr	r0, [pc, #624]	; (800b588 <tcp_input+0x288>)
 800b318:	f008 fd9a 	bl	8013e50 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	4a9a      	ldr	r2, [pc, #616]	; (800b58c <tcp_input+0x28c>)
 800b322:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	895b      	ldrh	r3, [r3, #10]
 800b328:	2b13      	cmp	r3, #19
 800b32a:	f240 83d1 	bls.w	800bad0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b32e:	4b98      	ldr	r3, [pc, #608]	; (800b590 <tcp_input+0x290>)
 800b330:	695b      	ldr	r3, [r3, #20]
 800b332:	4a97      	ldr	r2, [pc, #604]	; (800b590 <tcp_input+0x290>)
 800b334:	6812      	ldr	r2, [r2, #0]
 800b336:	4611      	mov	r1, r2
 800b338:	4618      	mov	r0, r3
 800b33a:	f007 fdcf 	bl	8012edc <ip4_addr_isbroadcast_u32>
 800b33e:	4603      	mov	r3, r0
 800b340:	2b00      	cmp	r3, #0
 800b342:	f040 83c7 	bne.w	800bad4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b346:	4b92      	ldr	r3, [pc, #584]	; (800b590 <tcp_input+0x290>)
 800b348:	695b      	ldr	r3, [r3, #20]
 800b34a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b34e:	2be0      	cmp	r3, #224	; 0xe0
 800b350:	f000 83c0 	beq.w	800bad4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b354:	4b8d      	ldr	r3, [pc, #564]	; (800b58c <tcp_input+0x28c>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	899b      	ldrh	r3, [r3, #12]
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7fc fe2d 	bl	8007fbc <lwip_htons>
 800b362:	4603      	mov	r3, r0
 800b364:	0b1b      	lsrs	r3, r3, #12
 800b366:	b29b      	uxth	r3, r3
 800b368:	b2db      	uxtb	r3, r3
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b36e:	7cbb      	ldrb	r3, [r7, #18]
 800b370:	2b13      	cmp	r3, #19
 800b372:	f240 83b1 	bls.w	800bad8 <tcp_input+0x7d8>
 800b376:	7cbb      	ldrb	r3, [r7, #18]
 800b378:	b29a      	uxth	r2, r3
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	891b      	ldrh	r3, [r3, #8]
 800b37e:	429a      	cmp	r2, r3
 800b380:	f200 83aa 	bhi.w	800bad8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b384:	7cbb      	ldrb	r3, [r7, #18]
 800b386:	b29b      	uxth	r3, r3
 800b388:	3b14      	subs	r3, #20
 800b38a:	b29a      	uxth	r2, r3
 800b38c:	4b81      	ldr	r3, [pc, #516]	; (800b594 <tcp_input+0x294>)
 800b38e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b390:	4b81      	ldr	r3, [pc, #516]	; (800b598 <tcp_input+0x298>)
 800b392:	2200      	movs	r2, #0
 800b394:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	895a      	ldrh	r2, [r3, #10]
 800b39a:	7cbb      	ldrb	r3, [r7, #18]
 800b39c:	b29b      	uxth	r3, r3
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d309      	bcc.n	800b3b6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b3a2:	4b7c      	ldr	r3, [pc, #496]	; (800b594 <tcp_input+0x294>)
 800b3a4:	881a      	ldrh	r2, [r3, #0]
 800b3a6:	4b7d      	ldr	r3, [pc, #500]	; (800b59c <tcp_input+0x29c>)
 800b3a8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b3aa:	7cbb      	ldrb	r3, [r7, #18]
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f7fe f8e8 	bl	8009584 <pbuf_remove_header>
 800b3b4:	e04e      	b.n	800b454 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d105      	bne.n	800b3ca <tcp_input+0xca>
 800b3be:	4b70      	ldr	r3, [pc, #448]	; (800b580 <tcp_input+0x280>)
 800b3c0:	22c2      	movs	r2, #194	; 0xc2
 800b3c2:	4977      	ldr	r1, [pc, #476]	; (800b5a0 <tcp_input+0x2a0>)
 800b3c4:	4870      	ldr	r0, [pc, #448]	; (800b588 <tcp_input+0x288>)
 800b3c6:	f008 fd43 	bl	8013e50 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b3ca:	2114      	movs	r1, #20
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f7fe f8d9 	bl	8009584 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	895a      	ldrh	r2, [r3, #10]
 800b3d6:	4b71      	ldr	r3, [pc, #452]	; (800b59c <tcp_input+0x29c>)
 800b3d8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b3da:	4b6e      	ldr	r3, [pc, #440]	; (800b594 <tcp_input+0x294>)
 800b3dc:	881a      	ldrh	r2, [r3, #0]
 800b3de:	4b6f      	ldr	r3, [pc, #444]	; (800b59c <tcp_input+0x29c>)
 800b3e0:	881b      	ldrh	r3, [r3, #0]
 800b3e2:	1ad3      	subs	r3, r2, r3
 800b3e4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b3e6:	4b6d      	ldr	r3, [pc, #436]	; (800b59c <tcp_input+0x29c>)
 800b3e8:	881b      	ldrh	r3, [r3, #0]
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f7fe f8c9 	bl	8009584 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	895b      	ldrh	r3, [r3, #10]
 800b3f8:	8a3a      	ldrh	r2, [r7, #16]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	f200 836e 	bhi.w	800badc <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	4a64      	ldr	r2, [pc, #400]	; (800b598 <tcp_input+0x298>)
 800b408:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	8a3a      	ldrh	r2, [r7, #16]
 800b410:	4611      	mov	r1, r2
 800b412:	4618      	mov	r0, r3
 800b414:	f7fe f8b6 	bl	8009584 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	891a      	ldrh	r2, [r3, #8]
 800b41c:	8a3b      	ldrh	r3, [r7, #16]
 800b41e:	1ad3      	subs	r3, r2, r3
 800b420:	b29a      	uxth	r2, r3
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	895b      	ldrh	r3, [r3, #10]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d005      	beq.n	800b43a <tcp_input+0x13a>
 800b42e:	4b54      	ldr	r3, [pc, #336]	; (800b580 <tcp_input+0x280>)
 800b430:	22df      	movs	r2, #223	; 0xdf
 800b432:	495c      	ldr	r1, [pc, #368]	; (800b5a4 <tcp_input+0x2a4>)
 800b434:	4854      	ldr	r0, [pc, #336]	; (800b588 <tcp_input+0x288>)
 800b436:	f008 fd0b 	bl	8013e50 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	891a      	ldrh	r2, [r3, #8]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	891b      	ldrh	r3, [r3, #8]
 800b444:	429a      	cmp	r2, r3
 800b446:	d005      	beq.n	800b454 <tcp_input+0x154>
 800b448:	4b4d      	ldr	r3, [pc, #308]	; (800b580 <tcp_input+0x280>)
 800b44a:	22e0      	movs	r2, #224	; 0xe0
 800b44c:	4956      	ldr	r1, [pc, #344]	; (800b5a8 <tcp_input+0x2a8>)
 800b44e:	484e      	ldr	r0, [pc, #312]	; (800b588 <tcp_input+0x288>)
 800b450:	f008 fcfe 	bl	8013e50 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b454:	4b4d      	ldr	r3, [pc, #308]	; (800b58c <tcp_input+0x28c>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	881b      	ldrh	r3, [r3, #0]
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	4a4b      	ldr	r2, [pc, #300]	; (800b58c <tcp_input+0x28c>)
 800b45e:	6814      	ldr	r4, [r2, #0]
 800b460:	4618      	mov	r0, r3
 800b462:	f7fc fdab 	bl	8007fbc <lwip_htons>
 800b466:	4603      	mov	r3, r0
 800b468:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b46a:	4b48      	ldr	r3, [pc, #288]	; (800b58c <tcp_input+0x28c>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	885b      	ldrh	r3, [r3, #2]
 800b470:	b29b      	uxth	r3, r3
 800b472:	4a46      	ldr	r2, [pc, #280]	; (800b58c <tcp_input+0x28c>)
 800b474:	6814      	ldr	r4, [r2, #0]
 800b476:	4618      	mov	r0, r3
 800b478:	f7fc fda0 	bl	8007fbc <lwip_htons>
 800b47c:	4603      	mov	r3, r0
 800b47e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b480:	4b42      	ldr	r3, [pc, #264]	; (800b58c <tcp_input+0x28c>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	4a41      	ldr	r2, [pc, #260]	; (800b58c <tcp_input+0x28c>)
 800b488:	6814      	ldr	r4, [r2, #0]
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7fc fdab 	bl	8007fe6 <lwip_htonl>
 800b490:	4603      	mov	r3, r0
 800b492:	6063      	str	r3, [r4, #4]
 800b494:	6863      	ldr	r3, [r4, #4]
 800b496:	4a45      	ldr	r2, [pc, #276]	; (800b5ac <tcp_input+0x2ac>)
 800b498:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b49a:	4b3c      	ldr	r3, [pc, #240]	; (800b58c <tcp_input+0x28c>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	4a3a      	ldr	r2, [pc, #232]	; (800b58c <tcp_input+0x28c>)
 800b4a2:	6814      	ldr	r4, [r2, #0]
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7fc fd9e 	bl	8007fe6 <lwip_htonl>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	60a3      	str	r3, [r4, #8]
 800b4ae:	68a3      	ldr	r3, [r4, #8]
 800b4b0:	4a3f      	ldr	r2, [pc, #252]	; (800b5b0 <tcp_input+0x2b0>)
 800b4b2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b4b4:	4b35      	ldr	r3, [pc, #212]	; (800b58c <tcp_input+0x28c>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	89db      	ldrh	r3, [r3, #14]
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	4a33      	ldr	r2, [pc, #204]	; (800b58c <tcp_input+0x28c>)
 800b4be:	6814      	ldr	r4, [r2, #0]
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f7fc fd7b 	bl	8007fbc <lwip_htons>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b4ca:	4b30      	ldr	r3, [pc, #192]	; (800b58c <tcp_input+0x28c>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	899b      	ldrh	r3, [r3, #12]
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7fc fd72 	bl	8007fbc <lwip_htons>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4e0:	b2da      	uxtb	r2, r3
 800b4e2:	4b34      	ldr	r3, [pc, #208]	; (800b5b4 <tcp_input+0x2b4>)
 800b4e4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	891a      	ldrh	r2, [r3, #8]
 800b4ea:	4b33      	ldr	r3, [pc, #204]	; (800b5b8 <tcp_input+0x2b8>)
 800b4ec:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b4ee:	4b31      	ldr	r3, [pc, #196]	; (800b5b4 <tcp_input+0x2b4>)
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	f003 0303 	and.w	r3, r3, #3
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d00c      	beq.n	800b514 <tcp_input+0x214>
    tcplen++;
 800b4fa:	4b2f      	ldr	r3, [pc, #188]	; (800b5b8 <tcp_input+0x2b8>)
 800b4fc:	881b      	ldrh	r3, [r3, #0]
 800b4fe:	3301      	adds	r3, #1
 800b500:	b29a      	uxth	r2, r3
 800b502:	4b2d      	ldr	r3, [pc, #180]	; (800b5b8 <tcp_input+0x2b8>)
 800b504:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	891a      	ldrh	r2, [r3, #8]
 800b50a:	4b2b      	ldr	r3, [pc, #172]	; (800b5b8 <tcp_input+0x2b8>)
 800b50c:	881b      	ldrh	r3, [r3, #0]
 800b50e:	429a      	cmp	r2, r3
 800b510:	f200 82e6 	bhi.w	800bae0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b514:	2300      	movs	r3, #0
 800b516:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b518:	4b28      	ldr	r3, [pc, #160]	; (800b5bc <tcp_input+0x2bc>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	61fb      	str	r3, [r7, #28]
 800b51e:	e09d      	b.n	800b65c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b520:	69fb      	ldr	r3, [r7, #28]
 800b522:	7d1b      	ldrb	r3, [r3, #20]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d105      	bne.n	800b534 <tcp_input+0x234>
 800b528:	4b15      	ldr	r3, [pc, #84]	; (800b580 <tcp_input+0x280>)
 800b52a:	22fb      	movs	r2, #251	; 0xfb
 800b52c:	4924      	ldr	r1, [pc, #144]	; (800b5c0 <tcp_input+0x2c0>)
 800b52e:	4816      	ldr	r0, [pc, #88]	; (800b588 <tcp_input+0x288>)
 800b530:	f008 fc8e 	bl	8013e50 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	7d1b      	ldrb	r3, [r3, #20]
 800b538:	2b0a      	cmp	r3, #10
 800b53a:	d105      	bne.n	800b548 <tcp_input+0x248>
 800b53c:	4b10      	ldr	r3, [pc, #64]	; (800b580 <tcp_input+0x280>)
 800b53e:	22fc      	movs	r2, #252	; 0xfc
 800b540:	4920      	ldr	r1, [pc, #128]	; (800b5c4 <tcp_input+0x2c4>)
 800b542:	4811      	ldr	r0, [pc, #68]	; (800b588 <tcp_input+0x288>)
 800b544:	f008 fc84 	bl	8013e50 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	7d1b      	ldrb	r3, [r3, #20]
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d105      	bne.n	800b55c <tcp_input+0x25c>
 800b550:	4b0b      	ldr	r3, [pc, #44]	; (800b580 <tcp_input+0x280>)
 800b552:	22fd      	movs	r2, #253	; 0xfd
 800b554:	491c      	ldr	r1, [pc, #112]	; (800b5c8 <tcp_input+0x2c8>)
 800b556:	480c      	ldr	r0, [pc, #48]	; (800b588 <tcp_input+0x288>)
 800b558:	f008 fc7a 	bl	8013e50 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b55c:	69fb      	ldr	r3, [r7, #28]
 800b55e:	7a1b      	ldrb	r3, [r3, #8]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d033      	beq.n	800b5cc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	7a1a      	ldrb	r2, [r3, #8]
 800b568:	4b09      	ldr	r3, [pc, #36]	; (800b590 <tcp_input+0x290>)
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b570:	3301      	adds	r3, #1
 800b572:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b574:	429a      	cmp	r2, r3
 800b576:	d029      	beq.n	800b5cc <tcp_input+0x2cc>
      prev = pcb;
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	61bb      	str	r3, [r7, #24]
      continue;
 800b57c:	e06b      	b.n	800b656 <tcp_input+0x356>
 800b57e:	bf00      	nop
 800b580:	0801662c 	.word	0x0801662c
 800b584:	08016660 	.word	0x08016660
 800b588:	08016678 	.word	0x08016678
 800b58c:	2000aee8 	.word	0x2000aee8
 800b590:	20005770 	.word	0x20005770
 800b594:	2000aeec 	.word	0x2000aeec
 800b598:	2000aef0 	.word	0x2000aef0
 800b59c:	2000aeee 	.word	0x2000aeee
 800b5a0:	080166a0 	.word	0x080166a0
 800b5a4:	080166b0 	.word	0x080166b0
 800b5a8:	080166bc 	.word	0x080166bc
 800b5ac:	2000aef8 	.word	0x2000aef8
 800b5b0:	2000aefc 	.word	0x2000aefc
 800b5b4:	2000af04 	.word	0x2000af04
 800b5b8:	2000af02 	.word	0x2000af02
 800b5bc:	2000aecc 	.word	0x2000aecc
 800b5c0:	080166dc 	.word	0x080166dc
 800b5c4:	08016704 	.word	0x08016704
 800b5c8:	08016730 	.word	0x08016730
    }

    if (pcb->remote_port == tcphdr->src &&
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	8b1a      	ldrh	r2, [r3, #24]
 800b5d0:	4b72      	ldr	r3, [pc, #456]	; (800b79c <tcp_input+0x49c>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	881b      	ldrh	r3, [r3, #0]
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d13a      	bne.n	800b652 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	8ada      	ldrh	r2, [r3, #22]
 800b5e0:	4b6e      	ldr	r3, [pc, #440]	; (800b79c <tcp_input+0x49c>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	885b      	ldrh	r3, [r3, #2]
 800b5e6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d132      	bne.n	800b652 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	685a      	ldr	r2, [r3, #4]
 800b5f0:	4b6b      	ldr	r3, [pc, #428]	; (800b7a0 <tcp_input+0x4a0>)
 800b5f2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d12c      	bne.n	800b652 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	681a      	ldr	r2, [r3, #0]
 800b5fc:	4b68      	ldr	r3, [pc, #416]	; (800b7a0 <tcp_input+0x4a0>)
 800b5fe:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b600:	429a      	cmp	r2, r3
 800b602:	d126      	bne.n	800b652 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b604:	69fb      	ldr	r3, [r7, #28]
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	69fa      	ldr	r2, [r7, #28]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d106      	bne.n	800b61c <tcp_input+0x31c>
 800b60e:	4b65      	ldr	r3, [pc, #404]	; (800b7a4 <tcp_input+0x4a4>)
 800b610:	f240 120d 	movw	r2, #269	; 0x10d
 800b614:	4964      	ldr	r1, [pc, #400]	; (800b7a8 <tcp_input+0x4a8>)
 800b616:	4865      	ldr	r0, [pc, #404]	; (800b7ac <tcp_input+0x4ac>)
 800b618:	f008 fc1a 	bl	8013e50 <iprintf>
      if (prev != NULL) {
 800b61c:	69bb      	ldr	r3, [r7, #24]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d00a      	beq.n	800b638 <tcp_input+0x338>
        prev->next = pcb->next;
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	68da      	ldr	r2, [r3, #12]
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b62a:	4b61      	ldr	r3, [pc, #388]	; (800b7b0 <tcp_input+0x4b0>)
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	69fb      	ldr	r3, [r7, #28]
 800b630:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b632:	4a5f      	ldr	r2, [pc, #380]	; (800b7b0 <tcp_input+0x4b0>)
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	69fa      	ldr	r2, [r7, #28]
 800b63e:	429a      	cmp	r2, r3
 800b640:	d111      	bne.n	800b666 <tcp_input+0x366>
 800b642:	4b58      	ldr	r3, [pc, #352]	; (800b7a4 <tcp_input+0x4a4>)
 800b644:	f240 1215 	movw	r2, #277	; 0x115
 800b648:	495a      	ldr	r1, [pc, #360]	; (800b7b4 <tcp_input+0x4b4>)
 800b64a:	4858      	ldr	r0, [pc, #352]	; (800b7ac <tcp_input+0x4ac>)
 800b64c:	f008 fc00 	bl	8013e50 <iprintf>
      break;
 800b650:	e009      	b.n	800b666 <tcp_input+0x366>
    }
    prev = pcb;
 800b652:	69fb      	ldr	r3, [r7, #28]
 800b654:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	61fb      	str	r3, [r7, #28]
 800b65c:	69fb      	ldr	r3, [r7, #28]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	f47f af5e 	bne.w	800b520 <tcp_input+0x220>
 800b664:	e000      	b.n	800b668 <tcp_input+0x368>
      break;
 800b666:	bf00      	nop
  }

  if (pcb == NULL) {
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	f040 80aa 	bne.w	800b7c4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b670:	4b51      	ldr	r3, [pc, #324]	; (800b7b8 <tcp_input+0x4b8>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	61fb      	str	r3, [r7, #28]
 800b676:	e03f      	b.n	800b6f8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b678:	69fb      	ldr	r3, [r7, #28]
 800b67a:	7d1b      	ldrb	r3, [r3, #20]
 800b67c:	2b0a      	cmp	r3, #10
 800b67e:	d006      	beq.n	800b68e <tcp_input+0x38e>
 800b680:	4b48      	ldr	r3, [pc, #288]	; (800b7a4 <tcp_input+0x4a4>)
 800b682:	f240 121f 	movw	r2, #287	; 0x11f
 800b686:	494d      	ldr	r1, [pc, #308]	; (800b7bc <tcp_input+0x4bc>)
 800b688:	4848      	ldr	r0, [pc, #288]	; (800b7ac <tcp_input+0x4ac>)
 800b68a:	f008 fbe1 	bl	8013e50 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b68e:	69fb      	ldr	r3, [r7, #28]
 800b690:	7a1b      	ldrb	r3, [r3, #8]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d009      	beq.n	800b6aa <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b696:	69fb      	ldr	r3, [r7, #28]
 800b698:	7a1a      	ldrb	r2, [r3, #8]
 800b69a:	4b41      	ldr	r3, [pc, #260]	; (800b7a0 <tcp_input+0x4a0>)
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d122      	bne.n	800b6f0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800b6aa:	69fb      	ldr	r3, [r7, #28]
 800b6ac:	8b1a      	ldrh	r2, [r3, #24]
 800b6ae:	4b3b      	ldr	r3, [pc, #236]	; (800b79c <tcp_input+0x49c>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	881b      	ldrh	r3, [r3, #0]
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d11b      	bne.n	800b6f2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	8ada      	ldrh	r2, [r3, #22]
 800b6be:	4b37      	ldr	r3, [pc, #220]	; (800b79c <tcp_input+0x49c>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	885b      	ldrh	r3, [r3, #2]
 800b6c4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d113      	bne.n	800b6f2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b6ca:	69fb      	ldr	r3, [r7, #28]
 800b6cc:	685a      	ldr	r2, [r3, #4]
 800b6ce:	4b34      	ldr	r3, [pc, #208]	; (800b7a0 <tcp_input+0x4a0>)
 800b6d0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d10d      	bne.n	800b6f2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b6d6:	69fb      	ldr	r3, [r7, #28]
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	4b31      	ldr	r3, [pc, #196]	; (800b7a0 <tcp_input+0x4a0>)
 800b6dc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d107      	bne.n	800b6f2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800b6e2:	69f8      	ldr	r0, [r7, #28]
 800b6e4:	f000 fb56 	bl	800bd94 <tcp_timewait_input>
        }
        pbuf_free(p);
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f7fd ffd1 	bl	8009690 <pbuf_free>
        return;
 800b6ee:	e1fd      	b.n	800baec <tcp_input+0x7ec>
        continue;
 800b6f0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b6f2:	69fb      	ldr	r3, [r7, #28]
 800b6f4:	68db      	ldr	r3, [r3, #12]
 800b6f6:	61fb      	str	r3, [r7, #28]
 800b6f8:	69fb      	ldr	r3, [r7, #28]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d1bc      	bne.n	800b678 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b6fe:	2300      	movs	r3, #0
 800b700:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b702:	4b2f      	ldr	r3, [pc, #188]	; (800b7c0 <tcp_input+0x4c0>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	617b      	str	r3, [r7, #20]
 800b708:	e02a      	b.n	800b760 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	7a1b      	ldrb	r3, [r3, #8]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d00c      	beq.n	800b72c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	7a1a      	ldrb	r2, [r3, #8]
 800b716:	4b22      	ldr	r3, [pc, #136]	; (800b7a0 <tcp_input+0x4a0>)
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b71e:	3301      	adds	r3, #1
 800b720:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b722:	429a      	cmp	r2, r3
 800b724:	d002      	beq.n	800b72c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	61bb      	str	r3, [r7, #24]
        continue;
 800b72a:	e016      	b.n	800b75a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	8ada      	ldrh	r2, [r3, #22]
 800b730:	4b1a      	ldr	r3, [pc, #104]	; (800b79c <tcp_input+0x49c>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	885b      	ldrh	r3, [r3, #2]
 800b736:	b29b      	uxth	r3, r3
 800b738:	429a      	cmp	r2, r3
 800b73a:	d10c      	bne.n	800b756 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	4b17      	ldr	r3, [pc, #92]	; (800b7a0 <tcp_input+0x4a0>)
 800b742:	695b      	ldr	r3, [r3, #20]
 800b744:	429a      	cmp	r2, r3
 800b746:	d00f      	beq.n	800b768 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00d      	beq.n	800b76a <tcp_input+0x46a>
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d009      	beq.n	800b76a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	68db      	ldr	r3, [r3, #12]
 800b75e:	617b      	str	r3, [r7, #20]
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1d1      	bne.n	800b70a <tcp_input+0x40a>
 800b766:	e000      	b.n	800b76a <tcp_input+0x46a>
            break;
 800b768:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d029      	beq.n	800b7c4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b770:	69bb      	ldr	r3, [r7, #24]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d00a      	beq.n	800b78c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	68da      	ldr	r2, [r3, #12]
 800b77a:	69bb      	ldr	r3, [r7, #24]
 800b77c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b77e:	4b10      	ldr	r3, [pc, #64]	; (800b7c0 <tcp_input+0x4c0>)
 800b780:	681a      	ldr	r2, [r3, #0]
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b786:	4a0e      	ldr	r2, [pc, #56]	; (800b7c0 <tcp_input+0x4c0>)
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800b78c:	6978      	ldr	r0, [r7, #20]
 800b78e:	f000 fa03 	bl	800bb98 <tcp_listen_input>
      }
      pbuf_free(p);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f7fd ff7c 	bl	8009690 <pbuf_free>
      return;
 800b798:	e1a8      	b.n	800baec <tcp_input+0x7ec>
 800b79a:	bf00      	nop
 800b79c:	2000aee8 	.word	0x2000aee8
 800b7a0:	20005770 	.word	0x20005770
 800b7a4:	0801662c 	.word	0x0801662c
 800b7a8:	08016758 	.word	0x08016758
 800b7ac:	08016678 	.word	0x08016678
 800b7b0:	2000aecc 	.word	0x2000aecc
 800b7b4:	08016784 	.word	0x08016784
 800b7b8:	2000aed0 	.word	0x2000aed0
 800b7bc:	080167b0 	.word	0x080167b0
 800b7c0:	2000aec8 	.word	0x2000aec8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800b7c4:	69fb      	ldr	r3, [r7, #28]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f000 8158 	beq.w	800ba7c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b7cc:	4b95      	ldr	r3, [pc, #596]	; (800ba24 <tcp_input+0x724>)
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	891a      	ldrh	r2, [r3, #8]
 800b7d6:	4b93      	ldr	r3, [pc, #588]	; (800ba24 <tcp_input+0x724>)
 800b7d8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b7da:	4a92      	ldr	r2, [pc, #584]	; (800ba24 <tcp_input+0x724>)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b7e0:	4b91      	ldr	r3, [pc, #580]	; (800ba28 <tcp_input+0x728>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4a8f      	ldr	r2, [pc, #572]	; (800ba24 <tcp_input+0x724>)
 800b7e6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b7e8:	4b90      	ldr	r3, [pc, #576]	; (800ba2c <tcp_input+0x72c>)
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b7ee:	4b90      	ldr	r3, [pc, #576]	; (800ba30 <tcp_input+0x730>)
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b7f4:	4b8f      	ldr	r3, [pc, #572]	; (800ba34 <tcp_input+0x734>)
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b7fa:	4b8f      	ldr	r3, [pc, #572]	; (800ba38 <tcp_input+0x738>)
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	f003 0308 	and.w	r3, r3, #8
 800b802:	2b00      	cmp	r3, #0
 800b804:	d006      	beq.n	800b814 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	7b5b      	ldrb	r3, [r3, #13]
 800b80a:	f043 0301 	orr.w	r3, r3, #1
 800b80e:	b2da      	uxtb	r2, r3
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b814:	69fb      	ldr	r3, [r7, #28]
 800b816:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d017      	beq.n	800b84c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b81c:	69f8      	ldr	r0, [r7, #28]
 800b81e:	f7ff f929 	bl	800aa74 <tcp_process_refused_data>
 800b822:	4603      	mov	r3, r0
 800b824:	f113 0f0d 	cmn.w	r3, #13
 800b828:	d007      	beq.n	800b83a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b82a:	69fb      	ldr	r3, [r7, #28]
 800b82c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d00c      	beq.n	800b84c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b832:	4b82      	ldr	r3, [pc, #520]	; (800ba3c <tcp_input+0x73c>)
 800b834:	881b      	ldrh	r3, [r3, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d008      	beq.n	800b84c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b83a:	69fb      	ldr	r3, [r7, #28]
 800b83c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b83e:	2b00      	cmp	r3, #0
 800b840:	f040 80e3 	bne.w	800ba0a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b844:	69f8      	ldr	r0, [r7, #28]
 800b846:	f003 f9ad 	bl	800eba4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b84a:	e0de      	b.n	800ba0a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800b84c:	4a7c      	ldr	r2, [pc, #496]	; (800ba40 <tcp_input+0x740>)
 800b84e:	69fb      	ldr	r3, [r7, #28]
 800b850:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b852:	69f8      	ldr	r0, [r7, #28]
 800b854:	f000 fb18 	bl	800be88 <tcp_process>
 800b858:	4603      	mov	r3, r0
 800b85a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b85c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b860:	f113 0f0d 	cmn.w	r3, #13
 800b864:	f000 80d3 	beq.w	800ba0e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800b868:	4b71      	ldr	r3, [pc, #452]	; (800ba30 <tcp_input+0x730>)
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	f003 0308 	and.w	r3, r3, #8
 800b870:	2b00      	cmp	r3, #0
 800b872:	d015      	beq.n	800b8a0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b874:	69fb      	ldr	r3, [r7, #28]
 800b876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d008      	beq.n	800b890 <tcp_input+0x590>
 800b87e:	69fb      	ldr	r3, [r7, #28]
 800b880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b884:	69fa      	ldr	r2, [r7, #28]
 800b886:	6912      	ldr	r2, [r2, #16]
 800b888:	f06f 010d 	mvn.w	r1, #13
 800b88c:	4610      	mov	r0, r2
 800b88e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b890:	69f9      	ldr	r1, [r7, #28]
 800b892:	486c      	ldr	r0, [pc, #432]	; (800ba44 <tcp_input+0x744>)
 800b894:	f7ff fbbc 	bl	800b010 <tcp_pcb_remove>
        tcp_free(pcb);
 800b898:	69f8      	ldr	r0, [r7, #28]
 800b89a:	f7fe f9a9 	bl	8009bf0 <tcp_free>
 800b89e:	e0da      	b.n	800ba56 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b8a4:	4b63      	ldr	r3, [pc, #396]	; (800ba34 <tcp_input+0x734>)
 800b8a6:	881b      	ldrh	r3, [r3, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d01d      	beq.n	800b8e8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b8ac:	4b61      	ldr	r3, [pc, #388]	; (800ba34 <tcp_input+0x734>)
 800b8ae:	881b      	ldrh	r3, [r3, #0]
 800b8b0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b8b2:	69fb      	ldr	r3, [r7, #28]
 800b8b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d00a      	beq.n	800b8d2 <tcp_input+0x5d2>
 800b8bc:	69fb      	ldr	r3, [r7, #28]
 800b8be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8c2:	69fa      	ldr	r2, [r7, #28]
 800b8c4:	6910      	ldr	r0, [r2, #16]
 800b8c6:	89fa      	ldrh	r2, [r7, #14]
 800b8c8:	69f9      	ldr	r1, [r7, #28]
 800b8ca:	4798      	blx	r3
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	74fb      	strb	r3, [r7, #19]
 800b8d0:	e001      	b.n	800b8d6 <tcp_input+0x5d6>
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b8d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b8da:	f113 0f0d 	cmn.w	r3, #13
 800b8de:	f000 8098 	beq.w	800ba12 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b8e2:	4b54      	ldr	r3, [pc, #336]	; (800ba34 <tcp_input+0x734>)
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b8e8:	69f8      	ldr	r0, [r7, #28]
 800b8ea:	f000 f915 	bl	800bb18 <tcp_input_delayed_close>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	f040 8090 	bne.w	800ba16 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b8f6:	4b4d      	ldr	r3, [pc, #308]	; (800ba2c <tcp_input+0x72c>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d041      	beq.n	800b982 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b8fe:	69fb      	ldr	r3, [r7, #28]
 800b900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b902:	2b00      	cmp	r3, #0
 800b904:	d006      	beq.n	800b914 <tcp_input+0x614>
 800b906:	4b50      	ldr	r3, [pc, #320]	; (800ba48 <tcp_input+0x748>)
 800b908:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b90c:	494f      	ldr	r1, [pc, #316]	; (800ba4c <tcp_input+0x74c>)
 800b90e:	4850      	ldr	r0, [pc, #320]	; (800ba50 <tcp_input+0x750>)
 800b910:	f008 fa9e 	bl	8013e50 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b914:	69fb      	ldr	r3, [r7, #28]
 800b916:	8b5b      	ldrh	r3, [r3, #26]
 800b918:	f003 0310 	and.w	r3, r3, #16
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d008      	beq.n	800b932 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b920:	4b42      	ldr	r3, [pc, #264]	; (800ba2c <tcp_input+0x72c>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4618      	mov	r0, r3
 800b926:	f7fd feb3 	bl	8009690 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b92a:	69f8      	ldr	r0, [r7, #28]
 800b92c:	f7fe fc48 	bl	800a1c0 <tcp_abort>
            goto aborted;
 800b930:	e091      	b.n	800ba56 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b932:	69fb      	ldr	r3, [r7, #28]
 800b934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d00c      	beq.n	800b956 <tcp_input+0x656>
 800b93c:	69fb      	ldr	r3, [r7, #28]
 800b93e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	6918      	ldr	r0, [r3, #16]
 800b946:	4b39      	ldr	r3, [pc, #228]	; (800ba2c <tcp_input+0x72c>)
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	2300      	movs	r3, #0
 800b94c:	69f9      	ldr	r1, [r7, #28]
 800b94e:	47a0      	blx	r4
 800b950:	4603      	mov	r3, r0
 800b952:	74fb      	strb	r3, [r7, #19]
 800b954:	e008      	b.n	800b968 <tcp_input+0x668>
 800b956:	4b35      	ldr	r3, [pc, #212]	; (800ba2c <tcp_input+0x72c>)
 800b958:	681a      	ldr	r2, [r3, #0]
 800b95a:	2300      	movs	r3, #0
 800b95c:	69f9      	ldr	r1, [r7, #28]
 800b95e:	2000      	movs	r0, #0
 800b960:	f7ff f95e 	bl	800ac20 <tcp_recv_null>
 800b964:	4603      	mov	r3, r0
 800b966:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b968:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b96c:	f113 0f0d 	cmn.w	r3, #13
 800b970:	d053      	beq.n	800ba1a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b972:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d003      	beq.n	800b982 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b97a:	4b2c      	ldr	r3, [pc, #176]	; (800ba2c <tcp_input+0x72c>)
 800b97c:	681a      	ldr	r2, [r3, #0]
 800b97e:	69fb      	ldr	r3, [r7, #28]
 800b980:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b982:	4b2b      	ldr	r3, [pc, #172]	; (800ba30 <tcp_input+0x730>)
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	f003 0320 	and.w	r3, r3, #32
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d030      	beq.n	800b9f0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800b98e:	69fb      	ldr	r3, [r7, #28]
 800b990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b992:	2b00      	cmp	r3, #0
 800b994:	d009      	beq.n	800b9aa <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b996:	69fb      	ldr	r3, [r7, #28]
 800b998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b99a:	7b5a      	ldrb	r2, [r3, #13]
 800b99c:	69fb      	ldr	r3, [r7, #28]
 800b99e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9a0:	f042 0220 	orr.w	r2, r2, #32
 800b9a4:	b2d2      	uxtb	r2, r2
 800b9a6:	735a      	strb	r2, [r3, #13]
 800b9a8:	e022      	b.n	800b9f0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b9aa:	69fb      	ldr	r3, [r7, #28]
 800b9ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9ae:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b9b2:	d005      	beq.n	800b9c0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800b9b4:	69fb      	ldr	r3, [r7, #28]
 800b9b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	b29a      	uxth	r2, r3
 800b9bc:	69fb      	ldr	r3, [r7, #28]
 800b9be:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d00b      	beq.n	800b9e2 <tcp_input+0x6e2>
 800b9ca:	69fb      	ldr	r3, [r7, #28]
 800b9cc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b9d0:	69fb      	ldr	r3, [r7, #28]
 800b9d2:	6918      	ldr	r0, [r3, #16]
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	69f9      	ldr	r1, [r7, #28]
 800b9da:	47a0      	blx	r4
 800b9dc:	4603      	mov	r3, r0
 800b9de:	74fb      	strb	r3, [r7, #19]
 800b9e0:	e001      	b.n	800b9e6 <tcp_input+0x6e6>
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b9e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b9ea:	f113 0f0d 	cmn.w	r3, #13
 800b9ee:	d016      	beq.n	800ba1e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b9f0:	4b13      	ldr	r3, [pc, #76]	; (800ba40 <tcp_input+0x740>)
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b9f6:	69f8      	ldr	r0, [r7, #28]
 800b9f8:	f000 f88e 	bl	800bb18 <tcp_input_delayed_close>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d128      	bne.n	800ba54 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ba02:	69f8      	ldr	r0, [r7, #28]
 800ba04:	f002 fac8 	bl	800df98 <tcp_output>
 800ba08:	e025      	b.n	800ba56 <tcp_input+0x756>
        goto aborted;
 800ba0a:	bf00      	nop
 800ba0c:	e023      	b.n	800ba56 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ba0e:	bf00      	nop
 800ba10:	e021      	b.n	800ba56 <tcp_input+0x756>
              goto aborted;
 800ba12:	bf00      	nop
 800ba14:	e01f      	b.n	800ba56 <tcp_input+0x756>
          goto aborted;
 800ba16:	bf00      	nop
 800ba18:	e01d      	b.n	800ba56 <tcp_input+0x756>
            goto aborted;
 800ba1a:	bf00      	nop
 800ba1c:	e01b      	b.n	800ba56 <tcp_input+0x756>
              goto aborted;
 800ba1e:	bf00      	nop
 800ba20:	e019      	b.n	800ba56 <tcp_input+0x756>
 800ba22:	bf00      	nop
 800ba24:	2000aed8 	.word	0x2000aed8
 800ba28:	2000aee8 	.word	0x2000aee8
 800ba2c:	2000af08 	.word	0x2000af08
 800ba30:	2000af05 	.word	0x2000af05
 800ba34:	2000af00 	.word	0x2000af00
 800ba38:	2000af04 	.word	0x2000af04
 800ba3c:	2000af02 	.word	0x2000af02
 800ba40:	2000af0c 	.word	0x2000af0c
 800ba44:	2000aecc 	.word	0x2000aecc
 800ba48:	0801662c 	.word	0x0801662c
 800ba4c:	080167e0 	.word	0x080167e0
 800ba50:	08016678 	.word	0x08016678
          goto aborted;
 800ba54:	bf00      	nop
    tcp_input_pcb = NULL;
 800ba56:	4b27      	ldr	r3, [pc, #156]	; (800baf4 <tcp_input+0x7f4>)
 800ba58:	2200      	movs	r2, #0
 800ba5a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ba5c:	4b26      	ldr	r3, [pc, #152]	; (800baf8 <tcp_input+0x7f8>)
 800ba5e:	2200      	movs	r2, #0
 800ba60:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ba62:	4b26      	ldr	r3, [pc, #152]	; (800bafc <tcp_input+0x7fc>)
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d03f      	beq.n	800baea <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800ba6a:	4b24      	ldr	r3, [pc, #144]	; (800bafc <tcp_input+0x7fc>)
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7fd fe0e 	bl	8009690 <pbuf_free>
      inseg.p = NULL;
 800ba74:	4b21      	ldr	r3, [pc, #132]	; (800bafc <tcp_input+0x7fc>)
 800ba76:	2200      	movs	r2, #0
 800ba78:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ba7a:	e036      	b.n	800baea <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ba7c:	4b20      	ldr	r3, [pc, #128]	; (800bb00 <tcp_input+0x800>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	899b      	ldrh	r3, [r3, #12]
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7fc fa99 	bl	8007fbc <lwip_htons>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	f003 0304 	and.w	r3, r3, #4
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d118      	bne.n	800bac8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba96:	4b1b      	ldr	r3, [pc, #108]	; (800bb04 <tcp_input+0x804>)
 800ba98:	6819      	ldr	r1, [r3, #0]
 800ba9a:	4b1b      	ldr	r3, [pc, #108]	; (800bb08 <tcp_input+0x808>)
 800ba9c:	881b      	ldrh	r3, [r3, #0]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	4b1a      	ldr	r3, [pc, #104]	; (800bb0c <tcp_input+0x80c>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800baa6:	4b16      	ldr	r3, [pc, #88]	; (800bb00 <tcp_input+0x800>)
 800baa8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800baaa:	885b      	ldrh	r3, [r3, #2]
 800baac:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800baae:	4a14      	ldr	r2, [pc, #80]	; (800bb00 <tcp_input+0x800>)
 800bab0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bab2:	8812      	ldrh	r2, [r2, #0]
 800bab4:	b292      	uxth	r2, r2
 800bab6:	9202      	str	r2, [sp, #8]
 800bab8:	9301      	str	r3, [sp, #4]
 800baba:	4b15      	ldr	r3, [pc, #84]	; (800bb10 <tcp_input+0x810>)
 800babc:	9300      	str	r3, [sp, #0]
 800babe:	4b15      	ldr	r3, [pc, #84]	; (800bb14 <tcp_input+0x814>)
 800bac0:	4602      	mov	r2, r0
 800bac2:	2000      	movs	r0, #0
 800bac4:	f003 f81c 	bl	800eb00 <tcp_rst>
    pbuf_free(p);
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f7fd fde1 	bl	8009690 <pbuf_free>
  return;
 800bace:	e00c      	b.n	800baea <tcp_input+0x7ea>
    goto dropped;
 800bad0:	bf00      	nop
 800bad2:	e006      	b.n	800bae2 <tcp_input+0x7e2>
    goto dropped;
 800bad4:	bf00      	nop
 800bad6:	e004      	b.n	800bae2 <tcp_input+0x7e2>
    goto dropped;
 800bad8:	bf00      	nop
 800bada:	e002      	b.n	800bae2 <tcp_input+0x7e2>
      goto dropped;
 800badc:	bf00      	nop
 800bade:	e000      	b.n	800bae2 <tcp_input+0x7e2>
      goto dropped;
 800bae0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f7fd fdd4 	bl	8009690 <pbuf_free>
 800bae8:	e000      	b.n	800baec <tcp_input+0x7ec>
  return;
 800baea:	bf00      	nop
}
 800baec:	3724      	adds	r7, #36	; 0x24
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd90      	pop	{r4, r7, pc}
 800baf2:	bf00      	nop
 800baf4:	2000af0c 	.word	0x2000af0c
 800baf8:	2000af08 	.word	0x2000af08
 800bafc:	2000aed8 	.word	0x2000aed8
 800bb00:	2000aee8 	.word	0x2000aee8
 800bb04:	2000aefc 	.word	0x2000aefc
 800bb08:	2000af02 	.word	0x2000af02
 800bb0c:	2000aef8 	.word	0x2000aef8
 800bb10:	20005780 	.word	0x20005780
 800bb14:	20005784 	.word	0x20005784

0800bb18 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d106      	bne.n	800bb34 <tcp_input_delayed_close+0x1c>
 800bb26:	4b17      	ldr	r3, [pc, #92]	; (800bb84 <tcp_input_delayed_close+0x6c>)
 800bb28:	f240 225a 	movw	r2, #602	; 0x25a
 800bb2c:	4916      	ldr	r1, [pc, #88]	; (800bb88 <tcp_input_delayed_close+0x70>)
 800bb2e:	4817      	ldr	r0, [pc, #92]	; (800bb8c <tcp_input_delayed_close+0x74>)
 800bb30:	f008 f98e 	bl	8013e50 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800bb34:	4b16      	ldr	r3, [pc, #88]	; (800bb90 <tcp_input_delayed_close+0x78>)
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	f003 0310 	and.w	r3, r3, #16
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d01c      	beq.n	800bb7a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	8b5b      	ldrh	r3, [r3, #26]
 800bb44:	f003 0310 	and.w	r3, r3, #16
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d10d      	bne.n	800bb68 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d008      	beq.n	800bb68 <tcp_input_delayed_close+0x50>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	6912      	ldr	r2, [r2, #16]
 800bb60:	f06f 010e 	mvn.w	r1, #14
 800bb64:	4610      	mov	r0, r2
 800bb66:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bb68:	6879      	ldr	r1, [r7, #4]
 800bb6a:	480a      	ldr	r0, [pc, #40]	; (800bb94 <tcp_input_delayed_close+0x7c>)
 800bb6c:	f7ff fa50 	bl	800b010 <tcp_pcb_remove>
    tcp_free(pcb);
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f7fe f83d 	bl	8009bf0 <tcp_free>
    return 1;
 800bb76:	2301      	movs	r3, #1
 800bb78:	e000      	b.n	800bb7c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3708      	adds	r7, #8
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	0801662c 	.word	0x0801662c
 800bb88:	080167fc 	.word	0x080167fc
 800bb8c:	08016678 	.word	0x08016678
 800bb90:	2000af05 	.word	0x2000af05
 800bb94:	2000aecc 	.word	0x2000aecc

0800bb98 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800bb98:	b590      	push	{r4, r7, lr}
 800bb9a:	b08b      	sub	sp, #44	; 0x2c
 800bb9c:	af04      	add	r7, sp, #16
 800bb9e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800bba0:	4b6f      	ldr	r3, [pc, #444]	; (800bd60 <tcp_listen_input+0x1c8>)
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	f003 0304 	and.w	r3, r3, #4
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	f040 80d2 	bne.w	800bd52 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d106      	bne.n	800bbc2 <tcp_listen_input+0x2a>
 800bbb4:	4b6b      	ldr	r3, [pc, #428]	; (800bd64 <tcp_listen_input+0x1cc>)
 800bbb6:	f240 2281 	movw	r2, #641	; 0x281
 800bbba:	496b      	ldr	r1, [pc, #428]	; (800bd68 <tcp_listen_input+0x1d0>)
 800bbbc:	486b      	ldr	r0, [pc, #428]	; (800bd6c <tcp_listen_input+0x1d4>)
 800bbbe:	f008 f947 	bl	8013e50 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800bbc2:	4b67      	ldr	r3, [pc, #412]	; (800bd60 <tcp_listen_input+0x1c8>)
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	f003 0310 	and.w	r3, r3, #16
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d019      	beq.n	800bc02 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bbce:	4b68      	ldr	r3, [pc, #416]	; (800bd70 <tcp_listen_input+0x1d8>)
 800bbd0:	6819      	ldr	r1, [r3, #0]
 800bbd2:	4b68      	ldr	r3, [pc, #416]	; (800bd74 <tcp_listen_input+0x1dc>)
 800bbd4:	881b      	ldrh	r3, [r3, #0]
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	4b67      	ldr	r3, [pc, #412]	; (800bd78 <tcp_listen_input+0x1e0>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bbde:	4b67      	ldr	r3, [pc, #412]	; (800bd7c <tcp_listen_input+0x1e4>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bbe2:	885b      	ldrh	r3, [r3, #2]
 800bbe4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bbe6:	4a65      	ldr	r2, [pc, #404]	; (800bd7c <tcp_listen_input+0x1e4>)
 800bbe8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bbea:	8812      	ldrh	r2, [r2, #0]
 800bbec:	b292      	uxth	r2, r2
 800bbee:	9202      	str	r2, [sp, #8]
 800bbf0:	9301      	str	r3, [sp, #4]
 800bbf2:	4b63      	ldr	r3, [pc, #396]	; (800bd80 <tcp_listen_input+0x1e8>)
 800bbf4:	9300      	str	r3, [sp, #0]
 800bbf6:	4b63      	ldr	r3, [pc, #396]	; (800bd84 <tcp_listen_input+0x1ec>)
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f002 ff80 	bl	800eb00 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800bc00:	e0a9      	b.n	800bd56 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800bc02:	4b57      	ldr	r3, [pc, #348]	; (800bd60 <tcp_listen_input+0x1c8>)
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	f003 0302 	and.w	r3, r3, #2
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	f000 80a3 	beq.w	800bd56 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	7d5b      	ldrb	r3, [r3, #21]
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7ff f927 	bl	800ae68 <tcp_alloc>
 800bc1a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d111      	bne.n	800bc46 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	699b      	ldr	r3, [r3, #24]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d00a      	beq.n	800bc40 <tcp_listen_input+0xa8>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	699b      	ldr	r3, [r3, #24]
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	6910      	ldr	r0, [r2, #16]
 800bc32:	f04f 32ff 	mov.w	r2, #4294967295
 800bc36:	2100      	movs	r1, #0
 800bc38:	4798      	blx	r3
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	73bb      	strb	r3, [r7, #14]
      return;
 800bc3e:	e08b      	b.n	800bd58 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bc40:	23f0      	movs	r3, #240	; 0xf0
 800bc42:	73bb      	strb	r3, [r7, #14]
      return;
 800bc44:	e088      	b.n	800bd58 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800bc46:	4b50      	ldr	r3, [pc, #320]	; (800bd88 <tcp_listen_input+0x1f0>)
 800bc48:	695a      	ldr	r2, [r3, #20]
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800bc4e:	4b4e      	ldr	r3, [pc, #312]	; (800bd88 <tcp_listen_input+0x1f0>)
 800bc50:	691a      	ldr	r2, [r3, #16]
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	8ada      	ldrh	r2, [r3, #22]
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800bc5e:	4b47      	ldr	r3, [pc, #284]	; (800bd7c <tcp_listen_input+0x1e4>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	881b      	ldrh	r3, [r3, #0]
 800bc64:	b29a      	uxth	r2, r3
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	2203      	movs	r2, #3
 800bc6e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800bc70:	4b41      	ldr	r3, [pc, #260]	; (800bd78 <tcp_listen_input+0x1e0>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	1c5a      	adds	r2, r3, #1
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800bc82:	6978      	ldr	r0, [r7, #20]
 800bc84:	f7ff fa58 	bl	800b138 <tcp_next_iss>
 800bc88:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	693a      	ldr	r2, [r7, #16]
 800bc8e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	693a      	ldr	r2, [r7, #16]
 800bc94:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	693a      	ldr	r2, [r7, #16]
 800bc9a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	693a      	ldr	r2, [r7, #16]
 800bca0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800bca2:	4b35      	ldr	r3, [pc, #212]	; (800bd78 <tcp_listen_input+0x1e0>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	1e5a      	subs	r2, r3, #1
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	691a      	ldr	r2, [r3, #16]
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	687a      	ldr	r2, [r7, #4]
 800bcb8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	7a5b      	ldrb	r3, [r3, #9]
 800bcbe:	f003 030c 	and.w	r3, r3, #12
 800bcc2:	b2da      	uxtb	r2, r3
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	7a1a      	ldrb	r2, [r3, #8]
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800bcd0:	4b2e      	ldr	r3, [pc, #184]	; (800bd8c <tcp_listen_input+0x1f4>)
 800bcd2:	681a      	ldr	r2, [r3, #0]
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	60da      	str	r2, [r3, #12]
 800bcd8:	4a2c      	ldr	r2, [pc, #176]	; (800bd8c <tcp_listen_input+0x1f4>)
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	6013      	str	r3, [r2, #0]
 800bcde:	f003 f8d1 	bl	800ee84 <tcp_timer_needed>
 800bce2:	4b2b      	ldr	r3, [pc, #172]	; (800bd90 <tcp_listen_input+0x1f8>)
 800bce4:	2201      	movs	r2, #1
 800bce6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800bce8:	6978      	ldr	r0, [r7, #20]
 800bcea:	f001 fd8f 	bl	800d80c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800bcee:	4b23      	ldr	r3, [pc, #140]	; (800bd7c <tcp_listen_input+0x1e4>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	89db      	ldrh	r3, [r3, #14]
 800bcf4:	b29a      	uxth	r2, r3
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	3304      	adds	r3, #4
 800bd10:	4618      	mov	r0, r3
 800bd12:	f006 fe2f 	bl	8012974 <ip4_route>
 800bd16:	4601      	mov	r1, r0
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	3304      	adds	r3, #4
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	4620      	mov	r0, r4
 800bd20:	f7ff fa30 	bl	800b184 <tcp_eff_send_mss_netif>
 800bd24:	4603      	mov	r3, r0
 800bd26:	461a      	mov	r2, r3
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800bd2c:	2112      	movs	r1, #18
 800bd2e:	6978      	ldr	r0, [r7, #20]
 800bd30:	f002 f844 	bl	800ddbc <tcp_enqueue_flags>
 800bd34:	4603      	mov	r3, r0
 800bd36:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800bd38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d004      	beq.n	800bd4a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800bd40:	2100      	movs	r1, #0
 800bd42:	6978      	ldr	r0, [r7, #20]
 800bd44:	f7fe f97e 	bl	800a044 <tcp_abandon>
      return;
 800bd48:	e006      	b.n	800bd58 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800bd4a:	6978      	ldr	r0, [r7, #20]
 800bd4c:	f002 f924 	bl	800df98 <tcp_output>
  return;
 800bd50:	e001      	b.n	800bd56 <tcp_listen_input+0x1be>
    return;
 800bd52:	bf00      	nop
 800bd54:	e000      	b.n	800bd58 <tcp_listen_input+0x1c0>
  return;
 800bd56:	bf00      	nop
}
 800bd58:	371c      	adds	r7, #28
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd90      	pop	{r4, r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	2000af04 	.word	0x2000af04
 800bd64:	0801662c 	.word	0x0801662c
 800bd68:	08016824 	.word	0x08016824
 800bd6c:	08016678 	.word	0x08016678
 800bd70:	2000aefc 	.word	0x2000aefc
 800bd74:	2000af02 	.word	0x2000af02
 800bd78:	2000aef8 	.word	0x2000aef8
 800bd7c:	2000aee8 	.word	0x2000aee8
 800bd80:	20005780 	.word	0x20005780
 800bd84:	20005784 	.word	0x20005784
 800bd88:	20005770 	.word	0x20005770
 800bd8c:	2000aecc 	.word	0x2000aecc
 800bd90:	2000aed4 	.word	0x2000aed4

0800bd94 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b086      	sub	sp, #24
 800bd98:	af04      	add	r7, sp, #16
 800bd9a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800bd9c:	4b2f      	ldr	r3, [pc, #188]	; (800be5c <tcp_timewait_input+0xc8>)
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	f003 0304 	and.w	r3, r3, #4
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d153      	bne.n	800be50 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d106      	bne.n	800bdbc <tcp_timewait_input+0x28>
 800bdae:	4b2c      	ldr	r3, [pc, #176]	; (800be60 <tcp_timewait_input+0xcc>)
 800bdb0:	f240 22ee 	movw	r2, #750	; 0x2ee
 800bdb4:	492b      	ldr	r1, [pc, #172]	; (800be64 <tcp_timewait_input+0xd0>)
 800bdb6:	482c      	ldr	r0, [pc, #176]	; (800be68 <tcp_timewait_input+0xd4>)
 800bdb8:	f008 f84a 	bl	8013e50 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800bdbc:	4b27      	ldr	r3, [pc, #156]	; (800be5c <tcp_timewait_input+0xc8>)
 800bdbe:	781b      	ldrb	r3, [r3, #0]
 800bdc0:	f003 0302 	and.w	r3, r3, #2
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d02a      	beq.n	800be1e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800bdc8:	4b28      	ldr	r3, [pc, #160]	; (800be6c <tcp_timewait_input+0xd8>)
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd0:	1ad3      	subs	r3, r2, r3
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	db2d      	blt.n	800be32 <tcp_timewait_input+0x9e>
 800bdd6:	4b25      	ldr	r3, [pc, #148]	; (800be6c <tcp_timewait_input+0xd8>)
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdde:	6879      	ldr	r1, [r7, #4]
 800bde0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bde2:	440b      	add	r3, r1
 800bde4:	1ad3      	subs	r3, r2, r3
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	dc23      	bgt.n	800be32 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bdea:	4b21      	ldr	r3, [pc, #132]	; (800be70 <tcp_timewait_input+0xdc>)
 800bdec:	6819      	ldr	r1, [r3, #0]
 800bdee:	4b21      	ldr	r3, [pc, #132]	; (800be74 <tcp_timewait_input+0xe0>)
 800bdf0:	881b      	ldrh	r3, [r3, #0]
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	4b1d      	ldr	r3, [pc, #116]	; (800be6c <tcp_timewait_input+0xd8>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bdfa:	4b1f      	ldr	r3, [pc, #124]	; (800be78 <tcp_timewait_input+0xe4>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bdfe:	885b      	ldrh	r3, [r3, #2]
 800be00:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800be02:	4a1d      	ldr	r2, [pc, #116]	; (800be78 <tcp_timewait_input+0xe4>)
 800be04:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800be06:	8812      	ldrh	r2, [r2, #0]
 800be08:	b292      	uxth	r2, r2
 800be0a:	9202      	str	r2, [sp, #8]
 800be0c:	9301      	str	r3, [sp, #4]
 800be0e:	4b1b      	ldr	r3, [pc, #108]	; (800be7c <tcp_timewait_input+0xe8>)
 800be10:	9300      	str	r3, [sp, #0]
 800be12:	4b1b      	ldr	r3, [pc, #108]	; (800be80 <tcp_timewait_input+0xec>)
 800be14:	4602      	mov	r2, r0
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f002 fe72 	bl	800eb00 <tcp_rst>
      return;
 800be1c:	e01b      	b.n	800be56 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800be1e:	4b0f      	ldr	r3, [pc, #60]	; (800be5c <tcp_timewait_input+0xc8>)
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	f003 0301 	and.w	r3, r3, #1
 800be26:	2b00      	cmp	r3, #0
 800be28:	d003      	beq.n	800be32 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800be2a:	4b16      	ldr	r3, [pc, #88]	; (800be84 <tcp_timewait_input+0xf0>)
 800be2c:	681a      	ldr	r2, [r3, #0]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800be32:	4b10      	ldr	r3, [pc, #64]	; (800be74 <tcp_timewait_input+0xe0>)
 800be34:	881b      	ldrh	r3, [r3, #0]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00c      	beq.n	800be54 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	8b5b      	ldrh	r3, [r3, #26]
 800be3e:	f043 0302 	orr.w	r3, r3, #2
 800be42:	b29a      	uxth	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f002 f8a5 	bl	800df98 <tcp_output>
  }
  return;
 800be4e:	e001      	b.n	800be54 <tcp_timewait_input+0xc0>
    return;
 800be50:	bf00      	nop
 800be52:	e000      	b.n	800be56 <tcp_timewait_input+0xc2>
  return;
 800be54:	bf00      	nop
}
 800be56:	3708      	adds	r7, #8
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}
 800be5c:	2000af04 	.word	0x2000af04
 800be60:	0801662c 	.word	0x0801662c
 800be64:	08016844 	.word	0x08016844
 800be68:	08016678 	.word	0x08016678
 800be6c:	2000aef8 	.word	0x2000aef8
 800be70:	2000aefc 	.word	0x2000aefc
 800be74:	2000af02 	.word	0x2000af02
 800be78:	2000aee8 	.word	0x2000aee8
 800be7c:	20005780 	.word	0x20005780
 800be80:	20005784 	.word	0x20005784
 800be84:	2000aec0 	.word	0x2000aec0

0800be88 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800be88:	b590      	push	{r4, r7, lr}
 800be8a:	b08d      	sub	sp, #52	; 0x34
 800be8c:	af04      	add	r7, sp, #16
 800be8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800be90:	2300      	movs	r3, #0
 800be92:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800be94:	2300      	movs	r3, #0
 800be96:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d106      	bne.n	800beac <tcp_process+0x24>
 800be9e:	4b9d      	ldr	r3, [pc, #628]	; (800c114 <tcp_process+0x28c>)
 800bea0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800bea4:	499c      	ldr	r1, [pc, #624]	; (800c118 <tcp_process+0x290>)
 800bea6:	489d      	ldr	r0, [pc, #628]	; (800c11c <tcp_process+0x294>)
 800bea8:	f007 ffd2 	bl	8013e50 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800beac:	4b9c      	ldr	r3, [pc, #624]	; (800c120 <tcp_process+0x298>)
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	f003 0304 	and.w	r3, r3, #4
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d04e      	beq.n	800bf56 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	7d1b      	ldrb	r3, [r3, #20]
 800bebc:	2b02      	cmp	r3, #2
 800bebe:	d108      	bne.n	800bed2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bec4:	4b97      	ldr	r3, [pc, #604]	; (800c124 <tcp_process+0x29c>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	429a      	cmp	r2, r3
 800beca:	d123      	bne.n	800bf14 <tcp_process+0x8c>
        acceptable = 1;
 800becc:	2301      	movs	r3, #1
 800bece:	76fb      	strb	r3, [r7, #27]
 800bed0:	e020      	b.n	800bf14 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bed6:	4b94      	ldr	r3, [pc, #592]	; (800c128 <tcp_process+0x2a0>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d102      	bne.n	800bee4 <tcp_process+0x5c>
        acceptable = 1;
 800bede:	2301      	movs	r3, #1
 800bee0:	76fb      	strb	r3, [r7, #27]
 800bee2:	e017      	b.n	800bf14 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bee4:	4b90      	ldr	r3, [pc, #576]	; (800c128 <tcp_process+0x2a0>)
 800bee6:	681a      	ldr	r2, [r3, #0]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beec:	1ad3      	subs	r3, r2, r3
 800beee:	2b00      	cmp	r3, #0
 800bef0:	db10      	blt.n	800bf14 <tcp_process+0x8c>
 800bef2:	4b8d      	ldr	r3, [pc, #564]	; (800c128 <tcp_process+0x2a0>)
 800bef4:	681a      	ldr	r2, [r3, #0]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befa:	6879      	ldr	r1, [r7, #4]
 800befc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800befe:	440b      	add	r3, r1
 800bf00:	1ad3      	subs	r3, r2, r3
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	dc06      	bgt.n	800bf14 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	8b5b      	ldrh	r3, [r3, #26]
 800bf0a:	f043 0302 	orr.w	r3, r3, #2
 800bf0e:	b29a      	uxth	r2, r3
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800bf14:	7efb      	ldrb	r3, [r7, #27]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d01b      	beq.n	800bf52 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	7d1b      	ldrb	r3, [r3, #20]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d106      	bne.n	800bf30 <tcp_process+0xa8>
 800bf22:	4b7c      	ldr	r3, [pc, #496]	; (800c114 <tcp_process+0x28c>)
 800bf24:	f44f 724e 	mov.w	r2, #824	; 0x338
 800bf28:	4980      	ldr	r1, [pc, #512]	; (800c12c <tcp_process+0x2a4>)
 800bf2a:	487c      	ldr	r0, [pc, #496]	; (800c11c <tcp_process+0x294>)
 800bf2c:	f007 ff90 	bl	8013e50 <iprintf>
      recv_flags |= TF_RESET;
 800bf30:	4b7f      	ldr	r3, [pc, #508]	; (800c130 <tcp_process+0x2a8>)
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	f043 0308 	orr.w	r3, r3, #8
 800bf38:	b2da      	uxtb	r2, r3
 800bf3a:	4b7d      	ldr	r3, [pc, #500]	; (800c130 <tcp_process+0x2a8>)
 800bf3c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	8b5b      	ldrh	r3, [r3, #26]
 800bf42:	f023 0301 	bic.w	r3, r3, #1
 800bf46:	b29a      	uxth	r2, r3
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800bf4c:	f06f 030d 	mvn.w	r3, #13
 800bf50:	e37a      	b.n	800c648 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800bf52:	2300      	movs	r3, #0
 800bf54:	e378      	b.n	800c648 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800bf56:	4b72      	ldr	r3, [pc, #456]	; (800c120 <tcp_process+0x298>)
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	f003 0302 	and.w	r3, r3, #2
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d010      	beq.n	800bf84 <tcp_process+0xfc>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	7d1b      	ldrb	r3, [r3, #20]
 800bf66:	2b02      	cmp	r3, #2
 800bf68:	d00c      	beq.n	800bf84 <tcp_process+0xfc>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	7d1b      	ldrb	r3, [r3, #20]
 800bf6e:	2b03      	cmp	r3, #3
 800bf70:	d008      	beq.n	800bf84 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	8b5b      	ldrh	r3, [r3, #26]
 800bf76:	f043 0302 	orr.w	r3, r3, #2
 800bf7a:	b29a      	uxth	r2, r3
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800bf80:	2300      	movs	r3, #0
 800bf82:	e361      	b.n	800c648 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	8b5b      	ldrh	r3, [r3, #26]
 800bf88:	f003 0310 	and.w	r3, r3, #16
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d103      	bne.n	800bf98 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800bf90:	4b68      	ldr	r3, [pc, #416]	; (800c134 <tcp_process+0x2ac>)
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f001 fc2f 	bl	800d80c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	7d1b      	ldrb	r3, [r3, #20]
 800bfb2:	3b02      	subs	r3, #2
 800bfb4:	2b07      	cmp	r3, #7
 800bfb6:	f200 8337 	bhi.w	800c628 <tcp_process+0x7a0>
 800bfba:	a201      	add	r2, pc, #4	; (adr r2, 800bfc0 <tcp_process+0x138>)
 800bfbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfc0:	0800bfe1 	.word	0x0800bfe1
 800bfc4:	0800c211 	.word	0x0800c211
 800bfc8:	0800c389 	.word	0x0800c389
 800bfcc:	0800c3b3 	.word	0x0800c3b3
 800bfd0:	0800c4d7 	.word	0x0800c4d7
 800bfd4:	0800c389 	.word	0x0800c389
 800bfd8:	0800c563 	.word	0x0800c563
 800bfdc:	0800c5f3 	.word	0x0800c5f3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800bfe0:	4b4f      	ldr	r3, [pc, #316]	; (800c120 <tcp_process+0x298>)
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	f003 0310 	and.w	r3, r3, #16
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	f000 80e4 	beq.w	800c1b6 <tcp_process+0x32e>
 800bfee:	4b4c      	ldr	r3, [pc, #304]	; (800c120 <tcp_process+0x298>)
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	f003 0302 	and.w	r3, r3, #2
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	f000 80dd 	beq.w	800c1b6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c000:	1c5a      	adds	r2, r3, #1
 800c002:	4b48      	ldr	r3, [pc, #288]	; (800c124 <tcp_process+0x29c>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	429a      	cmp	r2, r3
 800c008:	f040 80d5 	bne.w	800c1b6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800c00c:	4b46      	ldr	r3, [pc, #280]	; (800c128 <tcp_process+0x2a0>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	1c5a      	adds	r2, r3, #1
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800c01e:	4b41      	ldr	r3, [pc, #260]	; (800c124 <tcp_process+0x29c>)
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800c026:	4b44      	ldr	r3, [pc, #272]	; (800c138 <tcp_process+0x2b0>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	89db      	ldrh	r3, [r3, #14]
 800c02c:	b29a      	uxth	r2, r3
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c040:	4b39      	ldr	r3, [pc, #228]	; (800c128 <tcp_process+0x2a0>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	1e5a      	subs	r2, r3, #1
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2204      	movs	r2, #4
 800c04e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	3304      	adds	r3, #4
 800c058:	4618      	mov	r0, r3
 800c05a:	f006 fc8b 	bl	8012974 <ip4_route>
 800c05e:	4601      	mov	r1, r0
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	3304      	adds	r3, #4
 800c064:	461a      	mov	r2, r3
 800c066:	4620      	mov	r0, r4
 800c068:	f7ff f88c 	bl	800b184 <tcp_eff_send_mss_netif>
 800c06c:	4603      	mov	r3, r0
 800c06e:	461a      	mov	r2, r3
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c078:	009a      	lsls	r2, r3, #2
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c07e:	005b      	lsls	r3, r3, #1
 800c080:	f241 111c 	movw	r1, #4380	; 0x111c
 800c084:	428b      	cmp	r3, r1
 800c086:	bf38      	it	cc
 800c088:	460b      	movcc	r3, r1
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d204      	bcs.n	800c098 <tcp_process+0x210>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c092:	009b      	lsls	r3, r3, #2
 800c094:	b29b      	uxth	r3, r3
 800c096:	e00d      	b.n	800c0b4 <tcp_process+0x22c>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c09c:	005b      	lsls	r3, r3, #1
 800c09e:	f241 121c 	movw	r2, #4380	; 0x111c
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d904      	bls.n	800c0b0 <tcp_process+0x228>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0aa:	005b      	lsls	r3, r3, #1
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	e001      	b.n	800c0b4 <tcp_process+0x22c>
 800c0b0:	f241 131c 	movw	r3, #4380	; 0x111c
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d106      	bne.n	800c0d2 <tcp_process+0x24a>
 800c0c4:	4b13      	ldr	r3, [pc, #76]	; (800c114 <tcp_process+0x28c>)
 800c0c6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c0ca:	491c      	ldr	r1, [pc, #112]	; (800c13c <tcp_process+0x2b4>)
 800c0cc:	4813      	ldr	r0, [pc, #76]	; (800c11c <tcp_process+0x294>)
 800c0ce:	f007 febf 	bl	8013e50 <iprintf>
        --pcb->snd_queuelen;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c0d8:	3b01      	subs	r3, #1
 800c0da:	b29a      	uxth	r2, r3
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0e6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800c0e8:	69fb      	ldr	r3, [r7, #28]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d12a      	bne.n	800c144 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0f2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c0f4:	69fb      	ldr	r3, [r7, #28]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d106      	bne.n	800c108 <tcp_process+0x280>
 800c0fa:	4b06      	ldr	r3, [pc, #24]	; (800c114 <tcp_process+0x28c>)
 800c0fc:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c100:	490f      	ldr	r1, [pc, #60]	; (800c140 <tcp_process+0x2b8>)
 800c102:	4806      	ldr	r0, [pc, #24]	; (800c11c <tcp_process+0x294>)
 800c104:	f007 fea4 	bl	8013e50 <iprintf>
          pcb->unsent = rseg->next;
 800c108:	69fb      	ldr	r3, [r7, #28]
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	66da      	str	r2, [r3, #108]	; 0x6c
 800c110:	e01c      	b.n	800c14c <tcp_process+0x2c4>
 800c112:	bf00      	nop
 800c114:	0801662c 	.word	0x0801662c
 800c118:	08016864 	.word	0x08016864
 800c11c:	08016678 	.word	0x08016678
 800c120:	2000af04 	.word	0x2000af04
 800c124:	2000aefc 	.word	0x2000aefc
 800c128:	2000aef8 	.word	0x2000aef8
 800c12c:	08016880 	.word	0x08016880
 800c130:	2000af05 	.word	0x2000af05
 800c134:	2000aec0 	.word	0x2000aec0
 800c138:	2000aee8 	.word	0x2000aee8
 800c13c:	080168a0 	.word	0x080168a0
 800c140:	080168b8 	.word	0x080168b8
        } else {
          pcb->unacked = rseg->next;
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	681a      	ldr	r2, [r3, #0]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800c14c:	69f8      	ldr	r0, [r7, #28]
 800c14e:	f7fe fd22 	bl	800ab96 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c156:	2b00      	cmp	r3, #0
 800c158:	d104      	bne.n	800c164 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c160:	861a      	strh	r2, [r3, #48]	; 0x30
 800c162:	e006      	b.n	800c172 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2200      	movs	r2, #0
 800c168:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2200      	movs	r2, #0
 800c16e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d00a      	beq.n	800c192 <tcp_process+0x30a>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	6910      	ldr	r0, [r2, #16]
 800c186:	2200      	movs	r2, #0
 800c188:	6879      	ldr	r1, [r7, #4]
 800c18a:	4798      	blx	r3
 800c18c:	4603      	mov	r3, r0
 800c18e:	76bb      	strb	r3, [r7, #26]
 800c190:	e001      	b.n	800c196 <tcp_process+0x30e>
 800c192:	2300      	movs	r3, #0
 800c194:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c196:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c19a:	f113 0f0d 	cmn.w	r3, #13
 800c19e:	d102      	bne.n	800c1a6 <tcp_process+0x31e>
          return ERR_ABRT;
 800c1a0:	f06f 030c 	mvn.w	r3, #12
 800c1a4:	e250      	b.n	800c648 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	8b5b      	ldrh	r3, [r3, #26]
 800c1aa:	f043 0302 	orr.w	r3, r3, #2
 800c1ae:	b29a      	uxth	r2, r3
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c1b4:	e23a      	b.n	800c62c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c1b6:	4b98      	ldr	r3, [pc, #608]	; (800c418 <tcp_process+0x590>)
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	f003 0310 	and.w	r3, r3, #16
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	f000 8234 	beq.w	800c62c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c1c4:	4b95      	ldr	r3, [pc, #596]	; (800c41c <tcp_process+0x594>)
 800c1c6:	6819      	ldr	r1, [r3, #0]
 800c1c8:	4b95      	ldr	r3, [pc, #596]	; (800c420 <tcp_process+0x598>)
 800c1ca:	881b      	ldrh	r3, [r3, #0]
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	4b95      	ldr	r3, [pc, #596]	; (800c424 <tcp_process+0x59c>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c1d4:	4b94      	ldr	r3, [pc, #592]	; (800c428 <tcp_process+0x5a0>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c1d8:	885b      	ldrh	r3, [r3, #2]
 800c1da:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c1dc:	4a92      	ldr	r2, [pc, #584]	; (800c428 <tcp_process+0x5a0>)
 800c1de:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c1e0:	8812      	ldrh	r2, [r2, #0]
 800c1e2:	b292      	uxth	r2, r2
 800c1e4:	9202      	str	r2, [sp, #8]
 800c1e6:	9301      	str	r3, [sp, #4]
 800c1e8:	4b90      	ldr	r3, [pc, #576]	; (800c42c <tcp_process+0x5a4>)
 800c1ea:	9300      	str	r3, [sp, #0]
 800c1ec:	4b90      	ldr	r3, [pc, #576]	; (800c430 <tcp_process+0x5a8>)
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f002 fc85 	bl	800eb00 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c1fc:	2b05      	cmp	r3, #5
 800c1fe:	f200 8215 	bhi.w	800c62c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2200      	movs	r2, #0
 800c206:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f002 fa4f 	bl	800e6ac <tcp_rexmit_rto>
      break;
 800c20e:	e20d      	b.n	800c62c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c210:	4b81      	ldr	r3, [pc, #516]	; (800c418 <tcp_process+0x590>)
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	f003 0310 	and.w	r3, r3, #16
 800c218:	2b00      	cmp	r3, #0
 800c21a:	f000 80a1 	beq.w	800c360 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c21e:	4b7f      	ldr	r3, [pc, #508]	; (800c41c <tcp_process+0x594>)
 800c220:	681a      	ldr	r2, [r3, #0]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c226:	1ad3      	subs	r3, r2, r3
 800c228:	3b01      	subs	r3, #1
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	db7e      	blt.n	800c32c <tcp_process+0x4a4>
 800c22e:	4b7b      	ldr	r3, [pc, #492]	; (800c41c <tcp_process+0x594>)
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c236:	1ad3      	subs	r3, r2, r3
 800c238:	2b00      	cmp	r3, #0
 800c23a:	dc77      	bgt.n	800c32c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2204      	movs	r2, #4
 800c240:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c246:	2b00      	cmp	r3, #0
 800c248:	d102      	bne.n	800c250 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c24a:	23fa      	movs	r3, #250	; 0xfa
 800c24c:	76bb      	strb	r3, [r7, #26]
 800c24e:	e01d      	b.n	800c28c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c254:	699b      	ldr	r3, [r3, #24]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d106      	bne.n	800c268 <tcp_process+0x3e0>
 800c25a:	4b76      	ldr	r3, [pc, #472]	; (800c434 <tcp_process+0x5ac>)
 800c25c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c260:	4975      	ldr	r1, [pc, #468]	; (800c438 <tcp_process+0x5b0>)
 800c262:	4876      	ldr	r0, [pc, #472]	; (800c43c <tcp_process+0x5b4>)
 800c264:	f007 fdf4 	bl	8013e50 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c26c:	699b      	ldr	r3, [r3, #24]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d00a      	beq.n	800c288 <tcp_process+0x400>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c276:	699b      	ldr	r3, [r3, #24]
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	6910      	ldr	r0, [r2, #16]
 800c27c:	2200      	movs	r2, #0
 800c27e:	6879      	ldr	r1, [r7, #4]
 800c280:	4798      	blx	r3
 800c282:	4603      	mov	r3, r0
 800c284:	76bb      	strb	r3, [r7, #26]
 800c286:	e001      	b.n	800c28c <tcp_process+0x404>
 800c288:	23f0      	movs	r3, #240	; 0xf0
 800c28a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c28c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d00a      	beq.n	800c2aa <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800c294:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c298:	f113 0f0d 	cmn.w	r3, #13
 800c29c:	d002      	beq.n	800c2a4 <tcp_process+0x41c>
              tcp_abort(pcb);
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f7fd ff8e 	bl	800a1c0 <tcp_abort>
            }
            return ERR_ABRT;
 800c2a4:	f06f 030c 	mvn.w	r3, #12
 800c2a8:	e1ce      	b.n	800c648 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f000 fae0 	bl	800c870 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800c2b0:	4b63      	ldr	r3, [pc, #396]	; (800c440 <tcp_process+0x5b8>)
 800c2b2:	881b      	ldrh	r3, [r3, #0]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d005      	beq.n	800c2c4 <tcp_process+0x43c>
            recv_acked--;
 800c2b8:	4b61      	ldr	r3, [pc, #388]	; (800c440 <tcp_process+0x5b8>)
 800c2ba:	881b      	ldrh	r3, [r3, #0]
 800c2bc:	3b01      	subs	r3, #1
 800c2be:	b29a      	uxth	r2, r3
 800c2c0:	4b5f      	ldr	r3, [pc, #380]	; (800c440 <tcp_process+0x5b8>)
 800c2c2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c2c8:	009a      	lsls	r2, r3, #2
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c2ce:	005b      	lsls	r3, r3, #1
 800c2d0:	f241 111c 	movw	r1, #4380	; 0x111c
 800c2d4:	428b      	cmp	r3, r1
 800c2d6:	bf38      	it	cc
 800c2d8:	460b      	movcc	r3, r1
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d204      	bcs.n	800c2e8 <tcp_process+0x460>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c2e2:	009b      	lsls	r3, r3, #2
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	e00d      	b.n	800c304 <tcp_process+0x47c>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c2ec:	005b      	lsls	r3, r3, #1
 800c2ee:	f241 121c 	movw	r2, #4380	; 0x111c
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d904      	bls.n	800c300 <tcp_process+0x478>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c2fa:	005b      	lsls	r3, r3, #1
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	e001      	b.n	800c304 <tcp_process+0x47c>
 800c300:	f241 131c 	movw	r3, #4380	; 0x111c
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c30a:	4b4e      	ldr	r3, [pc, #312]	; (800c444 <tcp_process+0x5bc>)
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	f003 0320 	and.w	r3, r3, #32
 800c312:	2b00      	cmp	r3, #0
 800c314:	d037      	beq.n	800c386 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	8b5b      	ldrh	r3, [r3, #26]
 800c31a:	f043 0302 	orr.w	r3, r3, #2
 800c31e:	b29a      	uxth	r2, r3
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2207      	movs	r2, #7
 800c328:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c32a:	e02c      	b.n	800c386 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c32c:	4b3b      	ldr	r3, [pc, #236]	; (800c41c <tcp_process+0x594>)
 800c32e:	6819      	ldr	r1, [r3, #0]
 800c330:	4b3b      	ldr	r3, [pc, #236]	; (800c420 <tcp_process+0x598>)
 800c332:	881b      	ldrh	r3, [r3, #0]
 800c334:	461a      	mov	r2, r3
 800c336:	4b3b      	ldr	r3, [pc, #236]	; (800c424 <tcp_process+0x59c>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c33c:	4b3a      	ldr	r3, [pc, #232]	; (800c428 <tcp_process+0x5a0>)
 800c33e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c340:	885b      	ldrh	r3, [r3, #2]
 800c342:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c344:	4a38      	ldr	r2, [pc, #224]	; (800c428 <tcp_process+0x5a0>)
 800c346:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c348:	8812      	ldrh	r2, [r2, #0]
 800c34a:	b292      	uxth	r2, r2
 800c34c:	9202      	str	r2, [sp, #8]
 800c34e:	9301      	str	r3, [sp, #4]
 800c350:	4b36      	ldr	r3, [pc, #216]	; (800c42c <tcp_process+0x5a4>)
 800c352:	9300      	str	r3, [sp, #0]
 800c354:	4b36      	ldr	r3, [pc, #216]	; (800c430 <tcp_process+0x5a8>)
 800c356:	4602      	mov	r2, r0
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f002 fbd1 	bl	800eb00 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c35e:	e167      	b.n	800c630 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c360:	4b2d      	ldr	r3, [pc, #180]	; (800c418 <tcp_process+0x590>)
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	f003 0302 	and.w	r3, r3, #2
 800c368:	2b00      	cmp	r3, #0
 800c36a:	f000 8161 	beq.w	800c630 <tcp_process+0x7a8>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c372:	1e5a      	subs	r2, r3, #1
 800c374:	4b2b      	ldr	r3, [pc, #172]	; (800c424 <tcp_process+0x59c>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	429a      	cmp	r2, r3
 800c37a:	f040 8159 	bne.w	800c630 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f002 f9b6 	bl	800e6f0 <tcp_rexmit>
      break;
 800c384:	e154      	b.n	800c630 <tcp_process+0x7a8>
 800c386:	e153      	b.n	800c630 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f000 fa71 	bl	800c870 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c38e:	4b2d      	ldr	r3, [pc, #180]	; (800c444 <tcp_process+0x5bc>)
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	f003 0320 	and.w	r3, r3, #32
 800c396:	2b00      	cmp	r3, #0
 800c398:	f000 814c 	beq.w	800c634 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	8b5b      	ldrh	r3, [r3, #26]
 800c3a0:	f043 0302 	orr.w	r3, r3, #2
 800c3a4:	b29a      	uxth	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2207      	movs	r2, #7
 800c3ae:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c3b0:	e140      	b.n	800c634 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 fa5c 	bl	800c870 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c3b8:	4b22      	ldr	r3, [pc, #136]	; (800c444 <tcp_process+0x5bc>)
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	f003 0320 	and.w	r3, r3, #32
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d071      	beq.n	800c4a8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c3c4:	4b14      	ldr	r3, [pc, #80]	; (800c418 <tcp_process+0x590>)
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	f003 0310 	and.w	r3, r3, #16
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d060      	beq.n	800c492 <tcp_process+0x60a>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c3d4:	4b11      	ldr	r3, [pc, #68]	; (800c41c <tcp_process+0x594>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d15a      	bne.n	800c492 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d156      	bne.n	800c492 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	8b5b      	ldrh	r3, [r3, #26]
 800c3e8:	f043 0302 	orr.w	r3, r3, #2
 800c3ec:	b29a      	uxth	r2, r3
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f7fe fdbc 	bl	800af70 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c3f8:	4b13      	ldr	r3, [pc, #76]	; (800c448 <tcp_process+0x5c0>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d105      	bne.n	800c40e <tcp_process+0x586>
 800c402:	4b11      	ldr	r3, [pc, #68]	; (800c448 <tcp_process+0x5c0>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	4a0f      	ldr	r2, [pc, #60]	; (800c448 <tcp_process+0x5c0>)
 800c40a:	6013      	str	r3, [r2, #0]
 800c40c:	e02e      	b.n	800c46c <tcp_process+0x5e4>
 800c40e:	4b0e      	ldr	r3, [pc, #56]	; (800c448 <tcp_process+0x5c0>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	617b      	str	r3, [r7, #20]
 800c414:	e027      	b.n	800c466 <tcp_process+0x5de>
 800c416:	bf00      	nop
 800c418:	2000af04 	.word	0x2000af04
 800c41c:	2000aefc 	.word	0x2000aefc
 800c420:	2000af02 	.word	0x2000af02
 800c424:	2000aef8 	.word	0x2000aef8
 800c428:	2000aee8 	.word	0x2000aee8
 800c42c:	20005780 	.word	0x20005780
 800c430:	20005784 	.word	0x20005784
 800c434:	0801662c 	.word	0x0801662c
 800c438:	080168cc 	.word	0x080168cc
 800c43c:	08016678 	.word	0x08016678
 800c440:	2000af00 	.word	0x2000af00
 800c444:	2000af05 	.word	0x2000af05
 800c448:	2000aecc 	.word	0x2000aecc
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	429a      	cmp	r2, r3
 800c454:	d104      	bne.n	800c460 <tcp_process+0x5d8>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	68da      	ldr	r2, [r3, #12]
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	60da      	str	r2, [r3, #12]
 800c45e:	e005      	b.n	800c46c <tcp_process+0x5e4>
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	617b      	str	r3, [r7, #20]
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d1ef      	bne.n	800c44c <tcp_process+0x5c4>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2200      	movs	r2, #0
 800c470:	60da      	str	r2, [r3, #12]
 800c472:	4b77      	ldr	r3, [pc, #476]	; (800c650 <tcp_process+0x7c8>)
 800c474:	2201      	movs	r2, #1
 800c476:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	220a      	movs	r2, #10
 800c47c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c47e:	4b75      	ldr	r3, [pc, #468]	; (800c654 <tcp_process+0x7cc>)
 800c480:	681a      	ldr	r2, [r3, #0]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	60da      	str	r2, [r3, #12]
 800c486:	4a73      	ldr	r2, [pc, #460]	; (800c654 <tcp_process+0x7cc>)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6013      	str	r3, [r2, #0]
 800c48c:	f002 fcfa 	bl	800ee84 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c490:	e0d2      	b.n	800c638 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	8b5b      	ldrh	r3, [r3, #26]
 800c496:	f043 0302 	orr.w	r3, r3, #2
 800c49a:	b29a      	uxth	r2, r3
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2208      	movs	r2, #8
 800c4a4:	751a      	strb	r2, [r3, #20]
      break;
 800c4a6:	e0c7      	b.n	800c638 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c4a8:	4b6b      	ldr	r3, [pc, #428]	; (800c658 <tcp_process+0x7d0>)
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	f003 0310 	and.w	r3, r3, #16
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f000 80c1 	beq.w	800c638 <tcp_process+0x7b0>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c4ba:	4b68      	ldr	r3, [pc, #416]	; (800c65c <tcp_process+0x7d4>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	f040 80ba 	bne.w	800c638 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	f040 80b5 	bne.w	800c638 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2206      	movs	r2, #6
 800c4d2:	751a      	strb	r2, [r3, #20]
      break;
 800c4d4:	e0b0      	b.n	800c638 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 f9ca 	bl	800c870 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c4dc:	4b60      	ldr	r3, [pc, #384]	; (800c660 <tcp_process+0x7d8>)
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	f003 0320 	and.w	r3, r3, #32
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	f000 80a9 	beq.w	800c63c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	8b5b      	ldrh	r3, [r3, #26]
 800c4ee:	f043 0302 	orr.w	r3, r3, #2
 800c4f2:	b29a      	uxth	r2, r3
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f7fe fd39 	bl	800af70 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c4fe:	4b59      	ldr	r3, [pc, #356]	; (800c664 <tcp_process+0x7dc>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	687a      	ldr	r2, [r7, #4]
 800c504:	429a      	cmp	r2, r3
 800c506:	d105      	bne.n	800c514 <tcp_process+0x68c>
 800c508:	4b56      	ldr	r3, [pc, #344]	; (800c664 <tcp_process+0x7dc>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	68db      	ldr	r3, [r3, #12]
 800c50e:	4a55      	ldr	r2, [pc, #340]	; (800c664 <tcp_process+0x7dc>)
 800c510:	6013      	str	r3, [r2, #0]
 800c512:	e013      	b.n	800c53c <tcp_process+0x6b4>
 800c514:	4b53      	ldr	r3, [pc, #332]	; (800c664 <tcp_process+0x7dc>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	613b      	str	r3, [r7, #16]
 800c51a:	e00c      	b.n	800c536 <tcp_process+0x6ae>
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	68db      	ldr	r3, [r3, #12]
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	429a      	cmp	r2, r3
 800c524:	d104      	bne.n	800c530 <tcp_process+0x6a8>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	68da      	ldr	r2, [r3, #12]
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	60da      	str	r2, [r3, #12]
 800c52e:	e005      	b.n	800c53c <tcp_process+0x6b4>
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	68db      	ldr	r3, [r3, #12]
 800c534:	613b      	str	r3, [r7, #16]
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d1ef      	bne.n	800c51c <tcp_process+0x694>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2200      	movs	r2, #0
 800c540:	60da      	str	r2, [r3, #12]
 800c542:	4b43      	ldr	r3, [pc, #268]	; (800c650 <tcp_process+0x7c8>)
 800c544:	2201      	movs	r2, #1
 800c546:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	220a      	movs	r2, #10
 800c54c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c54e:	4b41      	ldr	r3, [pc, #260]	; (800c654 <tcp_process+0x7cc>)
 800c550:	681a      	ldr	r2, [r3, #0]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	60da      	str	r2, [r3, #12]
 800c556:	4a3f      	ldr	r2, [pc, #252]	; (800c654 <tcp_process+0x7cc>)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6013      	str	r3, [r2, #0]
 800c55c:	f002 fc92 	bl	800ee84 <tcp_timer_needed>
      }
      break;
 800c560:	e06c      	b.n	800c63c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f000 f984 	bl	800c870 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c568:	4b3b      	ldr	r3, [pc, #236]	; (800c658 <tcp_process+0x7d0>)
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	f003 0310 	and.w	r3, r3, #16
 800c570:	2b00      	cmp	r3, #0
 800c572:	d065      	beq.n	800c640 <tcp_process+0x7b8>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c578:	4b38      	ldr	r3, [pc, #224]	; (800c65c <tcp_process+0x7d4>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d15f      	bne.n	800c640 <tcp_process+0x7b8>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c584:	2b00      	cmp	r3, #0
 800c586:	d15b      	bne.n	800c640 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f7fe fcf1 	bl	800af70 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c58e:	4b35      	ldr	r3, [pc, #212]	; (800c664 <tcp_process+0x7dc>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	687a      	ldr	r2, [r7, #4]
 800c594:	429a      	cmp	r2, r3
 800c596:	d105      	bne.n	800c5a4 <tcp_process+0x71c>
 800c598:	4b32      	ldr	r3, [pc, #200]	; (800c664 <tcp_process+0x7dc>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	68db      	ldr	r3, [r3, #12]
 800c59e:	4a31      	ldr	r2, [pc, #196]	; (800c664 <tcp_process+0x7dc>)
 800c5a0:	6013      	str	r3, [r2, #0]
 800c5a2:	e013      	b.n	800c5cc <tcp_process+0x744>
 800c5a4:	4b2f      	ldr	r3, [pc, #188]	; (800c664 <tcp_process+0x7dc>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	60fb      	str	r3, [r7, #12]
 800c5aa:	e00c      	b.n	800c5c6 <tcp_process+0x73e>
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	687a      	ldr	r2, [r7, #4]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d104      	bne.n	800c5c0 <tcp_process+0x738>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	68da      	ldr	r2, [r3, #12]
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	60da      	str	r2, [r3, #12]
 800c5be:	e005      	b.n	800c5cc <tcp_process+0x744>
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	68db      	ldr	r3, [r3, #12]
 800c5c4:	60fb      	str	r3, [r7, #12]
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d1ef      	bne.n	800c5ac <tcp_process+0x724>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	60da      	str	r2, [r3, #12]
 800c5d2:	4b1f      	ldr	r3, [pc, #124]	; (800c650 <tcp_process+0x7c8>)
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	220a      	movs	r2, #10
 800c5dc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c5de:	4b1d      	ldr	r3, [pc, #116]	; (800c654 <tcp_process+0x7cc>)
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	60da      	str	r2, [r3, #12]
 800c5e6:	4a1b      	ldr	r2, [pc, #108]	; (800c654 <tcp_process+0x7cc>)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6013      	str	r3, [r2, #0]
 800c5ec:	f002 fc4a 	bl	800ee84 <tcp_timer_needed>
      }
      break;
 800c5f0:	e026      	b.n	800c640 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 f93c 	bl	800c870 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c5f8:	4b17      	ldr	r3, [pc, #92]	; (800c658 <tcp_process+0x7d0>)
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	f003 0310 	and.w	r3, r3, #16
 800c600:	2b00      	cmp	r3, #0
 800c602:	d01f      	beq.n	800c644 <tcp_process+0x7bc>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c608:	4b14      	ldr	r3, [pc, #80]	; (800c65c <tcp_process+0x7d4>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d119      	bne.n	800c644 <tcp_process+0x7bc>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c614:	2b00      	cmp	r3, #0
 800c616:	d115      	bne.n	800c644 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800c618:	4b11      	ldr	r3, [pc, #68]	; (800c660 <tcp_process+0x7d8>)
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	f043 0310 	orr.w	r3, r3, #16
 800c620:	b2da      	uxtb	r2, r3
 800c622:	4b0f      	ldr	r3, [pc, #60]	; (800c660 <tcp_process+0x7d8>)
 800c624:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c626:	e00d      	b.n	800c644 <tcp_process+0x7bc>
    default:
      break;
 800c628:	bf00      	nop
 800c62a:	e00c      	b.n	800c646 <tcp_process+0x7be>
      break;
 800c62c:	bf00      	nop
 800c62e:	e00a      	b.n	800c646 <tcp_process+0x7be>
      break;
 800c630:	bf00      	nop
 800c632:	e008      	b.n	800c646 <tcp_process+0x7be>
      break;
 800c634:	bf00      	nop
 800c636:	e006      	b.n	800c646 <tcp_process+0x7be>
      break;
 800c638:	bf00      	nop
 800c63a:	e004      	b.n	800c646 <tcp_process+0x7be>
      break;
 800c63c:	bf00      	nop
 800c63e:	e002      	b.n	800c646 <tcp_process+0x7be>
      break;
 800c640:	bf00      	nop
 800c642:	e000      	b.n	800c646 <tcp_process+0x7be>
      break;
 800c644:	bf00      	nop
  }
  return ERR_OK;
 800c646:	2300      	movs	r3, #0
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3724      	adds	r7, #36	; 0x24
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd90      	pop	{r4, r7, pc}
 800c650:	2000aed4 	.word	0x2000aed4
 800c654:	2000aed0 	.word	0x2000aed0
 800c658:	2000af04 	.word	0x2000af04
 800c65c:	2000aefc 	.word	0x2000aefc
 800c660:	2000af05 	.word	0x2000af05
 800c664:	2000aecc 	.word	0x2000aecc

0800c668 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c668:	b590      	push	{r4, r7, lr}
 800c66a:	b085      	sub	sp, #20
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d106      	bne.n	800c686 <tcp_oos_insert_segment+0x1e>
 800c678:	4b3b      	ldr	r3, [pc, #236]	; (800c768 <tcp_oos_insert_segment+0x100>)
 800c67a:	f240 421f 	movw	r2, #1055	; 0x41f
 800c67e:	493b      	ldr	r1, [pc, #236]	; (800c76c <tcp_oos_insert_segment+0x104>)
 800c680:	483b      	ldr	r0, [pc, #236]	; (800c770 <tcp_oos_insert_segment+0x108>)
 800c682:	f007 fbe5 	bl	8013e50 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	68db      	ldr	r3, [r3, #12]
 800c68a:	899b      	ldrh	r3, [r3, #12]
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	4618      	mov	r0, r3
 800c690:	f7fb fc94 	bl	8007fbc <lwip_htons>
 800c694:	4603      	mov	r3, r0
 800c696:	b2db      	uxtb	r3, r3
 800c698:	f003 0301 	and.w	r3, r3, #1
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d028      	beq.n	800c6f2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c6a0:	6838      	ldr	r0, [r7, #0]
 800c6a2:	f7fe fa63 	bl	800ab6c <tcp_segs_free>
    next = NULL;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	603b      	str	r3, [r7, #0]
 800c6aa:	e056      	b.n	800c75a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	68db      	ldr	r3, [r3, #12]
 800c6b0:	899b      	ldrh	r3, [r3, #12]
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f7fb fc81 	bl	8007fbc <lwip_htons>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	b2db      	uxtb	r3, r3
 800c6be:	f003 0301 	and.w	r3, r3, #1
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d00d      	beq.n	800c6e2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	68db      	ldr	r3, [r3, #12]
 800c6ca:	899b      	ldrh	r3, [r3, #12]
 800c6cc:	b29c      	uxth	r4, r3
 800c6ce:	2001      	movs	r0, #1
 800c6d0:	f7fb fc74 	bl	8007fbc <lwip_htons>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	4322      	orrs	r2, r4
 800c6de:	b292      	uxth	r2, r2
 800c6e0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c6ec:	68f8      	ldr	r0, [r7, #12]
 800c6ee:	f7fe fa52 	bl	800ab96 <tcp_seg_free>
    while (next &&
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d00e      	beq.n	800c716 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	891b      	ldrh	r3, [r3, #8]
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	4b1d      	ldr	r3, [pc, #116]	; (800c774 <tcp_oos_insert_segment+0x10c>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	441a      	add	r2, r3
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	68db      	ldr	r3, [r3, #12]
 800c708:	685b      	ldr	r3, [r3, #4]
 800c70a:	6839      	ldr	r1, [r7, #0]
 800c70c:	8909      	ldrh	r1, [r1, #8]
 800c70e:	440b      	add	r3, r1
 800c710:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c712:	2b00      	cmp	r3, #0
 800c714:	daca      	bge.n	800c6ac <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d01e      	beq.n	800c75a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	891b      	ldrh	r3, [r3, #8]
 800c720:	461a      	mov	r2, r3
 800c722:	4b14      	ldr	r3, [pc, #80]	; (800c774 <tcp_oos_insert_segment+0x10c>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	441a      	add	r2, r3
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	68db      	ldr	r3, [r3, #12]
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c730:	2b00      	cmp	r3, #0
 800c732:	dd12      	ble.n	800c75a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	68db      	ldr	r3, [r3, #12]
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	b29a      	uxth	r2, r3
 800c73c:	4b0d      	ldr	r3, [pc, #52]	; (800c774 <tcp_oos_insert_segment+0x10c>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	b29b      	uxth	r3, r3
 800c742:	1ad3      	subs	r3, r2, r3
 800c744:	b29a      	uxth	r2, r3
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	685a      	ldr	r2, [r3, #4]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	891b      	ldrh	r3, [r3, #8]
 800c752:	4619      	mov	r1, r3
 800c754:	4610      	mov	r0, r2
 800c756:	f7fc fe15 	bl	8009384 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	683a      	ldr	r2, [r7, #0]
 800c75e:	601a      	str	r2, [r3, #0]
}
 800c760:	bf00      	nop
 800c762:	3714      	adds	r7, #20
 800c764:	46bd      	mov	sp, r7
 800c766:	bd90      	pop	{r4, r7, pc}
 800c768:	0801662c 	.word	0x0801662c
 800c76c:	080168ec 	.word	0x080168ec
 800c770:	08016678 	.word	0x08016678
 800c774:	2000aef8 	.word	0x2000aef8

0800c778 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800c778:	b5b0      	push	{r4, r5, r7, lr}
 800c77a:	b086      	sub	sp, #24
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	60f8      	str	r0, [r7, #12]
 800c780:	60b9      	str	r1, [r7, #8]
 800c782:	607a      	str	r2, [r7, #4]
 800c784:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c786:	e03e      	b.n	800c806 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	4618      	mov	r0, r3
 800c798:	f7fd f802 	bl	80097a0 <pbuf_clen>
 800c79c:	4603      	mov	r3, r0
 800c79e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c7a6:	8a7a      	ldrh	r2, [r7, #18]
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d906      	bls.n	800c7ba <tcp_free_acked_segments+0x42>
 800c7ac:	4b2a      	ldr	r3, [pc, #168]	; (800c858 <tcp_free_acked_segments+0xe0>)
 800c7ae:	f240 4257 	movw	r2, #1111	; 0x457
 800c7b2:	492a      	ldr	r1, [pc, #168]	; (800c85c <tcp_free_acked_segments+0xe4>)
 800c7b4:	482a      	ldr	r0, [pc, #168]	; (800c860 <tcp_free_acked_segments+0xe8>)
 800c7b6:	f007 fb4b 	bl	8013e50 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800c7c0:	8a7b      	ldrh	r3, [r7, #18]
 800c7c2:	1ad3      	subs	r3, r2, r3
 800c7c4:	b29a      	uxth	r2, r3
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	891a      	ldrh	r2, [r3, #8]
 800c7d0:	4b24      	ldr	r3, [pc, #144]	; (800c864 <tcp_free_acked_segments+0xec>)
 800c7d2:	881b      	ldrh	r3, [r3, #0]
 800c7d4:	4413      	add	r3, r2
 800c7d6:	b29a      	uxth	r2, r3
 800c7d8:	4b22      	ldr	r3, [pc, #136]	; (800c864 <tcp_free_acked_segments+0xec>)
 800c7da:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c7dc:	6978      	ldr	r0, [r7, #20]
 800c7de:	f7fe f9da 	bl	800ab96 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d00c      	beq.n	800c806 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d109      	bne.n	800c806 <tcp_free_acked_segments+0x8e>
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d106      	bne.n	800c806 <tcp_free_acked_segments+0x8e>
 800c7f8:	4b17      	ldr	r3, [pc, #92]	; (800c858 <tcp_free_acked_segments+0xe0>)
 800c7fa:	f240 4261 	movw	r2, #1121	; 0x461
 800c7fe:	491a      	ldr	r1, [pc, #104]	; (800c868 <tcp_free_acked_segments+0xf0>)
 800c800:	4817      	ldr	r0, [pc, #92]	; (800c860 <tcp_free_acked_segments+0xe8>)
 800c802:	f007 fb25 	bl	8013e50 <iprintf>
  while (seg_list != NULL &&
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d020      	beq.n	800c84e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	4618      	mov	r0, r3
 800c814:	f7fb fbe7 	bl	8007fe6 <lwip_htonl>
 800c818:	4604      	mov	r4, r0
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	891b      	ldrh	r3, [r3, #8]
 800c81e:	461d      	mov	r5, r3
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	68db      	ldr	r3, [r3, #12]
 800c824:	899b      	ldrh	r3, [r3, #12]
 800c826:	b29b      	uxth	r3, r3
 800c828:	4618      	mov	r0, r3
 800c82a:	f7fb fbc7 	bl	8007fbc <lwip_htons>
 800c82e:	4603      	mov	r3, r0
 800c830:	b2db      	uxtb	r3, r3
 800c832:	f003 0303 	and.w	r3, r3, #3
 800c836:	2b00      	cmp	r3, #0
 800c838:	d001      	beq.n	800c83e <tcp_free_acked_segments+0xc6>
 800c83a:	2301      	movs	r3, #1
 800c83c:	e000      	b.n	800c840 <tcp_free_acked_segments+0xc8>
 800c83e:	2300      	movs	r3, #0
 800c840:	442b      	add	r3, r5
 800c842:	18e2      	adds	r2, r4, r3
 800c844:	4b09      	ldr	r3, [pc, #36]	; (800c86c <tcp_free_acked_segments+0xf4>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	dd9c      	ble.n	800c788 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800c84e:	68bb      	ldr	r3, [r7, #8]
}
 800c850:	4618      	mov	r0, r3
 800c852:	3718      	adds	r7, #24
 800c854:	46bd      	mov	sp, r7
 800c856:	bdb0      	pop	{r4, r5, r7, pc}
 800c858:	0801662c 	.word	0x0801662c
 800c85c:	08016914 	.word	0x08016914
 800c860:	08016678 	.word	0x08016678
 800c864:	2000af00 	.word	0x2000af00
 800c868:	0801693c 	.word	0x0801693c
 800c86c:	2000aefc 	.word	0x2000aefc

0800c870 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c870:	b5b0      	push	{r4, r5, r7, lr}
 800c872:	b094      	sub	sp, #80	; 0x50
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800c878:	2300      	movs	r3, #0
 800c87a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d106      	bne.n	800c890 <tcp_receive+0x20>
 800c882:	4b91      	ldr	r3, [pc, #580]	; (800cac8 <tcp_receive+0x258>)
 800c884:	f240 427b 	movw	r2, #1147	; 0x47b
 800c888:	4990      	ldr	r1, [pc, #576]	; (800cacc <tcp_receive+0x25c>)
 800c88a:	4891      	ldr	r0, [pc, #580]	; (800cad0 <tcp_receive+0x260>)
 800c88c:	f007 fae0 	bl	8013e50 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	7d1b      	ldrb	r3, [r3, #20]
 800c894:	2b03      	cmp	r3, #3
 800c896:	d806      	bhi.n	800c8a6 <tcp_receive+0x36>
 800c898:	4b8b      	ldr	r3, [pc, #556]	; (800cac8 <tcp_receive+0x258>)
 800c89a:	f240 427c 	movw	r2, #1148	; 0x47c
 800c89e:	498d      	ldr	r1, [pc, #564]	; (800cad4 <tcp_receive+0x264>)
 800c8a0:	488b      	ldr	r0, [pc, #556]	; (800cad0 <tcp_receive+0x260>)
 800c8a2:	f007 fad5 	bl	8013e50 <iprintf>

  if (flags & TCP_ACK) {
 800c8a6:	4b8c      	ldr	r3, [pc, #560]	; (800cad8 <tcp_receive+0x268>)
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	f003 0310 	and.w	r3, r3, #16
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	f000 8264 	beq.w	800cd7c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8c0:	4413      	add	r3, r2
 800c8c2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c8c8:	4b84      	ldr	r3, [pc, #528]	; (800cadc <tcp_receive+0x26c>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	1ad3      	subs	r3, r2, r3
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	db1b      	blt.n	800c90a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c8d6:	4b81      	ldr	r3, [pc, #516]	; (800cadc <tcp_receive+0x26c>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d106      	bne.n	800c8ec <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c8e2:	4b7f      	ldr	r3, [pc, #508]	; (800cae0 <tcp_receive+0x270>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	1ad3      	subs	r3, r2, r3
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	db0e      	blt.n	800c90a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c8f0:	4b7b      	ldr	r3, [pc, #492]	; (800cae0 <tcp_receive+0x270>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d125      	bne.n	800c944 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c8f8:	4b7a      	ldr	r3, [pc, #488]	; (800cae4 <tcp_receive+0x274>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	89db      	ldrh	r3, [r3, #14]
 800c8fe:	b29a      	uxth	r2, r3
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c906:	429a      	cmp	r2, r3
 800c908:	d91c      	bls.n	800c944 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c90a:	4b76      	ldr	r3, [pc, #472]	; (800cae4 <tcp_receive+0x274>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	89db      	ldrh	r3, [r3, #14]
 800c910:	b29a      	uxth	r2, r3
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c924:	429a      	cmp	r2, r3
 800c926:	d205      	bcs.n	800c934 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800c934:	4b69      	ldr	r3, [pc, #420]	; (800cadc <tcp_receive+0x26c>)
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800c93c:	4b68      	ldr	r3, [pc, #416]	; (800cae0 <tcp_receive+0x270>)
 800c93e:	681a      	ldr	r2, [r3, #0]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c944:	4b66      	ldr	r3, [pc, #408]	; (800cae0 <tcp_receive+0x270>)
 800c946:	681a      	ldr	r2, [r3, #0]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c94c:	1ad3      	subs	r3, r2, r3
 800c94e:	2b00      	cmp	r3, #0
 800c950:	dc58      	bgt.n	800ca04 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c952:	4b65      	ldr	r3, [pc, #404]	; (800cae8 <tcp_receive+0x278>)
 800c954:	881b      	ldrh	r3, [r3, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d14b      	bne.n	800c9f2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c95e:	687a      	ldr	r2, [r7, #4]
 800c960:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800c964:	4413      	add	r3, r2
 800c966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c968:	429a      	cmp	r2, r3
 800c96a:	d142      	bne.n	800c9f2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c972:	2b00      	cmp	r3, #0
 800c974:	db3d      	blt.n	800c9f2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c97a:	4b59      	ldr	r3, [pc, #356]	; (800cae0 <tcp_receive+0x270>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	429a      	cmp	r2, r3
 800c980:	d137      	bne.n	800c9f2 <tcp_receive+0x182>
              found_dupack = 1;
 800c982:	2301      	movs	r3, #1
 800c984:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c98c:	2bff      	cmp	r3, #255	; 0xff
 800c98e:	d007      	beq.n	800c9a0 <tcp_receive+0x130>
                ++pcb->dupacks;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c996:	3301      	adds	r3, #1
 800c998:	b2da      	uxtb	r2, r3
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c9a6:	2b03      	cmp	r3, #3
 800c9a8:	d91b      	bls.n	800c9e2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c9b4:	4413      	add	r3, r2
 800c9b6:	b29a      	uxth	r2, r3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d30a      	bcc.n	800c9d8 <tcp_receive+0x168>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c9cc:	4413      	add	r3, r2
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c9d6:	e004      	b.n	800c9e2 <tcp_receive+0x172>
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c9de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c9e8:	2b02      	cmp	r3, #2
 800c9ea:	d902      	bls.n	800c9f2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f001 feeb 	bl	800e7c8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c9f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	f040 8161 	bne.w	800ccbc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ca02:	e15b      	b.n	800ccbc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ca04:	4b36      	ldr	r3, [pc, #216]	; (800cae0 <tcp_receive+0x270>)
 800ca06:	681a      	ldr	r2, [r3, #0]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca0c:	1ad3      	subs	r3, r2, r3
 800ca0e:	3b01      	subs	r3, #1
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	f2c0 814e 	blt.w	800ccb2 <tcp_receive+0x442>
 800ca16:	4b32      	ldr	r3, [pc, #200]	; (800cae0 <tcp_receive+0x270>)
 800ca18:	681a      	ldr	r2, [r3, #0]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca1e:	1ad3      	subs	r3, r2, r3
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	f300 8146 	bgt.w	800ccb2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	8b5b      	ldrh	r3, [r3, #26]
 800ca2a:	f003 0304 	and.w	r3, r3, #4
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d010      	beq.n	800ca54 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	8b5b      	ldrh	r3, [r3, #26]
 800ca36:	f023 0304 	bic.w	r3, r3, #4
 800ca3a:	b29a      	uxth	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2200      	movs	r2, #0
 800ca58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ca62:	10db      	asrs	r3, r3, #3
 800ca64:	b21b      	sxth	r3, r3
 800ca66:	b29a      	uxth	r2, r3
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ca6e:	b29b      	uxth	r3, r3
 800ca70:	4413      	add	r3, r2
 800ca72:	b29b      	uxth	r3, r3
 800ca74:	b21a      	sxth	r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ca7c:	4b18      	ldr	r3, [pc, #96]	; (800cae0 <tcp_receive+0x270>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	b29a      	uxth	r2, r3
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	1ad3      	subs	r3, r2, r3
 800ca8a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ca94:	4b12      	ldr	r3, [pc, #72]	; (800cae0 <tcp_receive+0x270>)
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	7d1b      	ldrb	r3, [r3, #20]
 800caa0:	2b03      	cmp	r3, #3
 800caa2:	f240 8097 	bls.w	800cbd4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d245      	bcs.n	800cb42 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	8b5b      	ldrh	r3, [r3, #26]
 800caba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d014      	beq.n	800caec <tcp_receive+0x27c>
 800cac2:	2301      	movs	r3, #1
 800cac4:	e013      	b.n	800caee <tcp_receive+0x27e>
 800cac6:	bf00      	nop
 800cac8:	0801662c 	.word	0x0801662c
 800cacc:	0801695c 	.word	0x0801695c
 800cad0:	08016678 	.word	0x08016678
 800cad4:	08016978 	.word	0x08016978
 800cad8:	2000af04 	.word	0x2000af04
 800cadc:	2000aef8 	.word	0x2000aef8
 800cae0:	2000aefc 	.word	0x2000aefc
 800cae4:	2000aee8 	.word	0x2000aee8
 800cae8:	2000af02 	.word	0x2000af02
 800caec:	2302      	movs	r3, #2
 800caee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800caf2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800caf6:	b29a      	uxth	r2, r3
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cafc:	fb12 f303 	smulbb	r3, r2, r3
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cb04:	4293      	cmp	r3, r2
 800cb06:	bf28      	it	cs
 800cb08:	4613      	movcs	r3, r2
 800cb0a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cb12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cb14:	4413      	add	r3, r2
 800cb16:	b29a      	uxth	r2, r3
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	d309      	bcc.n	800cb36 <tcp_receive+0x2c6>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cb28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cb2a:	4413      	add	r3, r2
 800cb2c:	b29a      	uxth	r2, r3
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cb34:	e04e      	b.n	800cbd4 <tcp_receive+0x364>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb3c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cb40:	e048      	b.n	800cbd4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cb48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cb4a:	4413      	add	r3, r2
 800cb4c:	b29a      	uxth	r2, r3
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d309      	bcc.n	800cb6c <tcp_receive+0x2fc>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cb5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cb60:	4413      	add	r3, r2
 800cb62:	b29a      	uxth	r2, r3
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cb6a:	e004      	b.n	800cb76 <tcp_receive+0x306>
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d326      	bcc.n	800cbd4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cb92:	1ad3      	subs	r3, r2, r3
 800cb94:	b29a      	uxth	r2, r3
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cba6:	4413      	add	r3, r2
 800cba8:	b29a      	uxth	r2, r3
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d30a      	bcc.n	800cbca <tcp_receive+0x35a>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cbbe:	4413      	add	r3, r2
 800cbc0:	b29a      	uxth	r2, r3
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cbc8:	e004      	b.n	800cbd4 <tcp_receive+0x364>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cbd0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbdc:	4a98      	ldr	r2, [pc, #608]	; (800ce40 <tcp_receive+0x5d0>)
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f7ff fdca 	bl	800c778 <tcp_free_acked_segments>
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbf2:	4a94      	ldr	r2, [pc, #592]	; (800ce44 <tcp_receive+0x5d4>)
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f7ff fdbf 	bl	800c778 <tcp_free_acked_segments>
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d104      	bne.n	800cc12 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc0e:	861a      	strh	r2, [r3, #48]	; 0x30
 800cc10:	e002      	b.n	800cc18 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2200      	movs	r2, #0
 800cc16:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d103      	bne.n	800cc2e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800cc34:	4b84      	ldr	r3, [pc, #528]	; (800ce48 <tcp_receive+0x5d8>)
 800cc36:	881b      	ldrh	r3, [r3, #0]
 800cc38:	4413      	add	r3, r2
 800cc3a:	b29a      	uxth	r2, r3
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	8b5b      	ldrh	r3, [r3, #26]
 800cc46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d035      	beq.n	800ccba <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d118      	bne.n	800cc88 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d00c      	beq.n	800cc78 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc66:	68db      	ldr	r3, [r3, #12]
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7fb f9bb 	bl	8007fe6 <lwip_htonl>
 800cc70:	4603      	mov	r3, r0
 800cc72:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	dc20      	bgt.n	800ccba <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	8b5b      	ldrh	r3, [r3, #26]
 800cc7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cc80:	b29a      	uxth	r2, r3
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cc86:	e018      	b.n	800ccba <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc90:	68db      	ldr	r3, [r3, #12]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7fb f9a6 	bl	8007fe6 <lwip_htonl>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	1ae3      	subs	r3, r4, r3
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	dc0b      	bgt.n	800ccba <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	8b5b      	ldrh	r3, [r3, #26]
 800cca6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ccaa:	b29a      	uxth	r2, r3
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ccb0:	e003      	b.n	800ccba <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f001 ff76 	bl	800eba4 <tcp_send_empty_ack>
 800ccb8:	e000      	b.n	800ccbc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ccba:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d05b      	beq.n	800cd7c <tcp_receive+0x50c>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccc8:	4b60      	ldr	r3, [pc, #384]	; (800ce4c <tcp_receive+0x5dc>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	1ad3      	subs	r3, r2, r3
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	da54      	bge.n	800cd7c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ccd2:	4b5f      	ldr	r3, [pc, #380]	; (800ce50 <tcp_receive+0x5e0>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	b29a      	uxth	r2, r3
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	1ad3      	subs	r3, r2, r3
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800cce6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ccf0:	10db      	asrs	r3, r3, #3
 800ccf2:	b21b      	sxth	r3, r3
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	1ad3      	subs	r3, r2, r3
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cd04:	b29a      	uxth	r2, r3
 800cd06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cd0a:	4413      	add	r3, r2
 800cd0c:	b29b      	uxth	r3, r3
 800cd0e:	b21a      	sxth	r2, r3
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800cd14:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	da05      	bge.n	800cd28 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800cd1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cd20:	425b      	negs	r3, r3
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800cd28:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cd32:	109b      	asrs	r3, r3, #2
 800cd34:	b21b      	sxth	r3, r3
 800cd36:	b29b      	uxth	r3, r3
 800cd38:	1ad3      	subs	r3, r2, r3
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cd46:	b29a      	uxth	r2, r3
 800cd48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cd4c:	4413      	add	r3, r2
 800cd4e:	b29b      	uxth	r3, r3
 800cd50:	b21a      	sxth	r2, r3
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cd5c:	10db      	asrs	r3, r3, #3
 800cd5e:	b21b      	sxth	r3, r3
 800cd60:	b29a      	uxth	r2, r3
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cd68:	b29b      	uxth	r3, r3
 800cd6a:	4413      	add	r3, r2
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	b21a      	sxth	r2, r3
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800cd7c:	4b35      	ldr	r3, [pc, #212]	; (800ce54 <tcp_receive+0x5e4>)
 800cd7e:	881b      	ldrh	r3, [r3, #0]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	f000 84e2 	beq.w	800d74a <tcp_receive+0xeda>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	7d1b      	ldrb	r3, [r3, #20]
 800cd8a:	2b06      	cmp	r3, #6
 800cd8c:	f200 84dd 	bhi.w	800d74a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd94:	4b30      	ldr	r3, [pc, #192]	; (800ce58 <tcp_receive+0x5e8>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	1ad3      	subs	r3, r2, r3
 800cd9a:	3b01      	subs	r3, #1
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	f2c0 808f 	blt.w	800cec0 <tcp_receive+0x650>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cda6:	4b2b      	ldr	r3, [pc, #172]	; (800ce54 <tcp_receive+0x5e4>)
 800cda8:	881b      	ldrh	r3, [r3, #0]
 800cdaa:	4619      	mov	r1, r3
 800cdac:	4b2a      	ldr	r3, [pc, #168]	; (800ce58 <tcp_receive+0x5e8>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	440b      	add	r3, r1
 800cdb2:	1ad3      	subs	r3, r2, r3
 800cdb4:	3301      	adds	r3, #1
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	f300 8082 	bgt.w	800cec0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800cdbc:	4b27      	ldr	r3, [pc, #156]	; (800ce5c <tcp_receive+0x5ec>)
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdc6:	4b24      	ldr	r3, [pc, #144]	; (800ce58 <tcp_receive+0x5e8>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	1ad3      	subs	r3, r2, r3
 800cdcc:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800cdce:	4b23      	ldr	r3, [pc, #140]	; (800ce5c <tcp_receive+0x5ec>)
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d106      	bne.n	800cde4 <tcp_receive+0x574>
 800cdd6:	4b22      	ldr	r3, [pc, #136]	; (800ce60 <tcp_receive+0x5f0>)
 800cdd8:	f240 5294 	movw	r2, #1428	; 0x594
 800cddc:	4921      	ldr	r1, [pc, #132]	; (800ce64 <tcp_receive+0x5f4>)
 800cdde:	4822      	ldr	r0, [pc, #136]	; (800ce68 <tcp_receive+0x5f8>)
 800cde0:	f007 f836 	bl	8013e50 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800cde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d906      	bls.n	800cdfc <tcp_receive+0x58c>
 800cdee:	4b1c      	ldr	r3, [pc, #112]	; (800ce60 <tcp_receive+0x5f0>)
 800cdf0:	f240 5295 	movw	r2, #1429	; 0x595
 800cdf4:	491d      	ldr	r1, [pc, #116]	; (800ce6c <tcp_receive+0x5fc>)
 800cdf6:	481c      	ldr	r0, [pc, #112]	; (800ce68 <tcp_receive+0x5f8>)
 800cdf8:	f007 f82a 	bl	8013e50 <iprintf>
      off = (u16_t)off32;
 800cdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ce02:	4b16      	ldr	r3, [pc, #88]	; (800ce5c <tcp_receive+0x5ec>)
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	891b      	ldrh	r3, [r3, #8]
 800ce08:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d906      	bls.n	800ce1e <tcp_receive+0x5ae>
 800ce10:	4b13      	ldr	r3, [pc, #76]	; (800ce60 <tcp_receive+0x5f0>)
 800ce12:	f240 5297 	movw	r2, #1431	; 0x597
 800ce16:	4916      	ldr	r1, [pc, #88]	; (800ce70 <tcp_receive+0x600>)
 800ce18:	4813      	ldr	r0, [pc, #76]	; (800ce68 <tcp_receive+0x5f8>)
 800ce1a:	f007 f819 	bl	8013e50 <iprintf>
      inseg.len -= off;
 800ce1e:	4b0f      	ldr	r3, [pc, #60]	; (800ce5c <tcp_receive+0x5ec>)
 800ce20:	891a      	ldrh	r2, [r3, #8]
 800ce22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ce26:	1ad3      	subs	r3, r2, r3
 800ce28:	b29a      	uxth	r2, r3
 800ce2a:	4b0c      	ldr	r3, [pc, #48]	; (800ce5c <tcp_receive+0x5ec>)
 800ce2c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ce2e:	4b0b      	ldr	r3, [pc, #44]	; (800ce5c <tcp_receive+0x5ec>)
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	891a      	ldrh	r2, [r3, #8]
 800ce34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ce38:	1ad3      	subs	r3, r2, r3
 800ce3a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ce3c:	e02a      	b.n	800ce94 <tcp_receive+0x624>
 800ce3e:	bf00      	nop
 800ce40:	08016994 	.word	0x08016994
 800ce44:	0801699c 	.word	0x0801699c
 800ce48:	2000af00 	.word	0x2000af00
 800ce4c:	2000aefc 	.word	0x2000aefc
 800ce50:	2000aec0 	.word	0x2000aec0
 800ce54:	2000af02 	.word	0x2000af02
 800ce58:	2000aef8 	.word	0x2000aef8
 800ce5c:	2000aed8 	.word	0x2000aed8
 800ce60:	0801662c 	.word	0x0801662c
 800ce64:	080169a4 	.word	0x080169a4
 800ce68:	08016678 	.word	0x08016678
 800ce6c:	080169b4 	.word	0x080169b4
 800ce70:	080169c4 	.word	0x080169c4
        off -= p->len;
 800ce74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce76:	895b      	ldrh	r3, [r3, #10]
 800ce78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ce7c:	1ad3      	subs	r3, r2, r3
 800ce7e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ce82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce84:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ce86:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ce88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ce8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ce94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce96:	895b      	ldrh	r3, [r3, #10]
 800ce98:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d8e9      	bhi.n	800ce74 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800cea0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cea4:	4619      	mov	r1, r3
 800cea6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cea8:	f7fc fb6c 	bl	8009584 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceb0:	4a91      	ldr	r2, [pc, #580]	; (800d0f8 <tcp_receive+0x888>)
 800ceb2:	6013      	str	r3, [r2, #0]
 800ceb4:	4b91      	ldr	r3, [pc, #580]	; (800d0fc <tcp_receive+0x88c>)
 800ceb6:	68db      	ldr	r3, [r3, #12]
 800ceb8:	4a8f      	ldr	r2, [pc, #572]	; (800d0f8 <tcp_receive+0x888>)
 800ceba:	6812      	ldr	r2, [r2, #0]
 800cebc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cebe:	e00d      	b.n	800cedc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800cec0:	4b8d      	ldr	r3, [pc, #564]	; (800d0f8 <tcp_receive+0x888>)
 800cec2:	681a      	ldr	r2, [r3, #0]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cec8:	1ad3      	subs	r3, r2, r3
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	da06      	bge.n	800cedc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	8b5b      	ldrh	r3, [r3, #26]
 800ced2:	f043 0302 	orr.w	r3, r3, #2
 800ced6:	b29a      	uxth	r2, r3
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cedc:	4b86      	ldr	r3, [pc, #536]	; (800d0f8 <tcp_receive+0x888>)
 800cede:	681a      	ldr	r2, [r3, #0]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cee4:	1ad3      	subs	r3, r2, r3
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	f2c0 842a 	blt.w	800d740 <tcp_receive+0xed0>
 800ceec:	4b82      	ldr	r3, [pc, #520]	; (800d0f8 <tcp_receive+0x888>)
 800ceee:	681a      	ldr	r2, [r3, #0]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef4:	6879      	ldr	r1, [r7, #4]
 800cef6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cef8:	440b      	add	r3, r1
 800cefa:	1ad3      	subs	r3, r2, r3
 800cefc:	3301      	adds	r3, #1
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	f300 841e 	bgt.w	800d740 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf08:	4b7b      	ldr	r3, [pc, #492]	; (800d0f8 <tcp_receive+0x888>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	f040 829a 	bne.w	800d446 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800cf12:	4b7a      	ldr	r3, [pc, #488]	; (800d0fc <tcp_receive+0x88c>)
 800cf14:	891c      	ldrh	r4, [r3, #8]
 800cf16:	4b79      	ldr	r3, [pc, #484]	; (800d0fc <tcp_receive+0x88c>)
 800cf18:	68db      	ldr	r3, [r3, #12]
 800cf1a:	899b      	ldrh	r3, [r3, #12]
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7fb f84c 	bl	8007fbc <lwip_htons>
 800cf24:	4603      	mov	r3, r0
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	f003 0303 	and.w	r3, r3, #3
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d001      	beq.n	800cf34 <tcp_receive+0x6c4>
 800cf30:	2301      	movs	r3, #1
 800cf32:	e000      	b.n	800cf36 <tcp_receive+0x6c6>
 800cf34:	2300      	movs	r3, #0
 800cf36:	4423      	add	r3, r4
 800cf38:	b29a      	uxth	r2, r3
 800cf3a:	4b71      	ldr	r3, [pc, #452]	; (800d100 <tcp_receive+0x890>)
 800cf3c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cf42:	4b6f      	ldr	r3, [pc, #444]	; (800d100 <tcp_receive+0x890>)
 800cf44:	881b      	ldrh	r3, [r3, #0]
 800cf46:	429a      	cmp	r2, r3
 800cf48:	d275      	bcs.n	800d036 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cf4a:	4b6c      	ldr	r3, [pc, #432]	; (800d0fc <tcp_receive+0x88c>)
 800cf4c:	68db      	ldr	r3, [r3, #12]
 800cf4e:	899b      	ldrh	r3, [r3, #12]
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7fb f832 	bl	8007fbc <lwip_htons>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	b2db      	uxtb	r3, r3
 800cf5c:	f003 0301 	and.w	r3, r3, #1
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d01f      	beq.n	800cfa4 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800cf64:	4b65      	ldr	r3, [pc, #404]	; (800d0fc <tcp_receive+0x88c>)
 800cf66:	68db      	ldr	r3, [r3, #12]
 800cf68:	899b      	ldrh	r3, [r3, #12]
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	b21b      	sxth	r3, r3
 800cf6e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cf72:	b21c      	sxth	r4, r3
 800cf74:	4b61      	ldr	r3, [pc, #388]	; (800d0fc <tcp_receive+0x88c>)
 800cf76:	68db      	ldr	r3, [r3, #12]
 800cf78:	899b      	ldrh	r3, [r3, #12]
 800cf7a:	b29b      	uxth	r3, r3
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7fb f81d 	bl	8007fbc <lwip_htons>
 800cf82:	4603      	mov	r3, r0
 800cf84:	b2db      	uxtb	r3, r3
 800cf86:	b29b      	uxth	r3, r3
 800cf88:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7fb f814 	bl	8007fbc <lwip_htons>
 800cf94:	4603      	mov	r3, r0
 800cf96:	b21b      	sxth	r3, r3
 800cf98:	4323      	orrs	r3, r4
 800cf9a:	b21a      	sxth	r2, r3
 800cf9c:	4b57      	ldr	r3, [pc, #348]	; (800d0fc <tcp_receive+0x88c>)
 800cf9e:	68db      	ldr	r3, [r3, #12]
 800cfa0:	b292      	uxth	r2, r2
 800cfa2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cfa8:	4b54      	ldr	r3, [pc, #336]	; (800d0fc <tcp_receive+0x88c>)
 800cfaa:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cfac:	4b53      	ldr	r3, [pc, #332]	; (800d0fc <tcp_receive+0x88c>)
 800cfae:	68db      	ldr	r3, [r3, #12]
 800cfb0:	899b      	ldrh	r3, [r3, #12]
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7fb f801 	bl	8007fbc <lwip_htons>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	b2db      	uxtb	r3, r3
 800cfbe:	f003 0302 	and.w	r3, r3, #2
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d005      	beq.n	800cfd2 <tcp_receive+0x762>
            inseg.len -= 1;
 800cfc6:	4b4d      	ldr	r3, [pc, #308]	; (800d0fc <tcp_receive+0x88c>)
 800cfc8:	891b      	ldrh	r3, [r3, #8]
 800cfca:	3b01      	subs	r3, #1
 800cfcc:	b29a      	uxth	r2, r3
 800cfce:	4b4b      	ldr	r3, [pc, #300]	; (800d0fc <tcp_receive+0x88c>)
 800cfd0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800cfd2:	4b4a      	ldr	r3, [pc, #296]	; (800d0fc <tcp_receive+0x88c>)
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	4a49      	ldr	r2, [pc, #292]	; (800d0fc <tcp_receive+0x88c>)
 800cfd8:	8912      	ldrh	r2, [r2, #8]
 800cfda:	4611      	mov	r1, r2
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7fc f9d1 	bl	8009384 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800cfe2:	4b46      	ldr	r3, [pc, #280]	; (800d0fc <tcp_receive+0x88c>)
 800cfe4:	891c      	ldrh	r4, [r3, #8]
 800cfe6:	4b45      	ldr	r3, [pc, #276]	; (800d0fc <tcp_receive+0x88c>)
 800cfe8:	68db      	ldr	r3, [r3, #12]
 800cfea:	899b      	ldrh	r3, [r3, #12]
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7fa ffe4 	bl	8007fbc <lwip_htons>
 800cff4:	4603      	mov	r3, r0
 800cff6:	b2db      	uxtb	r3, r3
 800cff8:	f003 0303 	and.w	r3, r3, #3
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d001      	beq.n	800d004 <tcp_receive+0x794>
 800d000:	2301      	movs	r3, #1
 800d002:	e000      	b.n	800d006 <tcp_receive+0x796>
 800d004:	2300      	movs	r3, #0
 800d006:	4423      	add	r3, r4
 800d008:	b29a      	uxth	r2, r3
 800d00a:	4b3d      	ldr	r3, [pc, #244]	; (800d100 <tcp_receive+0x890>)
 800d00c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d00e:	4b3c      	ldr	r3, [pc, #240]	; (800d100 <tcp_receive+0x890>)
 800d010:	881b      	ldrh	r3, [r3, #0]
 800d012:	461a      	mov	r2, r3
 800d014:	4b38      	ldr	r3, [pc, #224]	; (800d0f8 <tcp_receive+0x888>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	441a      	add	r2, r3
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d01e:	6879      	ldr	r1, [r7, #4]
 800d020:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d022:	440b      	add	r3, r1
 800d024:	429a      	cmp	r2, r3
 800d026:	d006      	beq.n	800d036 <tcp_receive+0x7c6>
 800d028:	4b36      	ldr	r3, [pc, #216]	; (800d104 <tcp_receive+0x894>)
 800d02a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800d02e:	4936      	ldr	r1, [pc, #216]	; (800d108 <tcp_receive+0x898>)
 800d030:	4836      	ldr	r0, [pc, #216]	; (800d10c <tcp_receive+0x89c>)
 800d032:	f006 ff0d 	bl	8013e50 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	f000 80e7 	beq.w	800d20e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d040:	4b2e      	ldr	r3, [pc, #184]	; (800d0fc <tcp_receive+0x88c>)
 800d042:	68db      	ldr	r3, [r3, #12]
 800d044:	899b      	ldrh	r3, [r3, #12]
 800d046:	b29b      	uxth	r3, r3
 800d048:	4618      	mov	r0, r3
 800d04a:	f7fa ffb7 	bl	8007fbc <lwip_htons>
 800d04e:	4603      	mov	r3, r0
 800d050:	b2db      	uxtb	r3, r3
 800d052:	f003 0301 	and.w	r3, r3, #1
 800d056:	2b00      	cmp	r3, #0
 800d058:	d010      	beq.n	800d07c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d05a:	e00a      	b.n	800d072 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d060:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d066:	681a      	ldr	r2, [r3, #0]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800d06c:	68f8      	ldr	r0, [r7, #12]
 800d06e:	f7fd fd92 	bl	800ab96 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d076:	2b00      	cmp	r3, #0
 800d078:	d1f0      	bne.n	800d05c <tcp_receive+0x7ec>
 800d07a:	e0c8      	b.n	800d20e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d080:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d082:	e052      	b.n	800d12a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d086:	68db      	ldr	r3, [r3, #12]
 800d088:	899b      	ldrh	r3, [r3, #12]
 800d08a:	b29b      	uxth	r3, r3
 800d08c:	4618      	mov	r0, r3
 800d08e:	f7fa ff95 	bl	8007fbc <lwip_htons>
 800d092:	4603      	mov	r3, r0
 800d094:	b2db      	uxtb	r3, r3
 800d096:	f003 0301 	and.w	r3, r3, #1
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d03d      	beq.n	800d11a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d09e:	4b17      	ldr	r3, [pc, #92]	; (800d0fc <tcp_receive+0x88c>)
 800d0a0:	68db      	ldr	r3, [r3, #12]
 800d0a2:	899b      	ldrh	r3, [r3, #12]
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7fa ff88 	bl	8007fbc <lwip_htons>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	b2db      	uxtb	r3, r3
 800d0b0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d130      	bne.n	800d11a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d0b8:	4b10      	ldr	r3, [pc, #64]	; (800d0fc <tcp_receive+0x88c>)
 800d0ba:	68db      	ldr	r3, [r3, #12]
 800d0bc:	899b      	ldrh	r3, [r3, #12]
 800d0be:	b29c      	uxth	r4, r3
 800d0c0:	2001      	movs	r0, #1
 800d0c2:	f7fa ff7b 	bl	8007fbc <lwip_htons>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	4b0c      	ldr	r3, [pc, #48]	; (800d0fc <tcp_receive+0x88c>)
 800d0cc:	68db      	ldr	r3, [r3, #12]
 800d0ce:	4322      	orrs	r2, r4
 800d0d0:	b292      	uxth	r2, r2
 800d0d2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d0d4:	4b09      	ldr	r3, [pc, #36]	; (800d0fc <tcp_receive+0x88c>)
 800d0d6:	891c      	ldrh	r4, [r3, #8]
 800d0d8:	4b08      	ldr	r3, [pc, #32]	; (800d0fc <tcp_receive+0x88c>)
 800d0da:	68db      	ldr	r3, [r3, #12]
 800d0dc:	899b      	ldrh	r3, [r3, #12]
 800d0de:	b29b      	uxth	r3, r3
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f7fa ff6b 	bl	8007fbc <lwip_htons>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	b2db      	uxtb	r3, r3
 800d0ea:	f003 0303 	and.w	r3, r3, #3
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d00e      	beq.n	800d110 <tcp_receive+0x8a0>
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	e00d      	b.n	800d112 <tcp_receive+0x8a2>
 800d0f6:	bf00      	nop
 800d0f8:	2000aef8 	.word	0x2000aef8
 800d0fc:	2000aed8 	.word	0x2000aed8
 800d100:	2000af02 	.word	0x2000af02
 800d104:	0801662c 	.word	0x0801662c
 800d108:	080169d4 	.word	0x080169d4
 800d10c:	08016678 	.word	0x08016678
 800d110:	2300      	movs	r3, #0
 800d112:	4423      	add	r3, r4
 800d114:	b29a      	uxth	r2, r3
 800d116:	4b98      	ldr	r3, [pc, #608]	; (800d378 <tcp_receive+0xb08>)
 800d118:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800d11a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d11c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800d11e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800d124:	6938      	ldr	r0, [r7, #16]
 800d126:	f7fd fd36 	bl	800ab96 <tcp_seg_free>
            while (next &&
 800d12a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d00e      	beq.n	800d14e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d130:	4b91      	ldr	r3, [pc, #580]	; (800d378 <tcp_receive+0xb08>)
 800d132:	881b      	ldrh	r3, [r3, #0]
 800d134:	461a      	mov	r2, r3
 800d136:	4b91      	ldr	r3, [pc, #580]	; (800d37c <tcp_receive+0xb0c>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	441a      	add	r2, r3
 800d13c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d13e:	68db      	ldr	r3, [r3, #12]
 800d140:	685b      	ldr	r3, [r3, #4]
 800d142:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d144:	8909      	ldrh	r1, [r1, #8]
 800d146:	440b      	add	r3, r1
 800d148:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	da9a      	bge.n	800d084 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d14e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d150:	2b00      	cmp	r3, #0
 800d152:	d059      	beq.n	800d208 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800d154:	4b88      	ldr	r3, [pc, #544]	; (800d378 <tcp_receive+0xb08>)
 800d156:	881b      	ldrh	r3, [r3, #0]
 800d158:	461a      	mov	r2, r3
 800d15a:	4b88      	ldr	r3, [pc, #544]	; (800d37c <tcp_receive+0xb0c>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	441a      	add	r2, r3
 800d160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d168:	2b00      	cmp	r3, #0
 800d16a:	dd4d      	ble.n	800d208 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d16c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	b29a      	uxth	r2, r3
 800d174:	4b81      	ldr	r3, [pc, #516]	; (800d37c <tcp_receive+0xb0c>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	b29b      	uxth	r3, r3
 800d17a:	1ad3      	subs	r3, r2, r3
 800d17c:	b29a      	uxth	r2, r3
 800d17e:	4b80      	ldr	r3, [pc, #512]	; (800d380 <tcp_receive+0xb10>)
 800d180:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d182:	4b7f      	ldr	r3, [pc, #508]	; (800d380 <tcp_receive+0xb10>)
 800d184:	68db      	ldr	r3, [r3, #12]
 800d186:	899b      	ldrh	r3, [r3, #12]
 800d188:	b29b      	uxth	r3, r3
 800d18a:	4618      	mov	r0, r3
 800d18c:	f7fa ff16 	bl	8007fbc <lwip_htons>
 800d190:	4603      	mov	r3, r0
 800d192:	b2db      	uxtb	r3, r3
 800d194:	f003 0302 	and.w	r3, r3, #2
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d005      	beq.n	800d1a8 <tcp_receive+0x938>
                inseg.len -= 1;
 800d19c:	4b78      	ldr	r3, [pc, #480]	; (800d380 <tcp_receive+0xb10>)
 800d19e:	891b      	ldrh	r3, [r3, #8]
 800d1a0:	3b01      	subs	r3, #1
 800d1a2:	b29a      	uxth	r2, r3
 800d1a4:	4b76      	ldr	r3, [pc, #472]	; (800d380 <tcp_receive+0xb10>)
 800d1a6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d1a8:	4b75      	ldr	r3, [pc, #468]	; (800d380 <tcp_receive+0xb10>)
 800d1aa:	685b      	ldr	r3, [r3, #4]
 800d1ac:	4a74      	ldr	r2, [pc, #464]	; (800d380 <tcp_receive+0xb10>)
 800d1ae:	8912      	ldrh	r2, [r2, #8]
 800d1b0:	4611      	mov	r1, r2
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7fc f8e6 	bl	8009384 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d1b8:	4b71      	ldr	r3, [pc, #452]	; (800d380 <tcp_receive+0xb10>)
 800d1ba:	891c      	ldrh	r4, [r3, #8]
 800d1bc:	4b70      	ldr	r3, [pc, #448]	; (800d380 <tcp_receive+0xb10>)
 800d1be:	68db      	ldr	r3, [r3, #12]
 800d1c0:	899b      	ldrh	r3, [r3, #12]
 800d1c2:	b29b      	uxth	r3, r3
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7fa fef9 	bl	8007fbc <lwip_htons>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	f003 0303 	and.w	r3, r3, #3
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d001      	beq.n	800d1da <tcp_receive+0x96a>
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	e000      	b.n	800d1dc <tcp_receive+0x96c>
 800d1da:	2300      	movs	r3, #0
 800d1dc:	4423      	add	r3, r4
 800d1de:	b29a      	uxth	r2, r3
 800d1e0:	4b65      	ldr	r3, [pc, #404]	; (800d378 <tcp_receive+0xb08>)
 800d1e2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d1e4:	4b64      	ldr	r3, [pc, #400]	; (800d378 <tcp_receive+0xb08>)
 800d1e6:	881b      	ldrh	r3, [r3, #0]
 800d1e8:	461a      	mov	r2, r3
 800d1ea:	4b64      	ldr	r3, [pc, #400]	; (800d37c <tcp_receive+0xb0c>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	441a      	add	r2, r3
 800d1f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1f2:	68db      	ldr	r3, [r3, #12]
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d006      	beq.n	800d208 <tcp_receive+0x998>
 800d1fa:	4b62      	ldr	r3, [pc, #392]	; (800d384 <tcp_receive+0xb14>)
 800d1fc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800d200:	4961      	ldr	r1, [pc, #388]	; (800d388 <tcp_receive+0xb18>)
 800d202:	4862      	ldr	r0, [pc, #392]	; (800d38c <tcp_receive+0xb1c>)
 800d204:	f006 fe24 	bl	8013e50 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d20c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d20e:	4b5a      	ldr	r3, [pc, #360]	; (800d378 <tcp_receive+0xb08>)
 800d210:	881b      	ldrh	r3, [r3, #0]
 800d212:	461a      	mov	r2, r3
 800d214:	4b59      	ldr	r3, [pc, #356]	; (800d37c <tcp_receive+0xb0c>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	441a      	add	r2, r3
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d222:	4b55      	ldr	r3, [pc, #340]	; (800d378 <tcp_receive+0xb08>)
 800d224:	881b      	ldrh	r3, [r3, #0]
 800d226:	429a      	cmp	r2, r3
 800d228:	d206      	bcs.n	800d238 <tcp_receive+0x9c8>
 800d22a:	4b56      	ldr	r3, [pc, #344]	; (800d384 <tcp_receive+0xb14>)
 800d22c:	f240 6207 	movw	r2, #1543	; 0x607
 800d230:	4957      	ldr	r1, [pc, #348]	; (800d390 <tcp_receive+0xb20>)
 800d232:	4856      	ldr	r0, [pc, #344]	; (800d38c <tcp_receive+0xb1c>)
 800d234:	f006 fe0c 	bl	8013e50 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d23c:	4b4e      	ldr	r3, [pc, #312]	; (800d378 <tcp_receive+0xb08>)
 800d23e:	881b      	ldrh	r3, [r3, #0]
 800d240:	1ad3      	subs	r3, r2, r3
 800d242:	b29a      	uxth	r2, r3
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f7fc ffc5 	bl	800a1d8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d24e:	4b4c      	ldr	r3, [pc, #304]	; (800d380 <tcp_receive+0xb10>)
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	891b      	ldrh	r3, [r3, #8]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d006      	beq.n	800d266 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800d258:	4b49      	ldr	r3, [pc, #292]	; (800d380 <tcp_receive+0xb10>)
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	4a4d      	ldr	r2, [pc, #308]	; (800d394 <tcp_receive+0xb24>)
 800d25e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d260:	4b47      	ldr	r3, [pc, #284]	; (800d380 <tcp_receive+0xb10>)
 800d262:	2200      	movs	r2, #0
 800d264:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d266:	4b46      	ldr	r3, [pc, #280]	; (800d380 <tcp_receive+0xb10>)
 800d268:	68db      	ldr	r3, [r3, #12]
 800d26a:	899b      	ldrh	r3, [r3, #12]
 800d26c:	b29b      	uxth	r3, r3
 800d26e:	4618      	mov	r0, r3
 800d270:	f7fa fea4 	bl	8007fbc <lwip_htons>
 800d274:	4603      	mov	r3, r0
 800d276:	b2db      	uxtb	r3, r3
 800d278:	f003 0301 	and.w	r3, r3, #1
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	f000 80b8 	beq.w	800d3f2 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d282:	4b45      	ldr	r3, [pc, #276]	; (800d398 <tcp_receive+0xb28>)
 800d284:	781b      	ldrb	r3, [r3, #0]
 800d286:	f043 0320 	orr.w	r3, r3, #32
 800d28a:	b2da      	uxtb	r2, r3
 800d28c:	4b42      	ldr	r3, [pc, #264]	; (800d398 <tcp_receive+0xb28>)
 800d28e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d290:	e0af      	b.n	800d3f2 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d296:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d29c:	68db      	ldr	r3, [r3, #12]
 800d29e:	685b      	ldr	r3, [r3, #4]
 800d2a0:	4a36      	ldr	r2, [pc, #216]	; (800d37c <tcp_receive+0xb0c>)
 800d2a2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	891b      	ldrh	r3, [r3, #8]
 800d2a8:	461c      	mov	r4, r3
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	68db      	ldr	r3, [r3, #12]
 800d2ae:	899b      	ldrh	r3, [r3, #12]
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7fa fe82 	bl	8007fbc <lwip_htons>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	f003 0303 	and.w	r3, r3, #3
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d001      	beq.n	800d2c8 <tcp_receive+0xa58>
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	e000      	b.n	800d2ca <tcp_receive+0xa5a>
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	191a      	adds	r2, r3, r4
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2d0:	441a      	add	r2, r3
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2da:	461c      	mov	r4, r3
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	891b      	ldrh	r3, [r3, #8]
 800d2e0:	461d      	mov	r5, r3
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	68db      	ldr	r3, [r3, #12]
 800d2e6:	899b      	ldrh	r3, [r3, #12]
 800d2e8:	b29b      	uxth	r3, r3
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7fa fe66 	bl	8007fbc <lwip_htons>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	f003 0303 	and.w	r3, r3, #3
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d001      	beq.n	800d300 <tcp_receive+0xa90>
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	e000      	b.n	800d302 <tcp_receive+0xa92>
 800d300:	2300      	movs	r3, #0
 800d302:	442b      	add	r3, r5
 800d304:	429c      	cmp	r4, r3
 800d306:	d206      	bcs.n	800d316 <tcp_receive+0xaa6>
 800d308:	4b1e      	ldr	r3, [pc, #120]	; (800d384 <tcp_receive+0xb14>)
 800d30a:	f240 622b 	movw	r2, #1579	; 0x62b
 800d30e:	4923      	ldr	r1, [pc, #140]	; (800d39c <tcp_receive+0xb2c>)
 800d310:	481e      	ldr	r0, [pc, #120]	; (800d38c <tcp_receive+0xb1c>)
 800d312:	f006 fd9d 	bl	8013e50 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	891b      	ldrh	r3, [r3, #8]
 800d31a:	461c      	mov	r4, r3
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	68db      	ldr	r3, [r3, #12]
 800d320:	899b      	ldrh	r3, [r3, #12]
 800d322:	b29b      	uxth	r3, r3
 800d324:	4618      	mov	r0, r3
 800d326:	f7fa fe49 	bl	8007fbc <lwip_htons>
 800d32a:	4603      	mov	r3, r0
 800d32c:	b2db      	uxtb	r3, r3
 800d32e:	f003 0303 	and.w	r3, r3, #3
 800d332:	2b00      	cmp	r3, #0
 800d334:	d001      	beq.n	800d33a <tcp_receive+0xaca>
 800d336:	2301      	movs	r3, #1
 800d338:	e000      	b.n	800d33c <tcp_receive+0xacc>
 800d33a:	2300      	movs	r3, #0
 800d33c:	1919      	adds	r1, r3, r4
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d342:	b28b      	uxth	r3, r1
 800d344:	1ad3      	subs	r3, r2, r3
 800d346:	b29a      	uxth	r2, r3
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f7fc ff43 	bl	800a1d8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	685b      	ldr	r3, [r3, #4]
 800d356:	891b      	ldrh	r3, [r3, #8]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d028      	beq.n	800d3ae <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d35c:	4b0d      	ldr	r3, [pc, #52]	; (800d394 <tcp_receive+0xb24>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d01d      	beq.n	800d3a0 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800d364:	4b0b      	ldr	r3, [pc, #44]	; (800d394 <tcp_receive+0xb24>)
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	4619      	mov	r1, r3
 800d36e:	4610      	mov	r0, r2
 800d370:	f7fc fa50 	bl	8009814 <pbuf_cat>
 800d374:	e018      	b.n	800d3a8 <tcp_receive+0xb38>
 800d376:	bf00      	nop
 800d378:	2000af02 	.word	0x2000af02
 800d37c:	2000aef8 	.word	0x2000aef8
 800d380:	2000aed8 	.word	0x2000aed8
 800d384:	0801662c 	.word	0x0801662c
 800d388:	08016a0c 	.word	0x08016a0c
 800d38c:	08016678 	.word	0x08016678
 800d390:	08016a48 	.word	0x08016a48
 800d394:	2000af08 	.word	0x2000af08
 800d398:	2000af05 	.word	0x2000af05
 800d39c:	08016a68 	.word	0x08016a68
            } else {
              recv_data = cseg->p;
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	4a70      	ldr	r2, [pc, #448]	; (800d568 <tcp_receive+0xcf8>)
 800d3a6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	68db      	ldr	r3, [r3, #12]
 800d3b2:	899b      	ldrh	r3, [r3, #12]
 800d3b4:	b29b      	uxth	r3, r3
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f7fa fe00 	bl	8007fbc <lwip_htons>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	b2db      	uxtb	r3, r3
 800d3c0:	f003 0301 	and.w	r3, r3, #1
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d00d      	beq.n	800d3e4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d3c8:	4b68      	ldr	r3, [pc, #416]	; (800d56c <tcp_receive+0xcfc>)
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	f043 0320 	orr.w	r3, r3, #32
 800d3d0:	b2da      	uxtb	r2, r3
 800d3d2:	4b66      	ldr	r3, [pc, #408]	; (800d56c <tcp_receive+0xcfc>)
 800d3d4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	7d1b      	ldrb	r3, [r3, #20]
 800d3da:	2b04      	cmp	r3, #4
 800d3dc:	d102      	bne.n	800d3e4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2207      	movs	r2, #7
 800d3e2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	681a      	ldr	r2, [r3, #0]
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800d3ec:	68b8      	ldr	r0, [r7, #8]
 800d3ee:	f7fd fbd2 	bl	800ab96 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d008      	beq.n	800d40c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3fe:	68db      	ldr	r3, [r3, #12]
 800d400:	685a      	ldr	r2, [r3, #4]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d406:	429a      	cmp	r2, r3
 800d408:	f43f af43 	beq.w	800d292 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	8b5b      	ldrh	r3, [r3, #26]
 800d410:	f003 0301 	and.w	r3, r3, #1
 800d414:	2b00      	cmp	r3, #0
 800d416:	d00e      	beq.n	800d436 <tcp_receive+0xbc6>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	8b5b      	ldrh	r3, [r3, #26]
 800d41c:	f023 0301 	bic.w	r3, r3, #1
 800d420:	b29a      	uxth	r2, r3
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	835a      	strh	r2, [r3, #26]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	8b5b      	ldrh	r3, [r3, #26]
 800d42a:	f043 0302 	orr.w	r3, r3, #2
 800d42e:	b29a      	uxth	r2, r3
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d434:	e188      	b.n	800d748 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	8b5b      	ldrh	r3, [r3, #26]
 800d43a:	f043 0301 	orr.w	r3, r3, #1
 800d43e:	b29a      	uxth	r2, r3
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d444:	e180      	b.n	800d748 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d106      	bne.n	800d45c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d44e:	4848      	ldr	r0, [pc, #288]	; (800d570 <tcp_receive+0xd00>)
 800d450:	f7fd fbba 	bl	800abc8 <tcp_seg_copy>
 800d454:	4602      	mov	r2, r0
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	675a      	str	r2, [r3, #116]	; 0x74
 800d45a:	e16d      	b.n	800d738 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d45c:	2300      	movs	r3, #0
 800d45e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d464:	63bb      	str	r3, [r7, #56]	; 0x38
 800d466:	e157      	b.n	800d718 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800d468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d46a:	68db      	ldr	r3, [r3, #12]
 800d46c:	685a      	ldr	r2, [r3, #4]
 800d46e:	4b41      	ldr	r3, [pc, #260]	; (800d574 <tcp_receive+0xd04>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	429a      	cmp	r2, r3
 800d474:	d11d      	bne.n	800d4b2 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d476:	4b3e      	ldr	r3, [pc, #248]	; (800d570 <tcp_receive+0xd00>)
 800d478:	891a      	ldrh	r2, [r3, #8]
 800d47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d47c:	891b      	ldrh	r3, [r3, #8]
 800d47e:	429a      	cmp	r2, r3
 800d480:	f240 814f 	bls.w	800d722 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d484:	483a      	ldr	r0, [pc, #232]	; (800d570 <tcp_receive+0xd00>)
 800d486:	f7fd fb9f 	bl	800abc8 <tcp_seg_copy>
 800d48a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	f000 8149 	beq.w	800d726 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800d494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d496:	2b00      	cmp	r3, #0
 800d498:	d003      	beq.n	800d4a2 <tcp_receive+0xc32>
                    prev->next = cseg;
 800d49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d49c:	697a      	ldr	r2, [r7, #20]
 800d49e:	601a      	str	r2, [r3, #0]
 800d4a0:	e002      	b.n	800d4a8 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	697a      	ldr	r2, [r7, #20]
 800d4a6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d4a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d4aa:	6978      	ldr	r0, [r7, #20]
 800d4ac:	f7ff f8dc 	bl	800c668 <tcp_oos_insert_segment>
                }
                break;
 800d4b0:	e139      	b.n	800d726 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d117      	bne.n	800d4e8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d4b8:	4b2e      	ldr	r3, [pc, #184]	; (800d574 <tcp_receive+0xd04>)
 800d4ba:	681a      	ldr	r2, [r3, #0]
 800d4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4be:	68db      	ldr	r3, [r3, #12]
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	1ad3      	subs	r3, r2, r3
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	da57      	bge.n	800d578 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d4c8:	4829      	ldr	r0, [pc, #164]	; (800d570 <tcp_receive+0xd00>)
 800d4ca:	f7fd fb7d 	bl	800abc8 <tcp_seg_copy>
 800d4ce:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d4d0:	69bb      	ldr	r3, [r7, #24]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	f000 8129 	beq.w	800d72a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	69ba      	ldr	r2, [r7, #24]
 800d4dc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d4de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d4e0:	69b8      	ldr	r0, [r7, #24]
 800d4e2:	f7ff f8c1 	bl	800c668 <tcp_oos_insert_segment>
                  }
                  break;
 800d4e6:	e120      	b.n	800d72a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d4e8:	4b22      	ldr	r3, [pc, #136]	; (800d574 <tcp_receive+0xd04>)
 800d4ea:	681a      	ldr	r2, [r3, #0]
 800d4ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4ee:	68db      	ldr	r3, [r3, #12]
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	1ad3      	subs	r3, r2, r3
 800d4f4:	3b01      	subs	r3, #1
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	db3e      	blt.n	800d578 <tcp_receive+0xd08>
 800d4fa:	4b1e      	ldr	r3, [pc, #120]	; (800d574 <tcp_receive+0xd04>)
 800d4fc:	681a      	ldr	r2, [r3, #0]
 800d4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d500:	68db      	ldr	r3, [r3, #12]
 800d502:	685b      	ldr	r3, [r3, #4]
 800d504:	1ad3      	subs	r3, r2, r3
 800d506:	3301      	adds	r3, #1
 800d508:	2b00      	cmp	r3, #0
 800d50a:	dc35      	bgt.n	800d578 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d50c:	4818      	ldr	r0, [pc, #96]	; (800d570 <tcp_receive+0xd00>)
 800d50e:	f7fd fb5b 	bl	800abc8 <tcp_seg_copy>
 800d512:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800d514:	69fb      	ldr	r3, [r7, #28]
 800d516:	2b00      	cmp	r3, #0
 800d518:	f000 8109 	beq.w	800d72e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d51c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d51e:	68db      	ldr	r3, [r3, #12]
 800d520:	685b      	ldr	r3, [r3, #4]
 800d522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d524:	8912      	ldrh	r2, [r2, #8]
 800d526:	441a      	add	r2, r3
 800d528:	4b12      	ldr	r3, [pc, #72]	; (800d574 <tcp_receive+0xd04>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	1ad3      	subs	r3, r2, r3
 800d52e:	2b00      	cmp	r3, #0
 800d530:	dd12      	ble.n	800d558 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d532:	4b10      	ldr	r3, [pc, #64]	; (800d574 <tcp_receive+0xd04>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	b29a      	uxth	r2, r3
 800d538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d53a:	68db      	ldr	r3, [r3, #12]
 800d53c:	685b      	ldr	r3, [r3, #4]
 800d53e:	b29b      	uxth	r3, r3
 800d540:	1ad3      	subs	r3, r2, r3
 800d542:	b29a      	uxth	r2, r3
 800d544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d546:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d54a:	685a      	ldr	r2, [r3, #4]
 800d54c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d54e:	891b      	ldrh	r3, [r3, #8]
 800d550:	4619      	mov	r1, r3
 800d552:	4610      	mov	r0, r2
 800d554:	f7fb ff16 	bl	8009384 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d55a:	69fa      	ldr	r2, [r7, #28]
 800d55c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d55e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d560:	69f8      	ldr	r0, [r7, #28]
 800d562:	f7ff f881 	bl	800c668 <tcp_oos_insert_segment>
                  }
                  break;
 800d566:	e0e2      	b.n	800d72e <tcp_receive+0xebe>
 800d568:	2000af08 	.word	0x2000af08
 800d56c:	2000af05 	.word	0x2000af05
 800d570:	2000aed8 	.word	0x2000aed8
 800d574:	2000aef8 	.word	0x2000aef8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800d578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d57a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	2b00      	cmp	r3, #0
 800d582:	f040 80c6 	bne.w	800d712 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d586:	4b80      	ldr	r3, [pc, #512]	; (800d788 <tcp_receive+0xf18>)
 800d588:	681a      	ldr	r2, [r3, #0]
 800d58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d58c:	68db      	ldr	r3, [r3, #12]
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d592:	2b00      	cmp	r3, #0
 800d594:	f340 80bd 	ble.w	800d712 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d59a:	68db      	ldr	r3, [r3, #12]
 800d59c:	899b      	ldrh	r3, [r3, #12]
 800d59e:	b29b      	uxth	r3, r3
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f7fa fd0b 	bl	8007fbc <lwip_htons>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	f003 0301 	and.w	r3, r3, #1
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	f040 80bf 	bne.w	800d732 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d5b4:	4875      	ldr	r0, [pc, #468]	; (800d78c <tcp_receive+0xf1c>)
 800d5b6:	f7fd fb07 	bl	800abc8 <tcp_seg_copy>
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5be:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	f000 80b6 	beq.w	800d736 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5cc:	68db      	ldr	r3, [r3, #12]
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5d2:	8912      	ldrh	r2, [r2, #8]
 800d5d4:	441a      	add	r2, r3
 800d5d6:	4b6c      	ldr	r3, [pc, #432]	; (800d788 <tcp_receive+0xf18>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	1ad3      	subs	r3, r2, r3
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	dd12      	ble.n	800d606 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d5e0:	4b69      	ldr	r3, [pc, #420]	; (800d788 <tcp_receive+0xf18>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	b29a      	uxth	r2, r3
 800d5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e8:	68db      	ldr	r3, [r3, #12]
 800d5ea:	685b      	ldr	r3, [r3, #4]
 800d5ec:	b29b      	uxth	r3, r3
 800d5ee:	1ad3      	subs	r3, r2, r3
 800d5f0:	b29a      	uxth	r2, r3
 800d5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f8:	685a      	ldr	r2, [r3, #4]
 800d5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5fc:	891b      	ldrh	r3, [r3, #8]
 800d5fe:	4619      	mov	r1, r3
 800d600:	4610      	mov	r0, r2
 800d602:	f7fb febf 	bl	8009384 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d606:	4b62      	ldr	r3, [pc, #392]	; (800d790 <tcp_receive+0xf20>)
 800d608:	881b      	ldrh	r3, [r3, #0]
 800d60a:	461a      	mov	r2, r3
 800d60c:	4b5e      	ldr	r3, [pc, #376]	; (800d788 <tcp_receive+0xf18>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	441a      	add	r2, r3
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d616:	6879      	ldr	r1, [r7, #4]
 800d618:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d61a:	440b      	add	r3, r1
 800d61c:	1ad3      	subs	r3, r2, r3
 800d61e:	2b00      	cmp	r3, #0
 800d620:	f340 8089 	ble.w	800d736 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	899b      	ldrh	r3, [r3, #12]
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	4618      	mov	r0, r3
 800d630:	f7fa fcc4 	bl	8007fbc <lwip_htons>
 800d634:	4603      	mov	r3, r0
 800d636:	b2db      	uxtb	r3, r3
 800d638:	f003 0301 	and.w	r3, r3, #1
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d022      	beq.n	800d686 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	68db      	ldr	r3, [r3, #12]
 800d646:	899b      	ldrh	r3, [r3, #12]
 800d648:	b29b      	uxth	r3, r3
 800d64a:	b21b      	sxth	r3, r3
 800d64c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d650:	b21c      	sxth	r4, r3
 800d652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	68db      	ldr	r3, [r3, #12]
 800d658:	899b      	ldrh	r3, [r3, #12]
 800d65a:	b29b      	uxth	r3, r3
 800d65c:	4618      	mov	r0, r3
 800d65e:	f7fa fcad 	bl	8007fbc <lwip_htons>
 800d662:	4603      	mov	r3, r0
 800d664:	b2db      	uxtb	r3, r3
 800d666:	b29b      	uxth	r3, r3
 800d668:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d66c:	b29b      	uxth	r3, r3
 800d66e:	4618      	mov	r0, r3
 800d670:	f7fa fca4 	bl	8007fbc <lwip_htons>
 800d674:	4603      	mov	r3, r0
 800d676:	b21b      	sxth	r3, r3
 800d678:	4323      	orrs	r3, r4
 800d67a:	b21a      	sxth	r2, r3
 800d67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	68db      	ldr	r3, [r3, #12]
 800d682:	b292      	uxth	r2, r2
 800d684:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d68a:	b29a      	uxth	r2, r3
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d690:	4413      	add	r3, r2
 800d692:	b299      	uxth	r1, r3
 800d694:	4b3c      	ldr	r3, [pc, #240]	; (800d788 <tcp_receive+0xf18>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	b29a      	uxth	r2, r3
 800d69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	1a8a      	subs	r2, r1, r2
 800d6a0:	b292      	uxth	r2, r2
 800d6a2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	685a      	ldr	r2, [r3, #4]
 800d6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	891b      	ldrh	r3, [r3, #8]
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	4610      	mov	r0, r2
 800d6b4:	f7fb fe66 	bl	8009384 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	891c      	ldrh	r4, [r3, #8]
 800d6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	68db      	ldr	r3, [r3, #12]
 800d6c4:	899b      	ldrh	r3, [r3, #12]
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7fa fc77 	bl	8007fbc <lwip_htons>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	f003 0303 	and.w	r3, r3, #3
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d001      	beq.n	800d6de <tcp_receive+0xe6e>
 800d6da:	2301      	movs	r3, #1
 800d6dc:	e000      	b.n	800d6e0 <tcp_receive+0xe70>
 800d6de:	2300      	movs	r3, #0
 800d6e0:	4423      	add	r3, r4
 800d6e2:	b29a      	uxth	r2, r3
 800d6e4:	4b2a      	ldr	r3, [pc, #168]	; (800d790 <tcp_receive+0xf20>)
 800d6e6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d6e8:	4b29      	ldr	r3, [pc, #164]	; (800d790 <tcp_receive+0xf20>)
 800d6ea:	881b      	ldrh	r3, [r3, #0]
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	4b26      	ldr	r3, [pc, #152]	; (800d788 <tcp_receive+0xf18>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	441a      	add	r2, r3
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f8:	6879      	ldr	r1, [r7, #4]
 800d6fa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d6fc:	440b      	add	r3, r1
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d019      	beq.n	800d736 <tcp_receive+0xec6>
 800d702:	4b24      	ldr	r3, [pc, #144]	; (800d794 <tcp_receive+0xf24>)
 800d704:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800d708:	4923      	ldr	r1, [pc, #140]	; (800d798 <tcp_receive+0xf28>)
 800d70a:	4824      	ldr	r0, [pc, #144]	; (800d79c <tcp_receive+0xf2c>)
 800d70c:	f006 fba0 	bl	8013e50 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d710:	e011      	b.n	800d736 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	63bb      	str	r3, [r7, #56]	; 0x38
 800d718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	f47f aea4 	bne.w	800d468 <tcp_receive+0xbf8>
 800d720:	e00a      	b.n	800d738 <tcp_receive+0xec8>
                break;
 800d722:	bf00      	nop
 800d724:	e008      	b.n	800d738 <tcp_receive+0xec8>
                break;
 800d726:	bf00      	nop
 800d728:	e006      	b.n	800d738 <tcp_receive+0xec8>
                  break;
 800d72a:	bf00      	nop
 800d72c:	e004      	b.n	800d738 <tcp_receive+0xec8>
                  break;
 800d72e:	bf00      	nop
 800d730:	e002      	b.n	800d738 <tcp_receive+0xec8>
                  break;
 800d732:	bf00      	nop
 800d734:	e000      	b.n	800d738 <tcp_receive+0xec8>
                break;
 800d736:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f001 fa33 	bl	800eba4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800d73e:	e003      	b.n	800d748 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f001 fa2f 	bl	800eba4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d746:	e01a      	b.n	800d77e <tcp_receive+0xf0e>
 800d748:	e019      	b.n	800d77e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d74a:	4b0f      	ldr	r3, [pc, #60]	; (800d788 <tcp_receive+0xf18>)
 800d74c:	681a      	ldr	r2, [r3, #0]
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d752:	1ad3      	subs	r3, r2, r3
 800d754:	2b00      	cmp	r3, #0
 800d756:	db0a      	blt.n	800d76e <tcp_receive+0xefe>
 800d758:	4b0b      	ldr	r3, [pc, #44]	; (800d788 <tcp_receive+0xf18>)
 800d75a:	681a      	ldr	r2, [r3, #0]
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d760:	6879      	ldr	r1, [r7, #4]
 800d762:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d764:	440b      	add	r3, r1
 800d766:	1ad3      	subs	r3, r2, r3
 800d768:	3301      	adds	r3, #1
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	dd07      	ble.n	800d77e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	8b5b      	ldrh	r3, [r3, #26]
 800d772:	f043 0302 	orr.w	r3, r3, #2
 800d776:	b29a      	uxth	r2, r3
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800d77c:	e7ff      	b.n	800d77e <tcp_receive+0xf0e>
 800d77e:	bf00      	nop
 800d780:	3750      	adds	r7, #80	; 0x50
 800d782:	46bd      	mov	sp, r7
 800d784:	bdb0      	pop	{r4, r5, r7, pc}
 800d786:	bf00      	nop
 800d788:	2000aef8 	.word	0x2000aef8
 800d78c:	2000aed8 	.word	0x2000aed8
 800d790:	2000af02 	.word	0x2000af02
 800d794:	0801662c 	.word	0x0801662c
 800d798:	080169d4 	.word	0x080169d4
 800d79c:	08016678 	.word	0x08016678

0800d7a0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800d7a6:	4b15      	ldr	r3, [pc, #84]	; (800d7fc <tcp_get_next_optbyte+0x5c>)
 800d7a8:	881b      	ldrh	r3, [r3, #0]
 800d7aa:	1c5a      	adds	r2, r3, #1
 800d7ac:	b291      	uxth	r1, r2
 800d7ae:	4a13      	ldr	r2, [pc, #76]	; (800d7fc <tcp_get_next_optbyte+0x5c>)
 800d7b0:	8011      	strh	r1, [r2, #0]
 800d7b2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800d7b4:	4b12      	ldr	r3, [pc, #72]	; (800d800 <tcp_get_next_optbyte+0x60>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d004      	beq.n	800d7c6 <tcp_get_next_optbyte+0x26>
 800d7bc:	4b11      	ldr	r3, [pc, #68]	; (800d804 <tcp_get_next_optbyte+0x64>)
 800d7be:	881b      	ldrh	r3, [r3, #0]
 800d7c0:	88fa      	ldrh	r2, [r7, #6]
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d208      	bcs.n	800d7d8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d7c6:	4b10      	ldr	r3, [pc, #64]	; (800d808 <tcp_get_next_optbyte+0x68>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	3314      	adds	r3, #20
 800d7cc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800d7ce:	88fb      	ldrh	r3, [r7, #6]
 800d7d0:	683a      	ldr	r2, [r7, #0]
 800d7d2:	4413      	add	r3, r2
 800d7d4:	781b      	ldrb	r3, [r3, #0]
 800d7d6:	e00b      	b.n	800d7f0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d7d8:	88fb      	ldrh	r3, [r7, #6]
 800d7da:	b2da      	uxtb	r2, r3
 800d7dc:	4b09      	ldr	r3, [pc, #36]	; (800d804 <tcp_get_next_optbyte+0x64>)
 800d7de:	881b      	ldrh	r3, [r3, #0]
 800d7e0:	b2db      	uxtb	r3, r3
 800d7e2:	1ad3      	subs	r3, r2, r3
 800d7e4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d7e6:	4b06      	ldr	r3, [pc, #24]	; (800d800 <tcp_get_next_optbyte+0x60>)
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	797b      	ldrb	r3, [r7, #5]
 800d7ec:	4413      	add	r3, r2
 800d7ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	370c      	adds	r7, #12
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr
 800d7fc:	2000aef4 	.word	0x2000aef4
 800d800:	2000aef0 	.word	0x2000aef0
 800d804:	2000aeee 	.word	0x2000aeee
 800d808:	2000aee8 	.word	0x2000aee8

0800d80c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b084      	sub	sp, #16
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d106      	bne.n	800d828 <tcp_parseopt+0x1c>
 800d81a:	4b32      	ldr	r3, [pc, #200]	; (800d8e4 <tcp_parseopt+0xd8>)
 800d81c:	f240 727d 	movw	r2, #1917	; 0x77d
 800d820:	4931      	ldr	r1, [pc, #196]	; (800d8e8 <tcp_parseopt+0xdc>)
 800d822:	4832      	ldr	r0, [pc, #200]	; (800d8ec <tcp_parseopt+0xe0>)
 800d824:	f006 fb14 	bl	8013e50 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d828:	4b31      	ldr	r3, [pc, #196]	; (800d8f0 <tcp_parseopt+0xe4>)
 800d82a:	881b      	ldrh	r3, [r3, #0]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d055      	beq.n	800d8dc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d830:	4b30      	ldr	r3, [pc, #192]	; (800d8f4 <tcp_parseopt+0xe8>)
 800d832:	2200      	movs	r2, #0
 800d834:	801a      	strh	r2, [r3, #0]
 800d836:	e045      	b.n	800d8c4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800d838:	f7ff ffb2 	bl	800d7a0 <tcp_get_next_optbyte>
 800d83c:	4603      	mov	r3, r0
 800d83e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d840:	7bfb      	ldrb	r3, [r7, #15]
 800d842:	2b02      	cmp	r3, #2
 800d844:	d006      	beq.n	800d854 <tcp_parseopt+0x48>
 800d846:	2b02      	cmp	r3, #2
 800d848:	dc2b      	bgt.n	800d8a2 <tcp_parseopt+0x96>
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d041      	beq.n	800d8d2 <tcp_parseopt+0xc6>
 800d84e:	2b01      	cmp	r3, #1
 800d850:	d127      	bne.n	800d8a2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800d852:	e037      	b.n	800d8c4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d854:	f7ff ffa4 	bl	800d7a0 <tcp_get_next_optbyte>
 800d858:	4603      	mov	r3, r0
 800d85a:	2b04      	cmp	r3, #4
 800d85c:	d13b      	bne.n	800d8d6 <tcp_parseopt+0xca>
 800d85e:	4b25      	ldr	r3, [pc, #148]	; (800d8f4 <tcp_parseopt+0xe8>)
 800d860:	881b      	ldrh	r3, [r3, #0]
 800d862:	3301      	adds	r3, #1
 800d864:	4a22      	ldr	r2, [pc, #136]	; (800d8f0 <tcp_parseopt+0xe4>)
 800d866:	8812      	ldrh	r2, [r2, #0]
 800d868:	4293      	cmp	r3, r2
 800d86a:	da34      	bge.n	800d8d6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d86c:	f7ff ff98 	bl	800d7a0 <tcp_get_next_optbyte>
 800d870:	4603      	mov	r3, r0
 800d872:	b29b      	uxth	r3, r3
 800d874:	021b      	lsls	r3, r3, #8
 800d876:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800d878:	f7ff ff92 	bl	800d7a0 <tcp_get_next_optbyte>
 800d87c:	4603      	mov	r3, r0
 800d87e:	b29a      	uxth	r2, r3
 800d880:	89bb      	ldrh	r3, [r7, #12]
 800d882:	4313      	orrs	r3, r2
 800d884:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d886:	89bb      	ldrh	r3, [r7, #12]
 800d888:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d88c:	d804      	bhi.n	800d898 <tcp_parseopt+0x8c>
 800d88e:	89bb      	ldrh	r3, [r7, #12]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d001      	beq.n	800d898 <tcp_parseopt+0x8c>
 800d894:	89ba      	ldrh	r2, [r7, #12]
 800d896:	e001      	b.n	800d89c <tcp_parseopt+0x90>
 800d898:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800d8a0:	e010      	b.n	800d8c4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d8a2:	f7ff ff7d 	bl	800d7a0 <tcp_get_next_optbyte>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800d8aa:	7afb      	ldrb	r3, [r7, #11]
 800d8ac:	2b01      	cmp	r3, #1
 800d8ae:	d914      	bls.n	800d8da <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d8b0:	7afb      	ldrb	r3, [r7, #11]
 800d8b2:	b29a      	uxth	r2, r3
 800d8b4:	4b0f      	ldr	r3, [pc, #60]	; (800d8f4 <tcp_parseopt+0xe8>)
 800d8b6:	881b      	ldrh	r3, [r3, #0]
 800d8b8:	4413      	add	r3, r2
 800d8ba:	b29b      	uxth	r3, r3
 800d8bc:	3b02      	subs	r3, #2
 800d8be:	b29a      	uxth	r2, r3
 800d8c0:	4b0c      	ldr	r3, [pc, #48]	; (800d8f4 <tcp_parseopt+0xe8>)
 800d8c2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d8c4:	4b0b      	ldr	r3, [pc, #44]	; (800d8f4 <tcp_parseopt+0xe8>)
 800d8c6:	881a      	ldrh	r2, [r3, #0]
 800d8c8:	4b09      	ldr	r3, [pc, #36]	; (800d8f0 <tcp_parseopt+0xe4>)
 800d8ca:	881b      	ldrh	r3, [r3, #0]
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d3b3      	bcc.n	800d838 <tcp_parseopt+0x2c>
 800d8d0:	e004      	b.n	800d8dc <tcp_parseopt+0xd0>
          return;
 800d8d2:	bf00      	nop
 800d8d4:	e002      	b.n	800d8dc <tcp_parseopt+0xd0>
            return;
 800d8d6:	bf00      	nop
 800d8d8:	e000      	b.n	800d8dc <tcp_parseopt+0xd0>
            return;
 800d8da:	bf00      	nop
      }
    }
  }
}
 800d8dc:	3710      	adds	r7, #16
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	0801662c 	.word	0x0801662c
 800d8e8:	08016a90 	.word	0x08016a90
 800d8ec:	08016678 	.word	0x08016678
 800d8f0:	2000aeec 	.word	0x2000aeec
 800d8f4:	2000aef4 	.word	0x2000aef4

0800d8f8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d8fc:	4b05      	ldr	r3, [pc, #20]	; (800d914 <tcp_trigger_input_pcb_close+0x1c>)
 800d8fe:	781b      	ldrb	r3, [r3, #0]
 800d900:	f043 0310 	orr.w	r3, r3, #16
 800d904:	b2da      	uxtb	r2, r3
 800d906:	4b03      	ldr	r3, [pc, #12]	; (800d914 <tcp_trigger_input_pcb_close+0x1c>)
 800d908:	701a      	strb	r2, [r3, #0]
}
 800d90a:	bf00      	nop
 800d90c:	46bd      	mov	sp, r7
 800d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d912:	4770      	bx	lr
 800d914:	2000af05 	.word	0x2000af05

0800d918 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b084      	sub	sp, #16
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	60f8      	str	r0, [r7, #12]
 800d920:	60b9      	str	r1, [r7, #8]
 800d922:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00a      	beq.n	800d940 <tcp_route+0x28>
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	7a1b      	ldrb	r3, [r3, #8]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d006      	beq.n	800d940 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	7a1b      	ldrb	r3, [r3, #8]
 800d936:	4618      	mov	r0, r3
 800d938:	f7fb fb4a 	bl	8008fd0 <netif_get_by_index>
 800d93c:	4603      	mov	r3, r0
 800d93e:	e003      	b.n	800d948 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f005 f817 	bl	8012974 <ip4_route>
 800d946:	4603      	mov	r3, r0
  }
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3710      	adds	r7, #16
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d950:	b590      	push	{r4, r7, lr}
 800d952:	b087      	sub	sp, #28
 800d954:	af00      	add	r7, sp, #0
 800d956:	60f8      	str	r0, [r7, #12]
 800d958:	60b9      	str	r1, [r7, #8]
 800d95a:	603b      	str	r3, [r7, #0]
 800d95c:	4613      	mov	r3, r2
 800d95e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d105      	bne.n	800d972 <tcp_create_segment+0x22>
 800d966:	4b44      	ldr	r3, [pc, #272]	; (800da78 <tcp_create_segment+0x128>)
 800d968:	22a3      	movs	r2, #163	; 0xa3
 800d96a:	4944      	ldr	r1, [pc, #272]	; (800da7c <tcp_create_segment+0x12c>)
 800d96c:	4844      	ldr	r0, [pc, #272]	; (800da80 <tcp_create_segment+0x130>)
 800d96e:	f006 fa6f 	bl	8013e50 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d105      	bne.n	800d984 <tcp_create_segment+0x34>
 800d978:	4b3f      	ldr	r3, [pc, #252]	; (800da78 <tcp_create_segment+0x128>)
 800d97a:	22a4      	movs	r2, #164	; 0xa4
 800d97c:	4941      	ldr	r1, [pc, #260]	; (800da84 <tcp_create_segment+0x134>)
 800d97e:	4840      	ldr	r0, [pc, #256]	; (800da80 <tcp_create_segment+0x130>)
 800d980:	f006 fa66 	bl	8013e50 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d984:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d988:	009b      	lsls	r3, r3, #2
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	f003 0304 	and.w	r3, r3, #4
 800d990:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d992:	2003      	movs	r0, #3
 800d994:	f7fa ff8a 	bl	80088ac <memp_malloc>
 800d998:	6138      	str	r0, [r7, #16]
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d104      	bne.n	800d9aa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d9a0:	68b8      	ldr	r0, [r7, #8]
 800d9a2:	f7fb fe75 	bl	8009690 <pbuf_free>
    return NULL;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	e061      	b.n	800da6e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d9b0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	68ba      	ldr	r2, [r7, #8]
 800d9bc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	891a      	ldrh	r2, [r3, #8]
 800d9c2:	7dfb      	ldrb	r3, [r7, #23]
 800d9c4:	b29b      	uxth	r3, r3
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	d205      	bcs.n	800d9d6 <tcp_create_segment+0x86>
 800d9ca:	4b2b      	ldr	r3, [pc, #172]	; (800da78 <tcp_create_segment+0x128>)
 800d9cc:	22b0      	movs	r2, #176	; 0xb0
 800d9ce:	492e      	ldr	r1, [pc, #184]	; (800da88 <tcp_create_segment+0x138>)
 800d9d0:	482b      	ldr	r0, [pc, #172]	; (800da80 <tcp_create_segment+0x130>)
 800d9d2:	f006 fa3d 	bl	8013e50 <iprintf>
  seg->len = p->tot_len - optlen;
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	891a      	ldrh	r2, [r3, #8]
 800d9da:	7dfb      	ldrb	r3, [r7, #23]
 800d9dc:	b29b      	uxth	r3, r3
 800d9de:	1ad3      	subs	r3, r2, r3
 800d9e0:	b29a      	uxth	r2, r3
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d9e6:	2114      	movs	r1, #20
 800d9e8:	68b8      	ldr	r0, [r7, #8]
 800d9ea:	f7fb fdbb 	bl	8009564 <pbuf_add_header>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d004      	beq.n	800d9fe <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d9f4:	6938      	ldr	r0, [r7, #16]
 800d9f6:	f7fd f8ce 	bl	800ab96 <tcp_seg_free>
    return NULL;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	e037      	b.n	800da6e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	685a      	ldr	r2, [r3, #4]
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	8ada      	ldrh	r2, [r3, #22]
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	68dc      	ldr	r4, [r3, #12]
 800da10:	4610      	mov	r0, r2
 800da12:	f7fa fad3 	bl	8007fbc <lwip_htons>
 800da16:	4603      	mov	r3, r0
 800da18:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	8b1a      	ldrh	r2, [r3, #24]
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	68dc      	ldr	r4, [r3, #12]
 800da22:	4610      	mov	r0, r2
 800da24:	f7fa faca 	bl	8007fbc <lwip_htons>
 800da28:	4603      	mov	r3, r0
 800da2a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	68dc      	ldr	r4, [r3, #12]
 800da30:	6838      	ldr	r0, [r7, #0]
 800da32:	f7fa fad8 	bl	8007fe6 <lwip_htonl>
 800da36:	4603      	mov	r3, r0
 800da38:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800da3a:	7dfb      	ldrb	r3, [r7, #23]
 800da3c:	089b      	lsrs	r3, r3, #2
 800da3e:	b2db      	uxtb	r3, r3
 800da40:	b29b      	uxth	r3, r3
 800da42:	3305      	adds	r3, #5
 800da44:	b29b      	uxth	r3, r3
 800da46:	031b      	lsls	r3, r3, #12
 800da48:	b29a      	uxth	r2, r3
 800da4a:	79fb      	ldrb	r3, [r7, #7]
 800da4c:	b29b      	uxth	r3, r3
 800da4e:	4313      	orrs	r3, r2
 800da50:	b29a      	uxth	r2, r3
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	68dc      	ldr	r4, [r3, #12]
 800da56:	4610      	mov	r0, r2
 800da58:	f7fa fab0 	bl	8007fbc <lwip_htons>
 800da5c:	4603      	mov	r3, r0
 800da5e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	68db      	ldr	r3, [r3, #12]
 800da64:	2200      	movs	r2, #0
 800da66:	749a      	strb	r2, [r3, #18]
 800da68:	2200      	movs	r2, #0
 800da6a:	74da      	strb	r2, [r3, #19]
  return seg;
 800da6c:	693b      	ldr	r3, [r7, #16]
}
 800da6e:	4618      	mov	r0, r3
 800da70:	371c      	adds	r7, #28
 800da72:	46bd      	mov	sp, r7
 800da74:	bd90      	pop	{r4, r7, pc}
 800da76:	bf00      	nop
 800da78:	08016aac 	.word	0x08016aac
 800da7c:	08016ae0 	.word	0x08016ae0
 800da80:	08016b00 	.word	0x08016b00
 800da84:	08016b28 	.word	0x08016b28
 800da88:	08016b4c 	.word	0x08016b4c

0800da8c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800da8c:	b590      	push	{r4, r7, lr}
 800da8e:	b08b      	sub	sp, #44	; 0x2c
 800da90:	af02      	add	r7, sp, #8
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	460b      	mov	r3, r1
 800da96:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800da98:	2300      	movs	r3, #0
 800da9a:	61fb      	str	r3, [r7, #28]
 800da9c:	2300      	movs	r3, #0
 800da9e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800daa0:	2300      	movs	r3, #0
 800daa2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d106      	bne.n	800dab8 <tcp_split_unsent_seg+0x2c>
 800daaa:	4b95      	ldr	r3, [pc, #596]	; (800dd00 <tcp_split_unsent_seg+0x274>)
 800daac:	f240 324b 	movw	r2, #843	; 0x34b
 800dab0:	4994      	ldr	r1, [pc, #592]	; (800dd04 <tcp_split_unsent_seg+0x278>)
 800dab2:	4895      	ldr	r0, [pc, #596]	; (800dd08 <tcp_split_unsent_seg+0x27c>)
 800dab4:	f006 f9cc 	bl	8013e50 <iprintf>

  useg = pcb->unsent;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dabc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d102      	bne.n	800daca <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800dac4:	f04f 33ff 	mov.w	r3, #4294967295
 800dac8:	e116      	b.n	800dcf8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800daca:	887b      	ldrh	r3, [r7, #2]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d109      	bne.n	800dae4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800dad0:	4b8b      	ldr	r3, [pc, #556]	; (800dd00 <tcp_split_unsent_seg+0x274>)
 800dad2:	f240 3253 	movw	r2, #851	; 0x353
 800dad6:	498d      	ldr	r1, [pc, #564]	; (800dd0c <tcp_split_unsent_seg+0x280>)
 800dad8:	488b      	ldr	r0, [pc, #556]	; (800dd08 <tcp_split_unsent_seg+0x27c>)
 800dada:	f006 f9b9 	bl	8013e50 <iprintf>
    return ERR_VAL;
 800dade:	f06f 0305 	mvn.w	r3, #5
 800dae2:	e109      	b.n	800dcf8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	891b      	ldrh	r3, [r3, #8]
 800dae8:	887a      	ldrh	r2, [r7, #2]
 800daea:	429a      	cmp	r2, r3
 800daec:	d301      	bcc.n	800daf2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800daee:	2300      	movs	r3, #0
 800daf0:	e102      	b.n	800dcf8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800daf6:	887a      	ldrh	r2, [r7, #2]
 800daf8:	429a      	cmp	r2, r3
 800dafa:	d906      	bls.n	800db0a <tcp_split_unsent_seg+0x7e>
 800dafc:	4b80      	ldr	r3, [pc, #512]	; (800dd00 <tcp_split_unsent_seg+0x274>)
 800dafe:	f240 325b 	movw	r2, #859	; 0x35b
 800db02:	4983      	ldr	r1, [pc, #524]	; (800dd10 <tcp_split_unsent_seg+0x284>)
 800db04:	4880      	ldr	r0, [pc, #512]	; (800dd08 <tcp_split_unsent_seg+0x27c>)
 800db06:	f006 f9a3 	bl	8013e50 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	891b      	ldrh	r3, [r3, #8]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d106      	bne.n	800db20 <tcp_split_unsent_seg+0x94>
 800db12:	4b7b      	ldr	r3, [pc, #492]	; (800dd00 <tcp_split_unsent_seg+0x274>)
 800db14:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800db18:	497e      	ldr	r1, [pc, #504]	; (800dd14 <tcp_split_unsent_seg+0x288>)
 800db1a:	487b      	ldr	r0, [pc, #492]	; (800dd08 <tcp_split_unsent_seg+0x27c>)
 800db1c:	f006 f998 	bl	8013e50 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	7a9b      	ldrb	r3, [r3, #10]
 800db24:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800db26:	7bfb      	ldrb	r3, [r7, #15]
 800db28:	009b      	lsls	r3, r3, #2
 800db2a:	b2db      	uxtb	r3, r3
 800db2c:	f003 0304 	and.w	r3, r3, #4
 800db30:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	891a      	ldrh	r2, [r3, #8]
 800db36:	887b      	ldrh	r3, [r7, #2]
 800db38:	1ad3      	subs	r3, r2, r3
 800db3a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800db3c:	7bbb      	ldrb	r3, [r7, #14]
 800db3e:	b29a      	uxth	r2, r3
 800db40:	89bb      	ldrh	r3, [r7, #12]
 800db42:	4413      	add	r3, r2
 800db44:	b29b      	uxth	r3, r3
 800db46:	f44f 7220 	mov.w	r2, #640	; 0x280
 800db4a:	4619      	mov	r1, r3
 800db4c:	2036      	movs	r0, #54	; 0x36
 800db4e:	f7fb fabb 	bl	80090c8 <pbuf_alloc>
 800db52:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	2b00      	cmp	r3, #0
 800db58:	f000 80b7 	beq.w	800dcca <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	685b      	ldr	r3, [r3, #4]
 800db60:	891a      	ldrh	r2, [r3, #8]
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	891b      	ldrh	r3, [r3, #8]
 800db66:	1ad3      	subs	r3, r2, r3
 800db68:	b29a      	uxth	r2, r3
 800db6a:	887b      	ldrh	r3, [r7, #2]
 800db6c:	4413      	add	r3, r2
 800db6e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	6858      	ldr	r0, [r3, #4]
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	685a      	ldr	r2, [r3, #4]
 800db78:	7bbb      	ldrb	r3, [r7, #14]
 800db7a:	18d1      	adds	r1, r2, r3
 800db7c:	897b      	ldrh	r3, [r7, #10]
 800db7e:	89ba      	ldrh	r2, [r7, #12]
 800db80:	f7fb ff80 	bl	8009a84 <pbuf_copy_partial>
 800db84:	4603      	mov	r3, r0
 800db86:	461a      	mov	r2, r3
 800db88:	89bb      	ldrh	r3, [r7, #12]
 800db8a:	4293      	cmp	r3, r2
 800db8c:	f040 809f 	bne.w	800dcce <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	68db      	ldr	r3, [r3, #12]
 800db94:	899b      	ldrh	r3, [r3, #12]
 800db96:	b29b      	uxth	r3, r3
 800db98:	4618      	mov	r0, r3
 800db9a:	f7fa fa0f 	bl	8007fbc <lwip_htons>
 800db9e:	4603      	mov	r3, r0
 800dba0:	b2db      	uxtb	r3, r3
 800dba2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dba6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800dba8:	2300      	movs	r3, #0
 800dbaa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800dbac:	7efb      	ldrb	r3, [r7, #27]
 800dbae:	f003 0308 	and.w	r3, r3, #8
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d007      	beq.n	800dbc6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800dbb6:	7efb      	ldrb	r3, [r7, #27]
 800dbb8:	f023 0308 	bic.w	r3, r3, #8
 800dbbc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800dbbe:	7ebb      	ldrb	r3, [r7, #26]
 800dbc0:	f043 0308 	orr.w	r3, r3, #8
 800dbc4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800dbc6:	7efb      	ldrb	r3, [r7, #27]
 800dbc8:	f003 0301 	and.w	r3, r3, #1
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d007      	beq.n	800dbe0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800dbd0:	7efb      	ldrb	r3, [r7, #27]
 800dbd2:	f023 0301 	bic.w	r3, r3, #1
 800dbd6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800dbd8:	7ebb      	ldrb	r3, [r7, #26]
 800dbda:	f043 0301 	orr.w	r3, r3, #1
 800dbde:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	68db      	ldr	r3, [r3, #12]
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f7fa f9fd 	bl	8007fe6 <lwip_htonl>
 800dbec:	4602      	mov	r2, r0
 800dbee:	887b      	ldrh	r3, [r7, #2]
 800dbf0:	18d1      	adds	r1, r2, r3
 800dbf2:	7eba      	ldrb	r2, [r7, #26]
 800dbf4:	7bfb      	ldrb	r3, [r7, #15]
 800dbf6:	9300      	str	r3, [sp, #0]
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	6939      	ldr	r1, [r7, #16]
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f7ff fea7 	bl	800d950 <tcp_create_segment>
 800dc02:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d063      	beq.n	800dcd2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	685b      	ldr	r3, [r3, #4]
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7fb fdc6 	bl	80097a0 <pbuf_clen>
 800dc14:	4603      	mov	r3, r0
 800dc16:	461a      	mov	r2, r3
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc1e:	1a9b      	subs	r3, r3, r2
 800dc20:	b29a      	uxth	r2, r3
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	6858      	ldr	r0, [r3, #4]
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	685b      	ldr	r3, [r3, #4]
 800dc30:	891a      	ldrh	r2, [r3, #8]
 800dc32:	89bb      	ldrh	r3, [r7, #12]
 800dc34:	1ad3      	subs	r3, r2, r3
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	4619      	mov	r1, r3
 800dc3a:	f7fb fba3 	bl	8009384 <pbuf_realloc>
  useg->len -= remainder;
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	891a      	ldrh	r2, [r3, #8]
 800dc42:	89bb      	ldrh	r3, [r7, #12]
 800dc44:	1ad3      	subs	r3, r2, r3
 800dc46:	b29a      	uxth	r2, r3
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	68db      	ldr	r3, [r3, #12]
 800dc50:	899b      	ldrh	r3, [r3, #12]
 800dc52:	b29c      	uxth	r4, r3
 800dc54:	7efb      	ldrb	r3, [r7, #27]
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7fa f9af 	bl	8007fbc <lwip_htons>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	461a      	mov	r2, r3
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	68db      	ldr	r3, [r3, #12]
 800dc66:	4322      	orrs	r2, r4
 800dc68:	b292      	uxth	r2, r2
 800dc6a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7fb fd95 	bl	80097a0 <pbuf_clen>
 800dc76:	4603      	mov	r3, r0
 800dc78:	461a      	mov	r2, r3
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc80:	4413      	add	r3, r2
 800dc82:	b29a      	uxth	r2, r3
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dc8a:	69fb      	ldr	r3, [r7, #28]
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f7fb fd86 	bl	80097a0 <pbuf_clen>
 800dc94:	4603      	mov	r3, r0
 800dc96:	461a      	mov	r2, r3
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc9e:	4413      	add	r3, r2
 800dca0:	b29a      	uxth	r2, r3
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	681a      	ldr	r2, [r3, #0]
 800dcac:	69fb      	ldr	r3, [r7, #28]
 800dcae:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	69fa      	ldr	r2, [r7, #28]
 800dcb4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800dcb6:	69fb      	ldr	r3, [r7, #28]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d103      	bne.n	800dcc6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	e016      	b.n	800dcf8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800dcca:	bf00      	nop
 800dccc:	e002      	b.n	800dcd4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800dcce:	bf00      	nop
 800dcd0:	e000      	b.n	800dcd4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800dcd2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d006      	beq.n	800dce8 <tcp_split_unsent_seg+0x25c>
 800dcda:	4b09      	ldr	r3, [pc, #36]	; (800dd00 <tcp_split_unsent_seg+0x274>)
 800dcdc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800dce0:	490d      	ldr	r1, [pc, #52]	; (800dd18 <tcp_split_unsent_seg+0x28c>)
 800dce2:	4809      	ldr	r0, [pc, #36]	; (800dd08 <tcp_split_unsent_seg+0x27c>)
 800dce4:	f006 f8b4 	bl	8013e50 <iprintf>
  if (p != NULL) {
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d002      	beq.n	800dcf4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800dcee:	6938      	ldr	r0, [r7, #16]
 800dcf0:	f7fb fcce 	bl	8009690 <pbuf_free>
  }

  return ERR_MEM;
 800dcf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3724      	adds	r7, #36	; 0x24
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd90      	pop	{r4, r7, pc}
 800dd00:	08016aac 	.word	0x08016aac
 800dd04:	08016e40 	.word	0x08016e40
 800dd08:	08016b00 	.word	0x08016b00
 800dd0c:	08016e64 	.word	0x08016e64
 800dd10:	08016e88 	.word	0x08016e88
 800dd14:	08016e98 	.word	0x08016e98
 800dd18:	08016ea8 	.word	0x08016ea8

0800dd1c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800dd1c:	b590      	push	{r4, r7, lr}
 800dd1e:	b085      	sub	sp, #20
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d106      	bne.n	800dd38 <tcp_send_fin+0x1c>
 800dd2a:	4b21      	ldr	r3, [pc, #132]	; (800ddb0 <tcp_send_fin+0x94>)
 800dd2c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800dd30:	4920      	ldr	r1, [pc, #128]	; (800ddb4 <tcp_send_fin+0x98>)
 800dd32:	4821      	ldr	r0, [pc, #132]	; (800ddb8 <tcp_send_fin+0x9c>)
 800dd34:	f006 f88c 	bl	8013e50 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d02e      	beq.n	800dd9e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd44:	60fb      	str	r3, [r7, #12]
 800dd46:	e002      	b.n	800dd4e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d1f8      	bne.n	800dd48 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	68db      	ldr	r3, [r3, #12]
 800dd5a:	899b      	ldrh	r3, [r3, #12]
 800dd5c:	b29b      	uxth	r3, r3
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7fa f92c 	bl	8007fbc <lwip_htons>
 800dd64:	4603      	mov	r3, r0
 800dd66:	b2db      	uxtb	r3, r3
 800dd68:	f003 0307 	and.w	r3, r3, #7
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d116      	bne.n	800dd9e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	68db      	ldr	r3, [r3, #12]
 800dd74:	899b      	ldrh	r3, [r3, #12]
 800dd76:	b29c      	uxth	r4, r3
 800dd78:	2001      	movs	r0, #1
 800dd7a:	f7fa f91f 	bl	8007fbc <lwip_htons>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	461a      	mov	r2, r3
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	68db      	ldr	r3, [r3, #12]
 800dd86:	4322      	orrs	r2, r4
 800dd88:	b292      	uxth	r2, r2
 800dd8a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	8b5b      	ldrh	r3, [r3, #26]
 800dd90:	f043 0320 	orr.w	r3, r3, #32
 800dd94:	b29a      	uxth	r2, r3
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	e004      	b.n	800dda8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800dd9e:	2101      	movs	r1, #1
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f000 f80b 	bl	800ddbc <tcp_enqueue_flags>
 800dda6:	4603      	mov	r3, r0
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3714      	adds	r7, #20
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd90      	pop	{r4, r7, pc}
 800ddb0:	08016aac 	.word	0x08016aac
 800ddb4:	08016eb4 	.word	0x08016eb4
 800ddb8:	08016b00 	.word	0x08016b00

0800ddbc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b08a      	sub	sp, #40	; 0x28
 800ddc0:	af02      	add	r7, sp, #8
 800ddc2:	6078      	str	r0, [r7, #4]
 800ddc4:	460b      	mov	r3, r1
 800ddc6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ddd0:	78fb      	ldrb	r3, [r7, #3]
 800ddd2:	f003 0303 	and.w	r3, r3, #3
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d106      	bne.n	800dde8 <tcp_enqueue_flags+0x2c>
 800ddda:	4b67      	ldr	r3, [pc, #412]	; (800df78 <tcp_enqueue_flags+0x1bc>)
 800dddc:	f240 4211 	movw	r2, #1041	; 0x411
 800dde0:	4966      	ldr	r1, [pc, #408]	; (800df7c <tcp_enqueue_flags+0x1c0>)
 800dde2:	4867      	ldr	r0, [pc, #412]	; (800df80 <tcp_enqueue_flags+0x1c4>)
 800dde4:	f006 f834 	bl	8013e50 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d106      	bne.n	800ddfc <tcp_enqueue_flags+0x40>
 800ddee:	4b62      	ldr	r3, [pc, #392]	; (800df78 <tcp_enqueue_flags+0x1bc>)
 800ddf0:	f240 4213 	movw	r2, #1043	; 0x413
 800ddf4:	4963      	ldr	r1, [pc, #396]	; (800df84 <tcp_enqueue_flags+0x1c8>)
 800ddf6:	4862      	ldr	r0, [pc, #392]	; (800df80 <tcp_enqueue_flags+0x1c4>)
 800ddf8:	f006 f82a 	bl	8013e50 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ddfc:	78fb      	ldrb	r3, [r7, #3]
 800ddfe:	f003 0302 	and.w	r3, r3, #2
 800de02:	2b00      	cmp	r3, #0
 800de04:	d001      	beq.n	800de0a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800de06:	2301      	movs	r3, #1
 800de08:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800de0a:	7ffb      	ldrb	r3, [r7, #31]
 800de0c:	009b      	lsls	r3, r3, #2
 800de0e:	b2db      	uxtb	r3, r3
 800de10:	f003 0304 	and.w	r3, r3, #4
 800de14:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800de16:	7dfb      	ldrb	r3, [r7, #23]
 800de18:	b29b      	uxth	r3, r3
 800de1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800de1e:	4619      	mov	r1, r3
 800de20:	2036      	movs	r0, #54	; 0x36
 800de22:	f7fb f951 	bl	80090c8 <pbuf_alloc>
 800de26:	6138      	str	r0, [r7, #16]
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d109      	bne.n	800de42 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	8b5b      	ldrh	r3, [r3, #26]
 800de32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de36:	b29a      	uxth	r2, r3
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800de3c:	f04f 33ff 	mov.w	r3, #4294967295
 800de40:	e095      	b.n	800df6e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	895a      	ldrh	r2, [r3, #10]
 800de46:	7dfb      	ldrb	r3, [r7, #23]
 800de48:	b29b      	uxth	r3, r3
 800de4a:	429a      	cmp	r2, r3
 800de4c:	d206      	bcs.n	800de5c <tcp_enqueue_flags+0xa0>
 800de4e:	4b4a      	ldr	r3, [pc, #296]	; (800df78 <tcp_enqueue_flags+0x1bc>)
 800de50:	f240 4239 	movw	r2, #1081	; 0x439
 800de54:	494c      	ldr	r1, [pc, #304]	; (800df88 <tcp_enqueue_flags+0x1cc>)
 800de56:	484a      	ldr	r0, [pc, #296]	; (800df80 <tcp_enqueue_flags+0x1c4>)
 800de58:	f005 fffa 	bl	8013e50 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800de60:	78fa      	ldrb	r2, [r7, #3]
 800de62:	7ffb      	ldrb	r3, [r7, #31]
 800de64:	9300      	str	r3, [sp, #0]
 800de66:	460b      	mov	r3, r1
 800de68:	6939      	ldr	r1, [r7, #16]
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f7ff fd70 	bl	800d950 <tcp_create_segment>
 800de70:	60f8      	str	r0, [r7, #12]
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d109      	bne.n	800de8c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	8b5b      	ldrh	r3, [r3, #26]
 800de7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de80:	b29a      	uxth	r2, r3
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800de86:	f04f 33ff 	mov.w	r3, #4294967295
 800de8a:	e070      	b.n	800df6e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	68db      	ldr	r3, [r3, #12]
 800de90:	f003 0303 	and.w	r3, r3, #3
 800de94:	2b00      	cmp	r3, #0
 800de96:	d006      	beq.n	800dea6 <tcp_enqueue_flags+0xea>
 800de98:	4b37      	ldr	r3, [pc, #220]	; (800df78 <tcp_enqueue_flags+0x1bc>)
 800de9a:	f240 4242 	movw	r2, #1090	; 0x442
 800de9e:	493b      	ldr	r1, [pc, #236]	; (800df8c <tcp_enqueue_flags+0x1d0>)
 800dea0:	4837      	ldr	r0, [pc, #220]	; (800df80 <tcp_enqueue_flags+0x1c4>)
 800dea2:	f005 ffd5 	bl	8013e50 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	891b      	ldrh	r3, [r3, #8]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d006      	beq.n	800debc <tcp_enqueue_flags+0x100>
 800deae:	4b32      	ldr	r3, [pc, #200]	; (800df78 <tcp_enqueue_flags+0x1bc>)
 800deb0:	f240 4243 	movw	r2, #1091	; 0x443
 800deb4:	4936      	ldr	r1, [pc, #216]	; (800df90 <tcp_enqueue_flags+0x1d4>)
 800deb6:	4832      	ldr	r0, [pc, #200]	; (800df80 <tcp_enqueue_flags+0x1c4>)
 800deb8:	f005 ffca 	bl	8013e50 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d103      	bne.n	800decc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	68fa      	ldr	r2, [r7, #12]
 800dec8:	66da      	str	r2, [r3, #108]	; 0x6c
 800deca:	e00d      	b.n	800dee8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ded0:	61bb      	str	r3, [r7, #24]
 800ded2:	e002      	b.n	800deda <tcp_enqueue_flags+0x11e>
 800ded4:	69bb      	ldr	r3, [r7, #24]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	61bb      	str	r3, [r7, #24]
 800deda:	69bb      	ldr	r3, [r7, #24]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d1f8      	bne.n	800ded4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800dee2:	69bb      	ldr	r3, [r7, #24]
 800dee4:	68fa      	ldr	r2, [r7, #12]
 800dee6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2200      	movs	r2, #0
 800deec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800def0:	78fb      	ldrb	r3, [r7, #3]
 800def2:	f003 0302 	and.w	r3, r3, #2
 800def6:	2b00      	cmp	r3, #0
 800def8:	d104      	bne.n	800df04 <tcp_enqueue_flags+0x148>
 800defa:	78fb      	ldrb	r3, [r7, #3]
 800defc:	f003 0301 	and.w	r3, r3, #1
 800df00:	2b00      	cmp	r3, #0
 800df02:	d004      	beq.n	800df0e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df08:	1c5a      	adds	r2, r3, #1
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800df0e:	78fb      	ldrb	r3, [r7, #3]
 800df10:	f003 0301 	and.w	r3, r3, #1
 800df14:	2b00      	cmp	r3, #0
 800df16:	d006      	beq.n	800df26 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	8b5b      	ldrh	r3, [r3, #26]
 800df1c:	f043 0320 	orr.w	r3, r3, #32
 800df20:	b29a      	uxth	r2, r3
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	4618      	mov	r0, r3
 800df2c:	f7fb fc38 	bl	80097a0 <pbuf_clen>
 800df30:	4603      	mov	r3, r0
 800df32:	461a      	mov	r2, r3
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800df3a:	4413      	add	r3, r2
 800df3c:	b29a      	uxth	r2, r3
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d00e      	beq.n	800df6c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df52:	2b00      	cmp	r3, #0
 800df54:	d10a      	bne.n	800df6c <tcp_enqueue_flags+0x1b0>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d106      	bne.n	800df6c <tcp_enqueue_flags+0x1b0>
 800df5e:	4b06      	ldr	r3, [pc, #24]	; (800df78 <tcp_enqueue_flags+0x1bc>)
 800df60:	f240 4265 	movw	r2, #1125	; 0x465
 800df64:	490b      	ldr	r1, [pc, #44]	; (800df94 <tcp_enqueue_flags+0x1d8>)
 800df66:	4806      	ldr	r0, [pc, #24]	; (800df80 <tcp_enqueue_flags+0x1c4>)
 800df68:	f005 ff72 	bl	8013e50 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800df6c:	2300      	movs	r3, #0
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3720      	adds	r7, #32
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
 800df76:	bf00      	nop
 800df78:	08016aac 	.word	0x08016aac
 800df7c:	08016ed0 	.word	0x08016ed0
 800df80:	08016b00 	.word	0x08016b00
 800df84:	08016f28 	.word	0x08016f28
 800df88:	08016f48 	.word	0x08016f48
 800df8c:	08016f84 	.word	0x08016f84
 800df90:	08016f9c 	.word	0x08016f9c
 800df94:	08016fc8 	.word	0x08016fc8

0800df98 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800df98:	b5b0      	push	{r4, r5, r7, lr}
 800df9a:	b08a      	sub	sp, #40	; 0x28
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d106      	bne.n	800dfb4 <tcp_output+0x1c>
 800dfa6:	4b8a      	ldr	r3, [pc, #552]	; (800e1d0 <tcp_output+0x238>)
 800dfa8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800dfac:	4989      	ldr	r1, [pc, #548]	; (800e1d4 <tcp_output+0x23c>)
 800dfae:	488a      	ldr	r0, [pc, #552]	; (800e1d8 <tcp_output+0x240>)
 800dfb0:	f005 ff4e 	bl	8013e50 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	7d1b      	ldrb	r3, [r3, #20]
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	d106      	bne.n	800dfca <tcp_output+0x32>
 800dfbc:	4b84      	ldr	r3, [pc, #528]	; (800e1d0 <tcp_output+0x238>)
 800dfbe:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800dfc2:	4986      	ldr	r1, [pc, #536]	; (800e1dc <tcp_output+0x244>)
 800dfc4:	4884      	ldr	r0, [pc, #528]	; (800e1d8 <tcp_output+0x240>)
 800dfc6:	f005 ff43 	bl	8013e50 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800dfca:	4b85      	ldr	r3, [pc, #532]	; (800e1e0 <tcp_output+0x248>)
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	687a      	ldr	r2, [r7, #4]
 800dfd0:	429a      	cmp	r2, r3
 800dfd2:	d101      	bne.n	800dfd8 <tcp_output+0x40>
    return ERR_OK;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	e1ce      	b.n	800e376 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	bf28      	it	cs
 800dfe8:	4613      	movcs	r3, r2
 800dfea:	b29b      	uxth	r3, r3
 800dfec:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dff2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800dff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d10b      	bne.n	800e012 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	8b5b      	ldrh	r3, [r3, #26]
 800dffe:	f003 0302 	and.w	r3, r3, #2
 800e002:	2b00      	cmp	r3, #0
 800e004:	f000 81aa 	beq.w	800e35c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f000 fdcb 	bl	800eba4 <tcp_send_empty_ack>
 800e00e:	4603      	mov	r3, r0
 800e010:	e1b1      	b.n	800e376 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e012:	6879      	ldr	r1, [r7, #4]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	3304      	adds	r3, #4
 800e018:	461a      	mov	r2, r3
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f7ff fc7c 	bl	800d918 <tcp_route>
 800e020:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d102      	bne.n	800e02e <tcp_output+0x96>
    return ERR_RTE;
 800e028:	f06f 0303 	mvn.w	r3, #3
 800e02c:	e1a3      	b.n	800e376 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d003      	beq.n	800e03c <tcp_output+0xa4>
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d111      	bne.n	800e060 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d002      	beq.n	800e048 <tcp_output+0xb0>
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	3304      	adds	r3, #4
 800e046:	e000      	b.n	800e04a <tcp_output+0xb2>
 800e048:	2300      	movs	r3, #0
 800e04a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d102      	bne.n	800e058 <tcp_output+0xc0>
      return ERR_RTE;
 800e052:	f06f 0303 	mvn.w	r3, #3
 800e056:	e18e      	b.n	800e376 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e058:	693b      	ldr	r3, [r7, #16]
 800e05a:	681a      	ldr	r2, [r3, #0]
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e062:	68db      	ldr	r3, [r3, #12]
 800e064:	685b      	ldr	r3, [r3, #4]
 800e066:	4618      	mov	r0, r3
 800e068:	f7f9 ffbd 	bl	8007fe6 <lwip_htonl>
 800e06c:	4602      	mov	r2, r0
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e072:	1ad3      	subs	r3, r2, r3
 800e074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e076:	8912      	ldrh	r2, [r2, #8]
 800e078:	4413      	add	r3, r2
 800e07a:	69ba      	ldr	r2, [r7, #24]
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d227      	bcs.n	800e0d0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e086:	461a      	mov	r2, r3
 800e088:	69bb      	ldr	r3, [r7, #24]
 800e08a:	4293      	cmp	r3, r2
 800e08c:	d114      	bne.n	800e0b8 <tcp_output+0x120>
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e092:	2b00      	cmp	r3, #0
 800e094:	d110      	bne.n	800e0b8 <tcp_output+0x120>
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d10b      	bne.n	800e0b8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	8b5b      	ldrh	r3, [r3, #26]
 800e0bc:	f003 0302 	and.w	r3, r3, #2
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	f000 814d 	beq.w	800e360 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f000 fd6c 	bl	800eba4 <tcp_send_empty_ack>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	e152      	b.n	800e376 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0dc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e0de:	6a3b      	ldr	r3, [r7, #32]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	f000 811c 	beq.w	800e31e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e0e6:	e002      	b.n	800e0ee <tcp_output+0x156>
 800e0e8:	6a3b      	ldr	r3, [r7, #32]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	623b      	str	r3, [r7, #32]
 800e0ee:	6a3b      	ldr	r3, [r7, #32]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d1f8      	bne.n	800e0e8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e0f6:	e112      	b.n	800e31e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fa:	68db      	ldr	r3, [r3, #12]
 800e0fc:	899b      	ldrh	r3, [r3, #12]
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	4618      	mov	r0, r3
 800e102:	f7f9 ff5b 	bl	8007fbc <lwip_htons>
 800e106:	4603      	mov	r3, r0
 800e108:	b2db      	uxtb	r3, r3
 800e10a:	f003 0304 	and.w	r3, r3, #4
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d006      	beq.n	800e120 <tcp_output+0x188>
 800e112:	4b2f      	ldr	r3, [pc, #188]	; (800e1d0 <tcp_output+0x238>)
 800e114:	f240 5236 	movw	r2, #1334	; 0x536
 800e118:	4932      	ldr	r1, [pc, #200]	; (800e1e4 <tcp_output+0x24c>)
 800e11a:	482f      	ldr	r0, [pc, #188]	; (800e1d8 <tcp_output+0x240>)
 800e11c:	f005 fe98 	bl	8013e50 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e124:	2b00      	cmp	r3, #0
 800e126:	d01f      	beq.n	800e168 <tcp_output+0x1d0>
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	8b5b      	ldrh	r3, [r3, #26]
 800e12c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e130:	2b00      	cmp	r3, #0
 800e132:	d119      	bne.n	800e168 <tcp_output+0x1d0>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d00b      	beq.n	800e154 <tcp_output+0x1bc>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d110      	bne.n	800e168 <tcp_output+0x1d0>
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e14a:	891a      	ldrh	r2, [r3, #8]
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e150:	429a      	cmp	r2, r3
 800e152:	d209      	bcs.n	800e168 <tcp_output+0x1d0>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d004      	beq.n	800e168 <tcp_output+0x1d0>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e164:	2b08      	cmp	r3, #8
 800e166:	d901      	bls.n	800e16c <tcp_output+0x1d4>
 800e168:	2301      	movs	r3, #1
 800e16a:	e000      	b.n	800e16e <tcp_output+0x1d6>
 800e16c:	2300      	movs	r3, #0
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d106      	bne.n	800e180 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	8b5b      	ldrh	r3, [r3, #26]
 800e176:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	f000 80e4 	beq.w	800e348 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	7d1b      	ldrb	r3, [r3, #20]
 800e184:	2b02      	cmp	r3, #2
 800e186:	d00d      	beq.n	800e1a4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18a:	68db      	ldr	r3, [r3, #12]
 800e18c:	899b      	ldrh	r3, [r3, #12]
 800e18e:	b29c      	uxth	r4, r3
 800e190:	2010      	movs	r0, #16
 800e192:	f7f9 ff13 	bl	8007fbc <lwip_htons>
 800e196:	4603      	mov	r3, r0
 800e198:	461a      	mov	r2, r3
 800e19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e19c:	68db      	ldr	r3, [r3, #12]
 800e19e:	4322      	orrs	r2, r4
 800e1a0:	b292      	uxth	r2, r2
 800e1a2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e1a4:	697a      	ldr	r2, [r7, #20]
 800e1a6:	6879      	ldr	r1, [r7, #4]
 800e1a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1aa:	f000 f909 	bl	800e3c0 <tcp_output_segment>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e1b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d016      	beq.n	800e1e8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	8b5b      	ldrh	r3, [r3, #26]
 800e1be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1c2:	b29a      	uxth	r2, r3
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	835a      	strh	r2, [r3, #26]
      return err;
 800e1c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1cc:	e0d3      	b.n	800e376 <tcp_output+0x3de>
 800e1ce:	bf00      	nop
 800e1d0:	08016aac 	.word	0x08016aac
 800e1d4:	08016ff0 	.word	0x08016ff0
 800e1d8:	08016b00 	.word	0x08016b00
 800e1dc:	08017008 	.word	0x08017008
 800e1e0:	2000af0c 	.word	0x2000af0c
 800e1e4:	08017030 	.word	0x08017030
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ea:	681a      	ldr	r2, [r3, #0]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	7d1b      	ldrb	r3, [r3, #20]
 800e1f4:	2b02      	cmp	r3, #2
 800e1f6:	d006      	beq.n	800e206 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	8b5b      	ldrh	r3, [r3, #26]
 800e1fc:	f023 0303 	bic.w	r3, r3, #3
 800e200:	b29a      	uxth	r2, r3
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e208:	68db      	ldr	r3, [r3, #12]
 800e20a:	685b      	ldr	r3, [r3, #4]
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7f9 feea 	bl	8007fe6 <lwip_htonl>
 800e212:	4604      	mov	r4, r0
 800e214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e216:	891b      	ldrh	r3, [r3, #8]
 800e218:	461d      	mov	r5, r3
 800e21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21c:	68db      	ldr	r3, [r3, #12]
 800e21e:	899b      	ldrh	r3, [r3, #12]
 800e220:	b29b      	uxth	r3, r3
 800e222:	4618      	mov	r0, r3
 800e224:	f7f9 feca 	bl	8007fbc <lwip_htons>
 800e228:	4603      	mov	r3, r0
 800e22a:	b2db      	uxtb	r3, r3
 800e22c:	f003 0303 	and.w	r3, r3, #3
 800e230:	2b00      	cmp	r3, #0
 800e232:	d001      	beq.n	800e238 <tcp_output+0x2a0>
 800e234:	2301      	movs	r3, #1
 800e236:	e000      	b.n	800e23a <tcp_output+0x2a2>
 800e238:	2300      	movs	r3, #0
 800e23a:	442b      	add	r3, r5
 800e23c:	4423      	add	r3, r4
 800e23e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	1ad3      	subs	r3, r2, r3
 800e248:	2b00      	cmp	r3, #0
 800e24a:	da02      	bge.n	800e252 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	68ba      	ldr	r2, [r7, #8]
 800e250:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e254:	891b      	ldrh	r3, [r3, #8]
 800e256:	461c      	mov	r4, r3
 800e258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25a:	68db      	ldr	r3, [r3, #12]
 800e25c:	899b      	ldrh	r3, [r3, #12]
 800e25e:	b29b      	uxth	r3, r3
 800e260:	4618      	mov	r0, r3
 800e262:	f7f9 feab 	bl	8007fbc <lwip_htons>
 800e266:	4603      	mov	r3, r0
 800e268:	b2db      	uxtb	r3, r3
 800e26a:	f003 0303 	and.w	r3, r3, #3
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d001      	beq.n	800e276 <tcp_output+0x2de>
 800e272:	2301      	movs	r3, #1
 800e274:	e000      	b.n	800e278 <tcp_output+0x2e0>
 800e276:	2300      	movs	r3, #0
 800e278:	4423      	add	r3, r4
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d049      	beq.n	800e312 <tcp_output+0x37a>
      seg->next = NULL;
 800e27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e280:	2200      	movs	r2, #0
 800e282:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d105      	bne.n	800e298 <tcp_output+0x300>
        pcb->unacked = seg;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e290:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800e292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e294:	623b      	str	r3, [r7, #32]
 800e296:	e03f      	b.n	800e318 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e29a:	68db      	ldr	r3, [r3, #12]
 800e29c:	685b      	ldr	r3, [r3, #4]
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7f9 fea1 	bl	8007fe6 <lwip_htonl>
 800e2a4:	4604      	mov	r4, r0
 800e2a6:	6a3b      	ldr	r3, [r7, #32]
 800e2a8:	68db      	ldr	r3, [r3, #12]
 800e2aa:	685b      	ldr	r3, [r3, #4]
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f7f9 fe9a 	bl	8007fe6 <lwip_htonl>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	1ae3      	subs	r3, r4, r3
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	da24      	bge.n	800e304 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	3370      	adds	r3, #112	; 0x70
 800e2be:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e2c0:	e002      	b.n	800e2c8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e2c2:	69fb      	ldr	r3, [r7, #28]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e2c8:	69fb      	ldr	r3, [r7, #28]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d011      	beq.n	800e2f4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e2d0:	69fb      	ldr	r3, [r7, #28]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	68db      	ldr	r3, [r3, #12]
 800e2d6:	685b      	ldr	r3, [r3, #4]
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f7f9 fe84 	bl	8007fe6 <lwip_htonl>
 800e2de:	4604      	mov	r4, r0
 800e2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e2:	68db      	ldr	r3, [r3, #12]
 800e2e4:	685b      	ldr	r3, [r3, #4]
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7f9 fe7d 	bl	8007fe6 <lwip_htonl>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	dbe6      	blt.n	800e2c2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e2f4:	69fb      	ldr	r3, [r7, #28]
 800e2f6:	681a      	ldr	r2, [r3, #0]
 800e2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fa:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e2fc:	69fb      	ldr	r3, [r7, #28]
 800e2fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e300:	601a      	str	r2, [r3, #0]
 800e302:	e009      	b.n	800e318 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e304:	6a3b      	ldr	r3, [r7, #32]
 800e306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e308:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e30a:	6a3b      	ldr	r3, [r7, #32]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	623b      	str	r3, [r7, #32]
 800e310:	e002      	b.n	800e318 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e312:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e314:	f7fc fc3f 	bl	800ab96 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e31c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e320:	2b00      	cmp	r3, #0
 800e322:	d012      	beq.n	800e34a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e326:	68db      	ldr	r3, [r3, #12]
 800e328:	685b      	ldr	r3, [r3, #4]
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7f9 fe5b 	bl	8007fe6 <lwip_htonl>
 800e330:	4602      	mov	r2, r0
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e336:	1ad3      	subs	r3, r2, r3
 800e338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e33a:	8912      	ldrh	r2, [r2, #8]
 800e33c:	4413      	add	r3, r2
  while (seg != NULL &&
 800e33e:	69ba      	ldr	r2, [r7, #24]
 800e340:	429a      	cmp	r2, r3
 800e342:	f4bf aed9 	bcs.w	800e0f8 <tcp_output+0x160>
 800e346:	e000      	b.n	800e34a <tcp_output+0x3b2>
      break;
 800e348:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d108      	bne.n	800e364 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2200      	movs	r2, #0
 800e356:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800e35a:	e004      	b.n	800e366 <tcp_output+0x3ce>
    goto output_done;
 800e35c:	bf00      	nop
 800e35e:	e002      	b.n	800e366 <tcp_output+0x3ce>
    goto output_done;
 800e360:	bf00      	nop
 800e362:	e000      	b.n	800e366 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e364:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	8b5b      	ldrh	r3, [r3, #26]
 800e36a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e36e:	b29a      	uxth	r2, r3
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e374:	2300      	movs	r3, #0
}
 800e376:	4618      	mov	r0, r3
 800e378:	3728      	adds	r7, #40	; 0x28
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bdb0      	pop	{r4, r5, r7, pc}
 800e37e:	bf00      	nop

0800e380 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b082      	sub	sp, #8
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d106      	bne.n	800e39c <tcp_output_segment_busy+0x1c>
 800e38e:	4b09      	ldr	r3, [pc, #36]	; (800e3b4 <tcp_output_segment_busy+0x34>)
 800e390:	f240 529a 	movw	r2, #1434	; 0x59a
 800e394:	4908      	ldr	r1, [pc, #32]	; (800e3b8 <tcp_output_segment_busy+0x38>)
 800e396:	4809      	ldr	r0, [pc, #36]	; (800e3bc <tcp_output_segment_busy+0x3c>)
 800e398:	f005 fd5a 	bl	8013e50 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	685b      	ldr	r3, [r3, #4]
 800e3a0:	7b9b      	ldrb	r3, [r3, #14]
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	d001      	beq.n	800e3aa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	e000      	b.n	800e3ac <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e3aa:	2300      	movs	r3, #0
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3708      	adds	r7, #8
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}
 800e3b4:	08016aac 	.word	0x08016aac
 800e3b8:	08017048 	.word	0x08017048
 800e3bc:	08016b00 	.word	0x08016b00

0800e3c0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e3c0:	b5b0      	push	{r4, r5, r7, lr}
 800e3c2:	b08c      	sub	sp, #48	; 0x30
 800e3c4:	af04      	add	r7, sp, #16
 800e3c6:	60f8      	str	r0, [r7, #12]
 800e3c8:	60b9      	str	r1, [r7, #8]
 800e3ca:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d106      	bne.n	800e3e0 <tcp_output_segment+0x20>
 800e3d2:	4b63      	ldr	r3, [pc, #396]	; (800e560 <tcp_output_segment+0x1a0>)
 800e3d4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800e3d8:	4962      	ldr	r1, [pc, #392]	; (800e564 <tcp_output_segment+0x1a4>)
 800e3da:	4863      	ldr	r0, [pc, #396]	; (800e568 <tcp_output_segment+0x1a8>)
 800e3dc:	f005 fd38 	bl	8013e50 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d106      	bne.n	800e3f4 <tcp_output_segment+0x34>
 800e3e6:	4b5e      	ldr	r3, [pc, #376]	; (800e560 <tcp_output_segment+0x1a0>)
 800e3e8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800e3ec:	495f      	ldr	r1, [pc, #380]	; (800e56c <tcp_output_segment+0x1ac>)
 800e3ee:	485e      	ldr	r0, [pc, #376]	; (800e568 <tcp_output_segment+0x1a8>)
 800e3f0:	f005 fd2e 	bl	8013e50 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d106      	bne.n	800e408 <tcp_output_segment+0x48>
 800e3fa:	4b59      	ldr	r3, [pc, #356]	; (800e560 <tcp_output_segment+0x1a0>)
 800e3fc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800e400:	495b      	ldr	r1, [pc, #364]	; (800e570 <tcp_output_segment+0x1b0>)
 800e402:	4859      	ldr	r0, [pc, #356]	; (800e568 <tcp_output_segment+0x1a8>)
 800e404:	f005 fd24 	bl	8013e50 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e408:	68f8      	ldr	r0, [r7, #12]
 800e40a:	f7ff ffb9 	bl	800e380 <tcp_output_segment_busy>
 800e40e:	4603      	mov	r3, r0
 800e410:	2b00      	cmp	r3, #0
 800e412:	d001      	beq.n	800e418 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e414:	2300      	movs	r3, #0
 800e416:	e09f      	b.n	800e558 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	68dc      	ldr	r4, [r3, #12]
 800e420:	4610      	mov	r0, r2
 800e422:	f7f9 fde0 	bl	8007fe6 <lwip_htonl>
 800e426:	4603      	mov	r3, r0
 800e428:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	68dc      	ldr	r4, [r3, #12]
 800e432:	4610      	mov	r0, r2
 800e434:	f7f9 fdc2 	bl	8007fbc <lwip_htons>
 800e438:	4603      	mov	r3, r0
 800e43a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e440:	68ba      	ldr	r2, [r7, #8]
 800e442:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e444:	441a      	add	r2, r3
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	68db      	ldr	r3, [r3, #12]
 800e44e:	3314      	adds	r3, #20
 800e450:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	7a9b      	ldrb	r3, [r3, #10]
 800e456:	f003 0301 	and.w	r3, r3, #1
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d015      	beq.n	800e48a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	3304      	adds	r3, #4
 800e462:	461a      	mov	r2, r3
 800e464:	6879      	ldr	r1, [r7, #4]
 800e466:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e46a:	f7fc fe8b 	bl	800b184 <tcp_eff_send_mss_netif>
 800e46e:	4603      	mov	r3, r0
 800e470:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e472:	8b7b      	ldrh	r3, [r7, #26]
 800e474:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800e478:	4618      	mov	r0, r3
 800e47a:	f7f9 fdb4 	bl	8007fe6 <lwip_htonl>
 800e47e:	4602      	mov	r2, r0
 800e480:	69fb      	ldr	r3, [r7, #28]
 800e482:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e484:	69fb      	ldr	r3, [r7, #28]
 800e486:	3304      	adds	r3, #4
 800e488:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e490:	2b00      	cmp	r3, #0
 800e492:	da02      	bge.n	800e49a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	2200      	movs	r2, #0
 800e498:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d10c      	bne.n	800e4bc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e4a2:	4b34      	ldr	r3, [pc, #208]	; (800e574 <tcp_output_segment+0x1b4>)
 800e4a4:	681a      	ldr	r2, [r3, #0]
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	68db      	ldr	r3, [r3, #12]
 800e4ae:	685b      	ldr	r3, [r3, #4]
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f7f9 fd98 	bl	8007fe6 <lwip_htonl>
 800e4b6:	4602      	mov	r2, r0
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	68da      	ldr	r2, [r3, #12]
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	685b      	ldr	r3, [r3, #4]
 800e4c4:	685b      	ldr	r3, [r3, #4]
 800e4c6:	1ad3      	subs	r3, r2, r3
 800e4c8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	685b      	ldr	r3, [r3, #4]
 800e4ce:	8959      	ldrh	r1, [r3, #10]
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	8b3a      	ldrh	r2, [r7, #24]
 800e4d6:	1a8a      	subs	r2, r1, r2
 800e4d8:	b292      	uxth	r2, r2
 800e4da:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	8919      	ldrh	r1, [r3, #8]
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	685b      	ldr	r3, [r3, #4]
 800e4e6:	8b3a      	ldrh	r2, [r7, #24]
 800e4e8:	1a8a      	subs	r2, r1, r2
 800e4ea:	b292      	uxth	r2, r2
 800e4ec:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	685b      	ldr	r3, [r3, #4]
 800e4f2:	68fa      	ldr	r2, [r7, #12]
 800e4f4:	68d2      	ldr	r2, [r2, #12]
 800e4f6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	68db      	ldr	r3, [r3, #12]
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	741a      	strb	r2, [r3, #16]
 800e500:	2200      	movs	r2, #0
 800e502:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	68db      	ldr	r3, [r3, #12]
 800e508:	f103 0214 	add.w	r2, r3, #20
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	7a9b      	ldrb	r3, [r3, #10]
 800e510:	009b      	lsls	r3, r3, #2
 800e512:	f003 0304 	and.w	r3, r3, #4
 800e516:	4413      	add	r3, r2
 800e518:	69fa      	ldr	r2, [r7, #28]
 800e51a:	429a      	cmp	r2, r3
 800e51c:	d006      	beq.n	800e52c <tcp_output_segment+0x16c>
 800e51e:	4b10      	ldr	r3, [pc, #64]	; (800e560 <tcp_output_segment+0x1a0>)
 800e520:	f240 621c 	movw	r2, #1564	; 0x61c
 800e524:	4914      	ldr	r1, [pc, #80]	; (800e578 <tcp_output_segment+0x1b8>)
 800e526:	4810      	ldr	r0, [pc, #64]	; (800e568 <tcp_output_segment+0x1a8>)
 800e528:	f005 fc92 	bl	8013e50 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	6858      	ldr	r0, [r3, #4]
 800e530:	68b9      	ldr	r1, [r7, #8]
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	1d1c      	adds	r4, r3, #4
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	7add      	ldrb	r5, [r3, #11]
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	7a9b      	ldrb	r3, [r3, #10]
 800e53e:	687a      	ldr	r2, [r7, #4]
 800e540:	9202      	str	r2, [sp, #8]
 800e542:	2206      	movs	r2, #6
 800e544:	9201      	str	r2, [sp, #4]
 800e546:	9300      	str	r3, [sp, #0]
 800e548:	462b      	mov	r3, r5
 800e54a:	4622      	mov	r2, r4
 800e54c:	f004 fbee 	bl	8012d2c <ip4_output_if>
 800e550:	4603      	mov	r3, r0
 800e552:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e554:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e558:	4618      	mov	r0, r3
 800e55a:	3720      	adds	r7, #32
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bdb0      	pop	{r4, r5, r7, pc}
 800e560:	08016aac 	.word	0x08016aac
 800e564:	08017070 	.word	0x08017070
 800e568:	08016b00 	.word	0x08016b00
 800e56c:	08017090 	.word	0x08017090
 800e570:	080170b0 	.word	0x080170b0
 800e574:	2000aec0 	.word	0x2000aec0
 800e578:	080170d4 	.word	0x080170d4

0800e57c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e57c:	b5b0      	push	{r4, r5, r7, lr}
 800e57e:	b084      	sub	sp, #16
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d106      	bne.n	800e598 <tcp_rexmit_rto_prepare+0x1c>
 800e58a:	4b31      	ldr	r3, [pc, #196]	; (800e650 <tcp_rexmit_rto_prepare+0xd4>)
 800e58c:	f240 6263 	movw	r2, #1635	; 0x663
 800e590:	4930      	ldr	r1, [pc, #192]	; (800e654 <tcp_rexmit_rto_prepare+0xd8>)
 800e592:	4831      	ldr	r0, [pc, #196]	; (800e658 <tcp_rexmit_rto_prepare+0xdc>)
 800e594:	f005 fc5c 	bl	8013e50 <iprintf>

  if (pcb->unacked == NULL) {
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d102      	bne.n	800e5a6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e5a0:	f06f 0305 	mvn.w	r3, #5
 800e5a4:	e050      	b.n	800e648 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5aa:	60fb      	str	r3, [r7, #12]
 800e5ac:	e00b      	b.n	800e5c6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e5ae:	68f8      	ldr	r0, [r7, #12]
 800e5b0:	f7ff fee6 	bl	800e380 <tcp_output_segment_busy>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d002      	beq.n	800e5c0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e5ba:	f06f 0305 	mvn.w	r3, #5
 800e5be:	e043      	b.n	800e648 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	60fb      	str	r3, [r7, #12]
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d1ef      	bne.n	800e5ae <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e5ce:	68f8      	ldr	r0, [r7, #12]
 800e5d0:	f7ff fed6 	bl	800e380 <tcp_output_segment_busy>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d002      	beq.n	800e5e0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e5da:	f06f 0305 	mvn.w	r3, #5
 800e5de:	e033      	b.n	800e648 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	8b5b      	ldrh	r3, [r3, #26]
 800e5fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e5fe:	b29a      	uxth	r2, r3
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	68db      	ldr	r3, [r3, #12]
 800e608:	685b      	ldr	r3, [r3, #4]
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7f9 fceb 	bl	8007fe6 <lwip_htonl>
 800e610:	4604      	mov	r4, r0
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	891b      	ldrh	r3, [r3, #8]
 800e616:	461d      	mov	r5, r3
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	68db      	ldr	r3, [r3, #12]
 800e61c:	899b      	ldrh	r3, [r3, #12]
 800e61e:	b29b      	uxth	r3, r3
 800e620:	4618      	mov	r0, r3
 800e622:	f7f9 fccb 	bl	8007fbc <lwip_htons>
 800e626:	4603      	mov	r3, r0
 800e628:	b2db      	uxtb	r3, r3
 800e62a:	f003 0303 	and.w	r3, r3, #3
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d001      	beq.n	800e636 <tcp_rexmit_rto_prepare+0xba>
 800e632:	2301      	movs	r3, #1
 800e634:	e000      	b.n	800e638 <tcp_rexmit_rto_prepare+0xbc>
 800e636:	2300      	movs	r3, #0
 800e638:	442b      	add	r3, r5
 800e63a:	18e2      	adds	r2, r4, r3
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2200      	movs	r2, #0
 800e644:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800e646:	2300      	movs	r3, #0
}
 800e648:	4618      	mov	r0, r3
 800e64a:	3710      	adds	r7, #16
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bdb0      	pop	{r4, r5, r7, pc}
 800e650:	08016aac 	.word	0x08016aac
 800e654:	080170e8 	.word	0x080170e8
 800e658:	08016b00 	.word	0x08016b00

0800e65c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b082      	sub	sp, #8
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d106      	bne.n	800e678 <tcp_rexmit_rto_commit+0x1c>
 800e66a:	4b0d      	ldr	r3, [pc, #52]	; (800e6a0 <tcp_rexmit_rto_commit+0x44>)
 800e66c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e670:	490c      	ldr	r1, [pc, #48]	; (800e6a4 <tcp_rexmit_rto_commit+0x48>)
 800e672:	480d      	ldr	r0, [pc, #52]	; (800e6a8 <tcp_rexmit_rto_commit+0x4c>)
 800e674:	f005 fbec 	bl	8013e50 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e67e:	2bff      	cmp	r3, #255	; 0xff
 800e680:	d007      	beq.n	800e692 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e688:	3301      	adds	r3, #1
 800e68a:	b2da      	uxtb	r2, r3
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f7ff fc80 	bl	800df98 <tcp_output>
}
 800e698:	bf00      	nop
 800e69a:	3708      	adds	r7, #8
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}
 800e6a0:	08016aac 	.word	0x08016aac
 800e6a4:	0801710c 	.word	0x0801710c
 800e6a8:	08016b00 	.word	0x08016b00

0800e6ac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b082      	sub	sp, #8
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d106      	bne.n	800e6c8 <tcp_rexmit_rto+0x1c>
 800e6ba:	4b0a      	ldr	r3, [pc, #40]	; (800e6e4 <tcp_rexmit_rto+0x38>)
 800e6bc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800e6c0:	4909      	ldr	r1, [pc, #36]	; (800e6e8 <tcp_rexmit_rto+0x3c>)
 800e6c2:	480a      	ldr	r0, [pc, #40]	; (800e6ec <tcp_rexmit_rto+0x40>)
 800e6c4:	f005 fbc4 	bl	8013e50 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f7ff ff57 	bl	800e57c <tcp_rexmit_rto_prepare>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d102      	bne.n	800e6da <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f7ff ffc1 	bl	800e65c <tcp_rexmit_rto_commit>
  }
}
 800e6da:	bf00      	nop
 800e6dc:	3708      	adds	r7, #8
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}
 800e6e2:	bf00      	nop
 800e6e4:	08016aac 	.word	0x08016aac
 800e6e8:	08017130 	.word	0x08017130
 800e6ec:	08016b00 	.word	0x08016b00

0800e6f0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e6f0:	b590      	push	{r4, r7, lr}
 800e6f2:	b085      	sub	sp, #20
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d106      	bne.n	800e70c <tcp_rexmit+0x1c>
 800e6fe:	4b2f      	ldr	r3, [pc, #188]	; (800e7bc <tcp_rexmit+0xcc>)
 800e700:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e704:	492e      	ldr	r1, [pc, #184]	; (800e7c0 <tcp_rexmit+0xd0>)
 800e706:	482f      	ldr	r0, [pc, #188]	; (800e7c4 <tcp_rexmit+0xd4>)
 800e708:	f005 fba2 	bl	8013e50 <iprintf>

  if (pcb->unacked == NULL) {
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e710:	2b00      	cmp	r3, #0
 800e712:	d102      	bne.n	800e71a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e714:	f06f 0305 	mvn.w	r3, #5
 800e718:	e04c      	b.n	800e7b4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e71e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e720:	68b8      	ldr	r0, [r7, #8]
 800e722:	f7ff fe2d 	bl	800e380 <tcp_output_segment_busy>
 800e726:	4603      	mov	r3, r0
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d002      	beq.n	800e732 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e72c:	f06f 0305 	mvn.w	r3, #5
 800e730:	e040      	b.n	800e7b4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	681a      	ldr	r2, [r3, #0]
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	336c      	adds	r3, #108	; 0x6c
 800e73e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e740:	e002      	b.n	800e748 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d011      	beq.n	800e774 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	68db      	ldr	r3, [r3, #12]
 800e756:	685b      	ldr	r3, [r3, #4]
 800e758:	4618      	mov	r0, r3
 800e75a:	f7f9 fc44 	bl	8007fe6 <lwip_htonl>
 800e75e:	4604      	mov	r4, r0
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	68db      	ldr	r3, [r3, #12]
 800e764:	685b      	ldr	r3, [r3, #4]
 800e766:	4618      	mov	r0, r3
 800e768:	f7f9 fc3d 	bl	8007fe6 <lwip_htonl>
 800e76c:	4603      	mov	r3, r0
 800e76e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e770:	2b00      	cmp	r3, #0
 800e772:	dbe6      	blt.n	800e742 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	681a      	ldr	r2, [r3, #0]
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	68ba      	ldr	r2, [r7, #8]
 800e780:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d103      	bne.n	800e792 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	2200      	movs	r2, #0
 800e78e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e798:	2bff      	cmp	r3, #255	; 0xff
 800e79a:	d007      	beq.n	800e7ac <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	b2da      	uxtb	r2, r3
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e7b2:	2300      	movs	r3, #0
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3714      	adds	r7, #20
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd90      	pop	{r4, r7, pc}
 800e7bc:	08016aac 	.word	0x08016aac
 800e7c0:	0801714c 	.word	0x0801714c
 800e7c4:	08016b00 	.word	0x08016b00

0800e7c8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b082      	sub	sp, #8
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d106      	bne.n	800e7e4 <tcp_rexmit_fast+0x1c>
 800e7d6:	4b2a      	ldr	r3, [pc, #168]	; (800e880 <tcp_rexmit_fast+0xb8>)
 800e7d8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e7dc:	4929      	ldr	r1, [pc, #164]	; (800e884 <tcp_rexmit_fast+0xbc>)
 800e7de:	482a      	ldr	r0, [pc, #168]	; (800e888 <tcp_rexmit_fast+0xc0>)
 800e7e0:	f005 fb36 	bl	8013e50 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d045      	beq.n	800e878 <tcp_rexmit_fast+0xb0>
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	8b5b      	ldrh	r3, [r3, #26]
 800e7f0:	f003 0304 	and.w	r3, r3, #4
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d13f      	bne.n	800e878 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f7ff ff79 	bl	800e6f0 <tcp_rexmit>
 800e7fe:	4603      	mov	r3, r0
 800e800:	2b00      	cmp	r3, #0
 800e802:	d139      	bne.n	800e878 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e810:	4293      	cmp	r3, r2
 800e812:	bf28      	it	cs
 800e814:	4613      	movcs	r3, r2
 800e816:	b29b      	uxth	r3, r3
 800e818:	2b00      	cmp	r3, #0
 800e81a:	da00      	bge.n	800e81e <tcp_rexmit_fast+0x56>
 800e81c:	3301      	adds	r3, #1
 800e81e:	105b      	asrs	r3, r3, #1
 800e820:	b29a      	uxth	r2, r3
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e82e:	461a      	mov	r2, r3
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e834:	005b      	lsls	r3, r3, #1
 800e836:	429a      	cmp	r2, r3
 800e838:	d206      	bcs.n	800e848 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e83e:	005b      	lsls	r3, r3, #1
 800e840:	b29a      	uxth	r2, r3
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e852:	4619      	mov	r1, r3
 800e854:	0049      	lsls	r1, r1, #1
 800e856:	440b      	add	r3, r1
 800e858:	b29b      	uxth	r3, r3
 800e85a:	4413      	add	r3, r2
 800e85c:	b29a      	uxth	r2, r3
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	8b5b      	ldrh	r3, [r3, #26]
 800e868:	f043 0304 	orr.w	r3, r3, #4
 800e86c:	b29a      	uxth	r2, r3
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2200      	movs	r2, #0
 800e876:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800e878:	bf00      	nop
 800e87a:	3708      	adds	r7, #8
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}
 800e880:	08016aac 	.word	0x08016aac
 800e884:	08017164 	.word	0x08017164
 800e888:	08016b00 	.word	0x08016b00

0800e88c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b086      	sub	sp, #24
 800e890:	af00      	add	r7, sp, #0
 800e892:	60f8      	str	r0, [r7, #12]
 800e894:	607b      	str	r3, [r7, #4]
 800e896:	460b      	mov	r3, r1
 800e898:	817b      	strh	r3, [r7, #10]
 800e89a:	4613      	mov	r3, r2
 800e89c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e89e:	897a      	ldrh	r2, [r7, #10]
 800e8a0:	893b      	ldrh	r3, [r7, #8]
 800e8a2:	4413      	add	r3, r2
 800e8a4:	b29b      	uxth	r3, r3
 800e8a6:	3314      	adds	r3, #20
 800e8a8:	b29b      	uxth	r3, r3
 800e8aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e8ae:	4619      	mov	r1, r3
 800e8b0:	2022      	movs	r0, #34	; 0x22
 800e8b2:	f7fa fc09 	bl	80090c8 <pbuf_alloc>
 800e8b6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d04d      	beq.n	800e95a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e8be:	897b      	ldrh	r3, [r7, #10]
 800e8c0:	3313      	adds	r3, #19
 800e8c2:	697a      	ldr	r2, [r7, #20]
 800e8c4:	8952      	ldrh	r2, [r2, #10]
 800e8c6:	4293      	cmp	r3, r2
 800e8c8:	db06      	blt.n	800e8d8 <tcp_output_alloc_header_common+0x4c>
 800e8ca:	4b26      	ldr	r3, [pc, #152]	; (800e964 <tcp_output_alloc_header_common+0xd8>)
 800e8cc:	f240 7223 	movw	r2, #1827	; 0x723
 800e8d0:	4925      	ldr	r1, [pc, #148]	; (800e968 <tcp_output_alloc_header_common+0xdc>)
 800e8d2:	4826      	ldr	r0, [pc, #152]	; (800e96c <tcp_output_alloc_header_common+0xe0>)
 800e8d4:	f005 fabc 	bl	8013e50 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e8de:	8c3b      	ldrh	r3, [r7, #32]
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7f9 fb6b 	bl	8007fbc <lwip_htons>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	461a      	mov	r2, r3
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e8ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f7f9 fb63 	bl	8007fbc <lwip_htons>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	461a      	mov	r2, r3
 800e8fa:	693b      	ldr	r3, [r7, #16]
 800e8fc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e8fe:	693b      	ldr	r3, [r7, #16]
 800e900:	687a      	ldr	r2, [r7, #4]
 800e902:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e904:	68f8      	ldr	r0, [r7, #12]
 800e906:	f7f9 fb6e 	bl	8007fe6 <lwip_htonl>
 800e90a:	4602      	mov	r2, r0
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e910:	897b      	ldrh	r3, [r7, #10]
 800e912:	089b      	lsrs	r3, r3, #2
 800e914:	b29b      	uxth	r3, r3
 800e916:	3305      	adds	r3, #5
 800e918:	b29b      	uxth	r3, r3
 800e91a:	031b      	lsls	r3, r3, #12
 800e91c:	b29a      	uxth	r2, r3
 800e91e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e922:	b29b      	uxth	r3, r3
 800e924:	4313      	orrs	r3, r2
 800e926:	b29b      	uxth	r3, r3
 800e928:	4618      	mov	r0, r3
 800e92a:	f7f9 fb47 	bl	8007fbc <lwip_htons>
 800e92e:	4603      	mov	r3, r0
 800e930:	461a      	mov	r2, r3
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e936:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e938:	4618      	mov	r0, r3
 800e93a:	f7f9 fb3f 	bl	8007fbc <lwip_htons>
 800e93e:	4603      	mov	r3, r0
 800e940:	461a      	mov	r2, r3
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	2200      	movs	r2, #0
 800e94a:	741a      	strb	r2, [r3, #16]
 800e94c:	2200      	movs	r2, #0
 800e94e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	2200      	movs	r2, #0
 800e954:	749a      	strb	r2, [r3, #18]
 800e956:	2200      	movs	r2, #0
 800e958:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e95a:	697b      	ldr	r3, [r7, #20]
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	3718      	adds	r7, #24
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}
 800e964:	08016aac 	.word	0x08016aac
 800e968:	08017184 	.word	0x08017184
 800e96c:	08016b00 	.word	0x08016b00

0800e970 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e970:	b5b0      	push	{r4, r5, r7, lr}
 800e972:	b08a      	sub	sp, #40	; 0x28
 800e974:	af04      	add	r7, sp, #16
 800e976:	60f8      	str	r0, [r7, #12]
 800e978:	607b      	str	r3, [r7, #4]
 800e97a:	460b      	mov	r3, r1
 800e97c:	817b      	strh	r3, [r7, #10]
 800e97e:	4613      	mov	r3, r2
 800e980:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d106      	bne.n	800e996 <tcp_output_alloc_header+0x26>
 800e988:	4b15      	ldr	r3, [pc, #84]	; (800e9e0 <tcp_output_alloc_header+0x70>)
 800e98a:	f240 7242 	movw	r2, #1858	; 0x742
 800e98e:	4915      	ldr	r1, [pc, #84]	; (800e9e4 <tcp_output_alloc_header+0x74>)
 800e990:	4815      	ldr	r0, [pc, #84]	; (800e9e8 <tcp_output_alloc_header+0x78>)
 800e992:	f005 fa5d 	bl	8013e50 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	8adb      	ldrh	r3, [r3, #22]
 800e99e:	68fa      	ldr	r2, [r7, #12]
 800e9a0:	8b12      	ldrh	r2, [r2, #24]
 800e9a2:	68f9      	ldr	r1, [r7, #12]
 800e9a4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800e9a6:	893d      	ldrh	r5, [r7, #8]
 800e9a8:	897c      	ldrh	r4, [r7, #10]
 800e9aa:	9103      	str	r1, [sp, #12]
 800e9ac:	2110      	movs	r1, #16
 800e9ae:	9102      	str	r1, [sp, #8]
 800e9b0:	9201      	str	r2, [sp, #4]
 800e9b2:	9300      	str	r3, [sp, #0]
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	462a      	mov	r2, r5
 800e9b8:	4621      	mov	r1, r4
 800e9ba:	f7ff ff67 	bl	800e88c <tcp_output_alloc_header_common>
 800e9be:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d006      	beq.n	800e9d4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ca:	68fa      	ldr	r2, [r7, #12]
 800e9cc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e9ce:	441a      	add	r2, r3
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800e9d4:	697b      	ldr	r3, [r7, #20]
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3718      	adds	r7, #24
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bdb0      	pop	{r4, r5, r7, pc}
 800e9de:	bf00      	nop
 800e9e0:	08016aac 	.word	0x08016aac
 800e9e4:	080171b4 	.word	0x080171b4
 800e9e8:	08016b00 	.word	0x08016b00

0800e9ec <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b088      	sub	sp, #32
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	60f8      	str	r0, [r7, #12]
 800e9f4:	60b9      	str	r1, [r7, #8]
 800e9f6:	4611      	mov	r1, r2
 800e9f8:	461a      	mov	r2, r3
 800e9fa:	460b      	mov	r3, r1
 800e9fc:	71fb      	strb	r3, [r7, #7]
 800e9fe:	4613      	mov	r3, r2
 800ea00:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800ea02:	2300      	movs	r3, #0
 800ea04:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ea06:	68bb      	ldr	r3, [r7, #8]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d106      	bne.n	800ea1a <tcp_output_fill_options+0x2e>
 800ea0c:	4b13      	ldr	r3, [pc, #76]	; (800ea5c <tcp_output_fill_options+0x70>)
 800ea0e:	f240 7256 	movw	r2, #1878	; 0x756
 800ea12:	4913      	ldr	r1, [pc, #76]	; (800ea60 <tcp_output_fill_options+0x74>)
 800ea14:	4813      	ldr	r0, [pc, #76]	; (800ea64 <tcp_output_fill_options+0x78>)
 800ea16:	f005 fa1b 	bl	8013e50 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	685b      	ldr	r3, [r3, #4]
 800ea1e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800ea20:	69bb      	ldr	r3, [r7, #24]
 800ea22:	3314      	adds	r3, #20
 800ea24:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ea26:	69bb      	ldr	r3, [r7, #24]
 800ea28:	f103 0214 	add.w	r2, r3, #20
 800ea2c:	8bfb      	ldrh	r3, [r7, #30]
 800ea2e:	009b      	lsls	r3, r3, #2
 800ea30:	4619      	mov	r1, r3
 800ea32:	79fb      	ldrb	r3, [r7, #7]
 800ea34:	009b      	lsls	r3, r3, #2
 800ea36:	f003 0304 	and.w	r3, r3, #4
 800ea3a:	440b      	add	r3, r1
 800ea3c:	4413      	add	r3, r2
 800ea3e:	697a      	ldr	r2, [r7, #20]
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d006      	beq.n	800ea52 <tcp_output_fill_options+0x66>
 800ea44:	4b05      	ldr	r3, [pc, #20]	; (800ea5c <tcp_output_fill_options+0x70>)
 800ea46:	f240 7275 	movw	r2, #1909	; 0x775
 800ea4a:	4907      	ldr	r1, [pc, #28]	; (800ea68 <tcp_output_fill_options+0x7c>)
 800ea4c:	4805      	ldr	r0, [pc, #20]	; (800ea64 <tcp_output_fill_options+0x78>)
 800ea4e:	f005 f9ff 	bl	8013e50 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ea52:	bf00      	nop
 800ea54:	3720      	adds	r7, #32
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}
 800ea5a:	bf00      	nop
 800ea5c:	08016aac 	.word	0x08016aac
 800ea60:	080171dc 	.word	0x080171dc
 800ea64:	08016b00 	.word	0x08016b00
 800ea68:	080170d4 	.word	0x080170d4

0800ea6c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b08a      	sub	sp, #40	; 0x28
 800ea70:	af04      	add	r7, sp, #16
 800ea72:	60f8      	str	r0, [r7, #12]
 800ea74:	60b9      	str	r1, [r7, #8]
 800ea76:	607a      	str	r2, [r7, #4]
 800ea78:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d106      	bne.n	800ea8e <tcp_output_control_segment+0x22>
 800ea80:	4b1c      	ldr	r3, [pc, #112]	; (800eaf4 <tcp_output_control_segment+0x88>)
 800ea82:	f240 7287 	movw	r2, #1927	; 0x787
 800ea86:	491c      	ldr	r1, [pc, #112]	; (800eaf8 <tcp_output_control_segment+0x8c>)
 800ea88:	481c      	ldr	r0, [pc, #112]	; (800eafc <tcp_output_control_segment+0x90>)
 800ea8a:	f005 f9e1 	bl	8013e50 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800ea8e:	683a      	ldr	r2, [r7, #0]
 800ea90:	6879      	ldr	r1, [r7, #4]
 800ea92:	68f8      	ldr	r0, [r7, #12]
 800ea94:	f7fe ff40 	bl	800d918 <tcp_route>
 800ea98:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d102      	bne.n	800eaa6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800eaa0:	23fc      	movs	r3, #252	; 0xfc
 800eaa2:	75fb      	strb	r3, [r7, #23]
 800eaa4:	e01c      	b.n	800eae0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d006      	beq.n	800eaba <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	7adb      	ldrb	r3, [r3, #11]
 800eab0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	7a9b      	ldrb	r3, [r3, #10]
 800eab6:	757b      	strb	r3, [r7, #21]
 800eab8:	e003      	b.n	800eac2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800eaba:	23ff      	movs	r3, #255	; 0xff
 800eabc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800eabe:	2300      	movs	r3, #0
 800eac0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800eac2:	7dba      	ldrb	r2, [r7, #22]
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	9302      	str	r3, [sp, #8]
 800eac8:	2306      	movs	r3, #6
 800eaca:	9301      	str	r3, [sp, #4]
 800eacc:	7d7b      	ldrb	r3, [r7, #21]
 800eace:	9300      	str	r3, [sp, #0]
 800ead0:	4613      	mov	r3, r2
 800ead2:	683a      	ldr	r2, [r7, #0]
 800ead4:	6879      	ldr	r1, [r7, #4]
 800ead6:	68b8      	ldr	r0, [r7, #8]
 800ead8:	f004 f928 	bl	8012d2c <ip4_output_if>
 800eadc:	4603      	mov	r3, r0
 800eade:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800eae0:	68b8      	ldr	r0, [r7, #8]
 800eae2:	f7fa fdd5 	bl	8009690 <pbuf_free>
  return err;
 800eae6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3718      	adds	r7, #24
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}
 800eaf2:	bf00      	nop
 800eaf4:	08016aac 	.word	0x08016aac
 800eaf8:	08017204 	.word	0x08017204
 800eafc:	08016b00 	.word	0x08016b00

0800eb00 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800eb00:	b590      	push	{r4, r7, lr}
 800eb02:	b08b      	sub	sp, #44	; 0x2c
 800eb04:	af04      	add	r7, sp, #16
 800eb06:	60f8      	str	r0, [r7, #12]
 800eb08:	60b9      	str	r1, [r7, #8]
 800eb0a:	607a      	str	r2, [r7, #4]
 800eb0c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d106      	bne.n	800eb22 <tcp_rst+0x22>
 800eb14:	4b1f      	ldr	r3, [pc, #124]	; (800eb94 <tcp_rst+0x94>)
 800eb16:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800eb1a:	491f      	ldr	r1, [pc, #124]	; (800eb98 <tcp_rst+0x98>)
 800eb1c:	481f      	ldr	r0, [pc, #124]	; (800eb9c <tcp_rst+0x9c>)
 800eb1e:	f005 f997 	bl	8013e50 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800eb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d106      	bne.n	800eb36 <tcp_rst+0x36>
 800eb28:	4b1a      	ldr	r3, [pc, #104]	; (800eb94 <tcp_rst+0x94>)
 800eb2a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800eb2e:	491c      	ldr	r1, [pc, #112]	; (800eba0 <tcp_rst+0xa0>)
 800eb30:	481a      	ldr	r0, [pc, #104]	; (800eb9c <tcp_rst+0x9c>)
 800eb32:	f005 f98d 	bl	8013e50 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800eb36:	2300      	movs	r3, #0
 800eb38:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800eb3a:	f246 0308 	movw	r3, #24584	; 0x6008
 800eb3e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800eb40:	7dfb      	ldrb	r3, [r7, #23]
 800eb42:	b29c      	uxth	r4, r3
 800eb44:	68b8      	ldr	r0, [r7, #8]
 800eb46:	f7f9 fa4e 	bl	8007fe6 <lwip_htonl>
 800eb4a:	4602      	mov	r2, r0
 800eb4c:	8abb      	ldrh	r3, [r7, #20]
 800eb4e:	9303      	str	r3, [sp, #12]
 800eb50:	2314      	movs	r3, #20
 800eb52:	9302      	str	r3, [sp, #8]
 800eb54:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800eb56:	9301      	str	r3, [sp, #4]
 800eb58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800eb5a:	9300      	str	r3, [sp, #0]
 800eb5c:	4613      	mov	r3, r2
 800eb5e:	2200      	movs	r2, #0
 800eb60:	4621      	mov	r1, r4
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	f7ff fe92 	bl	800e88c <tcp_output_alloc_header_common>
 800eb68:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d00c      	beq.n	800eb8a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800eb70:	7dfb      	ldrb	r3, [r7, #23]
 800eb72:	2200      	movs	r2, #0
 800eb74:	6939      	ldr	r1, [r7, #16]
 800eb76:	68f8      	ldr	r0, [r7, #12]
 800eb78:	f7ff ff38 	bl	800e9ec <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800eb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb7e:	683a      	ldr	r2, [r7, #0]
 800eb80:	6939      	ldr	r1, [r7, #16]
 800eb82:	68f8      	ldr	r0, [r7, #12]
 800eb84:	f7ff ff72 	bl	800ea6c <tcp_output_control_segment>
 800eb88:	e000      	b.n	800eb8c <tcp_rst+0x8c>
    return;
 800eb8a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800eb8c:	371c      	adds	r7, #28
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd90      	pop	{r4, r7, pc}
 800eb92:	bf00      	nop
 800eb94:	08016aac 	.word	0x08016aac
 800eb98:	08017230 	.word	0x08017230
 800eb9c:	08016b00 	.word	0x08016b00
 800eba0:	0801724c 	.word	0x0801724c

0800eba4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800eba4:	b590      	push	{r4, r7, lr}
 800eba6:	b087      	sub	sp, #28
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ebac:	2300      	movs	r3, #0
 800ebae:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d106      	bne.n	800ebc8 <tcp_send_empty_ack+0x24>
 800ebba:	4b28      	ldr	r3, [pc, #160]	; (800ec5c <tcp_send_empty_ack+0xb8>)
 800ebbc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800ebc0:	4927      	ldr	r1, [pc, #156]	; (800ec60 <tcp_send_empty_ack+0xbc>)
 800ebc2:	4828      	ldr	r0, [pc, #160]	; (800ec64 <tcp_send_empty_ack+0xc0>)
 800ebc4:	f005 f944 	bl	8013e50 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ebc8:	7dfb      	ldrb	r3, [r7, #23]
 800ebca:	009b      	lsls	r3, r3, #2
 800ebcc:	b2db      	uxtb	r3, r3
 800ebce:	f003 0304 	and.w	r3, r3, #4
 800ebd2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ebd4:	7d7b      	ldrb	r3, [r7, #21]
 800ebd6:	b29c      	uxth	r4, r3
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f7f9 fa02 	bl	8007fe6 <lwip_htonl>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	4621      	mov	r1, r4
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f7ff fec1 	bl	800e970 <tcp_output_alloc_header>
 800ebee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d109      	bne.n	800ec0a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	8b5b      	ldrh	r3, [r3, #26]
 800ebfa:	f043 0303 	orr.w	r3, r3, #3
 800ebfe:	b29a      	uxth	r2, r3
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ec04:	f06f 0301 	mvn.w	r3, #1
 800ec08:	e023      	b.n	800ec52 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ec0a:	7dbb      	ldrb	r3, [r7, #22]
 800ec0c:	7dfa      	ldrb	r2, [r7, #23]
 800ec0e:	6939      	ldr	r1, [r7, #16]
 800ec10:	6878      	ldr	r0, [r7, #4]
 800ec12:	f7ff feeb 	bl	800e9ec <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ec16:	687a      	ldr	r2, [r7, #4]
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	3304      	adds	r3, #4
 800ec1c:	6939      	ldr	r1, [r7, #16]
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f7ff ff24 	bl	800ea6c <tcp_output_control_segment>
 800ec24:	4603      	mov	r3, r0
 800ec26:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ec28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d007      	beq.n	800ec40 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	8b5b      	ldrh	r3, [r3, #26]
 800ec34:	f043 0303 	orr.w	r3, r3, #3
 800ec38:	b29a      	uxth	r2, r3
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	835a      	strh	r2, [r3, #26]
 800ec3e:	e006      	b.n	800ec4e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	8b5b      	ldrh	r3, [r3, #26]
 800ec44:	f023 0303 	bic.w	r3, r3, #3
 800ec48:	b29a      	uxth	r2, r3
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ec4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	371c      	adds	r7, #28
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd90      	pop	{r4, r7, pc}
 800ec5a:	bf00      	nop
 800ec5c:	08016aac 	.word	0x08016aac
 800ec60:	08017268 	.word	0x08017268
 800ec64:	08016b00 	.word	0x08016b00

0800ec68 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ec68:	b590      	push	{r4, r7, lr}
 800ec6a:	b087      	sub	sp, #28
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ec70:	2300      	movs	r3, #0
 800ec72:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d106      	bne.n	800ec88 <tcp_keepalive+0x20>
 800ec7a:	4b18      	ldr	r3, [pc, #96]	; (800ecdc <tcp_keepalive+0x74>)
 800ec7c:	f640 0224 	movw	r2, #2084	; 0x824
 800ec80:	4917      	ldr	r1, [pc, #92]	; (800ece0 <tcp_keepalive+0x78>)
 800ec82:	4818      	ldr	r0, [pc, #96]	; (800ece4 <tcp_keepalive+0x7c>)
 800ec84:	f005 f8e4 	bl	8013e50 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ec88:	7dfb      	ldrb	r3, [r7, #23]
 800ec8a:	b29c      	uxth	r4, r3
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec90:	3b01      	subs	r3, #1
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7f9 f9a7 	bl	8007fe6 <lwip_htonl>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	4621      	mov	r1, r4
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f7ff fe66 	bl	800e970 <tcp_output_alloc_header>
 800eca4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d102      	bne.n	800ecb2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ecac:	f04f 33ff 	mov.w	r3, #4294967295
 800ecb0:	e010      	b.n	800ecd4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ecb2:	7dfb      	ldrb	r3, [r7, #23]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	6939      	ldr	r1, [r7, #16]
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f7ff fe97 	bl	800e9ec <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ecbe:	687a      	ldr	r2, [r7, #4]
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	3304      	adds	r3, #4
 800ecc4:	6939      	ldr	r1, [r7, #16]
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f7ff fed0 	bl	800ea6c <tcp_output_control_segment>
 800eccc:	4603      	mov	r3, r0
 800ecce:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ecd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	371c      	adds	r7, #28
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd90      	pop	{r4, r7, pc}
 800ecdc:	08016aac 	.word	0x08016aac
 800ece0:	08017288 	.word	0x08017288
 800ece4:	08016b00 	.word	0x08016b00

0800ece8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ece8:	b590      	push	{r4, r7, lr}
 800ecea:	b08b      	sub	sp, #44	; 0x2c
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d106      	bne.n	800ed0a <tcp_zero_window_probe+0x22>
 800ecfc:	4b4c      	ldr	r3, [pc, #304]	; (800ee30 <tcp_zero_window_probe+0x148>)
 800ecfe:	f640 024f 	movw	r2, #2127	; 0x84f
 800ed02:	494c      	ldr	r1, [pc, #304]	; (800ee34 <tcp_zero_window_probe+0x14c>)
 800ed04:	484c      	ldr	r0, [pc, #304]	; (800ee38 <tcp_zero_window_probe+0x150>)
 800ed06:	f005 f8a3 	bl	8013e50 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed0e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ed10:	6a3b      	ldr	r3, [r7, #32]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d101      	bne.n	800ed1a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ed16:	2300      	movs	r3, #0
 800ed18:	e086      	b.n	800ee28 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ed20:	2bff      	cmp	r3, #255	; 0xff
 800ed22:	d007      	beq.n	800ed34 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	b2da      	uxtb	r2, r3
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ed34:	6a3b      	ldr	r3, [r7, #32]
 800ed36:	68db      	ldr	r3, [r3, #12]
 800ed38:	899b      	ldrh	r3, [r3, #12]
 800ed3a:	b29b      	uxth	r3, r3
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f7f9 f93d 	bl	8007fbc <lwip_htons>
 800ed42:	4603      	mov	r3, r0
 800ed44:	b2db      	uxtb	r3, r3
 800ed46:	f003 0301 	and.w	r3, r3, #1
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d005      	beq.n	800ed5a <tcp_zero_window_probe+0x72>
 800ed4e:	6a3b      	ldr	r3, [r7, #32]
 800ed50:	891b      	ldrh	r3, [r3, #8]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d101      	bne.n	800ed5a <tcp_zero_window_probe+0x72>
 800ed56:	2301      	movs	r3, #1
 800ed58:	e000      	b.n	800ed5c <tcp_zero_window_probe+0x74>
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ed5e:	7ffb      	ldrb	r3, [r7, #31]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	bf0c      	ite	eq
 800ed64:	2301      	moveq	r3, #1
 800ed66:	2300      	movne	r3, #0
 800ed68:	b2db      	uxtb	r3, r3
 800ed6a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ed6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed70:	b299      	uxth	r1, r3
 800ed72:	6a3b      	ldr	r3, [r7, #32]
 800ed74:	68db      	ldr	r3, [r3, #12]
 800ed76:	685b      	ldr	r3, [r3, #4]
 800ed78:	8bba      	ldrh	r2, [r7, #28]
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f7ff fdf8 	bl	800e970 <tcp_output_alloc_header>
 800ed80:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ed82:	69bb      	ldr	r3, [r7, #24]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d102      	bne.n	800ed8e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ed88:	f04f 33ff 	mov.w	r3, #4294967295
 800ed8c:	e04c      	b.n	800ee28 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ed8e:	69bb      	ldr	r3, [r7, #24]
 800ed90:	685b      	ldr	r3, [r3, #4]
 800ed92:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ed94:	7ffb      	ldrb	r3, [r7, #31]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d011      	beq.n	800edbe <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	899b      	ldrh	r3, [r3, #12]
 800ed9e:	b29b      	uxth	r3, r3
 800eda0:	b21b      	sxth	r3, r3
 800eda2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800eda6:	b21c      	sxth	r4, r3
 800eda8:	2011      	movs	r0, #17
 800edaa:	f7f9 f907 	bl	8007fbc <lwip_htons>
 800edae:	4603      	mov	r3, r0
 800edb0:	b21b      	sxth	r3, r3
 800edb2:	4323      	orrs	r3, r4
 800edb4:	b21b      	sxth	r3, r3
 800edb6:	b29a      	uxth	r2, r3
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	819a      	strh	r2, [r3, #12]
 800edbc:	e010      	b.n	800ede0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800edbe:	69bb      	ldr	r3, [r7, #24]
 800edc0:	685b      	ldr	r3, [r3, #4]
 800edc2:	3314      	adds	r3, #20
 800edc4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800edc6:	6a3b      	ldr	r3, [r7, #32]
 800edc8:	6858      	ldr	r0, [r3, #4]
 800edca:	6a3b      	ldr	r3, [r7, #32]
 800edcc:	685b      	ldr	r3, [r3, #4]
 800edce:	891a      	ldrh	r2, [r3, #8]
 800edd0:	6a3b      	ldr	r3, [r7, #32]
 800edd2:	891b      	ldrh	r3, [r3, #8]
 800edd4:	1ad3      	subs	r3, r2, r3
 800edd6:	b29b      	uxth	r3, r3
 800edd8:	2201      	movs	r2, #1
 800edda:	6939      	ldr	r1, [r7, #16]
 800eddc:	f7fa fe52 	bl	8009a84 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ede0:	6a3b      	ldr	r3, [r7, #32]
 800ede2:	68db      	ldr	r3, [r3, #12]
 800ede4:	685b      	ldr	r3, [r3, #4]
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7f9 f8fd 	bl	8007fe6 <lwip_htonl>
 800edec:	4603      	mov	r3, r0
 800edee:	3301      	adds	r3, #1
 800edf0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	1ad3      	subs	r3, r2, r3
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	da02      	bge.n	800ee04 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	68fa      	ldr	r2, [r7, #12]
 800ee02:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ee04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee08:	2200      	movs	r2, #0
 800ee0a:	69b9      	ldr	r1, [r7, #24]
 800ee0c:	6878      	ldr	r0, [r7, #4]
 800ee0e:	f7ff fded 	bl	800e9ec <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ee12:	687a      	ldr	r2, [r7, #4]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	3304      	adds	r3, #4
 800ee18:	69b9      	ldr	r1, [r7, #24]
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	f7ff fe26 	bl	800ea6c <tcp_output_control_segment>
 800ee20:	4603      	mov	r3, r0
 800ee22:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ee24:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ee28:	4618      	mov	r0, r3
 800ee2a:	372c      	adds	r7, #44	; 0x2c
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd90      	pop	{r4, r7, pc}
 800ee30:	08016aac 	.word	0x08016aac
 800ee34:	080172a4 	.word	0x080172a4
 800ee38:	08016b00 	.word	0x08016b00

0800ee3c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b082      	sub	sp, #8
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ee44:	f7fa ff0c 	bl	8009c60 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ee48:	4b0a      	ldr	r3, [pc, #40]	; (800ee74 <tcpip_tcp_timer+0x38>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d103      	bne.n	800ee58 <tcpip_tcp_timer+0x1c>
 800ee50:	4b09      	ldr	r3, [pc, #36]	; (800ee78 <tcpip_tcp_timer+0x3c>)
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d005      	beq.n	800ee64 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ee58:	2200      	movs	r2, #0
 800ee5a:	4908      	ldr	r1, [pc, #32]	; (800ee7c <tcpip_tcp_timer+0x40>)
 800ee5c:	20fa      	movs	r0, #250	; 0xfa
 800ee5e:	f000 f8f3 	bl	800f048 <sys_timeout>
 800ee62:	e003      	b.n	800ee6c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ee64:	4b06      	ldr	r3, [pc, #24]	; (800ee80 <tcpip_tcp_timer+0x44>)
 800ee66:	2200      	movs	r2, #0
 800ee68:	601a      	str	r2, [r3, #0]
  }
}
 800ee6a:	bf00      	nop
 800ee6c:	bf00      	nop
 800ee6e:	3708      	adds	r7, #8
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}
 800ee74:	2000aecc 	.word	0x2000aecc
 800ee78:	2000aed0 	.word	0x2000aed0
 800ee7c:	0800ee3d 	.word	0x0800ee3d
 800ee80:	2000af18 	.word	0x2000af18

0800ee84 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ee88:	4b0a      	ldr	r3, [pc, #40]	; (800eeb4 <tcp_timer_needed+0x30>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d10f      	bne.n	800eeb0 <tcp_timer_needed+0x2c>
 800ee90:	4b09      	ldr	r3, [pc, #36]	; (800eeb8 <tcp_timer_needed+0x34>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d103      	bne.n	800eea0 <tcp_timer_needed+0x1c>
 800ee98:	4b08      	ldr	r3, [pc, #32]	; (800eebc <tcp_timer_needed+0x38>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d007      	beq.n	800eeb0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800eea0:	4b04      	ldr	r3, [pc, #16]	; (800eeb4 <tcp_timer_needed+0x30>)
 800eea2:	2201      	movs	r2, #1
 800eea4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800eea6:	2200      	movs	r2, #0
 800eea8:	4905      	ldr	r1, [pc, #20]	; (800eec0 <tcp_timer_needed+0x3c>)
 800eeaa:	20fa      	movs	r0, #250	; 0xfa
 800eeac:	f000 f8cc 	bl	800f048 <sys_timeout>
  }
}
 800eeb0:	bf00      	nop
 800eeb2:	bd80      	pop	{r7, pc}
 800eeb4:	2000af18 	.word	0x2000af18
 800eeb8:	2000aecc 	.word	0x2000aecc
 800eebc:	2000aed0 	.word	0x2000aed0
 800eec0:	0800ee3d 	.word	0x0800ee3d

0800eec4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b086      	sub	sp, #24
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	60f8      	str	r0, [r7, #12]
 800eecc:	60b9      	str	r1, [r7, #8]
 800eece:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800eed0:	2006      	movs	r0, #6
 800eed2:	f7f9 fceb 	bl	80088ac <memp_malloc>
 800eed6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800eed8:	693b      	ldr	r3, [r7, #16]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d109      	bne.n	800eef2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d151      	bne.n	800ef88 <sys_timeout_abs+0xc4>
 800eee4:	4b2a      	ldr	r3, [pc, #168]	; (800ef90 <sys_timeout_abs+0xcc>)
 800eee6:	22be      	movs	r2, #190	; 0xbe
 800eee8:	492a      	ldr	r1, [pc, #168]	; (800ef94 <sys_timeout_abs+0xd0>)
 800eeea:	482b      	ldr	r0, [pc, #172]	; (800ef98 <sys_timeout_abs+0xd4>)
 800eeec:	f004 ffb0 	bl	8013e50 <iprintf>
    return;
 800eef0:	e04a      	b.n	800ef88 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	2200      	movs	r2, #0
 800eef6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800eef8:	693b      	ldr	r3, [r7, #16]
 800eefa:	68ba      	ldr	r2, [r7, #8]
 800eefc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800eefe:	693b      	ldr	r3, [r7, #16]
 800ef00:	687a      	ldr	r2, [r7, #4]
 800ef02:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	68fa      	ldr	r2, [r7, #12]
 800ef08:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ef0a:	4b24      	ldr	r3, [pc, #144]	; (800ef9c <sys_timeout_abs+0xd8>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d103      	bne.n	800ef1a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ef12:	4a22      	ldr	r2, [pc, #136]	; (800ef9c <sys_timeout_abs+0xd8>)
 800ef14:	693b      	ldr	r3, [r7, #16]
 800ef16:	6013      	str	r3, [r2, #0]
    return;
 800ef18:	e037      	b.n	800ef8a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ef1a:	693b      	ldr	r3, [r7, #16]
 800ef1c:	685a      	ldr	r2, [r3, #4]
 800ef1e:	4b1f      	ldr	r3, [pc, #124]	; (800ef9c <sys_timeout_abs+0xd8>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	685b      	ldr	r3, [r3, #4]
 800ef24:	1ad3      	subs	r3, r2, r3
 800ef26:	0fdb      	lsrs	r3, r3, #31
 800ef28:	f003 0301 	and.w	r3, r3, #1
 800ef2c:	b2db      	uxtb	r3, r3
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d007      	beq.n	800ef42 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ef32:	4b1a      	ldr	r3, [pc, #104]	; (800ef9c <sys_timeout_abs+0xd8>)
 800ef34:	681a      	ldr	r2, [r3, #0]
 800ef36:	693b      	ldr	r3, [r7, #16]
 800ef38:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ef3a:	4a18      	ldr	r2, [pc, #96]	; (800ef9c <sys_timeout_abs+0xd8>)
 800ef3c:	693b      	ldr	r3, [r7, #16]
 800ef3e:	6013      	str	r3, [r2, #0]
 800ef40:	e023      	b.n	800ef8a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ef42:	4b16      	ldr	r3, [pc, #88]	; (800ef9c <sys_timeout_abs+0xd8>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	617b      	str	r3, [r7, #20]
 800ef48:	e01a      	b.n	800ef80 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d00b      	beq.n	800ef6a <sys_timeout_abs+0xa6>
 800ef52:	693b      	ldr	r3, [r7, #16]
 800ef54:	685a      	ldr	r2, [r3, #4]
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	1ad3      	subs	r3, r2, r3
 800ef5e:	0fdb      	lsrs	r3, r3, #31
 800ef60:	f003 0301 	and.w	r3, r3, #1
 800ef64:	b2db      	uxtb	r3, r3
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d007      	beq.n	800ef7a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	681a      	ldr	r2, [r3, #0]
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	693a      	ldr	r2, [r7, #16]
 800ef76:	601a      	str	r2, [r3, #0]
        break;
 800ef78:	e007      	b.n	800ef8a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	617b      	str	r3, [r7, #20]
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d1e1      	bne.n	800ef4a <sys_timeout_abs+0x86>
 800ef86:	e000      	b.n	800ef8a <sys_timeout_abs+0xc6>
    return;
 800ef88:	bf00      	nop
      }
    }
  }
}
 800ef8a:	3718      	adds	r7, #24
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}
 800ef90:	080172c8 	.word	0x080172c8
 800ef94:	080172fc 	.word	0x080172fc
 800ef98:	0801733c 	.word	0x0801733c
 800ef9c:	2000af10 	.word	0x2000af10

0800efa0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b086      	sub	sp, #24
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800efac:	697b      	ldr	r3, [r7, #20]
 800efae:	685b      	ldr	r3, [r3, #4]
 800efb0:	4798      	blx	r3

  now = sys_now();
 800efb2:	f7f8 fdef 	bl	8007b94 <sys_now>
 800efb6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	681a      	ldr	r2, [r3, #0]
 800efbc:	4b0f      	ldr	r3, [pc, #60]	; (800effc <lwip_cyclic_timer+0x5c>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	4413      	add	r3, r2
 800efc2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800efc4:	68fa      	ldr	r2, [r7, #12]
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	1ad3      	subs	r3, r2, r3
 800efca:	0fdb      	lsrs	r3, r3, #31
 800efcc:	f003 0301 	and.w	r3, r3, #1
 800efd0:	b2db      	uxtb	r3, r3
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d009      	beq.n	800efea <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	681a      	ldr	r2, [r3, #0]
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	4413      	add	r3, r2
 800efde:	687a      	ldr	r2, [r7, #4]
 800efe0:	4907      	ldr	r1, [pc, #28]	; (800f000 <lwip_cyclic_timer+0x60>)
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7ff ff6e 	bl	800eec4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800efe8:	e004      	b.n	800eff4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800efea:	687a      	ldr	r2, [r7, #4]
 800efec:	4904      	ldr	r1, [pc, #16]	; (800f000 <lwip_cyclic_timer+0x60>)
 800efee:	68f8      	ldr	r0, [r7, #12]
 800eff0:	f7ff ff68 	bl	800eec4 <sys_timeout_abs>
}
 800eff4:	bf00      	nop
 800eff6:	3718      	adds	r7, #24
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}
 800effc:	2000af14 	.word	0x2000af14
 800f000:	0800efa1 	.word	0x0800efa1

0800f004 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b082      	sub	sp, #8
 800f008:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f00a:	2301      	movs	r3, #1
 800f00c:	607b      	str	r3, [r7, #4]
 800f00e:	e00e      	b.n	800f02e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f010:	4a0b      	ldr	r2, [pc, #44]	; (800f040 <sys_timeouts_init+0x3c>)
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	00db      	lsls	r3, r3, #3
 800f01c:	4a08      	ldr	r2, [pc, #32]	; (800f040 <sys_timeouts_init+0x3c>)
 800f01e:	4413      	add	r3, r2
 800f020:	461a      	mov	r2, r3
 800f022:	4908      	ldr	r1, [pc, #32]	; (800f044 <sys_timeouts_init+0x40>)
 800f024:	f000 f810 	bl	800f048 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	3301      	adds	r3, #1
 800f02c:	607b      	str	r3, [r7, #4]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2b04      	cmp	r3, #4
 800f032:	d9ed      	bls.n	800f010 <sys_timeouts_init+0xc>
  }
}
 800f034:	bf00      	nop
 800f036:	bf00      	nop
 800f038:	3708      	adds	r7, #8
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}
 800f03e:	bf00      	nop
 800f040:	0801a77c 	.word	0x0801a77c
 800f044:	0800efa1 	.word	0x0800efa1

0800f048 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b086      	sub	sp, #24
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	60f8      	str	r0, [r7, #12]
 800f050:	60b9      	str	r1, [r7, #8]
 800f052:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f05a:	d306      	bcc.n	800f06a <sys_timeout+0x22>
 800f05c:	4b0a      	ldr	r3, [pc, #40]	; (800f088 <sys_timeout+0x40>)
 800f05e:	f240 1229 	movw	r2, #297	; 0x129
 800f062:	490a      	ldr	r1, [pc, #40]	; (800f08c <sys_timeout+0x44>)
 800f064:	480a      	ldr	r0, [pc, #40]	; (800f090 <sys_timeout+0x48>)
 800f066:	f004 fef3 	bl	8013e50 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f06a:	f7f8 fd93 	bl	8007b94 <sys_now>
 800f06e:	4602      	mov	r2, r0
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	4413      	add	r3, r2
 800f074:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f076:	687a      	ldr	r2, [r7, #4]
 800f078:	68b9      	ldr	r1, [r7, #8]
 800f07a:	6978      	ldr	r0, [r7, #20]
 800f07c:	f7ff ff22 	bl	800eec4 <sys_timeout_abs>
#endif
}
 800f080:	bf00      	nop
 800f082:	3718      	adds	r7, #24
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}
 800f088:	080172c8 	.word	0x080172c8
 800f08c:	08017364 	.word	0x08017364
 800f090:	0801733c 	.word	0x0801733c

0800f094 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b084      	sub	sp, #16
 800f098:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f09a:	f7f8 fd7b 	bl	8007b94 <sys_now>
 800f09e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800f0a0:	4b1a      	ldr	r3, [pc, #104]	; (800f10c <sys_check_timeouts+0x78>)
 800f0a2:	781b      	ldrb	r3, [r3, #0]
 800f0a4:	b2db      	uxtb	r3, r3
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d001      	beq.n	800f0ae <sys_check_timeouts+0x1a>
 800f0aa:	f7f9 ffb7 	bl	800901c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800f0ae:	4b18      	ldr	r3, [pc, #96]	; (800f110 <sys_check_timeouts+0x7c>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d022      	beq.n	800f100 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	685b      	ldr	r3, [r3, #4]
 800f0be:	68fa      	ldr	r2, [r7, #12]
 800f0c0:	1ad3      	subs	r3, r2, r3
 800f0c2:	0fdb      	lsrs	r3, r3, #31
 800f0c4:	f003 0301 	and.w	r3, r3, #1
 800f0c8:	b2db      	uxtb	r3, r3
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d11a      	bne.n	800f104 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	4a0f      	ldr	r2, [pc, #60]	; (800f110 <sys_check_timeouts+0x7c>)
 800f0d4:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	689b      	ldr	r3, [r3, #8]
 800f0da:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	68db      	ldr	r3, [r3, #12]
 800f0e0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	685b      	ldr	r3, [r3, #4]
 800f0e6:	4a0b      	ldr	r2, [pc, #44]	; (800f114 <sys_check_timeouts+0x80>)
 800f0e8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f0ea:	68b9      	ldr	r1, [r7, #8]
 800f0ec:	2006      	movs	r0, #6
 800f0ee:	f7f9 fc4d 	bl	800898c <memp_free>
    if (handler != NULL) {
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d0d3      	beq.n	800f0a0 <sys_check_timeouts+0xc>
      handler(arg);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6838      	ldr	r0, [r7, #0]
 800f0fc:	4798      	blx	r3
  do {
 800f0fe:	e7cf      	b.n	800f0a0 <sys_check_timeouts+0xc>
      return;
 800f100:	bf00      	nop
 800f102:	e000      	b.n	800f106 <sys_check_timeouts+0x72>
      return;
 800f104:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f106:	3710      	adds	r7, #16
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}
 800f10c:	2000aebd 	.word	0x2000aebd
 800f110:	2000af10 	.word	0x2000af10
 800f114:	2000af14 	.word	0x2000af14

0800f118 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f11c:	f004 feb0 	bl	8013e80 <rand>
 800f120:	4603      	mov	r3, r0
 800f122:	b29b      	uxth	r3, r3
 800f124:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f128:	b29b      	uxth	r3, r3
 800f12a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f12e:	b29a      	uxth	r2, r3
 800f130:	4b01      	ldr	r3, [pc, #4]	; (800f138 <udp_init+0x20>)
 800f132:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f134:	bf00      	nop
 800f136:	bd80      	pop	{r7, pc}
 800f138:	20000040 	.word	0x20000040

0800f13c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800f13c:	b480      	push	{r7}
 800f13e:	b083      	sub	sp, #12
 800f140:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800f142:	2300      	movs	r3, #0
 800f144:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800f146:	4b17      	ldr	r3, [pc, #92]	; (800f1a4 <udp_new_port+0x68>)
 800f148:	881b      	ldrh	r3, [r3, #0]
 800f14a:	1c5a      	adds	r2, r3, #1
 800f14c:	b291      	uxth	r1, r2
 800f14e:	4a15      	ldr	r2, [pc, #84]	; (800f1a4 <udp_new_port+0x68>)
 800f150:	8011      	strh	r1, [r2, #0]
 800f152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f156:	4293      	cmp	r3, r2
 800f158:	d103      	bne.n	800f162 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800f15a:	4b12      	ldr	r3, [pc, #72]	; (800f1a4 <udp_new_port+0x68>)
 800f15c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f160:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f162:	4b11      	ldr	r3, [pc, #68]	; (800f1a8 <udp_new_port+0x6c>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	603b      	str	r3, [r7, #0]
 800f168:	e011      	b.n	800f18e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	8a5a      	ldrh	r2, [r3, #18]
 800f16e:	4b0d      	ldr	r3, [pc, #52]	; (800f1a4 <udp_new_port+0x68>)
 800f170:	881b      	ldrh	r3, [r3, #0]
 800f172:	429a      	cmp	r2, r3
 800f174:	d108      	bne.n	800f188 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800f176:	88fb      	ldrh	r3, [r7, #6]
 800f178:	3301      	adds	r3, #1
 800f17a:	80fb      	strh	r3, [r7, #6]
 800f17c:	88fb      	ldrh	r3, [r7, #6]
 800f17e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f182:	d3e0      	bcc.n	800f146 <udp_new_port+0xa>
        return 0;
 800f184:	2300      	movs	r3, #0
 800f186:	e007      	b.n	800f198 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	68db      	ldr	r3, [r3, #12]
 800f18c:	603b      	str	r3, [r7, #0]
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d1ea      	bne.n	800f16a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800f194:	4b03      	ldr	r3, [pc, #12]	; (800f1a4 <udp_new_port+0x68>)
 800f196:	881b      	ldrh	r3, [r3, #0]
}
 800f198:	4618      	mov	r0, r3
 800f19a:	370c      	adds	r7, #12
 800f19c:	46bd      	mov	sp, r7
 800f19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a2:	4770      	bx	lr
 800f1a4:	20000040 	.word	0x20000040
 800f1a8:	2000af1c 	.word	0x2000af1c

0800f1ac <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b084      	sub	sp, #16
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	4613      	mov	r3, r2
 800f1b8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d105      	bne.n	800f1cc <udp_input_local_match+0x20>
 800f1c0:	4b27      	ldr	r3, [pc, #156]	; (800f260 <udp_input_local_match+0xb4>)
 800f1c2:	2287      	movs	r2, #135	; 0x87
 800f1c4:	4927      	ldr	r1, [pc, #156]	; (800f264 <udp_input_local_match+0xb8>)
 800f1c6:	4828      	ldr	r0, [pc, #160]	; (800f268 <udp_input_local_match+0xbc>)
 800f1c8:	f004 fe42 	bl	8013e50 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d105      	bne.n	800f1de <udp_input_local_match+0x32>
 800f1d2:	4b23      	ldr	r3, [pc, #140]	; (800f260 <udp_input_local_match+0xb4>)
 800f1d4:	2288      	movs	r2, #136	; 0x88
 800f1d6:	4925      	ldr	r1, [pc, #148]	; (800f26c <udp_input_local_match+0xc0>)
 800f1d8:	4823      	ldr	r0, [pc, #140]	; (800f268 <udp_input_local_match+0xbc>)
 800f1da:	f004 fe39 	bl	8013e50 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	7a1b      	ldrb	r3, [r3, #8]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d00b      	beq.n	800f1fe <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	7a1a      	ldrb	r2, [r3, #8]
 800f1ea:	4b21      	ldr	r3, [pc, #132]	; (800f270 <udp_input_local_match+0xc4>)
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f1f2:	3301      	adds	r3, #1
 800f1f4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f1f6:	429a      	cmp	r2, r3
 800f1f8:	d001      	beq.n	800f1fe <udp_input_local_match+0x52>
    return 0;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	e02b      	b.n	800f256 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f1fe:	79fb      	ldrb	r3, [r7, #7]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d018      	beq.n	800f236 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d013      	beq.n	800f232 <udp_input_local_match+0x86>
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d00f      	beq.n	800f232 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f212:	4b17      	ldr	r3, [pc, #92]	; (800f270 <udp_input_local_match+0xc4>)
 800f214:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f21a:	d00a      	beq.n	800f232 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	681a      	ldr	r2, [r3, #0]
 800f220:	4b13      	ldr	r3, [pc, #76]	; (800f270 <udp_input_local_match+0xc4>)
 800f222:	695b      	ldr	r3, [r3, #20]
 800f224:	405a      	eors	r2, r3
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	3308      	adds	r3, #8
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d110      	bne.n	800f254 <udp_input_local_match+0xa8>
          return 1;
 800f232:	2301      	movs	r3, #1
 800f234:	e00f      	b.n	800f256 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d009      	beq.n	800f250 <udp_input_local_match+0xa4>
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d005      	beq.n	800f250 <udp_input_local_match+0xa4>
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	681a      	ldr	r2, [r3, #0]
 800f248:	4b09      	ldr	r3, [pc, #36]	; (800f270 <udp_input_local_match+0xc4>)
 800f24a:	695b      	ldr	r3, [r3, #20]
 800f24c:	429a      	cmp	r2, r3
 800f24e:	d101      	bne.n	800f254 <udp_input_local_match+0xa8>
        return 1;
 800f250:	2301      	movs	r3, #1
 800f252:	e000      	b.n	800f256 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f254:	2300      	movs	r3, #0
}
 800f256:	4618      	mov	r0, r3
 800f258:	3710      	adds	r7, #16
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
 800f25e:	bf00      	nop
 800f260:	080173b0 	.word	0x080173b0
 800f264:	080173e0 	.word	0x080173e0
 800f268:	08017404 	.word	0x08017404
 800f26c:	0801742c 	.word	0x0801742c
 800f270:	20005770 	.word	0x20005770

0800f274 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f274:	b590      	push	{r4, r7, lr}
 800f276:	b08d      	sub	sp, #52	; 0x34
 800f278:	af02      	add	r7, sp, #8
 800f27a:	6078      	str	r0, [r7, #4]
 800f27c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f27e:	2300      	movs	r3, #0
 800f280:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d105      	bne.n	800f294 <udp_input+0x20>
 800f288:	4b7c      	ldr	r3, [pc, #496]	; (800f47c <udp_input+0x208>)
 800f28a:	22cf      	movs	r2, #207	; 0xcf
 800f28c:	497c      	ldr	r1, [pc, #496]	; (800f480 <udp_input+0x20c>)
 800f28e:	487d      	ldr	r0, [pc, #500]	; (800f484 <udp_input+0x210>)
 800f290:	f004 fdde 	bl	8013e50 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d105      	bne.n	800f2a6 <udp_input+0x32>
 800f29a:	4b78      	ldr	r3, [pc, #480]	; (800f47c <udp_input+0x208>)
 800f29c:	22d0      	movs	r2, #208	; 0xd0
 800f29e:	497a      	ldr	r1, [pc, #488]	; (800f488 <udp_input+0x214>)
 800f2a0:	4878      	ldr	r0, [pc, #480]	; (800f484 <udp_input+0x210>)
 800f2a2:	f004 fdd5 	bl	8013e50 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	895b      	ldrh	r3, [r3, #10]
 800f2aa:	2b07      	cmp	r3, #7
 800f2ac:	d803      	bhi.n	800f2b6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f7fa f9ee 	bl	8009690 <pbuf_free>
    goto end;
 800f2b4:	e0de      	b.n	800f474 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	685b      	ldr	r3, [r3, #4]
 800f2ba:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f2bc:	4b73      	ldr	r3, [pc, #460]	; (800f48c <udp_input+0x218>)
 800f2be:	695b      	ldr	r3, [r3, #20]
 800f2c0:	4a72      	ldr	r2, [pc, #456]	; (800f48c <udp_input+0x218>)
 800f2c2:	6812      	ldr	r2, [r2, #0]
 800f2c4:	4611      	mov	r1, r2
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f003 fe08 	bl	8012edc <ip4_addr_isbroadcast_u32>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f2d0:	697b      	ldr	r3, [r7, #20]
 800f2d2:	881b      	ldrh	r3, [r3, #0]
 800f2d4:	b29b      	uxth	r3, r3
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7f8 fe70 	bl	8007fbc <lwip_htons>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	885b      	ldrh	r3, [r3, #2]
 800f2e4:	b29b      	uxth	r3, r3
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f7f8 fe68 	bl	8007fbc <lwip_htons>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f2fc:	4b64      	ldr	r3, [pc, #400]	; (800f490 <udp_input+0x21c>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	627b      	str	r3, [r7, #36]	; 0x24
 800f302:	e054      	b.n	800f3ae <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f306:	8a5b      	ldrh	r3, [r3, #18]
 800f308:	89fa      	ldrh	r2, [r7, #14]
 800f30a:	429a      	cmp	r2, r3
 800f30c:	d14a      	bne.n	800f3a4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f30e:	7cfb      	ldrb	r3, [r7, #19]
 800f310:	461a      	mov	r2, r3
 800f312:	6839      	ldr	r1, [r7, #0]
 800f314:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f316:	f7ff ff49 	bl	800f1ac <udp_input_local_match>
 800f31a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d041      	beq.n	800f3a4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f322:	7c1b      	ldrb	r3, [r3, #16]
 800f324:	f003 0304 	and.w	r3, r3, #4
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d11d      	bne.n	800f368 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f32c:	69fb      	ldr	r3, [r7, #28]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d102      	bne.n	800f338 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f334:	61fb      	str	r3, [r7, #28]
 800f336:	e017      	b.n	800f368 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f338:	7cfb      	ldrb	r3, [r7, #19]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d014      	beq.n	800f368 <udp_input+0xf4>
 800f33e:	4b53      	ldr	r3, [pc, #332]	; (800f48c <udp_input+0x218>)
 800f340:	695b      	ldr	r3, [r3, #20]
 800f342:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f346:	d10f      	bne.n	800f368 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f348:	69fb      	ldr	r3, [r7, #28]
 800f34a:	681a      	ldr	r2, [r3, #0]
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	3304      	adds	r3, #4
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	429a      	cmp	r2, r3
 800f354:	d008      	beq.n	800f368 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f358:	681a      	ldr	r2, [r3, #0]
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	3304      	adds	r3, #4
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	429a      	cmp	r2, r3
 800f362:	d101      	bne.n	800f368 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f366:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f36a:	8a9b      	ldrh	r3, [r3, #20]
 800f36c:	8a3a      	ldrh	r2, [r7, #16]
 800f36e:	429a      	cmp	r2, r3
 800f370:	d118      	bne.n	800f3a4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f374:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f376:	2b00      	cmp	r3, #0
 800f378:	d005      	beq.n	800f386 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f37c:	685a      	ldr	r2, [r3, #4]
 800f37e:	4b43      	ldr	r3, [pc, #268]	; (800f48c <udp_input+0x218>)
 800f380:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f382:	429a      	cmp	r2, r3
 800f384:	d10e      	bne.n	800f3a4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f386:	6a3b      	ldr	r3, [r7, #32]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d014      	beq.n	800f3b6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38e:	68da      	ldr	r2, [r3, #12]
 800f390:	6a3b      	ldr	r3, [r7, #32]
 800f392:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f394:	4b3e      	ldr	r3, [pc, #248]	; (800f490 <udp_input+0x21c>)
 800f396:	681a      	ldr	r2, [r3, #0]
 800f398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f39a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f39c:	4a3c      	ldr	r2, [pc, #240]	; (800f490 <udp_input+0x21c>)
 800f39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f3a2:	e008      	b.n	800f3b6 <udp_input+0x142>
      }
    }

    prev = pcb;
 800f3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3aa:	68db      	ldr	r3, [r3, #12]
 800f3ac:	627b      	str	r3, [r7, #36]	; 0x24
 800f3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d1a7      	bne.n	800f304 <udp_input+0x90>
 800f3b4:	e000      	b.n	800f3b8 <udp_input+0x144>
        break;
 800f3b6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d101      	bne.n	800f3c2 <udp_input+0x14e>
    pcb = uncon_pcb;
 800f3be:	69fb      	ldr	r3, [r7, #28]
 800f3c0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d002      	beq.n	800f3ce <udp_input+0x15a>
    for_us = 1;
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	76fb      	strb	r3, [r7, #27]
 800f3cc:	e00a      	b.n	800f3e4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	3304      	adds	r3, #4
 800f3d2:	681a      	ldr	r2, [r3, #0]
 800f3d4:	4b2d      	ldr	r3, [pc, #180]	; (800f48c <udp_input+0x218>)
 800f3d6:	695b      	ldr	r3, [r3, #20]
 800f3d8:	429a      	cmp	r2, r3
 800f3da:	bf0c      	ite	eq
 800f3dc:	2301      	moveq	r3, #1
 800f3de:	2300      	movne	r3, #0
 800f3e0:	b2db      	uxtb	r3, r3
 800f3e2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f3e4:	7efb      	ldrb	r3, [r7, #27]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d041      	beq.n	800f46e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f3ea:	2108      	movs	r1, #8
 800f3ec:	6878      	ldr	r0, [r7, #4]
 800f3ee:	f7fa f8c9 	bl	8009584 <pbuf_remove_header>
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d00a      	beq.n	800f40e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f3f8:	4b20      	ldr	r3, [pc, #128]	; (800f47c <udp_input+0x208>)
 800f3fa:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800f3fe:	4925      	ldr	r1, [pc, #148]	; (800f494 <udp_input+0x220>)
 800f400:	4820      	ldr	r0, [pc, #128]	; (800f484 <udp_input+0x210>)
 800f402:	f004 fd25 	bl	8013e50 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f406:	6878      	ldr	r0, [r7, #4]
 800f408:	f7fa f942 	bl	8009690 <pbuf_free>
      goto end;
 800f40c:	e032      	b.n	800f474 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f410:	2b00      	cmp	r3, #0
 800f412:	d012      	beq.n	800f43a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f416:	699b      	ldr	r3, [r3, #24]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d00a      	beq.n	800f432 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f41e:	699c      	ldr	r4, [r3, #24]
 800f420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f422:	69d8      	ldr	r0, [r3, #28]
 800f424:	8a3b      	ldrh	r3, [r7, #16]
 800f426:	9300      	str	r3, [sp, #0]
 800f428:	4b1b      	ldr	r3, [pc, #108]	; (800f498 <udp_input+0x224>)
 800f42a:	687a      	ldr	r2, [r7, #4]
 800f42c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f42e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f430:	e021      	b.n	800f476 <udp_input+0x202>
        pbuf_free(p);
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f7fa f92c 	bl	8009690 <pbuf_free>
        goto end;
 800f438:	e01c      	b.n	800f474 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f43a:	7cfb      	ldrb	r3, [r7, #19]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d112      	bne.n	800f466 <udp_input+0x1f2>
 800f440:	4b12      	ldr	r3, [pc, #72]	; (800f48c <udp_input+0x218>)
 800f442:	695b      	ldr	r3, [r3, #20]
 800f444:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f448:	2be0      	cmp	r3, #224	; 0xe0
 800f44a:	d00c      	beq.n	800f466 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f44c:	4b0f      	ldr	r3, [pc, #60]	; (800f48c <udp_input+0x218>)
 800f44e:	899b      	ldrh	r3, [r3, #12]
 800f450:	3308      	adds	r3, #8
 800f452:	b29b      	uxth	r3, r3
 800f454:	b21b      	sxth	r3, r3
 800f456:	4619      	mov	r1, r3
 800f458:	6878      	ldr	r0, [r7, #4]
 800f45a:	f7fa f906 	bl	800966a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f45e:	2103      	movs	r1, #3
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f003 f9fd 	bl	8012860 <icmp_dest_unreach>
      pbuf_free(p);
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f7fa f912 	bl	8009690 <pbuf_free>
  return;
 800f46c:	e003      	b.n	800f476 <udp_input+0x202>
    pbuf_free(p);
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f7fa f90e 	bl	8009690 <pbuf_free>
  return;
 800f474:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f476:	372c      	adds	r7, #44	; 0x2c
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd90      	pop	{r4, r7, pc}
 800f47c:	080173b0 	.word	0x080173b0
 800f480:	08017454 	.word	0x08017454
 800f484:	08017404 	.word	0x08017404
 800f488:	0801746c 	.word	0x0801746c
 800f48c:	20005770 	.word	0x20005770
 800f490:	2000af1c 	.word	0x2000af1c
 800f494:	08017488 	.word	0x08017488
 800f498:	20005780 	.word	0x20005780

0800f49c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b088      	sub	sp, #32
 800f4a0:	af02      	add	r7, sp, #8
 800f4a2:	60f8      	str	r0, [r7, #12]
 800f4a4:	60b9      	str	r1, [r7, #8]
 800f4a6:	607a      	str	r2, [r7, #4]
 800f4a8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d109      	bne.n	800f4c4 <udp_sendto_if+0x28>
 800f4b0:	4b2e      	ldr	r3, [pc, #184]	; (800f56c <udp_sendto_if+0xd0>)
 800f4b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f4b6:	492e      	ldr	r1, [pc, #184]	; (800f570 <udp_sendto_if+0xd4>)
 800f4b8:	482e      	ldr	r0, [pc, #184]	; (800f574 <udp_sendto_if+0xd8>)
 800f4ba:	f004 fcc9 	bl	8013e50 <iprintf>
 800f4be:	f06f 030f 	mvn.w	r3, #15
 800f4c2:	e04f      	b.n	800f564 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d109      	bne.n	800f4de <udp_sendto_if+0x42>
 800f4ca:	4b28      	ldr	r3, [pc, #160]	; (800f56c <udp_sendto_if+0xd0>)
 800f4cc:	f240 2281 	movw	r2, #641	; 0x281
 800f4d0:	4929      	ldr	r1, [pc, #164]	; (800f578 <udp_sendto_if+0xdc>)
 800f4d2:	4828      	ldr	r0, [pc, #160]	; (800f574 <udp_sendto_if+0xd8>)
 800f4d4:	f004 fcbc 	bl	8013e50 <iprintf>
 800f4d8:	f06f 030f 	mvn.w	r3, #15
 800f4dc:	e042      	b.n	800f564 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d109      	bne.n	800f4f8 <udp_sendto_if+0x5c>
 800f4e4:	4b21      	ldr	r3, [pc, #132]	; (800f56c <udp_sendto_if+0xd0>)
 800f4e6:	f240 2282 	movw	r2, #642	; 0x282
 800f4ea:	4924      	ldr	r1, [pc, #144]	; (800f57c <udp_sendto_if+0xe0>)
 800f4ec:	4821      	ldr	r0, [pc, #132]	; (800f574 <udp_sendto_if+0xd8>)
 800f4ee:	f004 fcaf 	bl	8013e50 <iprintf>
 800f4f2:	f06f 030f 	mvn.w	r3, #15
 800f4f6:	e035      	b.n	800f564 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800f4f8:	6a3b      	ldr	r3, [r7, #32]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d109      	bne.n	800f512 <udp_sendto_if+0x76>
 800f4fe:	4b1b      	ldr	r3, [pc, #108]	; (800f56c <udp_sendto_if+0xd0>)
 800f500:	f240 2283 	movw	r2, #643	; 0x283
 800f504:	491e      	ldr	r1, [pc, #120]	; (800f580 <udp_sendto_if+0xe4>)
 800f506:	481b      	ldr	r0, [pc, #108]	; (800f574 <udp_sendto_if+0xd8>)
 800f508:	f004 fca2 	bl	8013e50 <iprintf>
 800f50c:	f06f 030f 	mvn.w	r3, #15
 800f510:	e028      	b.n	800f564 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d009      	beq.n	800f52c <udp_sendto_if+0x90>
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d005      	beq.n	800f52c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f528:	2be0      	cmp	r3, #224	; 0xe0
 800f52a:	d103      	bne.n	800f534 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800f52c:	6a3b      	ldr	r3, [r7, #32]
 800f52e:	3304      	adds	r3, #4
 800f530:	617b      	str	r3, [r7, #20]
 800f532:	e00b      	b.n	800f54c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	681a      	ldr	r2, [r3, #0]
 800f538:	6a3b      	ldr	r3, [r7, #32]
 800f53a:	3304      	adds	r3, #4
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	429a      	cmp	r2, r3
 800f540:	d002      	beq.n	800f548 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800f542:	f06f 0303 	mvn.w	r3, #3
 800f546:	e00d      	b.n	800f564 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800f54c:	887a      	ldrh	r2, [r7, #2]
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	9301      	str	r3, [sp, #4]
 800f552:	6a3b      	ldr	r3, [r7, #32]
 800f554:	9300      	str	r3, [sp, #0]
 800f556:	4613      	mov	r3, r2
 800f558:	687a      	ldr	r2, [r7, #4]
 800f55a:	68b9      	ldr	r1, [r7, #8]
 800f55c:	68f8      	ldr	r0, [r7, #12]
 800f55e:	f000 f811 	bl	800f584 <udp_sendto_if_src>
 800f562:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f564:	4618      	mov	r0, r3
 800f566:	3718      	adds	r7, #24
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}
 800f56c:	080173b0 	.word	0x080173b0
 800f570:	08017524 	.word	0x08017524
 800f574:	08017404 	.word	0x08017404
 800f578:	08017540 	.word	0x08017540
 800f57c:	0801755c 	.word	0x0801755c
 800f580:	0801757c 	.word	0x0801757c

0800f584 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b08c      	sub	sp, #48	; 0x30
 800f588:	af04      	add	r7, sp, #16
 800f58a:	60f8      	str	r0, [r7, #12]
 800f58c:	60b9      	str	r1, [r7, #8]
 800f58e:	607a      	str	r2, [r7, #4]
 800f590:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d109      	bne.n	800f5ac <udp_sendto_if_src+0x28>
 800f598:	4b65      	ldr	r3, [pc, #404]	; (800f730 <udp_sendto_if_src+0x1ac>)
 800f59a:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f59e:	4965      	ldr	r1, [pc, #404]	; (800f734 <udp_sendto_if_src+0x1b0>)
 800f5a0:	4865      	ldr	r0, [pc, #404]	; (800f738 <udp_sendto_if_src+0x1b4>)
 800f5a2:	f004 fc55 	bl	8013e50 <iprintf>
 800f5a6:	f06f 030f 	mvn.w	r3, #15
 800f5aa:	e0bc      	b.n	800f726 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d109      	bne.n	800f5c6 <udp_sendto_if_src+0x42>
 800f5b2:	4b5f      	ldr	r3, [pc, #380]	; (800f730 <udp_sendto_if_src+0x1ac>)
 800f5b4:	f240 22d2 	movw	r2, #722	; 0x2d2
 800f5b8:	4960      	ldr	r1, [pc, #384]	; (800f73c <udp_sendto_if_src+0x1b8>)
 800f5ba:	485f      	ldr	r0, [pc, #380]	; (800f738 <udp_sendto_if_src+0x1b4>)
 800f5bc:	f004 fc48 	bl	8013e50 <iprintf>
 800f5c0:	f06f 030f 	mvn.w	r3, #15
 800f5c4:	e0af      	b.n	800f726 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d109      	bne.n	800f5e0 <udp_sendto_if_src+0x5c>
 800f5cc:	4b58      	ldr	r3, [pc, #352]	; (800f730 <udp_sendto_if_src+0x1ac>)
 800f5ce:	f240 22d3 	movw	r2, #723	; 0x2d3
 800f5d2:	495b      	ldr	r1, [pc, #364]	; (800f740 <udp_sendto_if_src+0x1bc>)
 800f5d4:	4858      	ldr	r0, [pc, #352]	; (800f738 <udp_sendto_if_src+0x1b4>)
 800f5d6:	f004 fc3b 	bl	8013e50 <iprintf>
 800f5da:	f06f 030f 	mvn.w	r3, #15
 800f5de:	e0a2      	b.n	800f726 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800f5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d109      	bne.n	800f5fa <udp_sendto_if_src+0x76>
 800f5e6:	4b52      	ldr	r3, [pc, #328]	; (800f730 <udp_sendto_if_src+0x1ac>)
 800f5e8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800f5ec:	4955      	ldr	r1, [pc, #340]	; (800f744 <udp_sendto_if_src+0x1c0>)
 800f5ee:	4852      	ldr	r0, [pc, #328]	; (800f738 <udp_sendto_if_src+0x1b4>)
 800f5f0:	f004 fc2e 	bl	8013e50 <iprintf>
 800f5f4:	f06f 030f 	mvn.w	r3, #15
 800f5f8:	e095      	b.n	800f726 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800f5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d109      	bne.n	800f614 <udp_sendto_if_src+0x90>
 800f600:	4b4b      	ldr	r3, [pc, #300]	; (800f730 <udp_sendto_if_src+0x1ac>)
 800f602:	f240 22d5 	movw	r2, #725	; 0x2d5
 800f606:	4950      	ldr	r1, [pc, #320]	; (800f748 <udp_sendto_if_src+0x1c4>)
 800f608:	484b      	ldr	r0, [pc, #300]	; (800f738 <udp_sendto_if_src+0x1b4>)
 800f60a:	f004 fc21 	bl	8013e50 <iprintf>
 800f60e:	f06f 030f 	mvn.w	r3, #15
 800f612:	e088      	b.n	800f726 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	8a5b      	ldrh	r3, [r3, #18]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d10f      	bne.n	800f63c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f61c:	68f9      	ldr	r1, [r7, #12]
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	8a5b      	ldrh	r3, [r3, #18]
 800f622:	461a      	mov	r2, r3
 800f624:	68f8      	ldr	r0, [r7, #12]
 800f626:	f000 f893 	bl	800f750 <udp_bind>
 800f62a:	4603      	mov	r3, r0
 800f62c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800f62e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d002      	beq.n	800f63c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800f636:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f63a:	e074      	b.n	800f726 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800f63c:	68bb      	ldr	r3, [r7, #8]
 800f63e:	891b      	ldrh	r3, [r3, #8]
 800f640:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800f644:	4293      	cmp	r3, r2
 800f646:	d902      	bls.n	800f64e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800f648:	f04f 33ff 	mov.w	r3, #4294967295
 800f64c:	e06b      	b.n	800f726 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800f64e:	2108      	movs	r1, #8
 800f650:	68b8      	ldr	r0, [r7, #8]
 800f652:	f7f9 ff87 	bl	8009564 <pbuf_add_header>
 800f656:	4603      	mov	r3, r0
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d015      	beq.n	800f688 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800f65c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f660:	2108      	movs	r1, #8
 800f662:	2022      	movs	r0, #34	; 0x22
 800f664:	f7f9 fd30 	bl	80090c8 <pbuf_alloc>
 800f668:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800f66a:	69fb      	ldr	r3, [r7, #28]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d102      	bne.n	800f676 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800f670:	f04f 33ff 	mov.w	r3, #4294967295
 800f674:	e057      	b.n	800f726 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	891b      	ldrh	r3, [r3, #8]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d006      	beq.n	800f68c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800f67e:	68b9      	ldr	r1, [r7, #8]
 800f680:	69f8      	ldr	r0, [r7, #28]
 800f682:	f7fa f91d 	bl	80098c0 <pbuf_chain>
 800f686:	e001      	b.n	800f68c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800f68c:	69fb      	ldr	r3, [r7, #28]
 800f68e:	895b      	ldrh	r3, [r3, #10]
 800f690:	2b07      	cmp	r3, #7
 800f692:	d806      	bhi.n	800f6a2 <udp_sendto_if_src+0x11e>
 800f694:	4b26      	ldr	r3, [pc, #152]	; (800f730 <udp_sendto_if_src+0x1ac>)
 800f696:	f240 320d 	movw	r2, #781	; 0x30d
 800f69a:	492c      	ldr	r1, [pc, #176]	; (800f74c <udp_sendto_if_src+0x1c8>)
 800f69c:	4826      	ldr	r0, [pc, #152]	; (800f738 <udp_sendto_if_src+0x1b4>)
 800f69e:	f004 fbd7 	bl	8013e50 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800f6a2:	69fb      	ldr	r3, [r7, #28]
 800f6a4:	685b      	ldr	r3, [r3, #4]
 800f6a6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	8a5b      	ldrh	r3, [r3, #18]
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f7f8 fc85 	bl	8007fbc <lwip_htons>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	461a      	mov	r2, r3
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800f6ba:	887b      	ldrh	r3, [r7, #2]
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f7f8 fc7d 	bl	8007fbc <lwip_htons>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	697b      	ldr	r3, [r7, #20]
 800f6c8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	719a      	strb	r2, [r3, #6]
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800f6d4:	69fb      	ldr	r3, [r7, #28]
 800f6d6:	891b      	ldrh	r3, [r3, #8]
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f7f8 fc6f 	bl	8007fbc <lwip_htons>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	461a      	mov	r2, r3
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800f6e6:	2311      	movs	r3, #17
 800f6e8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	7adb      	ldrb	r3, [r3, #11]
 800f6ee:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	7a9b      	ldrb	r3, [r3, #10]
 800f6f4:	7cb9      	ldrb	r1, [r7, #18]
 800f6f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6f8:	9202      	str	r2, [sp, #8]
 800f6fa:	7cfa      	ldrb	r2, [r7, #19]
 800f6fc:	9201      	str	r2, [sp, #4]
 800f6fe:	9300      	str	r3, [sp, #0]
 800f700:	460b      	mov	r3, r1
 800f702:	687a      	ldr	r2, [r7, #4]
 800f704:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f706:	69f8      	ldr	r0, [r7, #28]
 800f708:	f003 fb3a 	bl	8012d80 <ip4_output_if_src>
 800f70c:	4603      	mov	r3, r0
 800f70e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800f710:	69fa      	ldr	r2, [r7, #28]
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	429a      	cmp	r2, r3
 800f716:	d004      	beq.n	800f722 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800f718:	69f8      	ldr	r0, [r7, #28]
 800f71a:	f7f9 ffb9 	bl	8009690 <pbuf_free>
    q = NULL;
 800f71e:	2300      	movs	r3, #0
 800f720:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800f722:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800f726:	4618      	mov	r0, r3
 800f728:	3720      	adds	r7, #32
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}
 800f72e:	bf00      	nop
 800f730:	080173b0 	.word	0x080173b0
 800f734:	0801759c 	.word	0x0801759c
 800f738:	08017404 	.word	0x08017404
 800f73c:	080175bc 	.word	0x080175bc
 800f740:	080175dc 	.word	0x080175dc
 800f744:	08017600 	.word	0x08017600
 800f748:	08017624 	.word	0x08017624
 800f74c:	08017648 	.word	0x08017648

0800f750 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b086      	sub	sp, #24
 800f754:	af00      	add	r7, sp, #0
 800f756:	60f8      	str	r0, [r7, #12]
 800f758:	60b9      	str	r1, [r7, #8]
 800f75a:	4613      	mov	r3, r2
 800f75c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d101      	bne.n	800f768 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800f764:	4b39      	ldr	r3, [pc, #228]	; (800f84c <udp_bind+0xfc>)
 800f766:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d109      	bne.n	800f782 <udp_bind+0x32>
 800f76e:	4b38      	ldr	r3, [pc, #224]	; (800f850 <udp_bind+0x100>)
 800f770:	f240 32b7 	movw	r2, #951	; 0x3b7
 800f774:	4937      	ldr	r1, [pc, #220]	; (800f854 <udp_bind+0x104>)
 800f776:	4838      	ldr	r0, [pc, #224]	; (800f858 <udp_bind+0x108>)
 800f778:	f004 fb6a 	bl	8013e50 <iprintf>
 800f77c:	f06f 030f 	mvn.w	r3, #15
 800f780:	e060      	b.n	800f844 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800f782:	2300      	movs	r3, #0
 800f784:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f786:	4b35      	ldr	r3, [pc, #212]	; (800f85c <udp_bind+0x10c>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	617b      	str	r3, [r7, #20]
 800f78c:	e009      	b.n	800f7a2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800f78e:	68fa      	ldr	r2, [r7, #12]
 800f790:	697b      	ldr	r3, [r7, #20]
 800f792:	429a      	cmp	r2, r3
 800f794:	d102      	bne.n	800f79c <udp_bind+0x4c>
      rebind = 1;
 800f796:	2301      	movs	r3, #1
 800f798:	74fb      	strb	r3, [r7, #19]
      break;
 800f79a:	e005      	b.n	800f7a8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	68db      	ldr	r3, [r3, #12]
 800f7a0:	617b      	str	r3, [r7, #20]
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d1f2      	bne.n	800f78e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800f7a8:	88fb      	ldrh	r3, [r7, #6]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d109      	bne.n	800f7c2 <udp_bind+0x72>
    port = udp_new_port();
 800f7ae:	f7ff fcc5 	bl	800f13c <udp_new_port>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f7b6:	88fb      	ldrh	r3, [r7, #6]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d12c      	bne.n	800f816 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800f7bc:	f06f 0307 	mvn.w	r3, #7
 800f7c0:	e040      	b.n	800f844 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f7c2:	4b26      	ldr	r3, [pc, #152]	; (800f85c <udp_bind+0x10c>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	617b      	str	r3, [r7, #20]
 800f7c8:	e022      	b.n	800f810 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800f7ca:	68fa      	ldr	r2, [r7, #12]
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d01b      	beq.n	800f80a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	8a5b      	ldrh	r3, [r3, #18]
 800f7d6:	88fa      	ldrh	r2, [r7, #6]
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	d116      	bne.n	800f80a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f7dc:	697b      	ldr	r3, [r7, #20]
 800f7de:	681a      	ldr	r2, [r3, #0]
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	d00d      	beq.n	800f804 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d00a      	beq.n	800f804 <udp_bind+0xb4>
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d006      	beq.n	800f804 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f7f6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d003      	beq.n	800f804 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d102      	bne.n	800f80a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800f804:	f06f 0307 	mvn.w	r3, #7
 800f808:	e01c      	b.n	800f844 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	68db      	ldr	r3, [r3, #12]
 800f80e:	617b      	str	r3, [r7, #20]
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d1d9      	bne.n	800f7ca <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d002      	beq.n	800f822 <udp_bind+0xd2>
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	e000      	b.n	800f824 <udp_bind+0xd4>
 800f822:	2300      	movs	r3, #0
 800f824:	68fa      	ldr	r2, [r7, #12]
 800f826:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	88fa      	ldrh	r2, [r7, #6]
 800f82c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800f82e:	7cfb      	ldrb	r3, [r7, #19]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d106      	bne.n	800f842 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800f834:	4b09      	ldr	r3, [pc, #36]	; (800f85c <udp_bind+0x10c>)
 800f836:	681a      	ldr	r2, [r3, #0]
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800f83c:	4a07      	ldr	r2, [pc, #28]	; (800f85c <udp_bind+0x10c>)
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800f842:	2300      	movs	r3, #0
}
 800f844:	4618      	mov	r0, r3
 800f846:	3718      	adds	r7, #24
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}
 800f84c:	0801a7a4 	.word	0x0801a7a4
 800f850:	080173b0 	.word	0x080173b0
 800f854:	08017678 	.word	0x08017678
 800f858:	08017404 	.word	0x08017404
 800f85c:	2000af1c 	.word	0x2000af1c

0800f860 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b086      	sub	sp, #24
 800f864:	af00      	add	r7, sp, #0
 800f866:	60f8      	str	r0, [r7, #12]
 800f868:	60b9      	str	r1, [r7, #8]
 800f86a:	4613      	mov	r3, r2
 800f86c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d109      	bne.n	800f888 <udp_connect+0x28>
 800f874:	4b2c      	ldr	r3, [pc, #176]	; (800f928 <udp_connect+0xc8>)
 800f876:	f240 4235 	movw	r2, #1077	; 0x435
 800f87a:	492c      	ldr	r1, [pc, #176]	; (800f92c <udp_connect+0xcc>)
 800f87c:	482c      	ldr	r0, [pc, #176]	; (800f930 <udp_connect+0xd0>)
 800f87e:	f004 fae7 	bl	8013e50 <iprintf>
 800f882:	f06f 030f 	mvn.w	r3, #15
 800f886:	e04b      	b.n	800f920 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d109      	bne.n	800f8a2 <udp_connect+0x42>
 800f88e:	4b26      	ldr	r3, [pc, #152]	; (800f928 <udp_connect+0xc8>)
 800f890:	f240 4236 	movw	r2, #1078	; 0x436
 800f894:	4927      	ldr	r1, [pc, #156]	; (800f934 <udp_connect+0xd4>)
 800f896:	4826      	ldr	r0, [pc, #152]	; (800f930 <udp_connect+0xd0>)
 800f898:	f004 fada 	bl	8013e50 <iprintf>
 800f89c:	f06f 030f 	mvn.w	r3, #15
 800f8a0:	e03e      	b.n	800f920 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	8a5b      	ldrh	r3, [r3, #18]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d10f      	bne.n	800f8ca <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f8aa:	68f9      	ldr	r1, [r7, #12]
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	8a5b      	ldrh	r3, [r3, #18]
 800f8b0:	461a      	mov	r2, r3
 800f8b2:	68f8      	ldr	r0, [r7, #12]
 800f8b4:	f7ff ff4c 	bl	800f750 <udp_bind>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800f8bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d002      	beq.n	800f8ca <udp_connect+0x6a>
      return err;
 800f8c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f8c8:	e02a      	b.n	800f920 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800f8ca:	68bb      	ldr	r3, [r7, #8]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d002      	beq.n	800f8d6 <udp_connect+0x76>
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	e000      	b.n	800f8d8 <udp_connect+0x78>
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	68fa      	ldr	r2, [r7, #12]
 800f8da:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	88fa      	ldrh	r2, [r7, #6]
 800f8e0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	7c1b      	ldrb	r3, [r3, #16]
 800f8e6:	f043 0304 	orr.w	r3, r3, #4
 800f8ea:	b2da      	uxtb	r2, r3
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f8f0:	4b11      	ldr	r3, [pc, #68]	; (800f938 <udp_connect+0xd8>)
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	617b      	str	r3, [r7, #20]
 800f8f6:	e008      	b.n	800f90a <udp_connect+0xaa>
    if (pcb == ipcb) {
 800f8f8:	68fa      	ldr	r2, [r7, #12]
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d101      	bne.n	800f904 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800f900:	2300      	movs	r3, #0
 800f902:	e00d      	b.n	800f920 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f904:	697b      	ldr	r3, [r7, #20]
 800f906:	68db      	ldr	r3, [r3, #12]
 800f908:	617b      	str	r3, [r7, #20]
 800f90a:	697b      	ldr	r3, [r7, #20]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d1f3      	bne.n	800f8f8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800f910:	4b09      	ldr	r3, [pc, #36]	; (800f938 <udp_connect+0xd8>)
 800f912:	681a      	ldr	r2, [r3, #0]
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800f918:	4a07      	ldr	r2, [pc, #28]	; (800f938 <udp_connect+0xd8>)
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800f91e:	2300      	movs	r3, #0
}
 800f920:	4618      	mov	r0, r3
 800f922:	3718      	adds	r7, #24
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}
 800f928:	080173b0 	.word	0x080173b0
 800f92c:	08017690 	.word	0x08017690
 800f930:	08017404 	.word	0x08017404
 800f934:	080176ac 	.word	0x080176ac
 800f938:	2000af1c 	.word	0x2000af1c

0800f93c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b084      	sub	sp, #16
 800f940:	af00      	add	r7, sp, #0
 800f942:	60f8      	str	r0, [r7, #12]
 800f944:	60b9      	str	r1, [r7, #8]
 800f946:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d107      	bne.n	800f95e <udp_recv+0x22>
 800f94e:	4b08      	ldr	r3, [pc, #32]	; (800f970 <udp_recv+0x34>)
 800f950:	f240 428a 	movw	r2, #1162	; 0x48a
 800f954:	4907      	ldr	r1, [pc, #28]	; (800f974 <udp_recv+0x38>)
 800f956:	4808      	ldr	r0, [pc, #32]	; (800f978 <udp_recv+0x3c>)
 800f958:	f004 fa7a 	bl	8013e50 <iprintf>
 800f95c:	e005      	b.n	800f96a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	68ba      	ldr	r2, [r7, #8]
 800f962:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	687a      	ldr	r2, [r7, #4]
 800f968:	61da      	str	r2, [r3, #28]
}
 800f96a:	3710      	adds	r7, #16
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}
 800f970:	080173b0 	.word	0x080173b0
 800f974:	080176e4 	.word	0x080176e4
 800f978:	08017404 	.word	0x08017404

0800f97c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b084      	sub	sp, #16
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d107      	bne.n	800f99a <udp_remove+0x1e>
 800f98a:	4b19      	ldr	r3, [pc, #100]	; (800f9f0 <udp_remove+0x74>)
 800f98c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800f990:	4918      	ldr	r1, [pc, #96]	; (800f9f4 <udp_remove+0x78>)
 800f992:	4819      	ldr	r0, [pc, #100]	; (800f9f8 <udp_remove+0x7c>)
 800f994:	f004 fa5c 	bl	8013e50 <iprintf>
 800f998:	e026      	b.n	800f9e8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800f99a:	4b18      	ldr	r3, [pc, #96]	; (800f9fc <udp_remove+0x80>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	687a      	ldr	r2, [r7, #4]
 800f9a0:	429a      	cmp	r2, r3
 800f9a2:	d105      	bne.n	800f9b0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800f9a4:	4b15      	ldr	r3, [pc, #84]	; (800f9fc <udp_remove+0x80>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	68db      	ldr	r3, [r3, #12]
 800f9aa:	4a14      	ldr	r2, [pc, #80]	; (800f9fc <udp_remove+0x80>)
 800f9ac:	6013      	str	r3, [r2, #0]
 800f9ae:	e017      	b.n	800f9e0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f9b0:	4b12      	ldr	r3, [pc, #72]	; (800f9fc <udp_remove+0x80>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	60fb      	str	r3, [r7, #12]
 800f9b6:	e010      	b.n	800f9da <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	68db      	ldr	r3, [r3, #12]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d009      	beq.n	800f9d4 <udp_remove+0x58>
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	68db      	ldr	r3, [r3, #12]
 800f9c4:	687a      	ldr	r2, [r7, #4]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d104      	bne.n	800f9d4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	68da      	ldr	r2, [r3, #12]
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	60da      	str	r2, [r3, #12]
        break;
 800f9d2:	e005      	b.n	800f9e0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	68db      	ldr	r3, [r3, #12]
 800f9d8:	60fb      	str	r3, [r7, #12]
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d1eb      	bne.n	800f9b8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800f9e0:	6879      	ldr	r1, [r7, #4]
 800f9e2:	2000      	movs	r0, #0
 800f9e4:	f7f8 ffd2 	bl	800898c <memp_free>
}
 800f9e8:	3710      	adds	r7, #16
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}
 800f9ee:	bf00      	nop
 800f9f0:	080173b0 	.word	0x080173b0
 800f9f4:	080176fc 	.word	0x080176fc
 800f9f8:	08017404 	.word	0x08017404
 800f9fc:	2000af1c 	.word	0x2000af1c

0800fa00 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b082      	sub	sp, #8
 800fa04:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800fa06:	2000      	movs	r0, #0
 800fa08:	f7f8 ff50 	bl	80088ac <memp_malloc>
 800fa0c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d007      	beq.n	800fa24 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800fa14:	2220      	movs	r2, #32
 800fa16:	2100      	movs	r1, #0
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f004 fa11 	bl	8013e40 <memset>
    pcb->ttl = UDP_TTL;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	22ff      	movs	r2, #255	; 0xff
 800fa22:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800fa24:	687b      	ldr	r3, [r7, #4]
}
 800fa26:	4618      	mov	r0, r3
 800fa28:	3708      	adds	r7, #8
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	bd80      	pop	{r7, pc}
	...

0800fa30 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fa30:	b480      	push	{r7}
 800fa32:	b085      	sub	sp, #20
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d01e      	beq.n	800fa7e <udp_netif_ip_addr_changed+0x4e>
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d01a      	beq.n	800fa7e <udp_netif_ip_addr_changed+0x4e>
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d017      	beq.n	800fa7e <udp_netif_ip_addr_changed+0x4e>
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d013      	beq.n	800fa7e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fa56:	4b0d      	ldr	r3, [pc, #52]	; (800fa8c <udp_netif_ip_addr_changed+0x5c>)
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	60fb      	str	r3, [r7, #12]
 800fa5c:	e00c      	b.n	800fa78 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	681a      	ldr	r2, [r3, #0]
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	429a      	cmp	r2, r3
 800fa68:	d103      	bne.n	800fa72 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800fa6a:	683b      	ldr	r3, [r7, #0]
 800fa6c:	681a      	ldr	r2, [r3, #0]
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	68db      	ldr	r3, [r3, #12]
 800fa76:	60fb      	str	r3, [r7, #12]
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d1ef      	bne.n	800fa5e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800fa7e:	bf00      	nop
 800fa80:	3714      	adds	r7, #20
 800fa82:	46bd      	mov	sp, r7
 800fa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa88:	4770      	bx	lr
 800fa8a:	bf00      	nop
 800fa8c:	2000af1c 	.word	0x2000af1c

0800fa90 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800fa94:	4b20      	ldr	r3, [pc, #128]	; (800fb18 <dhcp_inc_pcb_refcount+0x88>)
 800fa96:	781b      	ldrb	r3, [r3, #0]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d133      	bne.n	800fb04 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800fa9c:	4b1f      	ldr	r3, [pc, #124]	; (800fb1c <dhcp_inc_pcb_refcount+0x8c>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d005      	beq.n	800fab0 <dhcp_inc_pcb_refcount+0x20>
 800faa4:	4b1e      	ldr	r3, [pc, #120]	; (800fb20 <dhcp_inc_pcb_refcount+0x90>)
 800faa6:	22e5      	movs	r2, #229	; 0xe5
 800faa8:	491e      	ldr	r1, [pc, #120]	; (800fb24 <dhcp_inc_pcb_refcount+0x94>)
 800faaa:	481f      	ldr	r0, [pc, #124]	; (800fb28 <dhcp_inc_pcb_refcount+0x98>)
 800faac:	f004 f9d0 	bl	8013e50 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800fab0:	f7ff ffa6 	bl	800fa00 <udp_new>
 800fab4:	4603      	mov	r3, r0
 800fab6:	4a19      	ldr	r2, [pc, #100]	; (800fb1c <dhcp_inc_pcb_refcount+0x8c>)
 800fab8:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800faba:	4b18      	ldr	r3, [pc, #96]	; (800fb1c <dhcp_inc_pcb_refcount+0x8c>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d102      	bne.n	800fac8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800fac2:	f04f 33ff 	mov.w	r3, #4294967295
 800fac6:	e024      	b.n	800fb12 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800fac8:	4b14      	ldr	r3, [pc, #80]	; (800fb1c <dhcp_inc_pcb_refcount+0x8c>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	7a5a      	ldrb	r2, [r3, #9]
 800face:	4b13      	ldr	r3, [pc, #76]	; (800fb1c <dhcp_inc_pcb_refcount+0x8c>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	f042 0220 	orr.w	r2, r2, #32
 800fad6:	b2d2      	uxtb	r2, r2
 800fad8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800fada:	4b10      	ldr	r3, [pc, #64]	; (800fb1c <dhcp_inc_pcb_refcount+0x8c>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	2244      	movs	r2, #68	; 0x44
 800fae0:	4912      	ldr	r1, [pc, #72]	; (800fb2c <dhcp_inc_pcb_refcount+0x9c>)
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7ff fe34 	bl	800f750 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800fae8:	4b0c      	ldr	r3, [pc, #48]	; (800fb1c <dhcp_inc_pcb_refcount+0x8c>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	2243      	movs	r2, #67	; 0x43
 800faee:	490f      	ldr	r1, [pc, #60]	; (800fb2c <dhcp_inc_pcb_refcount+0x9c>)
 800faf0:	4618      	mov	r0, r3
 800faf2:	f7ff feb5 	bl	800f860 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800faf6:	4b09      	ldr	r3, [pc, #36]	; (800fb1c <dhcp_inc_pcb_refcount+0x8c>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	2200      	movs	r2, #0
 800fafc:	490c      	ldr	r1, [pc, #48]	; (800fb30 <dhcp_inc_pcb_refcount+0xa0>)
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7ff ff1c 	bl	800f93c <udp_recv>
  }

  dhcp_pcb_refcount++;
 800fb04:	4b04      	ldr	r3, [pc, #16]	; (800fb18 <dhcp_inc_pcb_refcount+0x88>)
 800fb06:	781b      	ldrb	r3, [r3, #0]
 800fb08:	3301      	adds	r3, #1
 800fb0a:	b2da      	uxtb	r2, r3
 800fb0c:	4b02      	ldr	r3, [pc, #8]	; (800fb18 <dhcp_inc_pcb_refcount+0x88>)
 800fb0e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800fb10:	2300      	movs	r3, #0
}
 800fb12:	4618      	mov	r0, r3
 800fb14:	bd80      	pop	{r7, pc}
 800fb16:	bf00      	nop
 800fb18:	2000af4c 	.word	0x2000af4c
 800fb1c:	2000af48 	.word	0x2000af48
 800fb20:	08017714 	.word	0x08017714
 800fb24:	0801774c 	.word	0x0801774c
 800fb28:	08017774 	.word	0x08017774
 800fb2c:	0801a7a4 	.word	0x0801a7a4
 800fb30:	080113c9 	.word	0x080113c9

0800fb34 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800fb38:	4b0e      	ldr	r3, [pc, #56]	; (800fb74 <dhcp_dec_pcb_refcount+0x40>)
 800fb3a:	781b      	ldrb	r3, [r3, #0]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d105      	bne.n	800fb4c <dhcp_dec_pcb_refcount+0x18>
 800fb40:	4b0d      	ldr	r3, [pc, #52]	; (800fb78 <dhcp_dec_pcb_refcount+0x44>)
 800fb42:	22ff      	movs	r2, #255	; 0xff
 800fb44:	490d      	ldr	r1, [pc, #52]	; (800fb7c <dhcp_dec_pcb_refcount+0x48>)
 800fb46:	480e      	ldr	r0, [pc, #56]	; (800fb80 <dhcp_dec_pcb_refcount+0x4c>)
 800fb48:	f004 f982 	bl	8013e50 <iprintf>
  dhcp_pcb_refcount--;
 800fb4c:	4b09      	ldr	r3, [pc, #36]	; (800fb74 <dhcp_dec_pcb_refcount+0x40>)
 800fb4e:	781b      	ldrb	r3, [r3, #0]
 800fb50:	3b01      	subs	r3, #1
 800fb52:	b2da      	uxtb	r2, r3
 800fb54:	4b07      	ldr	r3, [pc, #28]	; (800fb74 <dhcp_dec_pcb_refcount+0x40>)
 800fb56:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800fb58:	4b06      	ldr	r3, [pc, #24]	; (800fb74 <dhcp_dec_pcb_refcount+0x40>)
 800fb5a:	781b      	ldrb	r3, [r3, #0]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d107      	bne.n	800fb70 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800fb60:	4b08      	ldr	r3, [pc, #32]	; (800fb84 <dhcp_dec_pcb_refcount+0x50>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	4618      	mov	r0, r3
 800fb66:	f7ff ff09 	bl	800f97c <udp_remove>
    dhcp_pcb = NULL;
 800fb6a:	4b06      	ldr	r3, [pc, #24]	; (800fb84 <dhcp_dec_pcb_refcount+0x50>)
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	601a      	str	r2, [r3, #0]
  }
}
 800fb70:	bf00      	nop
 800fb72:	bd80      	pop	{r7, pc}
 800fb74:	2000af4c 	.word	0x2000af4c
 800fb78:	08017714 	.word	0x08017714
 800fb7c:	0801779c 	.word	0x0801779c
 800fb80:	08017774 	.word	0x08017774
 800fb84:	2000af48 	.word	0x2000af48

0800fb88 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b084      	sub	sp, #16
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb94:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800fb96:	210c      	movs	r1, #12
 800fb98:	68f8      	ldr	r0, [r7, #12]
 800fb9a:	f001 f857 	bl	8010c4c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800fb9e:	4b06      	ldr	r3, [pc, #24]	; (800fbb8 <dhcp_handle_nak+0x30>)
 800fba0:	4a05      	ldr	r2, [pc, #20]	; (800fbb8 <dhcp_handle_nak+0x30>)
 800fba2:	4905      	ldr	r1, [pc, #20]	; (800fbb8 <dhcp_handle_nak+0x30>)
 800fba4:	6878      	ldr	r0, [r7, #4]
 800fba6:	f7f9 f893 	bl	8008cd0 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800fbaa:	6878      	ldr	r0, [r7, #4]
 800fbac:	f000 fc4a 	bl	8010444 <dhcp_discover>
}
 800fbb0:	bf00      	nop
 800fbb2:	3710      	adds	r7, #16
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}
 800fbb8:	0801a7a4 	.word	0x0801a7a4

0800fbbc <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b084      	sub	sp, #16
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbc8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800fbca:	2108      	movs	r1, #8
 800fbcc:	68f8      	ldr	r0, [r7, #12]
 800fbce:	f001 f83d 	bl	8010c4c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	331c      	adds	r3, #28
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	4619      	mov	r1, r3
 800fbda:	6878      	ldr	r0, [r7, #4]
 800fbdc:	f002 fb3e 	bl	801225c <etharp_query>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	799b      	ldrb	r3, [r3, #6]
 800fbe8:	2bff      	cmp	r3, #255	; 0xff
 800fbea:	d005      	beq.n	800fbf8 <dhcp_check+0x3c>
    dhcp->tries++;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	799b      	ldrb	r3, [r3, #6]
 800fbf0:	3301      	adds	r3, #1
 800fbf2:	b2da      	uxtb	r2, r3
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800fbf8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800fbfc:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fbfe:	893b      	ldrh	r3, [r7, #8]
 800fc00:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fc04:	4a06      	ldr	r2, [pc, #24]	; (800fc20 <dhcp_check+0x64>)
 800fc06:	fb82 1203 	smull	r1, r2, r2, r3
 800fc0a:	1152      	asrs	r2, r2, #5
 800fc0c:	17db      	asrs	r3, r3, #31
 800fc0e:	1ad3      	subs	r3, r2, r3
 800fc10:	b29a      	uxth	r2, r3
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800fc16:	bf00      	nop
 800fc18:	3710      	adds	r7, #16
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	10624dd3 	.word	0x10624dd3

0800fc24 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b084      	sub	sp, #16
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
 800fc2c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc32:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800fc34:	4b0c      	ldr	r3, [pc, #48]	; (800fc68 <dhcp_handle_offer+0x44>)
 800fc36:	789b      	ldrb	r3, [r3, #2]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d011      	beq.n	800fc60 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800fc42:	4b0a      	ldr	r3, [pc, #40]	; (800fc6c <dhcp_handle_offer+0x48>)
 800fc44:	689b      	ldr	r3, [r3, #8]
 800fc46:	4618      	mov	r0, r3
 800fc48:	f7f8 f9cd 	bl	8007fe6 <lwip_htonl>
 800fc4c:	4602      	mov	r2, r0
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	691a      	ldr	r2, [r3, #16]
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800fc5a:	6878      	ldr	r0, [r7, #4]
 800fc5c:	f000 f808 	bl	800fc70 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800fc60:	bf00      	nop
 800fc62:	3710      	adds	r7, #16
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}
 800fc68:	2000af40 	.word	0x2000af40
 800fc6c:	2000af20 	.word	0x2000af20

0800fc70 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800fc70:	b5b0      	push	{r4, r5, r7, lr}
 800fc72:	b08a      	sub	sp, #40	; 0x28
 800fc74:	af02      	add	r7, sp, #8
 800fc76:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d109      	bne.n	800fc92 <dhcp_select+0x22>
 800fc7e:	4b71      	ldr	r3, [pc, #452]	; (800fe44 <dhcp_select+0x1d4>)
 800fc80:	f240 1277 	movw	r2, #375	; 0x177
 800fc84:	4970      	ldr	r1, [pc, #448]	; (800fe48 <dhcp_select+0x1d8>)
 800fc86:	4871      	ldr	r0, [pc, #452]	; (800fe4c <dhcp_select+0x1dc>)
 800fc88:	f004 f8e2 	bl	8013e50 <iprintf>
 800fc8c:	f06f 030f 	mvn.w	r3, #15
 800fc90:	e0d3      	b.n	800fe3a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc96:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800fc98:	69bb      	ldr	r3, [r7, #24]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d109      	bne.n	800fcb2 <dhcp_select+0x42>
 800fc9e:	4b69      	ldr	r3, [pc, #420]	; (800fe44 <dhcp_select+0x1d4>)
 800fca0:	f240 1279 	movw	r2, #377	; 0x179
 800fca4:	496a      	ldr	r1, [pc, #424]	; (800fe50 <dhcp_select+0x1e0>)
 800fca6:	4869      	ldr	r0, [pc, #420]	; (800fe4c <dhcp_select+0x1dc>)
 800fca8:	f004 f8d2 	bl	8013e50 <iprintf>
 800fcac:	f06f 0305 	mvn.w	r3, #5
 800fcb0:	e0c3      	b.n	800fe3a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800fcb2:	2101      	movs	r1, #1
 800fcb4:	69b8      	ldr	r0, [r7, #24]
 800fcb6:	f000 ffc9 	bl	8010c4c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800fcba:	f107 030c 	add.w	r3, r7, #12
 800fcbe:	2203      	movs	r2, #3
 800fcc0:	69b9      	ldr	r1, [r7, #24]
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f001 fc4e 	bl	8011564 <dhcp_create_msg>
 800fcc8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	f000 8085 	beq.w	800fddc <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fcd2:	697b      	ldr	r3, [r7, #20]
 800fcd4:	685b      	ldr	r3, [r3, #4]
 800fcd6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fcd8:	89b8      	ldrh	r0, [r7, #12]
 800fcda:	693b      	ldr	r3, [r7, #16]
 800fcdc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fce0:	2302      	movs	r3, #2
 800fce2:	2239      	movs	r2, #57	; 0x39
 800fce4:	f000 ffcc 	bl	8010c80 <dhcp_option>
 800fce8:	4603      	mov	r3, r0
 800fcea:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800fcec:	89b8      	ldrh	r0, [r7, #12]
 800fcee:	693b      	ldr	r3, [r7, #16]
 800fcf0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fcf8:	461a      	mov	r2, r3
 800fcfa:	f001 f81b 	bl	8010d34 <dhcp_option_short>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800fd02:	89b8      	ldrh	r0, [r7, #12]
 800fd04:	693b      	ldr	r3, [r7, #16]
 800fd06:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fd0a:	2304      	movs	r3, #4
 800fd0c:	2232      	movs	r2, #50	; 0x32
 800fd0e:	f000 ffb7 	bl	8010c80 <dhcp_option>
 800fd12:	4603      	mov	r3, r0
 800fd14:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800fd16:	89bc      	ldrh	r4, [r7, #12]
 800fd18:	693b      	ldr	r3, [r7, #16]
 800fd1a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800fd1e:	69bb      	ldr	r3, [r7, #24]
 800fd20:	69db      	ldr	r3, [r3, #28]
 800fd22:	4618      	mov	r0, r3
 800fd24:	f7f8 f95f 	bl	8007fe6 <lwip_htonl>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	461a      	mov	r2, r3
 800fd2c:	4629      	mov	r1, r5
 800fd2e:	4620      	mov	r0, r4
 800fd30:	f001 f832 	bl	8010d98 <dhcp_option_long>
 800fd34:	4603      	mov	r3, r0
 800fd36:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800fd38:	89b8      	ldrh	r0, [r7, #12]
 800fd3a:	693b      	ldr	r3, [r7, #16]
 800fd3c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fd40:	2304      	movs	r3, #4
 800fd42:	2236      	movs	r2, #54	; 0x36
 800fd44:	f000 ff9c 	bl	8010c80 <dhcp_option>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800fd4c:	89bc      	ldrh	r4, [r7, #12]
 800fd4e:	693b      	ldr	r3, [r7, #16]
 800fd50:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800fd54:	69bb      	ldr	r3, [r7, #24]
 800fd56:	699b      	ldr	r3, [r3, #24]
 800fd58:	4618      	mov	r0, r3
 800fd5a:	f7f8 f944 	bl	8007fe6 <lwip_htonl>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	461a      	mov	r2, r3
 800fd62:	4629      	mov	r1, r5
 800fd64:	4620      	mov	r0, r4
 800fd66:	f001 f817 	bl	8010d98 <dhcp_option_long>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fd6e:	89b8      	ldrh	r0, [r7, #12]
 800fd70:	693b      	ldr	r3, [r7, #16]
 800fd72:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fd76:	2303      	movs	r3, #3
 800fd78:	2237      	movs	r2, #55	; 0x37
 800fd7a:	f000 ff81 	bl	8010c80 <dhcp_option>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fd82:	2300      	movs	r3, #0
 800fd84:	77bb      	strb	r3, [r7, #30]
 800fd86:	e00e      	b.n	800fda6 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fd88:	89b8      	ldrh	r0, [r7, #12]
 800fd8a:	693b      	ldr	r3, [r7, #16]
 800fd8c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fd90:	7fbb      	ldrb	r3, [r7, #30]
 800fd92:	4a30      	ldr	r2, [pc, #192]	; (800fe54 <dhcp_select+0x1e4>)
 800fd94:	5cd3      	ldrb	r3, [r2, r3]
 800fd96:	461a      	mov	r2, r3
 800fd98:	f000 ffa6 	bl	8010ce8 <dhcp_option_byte>
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fda0:	7fbb      	ldrb	r3, [r7, #30]
 800fda2:	3301      	adds	r3, #1
 800fda4:	77bb      	strb	r3, [r7, #30]
 800fda6:	7fbb      	ldrb	r3, [r7, #30]
 800fda8:	2b02      	cmp	r3, #2
 800fdaa:	d9ed      	bls.n	800fd88 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fdac:	89b8      	ldrh	r0, [r7, #12]
 800fdae:	693b      	ldr	r3, [r7, #16]
 800fdb0:	33f0      	adds	r3, #240	; 0xf0
 800fdb2:	697a      	ldr	r2, [r7, #20]
 800fdb4:	4619      	mov	r1, r3
 800fdb6:	f001 fcab 	bl	8011710 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800fdba:	4b27      	ldr	r3, [pc, #156]	; (800fe58 <dhcp_select+0x1e8>)
 800fdbc:	6818      	ldr	r0, [r3, #0]
 800fdbe:	4b27      	ldr	r3, [pc, #156]	; (800fe5c <dhcp_select+0x1ec>)
 800fdc0:	9301      	str	r3, [sp, #4]
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	9300      	str	r3, [sp, #0]
 800fdc6:	2343      	movs	r3, #67	; 0x43
 800fdc8:	4a25      	ldr	r2, [pc, #148]	; (800fe60 <dhcp_select+0x1f0>)
 800fdca:	6979      	ldr	r1, [r7, #20]
 800fdcc:	f7ff fbda 	bl	800f584 <udp_sendto_if_src>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800fdd4:	6978      	ldr	r0, [r7, #20]
 800fdd6:	f7f9 fc5b 	bl	8009690 <pbuf_free>
 800fdda:	e001      	b.n	800fde0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800fddc:	23ff      	movs	r3, #255	; 0xff
 800fdde:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fde0:	69bb      	ldr	r3, [r7, #24]
 800fde2:	799b      	ldrb	r3, [r3, #6]
 800fde4:	2bff      	cmp	r3, #255	; 0xff
 800fde6:	d005      	beq.n	800fdf4 <dhcp_select+0x184>
    dhcp->tries++;
 800fde8:	69bb      	ldr	r3, [r7, #24]
 800fdea:	799b      	ldrb	r3, [r3, #6]
 800fdec:	3301      	adds	r3, #1
 800fdee:	b2da      	uxtb	r2, r3
 800fdf0:	69bb      	ldr	r3, [r7, #24]
 800fdf2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800fdf4:	69bb      	ldr	r3, [r7, #24]
 800fdf6:	799b      	ldrb	r3, [r3, #6]
 800fdf8:	2b05      	cmp	r3, #5
 800fdfa:	d80d      	bhi.n	800fe18 <dhcp_select+0x1a8>
 800fdfc:	69bb      	ldr	r3, [r7, #24]
 800fdfe:	799b      	ldrb	r3, [r3, #6]
 800fe00:	461a      	mov	r2, r3
 800fe02:	2301      	movs	r3, #1
 800fe04:	4093      	lsls	r3, r2
 800fe06:	b29b      	uxth	r3, r3
 800fe08:	461a      	mov	r2, r3
 800fe0a:	0152      	lsls	r2, r2, #5
 800fe0c:	1ad2      	subs	r2, r2, r3
 800fe0e:	0092      	lsls	r2, r2, #2
 800fe10:	4413      	add	r3, r2
 800fe12:	00db      	lsls	r3, r3, #3
 800fe14:	b29b      	uxth	r3, r3
 800fe16:	e001      	b.n	800fe1c <dhcp_select+0x1ac>
 800fe18:	f64e 2360 	movw	r3, #60000	; 0xea60
 800fe1c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fe1e:	89fb      	ldrh	r3, [r7, #14]
 800fe20:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fe24:	4a0f      	ldr	r2, [pc, #60]	; (800fe64 <dhcp_select+0x1f4>)
 800fe26:	fb82 1203 	smull	r1, r2, r2, r3
 800fe2a:	1152      	asrs	r2, r2, #5
 800fe2c:	17db      	asrs	r3, r3, #31
 800fe2e:	1ad3      	subs	r3, r2, r3
 800fe30:	b29a      	uxth	r2, r3
 800fe32:	69bb      	ldr	r3, [r7, #24]
 800fe34:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fe36:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	3720      	adds	r7, #32
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bdb0      	pop	{r4, r5, r7, pc}
 800fe42:	bf00      	nop
 800fe44:	08017714 	.word	0x08017714
 800fe48:	080177c0 	.word	0x080177c0
 800fe4c:	08017774 	.word	0x08017774
 800fe50:	080177dc 	.word	0x080177dc
 800fe54:	20000044 	.word	0x20000044
 800fe58:	2000af48 	.word	0x2000af48
 800fe5c:	0801a7a4 	.word	0x0801a7a4
 800fe60:	0801a7a8 	.word	0x0801a7a8
 800fe64:	10624dd3 	.word	0x10624dd3

0800fe68 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b082      	sub	sp, #8
 800fe6c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800fe6e:	4b27      	ldr	r3, [pc, #156]	; (800ff0c <dhcp_coarse_tmr+0xa4>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	607b      	str	r3, [r7, #4]
 800fe74:	e042      	b.n	800fefc <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe7a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d039      	beq.n	800fef6 <dhcp_coarse_tmr+0x8e>
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	795b      	ldrb	r3, [r3, #5]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d035      	beq.n	800fef6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	8a9b      	ldrh	r3, [r3, #20]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d012      	beq.n	800feb8 <dhcp_coarse_tmr+0x50>
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	8a5b      	ldrh	r3, [r3, #18]
 800fe96:	3301      	adds	r3, #1
 800fe98:	b29a      	uxth	r2, r3
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	825a      	strh	r2, [r3, #18]
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	8a5a      	ldrh	r2, [r3, #18]
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	8a9b      	ldrh	r3, [r3, #20]
 800fea6:	429a      	cmp	r2, r3
 800fea8:	d106      	bne.n	800feb8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800feaa:	6878      	ldr	r0, [r7, #4]
 800feac:	f000 fe34 	bl	8010b18 <dhcp_release_and_stop>
        dhcp_start(netif);
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f000 f96b 	bl	801018c <dhcp_start>
 800feb6:	e01e      	b.n	800fef6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800feb8:	683b      	ldr	r3, [r7, #0]
 800feba:	8a1b      	ldrh	r3, [r3, #16]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d00b      	beq.n	800fed8 <dhcp_coarse_tmr+0x70>
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	8a1b      	ldrh	r3, [r3, #16]
 800fec4:	1e5a      	subs	r2, r3, #1
 800fec6:	b291      	uxth	r1, r2
 800fec8:	683a      	ldr	r2, [r7, #0]
 800feca:	8211      	strh	r1, [r2, #16]
 800fecc:	2b01      	cmp	r3, #1
 800fece:	d103      	bne.n	800fed8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f000 f8c7 	bl	8010064 <dhcp_t2_timeout>
 800fed6:	e00e      	b.n	800fef6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	89db      	ldrh	r3, [r3, #14]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d00a      	beq.n	800fef6 <dhcp_coarse_tmr+0x8e>
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	89db      	ldrh	r3, [r3, #14]
 800fee4:	1e5a      	subs	r2, r3, #1
 800fee6:	b291      	uxth	r1, r2
 800fee8:	683a      	ldr	r2, [r7, #0]
 800feea:	81d1      	strh	r1, [r2, #14]
 800feec:	2b01      	cmp	r3, #1
 800feee:	d102      	bne.n	800fef6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	f000 f888 	bl	8010006 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	607b      	str	r3, [r7, #4]
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d1b9      	bne.n	800fe76 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800ff02:	bf00      	nop
 800ff04:	bf00      	nop
 800ff06:	3708      	adds	r7, #8
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}
 800ff0c:	2000aeb4 	.word	0x2000aeb4

0800ff10 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b082      	sub	sp, #8
 800ff14:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800ff16:	4b16      	ldr	r3, [pc, #88]	; (800ff70 <dhcp_fine_tmr+0x60>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	607b      	str	r3, [r7, #4]
 800ff1c:	e020      	b.n	800ff60 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff22:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d017      	beq.n	800ff5a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	891b      	ldrh	r3, [r3, #8]
 800ff2e:	2b01      	cmp	r3, #1
 800ff30:	d906      	bls.n	800ff40 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	891b      	ldrh	r3, [r3, #8]
 800ff36:	3b01      	subs	r3, #1
 800ff38:	b29a      	uxth	r2, r3
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	811a      	strh	r2, [r3, #8]
 800ff3e:	e00c      	b.n	800ff5a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	891b      	ldrh	r3, [r3, #8]
 800ff44:	2b01      	cmp	r3, #1
 800ff46:	d108      	bne.n	800ff5a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	891b      	ldrh	r3, [r3, #8]
 800ff4c:	3b01      	subs	r3, #1
 800ff4e:	b29a      	uxth	r2, r3
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f000 f80d 	bl	800ff74 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	607b      	str	r3, [r7, #4]
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d1db      	bne.n	800ff1e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800ff66:	bf00      	nop
 800ff68:	bf00      	nop
 800ff6a:	3708      	adds	r7, #8
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}
 800ff70:	2000aeb4 	.word	0x2000aeb4

0800ff74 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b084      	sub	sp, #16
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff80:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	795b      	ldrb	r3, [r3, #5]
 800ff86:	2b0c      	cmp	r3, #12
 800ff88:	d003      	beq.n	800ff92 <dhcp_timeout+0x1e>
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	795b      	ldrb	r3, [r3, #5]
 800ff8e:	2b06      	cmp	r3, #6
 800ff90:	d103      	bne.n	800ff9a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800ff92:	6878      	ldr	r0, [r7, #4]
 800ff94:	f000 fa56 	bl	8010444 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800ff98:	e031      	b.n	800fffe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	795b      	ldrb	r3, [r3, #5]
 800ff9e:	2b01      	cmp	r3, #1
 800ffa0:	d10e      	bne.n	800ffc0 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	799b      	ldrb	r3, [r3, #6]
 800ffa6:	2b05      	cmp	r3, #5
 800ffa8:	d803      	bhi.n	800ffb2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	f7ff fe60 	bl	800fc70 <dhcp_select>
}
 800ffb0:	e025      	b.n	800fffe <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f000 fdb0 	bl	8010b18 <dhcp_release_and_stop>
      dhcp_start(netif);
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f000 f8e7 	bl	801018c <dhcp_start>
}
 800ffbe:	e01e      	b.n	800fffe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	795b      	ldrb	r3, [r3, #5]
 800ffc4:	2b08      	cmp	r3, #8
 800ffc6:	d10b      	bne.n	800ffe0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	799b      	ldrb	r3, [r3, #6]
 800ffcc:	2b01      	cmp	r3, #1
 800ffce:	d803      	bhi.n	800ffd8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800ffd0:	6878      	ldr	r0, [r7, #4]
 800ffd2:	f7ff fdf3 	bl	800fbbc <dhcp_check>
}
 800ffd6:	e012      	b.n	800fffe <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	f000 fad5 	bl	8010588 <dhcp_bind>
}
 800ffde:	e00e      	b.n	800fffe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	795b      	ldrb	r3, [r3, #5]
 800ffe4:	2b03      	cmp	r3, #3
 800ffe6:	d10a      	bne.n	800fffe <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	799b      	ldrb	r3, [r3, #6]
 800ffec:	2b01      	cmp	r3, #1
 800ffee:	d803      	bhi.n	800fff8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	f000 fcdb 	bl	80109ac <dhcp_reboot>
}
 800fff6:	e002      	b.n	800fffe <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f000 fa23 	bl	8010444 <dhcp_discover>
}
 800fffe:	bf00      	nop
 8010000:	3710      	adds	r7, #16
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}

08010006 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8010006:	b580      	push	{r7, lr}
 8010008:	b084      	sub	sp, #16
 801000a:	af00      	add	r7, sp, #0
 801000c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010012:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	795b      	ldrb	r3, [r3, #5]
 8010018:	2b01      	cmp	r3, #1
 801001a:	d007      	beq.n	801002c <dhcp_t1_timeout+0x26>
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	795b      	ldrb	r3, [r3, #5]
 8010020:	2b0a      	cmp	r3, #10
 8010022:	d003      	beq.n	801002c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8010028:	2b05      	cmp	r3, #5
 801002a:	d117      	bne.n	801005c <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f000 fb85 	bl	801073c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	899b      	ldrh	r3, [r3, #12]
 8010036:	461a      	mov	r2, r3
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	8a5b      	ldrh	r3, [r3, #18]
 801003c:	1ad3      	subs	r3, r2, r3
 801003e:	2b01      	cmp	r3, #1
 8010040:	dd0c      	ble.n	801005c <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	899b      	ldrh	r3, [r3, #12]
 8010046:	461a      	mov	r2, r3
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	8a5b      	ldrh	r3, [r3, #18]
 801004c:	1ad3      	subs	r3, r2, r3
 801004e:	2b00      	cmp	r3, #0
 8010050:	da00      	bge.n	8010054 <dhcp_t1_timeout+0x4e>
 8010052:	3301      	adds	r3, #1
 8010054:	105b      	asrs	r3, r3, #1
 8010056:	b29a      	uxth	r2, r3
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801005c:	bf00      	nop
 801005e:	3710      	adds	r7, #16
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}

08010064 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b084      	sub	sp, #16
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010070:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	795b      	ldrb	r3, [r3, #5]
 8010076:	2b01      	cmp	r3, #1
 8010078:	d00b      	beq.n	8010092 <dhcp_t2_timeout+0x2e>
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	795b      	ldrb	r3, [r3, #5]
 801007e:	2b0a      	cmp	r3, #10
 8010080:	d007      	beq.n	8010092 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8010086:	2b05      	cmp	r3, #5
 8010088:	d003      	beq.n	8010092 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	795b      	ldrb	r3, [r3, #5]
 801008e:	2b04      	cmp	r3, #4
 8010090:	d117      	bne.n	80100c2 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8010092:	6878      	ldr	r0, [r7, #4]
 8010094:	f000 fbee 	bl	8010874 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	8a9b      	ldrh	r3, [r3, #20]
 801009c:	461a      	mov	r2, r3
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	8a5b      	ldrh	r3, [r3, #18]
 80100a2:	1ad3      	subs	r3, r2, r3
 80100a4:	2b01      	cmp	r3, #1
 80100a6:	dd0c      	ble.n	80100c2 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	8a9b      	ldrh	r3, [r3, #20]
 80100ac:	461a      	mov	r2, r3
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	8a5b      	ldrh	r3, [r3, #18]
 80100b2:	1ad3      	subs	r3, r2, r3
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	da00      	bge.n	80100ba <dhcp_t2_timeout+0x56>
 80100b8:	3301      	adds	r3, #1
 80100ba:	105b      	asrs	r3, r3, #1
 80100bc:	b29a      	uxth	r2, r3
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80100c2:	bf00      	nop
 80100c4:	3710      	adds	r7, #16
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}
	...

080100cc <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b084      	sub	sp, #16
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
 80100d4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100da:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	2200      	movs	r2, #0
 80100e0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	2200      	movs	r2, #0
 80100e6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80100e8:	4b26      	ldr	r3, [pc, #152]	; (8010184 <dhcp_handle_ack+0xb8>)
 80100ea:	78db      	ldrb	r3, [r3, #3]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d003      	beq.n	80100f8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80100f0:	4b25      	ldr	r3, [pc, #148]	; (8010188 <dhcp_handle_ack+0xbc>)
 80100f2:	68da      	ldr	r2, [r3, #12]
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80100f8:	4b22      	ldr	r3, [pc, #136]	; (8010184 <dhcp_handle_ack+0xb8>)
 80100fa:	791b      	ldrb	r3, [r3, #4]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d004      	beq.n	801010a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8010100:	4b21      	ldr	r3, [pc, #132]	; (8010188 <dhcp_handle_ack+0xbc>)
 8010102:	691a      	ldr	r2, [r3, #16]
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	62da      	str	r2, [r3, #44]	; 0x2c
 8010108:	e004      	b.n	8010114 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801010e:	085a      	lsrs	r2, r3, #1
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8010114:	4b1b      	ldr	r3, [pc, #108]	; (8010184 <dhcp_handle_ack+0xb8>)
 8010116:	795b      	ldrb	r3, [r3, #5]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d004      	beq.n	8010126 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801011c:	4b1a      	ldr	r3, [pc, #104]	; (8010188 <dhcp_handle_ack+0xbc>)
 801011e:	695a      	ldr	r2, [r3, #20]
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	631a      	str	r2, [r3, #48]	; 0x30
 8010124:	e007      	b.n	8010136 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801012a:	4613      	mov	r3, r2
 801012c:	00db      	lsls	r3, r3, #3
 801012e:	1a9b      	subs	r3, r3, r2
 8010130:	08da      	lsrs	r2, r3, #3
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	691a      	ldr	r2, [r3, #16]
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801013e:	4b11      	ldr	r3, [pc, #68]	; (8010184 <dhcp_handle_ack+0xb8>)
 8010140:	799b      	ldrb	r3, [r3, #6]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d00b      	beq.n	801015e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8010146:	4b10      	ldr	r3, [pc, #64]	; (8010188 <dhcp_handle_ack+0xbc>)
 8010148:	699b      	ldr	r3, [r3, #24]
 801014a:	4618      	mov	r0, r3
 801014c:	f7f7 ff4b 	bl	8007fe6 <lwip_htonl>
 8010150:	4602      	mov	r2, r0
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	2201      	movs	r2, #1
 801015a:	71da      	strb	r2, [r3, #7]
 801015c:	e002      	b.n	8010164 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	2200      	movs	r2, #0
 8010162:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8010164:	4b07      	ldr	r3, [pc, #28]	; (8010184 <dhcp_handle_ack+0xb8>)
 8010166:	79db      	ldrb	r3, [r3, #7]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d007      	beq.n	801017c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801016c:	4b06      	ldr	r3, [pc, #24]	; (8010188 <dhcp_handle_ack+0xbc>)
 801016e:	69db      	ldr	r3, [r3, #28]
 8010170:	4618      	mov	r0, r3
 8010172:	f7f7 ff38 	bl	8007fe6 <lwip_htonl>
 8010176:	4602      	mov	r2, r0
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801017c:	bf00      	nop
 801017e:	3710      	adds	r7, #16
 8010180:	46bd      	mov	sp, r7
 8010182:	bd80      	pop	{r7, pc}
 8010184:	2000af40 	.word	0x2000af40
 8010188:	2000af20 	.word	0x2000af20

0801018c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b084      	sub	sp, #16
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d109      	bne.n	80101ae <dhcp_start+0x22>
 801019a:	4b37      	ldr	r3, [pc, #220]	; (8010278 <dhcp_start+0xec>)
 801019c:	f240 22e7 	movw	r2, #743	; 0x2e7
 80101a0:	4936      	ldr	r1, [pc, #216]	; (801027c <dhcp_start+0xf0>)
 80101a2:	4837      	ldr	r0, [pc, #220]	; (8010280 <dhcp_start+0xf4>)
 80101a4:	f003 fe54 	bl	8013e50 <iprintf>
 80101a8:	f06f 030f 	mvn.w	r3, #15
 80101ac:	e060      	b.n	8010270 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80101b4:	f003 0301 	and.w	r3, r3, #1
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d109      	bne.n	80101d0 <dhcp_start+0x44>
 80101bc:	4b2e      	ldr	r3, [pc, #184]	; (8010278 <dhcp_start+0xec>)
 80101be:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80101c2:	4930      	ldr	r1, [pc, #192]	; (8010284 <dhcp_start+0xf8>)
 80101c4:	482e      	ldr	r0, [pc, #184]	; (8010280 <dhcp_start+0xf4>)
 80101c6:	f003 fe43 	bl	8013e50 <iprintf>
 80101ca:	f06f 030f 	mvn.w	r3, #15
 80101ce:	e04f      	b.n	8010270 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101d4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80101da:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80101de:	d202      	bcs.n	80101e6 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80101e0:	f04f 33ff 	mov.w	r3, #4294967295
 80101e4:	e044      	b.n	8010270 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d10d      	bne.n	8010208 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80101ec:	2034      	movs	r0, #52	; 0x34
 80101ee:	f7f8 f9cd 	bl	800858c <mem_malloc>
 80101f2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d102      	bne.n	8010200 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80101fa:	f04f 33ff 	mov.w	r3, #4294967295
 80101fe:	e037      	b.n	8010270 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	68fa      	ldr	r2, [r7, #12]
 8010204:	625a      	str	r2, [r3, #36]	; 0x24
 8010206:	e005      	b.n	8010214 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	791b      	ldrb	r3, [r3, #4]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d001      	beq.n	8010214 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8010210:	f7ff fc90 	bl	800fb34 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8010214:	2234      	movs	r2, #52	; 0x34
 8010216:	2100      	movs	r1, #0
 8010218:	68f8      	ldr	r0, [r7, #12]
 801021a:	f003 fe11 	bl	8013e40 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801021e:	f7ff fc37 	bl	800fa90 <dhcp_inc_pcb_refcount>
 8010222:	4603      	mov	r3, r0
 8010224:	2b00      	cmp	r3, #0
 8010226:	d002      	beq.n	801022e <dhcp_start+0xa2>
    return ERR_MEM;
 8010228:	f04f 33ff 	mov.w	r3, #4294967295
 801022c:	e020      	b.n	8010270 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	2201      	movs	r2, #1
 8010232:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801023a:	f003 0304 	and.w	r3, r3, #4
 801023e:	2b00      	cmp	r3, #0
 8010240:	d105      	bne.n	801024e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8010242:	2102      	movs	r1, #2
 8010244:	68f8      	ldr	r0, [r7, #12]
 8010246:	f000 fd01 	bl	8010c4c <dhcp_set_state>
    return ERR_OK;
 801024a:	2300      	movs	r3, #0
 801024c:	e010      	b.n	8010270 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f000 f8f8 	bl	8010444 <dhcp_discover>
 8010254:	4603      	mov	r3, r0
 8010256:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8010258:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d005      	beq.n	801026c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8010260:	6878      	ldr	r0, [r7, #4]
 8010262:	f000 fc59 	bl	8010b18 <dhcp_release_and_stop>
    return ERR_MEM;
 8010266:	f04f 33ff 	mov.w	r3, #4294967295
 801026a:	e001      	b.n	8010270 <dhcp_start+0xe4>
  }
  return result;
 801026c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010270:	4618      	mov	r0, r3
 8010272:	3710      	adds	r7, #16
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}
 8010278:	08017714 	.word	0x08017714
 801027c:	080177f8 	.word	0x080177f8
 8010280:	08017774 	.word	0x08017774
 8010284:	0801783c 	.word	0x0801783c

08010288 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b084      	sub	sp, #16
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010294:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d025      	beq.n	80102e8 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	795b      	ldrb	r3, [r3, #5]
 80102a0:	2b0a      	cmp	r3, #10
 80102a2:	d008      	beq.n	80102b6 <dhcp_network_changed+0x2e>
 80102a4:	2b0a      	cmp	r3, #10
 80102a6:	dc0d      	bgt.n	80102c4 <dhcp_network_changed+0x3c>
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d01f      	beq.n	80102ec <dhcp_network_changed+0x64>
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	db09      	blt.n	80102c4 <dhcp_network_changed+0x3c>
 80102b0:	3b03      	subs	r3, #3
 80102b2:	2b02      	cmp	r3, #2
 80102b4:	d806      	bhi.n	80102c4 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	2200      	movs	r2, #0
 80102ba:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f000 fb75 	bl	80109ac <dhcp_reboot>
      break;
 80102c2:	e014      	b.n	80102ee <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	795b      	ldrb	r3, [r3, #5]
 80102c8:	2b0c      	cmp	r3, #12
 80102ca:	d906      	bls.n	80102da <dhcp_network_changed+0x52>
 80102cc:	4b09      	ldr	r3, [pc, #36]	; (80102f4 <dhcp_network_changed+0x6c>)
 80102ce:	f240 326d 	movw	r2, #877	; 0x36d
 80102d2:	4909      	ldr	r1, [pc, #36]	; (80102f8 <dhcp_network_changed+0x70>)
 80102d4:	4809      	ldr	r0, [pc, #36]	; (80102fc <dhcp_network_changed+0x74>)
 80102d6:	f003 fdbb 	bl	8013e50 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	2200      	movs	r2, #0
 80102de:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80102e0:	6878      	ldr	r0, [r7, #4]
 80102e2:	f000 f8af 	bl	8010444 <dhcp_discover>
      break;
 80102e6:	e002      	b.n	80102ee <dhcp_network_changed+0x66>
    return;
 80102e8:	bf00      	nop
 80102ea:	e000      	b.n	80102ee <dhcp_network_changed+0x66>
      break;
 80102ec:	bf00      	nop
  }
}
 80102ee:	3710      	adds	r7, #16
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}
 80102f4:	08017714 	.word	0x08017714
 80102f8:	08017860 	.word	0x08017860
 80102fc:	08017774 	.word	0x08017774

08010300 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b084      	sub	sp, #16
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
 8010308:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d107      	bne.n	8010320 <dhcp_arp_reply+0x20>
 8010310:	4b0e      	ldr	r3, [pc, #56]	; (801034c <dhcp_arp_reply+0x4c>)
 8010312:	f240 328b 	movw	r2, #907	; 0x38b
 8010316:	490e      	ldr	r1, [pc, #56]	; (8010350 <dhcp_arp_reply+0x50>)
 8010318:	480e      	ldr	r0, [pc, #56]	; (8010354 <dhcp_arp_reply+0x54>)
 801031a:	f003 fd99 	bl	8013e50 <iprintf>
 801031e:	e012      	b.n	8010346 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010324:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d00c      	beq.n	8010346 <dhcp_arp_reply+0x46>
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	795b      	ldrb	r3, [r3, #5]
 8010330:	2b08      	cmp	r3, #8
 8010332:	d108      	bne.n	8010346 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	681a      	ldr	r2, [r3, #0]
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	69db      	ldr	r3, [r3, #28]
 801033c:	429a      	cmp	r2, r3
 801033e:	d102      	bne.n	8010346 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8010340:	6878      	ldr	r0, [r7, #4]
 8010342:	f000 f809 	bl	8010358 <dhcp_decline>
    }
  }
}
 8010346:	3710      	adds	r7, #16
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}
 801034c:	08017714 	.word	0x08017714
 8010350:	080177f8 	.word	0x080177f8
 8010354:	08017774 	.word	0x08017774

08010358 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8010358:	b5b0      	push	{r4, r5, r7, lr}
 801035a:	b08a      	sub	sp, #40	; 0x28
 801035c:	af02      	add	r7, sp, #8
 801035e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010364:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8010366:	210c      	movs	r1, #12
 8010368:	69b8      	ldr	r0, [r7, #24]
 801036a:	f000 fc6f 	bl	8010c4c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801036e:	f107 030c 	add.w	r3, r7, #12
 8010372:	2204      	movs	r2, #4
 8010374:	69b9      	ldr	r1, [r7, #24]
 8010376:	6878      	ldr	r0, [r7, #4]
 8010378:	f001 f8f4 	bl	8011564 <dhcp_create_msg>
 801037c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d035      	beq.n	80103f0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010384:	697b      	ldr	r3, [r7, #20]
 8010386:	685b      	ldr	r3, [r3, #4]
 8010388:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801038a:	89b8      	ldrh	r0, [r7, #12]
 801038c:	693b      	ldr	r3, [r7, #16]
 801038e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010392:	2304      	movs	r3, #4
 8010394:	2232      	movs	r2, #50	; 0x32
 8010396:	f000 fc73 	bl	8010c80 <dhcp_option>
 801039a:	4603      	mov	r3, r0
 801039c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801039e:	89bc      	ldrh	r4, [r7, #12]
 80103a0:	693b      	ldr	r3, [r7, #16]
 80103a2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80103a6:	69bb      	ldr	r3, [r7, #24]
 80103a8:	69db      	ldr	r3, [r3, #28]
 80103aa:	4618      	mov	r0, r3
 80103ac:	f7f7 fe1b 	bl	8007fe6 <lwip_htonl>
 80103b0:	4603      	mov	r3, r0
 80103b2:	461a      	mov	r2, r3
 80103b4:	4629      	mov	r1, r5
 80103b6:	4620      	mov	r0, r4
 80103b8:	f000 fcee 	bl	8010d98 <dhcp_option_long>
 80103bc:	4603      	mov	r3, r0
 80103be:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80103c0:	89b8      	ldrh	r0, [r7, #12]
 80103c2:	693b      	ldr	r3, [r7, #16]
 80103c4:	33f0      	adds	r3, #240	; 0xf0
 80103c6:	697a      	ldr	r2, [r7, #20]
 80103c8:	4619      	mov	r1, r3
 80103ca:	f001 f9a1 	bl	8011710 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80103ce:	4b19      	ldr	r3, [pc, #100]	; (8010434 <dhcp_decline+0xdc>)
 80103d0:	6818      	ldr	r0, [r3, #0]
 80103d2:	4b19      	ldr	r3, [pc, #100]	; (8010438 <dhcp_decline+0xe0>)
 80103d4:	9301      	str	r3, [sp, #4]
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	9300      	str	r3, [sp, #0]
 80103da:	2343      	movs	r3, #67	; 0x43
 80103dc:	4a17      	ldr	r2, [pc, #92]	; (801043c <dhcp_decline+0xe4>)
 80103de:	6979      	ldr	r1, [r7, #20]
 80103e0:	f7ff f8d0 	bl	800f584 <udp_sendto_if_src>
 80103e4:	4603      	mov	r3, r0
 80103e6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80103e8:	6978      	ldr	r0, [r7, #20]
 80103ea:	f7f9 f951 	bl	8009690 <pbuf_free>
 80103ee:	e001      	b.n	80103f4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80103f0:	23ff      	movs	r3, #255	; 0xff
 80103f2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80103f4:	69bb      	ldr	r3, [r7, #24]
 80103f6:	799b      	ldrb	r3, [r3, #6]
 80103f8:	2bff      	cmp	r3, #255	; 0xff
 80103fa:	d005      	beq.n	8010408 <dhcp_decline+0xb0>
    dhcp->tries++;
 80103fc:	69bb      	ldr	r3, [r7, #24]
 80103fe:	799b      	ldrb	r3, [r3, #6]
 8010400:	3301      	adds	r3, #1
 8010402:	b2da      	uxtb	r2, r3
 8010404:	69bb      	ldr	r3, [r7, #24]
 8010406:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8010408:	f242 7310 	movw	r3, #10000	; 0x2710
 801040c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801040e:	89fb      	ldrh	r3, [r7, #14]
 8010410:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010414:	4a0a      	ldr	r2, [pc, #40]	; (8010440 <dhcp_decline+0xe8>)
 8010416:	fb82 1203 	smull	r1, r2, r2, r3
 801041a:	1152      	asrs	r2, r2, #5
 801041c:	17db      	asrs	r3, r3, #31
 801041e:	1ad3      	subs	r3, r2, r3
 8010420:	b29a      	uxth	r2, r3
 8010422:	69bb      	ldr	r3, [r7, #24]
 8010424:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010426:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801042a:	4618      	mov	r0, r3
 801042c:	3720      	adds	r7, #32
 801042e:	46bd      	mov	sp, r7
 8010430:	bdb0      	pop	{r4, r5, r7, pc}
 8010432:	bf00      	nop
 8010434:	2000af48 	.word	0x2000af48
 8010438:	0801a7a4 	.word	0x0801a7a4
 801043c:	0801a7a8 	.word	0x0801a7a8
 8010440:	10624dd3 	.word	0x10624dd3

08010444 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b08a      	sub	sp, #40	; 0x28
 8010448:	af02      	add	r7, sp, #8
 801044a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010450:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8010452:	2300      	movs	r3, #0
 8010454:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8010456:	69bb      	ldr	r3, [r7, #24]
 8010458:	2200      	movs	r2, #0
 801045a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801045c:	2106      	movs	r1, #6
 801045e:	69b8      	ldr	r0, [r7, #24]
 8010460:	f000 fbf4 	bl	8010c4c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8010464:	f107 0308 	add.w	r3, r7, #8
 8010468:	2201      	movs	r2, #1
 801046a:	69b9      	ldr	r1, [r7, #24]
 801046c:	6878      	ldr	r0, [r7, #4]
 801046e:	f001 f879 	bl	8011564 <dhcp_create_msg>
 8010472:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8010474:	693b      	ldr	r3, [r7, #16]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d04b      	beq.n	8010512 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801047a:	693b      	ldr	r3, [r7, #16]
 801047c:	685b      	ldr	r3, [r3, #4]
 801047e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010480:	8938      	ldrh	r0, [r7, #8]
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010488:	2302      	movs	r3, #2
 801048a:	2239      	movs	r2, #57	; 0x39
 801048c:	f000 fbf8 	bl	8010c80 <dhcp_option>
 8010490:	4603      	mov	r3, r0
 8010492:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010494:	8938      	ldrh	r0, [r7, #8]
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80104a0:	461a      	mov	r2, r3
 80104a2:	f000 fc47 	bl	8010d34 <dhcp_option_short>
 80104a6:	4603      	mov	r3, r0
 80104a8:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80104aa:	8938      	ldrh	r0, [r7, #8]
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80104b2:	2303      	movs	r3, #3
 80104b4:	2237      	movs	r2, #55	; 0x37
 80104b6:	f000 fbe3 	bl	8010c80 <dhcp_option>
 80104ba:	4603      	mov	r3, r0
 80104bc:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80104be:	2300      	movs	r3, #0
 80104c0:	77fb      	strb	r3, [r7, #31]
 80104c2:	e00e      	b.n	80104e2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80104c4:	8938      	ldrh	r0, [r7, #8]
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80104cc:	7ffb      	ldrb	r3, [r7, #31]
 80104ce:	4a29      	ldr	r2, [pc, #164]	; (8010574 <dhcp_discover+0x130>)
 80104d0:	5cd3      	ldrb	r3, [r2, r3]
 80104d2:	461a      	mov	r2, r3
 80104d4:	f000 fc08 	bl	8010ce8 <dhcp_option_byte>
 80104d8:	4603      	mov	r3, r0
 80104da:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80104dc:	7ffb      	ldrb	r3, [r7, #31]
 80104de:	3301      	adds	r3, #1
 80104e0:	77fb      	strb	r3, [r7, #31]
 80104e2:	7ffb      	ldrb	r3, [r7, #31]
 80104e4:	2b02      	cmp	r3, #2
 80104e6:	d9ed      	bls.n	80104c4 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80104e8:	8938      	ldrh	r0, [r7, #8]
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	33f0      	adds	r3, #240	; 0xf0
 80104ee:	693a      	ldr	r2, [r7, #16]
 80104f0:	4619      	mov	r1, r3
 80104f2:	f001 f90d 	bl	8011710 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80104f6:	4b20      	ldr	r3, [pc, #128]	; (8010578 <dhcp_discover+0x134>)
 80104f8:	6818      	ldr	r0, [r3, #0]
 80104fa:	4b20      	ldr	r3, [pc, #128]	; (801057c <dhcp_discover+0x138>)
 80104fc:	9301      	str	r3, [sp, #4]
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	9300      	str	r3, [sp, #0]
 8010502:	2343      	movs	r3, #67	; 0x43
 8010504:	4a1e      	ldr	r2, [pc, #120]	; (8010580 <dhcp_discover+0x13c>)
 8010506:	6939      	ldr	r1, [r7, #16]
 8010508:	f7ff f83c 	bl	800f584 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801050c:	6938      	ldr	r0, [r7, #16]
 801050e:	f7f9 f8bf 	bl	8009690 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8010512:	69bb      	ldr	r3, [r7, #24]
 8010514:	799b      	ldrb	r3, [r3, #6]
 8010516:	2bff      	cmp	r3, #255	; 0xff
 8010518:	d005      	beq.n	8010526 <dhcp_discover+0xe2>
    dhcp->tries++;
 801051a:	69bb      	ldr	r3, [r7, #24]
 801051c:	799b      	ldrb	r3, [r3, #6]
 801051e:	3301      	adds	r3, #1
 8010520:	b2da      	uxtb	r2, r3
 8010522:	69bb      	ldr	r3, [r7, #24]
 8010524:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8010526:	69bb      	ldr	r3, [r7, #24]
 8010528:	799b      	ldrb	r3, [r3, #6]
 801052a:	2b05      	cmp	r3, #5
 801052c:	d80d      	bhi.n	801054a <dhcp_discover+0x106>
 801052e:	69bb      	ldr	r3, [r7, #24]
 8010530:	799b      	ldrb	r3, [r3, #6]
 8010532:	461a      	mov	r2, r3
 8010534:	2301      	movs	r3, #1
 8010536:	4093      	lsls	r3, r2
 8010538:	b29b      	uxth	r3, r3
 801053a:	461a      	mov	r2, r3
 801053c:	0152      	lsls	r2, r2, #5
 801053e:	1ad2      	subs	r2, r2, r3
 8010540:	0092      	lsls	r2, r2, #2
 8010542:	4413      	add	r3, r2
 8010544:	00db      	lsls	r3, r3, #3
 8010546:	b29b      	uxth	r3, r3
 8010548:	e001      	b.n	801054e <dhcp_discover+0x10a>
 801054a:	f64e 2360 	movw	r3, #60000	; 0xea60
 801054e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010550:	897b      	ldrh	r3, [r7, #10]
 8010552:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010556:	4a0b      	ldr	r2, [pc, #44]	; (8010584 <dhcp_discover+0x140>)
 8010558:	fb82 1203 	smull	r1, r2, r2, r3
 801055c:	1152      	asrs	r2, r2, #5
 801055e:	17db      	asrs	r3, r3, #31
 8010560:	1ad3      	subs	r3, r2, r3
 8010562:	b29a      	uxth	r2, r3
 8010564:	69bb      	ldr	r3, [r7, #24]
 8010566:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010568:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801056c:	4618      	mov	r0, r3
 801056e:	3720      	adds	r7, #32
 8010570:	46bd      	mov	sp, r7
 8010572:	bd80      	pop	{r7, pc}
 8010574:	20000044 	.word	0x20000044
 8010578:	2000af48 	.word	0x2000af48
 801057c:	0801a7a4 	.word	0x0801a7a4
 8010580:	0801a7a8 	.word	0x0801a7a8
 8010584:	10624dd3 	.word	0x10624dd3

08010588 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b088      	sub	sp, #32
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d107      	bne.n	80105a6 <dhcp_bind+0x1e>
 8010596:	4b64      	ldr	r3, [pc, #400]	; (8010728 <dhcp_bind+0x1a0>)
 8010598:	f240 4215 	movw	r2, #1045	; 0x415
 801059c:	4963      	ldr	r1, [pc, #396]	; (801072c <dhcp_bind+0x1a4>)
 801059e:	4864      	ldr	r0, [pc, #400]	; (8010730 <dhcp_bind+0x1a8>)
 80105a0:	f003 fc56 	bl	8013e50 <iprintf>
 80105a4:	e0bc      	b.n	8010720 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105aa:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80105ac:	69bb      	ldr	r3, [r7, #24]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d107      	bne.n	80105c2 <dhcp_bind+0x3a>
 80105b2:	4b5d      	ldr	r3, [pc, #372]	; (8010728 <dhcp_bind+0x1a0>)
 80105b4:	f240 4217 	movw	r2, #1047	; 0x417
 80105b8:	495e      	ldr	r1, [pc, #376]	; (8010734 <dhcp_bind+0x1ac>)
 80105ba:	485d      	ldr	r0, [pc, #372]	; (8010730 <dhcp_bind+0x1a8>)
 80105bc:	f003 fc48 	bl	8013e50 <iprintf>
 80105c0:	e0ae      	b.n	8010720 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80105c2:	69bb      	ldr	r3, [r7, #24]
 80105c4:	2200      	movs	r2, #0
 80105c6:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80105c8:	69bb      	ldr	r3, [r7, #24]
 80105ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105d0:	d019      	beq.n	8010606 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80105d2:	69bb      	ldr	r3, [r7, #24]
 80105d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105d6:	331e      	adds	r3, #30
 80105d8:	4a57      	ldr	r2, [pc, #348]	; (8010738 <dhcp_bind+0x1b0>)
 80105da:	fba2 2303 	umull	r2, r3, r2, r3
 80105de:	095b      	lsrs	r3, r3, #5
 80105e0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80105e2:	69fb      	ldr	r3, [r7, #28]
 80105e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105e8:	d302      	bcc.n	80105f0 <dhcp_bind+0x68>
      timeout = 0xffff;
 80105ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80105ee:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80105f0:	69fb      	ldr	r3, [r7, #28]
 80105f2:	b29a      	uxth	r2, r3
 80105f4:	69bb      	ldr	r3, [r7, #24]
 80105f6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80105f8:	69bb      	ldr	r3, [r7, #24]
 80105fa:	8a9b      	ldrh	r3, [r3, #20]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d102      	bne.n	8010606 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8010600:	69bb      	ldr	r3, [r7, #24]
 8010602:	2201      	movs	r2, #1
 8010604:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8010606:	69bb      	ldr	r3, [r7, #24]
 8010608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801060a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801060e:	d01d      	beq.n	801064c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010610:	69bb      	ldr	r3, [r7, #24]
 8010612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010614:	331e      	adds	r3, #30
 8010616:	4a48      	ldr	r2, [pc, #288]	; (8010738 <dhcp_bind+0x1b0>)
 8010618:	fba2 2303 	umull	r2, r3, r2, r3
 801061c:	095b      	lsrs	r3, r3, #5
 801061e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010620:	69fb      	ldr	r3, [r7, #28]
 8010622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010626:	d302      	bcc.n	801062e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8010628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801062c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801062e:	69fb      	ldr	r3, [r7, #28]
 8010630:	b29a      	uxth	r2, r3
 8010632:	69bb      	ldr	r3, [r7, #24]
 8010634:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8010636:	69bb      	ldr	r3, [r7, #24]
 8010638:	895b      	ldrh	r3, [r3, #10]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d102      	bne.n	8010644 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801063e:	69bb      	ldr	r3, [r7, #24]
 8010640:	2201      	movs	r2, #1
 8010642:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8010644:	69bb      	ldr	r3, [r7, #24]
 8010646:	895a      	ldrh	r2, [r3, #10]
 8010648:	69bb      	ldr	r3, [r7, #24]
 801064a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801064c:	69bb      	ldr	r3, [r7, #24]
 801064e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010654:	d01d      	beq.n	8010692 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010656:	69bb      	ldr	r3, [r7, #24]
 8010658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801065a:	331e      	adds	r3, #30
 801065c:	4a36      	ldr	r2, [pc, #216]	; (8010738 <dhcp_bind+0x1b0>)
 801065e:	fba2 2303 	umull	r2, r3, r2, r3
 8010662:	095b      	lsrs	r3, r3, #5
 8010664:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010666:	69fb      	ldr	r3, [r7, #28]
 8010668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801066c:	d302      	bcc.n	8010674 <dhcp_bind+0xec>
      timeout = 0xffff;
 801066e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010672:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8010674:	69fb      	ldr	r3, [r7, #28]
 8010676:	b29a      	uxth	r2, r3
 8010678:	69bb      	ldr	r3, [r7, #24]
 801067a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801067c:	69bb      	ldr	r3, [r7, #24]
 801067e:	899b      	ldrh	r3, [r3, #12]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d102      	bne.n	801068a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8010684:	69bb      	ldr	r3, [r7, #24]
 8010686:	2201      	movs	r2, #1
 8010688:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801068a:	69bb      	ldr	r3, [r7, #24]
 801068c:	899a      	ldrh	r2, [r3, #12]
 801068e:	69bb      	ldr	r3, [r7, #24]
 8010690:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8010692:	69bb      	ldr	r3, [r7, #24]
 8010694:	895a      	ldrh	r2, [r3, #10]
 8010696:	69bb      	ldr	r3, [r7, #24]
 8010698:	899b      	ldrh	r3, [r3, #12]
 801069a:	429a      	cmp	r2, r3
 801069c:	d306      	bcc.n	80106ac <dhcp_bind+0x124>
 801069e:	69bb      	ldr	r3, [r7, #24]
 80106a0:	899b      	ldrh	r3, [r3, #12]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d002      	beq.n	80106ac <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80106a6:	69bb      	ldr	r3, [r7, #24]
 80106a8:	2200      	movs	r2, #0
 80106aa:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80106ac:	69bb      	ldr	r3, [r7, #24]
 80106ae:	79db      	ldrb	r3, [r3, #7]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d003      	beq.n	80106bc <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80106b4:	69bb      	ldr	r3, [r7, #24]
 80106b6:	6a1b      	ldr	r3, [r3, #32]
 80106b8:	613b      	str	r3, [r7, #16]
 80106ba:	e014      	b.n	80106e6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80106bc:	69bb      	ldr	r3, [r7, #24]
 80106be:	331c      	adds	r3, #28
 80106c0:	781b      	ldrb	r3, [r3, #0]
 80106c2:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80106c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	db02      	blt.n	80106d2 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80106cc:	23ff      	movs	r3, #255	; 0xff
 80106ce:	613b      	str	r3, [r7, #16]
 80106d0:	e009      	b.n	80106e6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80106d2:	7dfb      	ldrb	r3, [r7, #23]
 80106d4:	2bbf      	cmp	r3, #191	; 0xbf
 80106d6:	d903      	bls.n	80106e0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80106d8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80106dc:	613b      	str	r3, [r7, #16]
 80106de:	e002      	b.n	80106e6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80106e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80106e4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80106e6:	69bb      	ldr	r3, [r7, #24]
 80106e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106ea:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d108      	bne.n	8010704 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80106f2:	69bb      	ldr	r3, [r7, #24]
 80106f4:	69da      	ldr	r2, [r3, #28]
 80106f6:	693b      	ldr	r3, [r7, #16]
 80106f8:	4013      	ands	r3, r2
 80106fa:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010702:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8010704:	210a      	movs	r1, #10
 8010706:	69b8      	ldr	r0, [r7, #24]
 8010708:	f000 faa0 	bl	8010c4c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801070c:	69bb      	ldr	r3, [r7, #24]
 801070e:	f103 011c 	add.w	r1, r3, #28
 8010712:	f107 030c 	add.w	r3, r7, #12
 8010716:	f107 0210 	add.w	r2, r7, #16
 801071a:	6878      	ldr	r0, [r7, #4]
 801071c:	f7f8 fad8 	bl	8008cd0 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8010720:	3720      	adds	r7, #32
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}
 8010726:	bf00      	nop
 8010728:	08017714 	.word	0x08017714
 801072c:	08017874 	.word	0x08017874
 8010730:	08017774 	.word	0x08017774
 8010734:	08017890 	.word	0x08017890
 8010738:	88888889 	.word	0x88888889

0801073c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b08a      	sub	sp, #40	; 0x28
 8010740:	af02      	add	r7, sp, #8
 8010742:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010748:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801074a:	2105      	movs	r1, #5
 801074c:	69b8      	ldr	r0, [r7, #24]
 801074e:	f000 fa7d 	bl	8010c4c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010752:	f107 030c 	add.w	r3, r7, #12
 8010756:	2203      	movs	r2, #3
 8010758:	69b9      	ldr	r1, [r7, #24]
 801075a:	6878      	ldr	r0, [r7, #4]
 801075c:	f000 ff02 	bl	8011564 <dhcp_create_msg>
 8010760:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010762:	697b      	ldr	r3, [r7, #20]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d04e      	beq.n	8010806 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010768:	697b      	ldr	r3, [r7, #20]
 801076a:	685b      	ldr	r3, [r3, #4]
 801076c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801076e:	89b8      	ldrh	r0, [r7, #12]
 8010770:	693b      	ldr	r3, [r7, #16]
 8010772:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010776:	2302      	movs	r3, #2
 8010778:	2239      	movs	r2, #57	; 0x39
 801077a:	f000 fa81 	bl	8010c80 <dhcp_option>
 801077e:	4603      	mov	r3, r0
 8010780:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010782:	89b8      	ldrh	r0, [r7, #12]
 8010784:	693b      	ldr	r3, [r7, #16]
 8010786:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801078e:	461a      	mov	r2, r3
 8010790:	f000 fad0 	bl	8010d34 <dhcp_option_short>
 8010794:	4603      	mov	r3, r0
 8010796:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010798:	89b8      	ldrh	r0, [r7, #12]
 801079a:	693b      	ldr	r3, [r7, #16]
 801079c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80107a0:	2303      	movs	r3, #3
 80107a2:	2237      	movs	r2, #55	; 0x37
 80107a4:	f000 fa6c 	bl	8010c80 <dhcp_option>
 80107a8:	4603      	mov	r3, r0
 80107aa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80107ac:	2300      	movs	r3, #0
 80107ae:	77bb      	strb	r3, [r7, #30]
 80107b0:	e00e      	b.n	80107d0 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80107b2:	89b8      	ldrh	r0, [r7, #12]
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80107ba:	7fbb      	ldrb	r3, [r7, #30]
 80107bc:	4a2a      	ldr	r2, [pc, #168]	; (8010868 <dhcp_renew+0x12c>)
 80107be:	5cd3      	ldrb	r3, [r2, r3]
 80107c0:	461a      	mov	r2, r3
 80107c2:	f000 fa91 	bl	8010ce8 <dhcp_option_byte>
 80107c6:	4603      	mov	r3, r0
 80107c8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80107ca:	7fbb      	ldrb	r3, [r7, #30]
 80107cc:	3301      	adds	r3, #1
 80107ce:	77bb      	strb	r3, [r7, #30]
 80107d0:	7fbb      	ldrb	r3, [r7, #30]
 80107d2:	2b02      	cmp	r3, #2
 80107d4:	d9ed      	bls.n	80107b2 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80107d6:	89b8      	ldrh	r0, [r7, #12]
 80107d8:	693b      	ldr	r3, [r7, #16]
 80107da:	33f0      	adds	r3, #240	; 0xf0
 80107dc:	697a      	ldr	r2, [r7, #20]
 80107de:	4619      	mov	r1, r3
 80107e0:	f000 ff96 	bl	8011710 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80107e4:	4b21      	ldr	r3, [pc, #132]	; (801086c <dhcp_renew+0x130>)
 80107e6:	6818      	ldr	r0, [r3, #0]
 80107e8:	69bb      	ldr	r3, [r7, #24]
 80107ea:	f103 0218 	add.w	r2, r3, #24
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	9300      	str	r3, [sp, #0]
 80107f2:	2343      	movs	r3, #67	; 0x43
 80107f4:	6979      	ldr	r1, [r7, #20]
 80107f6:	f7fe fe51 	bl	800f49c <udp_sendto_if>
 80107fa:	4603      	mov	r3, r0
 80107fc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80107fe:	6978      	ldr	r0, [r7, #20]
 8010800:	f7f8 ff46 	bl	8009690 <pbuf_free>
 8010804:	e001      	b.n	801080a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010806:	23ff      	movs	r3, #255	; 0xff
 8010808:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801080a:	69bb      	ldr	r3, [r7, #24]
 801080c:	799b      	ldrb	r3, [r3, #6]
 801080e:	2bff      	cmp	r3, #255	; 0xff
 8010810:	d005      	beq.n	801081e <dhcp_renew+0xe2>
    dhcp->tries++;
 8010812:	69bb      	ldr	r3, [r7, #24]
 8010814:	799b      	ldrb	r3, [r3, #6]
 8010816:	3301      	adds	r3, #1
 8010818:	b2da      	uxtb	r2, r3
 801081a:	69bb      	ldr	r3, [r7, #24]
 801081c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801081e:	69bb      	ldr	r3, [r7, #24]
 8010820:	799b      	ldrb	r3, [r3, #6]
 8010822:	2b09      	cmp	r3, #9
 8010824:	d80a      	bhi.n	801083c <dhcp_renew+0x100>
 8010826:	69bb      	ldr	r3, [r7, #24]
 8010828:	799b      	ldrb	r3, [r3, #6]
 801082a:	b29b      	uxth	r3, r3
 801082c:	461a      	mov	r2, r3
 801082e:	0152      	lsls	r2, r2, #5
 8010830:	1ad2      	subs	r2, r2, r3
 8010832:	0092      	lsls	r2, r2, #2
 8010834:	4413      	add	r3, r2
 8010836:	011b      	lsls	r3, r3, #4
 8010838:	b29b      	uxth	r3, r3
 801083a:	e001      	b.n	8010840 <dhcp_renew+0x104>
 801083c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8010840:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010842:	89fb      	ldrh	r3, [r7, #14]
 8010844:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010848:	4a09      	ldr	r2, [pc, #36]	; (8010870 <dhcp_renew+0x134>)
 801084a:	fb82 1203 	smull	r1, r2, r2, r3
 801084e:	1152      	asrs	r2, r2, #5
 8010850:	17db      	asrs	r3, r3, #31
 8010852:	1ad3      	subs	r3, r2, r3
 8010854:	b29a      	uxth	r2, r3
 8010856:	69bb      	ldr	r3, [r7, #24]
 8010858:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801085a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801085e:	4618      	mov	r0, r3
 8010860:	3720      	adds	r7, #32
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}
 8010866:	bf00      	nop
 8010868:	20000044 	.word	0x20000044
 801086c:	2000af48 	.word	0x2000af48
 8010870:	10624dd3 	.word	0x10624dd3

08010874 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b08a      	sub	sp, #40	; 0x28
 8010878:	af02      	add	r7, sp, #8
 801087a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010880:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8010882:	2104      	movs	r1, #4
 8010884:	69b8      	ldr	r0, [r7, #24]
 8010886:	f000 f9e1 	bl	8010c4c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801088a:	f107 030c 	add.w	r3, r7, #12
 801088e:	2203      	movs	r2, #3
 8010890:	69b9      	ldr	r1, [r7, #24]
 8010892:	6878      	ldr	r0, [r7, #4]
 8010894:	f000 fe66 	bl	8011564 <dhcp_create_msg>
 8010898:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801089a:	697b      	ldr	r3, [r7, #20]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d04c      	beq.n	801093a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80108a0:	697b      	ldr	r3, [r7, #20]
 80108a2:	685b      	ldr	r3, [r3, #4]
 80108a4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80108a6:	89b8      	ldrh	r0, [r7, #12]
 80108a8:	693b      	ldr	r3, [r7, #16]
 80108aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80108ae:	2302      	movs	r3, #2
 80108b0:	2239      	movs	r2, #57	; 0x39
 80108b2:	f000 f9e5 	bl	8010c80 <dhcp_option>
 80108b6:	4603      	mov	r3, r0
 80108b8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80108ba:	89b8      	ldrh	r0, [r7, #12]
 80108bc:	693b      	ldr	r3, [r7, #16]
 80108be:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80108c6:	461a      	mov	r2, r3
 80108c8:	f000 fa34 	bl	8010d34 <dhcp_option_short>
 80108cc:	4603      	mov	r3, r0
 80108ce:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80108d0:	89b8      	ldrh	r0, [r7, #12]
 80108d2:	693b      	ldr	r3, [r7, #16]
 80108d4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80108d8:	2303      	movs	r3, #3
 80108da:	2237      	movs	r2, #55	; 0x37
 80108dc:	f000 f9d0 	bl	8010c80 <dhcp_option>
 80108e0:	4603      	mov	r3, r0
 80108e2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80108e4:	2300      	movs	r3, #0
 80108e6:	77bb      	strb	r3, [r7, #30]
 80108e8:	e00e      	b.n	8010908 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80108ea:	89b8      	ldrh	r0, [r7, #12]
 80108ec:	693b      	ldr	r3, [r7, #16]
 80108ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80108f2:	7fbb      	ldrb	r3, [r7, #30]
 80108f4:	4a29      	ldr	r2, [pc, #164]	; (801099c <dhcp_rebind+0x128>)
 80108f6:	5cd3      	ldrb	r3, [r2, r3]
 80108f8:	461a      	mov	r2, r3
 80108fa:	f000 f9f5 	bl	8010ce8 <dhcp_option_byte>
 80108fe:	4603      	mov	r3, r0
 8010900:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010902:	7fbb      	ldrb	r3, [r7, #30]
 8010904:	3301      	adds	r3, #1
 8010906:	77bb      	strb	r3, [r7, #30]
 8010908:	7fbb      	ldrb	r3, [r7, #30]
 801090a:	2b02      	cmp	r3, #2
 801090c:	d9ed      	bls.n	80108ea <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801090e:	89b8      	ldrh	r0, [r7, #12]
 8010910:	693b      	ldr	r3, [r7, #16]
 8010912:	33f0      	adds	r3, #240	; 0xf0
 8010914:	697a      	ldr	r2, [r7, #20]
 8010916:	4619      	mov	r1, r3
 8010918:	f000 fefa 	bl	8011710 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801091c:	4b20      	ldr	r3, [pc, #128]	; (80109a0 <dhcp_rebind+0x12c>)
 801091e:	6818      	ldr	r0, [r3, #0]
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	9300      	str	r3, [sp, #0]
 8010924:	2343      	movs	r3, #67	; 0x43
 8010926:	4a1f      	ldr	r2, [pc, #124]	; (80109a4 <dhcp_rebind+0x130>)
 8010928:	6979      	ldr	r1, [r7, #20]
 801092a:	f7fe fdb7 	bl	800f49c <udp_sendto_if>
 801092e:	4603      	mov	r3, r0
 8010930:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010932:	6978      	ldr	r0, [r7, #20]
 8010934:	f7f8 feac 	bl	8009690 <pbuf_free>
 8010938:	e001      	b.n	801093e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801093a:	23ff      	movs	r3, #255	; 0xff
 801093c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801093e:	69bb      	ldr	r3, [r7, #24]
 8010940:	799b      	ldrb	r3, [r3, #6]
 8010942:	2bff      	cmp	r3, #255	; 0xff
 8010944:	d005      	beq.n	8010952 <dhcp_rebind+0xde>
    dhcp->tries++;
 8010946:	69bb      	ldr	r3, [r7, #24]
 8010948:	799b      	ldrb	r3, [r3, #6]
 801094a:	3301      	adds	r3, #1
 801094c:	b2da      	uxtb	r2, r3
 801094e:	69bb      	ldr	r3, [r7, #24]
 8010950:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8010952:	69bb      	ldr	r3, [r7, #24]
 8010954:	799b      	ldrb	r3, [r3, #6]
 8010956:	2b09      	cmp	r3, #9
 8010958:	d80a      	bhi.n	8010970 <dhcp_rebind+0xfc>
 801095a:	69bb      	ldr	r3, [r7, #24]
 801095c:	799b      	ldrb	r3, [r3, #6]
 801095e:	b29b      	uxth	r3, r3
 8010960:	461a      	mov	r2, r3
 8010962:	0152      	lsls	r2, r2, #5
 8010964:	1ad2      	subs	r2, r2, r3
 8010966:	0092      	lsls	r2, r2, #2
 8010968:	4413      	add	r3, r2
 801096a:	00db      	lsls	r3, r3, #3
 801096c:	b29b      	uxth	r3, r3
 801096e:	e001      	b.n	8010974 <dhcp_rebind+0x100>
 8010970:	f242 7310 	movw	r3, #10000	; 0x2710
 8010974:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010976:	89fb      	ldrh	r3, [r7, #14]
 8010978:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801097c:	4a0a      	ldr	r2, [pc, #40]	; (80109a8 <dhcp_rebind+0x134>)
 801097e:	fb82 1203 	smull	r1, r2, r2, r3
 8010982:	1152      	asrs	r2, r2, #5
 8010984:	17db      	asrs	r3, r3, #31
 8010986:	1ad3      	subs	r3, r2, r3
 8010988:	b29a      	uxth	r2, r3
 801098a:	69bb      	ldr	r3, [r7, #24]
 801098c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801098e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010992:	4618      	mov	r0, r3
 8010994:	3720      	adds	r7, #32
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}
 801099a:	bf00      	nop
 801099c:	20000044 	.word	0x20000044
 80109a0:	2000af48 	.word	0x2000af48
 80109a4:	0801a7a8 	.word	0x0801a7a8
 80109a8:	10624dd3 	.word	0x10624dd3

080109ac <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80109ac:	b5b0      	push	{r4, r5, r7, lr}
 80109ae:	b08a      	sub	sp, #40	; 0x28
 80109b0:	af02      	add	r7, sp, #8
 80109b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109b8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80109ba:	2103      	movs	r1, #3
 80109bc:	69b8      	ldr	r0, [r7, #24]
 80109be:	f000 f945 	bl	8010c4c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80109c2:	f107 030c 	add.w	r3, r7, #12
 80109c6:	2203      	movs	r2, #3
 80109c8:	69b9      	ldr	r1, [r7, #24]
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	f000 fdca 	bl	8011564 <dhcp_create_msg>
 80109d0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80109d2:	697b      	ldr	r3, [r7, #20]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d066      	beq.n	8010aa6 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80109d8:	697b      	ldr	r3, [r7, #20]
 80109da:	685b      	ldr	r3, [r3, #4]
 80109dc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80109de:	89b8      	ldrh	r0, [r7, #12]
 80109e0:	693b      	ldr	r3, [r7, #16]
 80109e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80109e6:	2302      	movs	r3, #2
 80109e8:	2239      	movs	r2, #57	; 0x39
 80109ea:	f000 f949 	bl	8010c80 <dhcp_option>
 80109ee:	4603      	mov	r3, r0
 80109f0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80109f2:	89b8      	ldrh	r0, [r7, #12]
 80109f4:	693b      	ldr	r3, [r7, #16]
 80109f6:	33f0      	adds	r3, #240	; 0xf0
 80109f8:	f44f 7210 	mov.w	r2, #576	; 0x240
 80109fc:	4619      	mov	r1, r3
 80109fe:	f000 f999 	bl	8010d34 <dhcp_option_short>
 8010a02:	4603      	mov	r3, r0
 8010a04:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010a06:	89b8      	ldrh	r0, [r7, #12]
 8010a08:	693b      	ldr	r3, [r7, #16]
 8010a0a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010a0e:	2304      	movs	r3, #4
 8010a10:	2232      	movs	r2, #50	; 0x32
 8010a12:	f000 f935 	bl	8010c80 <dhcp_option>
 8010a16:	4603      	mov	r3, r0
 8010a18:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8010a1a:	89bc      	ldrh	r4, [r7, #12]
 8010a1c:	693b      	ldr	r3, [r7, #16]
 8010a1e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010a22:	69bb      	ldr	r3, [r7, #24]
 8010a24:	69db      	ldr	r3, [r3, #28]
 8010a26:	4618      	mov	r0, r3
 8010a28:	f7f7 fadd 	bl	8007fe6 <lwip_htonl>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	461a      	mov	r2, r3
 8010a30:	4629      	mov	r1, r5
 8010a32:	4620      	mov	r0, r4
 8010a34:	f000 f9b0 	bl	8010d98 <dhcp_option_long>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010a3c:	89b8      	ldrh	r0, [r7, #12]
 8010a3e:	693b      	ldr	r3, [r7, #16]
 8010a40:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010a44:	2303      	movs	r3, #3
 8010a46:	2237      	movs	r2, #55	; 0x37
 8010a48:	f000 f91a 	bl	8010c80 <dhcp_option>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010a50:	2300      	movs	r3, #0
 8010a52:	77bb      	strb	r3, [r7, #30]
 8010a54:	e00e      	b.n	8010a74 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010a56:	89b8      	ldrh	r0, [r7, #12]
 8010a58:	693b      	ldr	r3, [r7, #16]
 8010a5a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010a5e:	7fbb      	ldrb	r3, [r7, #30]
 8010a60:	4a29      	ldr	r2, [pc, #164]	; (8010b08 <dhcp_reboot+0x15c>)
 8010a62:	5cd3      	ldrb	r3, [r2, r3]
 8010a64:	461a      	mov	r2, r3
 8010a66:	f000 f93f 	bl	8010ce8 <dhcp_option_byte>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010a6e:	7fbb      	ldrb	r3, [r7, #30]
 8010a70:	3301      	adds	r3, #1
 8010a72:	77bb      	strb	r3, [r7, #30]
 8010a74:	7fbb      	ldrb	r3, [r7, #30]
 8010a76:	2b02      	cmp	r3, #2
 8010a78:	d9ed      	bls.n	8010a56 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010a7a:	89b8      	ldrh	r0, [r7, #12]
 8010a7c:	693b      	ldr	r3, [r7, #16]
 8010a7e:	33f0      	adds	r3, #240	; 0xf0
 8010a80:	697a      	ldr	r2, [r7, #20]
 8010a82:	4619      	mov	r1, r3
 8010a84:	f000 fe44 	bl	8011710 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010a88:	4b20      	ldr	r3, [pc, #128]	; (8010b0c <dhcp_reboot+0x160>)
 8010a8a:	6818      	ldr	r0, [r3, #0]
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	9300      	str	r3, [sp, #0]
 8010a90:	2343      	movs	r3, #67	; 0x43
 8010a92:	4a1f      	ldr	r2, [pc, #124]	; (8010b10 <dhcp_reboot+0x164>)
 8010a94:	6979      	ldr	r1, [r7, #20]
 8010a96:	f7fe fd01 	bl	800f49c <udp_sendto_if>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010a9e:	6978      	ldr	r0, [r7, #20]
 8010aa0:	f7f8 fdf6 	bl	8009690 <pbuf_free>
 8010aa4:	e001      	b.n	8010aaa <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010aa6:	23ff      	movs	r3, #255	; 0xff
 8010aa8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010aaa:	69bb      	ldr	r3, [r7, #24]
 8010aac:	799b      	ldrb	r3, [r3, #6]
 8010aae:	2bff      	cmp	r3, #255	; 0xff
 8010ab0:	d005      	beq.n	8010abe <dhcp_reboot+0x112>
    dhcp->tries++;
 8010ab2:	69bb      	ldr	r3, [r7, #24]
 8010ab4:	799b      	ldrb	r3, [r3, #6]
 8010ab6:	3301      	adds	r3, #1
 8010ab8:	b2da      	uxtb	r2, r3
 8010aba:	69bb      	ldr	r3, [r7, #24]
 8010abc:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8010abe:	69bb      	ldr	r3, [r7, #24]
 8010ac0:	799b      	ldrb	r3, [r3, #6]
 8010ac2:	2b09      	cmp	r3, #9
 8010ac4:	d80a      	bhi.n	8010adc <dhcp_reboot+0x130>
 8010ac6:	69bb      	ldr	r3, [r7, #24]
 8010ac8:	799b      	ldrb	r3, [r3, #6]
 8010aca:	b29b      	uxth	r3, r3
 8010acc:	461a      	mov	r2, r3
 8010ace:	0152      	lsls	r2, r2, #5
 8010ad0:	1ad2      	subs	r2, r2, r3
 8010ad2:	0092      	lsls	r2, r2, #2
 8010ad4:	4413      	add	r3, r2
 8010ad6:	00db      	lsls	r3, r3, #3
 8010ad8:	b29b      	uxth	r3, r3
 8010ada:	e001      	b.n	8010ae0 <dhcp_reboot+0x134>
 8010adc:	f242 7310 	movw	r3, #10000	; 0x2710
 8010ae0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010ae2:	89fb      	ldrh	r3, [r7, #14]
 8010ae4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010ae8:	4a0a      	ldr	r2, [pc, #40]	; (8010b14 <dhcp_reboot+0x168>)
 8010aea:	fb82 1203 	smull	r1, r2, r2, r3
 8010aee:	1152      	asrs	r2, r2, #5
 8010af0:	17db      	asrs	r3, r3, #31
 8010af2:	1ad3      	subs	r3, r2, r3
 8010af4:	b29a      	uxth	r2, r3
 8010af6:	69bb      	ldr	r3, [r7, #24]
 8010af8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010afa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010afe:	4618      	mov	r0, r3
 8010b00:	3720      	adds	r7, #32
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bdb0      	pop	{r4, r5, r7, pc}
 8010b06:	bf00      	nop
 8010b08:	20000044 	.word	0x20000044
 8010b0c:	2000af48 	.word	0x2000af48
 8010b10:	0801a7a8 	.word	0x0801a7a8
 8010b14:	10624dd3 	.word	0x10624dd3

08010b18 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8010b18:	b5b0      	push	{r4, r5, r7, lr}
 8010b1a:	b08a      	sub	sp, #40	; 0x28
 8010b1c:	af02      	add	r7, sp, #8
 8010b1e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b24:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8010b26:	69fb      	ldr	r3, [r7, #28]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	f000 8084 	beq.w	8010c36 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8010b2e:	69fb      	ldr	r3, [r7, #28]
 8010b30:	795b      	ldrb	r3, [r3, #5]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	f000 8081 	beq.w	8010c3a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8010b38:	69fb      	ldr	r3, [r7, #28]
 8010b3a:	699b      	ldr	r3, [r3, #24]
 8010b3c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8010b3e:	69fb      	ldr	r3, [r7, #28]
 8010b40:	2200      	movs	r2, #0
 8010b42:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8010b44:	69fb      	ldr	r3, [r7, #28]
 8010b46:	2200      	movs	r2, #0
 8010b48:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8010b4a:	69fb      	ldr	r3, [r7, #28]
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8010b50:	69fb      	ldr	r3, [r7, #28]
 8010b52:	2200      	movs	r2, #0
 8010b54:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8010b56:	69fb      	ldr	r3, [r7, #28]
 8010b58:	2200      	movs	r2, #0
 8010b5a:	631a      	str	r2, [r3, #48]	; 0x30
 8010b5c:	69fb      	ldr	r3, [r7, #28]
 8010b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010b60:	69fb      	ldr	r3, [r7, #28]
 8010b62:	62da      	str	r2, [r3, #44]	; 0x2c
 8010b64:	69fb      	ldr	r3, [r7, #28]
 8010b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b68:	69fb      	ldr	r3, [r7, #28]
 8010b6a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8010b6c:	69fb      	ldr	r3, [r7, #28]
 8010b6e:	2200      	movs	r2, #0
 8010b70:	829a      	strh	r2, [r3, #20]
 8010b72:	69fb      	ldr	r3, [r7, #28]
 8010b74:	8a9a      	ldrh	r2, [r3, #20]
 8010b76:	69fb      	ldr	r3, [r7, #28]
 8010b78:	825a      	strh	r2, [r3, #18]
 8010b7a:	69fb      	ldr	r3, [r7, #28]
 8010b7c:	8a5a      	ldrh	r2, [r3, #18]
 8010b7e:	69fb      	ldr	r3, [r7, #28]
 8010b80:	821a      	strh	r2, [r3, #16]
 8010b82:	69fb      	ldr	r3, [r7, #28]
 8010b84:	8a1a      	ldrh	r2, [r3, #16]
 8010b86:	69fb      	ldr	r3, [r7, #28]
 8010b88:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	f000 fdee 	bl	801176c <dhcp_supplied_address>
 8010b90:	4603      	mov	r3, r0
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d03b      	beq.n	8010c0e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8010b96:	f107 030e 	add.w	r3, r7, #14
 8010b9a:	2207      	movs	r2, #7
 8010b9c:	69f9      	ldr	r1, [r7, #28]
 8010b9e:	6878      	ldr	r0, [r7, #4]
 8010ba0:	f000 fce0 	bl	8011564 <dhcp_create_msg>
 8010ba4:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8010ba6:	69bb      	ldr	r3, [r7, #24]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d030      	beq.n	8010c0e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010bac:	69bb      	ldr	r3, [r7, #24]
 8010bae:	685b      	ldr	r3, [r3, #4]
 8010bb0:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8010bb2:	89f8      	ldrh	r0, [r7, #14]
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010bba:	2304      	movs	r3, #4
 8010bbc:	2236      	movs	r2, #54	; 0x36
 8010bbe:	f000 f85f 	bl	8010c80 <dhcp_option>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8010bc6:	89fc      	ldrh	r4, [r7, #14]
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010bce:	693b      	ldr	r3, [r7, #16]
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f7f7 fa08 	bl	8007fe6 <lwip_htonl>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	461a      	mov	r2, r3
 8010bda:	4629      	mov	r1, r5
 8010bdc:	4620      	mov	r0, r4
 8010bde:	f000 f8db 	bl	8010d98 <dhcp_option_long>
 8010be2:	4603      	mov	r3, r0
 8010be4:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010be6:	89f8      	ldrh	r0, [r7, #14]
 8010be8:	697b      	ldr	r3, [r7, #20]
 8010bea:	33f0      	adds	r3, #240	; 0xf0
 8010bec:	69ba      	ldr	r2, [r7, #24]
 8010bee:	4619      	mov	r1, r3
 8010bf0:	f000 fd8e 	bl	8011710 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010bf4:	4b13      	ldr	r3, [pc, #76]	; (8010c44 <dhcp_release_and_stop+0x12c>)
 8010bf6:	6818      	ldr	r0, [r3, #0]
 8010bf8:	f107 0210 	add.w	r2, r7, #16
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	9300      	str	r3, [sp, #0]
 8010c00:	2343      	movs	r3, #67	; 0x43
 8010c02:	69b9      	ldr	r1, [r7, #24]
 8010c04:	f7fe fc4a 	bl	800f49c <udp_sendto_if>
      pbuf_free(p_out);
 8010c08:	69b8      	ldr	r0, [r7, #24]
 8010c0a:	f7f8 fd41 	bl	8009690 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8010c0e:	4b0e      	ldr	r3, [pc, #56]	; (8010c48 <dhcp_release_and_stop+0x130>)
 8010c10:	4a0d      	ldr	r2, [pc, #52]	; (8010c48 <dhcp_release_and_stop+0x130>)
 8010c12:	490d      	ldr	r1, [pc, #52]	; (8010c48 <dhcp_release_and_stop+0x130>)
 8010c14:	6878      	ldr	r0, [r7, #4]
 8010c16:	f7f8 f85b 	bl	8008cd0 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8010c1a:	2100      	movs	r1, #0
 8010c1c:	69f8      	ldr	r0, [r7, #28]
 8010c1e:	f000 f815 	bl	8010c4c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8010c22:	69fb      	ldr	r3, [r7, #28]
 8010c24:	791b      	ldrb	r3, [r3, #4]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d008      	beq.n	8010c3c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8010c2a:	f7fe ff83 	bl	800fb34 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8010c2e:	69fb      	ldr	r3, [r7, #28]
 8010c30:	2200      	movs	r2, #0
 8010c32:	711a      	strb	r2, [r3, #4]
 8010c34:	e002      	b.n	8010c3c <dhcp_release_and_stop+0x124>
    return;
 8010c36:	bf00      	nop
 8010c38:	e000      	b.n	8010c3c <dhcp_release_and_stop+0x124>
    return;
 8010c3a:	bf00      	nop
  }
}
 8010c3c:	3720      	adds	r7, #32
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	bdb0      	pop	{r4, r5, r7, pc}
 8010c42:	bf00      	nop
 8010c44:	2000af48 	.word	0x2000af48
 8010c48:	0801a7a4 	.word	0x0801a7a4

08010c4c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8010c4c:	b480      	push	{r7}
 8010c4e:	b083      	sub	sp, #12
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
 8010c54:	460b      	mov	r3, r1
 8010c56:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	795b      	ldrb	r3, [r3, #5]
 8010c5c:	78fa      	ldrb	r2, [r7, #3]
 8010c5e:	429a      	cmp	r2, r3
 8010c60:	d008      	beq.n	8010c74 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	78fa      	ldrb	r2, [r7, #3]
 8010c66:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	2200      	movs	r2, #0
 8010c72:	811a      	strh	r2, [r3, #8]
  }
}
 8010c74:	bf00      	nop
 8010c76:	370c      	adds	r7, #12
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7e:	4770      	bx	lr

08010c80 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b082      	sub	sp, #8
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6039      	str	r1, [r7, #0]
 8010c88:	4611      	mov	r1, r2
 8010c8a:	461a      	mov	r2, r3
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	80fb      	strh	r3, [r7, #6]
 8010c90:	460b      	mov	r3, r1
 8010c92:	717b      	strb	r3, [r7, #5]
 8010c94:	4613      	mov	r3, r2
 8010c96:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8010c98:	88fa      	ldrh	r2, [r7, #6]
 8010c9a:	793b      	ldrb	r3, [r7, #4]
 8010c9c:	4413      	add	r3, r2
 8010c9e:	3302      	adds	r3, #2
 8010ca0:	2b44      	cmp	r3, #68	; 0x44
 8010ca2:	d906      	bls.n	8010cb2 <dhcp_option+0x32>
 8010ca4:	4b0d      	ldr	r3, [pc, #52]	; (8010cdc <dhcp_option+0x5c>)
 8010ca6:	f240 529a 	movw	r2, #1434	; 0x59a
 8010caa:	490d      	ldr	r1, [pc, #52]	; (8010ce0 <dhcp_option+0x60>)
 8010cac:	480d      	ldr	r0, [pc, #52]	; (8010ce4 <dhcp_option+0x64>)
 8010cae:	f003 f8cf 	bl	8013e50 <iprintf>
  options[options_out_len++] = option_type;
 8010cb2:	88fb      	ldrh	r3, [r7, #6]
 8010cb4:	1c5a      	adds	r2, r3, #1
 8010cb6:	80fa      	strh	r2, [r7, #6]
 8010cb8:	461a      	mov	r2, r3
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	4413      	add	r3, r2
 8010cbe:	797a      	ldrb	r2, [r7, #5]
 8010cc0:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8010cc2:	88fb      	ldrh	r3, [r7, #6]
 8010cc4:	1c5a      	adds	r2, r3, #1
 8010cc6:	80fa      	strh	r2, [r7, #6]
 8010cc8:	461a      	mov	r2, r3
 8010cca:	683b      	ldr	r3, [r7, #0]
 8010ccc:	4413      	add	r3, r2
 8010cce:	793a      	ldrb	r2, [r7, #4]
 8010cd0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010cd2:	88fb      	ldrh	r3, [r7, #6]
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3708      	adds	r7, #8
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}
 8010cdc:	08017714 	.word	0x08017714
 8010ce0:	080178a8 	.word	0x080178a8
 8010ce4:	08017774 	.word	0x08017774

08010ce8 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b082      	sub	sp, #8
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	4603      	mov	r3, r0
 8010cf0:	6039      	str	r1, [r7, #0]
 8010cf2:	80fb      	strh	r3, [r7, #6]
 8010cf4:	4613      	mov	r3, r2
 8010cf6:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8010cf8:	88fb      	ldrh	r3, [r7, #6]
 8010cfa:	2b43      	cmp	r3, #67	; 0x43
 8010cfc:	d906      	bls.n	8010d0c <dhcp_option_byte+0x24>
 8010cfe:	4b0a      	ldr	r3, [pc, #40]	; (8010d28 <dhcp_option_byte+0x40>)
 8010d00:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8010d04:	4909      	ldr	r1, [pc, #36]	; (8010d2c <dhcp_option_byte+0x44>)
 8010d06:	480a      	ldr	r0, [pc, #40]	; (8010d30 <dhcp_option_byte+0x48>)
 8010d08:	f003 f8a2 	bl	8013e50 <iprintf>
  options[options_out_len++] = value;
 8010d0c:	88fb      	ldrh	r3, [r7, #6]
 8010d0e:	1c5a      	adds	r2, r3, #1
 8010d10:	80fa      	strh	r2, [r7, #6]
 8010d12:	461a      	mov	r2, r3
 8010d14:	683b      	ldr	r3, [r7, #0]
 8010d16:	4413      	add	r3, r2
 8010d18:	797a      	ldrb	r2, [r7, #5]
 8010d1a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010d1c:	88fb      	ldrh	r3, [r7, #6]
}
 8010d1e:	4618      	mov	r0, r3
 8010d20:	3708      	adds	r7, #8
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}
 8010d26:	bf00      	nop
 8010d28:	08017714 	.word	0x08017714
 8010d2c:	080178ec 	.word	0x080178ec
 8010d30:	08017774 	.word	0x08017774

08010d34 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b082      	sub	sp, #8
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	6039      	str	r1, [r7, #0]
 8010d3e:	80fb      	strh	r3, [r7, #6]
 8010d40:	4613      	mov	r3, r2
 8010d42:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8010d44:	88fb      	ldrh	r3, [r7, #6]
 8010d46:	3302      	adds	r3, #2
 8010d48:	2b44      	cmp	r3, #68	; 0x44
 8010d4a:	d906      	bls.n	8010d5a <dhcp_option_short+0x26>
 8010d4c:	4b0f      	ldr	r3, [pc, #60]	; (8010d8c <dhcp_option_short+0x58>)
 8010d4e:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8010d52:	490f      	ldr	r1, [pc, #60]	; (8010d90 <dhcp_option_short+0x5c>)
 8010d54:	480f      	ldr	r0, [pc, #60]	; (8010d94 <dhcp_option_short+0x60>)
 8010d56:	f003 f87b 	bl	8013e50 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8010d5a:	88bb      	ldrh	r3, [r7, #4]
 8010d5c:	0a1b      	lsrs	r3, r3, #8
 8010d5e:	b29a      	uxth	r2, r3
 8010d60:	88fb      	ldrh	r3, [r7, #6]
 8010d62:	1c59      	adds	r1, r3, #1
 8010d64:	80f9      	strh	r1, [r7, #6]
 8010d66:	4619      	mov	r1, r3
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	440b      	add	r3, r1
 8010d6c:	b2d2      	uxtb	r2, r2
 8010d6e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8010d70:	88fb      	ldrh	r3, [r7, #6]
 8010d72:	1c5a      	adds	r2, r3, #1
 8010d74:	80fa      	strh	r2, [r7, #6]
 8010d76:	461a      	mov	r2, r3
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	4413      	add	r3, r2
 8010d7c:	88ba      	ldrh	r2, [r7, #4]
 8010d7e:	b2d2      	uxtb	r2, r2
 8010d80:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010d82:	88fb      	ldrh	r3, [r7, #6]
}
 8010d84:	4618      	mov	r0, r3
 8010d86:	3708      	adds	r7, #8
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bd80      	pop	{r7, pc}
 8010d8c:	08017714 	.word	0x08017714
 8010d90:	08017924 	.word	0x08017924
 8010d94:	08017774 	.word	0x08017774

08010d98 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b084      	sub	sp, #16
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	4603      	mov	r3, r0
 8010da0:	60b9      	str	r1, [r7, #8]
 8010da2:	607a      	str	r2, [r7, #4]
 8010da4:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8010da6:	89fb      	ldrh	r3, [r7, #14]
 8010da8:	3304      	adds	r3, #4
 8010daa:	2b44      	cmp	r3, #68	; 0x44
 8010dac:	d906      	bls.n	8010dbc <dhcp_option_long+0x24>
 8010dae:	4b19      	ldr	r3, [pc, #100]	; (8010e14 <dhcp_option_long+0x7c>)
 8010db0:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8010db4:	4918      	ldr	r1, [pc, #96]	; (8010e18 <dhcp_option_long+0x80>)
 8010db6:	4819      	ldr	r0, [pc, #100]	; (8010e1c <dhcp_option_long+0x84>)
 8010db8:	f003 f84a 	bl	8013e50 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	0e1a      	lsrs	r2, r3, #24
 8010dc0:	89fb      	ldrh	r3, [r7, #14]
 8010dc2:	1c59      	adds	r1, r3, #1
 8010dc4:	81f9      	strh	r1, [r7, #14]
 8010dc6:	4619      	mov	r1, r3
 8010dc8:	68bb      	ldr	r3, [r7, #8]
 8010dca:	440b      	add	r3, r1
 8010dcc:	b2d2      	uxtb	r2, r2
 8010dce:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	0c1a      	lsrs	r2, r3, #16
 8010dd4:	89fb      	ldrh	r3, [r7, #14]
 8010dd6:	1c59      	adds	r1, r3, #1
 8010dd8:	81f9      	strh	r1, [r7, #14]
 8010dda:	4619      	mov	r1, r3
 8010ddc:	68bb      	ldr	r3, [r7, #8]
 8010dde:	440b      	add	r3, r1
 8010de0:	b2d2      	uxtb	r2, r2
 8010de2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	0a1a      	lsrs	r2, r3, #8
 8010de8:	89fb      	ldrh	r3, [r7, #14]
 8010dea:	1c59      	adds	r1, r3, #1
 8010dec:	81f9      	strh	r1, [r7, #14]
 8010dee:	4619      	mov	r1, r3
 8010df0:	68bb      	ldr	r3, [r7, #8]
 8010df2:	440b      	add	r3, r1
 8010df4:	b2d2      	uxtb	r2, r2
 8010df6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8010df8:	89fb      	ldrh	r3, [r7, #14]
 8010dfa:	1c5a      	adds	r2, r3, #1
 8010dfc:	81fa      	strh	r2, [r7, #14]
 8010dfe:	461a      	mov	r2, r3
 8010e00:	68bb      	ldr	r3, [r7, #8]
 8010e02:	4413      	add	r3, r2
 8010e04:	687a      	ldr	r2, [r7, #4]
 8010e06:	b2d2      	uxtb	r2, r2
 8010e08:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010e0a:	89fb      	ldrh	r3, [r7, #14]
}
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	3710      	adds	r7, #16
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}
 8010e14:	08017714 	.word	0x08017714
 8010e18:	08017960 	.word	0x08017960
 8010e1c:	08017774 	.word	0x08017774

08010e20 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b090      	sub	sp, #64	; 0x40
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
 8010e28:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8010e2e:	2300      	movs	r3, #0
 8010e30:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8010e32:	2208      	movs	r2, #8
 8010e34:	2100      	movs	r1, #0
 8010e36:	48b5      	ldr	r0, [pc, #724]	; (801110c <dhcp_parse_reply+0x2ec>)
 8010e38:	f003 f802 	bl	8013e40 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	895b      	ldrh	r3, [r3, #10]
 8010e40:	2b2b      	cmp	r3, #43	; 0x2b
 8010e42:	d802      	bhi.n	8010e4a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8010e44:	f06f 0301 	mvn.w	r3, #1
 8010e48:	e2a7      	b.n	801139a <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	685b      	ldr	r3, [r3, #4]
 8010e4e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8010e50:	23f0      	movs	r3, #240	; 0xf0
 8010e52:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	891b      	ldrh	r3, [r3, #8]
 8010e58:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010e5e:	e00c      	b.n	8010e7a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8010e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e62:	895b      	ldrh	r3, [r3, #10]
 8010e64:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010e66:	1ad3      	subs	r3, r2, r3
 8010e68:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8010e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e6c:	895b      	ldrh	r3, [r3, #10]
 8010e6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8010e70:	1ad3      	subs	r3, r2, r3
 8010e72:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8010e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d004      	beq.n	8010e8a <dhcp_parse_reply+0x6a>
 8010e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e82:	895b      	ldrh	r3, [r3, #10]
 8010e84:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010e86:	429a      	cmp	r2, r3
 8010e88:	d2ea      	bcs.n	8010e60 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8010e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d102      	bne.n	8010e96 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8010e90:	f06f 0301 	mvn.w	r3, #1
 8010e94:	e281      	b.n	801139a <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8010e96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010e98:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8010e9a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010e9c:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8010e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ea0:	685b      	ldr	r3, [r3, #4]
 8010ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8010ea4:	e239      	b.n	801131a <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8010ea6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010ea8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010eaa:	4413      	add	r3, r2
 8010eac:	781b      	ldrb	r3, [r3, #0]
 8010eae:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8010eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8010eba:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8010ebc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010ebe:	3302      	adds	r3, #2
 8010ec0:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8010ec2:	8bfa      	ldrh	r2, [r7, #30]
 8010ec4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	d202      	bcs.n	8010ed0 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8010eca:	f06f 0301 	mvn.w	r3, #1
 8010ece:	e264      	b.n	801139a <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8010ed0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010ed2:	3301      	adds	r3, #1
 8010ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ed6:	8952      	ldrh	r2, [r2, #10]
 8010ed8:	4293      	cmp	r3, r2
 8010eda:	da07      	bge.n	8010eec <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8010edc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010ede:	3301      	adds	r3, #1
 8010ee0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010ee2:	4413      	add	r3, r2
 8010ee4:	781b      	ldrb	r3, [r3, #0]
 8010ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010eea:	e00b      	b.n	8010f04 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8010eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d004      	beq.n	8010efe <dhcp_parse_reply+0xde>
 8010ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	685b      	ldr	r3, [r3, #4]
 8010efa:	781b      	ldrb	r3, [r3, #0]
 8010efc:	e000      	b.n	8010f00 <dhcp_parse_reply+0xe0>
 8010efe:	2300      	movs	r3, #0
 8010f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8010f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8010f0c:	7dfb      	ldrb	r3, [r7, #23]
 8010f0e:	2b3b      	cmp	r3, #59	; 0x3b
 8010f10:	f200 812c 	bhi.w	801116c <dhcp_parse_reply+0x34c>
 8010f14:	a201      	add	r2, pc, #4	; (adr r2, 8010f1c <dhcp_parse_reply+0xfc>)
 8010f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f1a:	bf00      	nop
 8010f1c:	0801100d 	.word	0x0801100d
 8010f20:	0801101d 	.word	0x0801101d
 8010f24:	0801116d 	.word	0x0801116d
 8010f28:	0801103f 	.word	0x0801103f
 8010f2c:	0801116d 	.word	0x0801116d
 8010f30:	0801116d 	.word	0x0801116d
 8010f34:	0801116d 	.word	0x0801116d
 8010f38:	0801116d 	.word	0x0801116d
 8010f3c:	0801116d 	.word	0x0801116d
 8010f40:	0801116d 	.word	0x0801116d
 8010f44:	0801116d 	.word	0x0801116d
 8010f48:	0801116d 	.word	0x0801116d
 8010f4c:	0801116d 	.word	0x0801116d
 8010f50:	0801116d 	.word	0x0801116d
 8010f54:	0801116d 	.word	0x0801116d
 8010f58:	0801116d 	.word	0x0801116d
 8010f5c:	0801116d 	.word	0x0801116d
 8010f60:	0801116d 	.word	0x0801116d
 8010f64:	0801116d 	.word	0x0801116d
 8010f68:	0801116d 	.word	0x0801116d
 8010f6c:	0801116d 	.word	0x0801116d
 8010f70:	0801116d 	.word	0x0801116d
 8010f74:	0801116d 	.word	0x0801116d
 8010f78:	0801116d 	.word	0x0801116d
 8010f7c:	0801116d 	.word	0x0801116d
 8010f80:	0801116d 	.word	0x0801116d
 8010f84:	0801116d 	.word	0x0801116d
 8010f88:	0801116d 	.word	0x0801116d
 8010f8c:	0801116d 	.word	0x0801116d
 8010f90:	0801116d 	.word	0x0801116d
 8010f94:	0801116d 	.word	0x0801116d
 8010f98:	0801116d 	.word	0x0801116d
 8010f9c:	0801116d 	.word	0x0801116d
 8010fa0:	0801116d 	.word	0x0801116d
 8010fa4:	0801116d 	.word	0x0801116d
 8010fa8:	0801116d 	.word	0x0801116d
 8010fac:	0801116d 	.word	0x0801116d
 8010fb0:	0801116d 	.word	0x0801116d
 8010fb4:	0801116d 	.word	0x0801116d
 8010fb8:	0801116d 	.word	0x0801116d
 8010fbc:	0801116d 	.word	0x0801116d
 8010fc0:	0801116d 	.word	0x0801116d
 8010fc4:	0801116d 	.word	0x0801116d
 8010fc8:	0801116d 	.word	0x0801116d
 8010fcc:	0801116d 	.word	0x0801116d
 8010fd0:	0801116d 	.word	0x0801116d
 8010fd4:	0801116d 	.word	0x0801116d
 8010fd8:	0801116d 	.word	0x0801116d
 8010fdc:	0801116d 	.word	0x0801116d
 8010fe0:	0801116d 	.word	0x0801116d
 8010fe4:	0801116d 	.word	0x0801116d
 8010fe8:	0801106b 	.word	0x0801106b
 8010fec:	0801108d 	.word	0x0801108d
 8010ff0:	080110c9 	.word	0x080110c9
 8010ff4:	080110eb 	.word	0x080110eb
 8010ff8:	0801116d 	.word	0x0801116d
 8010ffc:	0801116d 	.word	0x0801116d
 8011000:	0801116d 	.word	0x0801116d
 8011004:	08011129 	.word	0x08011129
 8011008:	0801114b 	.word	0x0801114b
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801100c:	2300      	movs	r3, #0
 801100e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011012:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011016:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801101a:	e0ab      	b.n	8011174 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801101c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011020:	2b04      	cmp	r3, #4
 8011022:	d009      	beq.n	8011038 <dhcp_parse_reply+0x218>
 8011024:	4b3a      	ldr	r3, [pc, #232]	; (8011110 <dhcp_parse_reply+0x2f0>)
 8011026:	f240 622e 	movw	r2, #1582	; 0x62e
 801102a:	493a      	ldr	r1, [pc, #232]	; (8011114 <dhcp_parse_reply+0x2f4>)
 801102c:	483a      	ldr	r0, [pc, #232]	; (8011118 <dhcp_parse_reply+0x2f8>)
 801102e:	f002 ff0f 	bl	8013e50 <iprintf>
 8011032:	f06f 0305 	mvn.w	r3, #5
 8011036:	e1b0      	b.n	801139a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8011038:	2306      	movs	r3, #6
 801103a:	623b      	str	r3, [r7, #32]
        break;
 801103c:	e09a      	b.n	8011174 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801103e:	2304      	movs	r3, #4
 8011040:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8011044:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011048:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801104c:	429a      	cmp	r2, r3
 801104e:	d209      	bcs.n	8011064 <dhcp_parse_reply+0x244>
 8011050:	4b2f      	ldr	r3, [pc, #188]	; (8011110 <dhcp_parse_reply+0x2f0>)
 8011052:	f240 6233 	movw	r2, #1587	; 0x633
 8011056:	4931      	ldr	r1, [pc, #196]	; (801111c <dhcp_parse_reply+0x2fc>)
 8011058:	482f      	ldr	r0, [pc, #188]	; (8011118 <dhcp_parse_reply+0x2f8>)
 801105a:	f002 fef9 	bl	8013e50 <iprintf>
 801105e:	f06f 0305 	mvn.w	r3, #5
 8011062:	e19a      	b.n	801139a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8011064:	2307      	movs	r3, #7
 8011066:	623b      	str	r3, [r7, #32]
        break;
 8011068:	e084      	b.n	8011174 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801106a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801106e:	2b04      	cmp	r3, #4
 8011070:	d009      	beq.n	8011086 <dhcp_parse_reply+0x266>
 8011072:	4b27      	ldr	r3, [pc, #156]	; (8011110 <dhcp_parse_reply+0x2f0>)
 8011074:	f240 6241 	movw	r2, #1601	; 0x641
 8011078:	4926      	ldr	r1, [pc, #152]	; (8011114 <dhcp_parse_reply+0x2f4>)
 801107a:	4827      	ldr	r0, [pc, #156]	; (8011118 <dhcp_parse_reply+0x2f8>)
 801107c:	f002 fee8 	bl	8013e50 <iprintf>
 8011080:	f06f 0305 	mvn.w	r3, #5
 8011084:	e189      	b.n	801139a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8011086:	2303      	movs	r3, #3
 8011088:	623b      	str	r3, [r7, #32]
        break;
 801108a:	e073      	b.n	8011174 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801108c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011090:	2b01      	cmp	r3, #1
 8011092:	d009      	beq.n	80110a8 <dhcp_parse_reply+0x288>
 8011094:	4b1e      	ldr	r3, [pc, #120]	; (8011110 <dhcp_parse_reply+0x2f0>)
 8011096:	f240 624f 	movw	r2, #1615	; 0x64f
 801109a:	4921      	ldr	r1, [pc, #132]	; (8011120 <dhcp_parse_reply+0x300>)
 801109c:	481e      	ldr	r0, [pc, #120]	; (8011118 <dhcp_parse_reply+0x2f8>)
 801109e:	f002 fed7 	bl	8013e50 <iprintf>
 80110a2:	f06f 0305 	mvn.w	r3, #5
 80110a6:	e178      	b.n	801139a <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80110a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80110aa:	2bf0      	cmp	r3, #240	; 0xf0
 80110ac:	d009      	beq.n	80110c2 <dhcp_parse_reply+0x2a2>
 80110ae:	4b18      	ldr	r3, [pc, #96]	; (8011110 <dhcp_parse_reply+0x2f0>)
 80110b0:	f240 6251 	movw	r2, #1617	; 0x651
 80110b4:	491b      	ldr	r1, [pc, #108]	; (8011124 <dhcp_parse_reply+0x304>)
 80110b6:	4818      	ldr	r0, [pc, #96]	; (8011118 <dhcp_parse_reply+0x2f8>)
 80110b8:	f002 feca 	bl	8013e50 <iprintf>
 80110bc:	f06f 0305 	mvn.w	r3, #5
 80110c0:	e16b      	b.n	801139a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80110c2:	2300      	movs	r3, #0
 80110c4:	623b      	str	r3, [r7, #32]
        break;
 80110c6:	e055      	b.n	8011174 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80110c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110cc:	2b01      	cmp	r3, #1
 80110ce:	d009      	beq.n	80110e4 <dhcp_parse_reply+0x2c4>
 80110d0:	4b0f      	ldr	r3, [pc, #60]	; (8011110 <dhcp_parse_reply+0x2f0>)
 80110d2:	f240 6255 	movw	r2, #1621	; 0x655
 80110d6:	4912      	ldr	r1, [pc, #72]	; (8011120 <dhcp_parse_reply+0x300>)
 80110d8:	480f      	ldr	r0, [pc, #60]	; (8011118 <dhcp_parse_reply+0x2f8>)
 80110da:	f002 feb9 	bl	8013e50 <iprintf>
 80110de:	f06f 0305 	mvn.w	r3, #5
 80110e2:	e15a      	b.n	801139a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80110e4:	2301      	movs	r3, #1
 80110e6:	623b      	str	r3, [r7, #32]
        break;
 80110e8:	e044      	b.n	8011174 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80110ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110ee:	2b04      	cmp	r3, #4
 80110f0:	d009      	beq.n	8011106 <dhcp_parse_reply+0x2e6>
 80110f2:	4b07      	ldr	r3, [pc, #28]	; (8011110 <dhcp_parse_reply+0x2f0>)
 80110f4:	f240 6259 	movw	r2, #1625	; 0x659
 80110f8:	4906      	ldr	r1, [pc, #24]	; (8011114 <dhcp_parse_reply+0x2f4>)
 80110fa:	4807      	ldr	r0, [pc, #28]	; (8011118 <dhcp_parse_reply+0x2f8>)
 80110fc:	f002 fea8 	bl	8013e50 <iprintf>
 8011100:	f06f 0305 	mvn.w	r3, #5
 8011104:	e149      	b.n	801139a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8011106:	2302      	movs	r3, #2
 8011108:	623b      	str	r3, [r7, #32]
        break;
 801110a:	e033      	b.n	8011174 <dhcp_parse_reply+0x354>
 801110c:	2000af40 	.word	0x2000af40
 8011110:	08017714 	.word	0x08017714
 8011114:	0801799c 	.word	0x0801799c
 8011118:	08017774 	.word	0x08017774
 801111c:	080179a8 	.word	0x080179a8
 8011120:	080179bc 	.word	0x080179bc
 8011124:	080179c8 	.word	0x080179c8
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801112c:	2b04      	cmp	r3, #4
 801112e:	d009      	beq.n	8011144 <dhcp_parse_reply+0x324>
 8011130:	4b9c      	ldr	r3, [pc, #624]	; (80113a4 <dhcp_parse_reply+0x584>)
 8011132:	f240 625d 	movw	r2, #1629	; 0x65d
 8011136:	499c      	ldr	r1, [pc, #624]	; (80113a8 <dhcp_parse_reply+0x588>)
 8011138:	489c      	ldr	r0, [pc, #624]	; (80113ac <dhcp_parse_reply+0x58c>)
 801113a:	f002 fe89 	bl	8013e50 <iprintf>
 801113e:	f06f 0305 	mvn.w	r3, #5
 8011142:	e12a      	b.n	801139a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8011144:	2304      	movs	r3, #4
 8011146:	623b      	str	r3, [r7, #32]
        break;
 8011148:	e014      	b.n	8011174 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801114a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801114e:	2b04      	cmp	r3, #4
 8011150:	d009      	beq.n	8011166 <dhcp_parse_reply+0x346>
 8011152:	4b94      	ldr	r3, [pc, #592]	; (80113a4 <dhcp_parse_reply+0x584>)
 8011154:	f240 6261 	movw	r2, #1633	; 0x661
 8011158:	4993      	ldr	r1, [pc, #588]	; (80113a8 <dhcp_parse_reply+0x588>)
 801115a:	4894      	ldr	r0, [pc, #592]	; (80113ac <dhcp_parse_reply+0x58c>)
 801115c:	f002 fe78 	bl	8013e50 <iprintf>
 8011160:	f06f 0305 	mvn.w	r3, #5
 8011164:	e119      	b.n	801139a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8011166:	2305      	movs	r3, #5
 8011168:	623b      	str	r3, [r7, #32]
        break;
 801116a:	e003      	b.n	8011174 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 801116c:	2300      	movs	r3, #0
 801116e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8011172:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8011174:	7dfb      	ldrb	r3, [r7, #23]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d103      	bne.n	8011182 <dhcp_parse_reply+0x362>
      offset++;
 801117a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801117c:	3301      	adds	r3, #1
 801117e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8011180:	e0a1      	b.n	80112c6 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8011182:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011188:	4413      	add	r3, r2
 801118a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801118e:	4293      	cmp	r3, r2
 8011190:	dd02      	ble.n	8011198 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8011192:	f06f 0301 	mvn.w	r3, #1
 8011196:	e100      	b.n	801139a <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8011198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801119c:	b29a      	uxth	r2, r3
 801119e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80111a0:	4413      	add	r3, r2
 80111a2:	b29b      	uxth	r3, r3
 80111a4:	3302      	adds	r3, #2
 80111a6:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80111a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	f000 808a 	beq.w	80112c6 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 80111b2:	2300      	movs	r3, #0
 80111b4:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80111b6:	6a3b      	ldr	r3, [r7, #32]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	db02      	blt.n	80111c2 <dhcp_parse_reply+0x3a2>
 80111bc:	6a3b      	ldr	r3, [r7, #32]
 80111be:	2b07      	cmp	r3, #7
 80111c0:	dd06      	ble.n	80111d0 <dhcp_parse_reply+0x3b0>
 80111c2:	4b78      	ldr	r3, [pc, #480]	; (80113a4 <dhcp_parse_reply+0x584>)
 80111c4:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80111c8:	4979      	ldr	r1, [pc, #484]	; (80113b0 <dhcp_parse_reply+0x590>)
 80111ca:	4878      	ldr	r0, [pc, #480]	; (80113ac <dhcp_parse_reply+0x58c>)
 80111cc:	f002 fe40 	bl	8013e50 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80111d0:	4a78      	ldr	r2, [pc, #480]	; (80113b4 <dhcp_parse_reply+0x594>)
 80111d2:	6a3b      	ldr	r3, [r7, #32]
 80111d4:	4413      	add	r3, r2
 80111d6:	781b      	ldrb	r3, [r3, #0]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d174      	bne.n	80112c6 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 80111dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80111e0:	2b04      	cmp	r3, #4
 80111e2:	bf28      	it	cs
 80111e4:	2304      	movcs	r3, #4
 80111e6:	b2db      	uxtb	r3, r3
 80111e8:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80111ea:	8bfb      	ldrh	r3, [r7, #30]
 80111ec:	8aba      	ldrh	r2, [r7, #20]
 80111ee:	f107 0108 	add.w	r1, r7, #8
 80111f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111f4:	f7f8 fc46 	bl	8009a84 <pbuf_copy_partial>
 80111f8:	4603      	mov	r3, r0
 80111fa:	461a      	mov	r2, r3
 80111fc:	8abb      	ldrh	r3, [r7, #20]
 80111fe:	4293      	cmp	r3, r2
 8011200:	d002      	beq.n	8011208 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8011202:	f06f 0301 	mvn.w	r3, #1
 8011206:	e0c8      	b.n	801139a <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8011208:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801120c:	2b04      	cmp	r3, #4
 801120e:	d933      	bls.n	8011278 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8011210:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011214:	f003 0303 	and.w	r3, r3, #3
 8011218:	b2db      	uxtb	r3, r3
 801121a:	2b00      	cmp	r3, #0
 801121c:	d009      	beq.n	8011232 <dhcp_parse_reply+0x412>
 801121e:	4b61      	ldr	r3, [pc, #388]	; (80113a4 <dhcp_parse_reply+0x584>)
 8011220:	f240 6281 	movw	r2, #1665	; 0x681
 8011224:	4964      	ldr	r1, [pc, #400]	; (80113b8 <dhcp_parse_reply+0x598>)
 8011226:	4861      	ldr	r0, [pc, #388]	; (80113ac <dhcp_parse_reply+0x58c>)
 8011228:	f002 fe12 	bl	8013e50 <iprintf>
 801122c:	f06f 0305 	mvn.w	r3, #5
 8011230:	e0b3      	b.n	801139a <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8011232:	4a60      	ldr	r2, [pc, #384]	; (80113b4 <dhcp_parse_reply+0x594>)
 8011234:	6a3b      	ldr	r3, [r7, #32]
 8011236:	4413      	add	r3, r2
 8011238:	2201      	movs	r2, #1
 801123a:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801123c:	68bb      	ldr	r3, [r7, #8]
 801123e:	4618      	mov	r0, r3
 8011240:	f7f6 fed1 	bl	8007fe6 <lwip_htonl>
 8011244:	4602      	mov	r2, r0
 8011246:	495d      	ldr	r1, [pc, #372]	; (80113bc <dhcp_parse_reply+0x59c>)
 8011248:	6a3b      	ldr	r3, [r7, #32]
 801124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801124e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011252:	3b04      	subs	r3, #4
 8011254:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8011258:	8bfb      	ldrh	r3, [r7, #30]
 801125a:	3304      	adds	r3, #4
 801125c:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801125e:	8a7a      	ldrh	r2, [r7, #18]
 8011260:	8bfb      	ldrh	r3, [r7, #30]
 8011262:	429a      	cmp	r2, r3
 8011264:	d202      	bcs.n	801126c <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8011266:	f06f 0301 	mvn.w	r3, #1
 801126a:	e096      	b.n	801139a <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 801126c:	8a7b      	ldrh	r3, [r7, #18]
 801126e:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8011270:	6a3b      	ldr	r3, [r7, #32]
 8011272:	3301      	adds	r3, #1
 8011274:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8011276:	e79e      	b.n	80111b6 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8011278:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801127c:	2b04      	cmp	r3, #4
 801127e:	d106      	bne.n	801128e <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8011280:	68bb      	ldr	r3, [r7, #8]
 8011282:	4618      	mov	r0, r3
 8011284:	f7f6 feaf 	bl	8007fe6 <lwip_htonl>
 8011288:	4603      	mov	r3, r0
 801128a:	60bb      	str	r3, [r7, #8]
 801128c:	e011      	b.n	80112b2 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801128e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011292:	2b01      	cmp	r3, #1
 8011294:	d009      	beq.n	80112aa <dhcp_parse_reply+0x48a>
 8011296:	4b43      	ldr	r3, [pc, #268]	; (80113a4 <dhcp_parse_reply+0x584>)
 8011298:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801129c:	4948      	ldr	r1, [pc, #288]	; (80113c0 <dhcp_parse_reply+0x5a0>)
 801129e:	4843      	ldr	r0, [pc, #268]	; (80113ac <dhcp_parse_reply+0x58c>)
 80112a0:	f002 fdd6 	bl	8013e50 <iprintf>
 80112a4:	f06f 0305 	mvn.w	r3, #5
 80112a8:	e077      	b.n	801139a <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 80112aa:	f107 0308 	add.w	r3, r7, #8
 80112ae:	781b      	ldrb	r3, [r3, #0]
 80112b0:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80112b2:	4a40      	ldr	r2, [pc, #256]	; (80113b4 <dhcp_parse_reply+0x594>)
 80112b4:	6a3b      	ldr	r3, [r7, #32]
 80112b6:	4413      	add	r3, r2
 80112b8:	2201      	movs	r2, #1
 80112ba:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80112bc:	68ba      	ldr	r2, [r7, #8]
 80112be:	493f      	ldr	r1, [pc, #252]	; (80113bc <dhcp_parse_reply+0x59c>)
 80112c0:	6a3b      	ldr	r3, [r7, #32]
 80112c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80112c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112c8:	895b      	ldrh	r3, [r3, #10]
 80112ca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80112cc:	429a      	cmp	r2, r3
 80112ce:	d324      	bcc.n	801131a <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 80112d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112d2:	895b      	ldrh	r3, [r3, #10]
 80112d4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80112d6:	1ad3      	subs	r3, r2, r3
 80112d8:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80112da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112dc:	895b      	ldrh	r3, [r3, #10]
 80112de:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80112e0:	1ad3      	subs	r3, r2, r3
 80112e2:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80112e4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80112e6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80112e8:	429a      	cmp	r2, r3
 80112ea:	d213      	bcs.n	8011314 <dhcp_parse_reply+0x4f4>
        q = q->next;
 80112ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80112f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d109      	bne.n	801130c <dhcp_parse_reply+0x4ec>
 80112f8:	4b2a      	ldr	r3, [pc, #168]	; (80113a4 <dhcp_parse_reply+0x584>)
 80112fa:	f240 629d 	movw	r2, #1693	; 0x69d
 80112fe:	4931      	ldr	r1, [pc, #196]	; (80113c4 <dhcp_parse_reply+0x5a4>)
 8011300:	482a      	ldr	r0, [pc, #168]	; (80113ac <dhcp_parse_reply+0x58c>)
 8011302:	f002 fda5 	bl	8013e50 <iprintf>
 8011306:	f06f 0305 	mvn.w	r3, #5
 801130a:	e046      	b.n	801139a <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 801130c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801130e:	685b      	ldr	r3, [r3, #4]
 8011310:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011312:	e002      	b.n	801131a <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8011314:	f06f 0301 	mvn.w	r3, #1
 8011318:	e03f      	b.n	801139a <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801131a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801131c:	2b00      	cmp	r3, #0
 801131e:	d00a      	beq.n	8011336 <dhcp_parse_reply+0x516>
 8011320:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011322:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011324:	429a      	cmp	r2, r3
 8011326:	d206      	bcs.n	8011336 <dhcp_parse_reply+0x516>
 8011328:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801132a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801132c:	4413      	add	r3, r2
 801132e:	781b      	ldrb	r3, [r3, #0]
 8011330:	2bff      	cmp	r3, #255	; 0xff
 8011332:	f47f adb8 	bne.w	8010ea6 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8011336:	4b1f      	ldr	r3, [pc, #124]	; (80113b4 <dhcp_parse_reply+0x594>)
 8011338:	781b      	ldrb	r3, [r3, #0]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d018      	beq.n	8011370 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801133e:	4b1f      	ldr	r3, [pc, #124]	; (80113bc <dhcp_parse_reply+0x59c>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8011344:	4b1b      	ldr	r3, [pc, #108]	; (80113b4 <dhcp_parse_reply+0x594>)
 8011346:	2200      	movs	r2, #0
 8011348:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	2b01      	cmp	r3, #1
 801134e:	d102      	bne.n	8011356 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8011350:	2301      	movs	r3, #1
 8011352:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011354:	e00c      	b.n	8011370 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	2b02      	cmp	r3, #2
 801135a:	d102      	bne.n	8011362 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 801135c:	2301      	movs	r3, #1
 801135e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011360:	e006      	b.n	8011370 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	2b03      	cmp	r3, #3
 8011366:	d103      	bne.n	8011370 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8011368:	2301      	movs	r3, #1
 801136a:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801136c:	2301      	movs	r3, #1
 801136e:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8011370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011372:	2b00      	cmp	r3, #0
 8011374:	d006      	beq.n	8011384 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8011376:	2300      	movs	r3, #0
 8011378:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801137a:	236c      	movs	r3, #108	; 0x6c
 801137c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801137e:	23ec      	movs	r3, #236	; 0xec
 8011380:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8011382:	e56a      	b.n	8010e5a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8011384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011386:	2b00      	cmp	r3, #0
 8011388:	d006      	beq.n	8011398 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 801138a:	2300      	movs	r3, #0
 801138c:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801138e:	232c      	movs	r3, #44	; 0x2c
 8011390:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8011392:	236c      	movs	r3, #108	; 0x6c
 8011394:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8011396:	e560      	b.n	8010e5a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8011398:	2300      	movs	r3, #0
}
 801139a:	4618      	mov	r0, r3
 801139c:	3740      	adds	r7, #64	; 0x40
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd80      	pop	{r7, pc}
 80113a2:	bf00      	nop
 80113a4:	08017714 	.word	0x08017714
 80113a8:	0801799c 	.word	0x0801799c
 80113ac:	08017774 	.word	0x08017774
 80113b0:	080179e0 	.word	0x080179e0
 80113b4:	2000af40 	.word	0x2000af40
 80113b8:	080179f4 	.word	0x080179f4
 80113bc:	2000af20 	.word	0x2000af20
 80113c0:	08017a0c 	.word	0x08017a0c
 80113c4:	08017a20 	.word	0x08017a20

080113c8 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b08a      	sub	sp, #40	; 0x28
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	60f8      	str	r0, [r7, #12]
 80113d0:	60b9      	str	r1, [r7, #8]
 80113d2:	607a      	str	r2, [r7, #4]
 80113d4:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80113d6:	4b60      	ldr	r3, [pc, #384]	; (8011558 <dhcp_recv+0x190>)
 80113d8:	685b      	ldr	r3, [r3, #4]
 80113da:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80113dc:	6a3b      	ldr	r3, [r7, #32]
 80113de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113e0:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	685b      	ldr	r3, [r3, #4]
 80113e6:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80113e8:	69fb      	ldr	r3, [r7, #28]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	f000 809d 	beq.w	801152a <dhcp_recv+0x162>
 80113f0:	69fb      	ldr	r3, [r7, #28]
 80113f2:	791b      	ldrb	r3, [r3, #4]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	f000 8098 	beq.w	801152a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	895b      	ldrh	r3, [r3, #10]
 80113fe:	2b2b      	cmp	r3, #43	; 0x2b
 8011400:	f240 8095 	bls.w	801152e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8011404:	69bb      	ldr	r3, [r7, #24]
 8011406:	781b      	ldrb	r3, [r3, #0]
 8011408:	2b02      	cmp	r3, #2
 801140a:	f040 8092 	bne.w	8011532 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801140e:	2300      	movs	r3, #0
 8011410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011414:	e012      	b.n	801143c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8011416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801141a:	6a3a      	ldr	r2, [r7, #32]
 801141c:	4413      	add	r3, r2
 801141e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8011422:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011426:	69b9      	ldr	r1, [r7, #24]
 8011428:	440b      	add	r3, r1
 801142a:	7f1b      	ldrb	r3, [r3, #28]
 801142c:	429a      	cmp	r2, r3
 801142e:	f040 8082 	bne.w	8011536 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011432:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011436:	3301      	adds	r3, #1
 8011438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801143c:	6a3b      	ldr	r3, [r7, #32]
 801143e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011442:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011446:	429a      	cmp	r2, r3
 8011448:	d203      	bcs.n	8011452 <dhcp_recv+0x8a>
 801144a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801144e:	2b05      	cmp	r3, #5
 8011450:	d9e1      	bls.n	8011416 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8011452:	69bb      	ldr	r3, [r7, #24]
 8011454:	685b      	ldr	r3, [r3, #4]
 8011456:	4618      	mov	r0, r3
 8011458:	f7f6 fdc5 	bl	8007fe6 <lwip_htonl>
 801145c:	4602      	mov	r2, r0
 801145e:	69fb      	ldr	r3, [r7, #28]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	429a      	cmp	r2, r3
 8011464:	d169      	bne.n	801153a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8011466:	69f9      	ldr	r1, [r7, #28]
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	f7ff fcd9 	bl	8010e20 <dhcp_parse_reply>
 801146e:	4603      	mov	r3, r0
 8011470:	2b00      	cmp	r3, #0
 8011472:	d164      	bne.n	801153e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8011474:	4b39      	ldr	r3, [pc, #228]	; (801155c <dhcp_recv+0x194>)
 8011476:	785b      	ldrb	r3, [r3, #1]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d062      	beq.n	8011542 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	685b      	ldr	r3, [r3, #4]
 8011480:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8011482:	4b37      	ldr	r3, [pc, #220]	; (8011560 <dhcp_recv+0x198>)
 8011484:	685b      	ldr	r3, [r3, #4]
 8011486:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8011488:	7cfb      	ldrb	r3, [r7, #19]
 801148a:	2b05      	cmp	r3, #5
 801148c:	d12a      	bne.n	80114e4 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801148e:	69fb      	ldr	r3, [r7, #28]
 8011490:	795b      	ldrb	r3, [r3, #5]
 8011492:	2b01      	cmp	r3, #1
 8011494:	d112      	bne.n	80114bc <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8011496:	6979      	ldr	r1, [r7, #20]
 8011498:	6a38      	ldr	r0, [r7, #32]
 801149a:	f7fe fe17 	bl	80100cc <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801149e:	6a3b      	ldr	r3, [r7, #32]
 80114a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80114a4:	f003 0308 	and.w	r3, r3, #8
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d003      	beq.n	80114b4 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80114ac:	6a38      	ldr	r0, [r7, #32]
 80114ae:	f7fe fb85 	bl	800fbbc <dhcp_check>
 80114b2:	e049      	b.n	8011548 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80114b4:	6a38      	ldr	r0, [r7, #32]
 80114b6:	f7ff f867 	bl	8010588 <dhcp_bind>
 80114ba:	e045      	b.n	8011548 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80114bc:	69fb      	ldr	r3, [r7, #28]
 80114be:	795b      	ldrb	r3, [r3, #5]
 80114c0:	2b03      	cmp	r3, #3
 80114c2:	d007      	beq.n	80114d4 <dhcp_recv+0x10c>
 80114c4:	69fb      	ldr	r3, [r7, #28]
 80114c6:	795b      	ldrb	r3, [r3, #5]
 80114c8:	2b04      	cmp	r3, #4
 80114ca:	d003      	beq.n	80114d4 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80114cc:	69fb      	ldr	r3, [r7, #28]
 80114ce:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80114d0:	2b05      	cmp	r3, #5
 80114d2:	d139      	bne.n	8011548 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80114d4:	6979      	ldr	r1, [r7, #20]
 80114d6:	6a38      	ldr	r0, [r7, #32]
 80114d8:	f7fe fdf8 	bl	80100cc <dhcp_handle_ack>
      dhcp_bind(netif);
 80114dc:	6a38      	ldr	r0, [r7, #32]
 80114de:	f7ff f853 	bl	8010588 <dhcp_bind>
 80114e2:	e031      	b.n	8011548 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80114e4:	7cfb      	ldrb	r3, [r7, #19]
 80114e6:	2b06      	cmp	r3, #6
 80114e8:	d113      	bne.n	8011512 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80114ea:	69fb      	ldr	r3, [r7, #28]
 80114ec:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80114ee:	2b03      	cmp	r3, #3
 80114f0:	d00b      	beq.n	801150a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80114f2:	69fb      	ldr	r3, [r7, #28]
 80114f4:	795b      	ldrb	r3, [r3, #5]
 80114f6:	2b01      	cmp	r3, #1
 80114f8:	d007      	beq.n	801150a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80114fa:	69fb      	ldr	r3, [r7, #28]
 80114fc:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80114fe:	2b04      	cmp	r3, #4
 8011500:	d003      	beq.n	801150a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8011502:	69fb      	ldr	r3, [r7, #28]
 8011504:	795b      	ldrb	r3, [r3, #5]
 8011506:	2b05      	cmp	r3, #5
 8011508:	d103      	bne.n	8011512 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801150a:	6a38      	ldr	r0, [r7, #32]
 801150c:	f7fe fb3c 	bl	800fb88 <dhcp_handle_nak>
 8011510:	e01a      	b.n	8011548 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8011512:	7cfb      	ldrb	r3, [r7, #19]
 8011514:	2b02      	cmp	r3, #2
 8011516:	d116      	bne.n	8011546 <dhcp_recv+0x17e>
 8011518:	69fb      	ldr	r3, [r7, #28]
 801151a:	795b      	ldrb	r3, [r3, #5]
 801151c:	2b06      	cmp	r3, #6
 801151e:	d112      	bne.n	8011546 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8011520:	6979      	ldr	r1, [r7, #20]
 8011522:	6a38      	ldr	r0, [r7, #32]
 8011524:	f7fe fb7e 	bl	800fc24 <dhcp_handle_offer>
 8011528:	e00e      	b.n	8011548 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801152a:	bf00      	nop
 801152c:	e00c      	b.n	8011548 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801152e:	bf00      	nop
 8011530:	e00a      	b.n	8011548 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011532:	bf00      	nop
 8011534:	e008      	b.n	8011548 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8011536:	bf00      	nop
 8011538:	e006      	b.n	8011548 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801153a:	bf00      	nop
 801153c:	e004      	b.n	8011548 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801153e:	bf00      	nop
 8011540:	e002      	b.n	8011548 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011542:	bf00      	nop
 8011544:	e000      	b.n	8011548 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8011546:	bf00      	nop
  pbuf_free(p);
 8011548:	6878      	ldr	r0, [r7, #4]
 801154a:	f7f8 f8a1 	bl	8009690 <pbuf_free>
}
 801154e:	bf00      	nop
 8011550:	3728      	adds	r7, #40	; 0x28
 8011552:	46bd      	mov	sp, r7
 8011554:	bd80      	pop	{r7, pc}
 8011556:	bf00      	nop
 8011558:	20005770 	.word	0x20005770
 801155c:	2000af40 	.word	0x2000af40
 8011560:	2000af20 	.word	0x2000af20

08011564 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b088      	sub	sp, #32
 8011568:	af00      	add	r7, sp, #0
 801156a:	60f8      	str	r0, [r7, #12]
 801156c:	60b9      	str	r1, [r7, #8]
 801156e:	603b      	str	r3, [r7, #0]
 8011570:	4613      	mov	r3, r2
 8011572:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d108      	bne.n	801158c <dhcp_create_msg+0x28>
 801157a:	4b5f      	ldr	r3, [pc, #380]	; (80116f8 <dhcp_create_msg+0x194>)
 801157c:	f240 7269 	movw	r2, #1897	; 0x769
 8011580:	495e      	ldr	r1, [pc, #376]	; (80116fc <dhcp_create_msg+0x198>)
 8011582:	485f      	ldr	r0, [pc, #380]	; (8011700 <dhcp_create_msg+0x19c>)
 8011584:	f002 fc64 	bl	8013e50 <iprintf>
 8011588:	2300      	movs	r3, #0
 801158a:	e0b1      	b.n	80116f0 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801158c:	68bb      	ldr	r3, [r7, #8]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d108      	bne.n	80115a4 <dhcp_create_msg+0x40>
 8011592:	4b59      	ldr	r3, [pc, #356]	; (80116f8 <dhcp_create_msg+0x194>)
 8011594:	f240 726a 	movw	r2, #1898	; 0x76a
 8011598:	495a      	ldr	r1, [pc, #360]	; (8011704 <dhcp_create_msg+0x1a0>)
 801159a:	4859      	ldr	r0, [pc, #356]	; (8011700 <dhcp_create_msg+0x19c>)
 801159c:	f002 fc58 	bl	8013e50 <iprintf>
 80115a0:	2300      	movs	r3, #0
 80115a2:	e0a5      	b.n	80116f0 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80115a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80115a8:	f44f 719a 	mov.w	r1, #308	; 0x134
 80115ac:	2036      	movs	r0, #54	; 0x36
 80115ae:	f7f7 fd8b 	bl	80090c8 <pbuf_alloc>
 80115b2:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80115b4:	69bb      	ldr	r3, [r7, #24]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d101      	bne.n	80115be <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80115ba:	2300      	movs	r3, #0
 80115bc:	e098      	b.n	80116f0 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80115be:	69bb      	ldr	r3, [r7, #24]
 80115c0:	895b      	ldrh	r3, [r3, #10]
 80115c2:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80115c6:	d206      	bcs.n	80115d6 <dhcp_create_msg+0x72>
 80115c8:	4b4b      	ldr	r3, [pc, #300]	; (80116f8 <dhcp_create_msg+0x194>)
 80115ca:	f240 7271 	movw	r2, #1905	; 0x771
 80115ce:	494e      	ldr	r1, [pc, #312]	; (8011708 <dhcp_create_msg+0x1a4>)
 80115d0:	484b      	ldr	r0, [pc, #300]	; (8011700 <dhcp_create_msg+0x19c>)
 80115d2:	f002 fc3d 	bl	8013e50 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80115d6:	79fb      	ldrb	r3, [r7, #7]
 80115d8:	2b03      	cmp	r3, #3
 80115da:	d103      	bne.n	80115e4 <dhcp_create_msg+0x80>
 80115dc:	68bb      	ldr	r3, [r7, #8]
 80115de:	795b      	ldrb	r3, [r3, #5]
 80115e0:	2b03      	cmp	r3, #3
 80115e2:	d10d      	bne.n	8011600 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80115e4:	68bb      	ldr	r3, [r7, #8]
 80115e6:	799b      	ldrb	r3, [r3, #6]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d105      	bne.n	80115f8 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80115ec:	f002 fc48 	bl	8013e80 <rand>
 80115f0:	4603      	mov	r3, r0
 80115f2:	461a      	mov	r2, r3
 80115f4:	4b45      	ldr	r3, [pc, #276]	; (801170c <dhcp_create_msg+0x1a8>)
 80115f6:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80115f8:	4b44      	ldr	r3, [pc, #272]	; (801170c <dhcp_create_msg+0x1a8>)
 80115fa:	681a      	ldr	r2, [r3, #0]
 80115fc:	68bb      	ldr	r3, [r7, #8]
 80115fe:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8011600:	69bb      	ldr	r3, [r7, #24]
 8011602:	685b      	ldr	r3, [r3, #4]
 8011604:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8011606:	f44f 729a 	mov.w	r2, #308	; 0x134
 801160a:	2100      	movs	r1, #0
 801160c:	6978      	ldr	r0, [r7, #20]
 801160e:	f002 fc17 	bl	8013e40 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8011612:	697b      	ldr	r3, [r7, #20]
 8011614:	2201      	movs	r2, #1
 8011616:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8011618:	697b      	ldr	r3, [r7, #20]
 801161a:	2201      	movs	r2, #1
 801161c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8011624:	697b      	ldr	r3, [r7, #20]
 8011626:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8011628:	68bb      	ldr	r3, [r7, #8]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	4618      	mov	r0, r3
 801162e:	f7f6 fcda 	bl	8007fe6 <lwip_htonl>
 8011632:	4602      	mov	r2, r0
 8011634:	697b      	ldr	r3, [r7, #20]
 8011636:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8011638:	79fb      	ldrb	r3, [r7, #7]
 801163a:	2b08      	cmp	r3, #8
 801163c:	d010      	beq.n	8011660 <dhcp_create_msg+0xfc>
 801163e:	79fb      	ldrb	r3, [r7, #7]
 8011640:	2b04      	cmp	r3, #4
 8011642:	d00d      	beq.n	8011660 <dhcp_create_msg+0xfc>
 8011644:	79fb      	ldrb	r3, [r7, #7]
 8011646:	2b07      	cmp	r3, #7
 8011648:	d00a      	beq.n	8011660 <dhcp_create_msg+0xfc>
 801164a:	79fb      	ldrb	r3, [r7, #7]
 801164c:	2b03      	cmp	r3, #3
 801164e:	d10c      	bne.n	801166a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011650:	68bb      	ldr	r3, [r7, #8]
 8011652:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8011654:	2b05      	cmp	r3, #5
 8011656:	d003      	beq.n	8011660 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011658:	68bb      	ldr	r3, [r7, #8]
 801165a:	795b      	ldrb	r3, [r3, #5]
 801165c:	2b04      	cmp	r3, #4
 801165e:	d104      	bne.n	801166a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	3304      	adds	r3, #4
 8011664:	681a      	ldr	r2, [r3, #0]
 8011666:	697b      	ldr	r3, [r7, #20]
 8011668:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801166a:	2300      	movs	r3, #0
 801166c:	83fb      	strh	r3, [r7, #30]
 801166e:	e00c      	b.n	801168a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8011670:	8bfa      	ldrh	r2, [r7, #30]
 8011672:	8bfb      	ldrh	r3, [r7, #30]
 8011674:	68f9      	ldr	r1, [r7, #12]
 8011676:	440a      	add	r2, r1
 8011678:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801167c:	697a      	ldr	r2, [r7, #20]
 801167e:	4413      	add	r3, r2
 8011680:	460a      	mov	r2, r1
 8011682:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011684:	8bfb      	ldrh	r3, [r7, #30]
 8011686:	3301      	adds	r3, #1
 8011688:	83fb      	strh	r3, [r7, #30]
 801168a:	8bfb      	ldrh	r3, [r7, #30]
 801168c:	2b05      	cmp	r3, #5
 801168e:	d9ef      	bls.n	8011670 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8011690:	697b      	ldr	r3, [r7, #20]
 8011692:	2200      	movs	r2, #0
 8011694:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8011698:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801169c:	2200      	movs	r2, #0
 801169e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80116a2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80116a6:	2200      	movs	r2, #0
 80116a8:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80116ac:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80116b0:	2200      	movs	r2, #0
 80116b2:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80116b6:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80116ba:	697b      	ldr	r3, [r7, #20]
 80116bc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80116c0:	2301      	movs	r3, #1
 80116c2:	2235      	movs	r2, #53	; 0x35
 80116c4:	2000      	movs	r0, #0
 80116c6:	f7ff fadb 	bl	8010c80 <dhcp_option>
 80116ca:	4603      	mov	r3, r0
 80116cc:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80116ce:	697b      	ldr	r3, [r7, #20]
 80116d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80116d4:	79fa      	ldrb	r2, [r7, #7]
 80116d6:	8a7b      	ldrh	r3, [r7, #18]
 80116d8:	4618      	mov	r0, r3
 80116da:	f7ff fb05 	bl	8010ce8 <dhcp_option_byte>
 80116de:	4603      	mov	r3, r0
 80116e0:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d002      	beq.n	80116ee <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	8a7a      	ldrh	r2, [r7, #18]
 80116ec:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80116ee:	69bb      	ldr	r3, [r7, #24]
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	3720      	adds	r7, #32
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}
 80116f8:	08017714 	.word	0x08017714
 80116fc:	08017a34 	.word	0x08017a34
 8011700:	08017774 	.word	0x08017774
 8011704:	08017a54 	.word	0x08017a54
 8011708:	08017a74 	.word	0x08017a74
 801170c:	2000af50 	.word	0x2000af50

08011710 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b084      	sub	sp, #16
 8011714:	af00      	add	r7, sp, #0
 8011716:	4603      	mov	r3, r0
 8011718:	60b9      	str	r1, [r7, #8]
 801171a:	607a      	str	r2, [r7, #4]
 801171c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801171e:	89fb      	ldrh	r3, [r7, #14]
 8011720:	1c5a      	adds	r2, r3, #1
 8011722:	81fa      	strh	r2, [r7, #14]
 8011724:	461a      	mov	r2, r3
 8011726:	68bb      	ldr	r3, [r7, #8]
 8011728:	4413      	add	r3, r2
 801172a:	22ff      	movs	r2, #255	; 0xff
 801172c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801172e:	e007      	b.n	8011740 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8011730:	89fb      	ldrh	r3, [r7, #14]
 8011732:	1c5a      	adds	r2, r3, #1
 8011734:	81fa      	strh	r2, [r7, #14]
 8011736:	461a      	mov	r2, r3
 8011738:	68bb      	ldr	r3, [r7, #8]
 801173a:	4413      	add	r3, r2
 801173c:	2200      	movs	r2, #0
 801173e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8011740:	89fb      	ldrh	r3, [r7, #14]
 8011742:	2b43      	cmp	r3, #67	; 0x43
 8011744:	d904      	bls.n	8011750 <dhcp_option_trailer+0x40>
 8011746:	89fb      	ldrh	r3, [r7, #14]
 8011748:	f003 0303 	and.w	r3, r3, #3
 801174c:	2b00      	cmp	r3, #0
 801174e:	d002      	beq.n	8011756 <dhcp_option_trailer+0x46>
 8011750:	89fb      	ldrh	r3, [r7, #14]
 8011752:	2b43      	cmp	r3, #67	; 0x43
 8011754:	d9ec      	bls.n	8011730 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8011756:	89fb      	ldrh	r3, [r7, #14]
 8011758:	33f0      	adds	r3, #240	; 0xf0
 801175a:	b29b      	uxth	r3, r3
 801175c:	4619      	mov	r1, r3
 801175e:	6878      	ldr	r0, [r7, #4]
 8011760:	f7f7 fe10 	bl	8009384 <pbuf_realloc>
}
 8011764:	bf00      	nop
 8011766:	3710      	adds	r7, #16
 8011768:	46bd      	mov	sp, r7
 801176a:	bd80      	pop	{r7, pc}

0801176c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801176c:	b480      	push	{r7}
 801176e:	b085      	sub	sp, #20
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d017      	beq.n	80117aa <dhcp_supplied_address+0x3e>
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801177e:	2b00      	cmp	r3, #0
 8011780:	d013      	beq.n	80117aa <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011786:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	795b      	ldrb	r3, [r3, #5]
 801178c:	2b0a      	cmp	r3, #10
 801178e:	d007      	beq.n	80117a0 <dhcp_supplied_address+0x34>
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	795b      	ldrb	r3, [r3, #5]
 8011794:	2b05      	cmp	r3, #5
 8011796:	d003      	beq.n	80117a0 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801179c:	2b04      	cmp	r3, #4
 801179e:	d101      	bne.n	80117a4 <dhcp_supplied_address+0x38>
 80117a0:	2301      	movs	r3, #1
 80117a2:	e000      	b.n	80117a6 <dhcp_supplied_address+0x3a>
 80117a4:	2300      	movs	r3, #0
 80117a6:	b2db      	uxtb	r3, r3
 80117a8:	e000      	b.n	80117ac <dhcp_supplied_address+0x40>
  }
  return 0;
 80117aa:	2300      	movs	r3, #0
}
 80117ac:	4618      	mov	r0, r3
 80117ae:	3714      	adds	r7, #20
 80117b0:	46bd      	mov	sp, r7
 80117b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b6:	4770      	bx	lr

080117b8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b082      	sub	sp, #8
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80117c0:	4915      	ldr	r1, [pc, #84]	; (8011818 <etharp_free_entry+0x60>)
 80117c2:	687a      	ldr	r2, [r7, #4]
 80117c4:	4613      	mov	r3, r2
 80117c6:	005b      	lsls	r3, r3, #1
 80117c8:	4413      	add	r3, r2
 80117ca:	00db      	lsls	r3, r3, #3
 80117cc:	440b      	add	r3, r1
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d013      	beq.n	80117fc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80117d4:	4910      	ldr	r1, [pc, #64]	; (8011818 <etharp_free_entry+0x60>)
 80117d6:	687a      	ldr	r2, [r7, #4]
 80117d8:	4613      	mov	r3, r2
 80117da:	005b      	lsls	r3, r3, #1
 80117dc:	4413      	add	r3, r2
 80117de:	00db      	lsls	r3, r3, #3
 80117e0:	440b      	add	r3, r1
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	4618      	mov	r0, r3
 80117e6:	f7f7 ff53 	bl	8009690 <pbuf_free>
    arp_table[i].q = NULL;
 80117ea:	490b      	ldr	r1, [pc, #44]	; (8011818 <etharp_free_entry+0x60>)
 80117ec:	687a      	ldr	r2, [r7, #4]
 80117ee:	4613      	mov	r3, r2
 80117f0:	005b      	lsls	r3, r3, #1
 80117f2:	4413      	add	r3, r2
 80117f4:	00db      	lsls	r3, r3, #3
 80117f6:	440b      	add	r3, r1
 80117f8:	2200      	movs	r2, #0
 80117fa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80117fc:	4906      	ldr	r1, [pc, #24]	; (8011818 <etharp_free_entry+0x60>)
 80117fe:	687a      	ldr	r2, [r7, #4]
 8011800:	4613      	mov	r3, r2
 8011802:	005b      	lsls	r3, r3, #1
 8011804:	4413      	add	r3, r2
 8011806:	00db      	lsls	r3, r3, #3
 8011808:	440b      	add	r3, r1
 801180a:	3314      	adds	r3, #20
 801180c:	2200      	movs	r2, #0
 801180e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011810:	bf00      	nop
 8011812:	3708      	adds	r7, #8
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}
 8011818:	2000af54 	.word	0x2000af54

0801181c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b082      	sub	sp, #8
 8011820:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011822:	2300      	movs	r3, #0
 8011824:	607b      	str	r3, [r7, #4]
 8011826:	e096      	b.n	8011956 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011828:	494f      	ldr	r1, [pc, #316]	; (8011968 <etharp_tmr+0x14c>)
 801182a:	687a      	ldr	r2, [r7, #4]
 801182c:	4613      	mov	r3, r2
 801182e:	005b      	lsls	r3, r3, #1
 8011830:	4413      	add	r3, r2
 8011832:	00db      	lsls	r3, r3, #3
 8011834:	440b      	add	r3, r1
 8011836:	3314      	adds	r3, #20
 8011838:	781b      	ldrb	r3, [r3, #0]
 801183a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801183c:	78fb      	ldrb	r3, [r7, #3]
 801183e:	2b00      	cmp	r3, #0
 8011840:	f000 8086 	beq.w	8011950 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011844:	4948      	ldr	r1, [pc, #288]	; (8011968 <etharp_tmr+0x14c>)
 8011846:	687a      	ldr	r2, [r7, #4]
 8011848:	4613      	mov	r3, r2
 801184a:	005b      	lsls	r3, r3, #1
 801184c:	4413      	add	r3, r2
 801184e:	00db      	lsls	r3, r3, #3
 8011850:	440b      	add	r3, r1
 8011852:	3312      	adds	r3, #18
 8011854:	881b      	ldrh	r3, [r3, #0]
 8011856:	3301      	adds	r3, #1
 8011858:	b298      	uxth	r0, r3
 801185a:	4943      	ldr	r1, [pc, #268]	; (8011968 <etharp_tmr+0x14c>)
 801185c:	687a      	ldr	r2, [r7, #4]
 801185e:	4613      	mov	r3, r2
 8011860:	005b      	lsls	r3, r3, #1
 8011862:	4413      	add	r3, r2
 8011864:	00db      	lsls	r3, r3, #3
 8011866:	440b      	add	r3, r1
 8011868:	3312      	adds	r3, #18
 801186a:	4602      	mov	r2, r0
 801186c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801186e:	493e      	ldr	r1, [pc, #248]	; (8011968 <etharp_tmr+0x14c>)
 8011870:	687a      	ldr	r2, [r7, #4]
 8011872:	4613      	mov	r3, r2
 8011874:	005b      	lsls	r3, r3, #1
 8011876:	4413      	add	r3, r2
 8011878:	00db      	lsls	r3, r3, #3
 801187a:	440b      	add	r3, r1
 801187c:	3312      	adds	r3, #18
 801187e:	881b      	ldrh	r3, [r3, #0]
 8011880:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011884:	d215      	bcs.n	80118b2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011886:	4938      	ldr	r1, [pc, #224]	; (8011968 <etharp_tmr+0x14c>)
 8011888:	687a      	ldr	r2, [r7, #4]
 801188a:	4613      	mov	r3, r2
 801188c:	005b      	lsls	r3, r3, #1
 801188e:	4413      	add	r3, r2
 8011890:	00db      	lsls	r3, r3, #3
 8011892:	440b      	add	r3, r1
 8011894:	3314      	adds	r3, #20
 8011896:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011898:	2b01      	cmp	r3, #1
 801189a:	d10e      	bne.n	80118ba <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801189c:	4932      	ldr	r1, [pc, #200]	; (8011968 <etharp_tmr+0x14c>)
 801189e:	687a      	ldr	r2, [r7, #4]
 80118a0:	4613      	mov	r3, r2
 80118a2:	005b      	lsls	r3, r3, #1
 80118a4:	4413      	add	r3, r2
 80118a6:	00db      	lsls	r3, r3, #3
 80118a8:	440b      	add	r3, r1
 80118aa:	3312      	adds	r3, #18
 80118ac:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80118ae:	2b04      	cmp	r3, #4
 80118b0:	d903      	bls.n	80118ba <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80118b2:	6878      	ldr	r0, [r7, #4]
 80118b4:	f7ff ff80 	bl	80117b8 <etharp_free_entry>
 80118b8:	e04a      	b.n	8011950 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80118ba:	492b      	ldr	r1, [pc, #172]	; (8011968 <etharp_tmr+0x14c>)
 80118bc:	687a      	ldr	r2, [r7, #4]
 80118be:	4613      	mov	r3, r2
 80118c0:	005b      	lsls	r3, r3, #1
 80118c2:	4413      	add	r3, r2
 80118c4:	00db      	lsls	r3, r3, #3
 80118c6:	440b      	add	r3, r1
 80118c8:	3314      	adds	r3, #20
 80118ca:	781b      	ldrb	r3, [r3, #0]
 80118cc:	2b03      	cmp	r3, #3
 80118ce:	d10a      	bne.n	80118e6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80118d0:	4925      	ldr	r1, [pc, #148]	; (8011968 <etharp_tmr+0x14c>)
 80118d2:	687a      	ldr	r2, [r7, #4]
 80118d4:	4613      	mov	r3, r2
 80118d6:	005b      	lsls	r3, r3, #1
 80118d8:	4413      	add	r3, r2
 80118da:	00db      	lsls	r3, r3, #3
 80118dc:	440b      	add	r3, r1
 80118de:	3314      	adds	r3, #20
 80118e0:	2204      	movs	r2, #4
 80118e2:	701a      	strb	r2, [r3, #0]
 80118e4:	e034      	b.n	8011950 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80118e6:	4920      	ldr	r1, [pc, #128]	; (8011968 <etharp_tmr+0x14c>)
 80118e8:	687a      	ldr	r2, [r7, #4]
 80118ea:	4613      	mov	r3, r2
 80118ec:	005b      	lsls	r3, r3, #1
 80118ee:	4413      	add	r3, r2
 80118f0:	00db      	lsls	r3, r3, #3
 80118f2:	440b      	add	r3, r1
 80118f4:	3314      	adds	r3, #20
 80118f6:	781b      	ldrb	r3, [r3, #0]
 80118f8:	2b04      	cmp	r3, #4
 80118fa:	d10a      	bne.n	8011912 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80118fc:	491a      	ldr	r1, [pc, #104]	; (8011968 <etharp_tmr+0x14c>)
 80118fe:	687a      	ldr	r2, [r7, #4]
 8011900:	4613      	mov	r3, r2
 8011902:	005b      	lsls	r3, r3, #1
 8011904:	4413      	add	r3, r2
 8011906:	00db      	lsls	r3, r3, #3
 8011908:	440b      	add	r3, r1
 801190a:	3314      	adds	r3, #20
 801190c:	2202      	movs	r2, #2
 801190e:	701a      	strb	r2, [r3, #0]
 8011910:	e01e      	b.n	8011950 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011912:	4915      	ldr	r1, [pc, #84]	; (8011968 <etharp_tmr+0x14c>)
 8011914:	687a      	ldr	r2, [r7, #4]
 8011916:	4613      	mov	r3, r2
 8011918:	005b      	lsls	r3, r3, #1
 801191a:	4413      	add	r3, r2
 801191c:	00db      	lsls	r3, r3, #3
 801191e:	440b      	add	r3, r1
 8011920:	3314      	adds	r3, #20
 8011922:	781b      	ldrb	r3, [r3, #0]
 8011924:	2b01      	cmp	r3, #1
 8011926:	d113      	bne.n	8011950 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011928:	490f      	ldr	r1, [pc, #60]	; (8011968 <etharp_tmr+0x14c>)
 801192a:	687a      	ldr	r2, [r7, #4]
 801192c:	4613      	mov	r3, r2
 801192e:	005b      	lsls	r3, r3, #1
 8011930:	4413      	add	r3, r2
 8011932:	00db      	lsls	r3, r3, #3
 8011934:	440b      	add	r3, r1
 8011936:	3308      	adds	r3, #8
 8011938:	6818      	ldr	r0, [r3, #0]
 801193a:	687a      	ldr	r2, [r7, #4]
 801193c:	4613      	mov	r3, r2
 801193e:	005b      	lsls	r3, r3, #1
 8011940:	4413      	add	r3, r2
 8011942:	00db      	lsls	r3, r3, #3
 8011944:	4a08      	ldr	r2, [pc, #32]	; (8011968 <etharp_tmr+0x14c>)
 8011946:	4413      	add	r3, r2
 8011948:	3304      	adds	r3, #4
 801194a:	4619      	mov	r1, r3
 801194c:	f000 fe72 	bl	8012634 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	3301      	adds	r3, #1
 8011954:	607b      	str	r3, [r7, #4]
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	2b09      	cmp	r3, #9
 801195a:	f77f af65 	ble.w	8011828 <etharp_tmr+0xc>
      }
    }
  }
}
 801195e:	bf00      	nop
 8011960:	bf00      	nop
 8011962:	3708      	adds	r7, #8
 8011964:	46bd      	mov	sp, r7
 8011966:	bd80      	pop	{r7, pc}
 8011968:	2000af54 	.word	0x2000af54

0801196c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b08a      	sub	sp, #40	; 0x28
 8011970:	af00      	add	r7, sp, #0
 8011972:	60f8      	str	r0, [r7, #12]
 8011974:	460b      	mov	r3, r1
 8011976:	607a      	str	r2, [r7, #4]
 8011978:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801197a:	230a      	movs	r3, #10
 801197c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801197e:	230a      	movs	r3, #10
 8011980:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8011982:	230a      	movs	r3, #10
 8011984:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8011986:	2300      	movs	r3, #0
 8011988:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801198a:	230a      	movs	r3, #10
 801198c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801198e:	2300      	movs	r3, #0
 8011990:	83bb      	strh	r3, [r7, #28]
 8011992:	2300      	movs	r3, #0
 8011994:	837b      	strh	r3, [r7, #26]
 8011996:	2300      	movs	r3, #0
 8011998:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801199a:	2300      	movs	r3, #0
 801199c:	843b      	strh	r3, [r7, #32]
 801199e:	e0ae      	b.n	8011afe <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80119a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119a4:	49a6      	ldr	r1, [pc, #664]	; (8011c40 <etharp_find_entry+0x2d4>)
 80119a6:	4613      	mov	r3, r2
 80119a8:	005b      	lsls	r3, r3, #1
 80119aa:	4413      	add	r3, r2
 80119ac:	00db      	lsls	r3, r3, #3
 80119ae:	440b      	add	r3, r1
 80119b0:	3314      	adds	r3, #20
 80119b2:	781b      	ldrb	r3, [r3, #0]
 80119b4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80119b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80119ba:	2b0a      	cmp	r3, #10
 80119bc:	d105      	bne.n	80119ca <etharp_find_entry+0x5e>
 80119be:	7dfb      	ldrb	r3, [r7, #23]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d102      	bne.n	80119ca <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80119c4:	8c3b      	ldrh	r3, [r7, #32]
 80119c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80119c8:	e095      	b.n	8011af6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80119ca:	7dfb      	ldrb	r3, [r7, #23]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	f000 8092 	beq.w	8011af6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80119d2:	7dfb      	ldrb	r3, [r7, #23]
 80119d4:	2b01      	cmp	r3, #1
 80119d6:	d009      	beq.n	80119ec <etharp_find_entry+0x80>
 80119d8:	7dfb      	ldrb	r3, [r7, #23]
 80119da:	2b01      	cmp	r3, #1
 80119dc:	d806      	bhi.n	80119ec <etharp_find_entry+0x80>
 80119de:	4b99      	ldr	r3, [pc, #612]	; (8011c44 <etharp_find_entry+0x2d8>)
 80119e0:	f240 1223 	movw	r2, #291	; 0x123
 80119e4:	4998      	ldr	r1, [pc, #608]	; (8011c48 <etharp_find_entry+0x2dc>)
 80119e6:	4899      	ldr	r0, [pc, #612]	; (8011c4c <etharp_find_entry+0x2e0>)
 80119e8:	f002 fa32 	bl	8013e50 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d020      	beq.n	8011a34 <etharp_find_entry+0xc8>
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	6819      	ldr	r1, [r3, #0]
 80119f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119fa:	4891      	ldr	r0, [pc, #580]	; (8011c40 <etharp_find_entry+0x2d4>)
 80119fc:	4613      	mov	r3, r2
 80119fe:	005b      	lsls	r3, r3, #1
 8011a00:	4413      	add	r3, r2
 8011a02:	00db      	lsls	r3, r3, #3
 8011a04:	4403      	add	r3, r0
 8011a06:	3304      	adds	r3, #4
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	4299      	cmp	r1, r3
 8011a0c:	d112      	bne.n	8011a34 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d00c      	beq.n	8011a2e <etharp_find_entry+0xc2>
 8011a14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a18:	4989      	ldr	r1, [pc, #548]	; (8011c40 <etharp_find_entry+0x2d4>)
 8011a1a:	4613      	mov	r3, r2
 8011a1c:	005b      	lsls	r3, r3, #1
 8011a1e:	4413      	add	r3, r2
 8011a20:	00db      	lsls	r3, r3, #3
 8011a22:	440b      	add	r3, r1
 8011a24:	3308      	adds	r3, #8
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	687a      	ldr	r2, [r7, #4]
 8011a2a:	429a      	cmp	r2, r3
 8011a2c:	d102      	bne.n	8011a34 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011a2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011a32:	e100      	b.n	8011c36 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011a34:	7dfb      	ldrb	r3, [r7, #23]
 8011a36:	2b01      	cmp	r3, #1
 8011a38:	d140      	bne.n	8011abc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011a3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a3e:	4980      	ldr	r1, [pc, #512]	; (8011c40 <etharp_find_entry+0x2d4>)
 8011a40:	4613      	mov	r3, r2
 8011a42:	005b      	lsls	r3, r3, #1
 8011a44:	4413      	add	r3, r2
 8011a46:	00db      	lsls	r3, r3, #3
 8011a48:	440b      	add	r3, r1
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d01a      	beq.n	8011a86 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011a50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a54:	497a      	ldr	r1, [pc, #488]	; (8011c40 <etharp_find_entry+0x2d4>)
 8011a56:	4613      	mov	r3, r2
 8011a58:	005b      	lsls	r3, r3, #1
 8011a5a:	4413      	add	r3, r2
 8011a5c:	00db      	lsls	r3, r3, #3
 8011a5e:	440b      	add	r3, r1
 8011a60:	3312      	adds	r3, #18
 8011a62:	881b      	ldrh	r3, [r3, #0]
 8011a64:	8bba      	ldrh	r2, [r7, #28]
 8011a66:	429a      	cmp	r2, r3
 8011a68:	d845      	bhi.n	8011af6 <etharp_find_entry+0x18a>
            old_queue = i;
 8011a6a:	8c3b      	ldrh	r3, [r7, #32]
 8011a6c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011a6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a72:	4973      	ldr	r1, [pc, #460]	; (8011c40 <etharp_find_entry+0x2d4>)
 8011a74:	4613      	mov	r3, r2
 8011a76:	005b      	lsls	r3, r3, #1
 8011a78:	4413      	add	r3, r2
 8011a7a:	00db      	lsls	r3, r3, #3
 8011a7c:	440b      	add	r3, r1
 8011a7e:	3312      	adds	r3, #18
 8011a80:	881b      	ldrh	r3, [r3, #0]
 8011a82:	83bb      	strh	r3, [r7, #28]
 8011a84:	e037      	b.n	8011af6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011a86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a8a:	496d      	ldr	r1, [pc, #436]	; (8011c40 <etharp_find_entry+0x2d4>)
 8011a8c:	4613      	mov	r3, r2
 8011a8e:	005b      	lsls	r3, r3, #1
 8011a90:	4413      	add	r3, r2
 8011a92:	00db      	lsls	r3, r3, #3
 8011a94:	440b      	add	r3, r1
 8011a96:	3312      	adds	r3, #18
 8011a98:	881b      	ldrh	r3, [r3, #0]
 8011a9a:	8b7a      	ldrh	r2, [r7, #26]
 8011a9c:	429a      	cmp	r2, r3
 8011a9e:	d82a      	bhi.n	8011af6 <etharp_find_entry+0x18a>
            old_pending = i;
 8011aa0:	8c3b      	ldrh	r3, [r7, #32]
 8011aa2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011aa4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011aa8:	4965      	ldr	r1, [pc, #404]	; (8011c40 <etharp_find_entry+0x2d4>)
 8011aaa:	4613      	mov	r3, r2
 8011aac:	005b      	lsls	r3, r3, #1
 8011aae:	4413      	add	r3, r2
 8011ab0:	00db      	lsls	r3, r3, #3
 8011ab2:	440b      	add	r3, r1
 8011ab4:	3312      	adds	r3, #18
 8011ab6:	881b      	ldrh	r3, [r3, #0]
 8011ab8:	837b      	strh	r3, [r7, #26]
 8011aba:	e01c      	b.n	8011af6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011abc:	7dfb      	ldrb	r3, [r7, #23]
 8011abe:	2b01      	cmp	r3, #1
 8011ac0:	d919      	bls.n	8011af6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011ac2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ac6:	495e      	ldr	r1, [pc, #376]	; (8011c40 <etharp_find_entry+0x2d4>)
 8011ac8:	4613      	mov	r3, r2
 8011aca:	005b      	lsls	r3, r3, #1
 8011acc:	4413      	add	r3, r2
 8011ace:	00db      	lsls	r3, r3, #3
 8011ad0:	440b      	add	r3, r1
 8011ad2:	3312      	adds	r3, #18
 8011ad4:	881b      	ldrh	r3, [r3, #0]
 8011ad6:	8b3a      	ldrh	r2, [r7, #24]
 8011ad8:	429a      	cmp	r2, r3
 8011ada:	d80c      	bhi.n	8011af6 <etharp_find_entry+0x18a>
            old_stable = i;
 8011adc:	8c3b      	ldrh	r3, [r7, #32]
 8011ade:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8011ae0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ae4:	4956      	ldr	r1, [pc, #344]	; (8011c40 <etharp_find_entry+0x2d4>)
 8011ae6:	4613      	mov	r3, r2
 8011ae8:	005b      	lsls	r3, r3, #1
 8011aea:	4413      	add	r3, r2
 8011aec:	00db      	lsls	r3, r3, #3
 8011aee:	440b      	add	r3, r1
 8011af0:	3312      	adds	r3, #18
 8011af2:	881b      	ldrh	r3, [r3, #0]
 8011af4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011af6:	8c3b      	ldrh	r3, [r7, #32]
 8011af8:	3301      	adds	r3, #1
 8011afa:	b29b      	uxth	r3, r3
 8011afc:	843b      	strh	r3, [r7, #32]
 8011afe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011b02:	2b09      	cmp	r3, #9
 8011b04:	f77f af4c 	ble.w	80119a0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011b08:	7afb      	ldrb	r3, [r7, #11]
 8011b0a:	f003 0302 	and.w	r3, r3, #2
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d108      	bne.n	8011b24 <etharp_find_entry+0x1b8>
 8011b12:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011b16:	2b0a      	cmp	r3, #10
 8011b18:	d107      	bne.n	8011b2a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011b1a:	7afb      	ldrb	r3, [r7, #11]
 8011b1c:	f003 0301 	and.w	r3, r3, #1
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d102      	bne.n	8011b2a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011b24:	f04f 33ff 	mov.w	r3, #4294967295
 8011b28:	e085      	b.n	8011c36 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011b2a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011b2e:	2b09      	cmp	r3, #9
 8011b30:	dc02      	bgt.n	8011b38 <etharp_find_entry+0x1cc>
    i = empty;
 8011b32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b34:	843b      	strh	r3, [r7, #32]
 8011b36:	e039      	b.n	8011bac <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011b38:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011b3c:	2b09      	cmp	r3, #9
 8011b3e:	dc14      	bgt.n	8011b6a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011b40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011b42:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011b44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b48:	493d      	ldr	r1, [pc, #244]	; (8011c40 <etharp_find_entry+0x2d4>)
 8011b4a:	4613      	mov	r3, r2
 8011b4c:	005b      	lsls	r3, r3, #1
 8011b4e:	4413      	add	r3, r2
 8011b50:	00db      	lsls	r3, r3, #3
 8011b52:	440b      	add	r3, r1
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d018      	beq.n	8011b8c <etharp_find_entry+0x220>
 8011b5a:	4b3a      	ldr	r3, [pc, #232]	; (8011c44 <etharp_find_entry+0x2d8>)
 8011b5c:	f240 126d 	movw	r2, #365	; 0x16d
 8011b60:	493b      	ldr	r1, [pc, #236]	; (8011c50 <etharp_find_entry+0x2e4>)
 8011b62:	483a      	ldr	r0, [pc, #232]	; (8011c4c <etharp_find_entry+0x2e0>)
 8011b64:	f002 f974 	bl	8013e50 <iprintf>
 8011b68:	e010      	b.n	8011b8c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011b6a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011b6e:	2b09      	cmp	r3, #9
 8011b70:	dc02      	bgt.n	8011b78 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011b72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011b74:	843b      	strh	r3, [r7, #32]
 8011b76:	e009      	b.n	8011b8c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011b78:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011b7c:	2b09      	cmp	r3, #9
 8011b7e:	dc02      	bgt.n	8011b86 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011b80:	8bfb      	ldrh	r3, [r7, #30]
 8011b82:	843b      	strh	r3, [r7, #32]
 8011b84:	e002      	b.n	8011b8c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011b86:	f04f 33ff 	mov.w	r3, #4294967295
 8011b8a:	e054      	b.n	8011c36 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011b8c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011b90:	2b09      	cmp	r3, #9
 8011b92:	dd06      	ble.n	8011ba2 <etharp_find_entry+0x236>
 8011b94:	4b2b      	ldr	r3, [pc, #172]	; (8011c44 <etharp_find_entry+0x2d8>)
 8011b96:	f240 127f 	movw	r2, #383	; 0x17f
 8011b9a:	492e      	ldr	r1, [pc, #184]	; (8011c54 <etharp_find_entry+0x2e8>)
 8011b9c:	482b      	ldr	r0, [pc, #172]	; (8011c4c <etharp_find_entry+0x2e0>)
 8011b9e:	f002 f957 	bl	8013e50 <iprintf>
    etharp_free_entry(i);
 8011ba2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f7ff fe06 	bl	80117b8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011bac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011bb0:	2b09      	cmp	r3, #9
 8011bb2:	dd06      	ble.n	8011bc2 <etharp_find_entry+0x256>
 8011bb4:	4b23      	ldr	r3, [pc, #140]	; (8011c44 <etharp_find_entry+0x2d8>)
 8011bb6:	f240 1283 	movw	r2, #387	; 0x183
 8011bba:	4926      	ldr	r1, [pc, #152]	; (8011c54 <etharp_find_entry+0x2e8>)
 8011bbc:	4823      	ldr	r0, [pc, #140]	; (8011c4c <etharp_find_entry+0x2e0>)
 8011bbe:	f002 f947 	bl	8013e50 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011bc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011bc6:	491e      	ldr	r1, [pc, #120]	; (8011c40 <etharp_find_entry+0x2d4>)
 8011bc8:	4613      	mov	r3, r2
 8011bca:	005b      	lsls	r3, r3, #1
 8011bcc:	4413      	add	r3, r2
 8011bce:	00db      	lsls	r3, r3, #3
 8011bd0:	440b      	add	r3, r1
 8011bd2:	3314      	adds	r3, #20
 8011bd4:	781b      	ldrb	r3, [r3, #0]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d006      	beq.n	8011be8 <etharp_find_entry+0x27c>
 8011bda:	4b1a      	ldr	r3, [pc, #104]	; (8011c44 <etharp_find_entry+0x2d8>)
 8011bdc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8011be0:	491d      	ldr	r1, [pc, #116]	; (8011c58 <etharp_find_entry+0x2ec>)
 8011be2:	481a      	ldr	r0, [pc, #104]	; (8011c4c <etharp_find_entry+0x2e0>)
 8011be4:	f002 f934 	bl	8013e50 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d00b      	beq.n	8011c06 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011bee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	6819      	ldr	r1, [r3, #0]
 8011bf6:	4812      	ldr	r0, [pc, #72]	; (8011c40 <etharp_find_entry+0x2d4>)
 8011bf8:	4613      	mov	r3, r2
 8011bfa:	005b      	lsls	r3, r3, #1
 8011bfc:	4413      	add	r3, r2
 8011bfe:	00db      	lsls	r3, r3, #3
 8011c00:	4403      	add	r3, r0
 8011c02:	3304      	adds	r3, #4
 8011c04:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011c06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c0a:	490d      	ldr	r1, [pc, #52]	; (8011c40 <etharp_find_entry+0x2d4>)
 8011c0c:	4613      	mov	r3, r2
 8011c0e:	005b      	lsls	r3, r3, #1
 8011c10:	4413      	add	r3, r2
 8011c12:	00db      	lsls	r3, r3, #3
 8011c14:	440b      	add	r3, r1
 8011c16:	3312      	adds	r3, #18
 8011c18:	2200      	movs	r2, #0
 8011c1a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011c1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c20:	4907      	ldr	r1, [pc, #28]	; (8011c40 <etharp_find_entry+0x2d4>)
 8011c22:	4613      	mov	r3, r2
 8011c24:	005b      	lsls	r3, r3, #1
 8011c26:	4413      	add	r3, r2
 8011c28:	00db      	lsls	r3, r3, #3
 8011c2a:	440b      	add	r3, r1
 8011c2c:	3308      	adds	r3, #8
 8011c2e:	687a      	ldr	r2, [r7, #4]
 8011c30:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011c32:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011c36:	4618      	mov	r0, r3
 8011c38:	3728      	adds	r7, #40	; 0x28
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}
 8011c3e:	bf00      	nop
 8011c40:	2000af54 	.word	0x2000af54
 8011c44:	08017ab4 	.word	0x08017ab4
 8011c48:	08017aec 	.word	0x08017aec
 8011c4c:	08017b2c 	.word	0x08017b2c
 8011c50:	08017b54 	.word	0x08017b54
 8011c54:	08017b6c 	.word	0x08017b6c
 8011c58:	08017b80 	.word	0x08017b80

08011c5c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b088      	sub	sp, #32
 8011c60:	af02      	add	r7, sp, #8
 8011c62:	60f8      	str	r0, [r7, #12]
 8011c64:	60b9      	str	r1, [r7, #8]
 8011c66:	607a      	str	r2, [r7, #4]
 8011c68:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011c70:	2b06      	cmp	r3, #6
 8011c72:	d006      	beq.n	8011c82 <etharp_update_arp_entry+0x26>
 8011c74:	4b48      	ldr	r3, [pc, #288]	; (8011d98 <etharp_update_arp_entry+0x13c>)
 8011c76:	f240 12a9 	movw	r2, #425	; 0x1a9
 8011c7a:	4948      	ldr	r1, [pc, #288]	; (8011d9c <etharp_update_arp_entry+0x140>)
 8011c7c:	4848      	ldr	r0, [pc, #288]	; (8011da0 <etharp_update_arp_entry+0x144>)
 8011c7e:	f002 f8e7 	bl	8013e50 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011c82:	68bb      	ldr	r3, [r7, #8]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d012      	beq.n	8011cae <etharp_update_arp_entry+0x52>
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d00e      	beq.n	8011cae <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011c90:	68bb      	ldr	r3, [r7, #8]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	68f9      	ldr	r1, [r7, #12]
 8011c96:	4618      	mov	r0, r3
 8011c98:	f001 f920 	bl	8012edc <ip4_addr_isbroadcast_u32>
 8011c9c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d105      	bne.n	8011cae <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011ca2:	68bb      	ldr	r3, [r7, #8]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011caa:	2be0      	cmp	r3, #224	; 0xe0
 8011cac:	d102      	bne.n	8011cb4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011cae:	f06f 030f 	mvn.w	r3, #15
 8011cb2:	e06c      	b.n	8011d8e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011cb4:	78fb      	ldrb	r3, [r7, #3]
 8011cb6:	68fa      	ldr	r2, [r7, #12]
 8011cb8:	4619      	mov	r1, r3
 8011cba:	68b8      	ldr	r0, [r7, #8]
 8011cbc:	f7ff fe56 	bl	801196c <etharp_find_entry>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011cc4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	da02      	bge.n	8011cd2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011ccc:	8afb      	ldrh	r3, [r7, #22]
 8011cce:	b25b      	sxtb	r3, r3
 8011cd0:	e05d      	b.n	8011d8e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011cd2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011cd6:	4933      	ldr	r1, [pc, #204]	; (8011da4 <etharp_update_arp_entry+0x148>)
 8011cd8:	4613      	mov	r3, r2
 8011cda:	005b      	lsls	r3, r3, #1
 8011cdc:	4413      	add	r3, r2
 8011cde:	00db      	lsls	r3, r3, #3
 8011ce0:	440b      	add	r3, r1
 8011ce2:	3314      	adds	r3, #20
 8011ce4:	2202      	movs	r2, #2
 8011ce6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011ce8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011cec:	492d      	ldr	r1, [pc, #180]	; (8011da4 <etharp_update_arp_entry+0x148>)
 8011cee:	4613      	mov	r3, r2
 8011cf0:	005b      	lsls	r3, r3, #1
 8011cf2:	4413      	add	r3, r2
 8011cf4:	00db      	lsls	r3, r3, #3
 8011cf6:	440b      	add	r3, r1
 8011cf8:	3308      	adds	r3, #8
 8011cfa:	68fa      	ldr	r2, [r7, #12]
 8011cfc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011cfe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d02:	4613      	mov	r3, r2
 8011d04:	005b      	lsls	r3, r3, #1
 8011d06:	4413      	add	r3, r2
 8011d08:	00db      	lsls	r3, r3, #3
 8011d0a:	3308      	adds	r3, #8
 8011d0c:	4a25      	ldr	r2, [pc, #148]	; (8011da4 <etharp_update_arp_entry+0x148>)
 8011d0e:	4413      	add	r3, r2
 8011d10:	3304      	adds	r3, #4
 8011d12:	2206      	movs	r2, #6
 8011d14:	6879      	ldr	r1, [r7, #4]
 8011d16:	4618      	mov	r0, r3
 8011d18:	f002 f86a 	bl	8013df0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011d1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d20:	4920      	ldr	r1, [pc, #128]	; (8011da4 <etharp_update_arp_entry+0x148>)
 8011d22:	4613      	mov	r3, r2
 8011d24:	005b      	lsls	r3, r3, #1
 8011d26:	4413      	add	r3, r2
 8011d28:	00db      	lsls	r3, r3, #3
 8011d2a:	440b      	add	r3, r1
 8011d2c:	3312      	adds	r3, #18
 8011d2e:	2200      	movs	r2, #0
 8011d30:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011d32:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d36:	491b      	ldr	r1, [pc, #108]	; (8011da4 <etharp_update_arp_entry+0x148>)
 8011d38:	4613      	mov	r3, r2
 8011d3a:	005b      	lsls	r3, r3, #1
 8011d3c:	4413      	add	r3, r2
 8011d3e:	00db      	lsls	r3, r3, #3
 8011d40:	440b      	add	r3, r1
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d021      	beq.n	8011d8c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011d48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d4c:	4915      	ldr	r1, [pc, #84]	; (8011da4 <etharp_update_arp_entry+0x148>)
 8011d4e:	4613      	mov	r3, r2
 8011d50:	005b      	lsls	r3, r3, #1
 8011d52:	4413      	add	r3, r2
 8011d54:	00db      	lsls	r3, r3, #3
 8011d56:	440b      	add	r3, r1
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011d5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d60:	4910      	ldr	r1, [pc, #64]	; (8011da4 <etharp_update_arp_entry+0x148>)
 8011d62:	4613      	mov	r3, r2
 8011d64:	005b      	lsls	r3, r3, #1
 8011d66:	4413      	add	r3, r2
 8011d68:	00db      	lsls	r3, r3, #3
 8011d6a:	440b      	add	r3, r1
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8011d76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011d7a:	9300      	str	r3, [sp, #0]
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	6939      	ldr	r1, [r7, #16]
 8011d80:	68f8      	ldr	r0, [r7, #12]
 8011d82:	f001 ffb9 	bl	8013cf8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011d86:	6938      	ldr	r0, [r7, #16]
 8011d88:	f7f7 fc82 	bl	8009690 <pbuf_free>
  }
  return ERR_OK;
 8011d8c:	2300      	movs	r3, #0
}
 8011d8e:	4618      	mov	r0, r3
 8011d90:	3718      	adds	r7, #24
 8011d92:	46bd      	mov	sp, r7
 8011d94:	bd80      	pop	{r7, pc}
 8011d96:	bf00      	nop
 8011d98:	08017ab4 	.word	0x08017ab4
 8011d9c:	08017bac 	.word	0x08017bac
 8011da0:	08017b2c 	.word	0x08017b2c
 8011da4:	2000af54 	.word	0x2000af54

08011da8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b084      	sub	sp, #16
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011db0:	2300      	movs	r3, #0
 8011db2:	60fb      	str	r3, [r7, #12]
 8011db4:	e01e      	b.n	8011df4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011db6:	4913      	ldr	r1, [pc, #76]	; (8011e04 <etharp_cleanup_netif+0x5c>)
 8011db8:	68fa      	ldr	r2, [r7, #12]
 8011dba:	4613      	mov	r3, r2
 8011dbc:	005b      	lsls	r3, r3, #1
 8011dbe:	4413      	add	r3, r2
 8011dc0:	00db      	lsls	r3, r3, #3
 8011dc2:	440b      	add	r3, r1
 8011dc4:	3314      	adds	r3, #20
 8011dc6:	781b      	ldrb	r3, [r3, #0]
 8011dc8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011dca:	7afb      	ldrb	r3, [r7, #11]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d00e      	beq.n	8011dee <etharp_cleanup_netif+0x46>
 8011dd0:	490c      	ldr	r1, [pc, #48]	; (8011e04 <etharp_cleanup_netif+0x5c>)
 8011dd2:	68fa      	ldr	r2, [r7, #12]
 8011dd4:	4613      	mov	r3, r2
 8011dd6:	005b      	lsls	r3, r3, #1
 8011dd8:	4413      	add	r3, r2
 8011dda:	00db      	lsls	r3, r3, #3
 8011ddc:	440b      	add	r3, r1
 8011dde:	3308      	adds	r3, #8
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	687a      	ldr	r2, [r7, #4]
 8011de4:	429a      	cmp	r2, r3
 8011de6:	d102      	bne.n	8011dee <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011de8:	68f8      	ldr	r0, [r7, #12]
 8011dea:	f7ff fce5 	bl	80117b8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	3301      	adds	r3, #1
 8011df2:	60fb      	str	r3, [r7, #12]
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	2b09      	cmp	r3, #9
 8011df8:	dddd      	ble.n	8011db6 <etharp_cleanup_netif+0xe>
    }
  }
}
 8011dfa:	bf00      	nop
 8011dfc:	bf00      	nop
 8011dfe:	3710      	adds	r7, #16
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd80      	pop	{r7, pc}
 8011e04:	2000af54 	.word	0x2000af54

08011e08 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011e08:	b5b0      	push	{r4, r5, r7, lr}
 8011e0a:	b08a      	sub	sp, #40	; 0x28
 8011e0c:	af04      	add	r7, sp, #16
 8011e0e:	6078      	str	r0, [r7, #4]
 8011e10:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d107      	bne.n	8011e28 <etharp_input+0x20>
 8011e18:	4b3f      	ldr	r3, [pc, #252]	; (8011f18 <etharp_input+0x110>)
 8011e1a:	f240 228a 	movw	r2, #650	; 0x28a
 8011e1e:	493f      	ldr	r1, [pc, #252]	; (8011f1c <etharp_input+0x114>)
 8011e20:	483f      	ldr	r0, [pc, #252]	; (8011f20 <etharp_input+0x118>)
 8011e22:	f002 f815 	bl	8013e50 <iprintf>
 8011e26:	e074      	b.n	8011f12 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	685b      	ldr	r3, [r3, #4]
 8011e2c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011e2e:	693b      	ldr	r3, [r7, #16]
 8011e30:	881b      	ldrh	r3, [r3, #0]
 8011e32:	b29b      	uxth	r3, r3
 8011e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e38:	d10c      	bne.n	8011e54 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011e3a:	693b      	ldr	r3, [r7, #16]
 8011e3c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011e3e:	2b06      	cmp	r3, #6
 8011e40:	d108      	bne.n	8011e54 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011e42:	693b      	ldr	r3, [r7, #16]
 8011e44:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011e46:	2b04      	cmp	r3, #4
 8011e48:	d104      	bne.n	8011e54 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011e4a:	693b      	ldr	r3, [r7, #16]
 8011e4c:	885b      	ldrh	r3, [r3, #2]
 8011e4e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011e50:	2b08      	cmp	r3, #8
 8011e52:	d003      	beq.n	8011e5c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011e54:	6878      	ldr	r0, [r7, #4]
 8011e56:	f7f7 fc1b 	bl	8009690 <pbuf_free>
    return;
 8011e5a:	e05a      	b.n	8011f12 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011e5c:	693b      	ldr	r3, [r7, #16]
 8011e5e:	330e      	adds	r3, #14
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011e64:	693b      	ldr	r3, [r7, #16]
 8011e66:	3318      	adds	r3, #24
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011e6c:	683b      	ldr	r3, [r7, #0]
 8011e6e:	3304      	adds	r3, #4
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d102      	bne.n	8011e7c <etharp_input+0x74>
    for_us = 0;
 8011e76:	2300      	movs	r3, #0
 8011e78:	75fb      	strb	r3, [r7, #23]
 8011e7a:	e009      	b.n	8011e90 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011e7c:	68ba      	ldr	r2, [r7, #8]
 8011e7e:	683b      	ldr	r3, [r7, #0]
 8011e80:	3304      	adds	r3, #4
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	429a      	cmp	r2, r3
 8011e86:	bf0c      	ite	eq
 8011e88:	2301      	moveq	r3, #1
 8011e8a:	2300      	movne	r3, #0
 8011e8c:	b2db      	uxtb	r3, r3
 8011e8e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011e90:	693b      	ldr	r3, [r7, #16]
 8011e92:	f103 0208 	add.w	r2, r3, #8
 8011e96:	7dfb      	ldrb	r3, [r7, #23]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d001      	beq.n	8011ea0 <etharp_input+0x98>
 8011e9c:	2301      	movs	r3, #1
 8011e9e:	e000      	b.n	8011ea2 <etharp_input+0x9a>
 8011ea0:	2302      	movs	r3, #2
 8011ea2:	f107 010c 	add.w	r1, r7, #12
 8011ea6:	6838      	ldr	r0, [r7, #0]
 8011ea8:	f7ff fed8 	bl	8011c5c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011eac:	693b      	ldr	r3, [r7, #16]
 8011eae:	88db      	ldrh	r3, [r3, #6]
 8011eb0:	b29b      	uxth	r3, r3
 8011eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011eb6:	d003      	beq.n	8011ec0 <etharp_input+0xb8>
 8011eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011ebc:	d01e      	beq.n	8011efc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011ebe:	e025      	b.n	8011f0c <etharp_input+0x104>
      if (for_us) {
 8011ec0:	7dfb      	ldrb	r3, [r7, #23]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d021      	beq.n	8011f0a <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011ec6:	683b      	ldr	r3, [r7, #0]
 8011ec8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8011ecc:	693b      	ldr	r3, [r7, #16]
 8011ece:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011ed2:	683b      	ldr	r3, [r7, #0]
 8011ed4:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011edc:	693a      	ldr	r2, [r7, #16]
 8011ede:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011ee0:	2102      	movs	r1, #2
 8011ee2:	9103      	str	r1, [sp, #12]
 8011ee4:	f107 010c 	add.w	r1, r7, #12
 8011ee8:	9102      	str	r1, [sp, #8]
 8011eea:	9201      	str	r2, [sp, #4]
 8011eec:	9300      	str	r3, [sp, #0]
 8011eee:	462b      	mov	r3, r5
 8011ef0:	4622      	mov	r2, r4
 8011ef2:	4601      	mov	r1, r0
 8011ef4:	6838      	ldr	r0, [r7, #0]
 8011ef6:	f000 faef 	bl	80124d8 <etharp_raw>
      break;
 8011efa:	e006      	b.n	8011f0a <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8011efc:	f107 030c 	add.w	r3, r7, #12
 8011f00:	4619      	mov	r1, r3
 8011f02:	6838      	ldr	r0, [r7, #0]
 8011f04:	f7fe f9fc 	bl	8010300 <dhcp_arp_reply>
      break;
 8011f08:	e000      	b.n	8011f0c <etharp_input+0x104>
      break;
 8011f0a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	f7f7 fbbf 	bl	8009690 <pbuf_free>
}
 8011f12:	3718      	adds	r7, #24
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bdb0      	pop	{r4, r5, r7, pc}
 8011f18:	08017ab4 	.word	0x08017ab4
 8011f1c:	08017c04 	.word	0x08017c04
 8011f20:	08017b2c 	.word	0x08017b2c

08011f24 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b086      	sub	sp, #24
 8011f28:	af02      	add	r7, sp, #8
 8011f2a:	60f8      	str	r0, [r7, #12]
 8011f2c:	60b9      	str	r1, [r7, #8]
 8011f2e:	4613      	mov	r3, r2
 8011f30:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011f32:	79fa      	ldrb	r2, [r7, #7]
 8011f34:	4944      	ldr	r1, [pc, #272]	; (8012048 <etharp_output_to_arp_index+0x124>)
 8011f36:	4613      	mov	r3, r2
 8011f38:	005b      	lsls	r3, r3, #1
 8011f3a:	4413      	add	r3, r2
 8011f3c:	00db      	lsls	r3, r3, #3
 8011f3e:	440b      	add	r3, r1
 8011f40:	3314      	adds	r3, #20
 8011f42:	781b      	ldrb	r3, [r3, #0]
 8011f44:	2b01      	cmp	r3, #1
 8011f46:	d806      	bhi.n	8011f56 <etharp_output_to_arp_index+0x32>
 8011f48:	4b40      	ldr	r3, [pc, #256]	; (801204c <etharp_output_to_arp_index+0x128>)
 8011f4a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011f4e:	4940      	ldr	r1, [pc, #256]	; (8012050 <etharp_output_to_arp_index+0x12c>)
 8011f50:	4840      	ldr	r0, [pc, #256]	; (8012054 <etharp_output_to_arp_index+0x130>)
 8011f52:	f001 ff7d 	bl	8013e50 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011f56:	79fa      	ldrb	r2, [r7, #7]
 8011f58:	493b      	ldr	r1, [pc, #236]	; (8012048 <etharp_output_to_arp_index+0x124>)
 8011f5a:	4613      	mov	r3, r2
 8011f5c:	005b      	lsls	r3, r3, #1
 8011f5e:	4413      	add	r3, r2
 8011f60:	00db      	lsls	r3, r3, #3
 8011f62:	440b      	add	r3, r1
 8011f64:	3314      	adds	r3, #20
 8011f66:	781b      	ldrb	r3, [r3, #0]
 8011f68:	2b02      	cmp	r3, #2
 8011f6a:	d153      	bne.n	8012014 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011f6c:	79fa      	ldrb	r2, [r7, #7]
 8011f6e:	4936      	ldr	r1, [pc, #216]	; (8012048 <etharp_output_to_arp_index+0x124>)
 8011f70:	4613      	mov	r3, r2
 8011f72:	005b      	lsls	r3, r3, #1
 8011f74:	4413      	add	r3, r2
 8011f76:	00db      	lsls	r3, r3, #3
 8011f78:	440b      	add	r3, r1
 8011f7a:	3312      	adds	r3, #18
 8011f7c:	881b      	ldrh	r3, [r3, #0]
 8011f7e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011f82:	d919      	bls.n	8011fb8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011f84:	79fa      	ldrb	r2, [r7, #7]
 8011f86:	4613      	mov	r3, r2
 8011f88:	005b      	lsls	r3, r3, #1
 8011f8a:	4413      	add	r3, r2
 8011f8c:	00db      	lsls	r3, r3, #3
 8011f8e:	4a2e      	ldr	r2, [pc, #184]	; (8012048 <etharp_output_to_arp_index+0x124>)
 8011f90:	4413      	add	r3, r2
 8011f92:	3304      	adds	r3, #4
 8011f94:	4619      	mov	r1, r3
 8011f96:	68f8      	ldr	r0, [r7, #12]
 8011f98:	f000 fb4c 	bl	8012634 <etharp_request>
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d138      	bne.n	8012014 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011fa2:	79fa      	ldrb	r2, [r7, #7]
 8011fa4:	4928      	ldr	r1, [pc, #160]	; (8012048 <etharp_output_to_arp_index+0x124>)
 8011fa6:	4613      	mov	r3, r2
 8011fa8:	005b      	lsls	r3, r3, #1
 8011faa:	4413      	add	r3, r2
 8011fac:	00db      	lsls	r3, r3, #3
 8011fae:	440b      	add	r3, r1
 8011fb0:	3314      	adds	r3, #20
 8011fb2:	2203      	movs	r2, #3
 8011fb4:	701a      	strb	r2, [r3, #0]
 8011fb6:	e02d      	b.n	8012014 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011fb8:	79fa      	ldrb	r2, [r7, #7]
 8011fba:	4923      	ldr	r1, [pc, #140]	; (8012048 <etharp_output_to_arp_index+0x124>)
 8011fbc:	4613      	mov	r3, r2
 8011fbe:	005b      	lsls	r3, r3, #1
 8011fc0:	4413      	add	r3, r2
 8011fc2:	00db      	lsls	r3, r3, #3
 8011fc4:	440b      	add	r3, r1
 8011fc6:	3312      	adds	r3, #18
 8011fc8:	881b      	ldrh	r3, [r3, #0]
 8011fca:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011fce:	d321      	bcc.n	8012014 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011fd0:	79fa      	ldrb	r2, [r7, #7]
 8011fd2:	4613      	mov	r3, r2
 8011fd4:	005b      	lsls	r3, r3, #1
 8011fd6:	4413      	add	r3, r2
 8011fd8:	00db      	lsls	r3, r3, #3
 8011fda:	4a1b      	ldr	r2, [pc, #108]	; (8012048 <etharp_output_to_arp_index+0x124>)
 8011fdc:	4413      	add	r3, r2
 8011fde:	1d19      	adds	r1, r3, #4
 8011fe0:	79fa      	ldrb	r2, [r7, #7]
 8011fe2:	4613      	mov	r3, r2
 8011fe4:	005b      	lsls	r3, r3, #1
 8011fe6:	4413      	add	r3, r2
 8011fe8:	00db      	lsls	r3, r3, #3
 8011fea:	3308      	adds	r3, #8
 8011fec:	4a16      	ldr	r2, [pc, #88]	; (8012048 <etharp_output_to_arp_index+0x124>)
 8011fee:	4413      	add	r3, r2
 8011ff0:	3304      	adds	r3, #4
 8011ff2:	461a      	mov	r2, r3
 8011ff4:	68f8      	ldr	r0, [r7, #12]
 8011ff6:	f000 fafb 	bl	80125f0 <etharp_request_dst>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d109      	bne.n	8012014 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012000:	79fa      	ldrb	r2, [r7, #7]
 8012002:	4911      	ldr	r1, [pc, #68]	; (8012048 <etharp_output_to_arp_index+0x124>)
 8012004:	4613      	mov	r3, r2
 8012006:	005b      	lsls	r3, r3, #1
 8012008:	4413      	add	r3, r2
 801200a:	00db      	lsls	r3, r3, #3
 801200c:	440b      	add	r3, r1
 801200e:	3314      	adds	r3, #20
 8012010:	2203      	movs	r2, #3
 8012012:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801201a:	79fa      	ldrb	r2, [r7, #7]
 801201c:	4613      	mov	r3, r2
 801201e:	005b      	lsls	r3, r3, #1
 8012020:	4413      	add	r3, r2
 8012022:	00db      	lsls	r3, r3, #3
 8012024:	3308      	adds	r3, #8
 8012026:	4a08      	ldr	r2, [pc, #32]	; (8012048 <etharp_output_to_arp_index+0x124>)
 8012028:	4413      	add	r3, r2
 801202a:	3304      	adds	r3, #4
 801202c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012030:	9200      	str	r2, [sp, #0]
 8012032:	460a      	mov	r2, r1
 8012034:	68b9      	ldr	r1, [r7, #8]
 8012036:	68f8      	ldr	r0, [r7, #12]
 8012038:	f001 fe5e 	bl	8013cf8 <ethernet_output>
 801203c:	4603      	mov	r3, r0
}
 801203e:	4618      	mov	r0, r3
 8012040:	3710      	adds	r7, #16
 8012042:	46bd      	mov	sp, r7
 8012044:	bd80      	pop	{r7, pc}
 8012046:	bf00      	nop
 8012048:	2000af54 	.word	0x2000af54
 801204c:	08017ab4 	.word	0x08017ab4
 8012050:	08017c24 	.word	0x08017c24
 8012054:	08017b2c 	.word	0x08017b2c

08012058 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b08a      	sub	sp, #40	; 0x28
 801205c:	af02      	add	r7, sp, #8
 801205e:	60f8      	str	r0, [r7, #12]
 8012060:	60b9      	str	r1, [r7, #8]
 8012062:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d106      	bne.n	801207c <etharp_output+0x24>
 801206e:	4b73      	ldr	r3, [pc, #460]	; (801223c <etharp_output+0x1e4>)
 8012070:	f240 321e 	movw	r2, #798	; 0x31e
 8012074:	4972      	ldr	r1, [pc, #456]	; (8012240 <etharp_output+0x1e8>)
 8012076:	4873      	ldr	r0, [pc, #460]	; (8012244 <etharp_output+0x1ec>)
 8012078:	f001 feea 	bl	8013e50 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801207c:	68bb      	ldr	r3, [r7, #8]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d106      	bne.n	8012090 <etharp_output+0x38>
 8012082:	4b6e      	ldr	r3, [pc, #440]	; (801223c <etharp_output+0x1e4>)
 8012084:	f240 321f 	movw	r2, #799	; 0x31f
 8012088:	496f      	ldr	r1, [pc, #444]	; (8012248 <etharp_output+0x1f0>)
 801208a:	486e      	ldr	r0, [pc, #440]	; (8012244 <etharp_output+0x1ec>)
 801208c:	f001 fee0 	bl	8013e50 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d106      	bne.n	80120a4 <etharp_output+0x4c>
 8012096:	4b69      	ldr	r3, [pc, #420]	; (801223c <etharp_output+0x1e4>)
 8012098:	f44f 7248 	mov.w	r2, #800	; 0x320
 801209c:	496b      	ldr	r1, [pc, #428]	; (801224c <etharp_output+0x1f4>)
 801209e:	4869      	ldr	r0, [pc, #420]	; (8012244 <etharp_output+0x1ec>)
 80120a0:	f001 fed6 	bl	8013e50 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	68f9      	ldr	r1, [r7, #12]
 80120aa:	4618      	mov	r0, r3
 80120ac:	f000 ff16 	bl	8012edc <ip4_addr_isbroadcast_u32>
 80120b0:	4603      	mov	r3, r0
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d002      	beq.n	80120bc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80120b6:	4b66      	ldr	r3, [pc, #408]	; (8012250 <etharp_output+0x1f8>)
 80120b8:	61fb      	str	r3, [r7, #28]
 80120ba:	e0af      	b.n	801221c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80120c4:	2be0      	cmp	r3, #224	; 0xe0
 80120c6:	d118      	bne.n	80120fa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80120c8:	2301      	movs	r3, #1
 80120ca:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80120cc:	2300      	movs	r3, #0
 80120ce:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80120d0:	235e      	movs	r3, #94	; 0x5e
 80120d2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	3301      	adds	r3, #1
 80120d8:	781b      	ldrb	r3, [r3, #0]
 80120da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80120de:	b2db      	uxtb	r3, r3
 80120e0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	3302      	adds	r3, #2
 80120e6:	781b      	ldrb	r3, [r3, #0]
 80120e8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	3303      	adds	r3, #3
 80120ee:	781b      	ldrb	r3, [r3, #0]
 80120f0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80120f2:	f107 0310 	add.w	r3, r7, #16
 80120f6:	61fb      	str	r3, [r7, #28]
 80120f8:	e090      	b.n	801221c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	681a      	ldr	r2, [r3, #0]
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	3304      	adds	r3, #4
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	405a      	eors	r2, r3
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	3308      	adds	r3, #8
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	4013      	ands	r3, r2
 801210e:	2b00      	cmp	r3, #0
 8012110:	d012      	beq.n	8012138 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012118:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801211c:	4293      	cmp	r3, r2
 801211e:	d00b      	beq.n	8012138 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	330c      	adds	r3, #12
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d003      	beq.n	8012132 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	330c      	adds	r3, #12
 801212e:	61bb      	str	r3, [r7, #24]
 8012130:	e002      	b.n	8012138 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012132:	f06f 0303 	mvn.w	r3, #3
 8012136:	e07d      	b.n	8012234 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012138:	4b46      	ldr	r3, [pc, #280]	; (8012254 <etharp_output+0x1fc>)
 801213a:	781b      	ldrb	r3, [r3, #0]
 801213c:	4619      	mov	r1, r3
 801213e:	4a46      	ldr	r2, [pc, #280]	; (8012258 <etharp_output+0x200>)
 8012140:	460b      	mov	r3, r1
 8012142:	005b      	lsls	r3, r3, #1
 8012144:	440b      	add	r3, r1
 8012146:	00db      	lsls	r3, r3, #3
 8012148:	4413      	add	r3, r2
 801214a:	3314      	adds	r3, #20
 801214c:	781b      	ldrb	r3, [r3, #0]
 801214e:	2b01      	cmp	r3, #1
 8012150:	d925      	bls.n	801219e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012152:	4b40      	ldr	r3, [pc, #256]	; (8012254 <etharp_output+0x1fc>)
 8012154:	781b      	ldrb	r3, [r3, #0]
 8012156:	4619      	mov	r1, r3
 8012158:	4a3f      	ldr	r2, [pc, #252]	; (8012258 <etharp_output+0x200>)
 801215a:	460b      	mov	r3, r1
 801215c:	005b      	lsls	r3, r3, #1
 801215e:	440b      	add	r3, r1
 8012160:	00db      	lsls	r3, r3, #3
 8012162:	4413      	add	r3, r2
 8012164:	3308      	adds	r3, #8
 8012166:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012168:	68fa      	ldr	r2, [r7, #12]
 801216a:	429a      	cmp	r2, r3
 801216c:	d117      	bne.n	801219e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801216e:	69bb      	ldr	r3, [r7, #24]
 8012170:	681a      	ldr	r2, [r3, #0]
 8012172:	4b38      	ldr	r3, [pc, #224]	; (8012254 <etharp_output+0x1fc>)
 8012174:	781b      	ldrb	r3, [r3, #0]
 8012176:	4618      	mov	r0, r3
 8012178:	4937      	ldr	r1, [pc, #220]	; (8012258 <etharp_output+0x200>)
 801217a:	4603      	mov	r3, r0
 801217c:	005b      	lsls	r3, r3, #1
 801217e:	4403      	add	r3, r0
 8012180:	00db      	lsls	r3, r3, #3
 8012182:	440b      	add	r3, r1
 8012184:	3304      	adds	r3, #4
 8012186:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012188:	429a      	cmp	r2, r3
 801218a:	d108      	bne.n	801219e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801218c:	4b31      	ldr	r3, [pc, #196]	; (8012254 <etharp_output+0x1fc>)
 801218e:	781b      	ldrb	r3, [r3, #0]
 8012190:	461a      	mov	r2, r3
 8012192:	68b9      	ldr	r1, [r7, #8]
 8012194:	68f8      	ldr	r0, [r7, #12]
 8012196:	f7ff fec5 	bl	8011f24 <etharp_output_to_arp_index>
 801219a:	4603      	mov	r3, r0
 801219c:	e04a      	b.n	8012234 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801219e:	2300      	movs	r3, #0
 80121a0:	75fb      	strb	r3, [r7, #23]
 80121a2:	e031      	b.n	8012208 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80121a4:	7dfa      	ldrb	r2, [r7, #23]
 80121a6:	492c      	ldr	r1, [pc, #176]	; (8012258 <etharp_output+0x200>)
 80121a8:	4613      	mov	r3, r2
 80121aa:	005b      	lsls	r3, r3, #1
 80121ac:	4413      	add	r3, r2
 80121ae:	00db      	lsls	r3, r3, #3
 80121b0:	440b      	add	r3, r1
 80121b2:	3314      	adds	r3, #20
 80121b4:	781b      	ldrb	r3, [r3, #0]
 80121b6:	2b01      	cmp	r3, #1
 80121b8:	d923      	bls.n	8012202 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80121ba:	7dfa      	ldrb	r2, [r7, #23]
 80121bc:	4926      	ldr	r1, [pc, #152]	; (8012258 <etharp_output+0x200>)
 80121be:	4613      	mov	r3, r2
 80121c0:	005b      	lsls	r3, r3, #1
 80121c2:	4413      	add	r3, r2
 80121c4:	00db      	lsls	r3, r3, #3
 80121c6:	440b      	add	r3, r1
 80121c8:	3308      	adds	r3, #8
 80121ca:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80121cc:	68fa      	ldr	r2, [r7, #12]
 80121ce:	429a      	cmp	r2, r3
 80121d0:	d117      	bne.n	8012202 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80121d2:	69bb      	ldr	r3, [r7, #24]
 80121d4:	6819      	ldr	r1, [r3, #0]
 80121d6:	7dfa      	ldrb	r2, [r7, #23]
 80121d8:	481f      	ldr	r0, [pc, #124]	; (8012258 <etharp_output+0x200>)
 80121da:	4613      	mov	r3, r2
 80121dc:	005b      	lsls	r3, r3, #1
 80121de:	4413      	add	r3, r2
 80121e0:	00db      	lsls	r3, r3, #3
 80121e2:	4403      	add	r3, r0
 80121e4:	3304      	adds	r3, #4
 80121e6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80121e8:	4299      	cmp	r1, r3
 80121ea:	d10a      	bne.n	8012202 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80121ec:	4a19      	ldr	r2, [pc, #100]	; (8012254 <etharp_output+0x1fc>)
 80121ee:	7dfb      	ldrb	r3, [r7, #23]
 80121f0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80121f2:	7dfb      	ldrb	r3, [r7, #23]
 80121f4:	461a      	mov	r2, r3
 80121f6:	68b9      	ldr	r1, [r7, #8]
 80121f8:	68f8      	ldr	r0, [r7, #12]
 80121fa:	f7ff fe93 	bl	8011f24 <etharp_output_to_arp_index>
 80121fe:	4603      	mov	r3, r0
 8012200:	e018      	b.n	8012234 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012202:	7dfb      	ldrb	r3, [r7, #23]
 8012204:	3301      	adds	r3, #1
 8012206:	75fb      	strb	r3, [r7, #23]
 8012208:	7dfb      	ldrb	r3, [r7, #23]
 801220a:	2b09      	cmp	r3, #9
 801220c:	d9ca      	bls.n	80121a4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801220e:	68ba      	ldr	r2, [r7, #8]
 8012210:	69b9      	ldr	r1, [r7, #24]
 8012212:	68f8      	ldr	r0, [r7, #12]
 8012214:	f000 f822 	bl	801225c <etharp_query>
 8012218:	4603      	mov	r3, r0
 801221a:	e00b      	b.n	8012234 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8012222:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012226:	9300      	str	r3, [sp, #0]
 8012228:	69fb      	ldr	r3, [r7, #28]
 801222a:	68b9      	ldr	r1, [r7, #8]
 801222c:	68f8      	ldr	r0, [r7, #12]
 801222e:	f001 fd63 	bl	8013cf8 <ethernet_output>
 8012232:	4603      	mov	r3, r0
}
 8012234:	4618      	mov	r0, r3
 8012236:	3720      	adds	r7, #32
 8012238:	46bd      	mov	sp, r7
 801223a:	bd80      	pop	{r7, pc}
 801223c:	08017ab4 	.word	0x08017ab4
 8012240:	08017c04 	.word	0x08017c04
 8012244:	08017b2c 	.word	0x08017b2c
 8012248:	08017c54 	.word	0x08017c54
 801224c:	08017bf4 	.word	0x08017bf4
 8012250:	0801a7ac 	.word	0x0801a7ac
 8012254:	2000b044 	.word	0x2000b044
 8012258:	2000af54 	.word	0x2000af54

0801225c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b08c      	sub	sp, #48	; 0x30
 8012260:	af02      	add	r7, sp, #8
 8012262:	60f8      	str	r0, [r7, #12]
 8012264:	60b9      	str	r1, [r7, #8]
 8012266:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	332a      	adds	r3, #42	; 0x2a
 801226c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801226e:	23ff      	movs	r3, #255	; 0xff
 8012270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012274:	2300      	movs	r3, #0
 8012276:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012278:	68bb      	ldr	r3, [r7, #8]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	68f9      	ldr	r1, [r7, #12]
 801227e:	4618      	mov	r0, r3
 8012280:	f000 fe2c 	bl	8012edc <ip4_addr_isbroadcast_u32>
 8012284:	4603      	mov	r3, r0
 8012286:	2b00      	cmp	r3, #0
 8012288:	d10c      	bne.n	80122a4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801228a:	68bb      	ldr	r3, [r7, #8]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012292:	2be0      	cmp	r3, #224	; 0xe0
 8012294:	d006      	beq.n	80122a4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012296:	68bb      	ldr	r3, [r7, #8]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d003      	beq.n	80122a4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801229c:	68bb      	ldr	r3, [r7, #8]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d102      	bne.n	80122aa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80122a4:	f06f 030f 	mvn.w	r3, #15
 80122a8:	e101      	b.n	80124ae <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80122aa:	68fa      	ldr	r2, [r7, #12]
 80122ac:	2101      	movs	r1, #1
 80122ae:	68b8      	ldr	r0, [r7, #8]
 80122b0:	f7ff fb5c 	bl	801196c <etharp_find_entry>
 80122b4:	4603      	mov	r3, r0
 80122b6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80122b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	da02      	bge.n	80122c6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80122c0:	8a7b      	ldrh	r3, [r7, #18]
 80122c2:	b25b      	sxtb	r3, r3
 80122c4:	e0f3      	b.n	80124ae <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80122c6:	8a7b      	ldrh	r3, [r7, #18]
 80122c8:	2b7e      	cmp	r3, #126	; 0x7e
 80122ca:	d906      	bls.n	80122da <etharp_query+0x7e>
 80122cc:	4b7a      	ldr	r3, [pc, #488]	; (80124b8 <etharp_query+0x25c>)
 80122ce:	f240 32c1 	movw	r2, #961	; 0x3c1
 80122d2:	497a      	ldr	r1, [pc, #488]	; (80124bc <etharp_query+0x260>)
 80122d4:	487a      	ldr	r0, [pc, #488]	; (80124c0 <etharp_query+0x264>)
 80122d6:	f001 fdbb 	bl	8013e50 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80122da:	8a7b      	ldrh	r3, [r7, #18]
 80122dc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80122de:	7c7a      	ldrb	r2, [r7, #17]
 80122e0:	4978      	ldr	r1, [pc, #480]	; (80124c4 <etharp_query+0x268>)
 80122e2:	4613      	mov	r3, r2
 80122e4:	005b      	lsls	r3, r3, #1
 80122e6:	4413      	add	r3, r2
 80122e8:	00db      	lsls	r3, r3, #3
 80122ea:	440b      	add	r3, r1
 80122ec:	3314      	adds	r3, #20
 80122ee:	781b      	ldrb	r3, [r3, #0]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d115      	bne.n	8012320 <etharp_query+0xc4>
    is_new_entry = 1;
 80122f4:	2301      	movs	r3, #1
 80122f6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80122f8:	7c7a      	ldrb	r2, [r7, #17]
 80122fa:	4972      	ldr	r1, [pc, #456]	; (80124c4 <etharp_query+0x268>)
 80122fc:	4613      	mov	r3, r2
 80122fe:	005b      	lsls	r3, r3, #1
 8012300:	4413      	add	r3, r2
 8012302:	00db      	lsls	r3, r3, #3
 8012304:	440b      	add	r3, r1
 8012306:	3314      	adds	r3, #20
 8012308:	2201      	movs	r2, #1
 801230a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801230c:	7c7a      	ldrb	r2, [r7, #17]
 801230e:	496d      	ldr	r1, [pc, #436]	; (80124c4 <etharp_query+0x268>)
 8012310:	4613      	mov	r3, r2
 8012312:	005b      	lsls	r3, r3, #1
 8012314:	4413      	add	r3, r2
 8012316:	00db      	lsls	r3, r3, #3
 8012318:	440b      	add	r3, r1
 801231a:	3308      	adds	r3, #8
 801231c:	68fa      	ldr	r2, [r7, #12]
 801231e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012320:	7c7a      	ldrb	r2, [r7, #17]
 8012322:	4968      	ldr	r1, [pc, #416]	; (80124c4 <etharp_query+0x268>)
 8012324:	4613      	mov	r3, r2
 8012326:	005b      	lsls	r3, r3, #1
 8012328:	4413      	add	r3, r2
 801232a:	00db      	lsls	r3, r3, #3
 801232c:	440b      	add	r3, r1
 801232e:	3314      	adds	r3, #20
 8012330:	781b      	ldrb	r3, [r3, #0]
 8012332:	2b01      	cmp	r3, #1
 8012334:	d011      	beq.n	801235a <etharp_query+0xfe>
 8012336:	7c7a      	ldrb	r2, [r7, #17]
 8012338:	4962      	ldr	r1, [pc, #392]	; (80124c4 <etharp_query+0x268>)
 801233a:	4613      	mov	r3, r2
 801233c:	005b      	lsls	r3, r3, #1
 801233e:	4413      	add	r3, r2
 8012340:	00db      	lsls	r3, r3, #3
 8012342:	440b      	add	r3, r1
 8012344:	3314      	adds	r3, #20
 8012346:	781b      	ldrb	r3, [r3, #0]
 8012348:	2b01      	cmp	r3, #1
 801234a:	d806      	bhi.n	801235a <etharp_query+0xfe>
 801234c:	4b5a      	ldr	r3, [pc, #360]	; (80124b8 <etharp_query+0x25c>)
 801234e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8012352:	495d      	ldr	r1, [pc, #372]	; (80124c8 <etharp_query+0x26c>)
 8012354:	485a      	ldr	r0, [pc, #360]	; (80124c0 <etharp_query+0x264>)
 8012356:	f001 fd7b 	bl	8013e50 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801235a:	6a3b      	ldr	r3, [r7, #32]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d102      	bne.n	8012366 <etharp_query+0x10a>
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d10c      	bne.n	8012380 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012366:	68b9      	ldr	r1, [r7, #8]
 8012368:	68f8      	ldr	r0, [r7, #12]
 801236a:	f000 f963 	bl	8012634 <etharp_request>
 801236e:	4603      	mov	r3, r0
 8012370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d102      	bne.n	8012380 <etharp_query+0x124>
      return result;
 801237a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801237e:	e096      	b.n	80124ae <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d106      	bne.n	8012394 <etharp_query+0x138>
 8012386:	4b4c      	ldr	r3, [pc, #304]	; (80124b8 <etharp_query+0x25c>)
 8012388:	f240 32e1 	movw	r2, #993	; 0x3e1
 801238c:	494f      	ldr	r1, [pc, #316]	; (80124cc <etharp_query+0x270>)
 801238e:	484c      	ldr	r0, [pc, #304]	; (80124c0 <etharp_query+0x264>)
 8012390:	f001 fd5e 	bl	8013e50 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012394:	7c7a      	ldrb	r2, [r7, #17]
 8012396:	494b      	ldr	r1, [pc, #300]	; (80124c4 <etharp_query+0x268>)
 8012398:	4613      	mov	r3, r2
 801239a:	005b      	lsls	r3, r3, #1
 801239c:	4413      	add	r3, r2
 801239e:	00db      	lsls	r3, r3, #3
 80123a0:	440b      	add	r3, r1
 80123a2:	3314      	adds	r3, #20
 80123a4:	781b      	ldrb	r3, [r3, #0]
 80123a6:	2b01      	cmp	r3, #1
 80123a8:	d917      	bls.n	80123da <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80123aa:	4a49      	ldr	r2, [pc, #292]	; (80124d0 <etharp_query+0x274>)
 80123ac:	7c7b      	ldrb	r3, [r7, #17]
 80123ae:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80123b0:	7c7a      	ldrb	r2, [r7, #17]
 80123b2:	4613      	mov	r3, r2
 80123b4:	005b      	lsls	r3, r3, #1
 80123b6:	4413      	add	r3, r2
 80123b8:	00db      	lsls	r3, r3, #3
 80123ba:	3308      	adds	r3, #8
 80123bc:	4a41      	ldr	r2, [pc, #260]	; (80124c4 <etharp_query+0x268>)
 80123be:	4413      	add	r3, r2
 80123c0:	3304      	adds	r3, #4
 80123c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80123c6:	9200      	str	r2, [sp, #0]
 80123c8:	697a      	ldr	r2, [r7, #20]
 80123ca:	6879      	ldr	r1, [r7, #4]
 80123cc:	68f8      	ldr	r0, [r7, #12]
 80123ce:	f001 fc93 	bl	8013cf8 <ethernet_output>
 80123d2:	4603      	mov	r3, r0
 80123d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80123d8:	e067      	b.n	80124aa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80123da:	7c7a      	ldrb	r2, [r7, #17]
 80123dc:	4939      	ldr	r1, [pc, #228]	; (80124c4 <etharp_query+0x268>)
 80123de:	4613      	mov	r3, r2
 80123e0:	005b      	lsls	r3, r3, #1
 80123e2:	4413      	add	r3, r2
 80123e4:	00db      	lsls	r3, r3, #3
 80123e6:	440b      	add	r3, r1
 80123e8:	3314      	adds	r3, #20
 80123ea:	781b      	ldrb	r3, [r3, #0]
 80123ec:	2b01      	cmp	r3, #1
 80123ee:	d15c      	bne.n	80124aa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80123f0:	2300      	movs	r3, #0
 80123f2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80123f8:	e01c      	b.n	8012434 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80123fa:	69fb      	ldr	r3, [r7, #28]
 80123fc:	895a      	ldrh	r2, [r3, #10]
 80123fe:	69fb      	ldr	r3, [r7, #28]
 8012400:	891b      	ldrh	r3, [r3, #8]
 8012402:	429a      	cmp	r2, r3
 8012404:	d10a      	bne.n	801241c <etharp_query+0x1c0>
 8012406:	69fb      	ldr	r3, [r7, #28]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d006      	beq.n	801241c <etharp_query+0x1c0>
 801240e:	4b2a      	ldr	r3, [pc, #168]	; (80124b8 <etharp_query+0x25c>)
 8012410:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012414:	492f      	ldr	r1, [pc, #188]	; (80124d4 <etharp_query+0x278>)
 8012416:	482a      	ldr	r0, [pc, #168]	; (80124c0 <etharp_query+0x264>)
 8012418:	f001 fd1a 	bl	8013e50 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801241c:	69fb      	ldr	r3, [r7, #28]
 801241e:	7b1b      	ldrb	r3, [r3, #12]
 8012420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012424:	2b00      	cmp	r3, #0
 8012426:	d002      	beq.n	801242e <etharp_query+0x1d2>
        copy_needed = 1;
 8012428:	2301      	movs	r3, #1
 801242a:	61bb      	str	r3, [r7, #24]
        break;
 801242c:	e005      	b.n	801243a <etharp_query+0x1de>
      }
      p = p->next;
 801242e:	69fb      	ldr	r3, [r7, #28]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012434:	69fb      	ldr	r3, [r7, #28]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d1df      	bne.n	80123fa <etharp_query+0x19e>
    }
    if (copy_needed) {
 801243a:	69bb      	ldr	r3, [r7, #24]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d007      	beq.n	8012450 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012440:	687a      	ldr	r2, [r7, #4]
 8012442:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012446:	200e      	movs	r0, #14
 8012448:	f7f7 fb8e 	bl	8009b68 <pbuf_clone>
 801244c:	61f8      	str	r0, [r7, #28]
 801244e:	e004      	b.n	801245a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012454:	69f8      	ldr	r0, [r7, #28]
 8012456:	f7f7 f9bb 	bl	80097d0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801245a:	69fb      	ldr	r3, [r7, #28]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d021      	beq.n	80124a4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012460:	7c7a      	ldrb	r2, [r7, #17]
 8012462:	4918      	ldr	r1, [pc, #96]	; (80124c4 <etharp_query+0x268>)
 8012464:	4613      	mov	r3, r2
 8012466:	005b      	lsls	r3, r3, #1
 8012468:	4413      	add	r3, r2
 801246a:	00db      	lsls	r3, r3, #3
 801246c:	440b      	add	r3, r1
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d00a      	beq.n	801248a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012474:	7c7a      	ldrb	r2, [r7, #17]
 8012476:	4913      	ldr	r1, [pc, #76]	; (80124c4 <etharp_query+0x268>)
 8012478:	4613      	mov	r3, r2
 801247a:	005b      	lsls	r3, r3, #1
 801247c:	4413      	add	r3, r2
 801247e:	00db      	lsls	r3, r3, #3
 8012480:	440b      	add	r3, r1
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	4618      	mov	r0, r3
 8012486:	f7f7 f903 	bl	8009690 <pbuf_free>
      }
      arp_table[i].q = p;
 801248a:	7c7a      	ldrb	r2, [r7, #17]
 801248c:	490d      	ldr	r1, [pc, #52]	; (80124c4 <etharp_query+0x268>)
 801248e:	4613      	mov	r3, r2
 8012490:	005b      	lsls	r3, r3, #1
 8012492:	4413      	add	r3, r2
 8012494:	00db      	lsls	r3, r3, #3
 8012496:	440b      	add	r3, r1
 8012498:	69fa      	ldr	r2, [r7, #28]
 801249a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801249c:	2300      	movs	r3, #0
 801249e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80124a2:	e002      	b.n	80124aa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80124a4:	23ff      	movs	r3, #255	; 0xff
 80124a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80124aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80124ae:	4618      	mov	r0, r3
 80124b0:	3728      	adds	r7, #40	; 0x28
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd80      	pop	{r7, pc}
 80124b6:	bf00      	nop
 80124b8:	08017ab4 	.word	0x08017ab4
 80124bc:	08017c60 	.word	0x08017c60
 80124c0:	08017b2c 	.word	0x08017b2c
 80124c4:	2000af54 	.word	0x2000af54
 80124c8:	08017c70 	.word	0x08017c70
 80124cc:	08017c54 	.word	0x08017c54
 80124d0:	2000b044 	.word	0x2000b044
 80124d4:	08017c98 	.word	0x08017c98

080124d8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b08a      	sub	sp, #40	; 0x28
 80124dc:	af02      	add	r7, sp, #8
 80124de:	60f8      	str	r0, [r7, #12]
 80124e0:	60b9      	str	r1, [r7, #8]
 80124e2:	607a      	str	r2, [r7, #4]
 80124e4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80124e6:	2300      	movs	r3, #0
 80124e8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d106      	bne.n	80124fe <etharp_raw+0x26>
 80124f0:	4b3a      	ldr	r3, [pc, #232]	; (80125dc <etharp_raw+0x104>)
 80124f2:	f240 4257 	movw	r2, #1111	; 0x457
 80124f6:	493a      	ldr	r1, [pc, #232]	; (80125e0 <etharp_raw+0x108>)
 80124f8:	483a      	ldr	r0, [pc, #232]	; (80125e4 <etharp_raw+0x10c>)
 80124fa:	f001 fca9 	bl	8013e50 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80124fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012502:	211c      	movs	r1, #28
 8012504:	200e      	movs	r0, #14
 8012506:	f7f6 fddf 	bl	80090c8 <pbuf_alloc>
 801250a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801250c:	69bb      	ldr	r3, [r7, #24]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d102      	bne.n	8012518 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012512:	f04f 33ff 	mov.w	r3, #4294967295
 8012516:	e05d      	b.n	80125d4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012518:	69bb      	ldr	r3, [r7, #24]
 801251a:	895b      	ldrh	r3, [r3, #10]
 801251c:	2b1b      	cmp	r3, #27
 801251e:	d806      	bhi.n	801252e <etharp_raw+0x56>
 8012520:	4b2e      	ldr	r3, [pc, #184]	; (80125dc <etharp_raw+0x104>)
 8012522:	f240 4262 	movw	r2, #1122	; 0x462
 8012526:	4930      	ldr	r1, [pc, #192]	; (80125e8 <etharp_raw+0x110>)
 8012528:	482e      	ldr	r0, [pc, #184]	; (80125e4 <etharp_raw+0x10c>)
 801252a:	f001 fc91 	bl	8013e50 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801252e:	69bb      	ldr	r3, [r7, #24]
 8012530:	685b      	ldr	r3, [r3, #4]
 8012532:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012534:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012536:	4618      	mov	r0, r3
 8012538:	f7f5 fd40 	bl	8007fbc <lwip_htons>
 801253c:	4603      	mov	r3, r0
 801253e:	461a      	mov	r2, r3
 8012540:	697b      	ldr	r3, [r7, #20]
 8012542:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801254a:	2b06      	cmp	r3, #6
 801254c:	d006      	beq.n	801255c <etharp_raw+0x84>
 801254e:	4b23      	ldr	r3, [pc, #140]	; (80125dc <etharp_raw+0x104>)
 8012550:	f240 4269 	movw	r2, #1129	; 0x469
 8012554:	4925      	ldr	r1, [pc, #148]	; (80125ec <etharp_raw+0x114>)
 8012556:	4823      	ldr	r0, [pc, #140]	; (80125e4 <etharp_raw+0x10c>)
 8012558:	f001 fc7a 	bl	8013e50 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801255c:	697b      	ldr	r3, [r7, #20]
 801255e:	3308      	adds	r3, #8
 8012560:	2206      	movs	r2, #6
 8012562:	6839      	ldr	r1, [r7, #0]
 8012564:	4618      	mov	r0, r3
 8012566:	f001 fc43 	bl	8013df0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801256a:	697b      	ldr	r3, [r7, #20]
 801256c:	3312      	adds	r3, #18
 801256e:	2206      	movs	r2, #6
 8012570:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012572:	4618      	mov	r0, r3
 8012574:	f001 fc3c 	bl	8013df0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012578:	697b      	ldr	r3, [r7, #20]
 801257a:	330e      	adds	r3, #14
 801257c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801257e:	6812      	ldr	r2, [r2, #0]
 8012580:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012582:	697b      	ldr	r3, [r7, #20]
 8012584:	3318      	adds	r3, #24
 8012586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012588:	6812      	ldr	r2, [r2, #0]
 801258a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801258c:	697b      	ldr	r3, [r7, #20]
 801258e:	2200      	movs	r2, #0
 8012590:	701a      	strb	r2, [r3, #0]
 8012592:	2200      	movs	r2, #0
 8012594:	f042 0201 	orr.w	r2, r2, #1
 8012598:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801259a:	697b      	ldr	r3, [r7, #20]
 801259c:	2200      	movs	r2, #0
 801259e:	f042 0208 	orr.w	r2, r2, #8
 80125a2:	709a      	strb	r2, [r3, #2]
 80125a4:	2200      	movs	r2, #0
 80125a6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80125a8:	697b      	ldr	r3, [r7, #20]
 80125aa:	2206      	movs	r2, #6
 80125ac:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80125ae:	697b      	ldr	r3, [r7, #20]
 80125b0:	2204      	movs	r2, #4
 80125b2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80125b4:	f640 0306 	movw	r3, #2054	; 0x806
 80125b8:	9300      	str	r3, [sp, #0]
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	68ba      	ldr	r2, [r7, #8]
 80125be:	69b9      	ldr	r1, [r7, #24]
 80125c0:	68f8      	ldr	r0, [r7, #12]
 80125c2:	f001 fb99 	bl	8013cf8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80125c6:	69b8      	ldr	r0, [r7, #24]
 80125c8:	f7f7 f862 	bl	8009690 <pbuf_free>
  p = NULL;
 80125cc:	2300      	movs	r3, #0
 80125ce:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80125d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80125d4:	4618      	mov	r0, r3
 80125d6:	3720      	adds	r7, #32
 80125d8:	46bd      	mov	sp, r7
 80125da:	bd80      	pop	{r7, pc}
 80125dc:	08017ab4 	.word	0x08017ab4
 80125e0:	08017c04 	.word	0x08017c04
 80125e4:	08017b2c 	.word	0x08017b2c
 80125e8:	08017cb4 	.word	0x08017cb4
 80125ec:	08017ce8 	.word	0x08017ce8

080125f0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b088      	sub	sp, #32
 80125f4:	af04      	add	r7, sp, #16
 80125f6:	60f8      	str	r0, [r7, #12]
 80125f8:	60b9      	str	r1, [r7, #8]
 80125fa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801260c:	2201      	movs	r2, #1
 801260e:	9203      	str	r2, [sp, #12]
 8012610:	68ba      	ldr	r2, [r7, #8]
 8012612:	9202      	str	r2, [sp, #8]
 8012614:	4a06      	ldr	r2, [pc, #24]	; (8012630 <etharp_request_dst+0x40>)
 8012616:	9201      	str	r2, [sp, #4]
 8012618:	9300      	str	r3, [sp, #0]
 801261a:	4603      	mov	r3, r0
 801261c:	687a      	ldr	r2, [r7, #4]
 801261e:	68f8      	ldr	r0, [r7, #12]
 8012620:	f7ff ff5a 	bl	80124d8 <etharp_raw>
 8012624:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012626:	4618      	mov	r0, r3
 8012628:	3710      	adds	r7, #16
 801262a:	46bd      	mov	sp, r7
 801262c:	bd80      	pop	{r7, pc}
 801262e:	bf00      	nop
 8012630:	0801a7b4 	.word	0x0801a7b4

08012634 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b082      	sub	sp, #8
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801263e:	4a05      	ldr	r2, [pc, #20]	; (8012654 <etharp_request+0x20>)
 8012640:	6839      	ldr	r1, [r7, #0]
 8012642:	6878      	ldr	r0, [r7, #4]
 8012644:	f7ff ffd4 	bl	80125f0 <etharp_request_dst>
 8012648:	4603      	mov	r3, r0
}
 801264a:	4618      	mov	r0, r3
 801264c:	3708      	adds	r7, #8
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}
 8012652:	bf00      	nop
 8012654:	0801a7ac 	.word	0x0801a7ac

08012658 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012658:	b580      	push	{r7, lr}
 801265a:	b08e      	sub	sp, #56	; 0x38
 801265c:	af04      	add	r7, sp, #16
 801265e:	6078      	str	r0, [r7, #4]
 8012660:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012662:	4b79      	ldr	r3, [pc, #484]	; (8012848 <icmp_input+0x1f0>)
 8012664:	689b      	ldr	r3, [r3, #8]
 8012666:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801266a:	781b      	ldrb	r3, [r3, #0]
 801266c:	f003 030f 	and.w	r3, r3, #15
 8012670:	b2db      	uxtb	r3, r3
 8012672:	009b      	lsls	r3, r3, #2
 8012674:	b2db      	uxtb	r3, r3
 8012676:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012678:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801267a:	2b13      	cmp	r3, #19
 801267c:	f240 80cd 	bls.w	801281a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	895b      	ldrh	r3, [r3, #10]
 8012684:	2b03      	cmp	r3, #3
 8012686:	f240 80ca 	bls.w	801281e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	685b      	ldr	r3, [r3, #4]
 801268e:	781b      	ldrb	r3, [r3, #0]
 8012690:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012694:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012698:	2b00      	cmp	r3, #0
 801269a:	f000 80b7 	beq.w	801280c <icmp_input+0x1b4>
 801269e:	2b08      	cmp	r3, #8
 80126a0:	f040 80b7 	bne.w	8012812 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80126a4:	4b69      	ldr	r3, [pc, #420]	; (801284c <icmp_input+0x1f4>)
 80126a6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80126a8:	4b67      	ldr	r3, [pc, #412]	; (8012848 <icmp_input+0x1f0>)
 80126aa:	695b      	ldr	r3, [r3, #20]
 80126ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80126b0:	2be0      	cmp	r3, #224	; 0xe0
 80126b2:	f000 80bb 	beq.w	801282c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80126b6:	4b64      	ldr	r3, [pc, #400]	; (8012848 <icmp_input+0x1f0>)
 80126b8:	695b      	ldr	r3, [r3, #20]
 80126ba:	4a63      	ldr	r2, [pc, #396]	; (8012848 <icmp_input+0x1f0>)
 80126bc:	6812      	ldr	r2, [r2, #0]
 80126be:	4611      	mov	r1, r2
 80126c0:	4618      	mov	r0, r3
 80126c2:	f000 fc0b 	bl	8012edc <ip4_addr_isbroadcast_u32>
 80126c6:	4603      	mov	r3, r0
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	f040 80b1 	bne.w	8012830 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	891b      	ldrh	r3, [r3, #8]
 80126d2:	2b07      	cmp	r3, #7
 80126d4:	f240 80a5 	bls.w	8012822 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80126d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80126da:	330e      	adds	r3, #14
 80126dc:	4619      	mov	r1, r3
 80126de:	6878      	ldr	r0, [r7, #4]
 80126e0:	f7f6 ff40 	bl	8009564 <pbuf_add_header>
 80126e4:	4603      	mov	r3, r0
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d04b      	beq.n	8012782 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	891a      	ldrh	r2, [r3, #8]
 80126ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80126f0:	4413      	add	r3, r2
 80126f2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	891b      	ldrh	r3, [r3, #8]
 80126f8:	8b7a      	ldrh	r2, [r7, #26]
 80126fa:	429a      	cmp	r2, r3
 80126fc:	f0c0 809a 	bcc.w	8012834 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012700:	8b7b      	ldrh	r3, [r7, #26]
 8012702:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012706:	4619      	mov	r1, r3
 8012708:	200e      	movs	r0, #14
 801270a:	f7f6 fcdd 	bl	80090c8 <pbuf_alloc>
 801270e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012710:	697b      	ldr	r3, [r7, #20]
 8012712:	2b00      	cmp	r3, #0
 8012714:	f000 8090 	beq.w	8012838 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012718:	697b      	ldr	r3, [r7, #20]
 801271a:	895b      	ldrh	r3, [r3, #10]
 801271c:	461a      	mov	r2, r3
 801271e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012720:	3308      	adds	r3, #8
 8012722:	429a      	cmp	r2, r3
 8012724:	d203      	bcs.n	801272e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012726:	6978      	ldr	r0, [r7, #20]
 8012728:	f7f6 ffb2 	bl	8009690 <pbuf_free>
          goto icmperr;
 801272c:	e085      	b.n	801283a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801272e:	697b      	ldr	r3, [r7, #20]
 8012730:	685b      	ldr	r3, [r3, #4]
 8012732:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012734:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012736:	4618      	mov	r0, r3
 8012738:	f001 fb5a 	bl	8013df0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801273c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801273e:	4619      	mov	r1, r3
 8012740:	6978      	ldr	r0, [r7, #20]
 8012742:	f7f6 ff1f 	bl	8009584 <pbuf_remove_header>
 8012746:	4603      	mov	r3, r0
 8012748:	2b00      	cmp	r3, #0
 801274a:	d009      	beq.n	8012760 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801274c:	4b40      	ldr	r3, [pc, #256]	; (8012850 <icmp_input+0x1f8>)
 801274e:	22b6      	movs	r2, #182	; 0xb6
 8012750:	4940      	ldr	r1, [pc, #256]	; (8012854 <icmp_input+0x1fc>)
 8012752:	4841      	ldr	r0, [pc, #260]	; (8012858 <icmp_input+0x200>)
 8012754:	f001 fb7c 	bl	8013e50 <iprintf>
          pbuf_free(r);
 8012758:	6978      	ldr	r0, [r7, #20]
 801275a:	f7f6 ff99 	bl	8009690 <pbuf_free>
          goto icmperr;
 801275e:	e06c      	b.n	801283a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012760:	6879      	ldr	r1, [r7, #4]
 8012762:	6978      	ldr	r0, [r7, #20]
 8012764:	f7f7 f8bc 	bl	80098e0 <pbuf_copy>
 8012768:	4603      	mov	r3, r0
 801276a:	2b00      	cmp	r3, #0
 801276c:	d003      	beq.n	8012776 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801276e:	6978      	ldr	r0, [r7, #20]
 8012770:	f7f6 ff8e 	bl	8009690 <pbuf_free>
          goto icmperr;
 8012774:	e061      	b.n	801283a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8012776:	6878      	ldr	r0, [r7, #4]
 8012778:	f7f6 ff8a 	bl	8009690 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801277c:	697b      	ldr	r3, [r7, #20]
 801277e:	607b      	str	r3, [r7, #4]
 8012780:	e00f      	b.n	80127a2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012782:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012784:	330e      	adds	r3, #14
 8012786:	4619      	mov	r1, r3
 8012788:	6878      	ldr	r0, [r7, #4]
 801278a:	f7f6 fefb 	bl	8009584 <pbuf_remove_header>
 801278e:	4603      	mov	r3, r0
 8012790:	2b00      	cmp	r3, #0
 8012792:	d006      	beq.n	80127a2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012794:	4b2e      	ldr	r3, [pc, #184]	; (8012850 <icmp_input+0x1f8>)
 8012796:	22c7      	movs	r2, #199	; 0xc7
 8012798:	4930      	ldr	r1, [pc, #192]	; (801285c <icmp_input+0x204>)
 801279a:	482f      	ldr	r0, [pc, #188]	; (8012858 <icmp_input+0x200>)
 801279c:	f001 fb58 	bl	8013e50 <iprintf>
          goto icmperr;
 80127a0:	e04b      	b.n	801283a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	685b      	ldr	r3, [r3, #4]
 80127a6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80127a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80127aa:	4619      	mov	r1, r3
 80127ac:	6878      	ldr	r0, [r7, #4]
 80127ae:	f7f6 fed9 	bl	8009564 <pbuf_add_header>
 80127b2:	4603      	mov	r3, r0
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d12b      	bne.n	8012810 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	685b      	ldr	r3, [r3, #4]
 80127bc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80127be:	69fb      	ldr	r3, [r7, #28]
 80127c0:	681a      	ldr	r2, [r3, #0]
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80127c6:	4b20      	ldr	r3, [pc, #128]	; (8012848 <icmp_input+0x1f0>)
 80127c8:	691a      	ldr	r2, [r3, #16]
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80127ce:	693b      	ldr	r3, [r7, #16]
 80127d0:	2200      	movs	r2, #0
 80127d2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80127d4:	693b      	ldr	r3, [r7, #16]
 80127d6:	2200      	movs	r2, #0
 80127d8:	709a      	strb	r2, [r3, #2]
 80127da:	2200      	movs	r2, #0
 80127dc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	22ff      	movs	r2, #255	; 0xff
 80127e2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	2200      	movs	r2, #0
 80127e8:	729a      	strb	r2, [r3, #10]
 80127ea:	2200      	movs	r2, #0
 80127ec:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80127ee:	683b      	ldr	r3, [r7, #0]
 80127f0:	9302      	str	r3, [sp, #8]
 80127f2:	2301      	movs	r3, #1
 80127f4:	9301      	str	r3, [sp, #4]
 80127f6:	2300      	movs	r3, #0
 80127f8:	9300      	str	r3, [sp, #0]
 80127fa:	23ff      	movs	r3, #255	; 0xff
 80127fc:	2200      	movs	r2, #0
 80127fe:	69f9      	ldr	r1, [r7, #28]
 8012800:	6878      	ldr	r0, [r7, #4]
 8012802:	f000 fa93 	bl	8012d2c <ip4_output_if>
 8012806:	4603      	mov	r3, r0
 8012808:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801280a:	e001      	b.n	8012810 <icmp_input+0x1b8>
      break;
 801280c:	bf00      	nop
 801280e:	e000      	b.n	8012812 <icmp_input+0x1ba>
      break;
 8012810:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012812:	6878      	ldr	r0, [r7, #4]
 8012814:	f7f6 ff3c 	bl	8009690 <pbuf_free>
  return;
 8012818:	e013      	b.n	8012842 <icmp_input+0x1ea>
    goto lenerr;
 801281a:	bf00      	nop
 801281c:	e002      	b.n	8012824 <icmp_input+0x1cc>
    goto lenerr;
 801281e:	bf00      	nop
 8012820:	e000      	b.n	8012824 <icmp_input+0x1cc>
        goto lenerr;
 8012822:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012824:	6878      	ldr	r0, [r7, #4]
 8012826:	f7f6 ff33 	bl	8009690 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801282a:	e00a      	b.n	8012842 <icmp_input+0x1ea>
        goto icmperr;
 801282c:	bf00      	nop
 801282e:	e004      	b.n	801283a <icmp_input+0x1e2>
        goto icmperr;
 8012830:	bf00      	nop
 8012832:	e002      	b.n	801283a <icmp_input+0x1e2>
          goto icmperr;
 8012834:	bf00      	nop
 8012836:	e000      	b.n	801283a <icmp_input+0x1e2>
          goto icmperr;
 8012838:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801283a:	6878      	ldr	r0, [r7, #4]
 801283c:	f7f6 ff28 	bl	8009690 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012840:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012842:	3728      	adds	r7, #40	; 0x28
 8012844:	46bd      	mov	sp, r7
 8012846:	bd80      	pop	{r7, pc}
 8012848:	20005770 	.word	0x20005770
 801284c:	20005784 	.word	0x20005784
 8012850:	08017d2c 	.word	0x08017d2c
 8012854:	08017d64 	.word	0x08017d64
 8012858:	08017d9c 	.word	0x08017d9c
 801285c:	08017dc4 	.word	0x08017dc4

08012860 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012860:	b580      	push	{r7, lr}
 8012862:	b082      	sub	sp, #8
 8012864:	af00      	add	r7, sp, #0
 8012866:	6078      	str	r0, [r7, #4]
 8012868:	460b      	mov	r3, r1
 801286a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801286c:	78fb      	ldrb	r3, [r7, #3]
 801286e:	461a      	mov	r2, r3
 8012870:	2103      	movs	r1, #3
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f000 f814 	bl	80128a0 <icmp_send_response>
}
 8012878:	bf00      	nop
 801287a:	3708      	adds	r7, #8
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}

08012880 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b082      	sub	sp, #8
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
 8012888:	460b      	mov	r3, r1
 801288a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801288c:	78fb      	ldrb	r3, [r7, #3]
 801288e:	461a      	mov	r2, r3
 8012890:	210b      	movs	r1, #11
 8012892:	6878      	ldr	r0, [r7, #4]
 8012894:	f000 f804 	bl	80128a0 <icmp_send_response>
}
 8012898:	bf00      	nop
 801289a:	3708      	adds	r7, #8
 801289c:	46bd      	mov	sp, r7
 801289e:	bd80      	pop	{r7, pc}

080128a0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80128a0:	b580      	push	{r7, lr}
 80128a2:	b08c      	sub	sp, #48	; 0x30
 80128a4:	af04      	add	r7, sp, #16
 80128a6:	6078      	str	r0, [r7, #4]
 80128a8:	460b      	mov	r3, r1
 80128aa:	70fb      	strb	r3, [r7, #3]
 80128ac:	4613      	mov	r3, r2
 80128ae:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80128b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80128b4:	2124      	movs	r1, #36	; 0x24
 80128b6:	2022      	movs	r0, #34	; 0x22
 80128b8:	f7f6 fc06 	bl	80090c8 <pbuf_alloc>
 80128bc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80128be:	69fb      	ldr	r3, [r7, #28]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d04c      	beq.n	801295e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80128c4:	69fb      	ldr	r3, [r7, #28]
 80128c6:	895b      	ldrh	r3, [r3, #10]
 80128c8:	2b23      	cmp	r3, #35	; 0x23
 80128ca:	d806      	bhi.n	80128da <icmp_send_response+0x3a>
 80128cc:	4b26      	ldr	r3, [pc, #152]	; (8012968 <icmp_send_response+0xc8>)
 80128ce:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80128d2:	4926      	ldr	r1, [pc, #152]	; (801296c <icmp_send_response+0xcc>)
 80128d4:	4826      	ldr	r0, [pc, #152]	; (8012970 <icmp_send_response+0xd0>)
 80128d6:	f001 fabb 	bl	8013e50 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	685b      	ldr	r3, [r3, #4]
 80128de:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80128e0:	69fb      	ldr	r3, [r7, #28]
 80128e2:	685b      	ldr	r3, [r3, #4]
 80128e4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80128e6:	697b      	ldr	r3, [r7, #20]
 80128e8:	78fa      	ldrb	r2, [r7, #3]
 80128ea:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80128ec:	697b      	ldr	r3, [r7, #20]
 80128ee:	78ba      	ldrb	r2, [r7, #2]
 80128f0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80128f2:	697b      	ldr	r3, [r7, #20]
 80128f4:	2200      	movs	r2, #0
 80128f6:	711a      	strb	r2, [r3, #4]
 80128f8:	2200      	movs	r2, #0
 80128fa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80128fc:	697b      	ldr	r3, [r7, #20]
 80128fe:	2200      	movs	r2, #0
 8012900:	719a      	strb	r2, [r3, #6]
 8012902:	2200      	movs	r2, #0
 8012904:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012906:	69fb      	ldr	r3, [r7, #28]
 8012908:	685b      	ldr	r3, [r3, #4]
 801290a:	f103 0008 	add.w	r0, r3, #8
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	685b      	ldr	r3, [r3, #4]
 8012912:	221c      	movs	r2, #28
 8012914:	4619      	mov	r1, r3
 8012916:	f001 fa6b 	bl	8013df0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801291a:	69bb      	ldr	r3, [r7, #24]
 801291c:	68db      	ldr	r3, [r3, #12]
 801291e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012920:	f107 030c 	add.w	r3, r7, #12
 8012924:	4618      	mov	r0, r3
 8012926:	f000 f825 	bl	8012974 <ip4_route>
 801292a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801292c:	693b      	ldr	r3, [r7, #16]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d011      	beq.n	8012956 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012932:	697b      	ldr	r3, [r7, #20]
 8012934:	2200      	movs	r2, #0
 8012936:	709a      	strb	r2, [r3, #2]
 8012938:	2200      	movs	r2, #0
 801293a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801293c:	f107 020c 	add.w	r2, r7, #12
 8012940:	693b      	ldr	r3, [r7, #16]
 8012942:	9302      	str	r3, [sp, #8]
 8012944:	2301      	movs	r3, #1
 8012946:	9301      	str	r3, [sp, #4]
 8012948:	2300      	movs	r3, #0
 801294a:	9300      	str	r3, [sp, #0]
 801294c:	23ff      	movs	r3, #255	; 0xff
 801294e:	2100      	movs	r1, #0
 8012950:	69f8      	ldr	r0, [r7, #28]
 8012952:	f000 f9eb 	bl	8012d2c <ip4_output_if>
  }
  pbuf_free(q);
 8012956:	69f8      	ldr	r0, [r7, #28]
 8012958:	f7f6 fe9a 	bl	8009690 <pbuf_free>
 801295c:	e000      	b.n	8012960 <icmp_send_response+0xc0>
    return;
 801295e:	bf00      	nop
}
 8012960:	3720      	adds	r7, #32
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}
 8012966:	bf00      	nop
 8012968:	08017d2c 	.word	0x08017d2c
 801296c:	08017df8 	.word	0x08017df8
 8012970:	08017d9c 	.word	0x08017d9c

08012974 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012974:	b480      	push	{r7}
 8012976:	b085      	sub	sp, #20
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801297c:	4b33      	ldr	r3, [pc, #204]	; (8012a4c <ip4_route+0xd8>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	60fb      	str	r3, [r7, #12]
 8012982:	e036      	b.n	80129f2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801298a:	f003 0301 	and.w	r3, r3, #1
 801298e:	b2db      	uxtb	r3, r3
 8012990:	2b00      	cmp	r3, #0
 8012992:	d02b      	beq.n	80129ec <ip4_route+0x78>
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801299a:	089b      	lsrs	r3, r3, #2
 801299c:	f003 0301 	and.w	r3, r3, #1
 80129a0:	b2db      	uxtb	r3, r3
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d022      	beq.n	80129ec <ip4_route+0x78>
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	3304      	adds	r3, #4
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d01d      	beq.n	80129ec <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	681a      	ldr	r2, [r3, #0]
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	3304      	adds	r3, #4
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	405a      	eors	r2, r3
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	3308      	adds	r3, #8
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	4013      	ands	r3, r2
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d101      	bne.n	80129cc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	e038      	b.n	8012a3e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80129d2:	f003 0302 	and.w	r3, r3, #2
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d108      	bne.n	80129ec <ip4_route+0x78>
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	681a      	ldr	r2, [r3, #0]
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	330c      	adds	r3, #12
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	429a      	cmp	r2, r3
 80129e6:	d101      	bne.n	80129ec <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	e028      	b.n	8012a3e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	60fb      	str	r3, [r7, #12]
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d1c5      	bne.n	8012984 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80129f8:	4b15      	ldr	r3, [pc, #84]	; (8012a50 <ip4_route+0xdc>)
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d01a      	beq.n	8012a36 <ip4_route+0xc2>
 8012a00:	4b13      	ldr	r3, [pc, #76]	; (8012a50 <ip4_route+0xdc>)
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012a08:	f003 0301 	and.w	r3, r3, #1
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d012      	beq.n	8012a36 <ip4_route+0xc2>
 8012a10:	4b0f      	ldr	r3, [pc, #60]	; (8012a50 <ip4_route+0xdc>)
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012a18:	f003 0304 	and.w	r3, r3, #4
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d00a      	beq.n	8012a36 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012a20:	4b0b      	ldr	r3, [pc, #44]	; (8012a50 <ip4_route+0xdc>)
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	3304      	adds	r3, #4
 8012a26:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d004      	beq.n	8012a36 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	b2db      	uxtb	r3, r3
 8012a32:	2b7f      	cmp	r3, #127	; 0x7f
 8012a34:	d101      	bne.n	8012a3a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012a36:	2300      	movs	r3, #0
 8012a38:	e001      	b.n	8012a3e <ip4_route+0xca>
  }

  return netif_default;
 8012a3a:	4b05      	ldr	r3, [pc, #20]	; (8012a50 <ip4_route+0xdc>)
 8012a3c:	681b      	ldr	r3, [r3, #0]
}
 8012a3e:	4618      	mov	r0, r3
 8012a40:	3714      	adds	r7, #20
 8012a42:	46bd      	mov	sp, r7
 8012a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a48:	4770      	bx	lr
 8012a4a:	bf00      	nop
 8012a4c:	2000aeb4 	.word	0x2000aeb4
 8012a50:	2000aeb8 	.word	0x2000aeb8

08012a54 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b082      	sub	sp, #8
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012a62:	f003 0301 	and.w	r3, r3, #1
 8012a66:	b2db      	uxtb	r3, r3
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d016      	beq.n	8012a9a <ip4_input_accept+0x46>
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	3304      	adds	r3, #4
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d011      	beq.n	8012a9a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012a76:	4b0b      	ldr	r3, [pc, #44]	; (8012aa4 <ip4_input_accept+0x50>)
 8012a78:	695a      	ldr	r2, [r3, #20]
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	3304      	adds	r3, #4
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	429a      	cmp	r2, r3
 8012a82:	d008      	beq.n	8012a96 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012a84:	4b07      	ldr	r3, [pc, #28]	; (8012aa4 <ip4_input_accept+0x50>)
 8012a86:	695b      	ldr	r3, [r3, #20]
 8012a88:	6879      	ldr	r1, [r7, #4]
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	f000 fa26 	bl	8012edc <ip4_addr_isbroadcast_u32>
 8012a90:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d001      	beq.n	8012a9a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012a96:	2301      	movs	r3, #1
 8012a98:	e000      	b.n	8012a9c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012a9a:	2300      	movs	r3, #0
}
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	3708      	adds	r7, #8
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	bd80      	pop	{r7, pc}
 8012aa4:	20005770 	.word	0x20005770

08012aa8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b088      	sub	sp, #32
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
 8012ab0:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8012ab2:	2301      	movs	r3, #1
 8012ab4:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	685b      	ldr	r3, [r3, #4]
 8012aba:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8012abc:	69fb      	ldr	r3, [r7, #28]
 8012abe:	781b      	ldrb	r3, [r3, #0]
 8012ac0:	091b      	lsrs	r3, r3, #4
 8012ac2:	b2db      	uxtb	r3, r3
 8012ac4:	2b04      	cmp	r3, #4
 8012ac6:	d004      	beq.n	8012ad2 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	f7f6 fde1 	bl	8009690 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012ace:	2300      	movs	r3, #0
 8012ad0:	e123      	b.n	8012d1a <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012ad2:	69fb      	ldr	r3, [r7, #28]
 8012ad4:	781b      	ldrb	r3, [r3, #0]
 8012ad6:	f003 030f 	and.w	r3, r3, #15
 8012ada:	b2db      	uxtb	r3, r3
 8012adc:	009b      	lsls	r3, r3, #2
 8012ade:	b2db      	uxtb	r3, r3
 8012ae0:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012ae2:	69fb      	ldr	r3, [r7, #28]
 8012ae4:	885b      	ldrh	r3, [r3, #2]
 8012ae6:	b29b      	uxth	r3, r3
 8012ae8:	4618      	mov	r0, r3
 8012aea:	f7f5 fa67 	bl	8007fbc <lwip_htons>
 8012aee:	4603      	mov	r3, r0
 8012af0:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	891b      	ldrh	r3, [r3, #8]
 8012af6:	8a3a      	ldrh	r2, [r7, #16]
 8012af8:	429a      	cmp	r2, r3
 8012afa:	d204      	bcs.n	8012b06 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8012afc:	8a3b      	ldrh	r3, [r7, #16]
 8012afe:	4619      	mov	r1, r3
 8012b00:	6878      	ldr	r0, [r7, #4]
 8012b02:	f7f6 fc3f 	bl	8009384 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	895b      	ldrh	r3, [r3, #10]
 8012b0a:	8a7a      	ldrh	r2, [r7, #18]
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	d807      	bhi.n	8012b20 <ip4_input+0x78>
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	891b      	ldrh	r3, [r3, #8]
 8012b14:	8a3a      	ldrh	r2, [r7, #16]
 8012b16:	429a      	cmp	r2, r3
 8012b18:	d802      	bhi.n	8012b20 <ip4_input+0x78>
 8012b1a:	8a7b      	ldrh	r3, [r7, #18]
 8012b1c:	2b13      	cmp	r3, #19
 8012b1e:	d804      	bhi.n	8012b2a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012b20:	6878      	ldr	r0, [r7, #4]
 8012b22:	f7f6 fdb5 	bl	8009690 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012b26:	2300      	movs	r3, #0
 8012b28:	e0f7      	b.n	8012d1a <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012b2a:	69fb      	ldr	r3, [r7, #28]
 8012b2c:	691b      	ldr	r3, [r3, #16]
 8012b2e:	4a7d      	ldr	r2, [pc, #500]	; (8012d24 <ip4_input+0x27c>)
 8012b30:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012b32:	69fb      	ldr	r3, [r7, #28]
 8012b34:	68db      	ldr	r3, [r3, #12]
 8012b36:	4a7b      	ldr	r2, [pc, #492]	; (8012d24 <ip4_input+0x27c>)
 8012b38:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012b3a:	4b7a      	ldr	r3, [pc, #488]	; (8012d24 <ip4_input+0x27c>)
 8012b3c:	695b      	ldr	r3, [r3, #20]
 8012b3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012b42:	2be0      	cmp	r3, #224	; 0xe0
 8012b44:	d112      	bne.n	8012b6c <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012b46:	683b      	ldr	r3, [r7, #0]
 8012b48:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012b4c:	f003 0301 	and.w	r3, r3, #1
 8012b50:	b2db      	uxtb	r3, r3
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d007      	beq.n	8012b66 <ip4_input+0xbe>
 8012b56:	683b      	ldr	r3, [r7, #0]
 8012b58:	3304      	adds	r3, #4
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d002      	beq.n	8012b66 <ip4_input+0xbe>
      netif = inp;
 8012b60:	683b      	ldr	r3, [r7, #0]
 8012b62:	61bb      	str	r3, [r7, #24]
 8012b64:	e02a      	b.n	8012bbc <ip4_input+0x114>
    } else {
      netif = NULL;
 8012b66:	2300      	movs	r3, #0
 8012b68:	61bb      	str	r3, [r7, #24]
 8012b6a:	e027      	b.n	8012bbc <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012b6c:	6838      	ldr	r0, [r7, #0]
 8012b6e:	f7ff ff71 	bl	8012a54 <ip4_input_accept>
 8012b72:	4603      	mov	r3, r0
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d002      	beq.n	8012b7e <ip4_input+0xd6>
      netif = inp;
 8012b78:	683b      	ldr	r3, [r7, #0]
 8012b7a:	61bb      	str	r3, [r7, #24]
 8012b7c:	e01e      	b.n	8012bbc <ip4_input+0x114>
    } else {
      netif = NULL;
 8012b7e:	2300      	movs	r3, #0
 8012b80:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012b82:	4b68      	ldr	r3, [pc, #416]	; (8012d24 <ip4_input+0x27c>)
 8012b84:	695b      	ldr	r3, [r3, #20]
 8012b86:	b2db      	uxtb	r3, r3
 8012b88:	2b7f      	cmp	r3, #127	; 0x7f
 8012b8a:	d017      	beq.n	8012bbc <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012b8c:	4b66      	ldr	r3, [pc, #408]	; (8012d28 <ip4_input+0x280>)
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	61bb      	str	r3, [r7, #24]
 8012b92:	e00e      	b.n	8012bb2 <ip4_input+0x10a>
          if (netif == inp) {
 8012b94:	69ba      	ldr	r2, [r7, #24]
 8012b96:	683b      	ldr	r3, [r7, #0]
 8012b98:	429a      	cmp	r2, r3
 8012b9a:	d006      	beq.n	8012baa <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012b9c:	69b8      	ldr	r0, [r7, #24]
 8012b9e:	f7ff ff59 	bl	8012a54 <ip4_input_accept>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d108      	bne.n	8012bba <ip4_input+0x112>
 8012ba8:	e000      	b.n	8012bac <ip4_input+0x104>
            continue;
 8012baa:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012bac:	69bb      	ldr	r3, [r7, #24]
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	61bb      	str	r3, [r7, #24]
 8012bb2:	69bb      	ldr	r3, [r7, #24]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d1ed      	bne.n	8012b94 <ip4_input+0xec>
 8012bb8:	e000      	b.n	8012bbc <ip4_input+0x114>
            break;
 8012bba:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8012bbc:	69bb      	ldr	r3, [r7, #24]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d111      	bne.n	8012be6 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8012bc2:	69fb      	ldr	r3, [r7, #28]
 8012bc4:	7a5b      	ldrb	r3, [r3, #9]
 8012bc6:	2b11      	cmp	r3, #17
 8012bc8:	d10d      	bne.n	8012be6 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8012bca:	8a7b      	ldrh	r3, [r7, #18]
 8012bcc:	69fa      	ldr	r2, [r7, #28]
 8012bce:	4413      	add	r3, r2
 8012bd0:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	885b      	ldrh	r3, [r3, #2]
 8012bd6:	b29b      	uxth	r3, r3
 8012bd8:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8012bdc:	d103      	bne.n	8012be6 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8012bde:	683b      	ldr	r3, [r7, #0]
 8012be0:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8012be2:	2300      	movs	r3, #0
 8012be4:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8012be6:	697b      	ldr	r3, [r7, #20]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d017      	beq.n	8012c1c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8012bec:	4b4d      	ldr	r3, [pc, #308]	; (8012d24 <ip4_input+0x27c>)
 8012bee:	691b      	ldr	r3, [r3, #16]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d013      	beq.n	8012c1c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012bf4:	4b4b      	ldr	r3, [pc, #300]	; (8012d24 <ip4_input+0x27c>)
 8012bf6:	691b      	ldr	r3, [r3, #16]
 8012bf8:	6839      	ldr	r1, [r7, #0]
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f000 f96e 	bl	8012edc <ip4_addr_isbroadcast_u32>
 8012c00:	4603      	mov	r3, r0
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d105      	bne.n	8012c12 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012c06:	4b47      	ldr	r3, [pc, #284]	; (8012d24 <ip4_input+0x27c>)
 8012c08:	691b      	ldr	r3, [r3, #16]
 8012c0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012c0e:	2be0      	cmp	r3, #224	; 0xe0
 8012c10:	d104      	bne.n	8012c1c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012c12:	6878      	ldr	r0, [r7, #4]
 8012c14:	f7f6 fd3c 	bl	8009690 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012c18:	2300      	movs	r3, #0
 8012c1a:	e07e      	b.n	8012d1a <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012c1c:	69bb      	ldr	r3, [r7, #24]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d104      	bne.n	8012c2c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012c22:	6878      	ldr	r0, [r7, #4]
 8012c24:	f7f6 fd34 	bl	8009690 <pbuf_free>
    return ERR_OK;
 8012c28:	2300      	movs	r3, #0
 8012c2a:	e076      	b.n	8012d1a <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012c2c:	69fb      	ldr	r3, [r7, #28]
 8012c2e:	88db      	ldrh	r3, [r3, #6]
 8012c30:	b29b      	uxth	r3, r3
 8012c32:	461a      	mov	r2, r3
 8012c34:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012c38:	4013      	ands	r3, r2
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d00b      	beq.n	8012c56 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012c3e:	6878      	ldr	r0, [r7, #4]
 8012c40:	f000 fc92 	bl	8013568 <ip4_reass>
 8012c44:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d101      	bne.n	8012c50 <ip4_input+0x1a8>
      return ERR_OK;
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	e064      	b.n	8012d1a <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	685b      	ldr	r3, [r3, #4]
 8012c54:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012c56:	4a33      	ldr	r2, [pc, #204]	; (8012d24 <ip4_input+0x27c>)
 8012c58:	69bb      	ldr	r3, [r7, #24]
 8012c5a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012c5c:	4a31      	ldr	r2, [pc, #196]	; (8012d24 <ip4_input+0x27c>)
 8012c5e:	683b      	ldr	r3, [r7, #0]
 8012c60:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012c62:	4a30      	ldr	r2, [pc, #192]	; (8012d24 <ip4_input+0x27c>)
 8012c64:	69fb      	ldr	r3, [r7, #28]
 8012c66:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012c68:	69fb      	ldr	r3, [r7, #28]
 8012c6a:	781b      	ldrb	r3, [r3, #0]
 8012c6c:	f003 030f 	and.w	r3, r3, #15
 8012c70:	b2db      	uxtb	r3, r3
 8012c72:	009b      	lsls	r3, r3, #2
 8012c74:	b2db      	uxtb	r3, r3
 8012c76:	b29a      	uxth	r2, r3
 8012c78:	4b2a      	ldr	r3, [pc, #168]	; (8012d24 <ip4_input+0x27c>)
 8012c7a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012c7c:	8a7b      	ldrh	r3, [r7, #18]
 8012c7e:	4619      	mov	r1, r3
 8012c80:	6878      	ldr	r0, [r7, #4]
 8012c82:	f7f6 fc7f 	bl	8009584 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012c86:	69fb      	ldr	r3, [r7, #28]
 8012c88:	7a5b      	ldrb	r3, [r3, #9]
 8012c8a:	2b11      	cmp	r3, #17
 8012c8c:	d006      	beq.n	8012c9c <ip4_input+0x1f4>
 8012c8e:	2b11      	cmp	r3, #17
 8012c90:	dc13      	bgt.n	8012cba <ip4_input+0x212>
 8012c92:	2b01      	cmp	r3, #1
 8012c94:	d00c      	beq.n	8012cb0 <ip4_input+0x208>
 8012c96:	2b06      	cmp	r3, #6
 8012c98:	d005      	beq.n	8012ca6 <ip4_input+0x1fe>
 8012c9a:	e00e      	b.n	8012cba <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012c9c:	6839      	ldr	r1, [r7, #0]
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	f7fc fae8 	bl	800f274 <udp_input>
        break;
 8012ca4:	e026      	b.n	8012cf4 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012ca6:	6839      	ldr	r1, [r7, #0]
 8012ca8:	6878      	ldr	r0, [r7, #4]
 8012caa:	f7f8 fb29 	bl	800b300 <tcp_input>
        break;
 8012cae:	e021      	b.n	8012cf4 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012cb0:	6839      	ldr	r1, [r7, #0]
 8012cb2:	6878      	ldr	r0, [r7, #4]
 8012cb4:	f7ff fcd0 	bl	8012658 <icmp_input>
        break;
 8012cb8:	e01c      	b.n	8012cf4 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012cba:	4b1a      	ldr	r3, [pc, #104]	; (8012d24 <ip4_input+0x27c>)
 8012cbc:	695b      	ldr	r3, [r3, #20]
 8012cbe:	69b9      	ldr	r1, [r7, #24]
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f000 f90b 	bl	8012edc <ip4_addr_isbroadcast_u32>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d10f      	bne.n	8012cec <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012ccc:	4b15      	ldr	r3, [pc, #84]	; (8012d24 <ip4_input+0x27c>)
 8012cce:	695b      	ldr	r3, [r3, #20]
 8012cd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012cd4:	2be0      	cmp	r3, #224	; 0xe0
 8012cd6:	d009      	beq.n	8012cec <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012cd8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012cdc:	4619      	mov	r1, r3
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	f7f6 fcc3 	bl	800966a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012ce4:	2102      	movs	r1, #2
 8012ce6:	6878      	ldr	r0, [r7, #4]
 8012ce8:	f7ff fdba 	bl	8012860 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012cec:	6878      	ldr	r0, [r7, #4]
 8012cee:	f7f6 fccf 	bl	8009690 <pbuf_free>
        break;
 8012cf2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012cf4:	4b0b      	ldr	r3, [pc, #44]	; (8012d24 <ip4_input+0x27c>)
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012cfa:	4b0a      	ldr	r3, [pc, #40]	; (8012d24 <ip4_input+0x27c>)
 8012cfc:	2200      	movs	r2, #0
 8012cfe:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012d00:	4b08      	ldr	r3, [pc, #32]	; (8012d24 <ip4_input+0x27c>)
 8012d02:	2200      	movs	r2, #0
 8012d04:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012d06:	4b07      	ldr	r3, [pc, #28]	; (8012d24 <ip4_input+0x27c>)
 8012d08:	2200      	movs	r2, #0
 8012d0a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012d0c:	4b05      	ldr	r3, [pc, #20]	; (8012d24 <ip4_input+0x27c>)
 8012d0e:	2200      	movs	r2, #0
 8012d10:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012d12:	4b04      	ldr	r3, [pc, #16]	; (8012d24 <ip4_input+0x27c>)
 8012d14:	2200      	movs	r2, #0
 8012d16:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012d18:	2300      	movs	r3, #0
}
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	3720      	adds	r7, #32
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	bd80      	pop	{r7, pc}
 8012d22:	bf00      	nop
 8012d24:	20005770 	.word	0x20005770
 8012d28:	2000aeb4 	.word	0x2000aeb4

08012d2c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b08a      	sub	sp, #40	; 0x28
 8012d30:	af04      	add	r7, sp, #16
 8012d32:	60f8      	str	r0, [r7, #12]
 8012d34:	60b9      	str	r1, [r7, #8]
 8012d36:	607a      	str	r2, [r7, #4]
 8012d38:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012d3a:	68bb      	ldr	r3, [r7, #8]
 8012d3c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d009      	beq.n	8012d58 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012d44:	68bb      	ldr	r3, [r7, #8]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d003      	beq.n	8012d52 <ip4_output_if+0x26>
 8012d4a:	68bb      	ldr	r3, [r7, #8]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d102      	bne.n	8012d58 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d54:	3304      	adds	r3, #4
 8012d56:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012d58:	78fa      	ldrb	r2, [r7, #3]
 8012d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d5c:	9302      	str	r3, [sp, #8]
 8012d5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012d62:	9301      	str	r3, [sp, #4]
 8012d64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012d68:	9300      	str	r3, [sp, #0]
 8012d6a:	4613      	mov	r3, r2
 8012d6c:	687a      	ldr	r2, [r7, #4]
 8012d6e:	6979      	ldr	r1, [r7, #20]
 8012d70:	68f8      	ldr	r0, [r7, #12]
 8012d72:	f000 f805 	bl	8012d80 <ip4_output_if_src>
 8012d76:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012d78:	4618      	mov	r0, r3
 8012d7a:	3718      	adds	r7, #24
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	bd80      	pop	{r7, pc}

08012d80 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b088      	sub	sp, #32
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	60f8      	str	r0, [r7, #12]
 8012d88:	60b9      	str	r1, [r7, #8]
 8012d8a:	607a      	str	r2, [r7, #4]
 8012d8c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	7b9b      	ldrb	r3, [r3, #14]
 8012d92:	2b01      	cmp	r3, #1
 8012d94:	d006      	beq.n	8012da4 <ip4_output_if_src+0x24>
 8012d96:	4b4b      	ldr	r3, [pc, #300]	; (8012ec4 <ip4_output_if_src+0x144>)
 8012d98:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012d9c:	494a      	ldr	r1, [pc, #296]	; (8012ec8 <ip4_output_if_src+0x148>)
 8012d9e:	484b      	ldr	r0, [pc, #300]	; (8012ecc <ip4_output_if_src+0x14c>)
 8012da0:	f001 f856 	bl	8013e50 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d060      	beq.n	8012e6c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012daa:	2314      	movs	r3, #20
 8012dac:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012dae:	2114      	movs	r1, #20
 8012db0:	68f8      	ldr	r0, [r7, #12]
 8012db2:	f7f6 fbd7 	bl	8009564 <pbuf_add_header>
 8012db6:	4603      	mov	r3, r0
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d002      	beq.n	8012dc2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012dbc:	f06f 0301 	mvn.w	r3, #1
 8012dc0:	e07c      	b.n	8012ebc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	685b      	ldr	r3, [r3, #4]
 8012dc6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	895b      	ldrh	r3, [r3, #10]
 8012dcc:	2b13      	cmp	r3, #19
 8012dce:	d806      	bhi.n	8012dde <ip4_output_if_src+0x5e>
 8012dd0:	4b3c      	ldr	r3, [pc, #240]	; (8012ec4 <ip4_output_if_src+0x144>)
 8012dd2:	f44f 7262 	mov.w	r2, #904	; 0x388
 8012dd6:	493e      	ldr	r1, [pc, #248]	; (8012ed0 <ip4_output_if_src+0x150>)
 8012dd8:	483c      	ldr	r0, [pc, #240]	; (8012ecc <ip4_output_if_src+0x14c>)
 8012dda:	f001 f839 	bl	8013e50 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012dde:	69fb      	ldr	r3, [r7, #28]
 8012de0:	78fa      	ldrb	r2, [r7, #3]
 8012de2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012de4:	69fb      	ldr	r3, [r7, #28]
 8012de6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012dea:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	681a      	ldr	r2, [r3, #0]
 8012df0:	69fb      	ldr	r3, [r7, #28]
 8012df2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012df4:	8b7b      	ldrh	r3, [r7, #26]
 8012df6:	089b      	lsrs	r3, r3, #2
 8012df8:	b29b      	uxth	r3, r3
 8012dfa:	b2db      	uxtb	r3, r3
 8012dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e00:	b2da      	uxtb	r2, r3
 8012e02:	69fb      	ldr	r3, [r7, #28]
 8012e04:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012e06:	69fb      	ldr	r3, [r7, #28]
 8012e08:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012e0c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	891b      	ldrh	r3, [r3, #8]
 8012e12:	4618      	mov	r0, r3
 8012e14:	f7f5 f8d2 	bl	8007fbc <lwip_htons>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	461a      	mov	r2, r3
 8012e1c:	69fb      	ldr	r3, [r7, #28]
 8012e1e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012e20:	69fb      	ldr	r3, [r7, #28]
 8012e22:	2200      	movs	r2, #0
 8012e24:	719a      	strb	r2, [r3, #6]
 8012e26:	2200      	movs	r2, #0
 8012e28:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012e2a:	4b2a      	ldr	r3, [pc, #168]	; (8012ed4 <ip4_output_if_src+0x154>)
 8012e2c:	881b      	ldrh	r3, [r3, #0]
 8012e2e:	4618      	mov	r0, r3
 8012e30:	f7f5 f8c4 	bl	8007fbc <lwip_htons>
 8012e34:	4603      	mov	r3, r0
 8012e36:	461a      	mov	r2, r3
 8012e38:	69fb      	ldr	r3, [r7, #28]
 8012e3a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012e3c:	4b25      	ldr	r3, [pc, #148]	; (8012ed4 <ip4_output_if_src+0x154>)
 8012e3e:	881b      	ldrh	r3, [r3, #0]
 8012e40:	3301      	adds	r3, #1
 8012e42:	b29a      	uxth	r2, r3
 8012e44:	4b23      	ldr	r3, [pc, #140]	; (8012ed4 <ip4_output_if_src+0x154>)
 8012e46:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012e48:	68bb      	ldr	r3, [r7, #8]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d104      	bne.n	8012e58 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012e4e:	4b22      	ldr	r3, [pc, #136]	; (8012ed8 <ip4_output_if_src+0x158>)
 8012e50:	681a      	ldr	r2, [r3, #0]
 8012e52:	69fb      	ldr	r3, [r7, #28]
 8012e54:	60da      	str	r2, [r3, #12]
 8012e56:	e003      	b.n	8012e60 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012e58:	68bb      	ldr	r3, [r7, #8]
 8012e5a:	681a      	ldr	r2, [r3, #0]
 8012e5c:	69fb      	ldr	r3, [r7, #28]
 8012e5e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012e60:	69fb      	ldr	r3, [r7, #28]
 8012e62:	2200      	movs	r2, #0
 8012e64:	729a      	strb	r2, [r3, #10]
 8012e66:	2200      	movs	r2, #0
 8012e68:	72da      	strb	r2, [r3, #11]
 8012e6a:	e00f      	b.n	8012e8c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	895b      	ldrh	r3, [r3, #10]
 8012e70:	2b13      	cmp	r3, #19
 8012e72:	d802      	bhi.n	8012e7a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012e74:	f06f 0301 	mvn.w	r3, #1
 8012e78:	e020      	b.n	8012ebc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	685b      	ldr	r3, [r3, #4]
 8012e7e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012e80:	69fb      	ldr	r3, [r7, #28]
 8012e82:	691b      	ldr	r3, [r3, #16]
 8012e84:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012e86:	f107 0314 	add.w	r3, r7, #20
 8012e8a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d00c      	beq.n	8012eae <ip4_output_if_src+0x12e>
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	891a      	ldrh	r2, [r3, #8]
 8012e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e9c:	429a      	cmp	r2, r3
 8012e9e:	d906      	bls.n	8012eae <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012ea0:	687a      	ldr	r2, [r7, #4]
 8012ea2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012ea4:	68f8      	ldr	r0, [r7, #12]
 8012ea6:	f000 fd53 	bl	8013950 <ip4_frag>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	e006      	b.n	8012ebc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eb0:	695b      	ldr	r3, [r3, #20]
 8012eb2:	687a      	ldr	r2, [r7, #4]
 8012eb4:	68f9      	ldr	r1, [r7, #12]
 8012eb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012eb8:	4798      	blx	r3
 8012eba:	4603      	mov	r3, r0
}
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	3720      	adds	r7, #32
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	bd80      	pop	{r7, pc}
 8012ec4:	08017e24 	.word	0x08017e24
 8012ec8:	08017e58 	.word	0x08017e58
 8012ecc:	08017e64 	.word	0x08017e64
 8012ed0:	08017e8c 	.word	0x08017e8c
 8012ed4:	2000b046 	.word	0x2000b046
 8012ed8:	0801a7a4 	.word	0x0801a7a4

08012edc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012edc:	b480      	push	{r7}
 8012ede:	b085      	sub	sp, #20
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
 8012ee4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ef0:	d002      	beq.n	8012ef8 <ip4_addr_isbroadcast_u32+0x1c>
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d101      	bne.n	8012efc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012ef8:	2301      	movs	r3, #1
 8012efa:	e02a      	b.n	8012f52 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012efc:	683b      	ldr	r3, [r7, #0]
 8012efe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012f02:	f003 0302 	and.w	r3, r3, #2
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d101      	bne.n	8012f0e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	e021      	b.n	8012f52 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012f0e:	683b      	ldr	r3, [r7, #0]
 8012f10:	3304      	adds	r3, #4
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	687a      	ldr	r2, [r7, #4]
 8012f16:	429a      	cmp	r2, r3
 8012f18:	d101      	bne.n	8012f1e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	e019      	b.n	8012f52 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012f1e:	68fa      	ldr	r2, [r7, #12]
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	3304      	adds	r3, #4
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	405a      	eors	r2, r3
 8012f28:	683b      	ldr	r3, [r7, #0]
 8012f2a:	3308      	adds	r3, #8
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	4013      	ands	r3, r2
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d10d      	bne.n	8012f50 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012f34:	683b      	ldr	r3, [r7, #0]
 8012f36:	3308      	adds	r3, #8
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	43da      	mvns	r2, r3
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012f40:	683b      	ldr	r3, [r7, #0]
 8012f42:	3308      	adds	r3, #8
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012f48:	429a      	cmp	r2, r3
 8012f4a:	d101      	bne.n	8012f50 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012f4c:	2301      	movs	r3, #1
 8012f4e:	e000      	b.n	8012f52 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012f50:	2300      	movs	r3, #0
  }
}
 8012f52:	4618      	mov	r0, r3
 8012f54:	3714      	adds	r7, #20
 8012f56:	46bd      	mov	sp, r7
 8012f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f5c:	4770      	bx	lr
	...

08012f60 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b084      	sub	sp, #16
 8012f64:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012f66:	2300      	movs	r3, #0
 8012f68:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012f6a:	4b12      	ldr	r3, [pc, #72]	; (8012fb4 <ip_reass_tmr+0x54>)
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012f70:	e018      	b.n	8012fa4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	7fdb      	ldrb	r3, [r3, #31]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d00b      	beq.n	8012f92 <ip_reass_tmr+0x32>
      r->timer--;
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	7fdb      	ldrb	r3, [r3, #31]
 8012f7e:	3b01      	subs	r3, #1
 8012f80:	b2da      	uxtb	r2, r3
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	60fb      	str	r3, [r7, #12]
 8012f90:	e008      	b.n	8012fa4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012f9c:	68b9      	ldr	r1, [r7, #8]
 8012f9e:	6878      	ldr	r0, [r7, #4]
 8012fa0:	f000 f80a 	bl	8012fb8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d1e3      	bne.n	8012f72 <ip_reass_tmr+0x12>
    }
  }
}
 8012faa:	bf00      	nop
 8012fac:	bf00      	nop
 8012fae:	3710      	adds	r7, #16
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	bd80      	pop	{r7, pc}
 8012fb4:	2000b048 	.word	0x2000b048

08012fb8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b088      	sub	sp, #32
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
 8012fc0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012fc6:	683a      	ldr	r2, [r7, #0]
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	429a      	cmp	r2, r3
 8012fcc:	d105      	bne.n	8012fda <ip_reass_free_complete_datagram+0x22>
 8012fce:	4b45      	ldr	r3, [pc, #276]	; (80130e4 <ip_reass_free_complete_datagram+0x12c>)
 8012fd0:	22ab      	movs	r2, #171	; 0xab
 8012fd2:	4945      	ldr	r1, [pc, #276]	; (80130e8 <ip_reass_free_complete_datagram+0x130>)
 8012fd4:	4845      	ldr	r0, [pc, #276]	; (80130ec <ip_reass_free_complete_datagram+0x134>)
 8012fd6:	f000 ff3b 	bl	8013e50 <iprintf>
  if (prev != NULL) {
 8012fda:	683b      	ldr	r3, [r7, #0]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d00a      	beq.n	8012ff6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012fe0:	683b      	ldr	r3, [r7, #0]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	687a      	ldr	r2, [r7, #4]
 8012fe6:	429a      	cmp	r2, r3
 8012fe8:	d005      	beq.n	8012ff6 <ip_reass_free_complete_datagram+0x3e>
 8012fea:	4b3e      	ldr	r3, [pc, #248]	; (80130e4 <ip_reass_free_complete_datagram+0x12c>)
 8012fec:	22ad      	movs	r2, #173	; 0xad
 8012fee:	4940      	ldr	r1, [pc, #256]	; (80130f0 <ip_reass_free_complete_datagram+0x138>)
 8012ff0:	483e      	ldr	r0, [pc, #248]	; (80130ec <ip_reass_free_complete_datagram+0x134>)
 8012ff2:	f000 ff2d 	bl	8013e50 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	685b      	ldr	r3, [r3, #4]
 8012ffa:	685b      	ldr	r3, [r3, #4]
 8012ffc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012ffe:	697b      	ldr	r3, [r7, #20]
 8013000:	889b      	ldrh	r3, [r3, #4]
 8013002:	b29b      	uxth	r3, r3
 8013004:	2b00      	cmp	r3, #0
 8013006:	d12a      	bne.n	801305e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	685b      	ldr	r3, [r3, #4]
 801300c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801300e:	697b      	ldr	r3, [r7, #20]
 8013010:	681a      	ldr	r2, [r3, #0]
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013016:	69bb      	ldr	r3, [r7, #24]
 8013018:	6858      	ldr	r0, [r3, #4]
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	3308      	adds	r3, #8
 801301e:	2214      	movs	r2, #20
 8013020:	4619      	mov	r1, r3
 8013022:	f000 fee5 	bl	8013df0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013026:	2101      	movs	r1, #1
 8013028:	69b8      	ldr	r0, [r7, #24]
 801302a:	f7ff fc29 	bl	8012880 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801302e:	69b8      	ldr	r0, [r7, #24]
 8013030:	f7f6 fbb6 	bl	80097a0 <pbuf_clen>
 8013034:	4603      	mov	r3, r0
 8013036:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013038:	8bfa      	ldrh	r2, [r7, #30]
 801303a:	8a7b      	ldrh	r3, [r7, #18]
 801303c:	4413      	add	r3, r2
 801303e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013042:	db05      	blt.n	8013050 <ip_reass_free_complete_datagram+0x98>
 8013044:	4b27      	ldr	r3, [pc, #156]	; (80130e4 <ip_reass_free_complete_datagram+0x12c>)
 8013046:	22bc      	movs	r2, #188	; 0xbc
 8013048:	492a      	ldr	r1, [pc, #168]	; (80130f4 <ip_reass_free_complete_datagram+0x13c>)
 801304a:	4828      	ldr	r0, [pc, #160]	; (80130ec <ip_reass_free_complete_datagram+0x134>)
 801304c:	f000 ff00 	bl	8013e50 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013050:	8bfa      	ldrh	r2, [r7, #30]
 8013052:	8a7b      	ldrh	r3, [r7, #18]
 8013054:	4413      	add	r3, r2
 8013056:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013058:	69b8      	ldr	r0, [r7, #24]
 801305a:	f7f6 fb19 	bl	8009690 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	685b      	ldr	r3, [r3, #4]
 8013062:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013064:	e01f      	b.n	80130a6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013066:	69bb      	ldr	r3, [r7, #24]
 8013068:	685b      	ldr	r3, [r3, #4]
 801306a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801306c:	69bb      	ldr	r3, [r7, #24]
 801306e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013070:	697b      	ldr	r3, [r7, #20]
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013076:	68f8      	ldr	r0, [r7, #12]
 8013078:	f7f6 fb92 	bl	80097a0 <pbuf_clen>
 801307c:	4603      	mov	r3, r0
 801307e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013080:	8bfa      	ldrh	r2, [r7, #30]
 8013082:	8a7b      	ldrh	r3, [r7, #18]
 8013084:	4413      	add	r3, r2
 8013086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801308a:	db05      	blt.n	8013098 <ip_reass_free_complete_datagram+0xe0>
 801308c:	4b15      	ldr	r3, [pc, #84]	; (80130e4 <ip_reass_free_complete_datagram+0x12c>)
 801308e:	22cc      	movs	r2, #204	; 0xcc
 8013090:	4918      	ldr	r1, [pc, #96]	; (80130f4 <ip_reass_free_complete_datagram+0x13c>)
 8013092:	4816      	ldr	r0, [pc, #88]	; (80130ec <ip_reass_free_complete_datagram+0x134>)
 8013094:	f000 fedc 	bl	8013e50 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013098:	8bfa      	ldrh	r2, [r7, #30]
 801309a:	8a7b      	ldrh	r3, [r7, #18]
 801309c:	4413      	add	r3, r2
 801309e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80130a0:	68f8      	ldr	r0, [r7, #12]
 80130a2:	f7f6 faf5 	bl	8009690 <pbuf_free>
  while (p != NULL) {
 80130a6:	69bb      	ldr	r3, [r7, #24]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d1dc      	bne.n	8013066 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80130ac:	6839      	ldr	r1, [r7, #0]
 80130ae:	6878      	ldr	r0, [r7, #4]
 80130b0:	f000 f8c2 	bl	8013238 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80130b4:	4b10      	ldr	r3, [pc, #64]	; (80130f8 <ip_reass_free_complete_datagram+0x140>)
 80130b6:	881b      	ldrh	r3, [r3, #0]
 80130b8:	8bfa      	ldrh	r2, [r7, #30]
 80130ba:	429a      	cmp	r2, r3
 80130bc:	d905      	bls.n	80130ca <ip_reass_free_complete_datagram+0x112>
 80130be:	4b09      	ldr	r3, [pc, #36]	; (80130e4 <ip_reass_free_complete_datagram+0x12c>)
 80130c0:	22d2      	movs	r2, #210	; 0xd2
 80130c2:	490e      	ldr	r1, [pc, #56]	; (80130fc <ip_reass_free_complete_datagram+0x144>)
 80130c4:	4809      	ldr	r0, [pc, #36]	; (80130ec <ip_reass_free_complete_datagram+0x134>)
 80130c6:	f000 fec3 	bl	8013e50 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80130ca:	4b0b      	ldr	r3, [pc, #44]	; (80130f8 <ip_reass_free_complete_datagram+0x140>)
 80130cc:	881a      	ldrh	r2, [r3, #0]
 80130ce:	8bfb      	ldrh	r3, [r7, #30]
 80130d0:	1ad3      	subs	r3, r2, r3
 80130d2:	b29a      	uxth	r2, r3
 80130d4:	4b08      	ldr	r3, [pc, #32]	; (80130f8 <ip_reass_free_complete_datagram+0x140>)
 80130d6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80130d8:	8bfb      	ldrh	r3, [r7, #30]
}
 80130da:	4618      	mov	r0, r3
 80130dc:	3720      	adds	r7, #32
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd80      	pop	{r7, pc}
 80130e2:	bf00      	nop
 80130e4:	08017ebc 	.word	0x08017ebc
 80130e8:	08017ef8 	.word	0x08017ef8
 80130ec:	08017f04 	.word	0x08017f04
 80130f0:	08017f2c 	.word	0x08017f2c
 80130f4:	08017f40 	.word	0x08017f40
 80130f8:	2000b04c 	.word	0x2000b04c
 80130fc:	08017f60 	.word	0x08017f60

08013100 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013100:	b580      	push	{r7, lr}
 8013102:	b08a      	sub	sp, #40	; 0x28
 8013104:	af00      	add	r7, sp, #0
 8013106:	6078      	str	r0, [r7, #4]
 8013108:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801310a:	2300      	movs	r3, #0
 801310c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801310e:	2300      	movs	r3, #0
 8013110:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013112:	2300      	movs	r3, #0
 8013114:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013116:	2300      	movs	r3, #0
 8013118:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801311a:	2300      	movs	r3, #0
 801311c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801311e:	4b28      	ldr	r3, [pc, #160]	; (80131c0 <ip_reass_remove_oldest_datagram+0xc0>)
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013124:	e030      	b.n	8013188 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013128:	695a      	ldr	r2, [r3, #20]
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	68db      	ldr	r3, [r3, #12]
 801312e:	429a      	cmp	r2, r3
 8013130:	d10c      	bne.n	801314c <ip_reass_remove_oldest_datagram+0x4c>
 8013132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013134:	699a      	ldr	r2, [r3, #24]
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	691b      	ldr	r3, [r3, #16]
 801313a:	429a      	cmp	r2, r3
 801313c:	d106      	bne.n	801314c <ip_reass_remove_oldest_datagram+0x4c>
 801313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013140:	899a      	ldrh	r2, [r3, #12]
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	889b      	ldrh	r3, [r3, #4]
 8013146:	b29b      	uxth	r3, r3
 8013148:	429a      	cmp	r2, r3
 801314a:	d014      	beq.n	8013176 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801314c:	693b      	ldr	r3, [r7, #16]
 801314e:	3301      	adds	r3, #1
 8013150:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013152:	6a3b      	ldr	r3, [r7, #32]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d104      	bne.n	8013162 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801315a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801315c:	69fb      	ldr	r3, [r7, #28]
 801315e:	61bb      	str	r3, [r7, #24]
 8013160:	e009      	b.n	8013176 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013164:	7fda      	ldrb	r2, [r3, #31]
 8013166:	6a3b      	ldr	r3, [r7, #32]
 8013168:	7fdb      	ldrb	r3, [r3, #31]
 801316a:	429a      	cmp	r2, r3
 801316c:	d803      	bhi.n	8013176 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013170:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013172:	69fb      	ldr	r3, [r7, #28]
 8013174:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d001      	beq.n	8013182 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013180:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801318a:	2b00      	cmp	r3, #0
 801318c:	d1cb      	bne.n	8013126 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801318e:	6a3b      	ldr	r3, [r7, #32]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d008      	beq.n	80131a6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013194:	69b9      	ldr	r1, [r7, #24]
 8013196:	6a38      	ldr	r0, [r7, #32]
 8013198:	f7ff ff0e 	bl	8012fb8 <ip_reass_free_complete_datagram>
 801319c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801319e:	697a      	ldr	r2, [r7, #20]
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	4413      	add	r3, r2
 80131a4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80131a6:	697a      	ldr	r2, [r7, #20]
 80131a8:	683b      	ldr	r3, [r7, #0]
 80131aa:	429a      	cmp	r2, r3
 80131ac:	da02      	bge.n	80131b4 <ip_reass_remove_oldest_datagram+0xb4>
 80131ae:	693b      	ldr	r3, [r7, #16]
 80131b0:	2b01      	cmp	r3, #1
 80131b2:	dcac      	bgt.n	801310e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80131b4:	697b      	ldr	r3, [r7, #20]
}
 80131b6:	4618      	mov	r0, r3
 80131b8:	3728      	adds	r7, #40	; 0x28
 80131ba:	46bd      	mov	sp, r7
 80131bc:	bd80      	pop	{r7, pc}
 80131be:	bf00      	nop
 80131c0:	2000b048 	.word	0x2000b048

080131c4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b084      	sub	sp, #16
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
 80131cc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80131ce:	2004      	movs	r0, #4
 80131d0:	f7f5 fb6c 	bl	80088ac <memp_malloc>
 80131d4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d110      	bne.n	80131fe <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80131dc:	6839      	ldr	r1, [r7, #0]
 80131de:	6878      	ldr	r0, [r7, #4]
 80131e0:	f7ff ff8e 	bl	8013100 <ip_reass_remove_oldest_datagram>
 80131e4:	4602      	mov	r2, r0
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	4293      	cmp	r3, r2
 80131ea:	dc03      	bgt.n	80131f4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80131ec:	2004      	movs	r0, #4
 80131ee:	f7f5 fb5d 	bl	80088ac <memp_malloc>
 80131f2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d101      	bne.n	80131fe <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80131fa:	2300      	movs	r3, #0
 80131fc:	e016      	b.n	801322c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80131fe:	2220      	movs	r2, #32
 8013200:	2100      	movs	r1, #0
 8013202:	68f8      	ldr	r0, [r7, #12]
 8013204:	f000 fe1c 	bl	8013e40 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	220f      	movs	r2, #15
 801320c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801320e:	4b09      	ldr	r3, [pc, #36]	; (8013234 <ip_reass_enqueue_new_datagram+0x70>)
 8013210:	681a      	ldr	r2, [r3, #0]
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013216:	4a07      	ldr	r2, [pc, #28]	; (8013234 <ip_reass_enqueue_new_datagram+0x70>)
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	3308      	adds	r3, #8
 8013220:	2214      	movs	r2, #20
 8013222:	6879      	ldr	r1, [r7, #4]
 8013224:	4618      	mov	r0, r3
 8013226:	f000 fde3 	bl	8013df0 <memcpy>
  return ipr;
 801322a:	68fb      	ldr	r3, [r7, #12]
}
 801322c:	4618      	mov	r0, r3
 801322e:	3710      	adds	r7, #16
 8013230:	46bd      	mov	sp, r7
 8013232:	bd80      	pop	{r7, pc}
 8013234:	2000b048 	.word	0x2000b048

08013238 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013238:	b580      	push	{r7, lr}
 801323a:	b082      	sub	sp, #8
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
 8013240:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013242:	4b10      	ldr	r3, [pc, #64]	; (8013284 <ip_reass_dequeue_datagram+0x4c>)
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	687a      	ldr	r2, [r7, #4]
 8013248:	429a      	cmp	r2, r3
 801324a:	d104      	bne.n	8013256 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	4a0c      	ldr	r2, [pc, #48]	; (8013284 <ip_reass_dequeue_datagram+0x4c>)
 8013252:	6013      	str	r3, [r2, #0]
 8013254:	e00d      	b.n	8013272 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013256:	683b      	ldr	r3, [r7, #0]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d106      	bne.n	801326a <ip_reass_dequeue_datagram+0x32>
 801325c:	4b0a      	ldr	r3, [pc, #40]	; (8013288 <ip_reass_dequeue_datagram+0x50>)
 801325e:	f240 1245 	movw	r2, #325	; 0x145
 8013262:	490a      	ldr	r1, [pc, #40]	; (801328c <ip_reass_dequeue_datagram+0x54>)
 8013264:	480a      	ldr	r0, [pc, #40]	; (8013290 <ip_reass_dequeue_datagram+0x58>)
 8013266:	f000 fdf3 	bl	8013e50 <iprintf>
    prev->next = ipr->next;
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	681a      	ldr	r2, [r3, #0]
 801326e:	683b      	ldr	r3, [r7, #0]
 8013270:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013272:	6879      	ldr	r1, [r7, #4]
 8013274:	2004      	movs	r0, #4
 8013276:	f7f5 fb89 	bl	800898c <memp_free>
}
 801327a:	bf00      	nop
 801327c:	3708      	adds	r7, #8
 801327e:	46bd      	mov	sp, r7
 8013280:	bd80      	pop	{r7, pc}
 8013282:	bf00      	nop
 8013284:	2000b048 	.word	0x2000b048
 8013288:	08017ebc 	.word	0x08017ebc
 801328c:	08017f84 	.word	0x08017f84
 8013290:	08017f04 	.word	0x08017f04

08013294 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013294:	b580      	push	{r7, lr}
 8013296:	b08c      	sub	sp, #48	; 0x30
 8013298:	af00      	add	r7, sp, #0
 801329a:	60f8      	str	r0, [r7, #12]
 801329c:	60b9      	str	r1, [r7, #8]
 801329e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80132a0:	2300      	movs	r3, #0
 80132a2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80132a4:	2301      	movs	r3, #1
 80132a6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80132a8:	68bb      	ldr	r3, [r7, #8]
 80132aa:	685b      	ldr	r3, [r3, #4]
 80132ac:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80132ae:	69fb      	ldr	r3, [r7, #28]
 80132b0:	885b      	ldrh	r3, [r3, #2]
 80132b2:	b29b      	uxth	r3, r3
 80132b4:	4618      	mov	r0, r3
 80132b6:	f7f4 fe81 	bl	8007fbc <lwip_htons>
 80132ba:	4603      	mov	r3, r0
 80132bc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80132be:	69fb      	ldr	r3, [r7, #28]
 80132c0:	781b      	ldrb	r3, [r3, #0]
 80132c2:	f003 030f 	and.w	r3, r3, #15
 80132c6:	b2db      	uxtb	r3, r3
 80132c8:	009b      	lsls	r3, r3, #2
 80132ca:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80132cc:	7e7b      	ldrb	r3, [r7, #25]
 80132ce:	b29b      	uxth	r3, r3
 80132d0:	8b7a      	ldrh	r2, [r7, #26]
 80132d2:	429a      	cmp	r2, r3
 80132d4:	d202      	bcs.n	80132dc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80132d6:	f04f 33ff 	mov.w	r3, #4294967295
 80132da:	e135      	b.n	8013548 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80132dc:	7e7b      	ldrb	r3, [r7, #25]
 80132de:	b29b      	uxth	r3, r3
 80132e0:	8b7a      	ldrh	r2, [r7, #26]
 80132e2:	1ad3      	subs	r3, r2, r3
 80132e4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80132e6:	69fb      	ldr	r3, [r7, #28]
 80132e8:	88db      	ldrh	r3, [r3, #6]
 80132ea:	b29b      	uxth	r3, r3
 80132ec:	4618      	mov	r0, r3
 80132ee:	f7f4 fe65 	bl	8007fbc <lwip_htons>
 80132f2:	4603      	mov	r3, r0
 80132f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80132f8:	b29b      	uxth	r3, r3
 80132fa:	00db      	lsls	r3, r3, #3
 80132fc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80132fe:	68bb      	ldr	r3, [r7, #8]
 8013300:	685b      	ldr	r3, [r3, #4]
 8013302:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013306:	2200      	movs	r2, #0
 8013308:	701a      	strb	r2, [r3, #0]
 801330a:	2200      	movs	r2, #0
 801330c:	705a      	strb	r2, [r3, #1]
 801330e:	2200      	movs	r2, #0
 8013310:	709a      	strb	r2, [r3, #2]
 8013312:	2200      	movs	r2, #0
 8013314:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013318:	8afa      	ldrh	r2, [r7, #22]
 801331a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801331c:	8afa      	ldrh	r2, [r7, #22]
 801331e:	8b7b      	ldrh	r3, [r7, #26]
 8013320:	4413      	add	r3, r2
 8013322:	b29a      	uxth	r2, r3
 8013324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013326:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801332a:	88db      	ldrh	r3, [r3, #6]
 801332c:	b29b      	uxth	r3, r3
 801332e:	8afa      	ldrh	r2, [r7, #22]
 8013330:	429a      	cmp	r2, r3
 8013332:	d902      	bls.n	801333a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013334:	f04f 33ff 	mov.w	r3, #4294967295
 8013338:	e106      	b.n	8013548 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	685b      	ldr	r3, [r3, #4]
 801333e:	627b      	str	r3, [r7, #36]	; 0x24
 8013340:	e068      	b.n	8013414 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013344:	685b      	ldr	r3, [r3, #4]
 8013346:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801334a:	889b      	ldrh	r3, [r3, #4]
 801334c:	b29a      	uxth	r2, r3
 801334e:	693b      	ldr	r3, [r7, #16]
 8013350:	889b      	ldrh	r3, [r3, #4]
 8013352:	b29b      	uxth	r3, r3
 8013354:	429a      	cmp	r2, r3
 8013356:	d235      	bcs.n	80133c4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801335a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801335c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013360:	2b00      	cmp	r3, #0
 8013362:	d020      	beq.n	80133a6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013366:	889b      	ldrh	r3, [r3, #4]
 8013368:	b29a      	uxth	r2, r3
 801336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801336c:	88db      	ldrh	r3, [r3, #6]
 801336e:	b29b      	uxth	r3, r3
 8013370:	429a      	cmp	r2, r3
 8013372:	d307      	bcc.n	8013384 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013376:	88db      	ldrh	r3, [r3, #6]
 8013378:	b29a      	uxth	r2, r3
 801337a:	693b      	ldr	r3, [r7, #16]
 801337c:	889b      	ldrh	r3, [r3, #4]
 801337e:	b29b      	uxth	r3, r3
 8013380:	429a      	cmp	r2, r3
 8013382:	d902      	bls.n	801338a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013384:	f04f 33ff 	mov.w	r3, #4294967295
 8013388:	e0de      	b.n	8013548 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801338a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801338c:	68ba      	ldr	r2, [r7, #8]
 801338e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013392:	88db      	ldrh	r3, [r3, #6]
 8013394:	b29a      	uxth	r2, r3
 8013396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013398:	889b      	ldrh	r3, [r3, #4]
 801339a:	b29b      	uxth	r3, r3
 801339c:	429a      	cmp	r2, r3
 801339e:	d03d      	beq.n	801341c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80133a0:	2300      	movs	r3, #0
 80133a2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80133a4:	e03a      	b.n	801341c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80133a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133a8:	88db      	ldrh	r3, [r3, #6]
 80133aa:	b29a      	uxth	r2, r3
 80133ac:	693b      	ldr	r3, [r7, #16]
 80133ae:	889b      	ldrh	r3, [r3, #4]
 80133b0:	b29b      	uxth	r3, r3
 80133b2:	429a      	cmp	r2, r3
 80133b4:	d902      	bls.n	80133bc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80133b6:	f04f 33ff 	mov.w	r3, #4294967295
 80133ba:	e0c5      	b.n	8013548 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	68ba      	ldr	r2, [r7, #8]
 80133c0:	605a      	str	r2, [r3, #4]
      break;
 80133c2:	e02b      	b.n	801341c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80133c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133c6:	889b      	ldrh	r3, [r3, #4]
 80133c8:	b29a      	uxth	r2, r3
 80133ca:	693b      	ldr	r3, [r7, #16]
 80133cc:	889b      	ldrh	r3, [r3, #4]
 80133ce:	b29b      	uxth	r3, r3
 80133d0:	429a      	cmp	r2, r3
 80133d2:	d102      	bne.n	80133da <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80133d4:	f04f 33ff 	mov.w	r3, #4294967295
 80133d8:	e0b6      	b.n	8013548 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80133da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133dc:	889b      	ldrh	r3, [r3, #4]
 80133de:	b29a      	uxth	r2, r3
 80133e0:	693b      	ldr	r3, [r7, #16]
 80133e2:	88db      	ldrh	r3, [r3, #6]
 80133e4:	b29b      	uxth	r3, r3
 80133e6:	429a      	cmp	r2, r3
 80133e8:	d202      	bcs.n	80133f0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80133ea:	f04f 33ff 	mov.w	r3, #4294967295
 80133ee:	e0ab      	b.n	8013548 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80133f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d009      	beq.n	801340a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80133f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133f8:	88db      	ldrh	r3, [r3, #6]
 80133fa:	b29a      	uxth	r2, r3
 80133fc:	693b      	ldr	r3, [r7, #16]
 80133fe:	889b      	ldrh	r3, [r3, #4]
 8013400:	b29b      	uxth	r3, r3
 8013402:	429a      	cmp	r2, r3
 8013404:	d001      	beq.n	801340a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013406:	2300      	movs	r3, #0
 8013408:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801340a:	693b      	ldr	r3, [r7, #16]
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013410:	693b      	ldr	r3, [r7, #16]
 8013412:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013416:	2b00      	cmp	r3, #0
 8013418:	d193      	bne.n	8013342 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801341a:	e000      	b.n	801341e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801341c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013420:	2b00      	cmp	r3, #0
 8013422:	d12d      	bne.n	8013480 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013426:	2b00      	cmp	r3, #0
 8013428:	d01c      	beq.n	8013464 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801342a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801342c:	88db      	ldrh	r3, [r3, #6]
 801342e:	b29a      	uxth	r2, r3
 8013430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013432:	889b      	ldrh	r3, [r3, #4]
 8013434:	b29b      	uxth	r3, r3
 8013436:	429a      	cmp	r2, r3
 8013438:	d906      	bls.n	8013448 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801343a:	4b45      	ldr	r3, [pc, #276]	; (8013550 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801343c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013440:	4944      	ldr	r1, [pc, #272]	; (8013554 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013442:	4845      	ldr	r0, [pc, #276]	; (8013558 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013444:	f000 fd04 	bl	8013e50 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801344a:	68ba      	ldr	r2, [r7, #8]
 801344c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013450:	88db      	ldrh	r3, [r3, #6]
 8013452:	b29a      	uxth	r2, r3
 8013454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013456:	889b      	ldrh	r3, [r3, #4]
 8013458:	b29b      	uxth	r3, r3
 801345a:	429a      	cmp	r2, r3
 801345c:	d010      	beq.n	8013480 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801345e:	2300      	movs	r3, #0
 8013460:	623b      	str	r3, [r7, #32]
 8013462:	e00d      	b.n	8013480 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	685b      	ldr	r3, [r3, #4]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d006      	beq.n	801347a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801346c:	4b38      	ldr	r3, [pc, #224]	; (8013550 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801346e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8013472:	493a      	ldr	r1, [pc, #232]	; (801355c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013474:	4838      	ldr	r0, [pc, #224]	; (8013558 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013476:	f000 fceb 	bl	8013e50 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	68ba      	ldr	r2, [r7, #8]
 801347e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d105      	bne.n	8013492 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	7f9b      	ldrb	r3, [r3, #30]
 801348a:	f003 0301 	and.w	r3, r3, #1
 801348e:	2b00      	cmp	r3, #0
 8013490:	d059      	beq.n	8013546 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013492:	6a3b      	ldr	r3, [r7, #32]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d04f      	beq.n	8013538 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	685b      	ldr	r3, [r3, #4]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d006      	beq.n	80134ae <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	685b      	ldr	r3, [r3, #4]
 80134a4:	685b      	ldr	r3, [r3, #4]
 80134a6:	889b      	ldrh	r3, [r3, #4]
 80134a8:	b29b      	uxth	r3, r3
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d002      	beq.n	80134b4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80134ae:	2300      	movs	r3, #0
 80134b0:	623b      	str	r3, [r7, #32]
 80134b2:	e041      	b.n	8013538 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80134b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134b6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80134b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80134be:	e012      	b.n	80134e6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80134c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134c2:	685b      	ldr	r3, [r3, #4]
 80134c4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80134c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134c8:	88db      	ldrh	r3, [r3, #6]
 80134ca:	b29a      	uxth	r2, r3
 80134cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ce:	889b      	ldrh	r3, [r3, #4]
 80134d0:	b29b      	uxth	r3, r3
 80134d2:	429a      	cmp	r2, r3
 80134d4:	d002      	beq.n	80134dc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80134d6:	2300      	movs	r3, #0
 80134d8:	623b      	str	r3, [r7, #32]
            break;
 80134da:	e007      	b.n	80134ec <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80134dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134de:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80134e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80134e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d1e9      	bne.n	80134c0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80134ec:	6a3b      	ldr	r3, [r7, #32]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d022      	beq.n	8013538 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	685b      	ldr	r3, [r3, #4]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d106      	bne.n	8013508 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80134fa:	4b15      	ldr	r3, [pc, #84]	; (8013550 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80134fc:	f240 12df 	movw	r2, #479	; 0x1df
 8013500:	4917      	ldr	r1, [pc, #92]	; (8013560 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013502:	4815      	ldr	r0, [pc, #84]	; (8013558 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013504:	f000 fca4 	bl	8013e50 <iprintf>
          LWIP_ASSERT("sanity check",
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	685b      	ldr	r3, [r3, #4]
 801350c:	685b      	ldr	r3, [r3, #4]
 801350e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013510:	429a      	cmp	r2, r3
 8013512:	d106      	bne.n	8013522 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013514:	4b0e      	ldr	r3, [pc, #56]	; (8013550 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013516:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801351a:	4911      	ldr	r1, [pc, #68]	; (8013560 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801351c:	480e      	ldr	r0, [pc, #56]	; (8013558 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801351e:	f000 fc97 	bl	8013e50 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d006      	beq.n	8013538 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801352a:	4b09      	ldr	r3, [pc, #36]	; (8013550 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801352c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8013530:	490c      	ldr	r1, [pc, #48]	; (8013564 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013532:	4809      	ldr	r0, [pc, #36]	; (8013558 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013534:	f000 fc8c 	bl	8013e50 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013538:	6a3b      	ldr	r3, [r7, #32]
 801353a:	2b00      	cmp	r3, #0
 801353c:	bf14      	ite	ne
 801353e:	2301      	movne	r3, #1
 8013540:	2300      	moveq	r3, #0
 8013542:	b2db      	uxtb	r3, r3
 8013544:	e000      	b.n	8013548 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013546:	2300      	movs	r3, #0
}
 8013548:	4618      	mov	r0, r3
 801354a:	3730      	adds	r7, #48	; 0x30
 801354c:	46bd      	mov	sp, r7
 801354e:	bd80      	pop	{r7, pc}
 8013550:	08017ebc 	.word	0x08017ebc
 8013554:	08017fa0 	.word	0x08017fa0
 8013558:	08017f04 	.word	0x08017f04
 801355c:	08017fc0 	.word	0x08017fc0
 8013560:	08017ff8 	.word	0x08017ff8
 8013564:	08018008 	.word	0x08018008

08013568 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b08e      	sub	sp, #56	; 0x38
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	685b      	ldr	r3, [r3, #4]
 8013574:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013578:	781b      	ldrb	r3, [r3, #0]
 801357a:	f003 030f 	and.w	r3, r3, #15
 801357e:	b2db      	uxtb	r3, r3
 8013580:	009b      	lsls	r3, r3, #2
 8013582:	b2db      	uxtb	r3, r3
 8013584:	2b14      	cmp	r3, #20
 8013586:	f040 8171 	bne.w	801386c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801358a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801358c:	88db      	ldrh	r3, [r3, #6]
 801358e:	b29b      	uxth	r3, r3
 8013590:	4618      	mov	r0, r3
 8013592:	f7f4 fd13 	bl	8007fbc <lwip_htons>
 8013596:	4603      	mov	r3, r0
 8013598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801359c:	b29b      	uxth	r3, r3
 801359e:	00db      	lsls	r3, r3, #3
 80135a0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80135a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135a4:	885b      	ldrh	r3, [r3, #2]
 80135a6:	b29b      	uxth	r3, r3
 80135a8:	4618      	mov	r0, r3
 80135aa:	f7f4 fd07 	bl	8007fbc <lwip_htons>
 80135ae:	4603      	mov	r3, r0
 80135b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80135b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135b4:	781b      	ldrb	r3, [r3, #0]
 80135b6:	f003 030f 	and.w	r3, r3, #15
 80135ba:	b2db      	uxtb	r3, r3
 80135bc:	009b      	lsls	r3, r3, #2
 80135be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80135c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80135c6:	b29b      	uxth	r3, r3
 80135c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80135ca:	429a      	cmp	r2, r3
 80135cc:	f0c0 8150 	bcc.w	8013870 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80135d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80135d4:	b29b      	uxth	r3, r3
 80135d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80135d8:	1ad3      	subs	r3, r2, r3
 80135da:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80135dc:	6878      	ldr	r0, [r7, #4]
 80135de:	f7f6 f8df 	bl	80097a0 <pbuf_clen>
 80135e2:	4603      	mov	r3, r0
 80135e4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80135e6:	4b8c      	ldr	r3, [pc, #560]	; (8013818 <ip4_reass+0x2b0>)
 80135e8:	881b      	ldrh	r3, [r3, #0]
 80135ea:	461a      	mov	r2, r3
 80135ec:	8c3b      	ldrh	r3, [r7, #32]
 80135ee:	4413      	add	r3, r2
 80135f0:	2b0a      	cmp	r3, #10
 80135f2:	dd10      	ble.n	8013616 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80135f4:	8c3b      	ldrh	r3, [r7, #32]
 80135f6:	4619      	mov	r1, r3
 80135f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135fa:	f7ff fd81 	bl	8013100 <ip_reass_remove_oldest_datagram>
 80135fe:	4603      	mov	r3, r0
 8013600:	2b00      	cmp	r3, #0
 8013602:	f000 8137 	beq.w	8013874 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013606:	4b84      	ldr	r3, [pc, #528]	; (8013818 <ip4_reass+0x2b0>)
 8013608:	881b      	ldrh	r3, [r3, #0]
 801360a:	461a      	mov	r2, r3
 801360c:	8c3b      	ldrh	r3, [r7, #32]
 801360e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013610:	2b0a      	cmp	r3, #10
 8013612:	f300 812f 	bgt.w	8013874 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013616:	4b81      	ldr	r3, [pc, #516]	; (801381c <ip4_reass+0x2b4>)
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	633b      	str	r3, [r7, #48]	; 0x30
 801361c:	e015      	b.n	801364a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801361e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013620:	695a      	ldr	r2, [r3, #20]
 8013622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013624:	68db      	ldr	r3, [r3, #12]
 8013626:	429a      	cmp	r2, r3
 8013628:	d10c      	bne.n	8013644 <ip4_reass+0xdc>
 801362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801362c:	699a      	ldr	r2, [r3, #24]
 801362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013630:	691b      	ldr	r3, [r3, #16]
 8013632:	429a      	cmp	r2, r3
 8013634:	d106      	bne.n	8013644 <ip4_reass+0xdc>
 8013636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013638:	899a      	ldrh	r2, [r3, #12]
 801363a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801363c:	889b      	ldrh	r3, [r3, #4]
 801363e:	b29b      	uxth	r3, r3
 8013640:	429a      	cmp	r2, r3
 8013642:	d006      	beq.n	8013652 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	633b      	str	r3, [r7, #48]	; 0x30
 801364a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801364c:	2b00      	cmp	r3, #0
 801364e:	d1e6      	bne.n	801361e <ip4_reass+0xb6>
 8013650:	e000      	b.n	8013654 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013652:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013656:	2b00      	cmp	r3, #0
 8013658:	d109      	bne.n	801366e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801365a:	8c3b      	ldrh	r3, [r7, #32]
 801365c:	4619      	mov	r1, r3
 801365e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013660:	f7ff fdb0 	bl	80131c4 <ip_reass_enqueue_new_datagram>
 8013664:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013668:	2b00      	cmp	r3, #0
 801366a:	d11c      	bne.n	80136a6 <ip4_reass+0x13e>
      goto nullreturn;
 801366c:	e105      	b.n	801387a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013670:	88db      	ldrh	r3, [r3, #6]
 8013672:	b29b      	uxth	r3, r3
 8013674:	4618      	mov	r0, r3
 8013676:	f7f4 fca1 	bl	8007fbc <lwip_htons>
 801367a:	4603      	mov	r3, r0
 801367c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013680:	2b00      	cmp	r3, #0
 8013682:	d110      	bne.n	80136a6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013686:	89db      	ldrh	r3, [r3, #14]
 8013688:	4618      	mov	r0, r3
 801368a:	f7f4 fc97 	bl	8007fbc <lwip_htons>
 801368e:	4603      	mov	r3, r0
 8013690:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013694:	2b00      	cmp	r3, #0
 8013696:	d006      	beq.n	80136a6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801369a:	3308      	adds	r3, #8
 801369c:	2214      	movs	r2, #20
 801369e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80136a0:	4618      	mov	r0, r3
 80136a2:	f000 fba5 	bl	8013df0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80136a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a8:	88db      	ldrh	r3, [r3, #6]
 80136aa:	b29b      	uxth	r3, r3
 80136ac:	f003 0320 	and.w	r3, r3, #32
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	bf0c      	ite	eq
 80136b4:	2301      	moveq	r3, #1
 80136b6:	2300      	movne	r3, #0
 80136b8:	b2db      	uxtb	r3, r3
 80136ba:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80136bc:	69fb      	ldr	r3, [r7, #28]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d00e      	beq.n	80136e0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80136c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80136c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80136c6:	4413      	add	r3, r2
 80136c8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80136ca:	8b7a      	ldrh	r2, [r7, #26]
 80136cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80136ce:	429a      	cmp	r2, r3
 80136d0:	f0c0 80a0 	bcc.w	8013814 <ip4_reass+0x2ac>
 80136d4:	8b7b      	ldrh	r3, [r7, #26]
 80136d6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80136da:	4293      	cmp	r3, r2
 80136dc:	f200 809a 	bhi.w	8013814 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80136e0:	69fa      	ldr	r2, [r7, #28]
 80136e2:	6879      	ldr	r1, [r7, #4]
 80136e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80136e6:	f7ff fdd5 	bl	8013294 <ip_reass_chain_frag_into_datagram_and_validate>
 80136ea:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80136ec:	697b      	ldr	r3, [r7, #20]
 80136ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136f2:	f000 809b 	beq.w	801382c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80136f6:	4b48      	ldr	r3, [pc, #288]	; (8013818 <ip4_reass+0x2b0>)
 80136f8:	881a      	ldrh	r2, [r3, #0]
 80136fa:	8c3b      	ldrh	r3, [r7, #32]
 80136fc:	4413      	add	r3, r2
 80136fe:	b29a      	uxth	r2, r3
 8013700:	4b45      	ldr	r3, [pc, #276]	; (8013818 <ip4_reass+0x2b0>)
 8013702:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013704:	69fb      	ldr	r3, [r7, #28]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d00d      	beq.n	8013726 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801370a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801370c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801370e:	4413      	add	r3, r2
 8013710:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013714:	8a7a      	ldrh	r2, [r7, #18]
 8013716:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801371a:	7f9b      	ldrb	r3, [r3, #30]
 801371c:	f043 0301 	orr.w	r3, r3, #1
 8013720:	b2da      	uxtb	r2, r3
 8013722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013724:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013726:	697b      	ldr	r3, [r7, #20]
 8013728:	2b01      	cmp	r3, #1
 801372a:	d171      	bne.n	8013810 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801372e:	8b9b      	ldrh	r3, [r3, #28]
 8013730:	3314      	adds	r3, #20
 8013732:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013736:	685b      	ldr	r3, [r3, #4]
 8013738:	685b      	ldr	r3, [r3, #4]
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013740:	685b      	ldr	r3, [r3, #4]
 8013742:	685b      	ldr	r3, [r3, #4]
 8013744:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013748:	3308      	adds	r3, #8
 801374a:	2214      	movs	r2, #20
 801374c:	4619      	mov	r1, r3
 801374e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013750:	f000 fb4e 	bl	8013df0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013754:	8a3b      	ldrh	r3, [r7, #16]
 8013756:	4618      	mov	r0, r3
 8013758:	f7f4 fc30 	bl	8007fbc <lwip_htons>
 801375c:	4603      	mov	r3, r0
 801375e:	461a      	mov	r2, r3
 8013760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013762:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013766:	2200      	movs	r2, #0
 8013768:	719a      	strb	r2, [r3, #6]
 801376a:	2200      	movs	r2, #0
 801376c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013770:	2200      	movs	r2, #0
 8013772:	729a      	strb	r2, [r3, #10]
 8013774:	2200      	movs	r2, #0
 8013776:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801377a:	685b      	ldr	r3, [r3, #4]
 801377c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801377e:	e00d      	b.n	801379c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013782:	685b      	ldr	r3, [r3, #4]
 8013784:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013786:	2114      	movs	r1, #20
 8013788:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801378a:	f7f5 fefb 	bl	8009584 <pbuf_remove_header>
      pbuf_cat(p, r);
 801378e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013790:	6878      	ldr	r0, [r7, #4]
 8013792:	f7f6 f83f 	bl	8009814 <pbuf_cat>
      r = iprh->next_pbuf;
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801379c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d1ee      	bne.n	8013780 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80137a2:	4b1e      	ldr	r3, [pc, #120]	; (801381c <ip4_reass+0x2b4>)
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137a8:	429a      	cmp	r2, r3
 80137aa:	d102      	bne.n	80137b2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80137ac:	2300      	movs	r3, #0
 80137ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80137b0:	e010      	b.n	80137d4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80137b2:	4b1a      	ldr	r3, [pc, #104]	; (801381c <ip4_reass+0x2b4>)
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80137b8:	e007      	b.n	80137ca <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80137ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137c0:	429a      	cmp	r2, r3
 80137c2:	d006      	beq.n	80137d2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80137c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80137ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d1f4      	bne.n	80137ba <ip4_reass+0x252>
 80137d0:	e000      	b.n	80137d4 <ip4_reass+0x26c>
          break;
 80137d2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80137d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80137d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80137d8:	f7ff fd2e 	bl	8013238 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80137dc:	6878      	ldr	r0, [r7, #4]
 80137de:	f7f5 ffdf 	bl	80097a0 <pbuf_clen>
 80137e2:	4603      	mov	r3, r0
 80137e4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80137e6:	4b0c      	ldr	r3, [pc, #48]	; (8013818 <ip4_reass+0x2b0>)
 80137e8:	881b      	ldrh	r3, [r3, #0]
 80137ea:	8c3a      	ldrh	r2, [r7, #32]
 80137ec:	429a      	cmp	r2, r3
 80137ee:	d906      	bls.n	80137fe <ip4_reass+0x296>
 80137f0:	4b0b      	ldr	r3, [pc, #44]	; (8013820 <ip4_reass+0x2b8>)
 80137f2:	f240 229b 	movw	r2, #667	; 0x29b
 80137f6:	490b      	ldr	r1, [pc, #44]	; (8013824 <ip4_reass+0x2bc>)
 80137f8:	480b      	ldr	r0, [pc, #44]	; (8013828 <ip4_reass+0x2c0>)
 80137fa:	f000 fb29 	bl	8013e50 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80137fe:	4b06      	ldr	r3, [pc, #24]	; (8013818 <ip4_reass+0x2b0>)
 8013800:	881a      	ldrh	r2, [r3, #0]
 8013802:	8c3b      	ldrh	r3, [r7, #32]
 8013804:	1ad3      	subs	r3, r2, r3
 8013806:	b29a      	uxth	r2, r3
 8013808:	4b03      	ldr	r3, [pc, #12]	; (8013818 <ip4_reass+0x2b0>)
 801380a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	e038      	b.n	8013882 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013810:	2300      	movs	r3, #0
 8013812:	e036      	b.n	8013882 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8013814:	bf00      	nop
 8013816:	e00a      	b.n	801382e <ip4_reass+0x2c6>
 8013818:	2000b04c 	.word	0x2000b04c
 801381c:	2000b048 	.word	0x2000b048
 8013820:	08017ebc 	.word	0x08017ebc
 8013824:	0801802c 	.word	0x0801802c
 8013828:	08017f04 	.word	0x08017f04
    goto nullreturn_ipr;
 801382c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013830:	2b00      	cmp	r3, #0
 8013832:	d106      	bne.n	8013842 <ip4_reass+0x2da>
 8013834:	4b15      	ldr	r3, [pc, #84]	; (801388c <ip4_reass+0x324>)
 8013836:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801383a:	4915      	ldr	r1, [pc, #84]	; (8013890 <ip4_reass+0x328>)
 801383c:	4815      	ldr	r0, [pc, #84]	; (8013894 <ip4_reass+0x32c>)
 801383e:	f000 fb07 	bl	8013e50 <iprintf>
  if (ipr->p == NULL) {
 8013842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013844:	685b      	ldr	r3, [r3, #4]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d116      	bne.n	8013878 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801384a:	4b13      	ldr	r3, [pc, #76]	; (8013898 <ip4_reass+0x330>)
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013850:	429a      	cmp	r2, r3
 8013852:	d006      	beq.n	8013862 <ip4_reass+0x2fa>
 8013854:	4b0d      	ldr	r3, [pc, #52]	; (801388c <ip4_reass+0x324>)
 8013856:	f240 22ab 	movw	r2, #683	; 0x2ab
 801385a:	4910      	ldr	r1, [pc, #64]	; (801389c <ip4_reass+0x334>)
 801385c:	480d      	ldr	r0, [pc, #52]	; (8013894 <ip4_reass+0x32c>)
 801385e:	f000 faf7 	bl	8013e50 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013862:	2100      	movs	r1, #0
 8013864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013866:	f7ff fce7 	bl	8013238 <ip_reass_dequeue_datagram>
 801386a:	e006      	b.n	801387a <ip4_reass+0x312>
    goto nullreturn;
 801386c:	bf00      	nop
 801386e:	e004      	b.n	801387a <ip4_reass+0x312>
    goto nullreturn;
 8013870:	bf00      	nop
 8013872:	e002      	b.n	801387a <ip4_reass+0x312>
      goto nullreturn;
 8013874:	bf00      	nop
 8013876:	e000      	b.n	801387a <ip4_reass+0x312>
  }

nullreturn:
 8013878:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801387a:	6878      	ldr	r0, [r7, #4]
 801387c:	f7f5 ff08 	bl	8009690 <pbuf_free>
  return NULL;
 8013880:	2300      	movs	r3, #0
}
 8013882:	4618      	mov	r0, r3
 8013884:	3738      	adds	r7, #56	; 0x38
 8013886:	46bd      	mov	sp, r7
 8013888:	bd80      	pop	{r7, pc}
 801388a:	bf00      	nop
 801388c:	08017ebc 	.word	0x08017ebc
 8013890:	08018048 	.word	0x08018048
 8013894:	08017f04 	.word	0x08017f04
 8013898:	2000b048 	.word	0x2000b048
 801389c:	08018054 	.word	0x08018054

080138a0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80138a4:	2005      	movs	r0, #5
 80138a6:	f7f5 f801 	bl	80088ac <memp_malloc>
 80138aa:	4603      	mov	r3, r0
}
 80138ac:	4618      	mov	r0, r3
 80138ae:	bd80      	pop	{r7, pc}

080138b0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b082      	sub	sp, #8
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d106      	bne.n	80138cc <ip_frag_free_pbuf_custom_ref+0x1c>
 80138be:	4b07      	ldr	r3, [pc, #28]	; (80138dc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80138c0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80138c4:	4906      	ldr	r1, [pc, #24]	; (80138e0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80138c6:	4807      	ldr	r0, [pc, #28]	; (80138e4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80138c8:	f000 fac2 	bl	8013e50 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80138cc:	6879      	ldr	r1, [r7, #4]
 80138ce:	2005      	movs	r0, #5
 80138d0:	f7f5 f85c 	bl	800898c <memp_free>
}
 80138d4:	bf00      	nop
 80138d6:	3708      	adds	r7, #8
 80138d8:	46bd      	mov	sp, r7
 80138da:	bd80      	pop	{r7, pc}
 80138dc:	08017ebc 	.word	0x08017ebc
 80138e0:	08018074 	.word	0x08018074
 80138e4:	08017f04 	.word	0x08017f04

080138e8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b084      	sub	sp, #16
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d106      	bne.n	8013908 <ipfrag_free_pbuf_custom+0x20>
 80138fa:	4b11      	ldr	r3, [pc, #68]	; (8013940 <ipfrag_free_pbuf_custom+0x58>)
 80138fc:	f240 22ce 	movw	r2, #718	; 0x2ce
 8013900:	4910      	ldr	r1, [pc, #64]	; (8013944 <ipfrag_free_pbuf_custom+0x5c>)
 8013902:	4811      	ldr	r0, [pc, #68]	; (8013948 <ipfrag_free_pbuf_custom+0x60>)
 8013904:	f000 faa4 	bl	8013e50 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013908:	68fa      	ldr	r2, [r7, #12]
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	429a      	cmp	r2, r3
 801390e:	d006      	beq.n	801391e <ipfrag_free_pbuf_custom+0x36>
 8013910:	4b0b      	ldr	r3, [pc, #44]	; (8013940 <ipfrag_free_pbuf_custom+0x58>)
 8013912:	f240 22cf 	movw	r2, #719	; 0x2cf
 8013916:	490d      	ldr	r1, [pc, #52]	; (801394c <ipfrag_free_pbuf_custom+0x64>)
 8013918:	480b      	ldr	r0, [pc, #44]	; (8013948 <ipfrag_free_pbuf_custom+0x60>)
 801391a:	f000 fa99 	bl	8013e50 <iprintf>
  if (pcr->original != NULL) {
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	695b      	ldr	r3, [r3, #20]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d004      	beq.n	8013930 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	695b      	ldr	r3, [r3, #20]
 801392a:	4618      	mov	r0, r3
 801392c:	f7f5 feb0 	bl	8009690 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013930:	68f8      	ldr	r0, [r7, #12]
 8013932:	f7ff ffbd 	bl	80138b0 <ip_frag_free_pbuf_custom_ref>
}
 8013936:	bf00      	nop
 8013938:	3710      	adds	r7, #16
 801393a:	46bd      	mov	sp, r7
 801393c:	bd80      	pop	{r7, pc}
 801393e:	bf00      	nop
 8013940:	08017ebc 	.word	0x08017ebc
 8013944:	08018080 	.word	0x08018080
 8013948:	08017f04 	.word	0x08017f04
 801394c:	0801808c 	.word	0x0801808c

08013950 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013950:	b580      	push	{r7, lr}
 8013952:	b094      	sub	sp, #80	; 0x50
 8013954:	af02      	add	r7, sp, #8
 8013956:	60f8      	str	r0, [r7, #12]
 8013958:	60b9      	str	r1, [r7, #8]
 801395a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801395c:	2300      	movs	r3, #0
 801395e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013962:	68bb      	ldr	r3, [r7, #8]
 8013964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013966:	3b14      	subs	r3, #20
 8013968:	2b00      	cmp	r3, #0
 801396a:	da00      	bge.n	801396e <ip4_frag+0x1e>
 801396c:	3307      	adds	r3, #7
 801396e:	10db      	asrs	r3, r3, #3
 8013970:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013972:	2314      	movs	r3, #20
 8013974:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	685b      	ldr	r3, [r3, #4]
 801397a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801397c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801397e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013982:	781b      	ldrb	r3, [r3, #0]
 8013984:	f003 030f 	and.w	r3, r3, #15
 8013988:	b2db      	uxtb	r3, r3
 801398a:	009b      	lsls	r3, r3, #2
 801398c:	b2db      	uxtb	r3, r3
 801398e:	2b14      	cmp	r3, #20
 8013990:	d002      	beq.n	8013998 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013992:	f06f 0305 	mvn.w	r3, #5
 8013996:	e110      	b.n	8013bba <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	895b      	ldrh	r3, [r3, #10]
 801399c:	2b13      	cmp	r3, #19
 801399e:	d809      	bhi.n	80139b4 <ip4_frag+0x64>
 80139a0:	4b88      	ldr	r3, [pc, #544]	; (8013bc4 <ip4_frag+0x274>)
 80139a2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80139a6:	4988      	ldr	r1, [pc, #544]	; (8013bc8 <ip4_frag+0x278>)
 80139a8:	4888      	ldr	r0, [pc, #544]	; (8013bcc <ip4_frag+0x27c>)
 80139aa:	f000 fa51 	bl	8013e50 <iprintf>
 80139ae:	f06f 0305 	mvn.w	r3, #5
 80139b2:	e102      	b.n	8013bba <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80139b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b6:	88db      	ldrh	r3, [r3, #6]
 80139b8:	b29b      	uxth	r3, r3
 80139ba:	4618      	mov	r0, r3
 80139bc:	f7f4 fafe 	bl	8007fbc <lwip_htons>
 80139c0:	4603      	mov	r3, r0
 80139c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80139c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80139c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80139ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80139ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80139d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80139d4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	891b      	ldrh	r3, [r3, #8]
 80139da:	3b14      	subs	r3, #20
 80139dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80139e0:	e0e1      	b.n	8013ba6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80139e2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80139e4:	00db      	lsls	r3, r3, #3
 80139e6:	b29b      	uxth	r3, r3
 80139e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80139ec:	4293      	cmp	r3, r2
 80139ee:	bf28      	it	cs
 80139f0:	4613      	movcs	r3, r2
 80139f2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80139f4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80139f8:	2114      	movs	r1, #20
 80139fa:	200e      	movs	r0, #14
 80139fc:	f7f5 fb64 	bl	80090c8 <pbuf_alloc>
 8013a00:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8013a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	f000 80d5 	beq.w	8013bb4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a0c:	895b      	ldrh	r3, [r3, #10]
 8013a0e:	2b13      	cmp	r3, #19
 8013a10:	d806      	bhi.n	8013a20 <ip4_frag+0xd0>
 8013a12:	4b6c      	ldr	r3, [pc, #432]	; (8013bc4 <ip4_frag+0x274>)
 8013a14:	f44f 7249 	mov.w	r2, #804	; 0x324
 8013a18:	496d      	ldr	r1, [pc, #436]	; (8013bd0 <ip4_frag+0x280>)
 8013a1a:	486c      	ldr	r0, [pc, #432]	; (8013bcc <ip4_frag+0x27c>)
 8013a1c:	f000 fa18 	bl	8013e50 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a22:	685b      	ldr	r3, [r3, #4]
 8013a24:	2214      	movs	r2, #20
 8013a26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013a28:	4618      	mov	r0, r3
 8013a2a:	f000 f9e1 	bl	8013df0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a30:	685b      	ldr	r3, [r3, #4]
 8013a32:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8013a34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013a36:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8013a3a:	e064      	b.n	8013b06 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	895a      	ldrh	r2, [r3, #10]
 8013a40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013a42:	1ad3      	subs	r3, r2, r3
 8013a44:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	895b      	ldrh	r3, [r3, #10]
 8013a4a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013a4c:	429a      	cmp	r2, r3
 8013a4e:	d906      	bls.n	8013a5e <ip4_frag+0x10e>
 8013a50:	4b5c      	ldr	r3, [pc, #368]	; (8013bc4 <ip4_frag+0x274>)
 8013a52:	f240 322d 	movw	r2, #813	; 0x32d
 8013a56:	495f      	ldr	r1, [pc, #380]	; (8013bd4 <ip4_frag+0x284>)
 8013a58:	485c      	ldr	r0, [pc, #368]	; (8013bcc <ip4_frag+0x27c>)
 8013a5a:	f000 f9f9 	bl	8013e50 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013a5e:	8bfa      	ldrh	r2, [r7, #30]
 8013a60:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013a64:	4293      	cmp	r3, r2
 8013a66:	bf28      	it	cs
 8013a68:	4613      	movcs	r3, r2
 8013a6a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013a6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d105      	bne.n	8013a82 <ip4_frag+0x132>
        poff = 0;
 8013a76:	2300      	movs	r3, #0
 8013a78:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	60fb      	str	r3, [r7, #12]
        continue;
 8013a80:	e041      	b.n	8013b06 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013a82:	f7ff ff0d 	bl	80138a0 <ip_frag_alloc_pbuf_custom_ref>
 8013a86:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013a88:	69bb      	ldr	r3, [r7, #24]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d103      	bne.n	8013a96 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013a8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a90:	f7f5 fdfe 	bl	8009690 <pbuf_free>
        goto memerr;
 8013a94:	e08f      	b.n	8013bb6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013a96:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013a9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013a9e:	4413      	add	r3, r2
 8013aa0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013aa4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013aa8:	9201      	str	r2, [sp, #4]
 8013aaa:	9300      	str	r3, [sp, #0]
 8013aac:	4603      	mov	r3, r0
 8013aae:	2241      	movs	r2, #65	; 0x41
 8013ab0:	2000      	movs	r0, #0
 8013ab2:	f7f5 fc33 	bl	800931c <pbuf_alloced_custom>
 8013ab6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013ab8:	697b      	ldr	r3, [r7, #20]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d106      	bne.n	8013acc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013abe:	69b8      	ldr	r0, [r7, #24]
 8013ac0:	f7ff fef6 	bl	80138b0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013ac4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ac6:	f7f5 fde3 	bl	8009690 <pbuf_free>
        goto memerr;
 8013aca:	e074      	b.n	8013bb6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013acc:	68f8      	ldr	r0, [r7, #12]
 8013ace:	f7f5 fe7f 	bl	80097d0 <pbuf_ref>
      pcr->original = p;
 8013ad2:	69bb      	ldr	r3, [r7, #24]
 8013ad4:	68fa      	ldr	r2, [r7, #12]
 8013ad6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013ad8:	69bb      	ldr	r3, [r7, #24]
 8013ada:	4a3f      	ldr	r2, [pc, #252]	; (8013bd8 <ip4_frag+0x288>)
 8013adc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013ade:	6979      	ldr	r1, [r7, #20]
 8013ae0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ae2:	f7f5 fe97 	bl	8009814 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013ae6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013aea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013aee:	1ad3      	subs	r3, r2, r3
 8013af0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013af4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d004      	beq.n	8013b06 <ip4_frag+0x1b6>
        poff = 0;
 8013afc:	2300      	movs	r3, #0
 8013afe:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013b06:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d196      	bne.n	8013a3c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013b0e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013b10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013b14:	4413      	add	r3, r2
 8013b16:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013b18:	68bb      	ldr	r3, [r7, #8]
 8013b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013b1c:	f1a3 0213 	sub.w	r2, r3, #19
 8013b20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013b24:	429a      	cmp	r2, r3
 8013b26:	bfcc      	ite	gt
 8013b28:	2301      	movgt	r3, #1
 8013b2a:	2300      	movle	r3, #0
 8013b2c:	b2db      	uxtb	r3, r3
 8013b2e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013b30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013b34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013b38:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013b3a:	6a3b      	ldr	r3, [r7, #32]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d002      	beq.n	8013b46 <ip4_frag+0x1f6>
 8013b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d003      	beq.n	8013b4e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013b46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013b48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013b4c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013b4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013b50:	4618      	mov	r0, r3
 8013b52:	f7f4 fa33 	bl	8007fbc <lwip_htons>
 8013b56:	4603      	mov	r3, r0
 8013b58:	461a      	mov	r2, r3
 8013b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b5c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013b5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013b60:	3314      	adds	r3, #20
 8013b62:	b29b      	uxth	r3, r3
 8013b64:	4618      	mov	r0, r3
 8013b66:	f7f4 fa29 	bl	8007fbc <lwip_htons>
 8013b6a:	4603      	mov	r3, r0
 8013b6c:	461a      	mov	r2, r3
 8013b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b70:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b74:	2200      	movs	r2, #0
 8013b76:	729a      	strb	r2, [r3, #10]
 8013b78:	2200      	movs	r2, #0
 8013b7a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013b7c:	68bb      	ldr	r3, [r7, #8]
 8013b7e:	695b      	ldr	r3, [r3, #20]
 8013b80:	687a      	ldr	r2, [r7, #4]
 8013b82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013b84:	68b8      	ldr	r0, [r7, #8]
 8013b86:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013b88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b8a:	f7f5 fd81 	bl	8009690 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013b8e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013b92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013b94:	1ad3      	subs	r3, r2, r3
 8013b96:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013b9a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013b9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013ba0:	4413      	add	r3, r2
 8013ba2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013ba6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	f47f af19 	bne.w	80139e2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013bb0:	2300      	movs	r3, #0
 8013bb2:	e002      	b.n	8013bba <ip4_frag+0x26a>
      goto memerr;
 8013bb4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013bb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013bba:	4618      	mov	r0, r3
 8013bbc:	3748      	adds	r7, #72	; 0x48
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bd80      	pop	{r7, pc}
 8013bc2:	bf00      	nop
 8013bc4:	08017ebc 	.word	0x08017ebc
 8013bc8:	08018098 	.word	0x08018098
 8013bcc:	08017f04 	.word	0x08017f04
 8013bd0:	080180b4 	.word	0x080180b4
 8013bd4:	080180d4 	.word	0x080180d4
 8013bd8:	080138e9 	.word	0x080138e9

08013bdc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b086      	sub	sp, #24
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
 8013be4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013be6:	230e      	movs	r3, #14
 8013be8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	895b      	ldrh	r3, [r3, #10]
 8013bee:	2b0e      	cmp	r3, #14
 8013bf0:	d96e      	bls.n	8013cd0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	7bdb      	ldrb	r3, [r3, #15]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d106      	bne.n	8013c08 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013bfa:	683b      	ldr	r3, [r7, #0]
 8013bfc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013c00:	3301      	adds	r3, #1
 8013c02:	b2da      	uxtb	r2, r3
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	685b      	ldr	r3, [r3, #4]
 8013c0c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013c0e:	693b      	ldr	r3, [r7, #16]
 8013c10:	7b1a      	ldrb	r2, [r3, #12]
 8013c12:	7b5b      	ldrb	r3, [r3, #13]
 8013c14:	021b      	lsls	r3, r3, #8
 8013c16:	4313      	orrs	r3, r2
 8013c18:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013c1a:	693b      	ldr	r3, [r7, #16]
 8013c1c:	781b      	ldrb	r3, [r3, #0]
 8013c1e:	f003 0301 	and.w	r3, r3, #1
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d023      	beq.n	8013c6e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013c26:	693b      	ldr	r3, [r7, #16]
 8013c28:	781b      	ldrb	r3, [r3, #0]
 8013c2a:	2b01      	cmp	r3, #1
 8013c2c:	d10f      	bne.n	8013c4e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013c2e:	693b      	ldr	r3, [r7, #16]
 8013c30:	785b      	ldrb	r3, [r3, #1]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d11b      	bne.n	8013c6e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013c36:	693b      	ldr	r3, [r7, #16]
 8013c38:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013c3a:	2b5e      	cmp	r3, #94	; 0x5e
 8013c3c:	d117      	bne.n	8013c6e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	7b5b      	ldrb	r3, [r3, #13]
 8013c42:	f043 0310 	orr.w	r3, r3, #16
 8013c46:	b2da      	uxtb	r2, r3
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	735a      	strb	r2, [r3, #13]
 8013c4c:	e00f      	b.n	8013c6e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013c4e:	693b      	ldr	r3, [r7, #16]
 8013c50:	2206      	movs	r2, #6
 8013c52:	4928      	ldr	r1, [pc, #160]	; (8013cf4 <ethernet_input+0x118>)
 8013c54:	4618      	mov	r0, r3
 8013c56:	f000 f8bb 	bl	8013dd0 <memcmp>
 8013c5a:	4603      	mov	r3, r0
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d106      	bne.n	8013c6e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	7b5b      	ldrb	r3, [r3, #13]
 8013c64:	f043 0308 	orr.w	r3, r3, #8
 8013c68:	b2da      	uxtb	r2, r3
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013c6e:	89fb      	ldrh	r3, [r7, #14]
 8013c70:	2b08      	cmp	r3, #8
 8013c72:	d003      	beq.n	8013c7c <ethernet_input+0xa0>
 8013c74:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013c78:	d014      	beq.n	8013ca4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013c7a:	e032      	b.n	8013ce2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013c7c:	683b      	ldr	r3, [r7, #0]
 8013c7e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013c82:	f003 0308 	and.w	r3, r3, #8
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d024      	beq.n	8013cd4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013c8a:	8afb      	ldrh	r3, [r7, #22]
 8013c8c:	4619      	mov	r1, r3
 8013c8e:	6878      	ldr	r0, [r7, #4]
 8013c90:	f7f5 fc78 	bl	8009584 <pbuf_remove_header>
 8013c94:	4603      	mov	r3, r0
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d11e      	bne.n	8013cd8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013c9a:	6839      	ldr	r1, [r7, #0]
 8013c9c:	6878      	ldr	r0, [r7, #4]
 8013c9e:	f7fe ff03 	bl	8012aa8 <ip4_input>
      break;
 8013ca2:	e013      	b.n	8013ccc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013ca4:	683b      	ldr	r3, [r7, #0]
 8013ca6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013caa:	f003 0308 	and.w	r3, r3, #8
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d014      	beq.n	8013cdc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013cb2:	8afb      	ldrh	r3, [r7, #22]
 8013cb4:	4619      	mov	r1, r3
 8013cb6:	6878      	ldr	r0, [r7, #4]
 8013cb8:	f7f5 fc64 	bl	8009584 <pbuf_remove_header>
 8013cbc:	4603      	mov	r3, r0
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d10e      	bne.n	8013ce0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013cc2:	6839      	ldr	r1, [r7, #0]
 8013cc4:	6878      	ldr	r0, [r7, #4]
 8013cc6:	f7fe f89f 	bl	8011e08 <etharp_input>
      break;
 8013cca:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013ccc:	2300      	movs	r3, #0
 8013cce:	e00c      	b.n	8013cea <ethernet_input+0x10e>
    goto free_and_return;
 8013cd0:	bf00      	nop
 8013cd2:	e006      	b.n	8013ce2 <ethernet_input+0x106>
        goto free_and_return;
 8013cd4:	bf00      	nop
 8013cd6:	e004      	b.n	8013ce2 <ethernet_input+0x106>
        goto free_and_return;
 8013cd8:	bf00      	nop
 8013cda:	e002      	b.n	8013ce2 <ethernet_input+0x106>
        goto free_and_return;
 8013cdc:	bf00      	nop
 8013cde:	e000      	b.n	8013ce2 <ethernet_input+0x106>
        goto free_and_return;
 8013ce0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013ce2:	6878      	ldr	r0, [r7, #4]
 8013ce4:	f7f5 fcd4 	bl	8009690 <pbuf_free>
  return ERR_OK;
 8013ce8:	2300      	movs	r3, #0
}
 8013cea:	4618      	mov	r0, r3
 8013cec:	3718      	adds	r7, #24
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	bd80      	pop	{r7, pc}
 8013cf2:	bf00      	nop
 8013cf4:	0801a7ac 	.word	0x0801a7ac

08013cf8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b086      	sub	sp, #24
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	60f8      	str	r0, [r7, #12]
 8013d00:	60b9      	str	r1, [r7, #8]
 8013d02:	607a      	str	r2, [r7, #4]
 8013d04:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013d06:	8c3b      	ldrh	r3, [r7, #32]
 8013d08:	4618      	mov	r0, r3
 8013d0a:	f7f4 f957 	bl	8007fbc <lwip_htons>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013d12:	210e      	movs	r1, #14
 8013d14:	68b8      	ldr	r0, [r7, #8]
 8013d16:	f7f5 fc25 	bl	8009564 <pbuf_add_header>
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d125      	bne.n	8013d6c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013d20:	68bb      	ldr	r3, [r7, #8]
 8013d22:	685b      	ldr	r3, [r3, #4]
 8013d24:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013d26:	693b      	ldr	r3, [r7, #16]
 8013d28:	8afa      	ldrh	r2, [r7, #22]
 8013d2a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013d2c:	693b      	ldr	r3, [r7, #16]
 8013d2e:	2206      	movs	r2, #6
 8013d30:	6839      	ldr	r1, [r7, #0]
 8013d32:	4618      	mov	r0, r3
 8013d34:	f000 f85c 	bl	8013df0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013d38:	693b      	ldr	r3, [r7, #16]
 8013d3a:	3306      	adds	r3, #6
 8013d3c:	2206      	movs	r2, #6
 8013d3e:	6879      	ldr	r1, [r7, #4]
 8013d40:	4618      	mov	r0, r3
 8013d42:	f000 f855 	bl	8013df0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013d4c:	2b06      	cmp	r3, #6
 8013d4e:	d006      	beq.n	8013d5e <ethernet_output+0x66>
 8013d50:	4b0a      	ldr	r3, [pc, #40]	; (8013d7c <ethernet_output+0x84>)
 8013d52:	f44f 7299 	mov.w	r2, #306	; 0x132
 8013d56:	490a      	ldr	r1, [pc, #40]	; (8013d80 <ethernet_output+0x88>)
 8013d58:	480a      	ldr	r0, [pc, #40]	; (8013d84 <ethernet_output+0x8c>)
 8013d5a:	f000 f879 	bl	8013e50 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	699b      	ldr	r3, [r3, #24]
 8013d62:	68b9      	ldr	r1, [r7, #8]
 8013d64:	68f8      	ldr	r0, [r7, #12]
 8013d66:	4798      	blx	r3
 8013d68:	4603      	mov	r3, r0
 8013d6a:	e002      	b.n	8013d72 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013d6c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013d6e:	f06f 0301 	mvn.w	r3, #1
}
 8013d72:	4618      	mov	r0, r3
 8013d74:	3718      	adds	r7, #24
 8013d76:	46bd      	mov	sp, r7
 8013d78:	bd80      	pop	{r7, pc}
 8013d7a:	bf00      	nop
 8013d7c:	080180e4 	.word	0x080180e4
 8013d80:	0801811c 	.word	0x0801811c
 8013d84:	08018150 	.word	0x08018150

08013d88 <__libc_init_array>:
 8013d88:	b570      	push	{r4, r5, r6, lr}
 8013d8a:	4d0d      	ldr	r5, [pc, #52]	; (8013dc0 <__libc_init_array+0x38>)
 8013d8c:	4c0d      	ldr	r4, [pc, #52]	; (8013dc4 <__libc_init_array+0x3c>)
 8013d8e:	1b64      	subs	r4, r4, r5
 8013d90:	10a4      	asrs	r4, r4, #2
 8013d92:	2600      	movs	r6, #0
 8013d94:	42a6      	cmp	r6, r4
 8013d96:	d109      	bne.n	8013dac <__libc_init_array+0x24>
 8013d98:	4d0b      	ldr	r5, [pc, #44]	; (8013dc8 <__libc_init_array+0x40>)
 8013d9a:	4c0c      	ldr	r4, [pc, #48]	; (8013dcc <__libc_init_array+0x44>)
 8013d9c:	f001 fa5c 	bl	8015258 <_init>
 8013da0:	1b64      	subs	r4, r4, r5
 8013da2:	10a4      	asrs	r4, r4, #2
 8013da4:	2600      	movs	r6, #0
 8013da6:	42a6      	cmp	r6, r4
 8013da8:	d105      	bne.n	8013db6 <__libc_init_array+0x2e>
 8013daa:	bd70      	pop	{r4, r5, r6, pc}
 8013dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8013db0:	4798      	blx	r3
 8013db2:	3601      	adds	r6, #1
 8013db4:	e7ee      	b.n	8013d94 <__libc_init_array+0xc>
 8013db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8013dba:	4798      	blx	r3
 8013dbc:	3601      	adds	r6, #1
 8013dbe:	e7f2      	b.n	8013da6 <__libc_init_array+0x1e>
 8013dc0:	0801a90c 	.word	0x0801a90c
 8013dc4:	0801a90c 	.word	0x0801a90c
 8013dc8:	0801a90c 	.word	0x0801a90c
 8013dcc:	0801a910 	.word	0x0801a910

08013dd0 <memcmp>:
 8013dd0:	b510      	push	{r4, lr}
 8013dd2:	3901      	subs	r1, #1
 8013dd4:	4402      	add	r2, r0
 8013dd6:	4290      	cmp	r0, r2
 8013dd8:	d101      	bne.n	8013dde <memcmp+0xe>
 8013dda:	2000      	movs	r0, #0
 8013ddc:	e005      	b.n	8013dea <memcmp+0x1a>
 8013dde:	7803      	ldrb	r3, [r0, #0]
 8013de0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013de4:	42a3      	cmp	r3, r4
 8013de6:	d001      	beq.n	8013dec <memcmp+0x1c>
 8013de8:	1b18      	subs	r0, r3, r4
 8013dea:	bd10      	pop	{r4, pc}
 8013dec:	3001      	adds	r0, #1
 8013dee:	e7f2      	b.n	8013dd6 <memcmp+0x6>

08013df0 <memcpy>:
 8013df0:	440a      	add	r2, r1
 8013df2:	4291      	cmp	r1, r2
 8013df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8013df8:	d100      	bne.n	8013dfc <memcpy+0xc>
 8013dfa:	4770      	bx	lr
 8013dfc:	b510      	push	{r4, lr}
 8013dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013e06:	4291      	cmp	r1, r2
 8013e08:	d1f9      	bne.n	8013dfe <memcpy+0xe>
 8013e0a:	bd10      	pop	{r4, pc}

08013e0c <memmove>:
 8013e0c:	4288      	cmp	r0, r1
 8013e0e:	b510      	push	{r4, lr}
 8013e10:	eb01 0402 	add.w	r4, r1, r2
 8013e14:	d902      	bls.n	8013e1c <memmove+0x10>
 8013e16:	4284      	cmp	r4, r0
 8013e18:	4623      	mov	r3, r4
 8013e1a:	d807      	bhi.n	8013e2c <memmove+0x20>
 8013e1c:	1e43      	subs	r3, r0, #1
 8013e1e:	42a1      	cmp	r1, r4
 8013e20:	d008      	beq.n	8013e34 <memmove+0x28>
 8013e22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013e26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013e2a:	e7f8      	b.n	8013e1e <memmove+0x12>
 8013e2c:	4402      	add	r2, r0
 8013e2e:	4601      	mov	r1, r0
 8013e30:	428a      	cmp	r2, r1
 8013e32:	d100      	bne.n	8013e36 <memmove+0x2a>
 8013e34:	bd10      	pop	{r4, pc}
 8013e36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013e3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013e3e:	e7f7      	b.n	8013e30 <memmove+0x24>

08013e40 <memset>:
 8013e40:	4402      	add	r2, r0
 8013e42:	4603      	mov	r3, r0
 8013e44:	4293      	cmp	r3, r2
 8013e46:	d100      	bne.n	8013e4a <memset+0xa>
 8013e48:	4770      	bx	lr
 8013e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8013e4e:	e7f9      	b.n	8013e44 <memset+0x4>

08013e50 <iprintf>:
 8013e50:	b40f      	push	{r0, r1, r2, r3}
 8013e52:	4b0a      	ldr	r3, [pc, #40]	; (8013e7c <iprintf+0x2c>)
 8013e54:	b513      	push	{r0, r1, r4, lr}
 8013e56:	681c      	ldr	r4, [r3, #0]
 8013e58:	b124      	cbz	r4, 8013e64 <iprintf+0x14>
 8013e5a:	69a3      	ldr	r3, [r4, #24]
 8013e5c:	b913      	cbnz	r3, 8013e64 <iprintf+0x14>
 8013e5e:	4620      	mov	r0, r4
 8013e60:	f000 f8e2 	bl	8014028 <__sinit>
 8013e64:	ab05      	add	r3, sp, #20
 8013e66:	9a04      	ldr	r2, [sp, #16]
 8013e68:	68a1      	ldr	r1, [r4, #8]
 8013e6a:	9301      	str	r3, [sp, #4]
 8013e6c:	4620      	mov	r0, r4
 8013e6e:	f000 fbfb 	bl	8014668 <_vfiprintf_r>
 8013e72:	b002      	add	sp, #8
 8013e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e78:	b004      	add	sp, #16
 8013e7a:	4770      	bx	lr
 8013e7c:	20000048 	.word	0x20000048

08013e80 <rand>:
 8013e80:	4b16      	ldr	r3, [pc, #88]	; (8013edc <rand+0x5c>)
 8013e82:	b510      	push	{r4, lr}
 8013e84:	681c      	ldr	r4, [r3, #0]
 8013e86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013e88:	b9b3      	cbnz	r3, 8013eb8 <rand+0x38>
 8013e8a:	2018      	movs	r0, #24
 8013e8c:	f000 f97e 	bl	801418c <malloc>
 8013e90:	63a0      	str	r0, [r4, #56]	; 0x38
 8013e92:	b928      	cbnz	r0, 8013ea0 <rand+0x20>
 8013e94:	4602      	mov	r2, r0
 8013e96:	4b12      	ldr	r3, [pc, #72]	; (8013ee0 <rand+0x60>)
 8013e98:	4812      	ldr	r0, [pc, #72]	; (8013ee4 <rand+0x64>)
 8013e9a:	214e      	movs	r1, #78	; 0x4e
 8013e9c:	f000 f84e 	bl	8013f3c <__assert_func>
 8013ea0:	4a11      	ldr	r2, [pc, #68]	; (8013ee8 <rand+0x68>)
 8013ea2:	4b12      	ldr	r3, [pc, #72]	; (8013eec <rand+0x6c>)
 8013ea4:	e9c0 2300 	strd	r2, r3, [r0]
 8013ea8:	4b11      	ldr	r3, [pc, #68]	; (8013ef0 <rand+0x70>)
 8013eaa:	6083      	str	r3, [r0, #8]
 8013eac:	230b      	movs	r3, #11
 8013eae:	8183      	strh	r3, [r0, #12]
 8013eb0:	2201      	movs	r2, #1
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013eb8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8013eba:	4a0e      	ldr	r2, [pc, #56]	; (8013ef4 <rand+0x74>)
 8013ebc:	6920      	ldr	r0, [r4, #16]
 8013ebe:	6963      	ldr	r3, [r4, #20]
 8013ec0:	490d      	ldr	r1, [pc, #52]	; (8013ef8 <rand+0x78>)
 8013ec2:	4342      	muls	r2, r0
 8013ec4:	fb01 2203 	mla	r2, r1, r3, r2
 8013ec8:	fba0 0101 	umull	r0, r1, r0, r1
 8013ecc:	1c43      	adds	r3, r0, #1
 8013ece:	eb42 0001 	adc.w	r0, r2, r1
 8013ed2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8013ed6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013eda:	bd10      	pop	{r4, pc}
 8013edc:	20000048 	.word	0x20000048
 8013ee0:	0801a7c0 	.word	0x0801a7c0
 8013ee4:	0801a7d7 	.word	0x0801a7d7
 8013ee8:	abcd330e 	.word	0xabcd330e
 8013eec:	e66d1234 	.word	0xe66d1234
 8013ef0:	0005deec 	.word	0x0005deec
 8013ef4:	5851f42d 	.word	0x5851f42d
 8013ef8:	4c957f2d 	.word	0x4c957f2d

08013efc <siprintf>:
 8013efc:	b40e      	push	{r1, r2, r3}
 8013efe:	b500      	push	{lr}
 8013f00:	b09c      	sub	sp, #112	; 0x70
 8013f02:	ab1d      	add	r3, sp, #116	; 0x74
 8013f04:	9002      	str	r0, [sp, #8]
 8013f06:	9006      	str	r0, [sp, #24]
 8013f08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013f0c:	4809      	ldr	r0, [pc, #36]	; (8013f34 <siprintf+0x38>)
 8013f0e:	9107      	str	r1, [sp, #28]
 8013f10:	9104      	str	r1, [sp, #16]
 8013f12:	4909      	ldr	r1, [pc, #36]	; (8013f38 <siprintf+0x3c>)
 8013f14:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f18:	9105      	str	r1, [sp, #20]
 8013f1a:	6800      	ldr	r0, [r0, #0]
 8013f1c:	9301      	str	r3, [sp, #4]
 8013f1e:	a902      	add	r1, sp, #8
 8013f20:	f000 fa78 	bl	8014414 <_svfiprintf_r>
 8013f24:	9b02      	ldr	r3, [sp, #8]
 8013f26:	2200      	movs	r2, #0
 8013f28:	701a      	strb	r2, [r3, #0]
 8013f2a:	b01c      	add	sp, #112	; 0x70
 8013f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013f30:	b003      	add	sp, #12
 8013f32:	4770      	bx	lr
 8013f34:	20000048 	.word	0x20000048
 8013f38:	ffff0208 	.word	0xffff0208

08013f3c <__assert_func>:
 8013f3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013f3e:	4614      	mov	r4, r2
 8013f40:	461a      	mov	r2, r3
 8013f42:	4b09      	ldr	r3, [pc, #36]	; (8013f68 <__assert_func+0x2c>)
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	4605      	mov	r5, r0
 8013f48:	68d8      	ldr	r0, [r3, #12]
 8013f4a:	b14c      	cbz	r4, 8013f60 <__assert_func+0x24>
 8013f4c:	4b07      	ldr	r3, [pc, #28]	; (8013f6c <__assert_func+0x30>)
 8013f4e:	9100      	str	r1, [sp, #0]
 8013f50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013f54:	4906      	ldr	r1, [pc, #24]	; (8013f70 <__assert_func+0x34>)
 8013f56:	462b      	mov	r3, r5
 8013f58:	f000 f8e4 	bl	8014124 <fiprintf>
 8013f5c:	f000 ff6e 	bl	8014e3c <abort>
 8013f60:	4b04      	ldr	r3, [pc, #16]	; (8013f74 <__assert_func+0x38>)
 8013f62:	461c      	mov	r4, r3
 8013f64:	e7f3      	b.n	8013f4e <__assert_func+0x12>
 8013f66:	bf00      	nop
 8013f68:	20000048 	.word	0x20000048
 8013f6c:	0801a832 	.word	0x0801a832
 8013f70:	0801a83f 	.word	0x0801a83f
 8013f74:	0801a86d 	.word	0x0801a86d

08013f78 <std>:
 8013f78:	2300      	movs	r3, #0
 8013f7a:	b510      	push	{r4, lr}
 8013f7c:	4604      	mov	r4, r0
 8013f7e:	e9c0 3300 	strd	r3, r3, [r0]
 8013f82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013f86:	6083      	str	r3, [r0, #8]
 8013f88:	8181      	strh	r1, [r0, #12]
 8013f8a:	6643      	str	r3, [r0, #100]	; 0x64
 8013f8c:	81c2      	strh	r2, [r0, #14]
 8013f8e:	6183      	str	r3, [r0, #24]
 8013f90:	4619      	mov	r1, r3
 8013f92:	2208      	movs	r2, #8
 8013f94:	305c      	adds	r0, #92	; 0x5c
 8013f96:	f7ff ff53 	bl	8013e40 <memset>
 8013f9a:	4b05      	ldr	r3, [pc, #20]	; (8013fb0 <std+0x38>)
 8013f9c:	6263      	str	r3, [r4, #36]	; 0x24
 8013f9e:	4b05      	ldr	r3, [pc, #20]	; (8013fb4 <std+0x3c>)
 8013fa0:	62a3      	str	r3, [r4, #40]	; 0x28
 8013fa2:	4b05      	ldr	r3, [pc, #20]	; (8013fb8 <std+0x40>)
 8013fa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013fa6:	4b05      	ldr	r3, [pc, #20]	; (8013fbc <std+0x44>)
 8013fa8:	6224      	str	r4, [r4, #32]
 8013faa:	6323      	str	r3, [r4, #48]	; 0x30
 8013fac:	bd10      	pop	{r4, pc}
 8013fae:	bf00      	nop
 8013fb0:	08014c11 	.word	0x08014c11
 8013fb4:	08014c33 	.word	0x08014c33
 8013fb8:	08014c6b 	.word	0x08014c6b
 8013fbc:	08014c8f 	.word	0x08014c8f

08013fc0 <_cleanup_r>:
 8013fc0:	4901      	ldr	r1, [pc, #4]	; (8013fc8 <_cleanup_r+0x8>)
 8013fc2:	f000 b8c1 	b.w	8014148 <_fwalk_reent>
 8013fc6:	bf00      	nop
 8013fc8:	08014f79 	.word	0x08014f79

08013fcc <__sfmoreglue>:
 8013fcc:	b570      	push	{r4, r5, r6, lr}
 8013fce:	2268      	movs	r2, #104	; 0x68
 8013fd0:	1e4d      	subs	r5, r1, #1
 8013fd2:	4355      	muls	r5, r2
 8013fd4:	460e      	mov	r6, r1
 8013fd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013fda:	f000 f94b 	bl	8014274 <_malloc_r>
 8013fde:	4604      	mov	r4, r0
 8013fe0:	b140      	cbz	r0, 8013ff4 <__sfmoreglue+0x28>
 8013fe2:	2100      	movs	r1, #0
 8013fe4:	e9c0 1600 	strd	r1, r6, [r0]
 8013fe8:	300c      	adds	r0, #12
 8013fea:	60a0      	str	r0, [r4, #8]
 8013fec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013ff0:	f7ff ff26 	bl	8013e40 <memset>
 8013ff4:	4620      	mov	r0, r4
 8013ff6:	bd70      	pop	{r4, r5, r6, pc}

08013ff8 <__sfp_lock_acquire>:
 8013ff8:	4801      	ldr	r0, [pc, #4]	; (8014000 <__sfp_lock_acquire+0x8>)
 8013ffa:	f000 b8c5 	b.w	8014188 <__retarget_lock_acquire_recursive>
 8013ffe:	bf00      	nop
 8014000:	2000b055 	.word	0x2000b055

08014004 <__sfp_lock_release>:
 8014004:	4801      	ldr	r0, [pc, #4]	; (801400c <__sfp_lock_release+0x8>)
 8014006:	f000 b8c0 	b.w	801418a <__retarget_lock_release_recursive>
 801400a:	bf00      	nop
 801400c:	2000b055 	.word	0x2000b055

08014010 <__sinit_lock_acquire>:
 8014010:	4801      	ldr	r0, [pc, #4]	; (8014018 <__sinit_lock_acquire+0x8>)
 8014012:	f000 b8b9 	b.w	8014188 <__retarget_lock_acquire_recursive>
 8014016:	bf00      	nop
 8014018:	2000b056 	.word	0x2000b056

0801401c <__sinit_lock_release>:
 801401c:	4801      	ldr	r0, [pc, #4]	; (8014024 <__sinit_lock_release+0x8>)
 801401e:	f000 b8b4 	b.w	801418a <__retarget_lock_release_recursive>
 8014022:	bf00      	nop
 8014024:	2000b056 	.word	0x2000b056

08014028 <__sinit>:
 8014028:	b510      	push	{r4, lr}
 801402a:	4604      	mov	r4, r0
 801402c:	f7ff fff0 	bl	8014010 <__sinit_lock_acquire>
 8014030:	69a3      	ldr	r3, [r4, #24]
 8014032:	b11b      	cbz	r3, 801403c <__sinit+0x14>
 8014034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014038:	f7ff bff0 	b.w	801401c <__sinit_lock_release>
 801403c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014040:	6523      	str	r3, [r4, #80]	; 0x50
 8014042:	4b13      	ldr	r3, [pc, #76]	; (8014090 <__sinit+0x68>)
 8014044:	4a13      	ldr	r2, [pc, #76]	; (8014094 <__sinit+0x6c>)
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	62a2      	str	r2, [r4, #40]	; 0x28
 801404a:	42a3      	cmp	r3, r4
 801404c:	bf04      	itt	eq
 801404e:	2301      	moveq	r3, #1
 8014050:	61a3      	streq	r3, [r4, #24]
 8014052:	4620      	mov	r0, r4
 8014054:	f000 f820 	bl	8014098 <__sfp>
 8014058:	6060      	str	r0, [r4, #4]
 801405a:	4620      	mov	r0, r4
 801405c:	f000 f81c 	bl	8014098 <__sfp>
 8014060:	60a0      	str	r0, [r4, #8]
 8014062:	4620      	mov	r0, r4
 8014064:	f000 f818 	bl	8014098 <__sfp>
 8014068:	2200      	movs	r2, #0
 801406a:	60e0      	str	r0, [r4, #12]
 801406c:	2104      	movs	r1, #4
 801406e:	6860      	ldr	r0, [r4, #4]
 8014070:	f7ff ff82 	bl	8013f78 <std>
 8014074:	68a0      	ldr	r0, [r4, #8]
 8014076:	2201      	movs	r2, #1
 8014078:	2109      	movs	r1, #9
 801407a:	f7ff ff7d 	bl	8013f78 <std>
 801407e:	68e0      	ldr	r0, [r4, #12]
 8014080:	2202      	movs	r2, #2
 8014082:	2112      	movs	r1, #18
 8014084:	f7ff ff78 	bl	8013f78 <std>
 8014088:	2301      	movs	r3, #1
 801408a:	61a3      	str	r3, [r4, #24]
 801408c:	e7d2      	b.n	8014034 <__sinit+0xc>
 801408e:	bf00      	nop
 8014090:	0801a7bc 	.word	0x0801a7bc
 8014094:	08013fc1 	.word	0x08013fc1

08014098 <__sfp>:
 8014098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801409a:	4607      	mov	r7, r0
 801409c:	f7ff ffac 	bl	8013ff8 <__sfp_lock_acquire>
 80140a0:	4b1e      	ldr	r3, [pc, #120]	; (801411c <__sfp+0x84>)
 80140a2:	681e      	ldr	r6, [r3, #0]
 80140a4:	69b3      	ldr	r3, [r6, #24]
 80140a6:	b913      	cbnz	r3, 80140ae <__sfp+0x16>
 80140a8:	4630      	mov	r0, r6
 80140aa:	f7ff ffbd 	bl	8014028 <__sinit>
 80140ae:	3648      	adds	r6, #72	; 0x48
 80140b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80140b4:	3b01      	subs	r3, #1
 80140b6:	d503      	bpl.n	80140c0 <__sfp+0x28>
 80140b8:	6833      	ldr	r3, [r6, #0]
 80140ba:	b30b      	cbz	r3, 8014100 <__sfp+0x68>
 80140bc:	6836      	ldr	r6, [r6, #0]
 80140be:	e7f7      	b.n	80140b0 <__sfp+0x18>
 80140c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80140c4:	b9d5      	cbnz	r5, 80140fc <__sfp+0x64>
 80140c6:	4b16      	ldr	r3, [pc, #88]	; (8014120 <__sfp+0x88>)
 80140c8:	60e3      	str	r3, [r4, #12]
 80140ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80140ce:	6665      	str	r5, [r4, #100]	; 0x64
 80140d0:	f000 f859 	bl	8014186 <__retarget_lock_init_recursive>
 80140d4:	f7ff ff96 	bl	8014004 <__sfp_lock_release>
 80140d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80140dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80140e0:	6025      	str	r5, [r4, #0]
 80140e2:	61a5      	str	r5, [r4, #24]
 80140e4:	2208      	movs	r2, #8
 80140e6:	4629      	mov	r1, r5
 80140e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80140ec:	f7ff fea8 	bl	8013e40 <memset>
 80140f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80140f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80140f8:	4620      	mov	r0, r4
 80140fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140fc:	3468      	adds	r4, #104	; 0x68
 80140fe:	e7d9      	b.n	80140b4 <__sfp+0x1c>
 8014100:	2104      	movs	r1, #4
 8014102:	4638      	mov	r0, r7
 8014104:	f7ff ff62 	bl	8013fcc <__sfmoreglue>
 8014108:	4604      	mov	r4, r0
 801410a:	6030      	str	r0, [r6, #0]
 801410c:	2800      	cmp	r0, #0
 801410e:	d1d5      	bne.n	80140bc <__sfp+0x24>
 8014110:	f7ff ff78 	bl	8014004 <__sfp_lock_release>
 8014114:	230c      	movs	r3, #12
 8014116:	603b      	str	r3, [r7, #0]
 8014118:	e7ee      	b.n	80140f8 <__sfp+0x60>
 801411a:	bf00      	nop
 801411c:	0801a7bc 	.word	0x0801a7bc
 8014120:	ffff0001 	.word	0xffff0001

08014124 <fiprintf>:
 8014124:	b40e      	push	{r1, r2, r3}
 8014126:	b503      	push	{r0, r1, lr}
 8014128:	4601      	mov	r1, r0
 801412a:	ab03      	add	r3, sp, #12
 801412c:	4805      	ldr	r0, [pc, #20]	; (8014144 <fiprintf+0x20>)
 801412e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014132:	6800      	ldr	r0, [r0, #0]
 8014134:	9301      	str	r3, [sp, #4]
 8014136:	f000 fa97 	bl	8014668 <_vfiprintf_r>
 801413a:	b002      	add	sp, #8
 801413c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014140:	b003      	add	sp, #12
 8014142:	4770      	bx	lr
 8014144:	20000048 	.word	0x20000048

08014148 <_fwalk_reent>:
 8014148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801414c:	4606      	mov	r6, r0
 801414e:	4688      	mov	r8, r1
 8014150:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014154:	2700      	movs	r7, #0
 8014156:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801415a:	f1b9 0901 	subs.w	r9, r9, #1
 801415e:	d505      	bpl.n	801416c <_fwalk_reent+0x24>
 8014160:	6824      	ldr	r4, [r4, #0]
 8014162:	2c00      	cmp	r4, #0
 8014164:	d1f7      	bne.n	8014156 <_fwalk_reent+0xe>
 8014166:	4638      	mov	r0, r7
 8014168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801416c:	89ab      	ldrh	r3, [r5, #12]
 801416e:	2b01      	cmp	r3, #1
 8014170:	d907      	bls.n	8014182 <_fwalk_reent+0x3a>
 8014172:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014176:	3301      	adds	r3, #1
 8014178:	d003      	beq.n	8014182 <_fwalk_reent+0x3a>
 801417a:	4629      	mov	r1, r5
 801417c:	4630      	mov	r0, r6
 801417e:	47c0      	blx	r8
 8014180:	4307      	orrs	r7, r0
 8014182:	3568      	adds	r5, #104	; 0x68
 8014184:	e7e9      	b.n	801415a <_fwalk_reent+0x12>

08014186 <__retarget_lock_init_recursive>:
 8014186:	4770      	bx	lr

08014188 <__retarget_lock_acquire_recursive>:
 8014188:	4770      	bx	lr

0801418a <__retarget_lock_release_recursive>:
 801418a:	4770      	bx	lr

0801418c <malloc>:
 801418c:	4b02      	ldr	r3, [pc, #8]	; (8014198 <malloc+0xc>)
 801418e:	4601      	mov	r1, r0
 8014190:	6818      	ldr	r0, [r3, #0]
 8014192:	f000 b86f 	b.w	8014274 <_malloc_r>
 8014196:	bf00      	nop
 8014198:	20000048 	.word	0x20000048

0801419c <_free_r>:
 801419c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801419e:	2900      	cmp	r1, #0
 80141a0:	d044      	beq.n	801422c <_free_r+0x90>
 80141a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80141a6:	9001      	str	r0, [sp, #4]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	f1a1 0404 	sub.w	r4, r1, #4
 80141ae:	bfb8      	it	lt
 80141b0:	18e4      	addlt	r4, r4, r3
 80141b2:	f000 ff95 	bl	80150e0 <__malloc_lock>
 80141b6:	4a1e      	ldr	r2, [pc, #120]	; (8014230 <_free_r+0x94>)
 80141b8:	9801      	ldr	r0, [sp, #4]
 80141ba:	6813      	ldr	r3, [r2, #0]
 80141bc:	b933      	cbnz	r3, 80141cc <_free_r+0x30>
 80141be:	6063      	str	r3, [r4, #4]
 80141c0:	6014      	str	r4, [r2, #0]
 80141c2:	b003      	add	sp, #12
 80141c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80141c8:	f000 bf90 	b.w	80150ec <__malloc_unlock>
 80141cc:	42a3      	cmp	r3, r4
 80141ce:	d908      	bls.n	80141e2 <_free_r+0x46>
 80141d0:	6825      	ldr	r5, [r4, #0]
 80141d2:	1961      	adds	r1, r4, r5
 80141d4:	428b      	cmp	r3, r1
 80141d6:	bf01      	itttt	eq
 80141d8:	6819      	ldreq	r1, [r3, #0]
 80141da:	685b      	ldreq	r3, [r3, #4]
 80141dc:	1949      	addeq	r1, r1, r5
 80141de:	6021      	streq	r1, [r4, #0]
 80141e0:	e7ed      	b.n	80141be <_free_r+0x22>
 80141e2:	461a      	mov	r2, r3
 80141e4:	685b      	ldr	r3, [r3, #4]
 80141e6:	b10b      	cbz	r3, 80141ec <_free_r+0x50>
 80141e8:	42a3      	cmp	r3, r4
 80141ea:	d9fa      	bls.n	80141e2 <_free_r+0x46>
 80141ec:	6811      	ldr	r1, [r2, #0]
 80141ee:	1855      	adds	r5, r2, r1
 80141f0:	42a5      	cmp	r5, r4
 80141f2:	d10b      	bne.n	801420c <_free_r+0x70>
 80141f4:	6824      	ldr	r4, [r4, #0]
 80141f6:	4421      	add	r1, r4
 80141f8:	1854      	adds	r4, r2, r1
 80141fa:	42a3      	cmp	r3, r4
 80141fc:	6011      	str	r1, [r2, #0]
 80141fe:	d1e0      	bne.n	80141c2 <_free_r+0x26>
 8014200:	681c      	ldr	r4, [r3, #0]
 8014202:	685b      	ldr	r3, [r3, #4]
 8014204:	6053      	str	r3, [r2, #4]
 8014206:	4421      	add	r1, r4
 8014208:	6011      	str	r1, [r2, #0]
 801420a:	e7da      	b.n	80141c2 <_free_r+0x26>
 801420c:	d902      	bls.n	8014214 <_free_r+0x78>
 801420e:	230c      	movs	r3, #12
 8014210:	6003      	str	r3, [r0, #0]
 8014212:	e7d6      	b.n	80141c2 <_free_r+0x26>
 8014214:	6825      	ldr	r5, [r4, #0]
 8014216:	1961      	adds	r1, r4, r5
 8014218:	428b      	cmp	r3, r1
 801421a:	bf04      	itt	eq
 801421c:	6819      	ldreq	r1, [r3, #0]
 801421e:	685b      	ldreq	r3, [r3, #4]
 8014220:	6063      	str	r3, [r4, #4]
 8014222:	bf04      	itt	eq
 8014224:	1949      	addeq	r1, r1, r5
 8014226:	6021      	streq	r1, [r4, #0]
 8014228:	6054      	str	r4, [r2, #4]
 801422a:	e7ca      	b.n	80141c2 <_free_r+0x26>
 801422c:	b003      	add	sp, #12
 801422e:	bd30      	pop	{r4, r5, pc}
 8014230:	2000b058 	.word	0x2000b058

08014234 <sbrk_aligned>:
 8014234:	b570      	push	{r4, r5, r6, lr}
 8014236:	4e0e      	ldr	r6, [pc, #56]	; (8014270 <sbrk_aligned+0x3c>)
 8014238:	460c      	mov	r4, r1
 801423a:	6831      	ldr	r1, [r6, #0]
 801423c:	4605      	mov	r5, r0
 801423e:	b911      	cbnz	r1, 8014246 <sbrk_aligned+0x12>
 8014240:	f000 fcd6 	bl	8014bf0 <_sbrk_r>
 8014244:	6030      	str	r0, [r6, #0]
 8014246:	4621      	mov	r1, r4
 8014248:	4628      	mov	r0, r5
 801424a:	f000 fcd1 	bl	8014bf0 <_sbrk_r>
 801424e:	1c43      	adds	r3, r0, #1
 8014250:	d00a      	beq.n	8014268 <sbrk_aligned+0x34>
 8014252:	1cc4      	adds	r4, r0, #3
 8014254:	f024 0403 	bic.w	r4, r4, #3
 8014258:	42a0      	cmp	r0, r4
 801425a:	d007      	beq.n	801426c <sbrk_aligned+0x38>
 801425c:	1a21      	subs	r1, r4, r0
 801425e:	4628      	mov	r0, r5
 8014260:	f000 fcc6 	bl	8014bf0 <_sbrk_r>
 8014264:	3001      	adds	r0, #1
 8014266:	d101      	bne.n	801426c <sbrk_aligned+0x38>
 8014268:	f04f 34ff 	mov.w	r4, #4294967295
 801426c:	4620      	mov	r0, r4
 801426e:	bd70      	pop	{r4, r5, r6, pc}
 8014270:	2000b05c 	.word	0x2000b05c

08014274 <_malloc_r>:
 8014274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014278:	1ccd      	adds	r5, r1, #3
 801427a:	f025 0503 	bic.w	r5, r5, #3
 801427e:	3508      	adds	r5, #8
 8014280:	2d0c      	cmp	r5, #12
 8014282:	bf38      	it	cc
 8014284:	250c      	movcc	r5, #12
 8014286:	2d00      	cmp	r5, #0
 8014288:	4607      	mov	r7, r0
 801428a:	db01      	blt.n	8014290 <_malloc_r+0x1c>
 801428c:	42a9      	cmp	r1, r5
 801428e:	d905      	bls.n	801429c <_malloc_r+0x28>
 8014290:	230c      	movs	r3, #12
 8014292:	603b      	str	r3, [r7, #0]
 8014294:	2600      	movs	r6, #0
 8014296:	4630      	mov	r0, r6
 8014298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801429c:	4e2e      	ldr	r6, [pc, #184]	; (8014358 <_malloc_r+0xe4>)
 801429e:	f000 ff1f 	bl	80150e0 <__malloc_lock>
 80142a2:	6833      	ldr	r3, [r6, #0]
 80142a4:	461c      	mov	r4, r3
 80142a6:	bb34      	cbnz	r4, 80142f6 <_malloc_r+0x82>
 80142a8:	4629      	mov	r1, r5
 80142aa:	4638      	mov	r0, r7
 80142ac:	f7ff ffc2 	bl	8014234 <sbrk_aligned>
 80142b0:	1c43      	adds	r3, r0, #1
 80142b2:	4604      	mov	r4, r0
 80142b4:	d14d      	bne.n	8014352 <_malloc_r+0xde>
 80142b6:	6834      	ldr	r4, [r6, #0]
 80142b8:	4626      	mov	r6, r4
 80142ba:	2e00      	cmp	r6, #0
 80142bc:	d140      	bne.n	8014340 <_malloc_r+0xcc>
 80142be:	6823      	ldr	r3, [r4, #0]
 80142c0:	4631      	mov	r1, r6
 80142c2:	4638      	mov	r0, r7
 80142c4:	eb04 0803 	add.w	r8, r4, r3
 80142c8:	f000 fc92 	bl	8014bf0 <_sbrk_r>
 80142cc:	4580      	cmp	r8, r0
 80142ce:	d13a      	bne.n	8014346 <_malloc_r+0xd2>
 80142d0:	6821      	ldr	r1, [r4, #0]
 80142d2:	3503      	adds	r5, #3
 80142d4:	1a6d      	subs	r5, r5, r1
 80142d6:	f025 0503 	bic.w	r5, r5, #3
 80142da:	3508      	adds	r5, #8
 80142dc:	2d0c      	cmp	r5, #12
 80142de:	bf38      	it	cc
 80142e0:	250c      	movcc	r5, #12
 80142e2:	4629      	mov	r1, r5
 80142e4:	4638      	mov	r0, r7
 80142e6:	f7ff ffa5 	bl	8014234 <sbrk_aligned>
 80142ea:	3001      	adds	r0, #1
 80142ec:	d02b      	beq.n	8014346 <_malloc_r+0xd2>
 80142ee:	6823      	ldr	r3, [r4, #0]
 80142f0:	442b      	add	r3, r5
 80142f2:	6023      	str	r3, [r4, #0]
 80142f4:	e00e      	b.n	8014314 <_malloc_r+0xa0>
 80142f6:	6822      	ldr	r2, [r4, #0]
 80142f8:	1b52      	subs	r2, r2, r5
 80142fa:	d41e      	bmi.n	801433a <_malloc_r+0xc6>
 80142fc:	2a0b      	cmp	r2, #11
 80142fe:	d916      	bls.n	801432e <_malloc_r+0xba>
 8014300:	1961      	adds	r1, r4, r5
 8014302:	42a3      	cmp	r3, r4
 8014304:	6025      	str	r5, [r4, #0]
 8014306:	bf18      	it	ne
 8014308:	6059      	strne	r1, [r3, #4]
 801430a:	6863      	ldr	r3, [r4, #4]
 801430c:	bf08      	it	eq
 801430e:	6031      	streq	r1, [r6, #0]
 8014310:	5162      	str	r2, [r4, r5]
 8014312:	604b      	str	r3, [r1, #4]
 8014314:	4638      	mov	r0, r7
 8014316:	f104 060b 	add.w	r6, r4, #11
 801431a:	f000 fee7 	bl	80150ec <__malloc_unlock>
 801431e:	f026 0607 	bic.w	r6, r6, #7
 8014322:	1d23      	adds	r3, r4, #4
 8014324:	1af2      	subs	r2, r6, r3
 8014326:	d0b6      	beq.n	8014296 <_malloc_r+0x22>
 8014328:	1b9b      	subs	r3, r3, r6
 801432a:	50a3      	str	r3, [r4, r2]
 801432c:	e7b3      	b.n	8014296 <_malloc_r+0x22>
 801432e:	6862      	ldr	r2, [r4, #4]
 8014330:	42a3      	cmp	r3, r4
 8014332:	bf0c      	ite	eq
 8014334:	6032      	streq	r2, [r6, #0]
 8014336:	605a      	strne	r2, [r3, #4]
 8014338:	e7ec      	b.n	8014314 <_malloc_r+0xa0>
 801433a:	4623      	mov	r3, r4
 801433c:	6864      	ldr	r4, [r4, #4]
 801433e:	e7b2      	b.n	80142a6 <_malloc_r+0x32>
 8014340:	4634      	mov	r4, r6
 8014342:	6876      	ldr	r6, [r6, #4]
 8014344:	e7b9      	b.n	80142ba <_malloc_r+0x46>
 8014346:	230c      	movs	r3, #12
 8014348:	603b      	str	r3, [r7, #0]
 801434a:	4638      	mov	r0, r7
 801434c:	f000 fece 	bl	80150ec <__malloc_unlock>
 8014350:	e7a1      	b.n	8014296 <_malloc_r+0x22>
 8014352:	6025      	str	r5, [r4, #0]
 8014354:	e7de      	b.n	8014314 <_malloc_r+0xa0>
 8014356:	bf00      	nop
 8014358:	2000b058 	.word	0x2000b058

0801435c <__ssputs_r>:
 801435c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014360:	688e      	ldr	r6, [r1, #8]
 8014362:	429e      	cmp	r6, r3
 8014364:	4682      	mov	sl, r0
 8014366:	460c      	mov	r4, r1
 8014368:	4690      	mov	r8, r2
 801436a:	461f      	mov	r7, r3
 801436c:	d838      	bhi.n	80143e0 <__ssputs_r+0x84>
 801436e:	898a      	ldrh	r2, [r1, #12]
 8014370:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014374:	d032      	beq.n	80143dc <__ssputs_r+0x80>
 8014376:	6825      	ldr	r5, [r4, #0]
 8014378:	6909      	ldr	r1, [r1, #16]
 801437a:	eba5 0901 	sub.w	r9, r5, r1
 801437e:	6965      	ldr	r5, [r4, #20]
 8014380:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014384:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014388:	3301      	adds	r3, #1
 801438a:	444b      	add	r3, r9
 801438c:	106d      	asrs	r5, r5, #1
 801438e:	429d      	cmp	r5, r3
 8014390:	bf38      	it	cc
 8014392:	461d      	movcc	r5, r3
 8014394:	0553      	lsls	r3, r2, #21
 8014396:	d531      	bpl.n	80143fc <__ssputs_r+0xa0>
 8014398:	4629      	mov	r1, r5
 801439a:	f7ff ff6b 	bl	8014274 <_malloc_r>
 801439e:	4606      	mov	r6, r0
 80143a0:	b950      	cbnz	r0, 80143b8 <__ssputs_r+0x5c>
 80143a2:	230c      	movs	r3, #12
 80143a4:	f8ca 3000 	str.w	r3, [sl]
 80143a8:	89a3      	ldrh	r3, [r4, #12]
 80143aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80143ae:	81a3      	strh	r3, [r4, #12]
 80143b0:	f04f 30ff 	mov.w	r0, #4294967295
 80143b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143b8:	6921      	ldr	r1, [r4, #16]
 80143ba:	464a      	mov	r2, r9
 80143bc:	f7ff fd18 	bl	8013df0 <memcpy>
 80143c0:	89a3      	ldrh	r3, [r4, #12]
 80143c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80143c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80143ca:	81a3      	strh	r3, [r4, #12]
 80143cc:	6126      	str	r6, [r4, #16]
 80143ce:	6165      	str	r5, [r4, #20]
 80143d0:	444e      	add	r6, r9
 80143d2:	eba5 0509 	sub.w	r5, r5, r9
 80143d6:	6026      	str	r6, [r4, #0]
 80143d8:	60a5      	str	r5, [r4, #8]
 80143da:	463e      	mov	r6, r7
 80143dc:	42be      	cmp	r6, r7
 80143de:	d900      	bls.n	80143e2 <__ssputs_r+0x86>
 80143e0:	463e      	mov	r6, r7
 80143e2:	6820      	ldr	r0, [r4, #0]
 80143e4:	4632      	mov	r2, r6
 80143e6:	4641      	mov	r1, r8
 80143e8:	f7ff fd10 	bl	8013e0c <memmove>
 80143ec:	68a3      	ldr	r3, [r4, #8]
 80143ee:	1b9b      	subs	r3, r3, r6
 80143f0:	60a3      	str	r3, [r4, #8]
 80143f2:	6823      	ldr	r3, [r4, #0]
 80143f4:	4433      	add	r3, r6
 80143f6:	6023      	str	r3, [r4, #0]
 80143f8:	2000      	movs	r0, #0
 80143fa:	e7db      	b.n	80143b4 <__ssputs_r+0x58>
 80143fc:	462a      	mov	r2, r5
 80143fe:	f000 fe7b 	bl	80150f8 <_realloc_r>
 8014402:	4606      	mov	r6, r0
 8014404:	2800      	cmp	r0, #0
 8014406:	d1e1      	bne.n	80143cc <__ssputs_r+0x70>
 8014408:	6921      	ldr	r1, [r4, #16]
 801440a:	4650      	mov	r0, sl
 801440c:	f7ff fec6 	bl	801419c <_free_r>
 8014410:	e7c7      	b.n	80143a2 <__ssputs_r+0x46>
	...

08014414 <_svfiprintf_r>:
 8014414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014418:	4698      	mov	r8, r3
 801441a:	898b      	ldrh	r3, [r1, #12]
 801441c:	061b      	lsls	r3, r3, #24
 801441e:	b09d      	sub	sp, #116	; 0x74
 8014420:	4607      	mov	r7, r0
 8014422:	460d      	mov	r5, r1
 8014424:	4614      	mov	r4, r2
 8014426:	d50e      	bpl.n	8014446 <_svfiprintf_r+0x32>
 8014428:	690b      	ldr	r3, [r1, #16]
 801442a:	b963      	cbnz	r3, 8014446 <_svfiprintf_r+0x32>
 801442c:	2140      	movs	r1, #64	; 0x40
 801442e:	f7ff ff21 	bl	8014274 <_malloc_r>
 8014432:	6028      	str	r0, [r5, #0]
 8014434:	6128      	str	r0, [r5, #16]
 8014436:	b920      	cbnz	r0, 8014442 <_svfiprintf_r+0x2e>
 8014438:	230c      	movs	r3, #12
 801443a:	603b      	str	r3, [r7, #0]
 801443c:	f04f 30ff 	mov.w	r0, #4294967295
 8014440:	e0d1      	b.n	80145e6 <_svfiprintf_r+0x1d2>
 8014442:	2340      	movs	r3, #64	; 0x40
 8014444:	616b      	str	r3, [r5, #20]
 8014446:	2300      	movs	r3, #0
 8014448:	9309      	str	r3, [sp, #36]	; 0x24
 801444a:	2320      	movs	r3, #32
 801444c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014450:	f8cd 800c 	str.w	r8, [sp, #12]
 8014454:	2330      	movs	r3, #48	; 0x30
 8014456:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014600 <_svfiprintf_r+0x1ec>
 801445a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801445e:	f04f 0901 	mov.w	r9, #1
 8014462:	4623      	mov	r3, r4
 8014464:	469a      	mov	sl, r3
 8014466:	f813 2b01 	ldrb.w	r2, [r3], #1
 801446a:	b10a      	cbz	r2, 8014470 <_svfiprintf_r+0x5c>
 801446c:	2a25      	cmp	r2, #37	; 0x25
 801446e:	d1f9      	bne.n	8014464 <_svfiprintf_r+0x50>
 8014470:	ebba 0b04 	subs.w	fp, sl, r4
 8014474:	d00b      	beq.n	801448e <_svfiprintf_r+0x7a>
 8014476:	465b      	mov	r3, fp
 8014478:	4622      	mov	r2, r4
 801447a:	4629      	mov	r1, r5
 801447c:	4638      	mov	r0, r7
 801447e:	f7ff ff6d 	bl	801435c <__ssputs_r>
 8014482:	3001      	adds	r0, #1
 8014484:	f000 80aa 	beq.w	80145dc <_svfiprintf_r+0x1c8>
 8014488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801448a:	445a      	add	r2, fp
 801448c:	9209      	str	r2, [sp, #36]	; 0x24
 801448e:	f89a 3000 	ldrb.w	r3, [sl]
 8014492:	2b00      	cmp	r3, #0
 8014494:	f000 80a2 	beq.w	80145dc <_svfiprintf_r+0x1c8>
 8014498:	2300      	movs	r3, #0
 801449a:	f04f 32ff 	mov.w	r2, #4294967295
 801449e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80144a2:	f10a 0a01 	add.w	sl, sl, #1
 80144a6:	9304      	str	r3, [sp, #16]
 80144a8:	9307      	str	r3, [sp, #28]
 80144aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80144ae:	931a      	str	r3, [sp, #104]	; 0x68
 80144b0:	4654      	mov	r4, sl
 80144b2:	2205      	movs	r2, #5
 80144b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144b8:	4851      	ldr	r0, [pc, #324]	; (8014600 <_svfiprintf_r+0x1ec>)
 80144ba:	f7eb fea9 	bl	8000210 <memchr>
 80144be:	9a04      	ldr	r2, [sp, #16]
 80144c0:	b9d8      	cbnz	r0, 80144fa <_svfiprintf_r+0xe6>
 80144c2:	06d0      	lsls	r0, r2, #27
 80144c4:	bf44      	itt	mi
 80144c6:	2320      	movmi	r3, #32
 80144c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80144cc:	0711      	lsls	r1, r2, #28
 80144ce:	bf44      	itt	mi
 80144d0:	232b      	movmi	r3, #43	; 0x2b
 80144d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80144d6:	f89a 3000 	ldrb.w	r3, [sl]
 80144da:	2b2a      	cmp	r3, #42	; 0x2a
 80144dc:	d015      	beq.n	801450a <_svfiprintf_r+0xf6>
 80144de:	9a07      	ldr	r2, [sp, #28]
 80144e0:	4654      	mov	r4, sl
 80144e2:	2000      	movs	r0, #0
 80144e4:	f04f 0c0a 	mov.w	ip, #10
 80144e8:	4621      	mov	r1, r4
 80144ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80144ee:	3b30      	subs	r3, #48	; 0x30
 80144f0:	2b09      	cmp	r3, #9
 80144f2:	d94e      	bls.n	8014592 <_svfiprintf_r+0x17e>
 80144f4:	b1b0      	cbz	r0, 8014524 <_svfiprintf_r+0x110>
 80144f6:	9207      	str	r2, [sp, #28]
 80144f8:	e014      	b.n	8014524 <_svfiprintf_r+0x110>
 80144fa:	eba0 0308 	sub.w	r3, r0, r8
 80144fe:	fa09 f303 	lsl.w	r3, r9, r3
 8014502:	4313      	orrs	r3, r2
 8014504:	9304      	str	r3, [sp, #16]
 8014506:	46a2      	mov	sl, r4
 8014508:	e7d2      	b.n	80144b0 <_svfiprintf_r+0x9c>
 801450a:	9b03      	ldr	r3, [sp, #12]
 801450c:	1d19      	adds	r1, r3, #4
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	9103      	str	r1, [sp, #12]
 8014512:	2b00      	cmp	r3, #0
 8014514:	bfbb      	ittet	lt
 8014516:	425b      	neglt	r3, r3
 8014518:	f042 0202 	orrlt.w	r2, r2, #2
 801451c:	9307      	strge	r3, [sp, #28]
 801451e:	9307      	strlt	r3, [sp, #28]
 8014520:	bfb8      	it	lt
 8014522:	9204      	strlt	r2, [sp, #16]
 8014524:	7823      	ldrb	r3, [r4, #0]
 8014526:	2b2e      	cmp	r3, #46	; 0x2e
 8014528:	d10c      	bne.n	8014544 <_svfiprintf_r+0x130>
 801452a:	7863      	ldrb	r3, [r4, #1]
 801452c:	2b2a      	cmp	r3, #42	; 0x2a
 801452e:	d135      	bne.n	801459c <_svfiprintf_r+0x188>
 8014530:	9b03      	ldr	r3, [sp, #12]
 8014532:	1d1a      	adds	r2, r3, #4
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	9203      	str	r2, [sp, #12]
 8014538:	2b00      	cmp	r3, #0
 801453a:	bfb8      	it	lt
 801453c:	f04f 33ff 	movlt.w	r3, #4294967295
 8014540:	3402      	adds	r4, #2
 8014542:	9305      	str	r3, [sp, #20]
 8014544:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014610 <_svfiprintf_r+0x1fc>
 8014548:	7821      	ldrb	r1, [r4, #0]
 801454a:	2203      	movs	r2, #3
 801454c:	4650      	mov	r0, sl
 801454e:	f7eb fe5f 	bl	8000210 <memchr>
 8014552:	b140      	cbz	r0, 8014566 <_svfiprintf_r+0x152>
 8014554:	2340      	movs	r3, #64	; 0x40
 8014556:	eba0 000a 	sub.w	r0, r0, sl
 801455a:	fa03 f000 	lsl.w	r0, r3, r0
 801455e:	9b04      	ldr	r3, [sp, #16]
 8014560:	4303      	orrs	r3, r0
 8014562:	3401      	adds	r4, #1
 8014564:	9304      	str	r3, [sp, #16]
 8014566:	f814 1b01 	ldrb.w	r1, [r4], #1
 801456a:	4826      	ldr	r0, [pc, #152]	; (8014604 <_svfiprintf_r+0x1f0>)
 801456c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014570:	2206      	movs	r2, #6
 8014572:	f7eb fe4d 	bl	8000210 <memchr>
 8014576:	2800      	cmp	r0, #0
 8014578:	d038      	beq.n	80145ec <_svfiprintf_r+0x1d8>
 801457a:	4b23      	ldr	r3, [pc, #140]	; (8014608 <_svfiprintf_r+0x1f4>)
 801457c:	bb1b      	cbnz	r3, 80145c6 <_svfiprintf_r+0x1b2>
 801457e:	9b03      	ldr	r3, [sp, #12]
 8014580:	3307      	adds	r3, #7
 8014582:	f023 0307 	bic.w	r3, r3, #7
 8014586:	3308      	adds	r3, #8
 8014588:	9303      	str	r3, [sp, #12]
 801458a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801458c:	4433      	add	r3, r6
 801458e:	9309      	str	r3, [sp, #36]	; 0x24
 8014590:	e767      	b.n	8014462 <_svfiprintf_r+0x4e>
 8014592:	fb0c 3202 	mla	r2, ip, r2, r3
 8014596:	460c      	mov	r4, r1
 8014598:	2001      	movs	r0, #1
 801459a:	e7a5      	b.n	80144e8 <_svfiprintf_r+0xd4>
 801459c:	2300      	movs	r3, #0
 801459e:	3401      	adds	r4, #1
 80145a0:	9305      	str	r3, [sp, #20]
 80145a2:	4619      	mov	r1, r3
 80145a4:	f04f 0c0a 	mov.w	ip, #10
 80145a8:	4620      	mov	r0, r4
 80145aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80145ae:	3a30      	subs	r2, #48	; 0x30
 80145b0:	2a09      	cmp	r2, #9
 80145b2:	d903      	bls.n	80145bc <_svfiprintf_r+0x1a8>
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d0c5      	beq.n	8014544 <_svfiprintf_r+0x130>
 80145b8:	9105      	str	r1, [sp, #20]
 80145ba:	e7c3      	b.n	8014544 <_svfiprintf_r+0x130>
 80145bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80145c0:	4604      	mov	r4, r0
 80145c2:	2301      	movs	r3, #1
 80145c4:	e7f0      	b.n	80145a8 <_svfiprintf_r+0x194>
 80145c6:	ab03      	add	r3, sp, #12
 80145c8:	9300      	str	r3, [sp, #0]
 80145ca:	462a      	mov	r2, r5
 80145cc:	4b0f      	ldr	r3, [pc, #60]	; (801460c <_svfiprintf_r+0x1f8>)
 80145ce:	a904      	add	r1, sp, #16
 80145d0:	4638      	mov	r0, r7
 80145d2:	f3af 8000 	nop.w
 80145d6:	1c42      	adds	r2, r0, #1
 80145d8:	4606      	mov	r6, r0
 80145da:	d1d6      	bne.n	801458a <_svfiprintf_r+0x176>
 80145dc:	89ab      	ldrh	r3, [r5, #12]
 80145de:	065b      	lsls	r3, r3, #25
 80145e0:	f53f af2c 	bmi.w	801443c <_svfiprintf_r+0x28>
 80145e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80145e6:	b01d      	add	sp, #116	; 0x74
 80145e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145ec:	ab03      	add	r3, sp, #12
 80145ee:	9300      	str	r3, [sp, #0]
 80145f0:	462a      	mov	r2, r5
 80145f2:	4b06      	ldr	r3, [pc, #24]	; (801460c <_svfiprintf_r+0x1f8>)
 80145f4:	a904      	add	r1, sp, #16
 80145f6:	4638      	mov	r0, r7
 80145f8:	f000 f9d4 	bl	80149a4 <_printf_i>
 80145fc:	e7eb      	b.n	80145d6 <_svfiprintf_r+0x1c2>
 80145fe:	bf00      	nop
 8014600:	0801a8d0 	.word	0x0801a8d0
 8014604:	0801a8da 	.word	0x0801a8da
 8014608:	00000000 	.word	0x00000000
 801460c:	0801435d 	.word	0x0801435d
 8014610:	0801a8d6 	.word	0x0801a8d6

08014614 <__sfputc_r>:
 8014614:	6893      	ldr	r3, [r2, #8]
 8014616:	3b01      	subs	r3, #1
 8014618:	2b00      	cmp	r3, #0
 801461a:	b410      	push	{r4}
 801461c:	6093      	str	r3, [r2, #8]
 801461e:	da08      	bge.n	8014632 <__sfputc_r+0x1e>
 8014620:	6994      	ldr	r4, [r2, #24]
 8014622:	42a3      	cmp	r3, r4
 8014624:	db01      	blt.n	801462a <__sfputc_r+0x16>
 8014626:	290a      	cmp	r1, #10
 8014628:	d103      	bne.n	8014632 <__sfputc_r+0x1e>
 801462a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801462e:	f000 bb33 	b.w	8014c98 <__swbuf_r>
 8014632:	6813      	ldr	r3, [r2, #0]
 8014634:	1c58      	adds	r0, r3, #1
 8014636:	6010      	str	r0, [r2, #0]
 8014638:	7019      	strb	r1, [r3, #0]
 801463a:	4608      	mov	r0, r1
 801463c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014640:	4770      	bx	lr

08014642 <__sfputs_r>:
 8014642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014644:	4606      	mov	r6, r0
 8014646:	460f      	mov	r7, r1
 8014648:	4614      	mov	r4, r2
 801464a:	18d5      	adds	r5, r2, r3
 801464c:	42ac      	cmp	r4, r5
 801464e:	d101      	bne.n	8014654 <__sfputs_r+0x12>
 8014650:	2000      	movs	r0, #0
 8014652:	e007      	b.n	8014664 <__sfputs_r+0x22>
 8014654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014658:	463a      	mov	r2, r7
 801465a:	4630      	mov	r0, r6
 801465c:	f7ff ffda 	bl	8014614 <__sfputc_r>
 8014660:	1c43      	adds	r3, r0, #1
 8014662:	d1f3      	bne.n	801464c <__sfputs_r+0xa>
 8014664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014668 <_vfiprintf_r>:
 8014668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801466c:	460d      	mov	r5, r1
 801466e:	b09d      	sub	sp, #116	; 0x74
 8014670:	4614      	mov	r4, r2
 8014672:	4698      	mov	r8, r3
 8014674:	4606      	mov	r6, r0
 8014676:	b118      	cbz	r0, 8014680 <_vfiprintf_r+0x18>
 8014678:	6983      	ldr	r3, [r0, #24]
 801467a:	b90b      	cbnz	r3, 8014680 <_vfiprintf_r+0x18>
 801467c:	f7ff fcd4 	bl	8014028 <__sinit>
 8014680:	4b89      	ldr	r3, [pc, #548]	; (80148a8 <_vfiprintf_r+0x240>)
 8014682:	429d      	cmp	r5, r3
 8014684:	d11b      	bne.n	80146be <_vfiprintf_r+0x56>
 8014686:	6875      	ldr	r5, [r6, #4]
 8014688:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801468a:	07d9      	lsls	r1, r3, #31
 801468c:	d405      	bmi.n	801469a <_vfiprintf_r+0x32>
 801468e:	89ab      	ldrh	r3, [r5, #12]
 8014690:	059a      	lsls	r2, r3, #22
 8014692:	d402      	bmi.n	801469a <_vfiprintf_r+0x32>
 8014694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014696:	f7ff fd77 	bl	8014188 <__retarget_lock_acquire_recursive>
 801469a:	89ab      	ldrh	r3, [r5, #12]
 801469c:	071b      	lsls	r3, r3, #28
 801469e:	d501      	bpl.n	80146a4 <_vfiprintf_r+0x3c>
 80146a0:	692b      	ldr	r3, [r5, #16]
 80146a2:	b9eb      	cbnz	r3, 80146e0 <_vfiprintf_r+0x78>
 80146a4:	4629      	mov	r1, r5
 80146a6:	4630      	mov	r0, r6
 80146a8:	f000 fb5a 	bl	8014d60 <__swsetup_r>
 80146ac:	b1c0      	cbz	r0, 80146e0 <_vfiprintf_r+0x78>
 80146ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80146b0:	07dc      	lsls	r4, r3, #31
 80146b2:	d50e      	bpl.n	80146d2 <_vfiprintf_r+0x6a>
 80146b4:	f04f 30ff 	mov.w	r0, #4294967295
 80146b8:	b01d      	add	sp, #116	; 0x74
 80146ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146be:	4b7b      	ldr	r3, [pc, #492]	; (80148ac <_vfiprintf_r+0x244>)
 80146c0:	429d      	cmp	r5, r3
 80146c2:	d101      	bne.n	80146c8 <_vfiprintf_r+0x60>
 80146c4:	68b5      	ldr	r5, [r6, #8]
 80146c6:	e7df      	b.n	8014688 <_vfiprintf_r+0x20>
 80146c8:	4b79      	ldr	r3, [pc, #484]	; (80148b0 <_vfiprintf_r+0x248>)
 80146ca:	429d      	cmp	r5, r3
 80146cc:	bf08      	it	eq
 80146ce:	68f5      	ldreq	r5, [r6, #12]
 80146d0:	e7da      	b.n	8014688 <_vfiprintf_r+0x20>
 80146d2:	89ab      	ldrh	r3, [r5, #12]
 80146d4:	0598      	lsls	r0, r3, #22
 80146d6:	d4ed      	bmi.n	80146b4 <_vfiprintf_r+0x4c>
 80146d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80146da:	f7ff fd56 	bl	801418a <__retarget_lock_release_recursive>
 80146de:	e7e9      	b.n	80146b4 <_vfiprintf_r+0x4c>
 80146e0:	2300      	movs	r3, #0
 80146e2:	9309      	str	r3, [sp, #36]	; 0x24
 80146e4:	2320      	movs	r3, #32
 80146e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80146ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80146ee:	2330      	movs	r3, #48	; 0x30
 80146f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80148b4 <_vfiprintf_r+0x24c>
 80146f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80146f8:	f04f 0901 	mov.w	r9, #1
 80146fc:	4623      	mov	r3, r4
 80146fe:	469a      	mov	sl, r3
 8014700:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014704:	b10a      	cbz	r2, 801470a <_vfiprintf_r+0xa2>
 8014706:	2a25      	cmp	r2, #37	; 0x25
 8014708:	d1f9      	bne.n	80146fe <_vfiprintf_r+0x96>
 801470a:	ebba 0b04 	subs.w	fp, sl, r4
 801470e:	d00b      	beq.n	8014728 <_vfiprintf_r+0xc0>
 8014710:	465b      	mov	r3, fp
 8014712:	4622      	mov	r2, r4
 8014714:	4629      	mov	r1, r5
 8014716:	4630      	mov	r0, r6
 8014718:	f7ff ff93 	bl	8014642 <__sfputs_r>
 801471c:	3001      	adds	r0, #1
 801471e:	f000 80aa 	beq.w	8014876 <_vfiprintf_r+0x20e>
 8014722:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014724:	445a      	add	r2, fp
 8014726:	9209      	str	r2, [sp, #36]	; 0x24
 8014728:	f89a 3000 	ldrb.w	r3, [sl]
 801472c:	2b00      	cmp	r3, #0
 801472e:	f000 80a2 	beq.w	8014876 <_vfiprintf_r+0x20e>
 8014732:	2300      	movs	r3, #0
 8014734:	f04f 32ff 	mov.w	r2, #4294967295
 8014738:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801473c:	f10a 0a01 	add.w	sl, sl, #1
 8014740:	9304      	str	r3, [sp, #16]
 8014742:	9307      	str	r3, [sp, #28]
 8014744:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014748:	931a      	str	r3, [sp, #104]	; 0x68
 801474a:	4654      	mov	r4, sl
 801474c:	2205      	movs	r2, #5
 801474e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014752:	4858      	ldr	r0, [pc, #352]	; (80148b4 <_vfiprintf_r+0x24c>)
 8014754:	f7eb fd5c 	bl	8000210 <memchr>
 8014758:	9a04      	ldr	r2, [sp, #16]
 801475a:	b9d8      	cbnz	r0, 8014794 <_vfiprintf_r+0x12c>
 801475c:	06d1      	lsls	r1, r2, #27
 801475e:	bf44      	itt	mi
 8014760:	2320      	movmi	r3, #32
 8014762:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014766:	0713      	lsls	r3, r2, #28
 8014768:	bf44      	itt	mi
 801476a:	232b      	movmi	r3, #43	; 0x2b
 801476c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014770:	f89a 3000 	ldrb.w	r3, [sl]
 8014774:	2b2a      	cmp	r3, #42	; 0x2a
 8014776:	d015      	beq.n	80147a4 <_vfiprintf_r+0x13c>
 8014778:	9a07      	ldr	r2, [sp, #28]
 801477a:	4654      	mov	r4, sl
 801477c:	2000      	movs	r0, #0
 801477e:	f04f 0c0a 	mov.w	ip, #10
 8014782:	4621      	mov	r1, r4
 8014784:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014788:	3b30      	subs	r3, #48	; 0x30
 801478a:	2b09      	cmp	r3, #9
 801478c:	d94e      	bls.n	801482c <_vfiprintf_r+0x1c4>
 801478e:	b1b0      	cbz	r0, 80147be <_vfiprintf_r+0x156>
 8014790:	9207      	str	r2, [sp, #28]
 8014792:	e014      	b.n	80147be <_vfiprintf_r+0x156>
 8014794:	eba0 0308 	sub.w	r3, r0, r8
 8014798:	fa09 f303 	lsl.w	r3, r9, r3
 801479c:	4313      	orrs	r3, r2
 801479e:	9304      	str	r3, [sp, #16]
 80147a0:	46a2      	mov	sl, r4
 80147a2:	e7d2      	b.n	801474a <_vfiprintf_r+0xe2>
 80147a4:	9b03      	ldr	r3, [sp, #12]
 80147a6:	1d19      	adds	r1, r3, #4
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	9103      	str	r1, [sp, #12]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	bfbb      	ittet	lt
 80147b0:	425b      	neglt	r3, r3
 80147b2:	f042 0202 	orrlt.w	r2, r2, #2
 80147b6:	9307      	strge	r3, [sp, #28]
 80147b8:	9307      	strlt	r3, [sp, #28]
 80147ba:	bfb8      	it	lt
 80147bc:	9204      	strlt	r2, [sp, #16]
 80147be:	7823      	ldrb	r3, [r4, #0]
 80147c0:	2b2e      	cmp	r3, #46	; 0x2e
 80147c2:	d10c      	bne.n	80147de <_vfiprintf_r+0x176>
 80147c4:	7863      	ldrb	r3, [r4, #1]
 80147c6:	2b2a      	cmp	r3, #42	; 0x2a
 80147c8:	d135      	bne.n	8014836 <_vfiprintf_r+0x1ce>
 80147ca:	9b03      	ldr	r3, [sp, #12]
 80147cc:	1d1a      	adds	r2, r3, #4
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	9203      	str	r2, [sp, #12]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	bfb8      	it	lt
 80147d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80147da:	3402      	adds	r4, #2
 80147dc:	9305      	str	r3, [sp, #20]
 80147de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80148c4 <_vfiprintf_r+0x25c>
 80147e2:	7821      	ldrb	r1, [r4, #0]
 80147e4:	2203      	movs	r2, #3
 80147e6:	4650      	mov	r0, sl
 80147e8:	f7eb fd12 	bl	8000210 <memchr>
 80147ec:	b140      	cbz	r0, 8014800 <_vfiprintf_r+0x198>
 80147ee:	2340      	movs	r3, #64	; 0x40
 80147f0:	eba0 000a 	sub.w	r0, r0, sl
 80147f4:	fa03 f000 	lsl.w	r0, r3, r0
 80147f8:	9b04      	ldr	r3, [sp, #16]
 80147fa:	4303      	orrs	r3, r0
 80147fc:	3401      	adds	r4, #1
 80147fe:	9304      	str	r3, [sp, #16]
 8014800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014804:	482c      	ldr	r0, [pc, #176]	; (80148b8 <_vfiprintf_r+0x250>)
 8014806:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801480a:	2206      	movs	r2, #6
 801480c:	f7eb fd00 	bl	8000210 <memchr>
 8014810:	2800      	cmp	r0, #0
 8014812:	d03f      	beq.n	8014894 <_vfiprintf_r+0x22c>
 8014814:	4b29      	ldr	r3, [pc, #164]	; (80148bc <_vfiprintf_r+0x254>)
 8014816:	bb1b      	cbnz	r3, 8014860 <_vfiprintf_r+0x1f8>
 8014818:	9b03      	ldr	r3, [sp, #12]
 801481a:	3307      	adds	r3, #7
 801481c:	f023 0307 	bic.w	r3, r3, #7
 8014820:	3308      	adds	r3, #8
 8014822:	9303      	str	r3, [sp, #12]
 8014824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014826:	443b      	add	r3, r7
 8014828:	9309      	str	r3, [sp, #36]	; 0x24
 801482a:	e767      	b.n	80146fc <_vfiprintf_r+0x94>
 801482c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014830:	460c      	mov	r4, r1
 8014832:	2001      	movs	r0, #1
 8014834:	e7a5      	b.n	8014782 <_vfiprintf_r+0x11a>
 8014836:	2300      	movs	r3, #0
 8014838:	3401      	adds	r4, #1
 801483a:	9305      	str	r3, [sp, #20]
 801483c:	4619      	mov	r1, r3
 801483e:	f04f 0c0a 	mov.w	ip, #10
 8014842:	4620      	mov	r0, r4
 8014844:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014848:	3a30      	subs	r2, #48	; 0x30
 801484a:	2a09      	cmp	r2, #9
 801484c:	d903      	bls.n	8014856 <_vfiprintf_r+0x1ee>
 801484e:	2b00      	cmp	r3, #0
 8014850:	d0c5      	beq.n	80147de <_vfiprintf_r+0x176>
 8014852:	9105      	str	r1, [sp, #20]
 8014854:	e7c3      	b.n	80147de <_vfiprintf_r+0x176>
 8014856:	fb0c 2101 	mla	r1, ip, r1, r2
 801485a:	4604      	mov	r4, r0
 801485c:	2301      	movs	r3, #1
 801485e:	e7f0      	b.n	8014842 <_vfiprintf_r+0x1da>
 8014860:	ab03      	add	r3, sp, #12
 8014862:	9300      	str	r3, [sp, #0]
 8014864:	462a      	mov	r2, r5
 8014866:	4b16      	ldr	r3, [pc, #88]	; (80148c0 <_vfiprintf_r+0x258>)
 8014868:	a904      	add	r1, sp, #16
 801486a:	4630      	mov	r0, r6
 801486c:	f3af 8000 	nop.w
 8014870:	4607      	mov	r7, r0
 8014872:	1c78      	adds	r0, r7, #1
 8014874:	d1d6      	bne.n	8014824 <_vfiprintf_r+0x1bc>
 8014876:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014878:	07d9      	lsls	r1, r3, #31
 801487a:	d405      	bmi.n	8014888 <_vfiprintf_r+0x220>
 801487c:	89ab      	ldrh	r3, [r5, #12]
 801487e:	059a      	lsls	r2, r3, #22
 8014880:	d402      	bmi.n	8014888 <_vfiprintf_r+0x220>
 8014882:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014884:	f7ff fc81 	bl	801418a <__retarget_lock_release_recursive>
 8014888:	89ab      	ldrh	r3, [r5, #12]
 801488a:	065b      	lsls	r3, r3, #25
 801488c:	f53f af12 	bmi.w	80146b4 <_vfiprintf_r+0x4c>
 8014890:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014892:	e711      	b.n	80146b8 <_vfiprintf_r+0x50>
 8014894:	ab03      	add	r3, sp, #12
 8014896:	9300      	str	r3, [sp, #0]
 8014898:	462a      	mov	r2, r5
 801489a:	4b09      	ldr	r3, [pc, #36]	; (80148c0 <_vfiprintf_r+0x258>)
 801489c:	a904      	add	r1, sp, #16
 801489e:	4630      	mov	r0, r6
 80148a0:	f000 f880 	bl	80149a4 <_printf_i>
 80148a4:	e7e4      	b.n	8014870 <_vfiprintf_r+0x208>
 80148a6:	bf00      	nop
 80148a8:	0801a890 	.word	0x0801a890
 80148ac:	0801a8b0 	.word	0x0801a8b0
 80148b0:	0801a870 	.word	0x0801a870
 80148b4:	0801a8d0 	.word	0x0801a8d0
 80148b8:	0801a8da 	.word	0x0801a8da
 80148bc:	00000000 	.word	0x00000000
 80148c0:	08014643 	.word	0x08014643
 80148c4:	0801a8d6 	.word	0x0801a8d6

080148c8 <_printf_common>:
 80148c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148cc:	4616      	mov	r6, r2
 80148ce:	4699      	mov	r9, r3
 80148d0:	688a      	ldr	r2, [r1, #8]
 80148d2:	690b      	ldr	r3, [r1, #16]
 80148d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80148d8:	4293      	cmp	r3, r2
 80148da:	bfb8      	it	lt
 80148dc:	4613      	movlt	r3, r2
 80148de:	6033      	str	r3, [r6, #0]
 80148e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80148e4:	4607      	mov	r7, r0
 80148e6:	460c      	mov	r4, r1
 80148e8:	b10a      	cbz	r2, 80148ee <_printf_common+0x26>
 80148ea:	3301      	adds	r3, #1
 80148ec:	6033      	str	r3, [r6, #0]
 80148ee:	6823      	ldr	r3, [r4, #0]
 80148f0:	0699      	lsls	r1, r3, #26
 80148f2:	bf42      	ittt	mi
 80148f4:	6833      	ldrmi	r3, [r6, #0]
 80148f6:	3302      	addmi	r3, #2
 80148f8:	6033      	strmi	r3, [r6, #0]
 80148fa:	6825      	ldr	r5, [r4, #0]
 80148fc:	f015 0506 	ands.w	r5, r5, #6
 8014900:	d106      	bne.n	8014910 <_printf_common+0x48>
 8014902:	f104 0a19 	add.w	sl, r4, #25
 8014906:	68e3      	ldr	r3, [r4, #12]
 8014908:	6832      	ldr	r2, [r6, #0]
 801490a:	1a9b      	subs	r3, r3, r2
 801490c:	42ab      	cmp	r3, r5
 801490e:	dc26      	bgt.n	801495e <_printf_common+0x96>
 8014910:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014914:	1e13      	subs	r3, r2, #0
 8014916:	6822      	ldr	r2, [r4, #0]
 8014918:	bf18      	it	ne
 801491a:	2301      	movne	r3, #1
 801491c:	0692      	lsls	r2, r2, #26
 801491e:	d42b      	bmi.n	8014978 <_printf_common+0xb0>
 8014920:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014924:	4649      	mov	r1, r9
 8014926:	4638      	mov	r0, r7
 8014928:	47c0      	blx	r8
 801492a:	3001      	adds	r0, #1
 801492c:	d01e      	beq.n	801496c <_printf_common+0xa4>
 801492e:	6823      	ldr	r3, [r4, #0]
 8014930:	68e5      	ldr	r5, [r4, #12]
 8014932:	6832      	ldr	r2, [r6, #0]
 8014934:	f003 0306 	and.w	r3, r3, #6
 8014938:	2b04      	cmp	r3, #4
 801493a:	bf08      	it	eq
 801493c:	1aad      	subeq	r5, r5, r2
 801493e:	68a3      	ldr	r3, [r4, #8]
 8014940:	6922      	ldr	r2, [r4, #16]
 8014942:	bf0c      	ite	eq
 8014944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014948:	2500      	movne	r5, #0
 801494a:	4293      	cmp	r3, r2
 801494c:	bfc4      	itt	gt
 801494e:	1a9b      	subgt	r3, r3, r2
 8014950:	18ed      	addgt	r5, r5, r3
 8014952:	2600      	movs	r6, #0
 8014954:	341a      	adds	r4, #26
 8014956:	42b5      	cmp	r5, r6
 8014958:	d11a      	bne.n	8014990 <_printf_common+0xc8>
 801495a:	2000      	movs	r0, #0
 801495c:	e008      	b.n	8014970 <_printf_common+0xa8>
 801495e:	2301      	movs	r3, #1
 8014960:	4652      	mov	r2, sl
 8014962:	4649      	mov	r1, r9
 8014964:	4638      	mov	r0, r7
 8014966:	47c0      	blx	r8
 8014968:	3001      	adds	r0, #1
 801496a:	d103      	bne.n	8014974 <_printf_common+0xac>
 801496c:	f04f 30ff 	mov.w	r0, #4294967295
 8014970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014974:	3501      	adds	r5, #1
 8014976:	e7c6      	b.n	8014906 <_printf_common+0x3e>
 8014978:	18e1      	adds	r1, r4, r3
 801497a:	1c5a      	adds	r2, r3, #1
 801497c:	2030      	movs	r0, #48	; 0x30
 801497e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014982:	4422      	add	r2, r4
 8014984:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014988:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801498c:	3302      	adds	r3, #2
 801498e:	e7c7      	b.n	8014920 <_printf_common+0x58>
 8014990:	2301      	movs	r3, #1
 8014992:	4622      	mov	r2, r4
 8014994:	4649      	mov	r1, r9
 8014996:	4638      	mov	r0, r7
 8014998:	47c0      	blx	r8
 801499a:	3001      	adds	r0, #1
 801499c:	d0e6      	beq.n	801496c <_printf_common+0xa4>
 801499e:	3601      	adds	r6, #1
 80149a0:	e7d9      	b.n	8014956 <_printf_common+0x8e>
	...

080149a4 <_printf_i>:
 80149a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80149a8:	7e0f      	ldrb	r7, [r1, #24]
 80149aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80149ac:	2f78      	cmp	r7, #120	; 0x78
 80149ae:	4691      	mov	r9, r2
 80149b0:	4680      	mov	r8, r0
 80149b2:	460c      	mov	r4, r1
 80149b4:	469a      	mov	sl, r3
 80149b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80149ba:	d807      	bhi.n	80149cc <_printf_i+0x28>
 80149bc:	2f62      	cmp	r7, #98	; 0x62
 80149be:	d80a      	bhi.n	80149d6 <_printf_i+0x32>
 80149c0:	2f00      	cmp	r7, #0
 80149c2:	f000 80d8 	beq.w	8014b76 <_printf_i+0x1d2>
 80149c6:	2f58      	cmp	r7, #88	; 0x58
 80149c8:	f000 80a3 	beq.w	8014b12 <_printf_i+0x16e>
 80149cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80149d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80149d4:	e03a      	b.n	8014a4c <_printf_i+0xa8>
 80149d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80149da:	2b15      	cmp	r3, #21
 80149dc:	d8f6      	bhi.n	80149cc <_printf_i+0x28>
 80149de:	a101      	add	r1, pc, #4	; (adr r1, 80149e4 <_printf_i+0x40>)
 80149e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80149e4:	08014a3d 	.word	0x08014a3d
 80149e8:	08014a51 	.word	0x08014a51
 80149ec:	080149cd 	.word	0x080149cd
 80149f0:	080149cd 	.word	0x080149cd
 80149f4:	080149cd 	.word	0x080149cd
 80149f8:	080149cd 	.word	0x080149cd
 80149fc:	08014a51 	.word	0x08014a51
 8014a00:	080149cd 	.word	0x080149cd
 8014a04:	080149cd 	.word	0x080149cd
 8014a08:	080149cd 	.word	0x080149cd
 8014a0c:	080149cd 	.word	0x080149cd
 8014a10:	08014b5d 	.word	0x08014b5d
 8014a14:	08014a81 	.word	0x08014a81
 8014a18:	08014b3f 	.word	0x08014b3f
 8014a1c:	080149cd 	.word	0x080149cd
 8014a20:	080149cd 	.word	0x080149cd
 8014a24:	08014b7f 	.word	0x08014b7f
 8014a28:	080149cd 	.word	0x080149cd
 8014a2c:	08014a81 	.word	0x08014a81
 8014a30:	080149cd 	.word	0x080149cd
 8014a34:	080149cd 	.word	0x080149cd
 8014a38:	08014b47 	.word	0x08014b47
 8014a3c:	682b      	ldr	r3, [r5, #0]
 8014a3e:	1d1a      	adds	r2, r3, #4
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	602a      	str	r2, [r5, #0]
 8014a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014a48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014a4c:	2301      	movs	r3, #1
 8014a4e:	e0a3      	b.n	8014b98 <_printf_i+0x1f4>
 8014a50:	6820      	ldr	r0, [r4, #0]
 8014a52:	6829      	ldr	r1, [r5, #0]
 8014a54:	0606      	lsls	r6, r0, #24
 8014a56:	f101 0304 	add.w	r3, r1, #4
 8014a5a:	d50a      	bpl.n	8014a72 <_printf_i+0xce>
 8014a5c:	680e      	ldr	r6, [r1, #0]
 8014a5e:	602b      	str	r3, [r5, #0]
 8014a60:	2e00      	cmp	r6, #0
 8014a62:	da03      	bge.n	8014a6c <_printf_i+0xc8>
 8014a64:	232d      	movs	r3, #45	; 0x2d
 8014a66:	4276      	negs	r6, r6
 8014a68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014a6c:	485e      	ldr	r0, [pc, #376]	; (8014be8 <_printf_i+0x244>)
 8014a6e:	230a      	movs	r3, #10
 8014a70:	e019      	b.n	8014aa6 <_printf_i+0x102>
 8014a72:	680e      	ldr	r6, [r1, #0]
 8014a74:	602b      	str	r3, [r5, #0]
 8014a76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014a7a:	bf18      	it	ne
 8014a7c:	b236      	sxthne	r6, r6
 8014a7e:	e7ef      	b.n	8014a60 <_printf_i+0xbc>
 8014a80:	682b      	ldr	r3, [r5, #0]
 8014a82:	6820      	ldr	r0, [r4, #0]
 8014a84:	1d19      	adds	r1, r3, #4
 8014a86:	6029      	str	r1, [r5, #0]
 8014a88:	0601      	lsls	r1, r0, #24
 8014a8a:	d501      	bpl.n	8014a90 <_printf_i+0xec>
 8014a8c:	681e      	ldr	r6, [r3, #0]
 8014a8e:	e002      	b.n	8014a96 <_printf_i+0xf2>
 8014a90:	0646      	lsls	r6, r0, #25
 8014a92:	d5fb      	bpl.n	8014a8c <_printf_i+0xe8>
 8014a94:	881e      	ldrh	r6, [r3, #0]
 8014a96:	4854      	ldr	r0, [pc, #336]	; (8014be8 <_printf_i+0x244>)
 8014a98:	2f6f      	cmp	r7, #111	; 0x6f
 8014a9a:	bf0c      	ite	eq
 8014a9c:	2308      	moveq	r3, #8
 8014a9e:	230a      	movne	r3, #10
 8014aa0:	2100      	movs	r1, #0
 8014aa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014aa6:	6865      	ldr	r5, [r4, #4]
 8014aa8:	60a5      	str	r5, [r4, #8]
 8014aaa:	2d00      	cmp	r5, #0
 8014aac:	bfa2      	ittt	ge
 8014aae:	6821      	ldrge	r1, [r4, #0]
 8014ab0:	f021 0104 	bicge.w	r1, r1, #4
 8014ab4:	6021      	strge	r1, [r4, #0]
 8014ab6:	b90e      	cbnz	r6, 8014abc <_printf_i+0x118>
 8014ab8:	2d00      	cmp	r5, #0
 8014aba:	d04d      	beq.n	8014b58 <_printf_i+0x1b4>
 8014abc:	4615      	mov	r5, r2
 8014abe:	fbb6 f1f3 	udiv	r1, r6, r3
 8014ac2:	fb03 6711 	mls	r7, r3, r1, r6
 8014ac6:	5dc7      	ldrb	r7, [r0, r7]
 8014ac8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014acc:	4637      	mov	r7, r6
 8014ace:	42bb      	cmp	r3, r7
 8014ad0:	460e      	mov	r6, r1
 8014ad2:	d9f4      	bls.n	8014abe <_printf_i+0x11a>
 8014ad4:	2b08      	cmp	r3, #8
 8014ad6:	d10b      	bne.n	8014af0 <_printf_i+0x14c>
 8014ad8:	6823      	ldr	r3, [r4, #0]
 8014ada:	07de      	lsls	r6, r3, #31
 8014adc:	d508      	bpl.n	8014af0 <_printf_i+0x14c>
 8014ade:	6923      	ldr	r3, [r4, #16]
 8014ae0:	6861      	ldr	r1, [r4, #4]
 8014ae2:	4299      	cmp	r1, r3
 8014ae4:	bfde      	ittt	le
 8014ae6:	2330      	movle	r3, #48	; 0x30
 8014ae8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014aec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014af0:	1b52      	subs	r2, r2, r5
 8014af2:	6122      	str	r2, [r4, #16]
 8014af4:	f8cd a000 	str.w	sl, [sp]
 8014af8:	464b      	mov	r3, r9
 8014afa:	aa03      	add	r2, sp, #12
 8014afc:	4621      	mov	r1, r4
 8014afe:	4640      	mov	r0, r8
 8014b00:	f7ff fee2 	bl	80148c8 <_printf_common>
 8014b04:	3001      	adds	r0, #1
 8014b06:	d14c      	bne.n	8014ba2 <_printf_i+0x1fe>
 8014b08:	f04f 30ff 	mov.w	r0, #4294967295
 8014b0c:	b004      	add	sp, #16
 8014b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b12:	4835      	ldr	r0, [pc, #212]	; (8014be8 <_printf_i+0x244>)
 8014b14:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014b18:	6829      	ldr	r1, [r5, #0]
 8014b1a:	6823      	ldr	r3, [r4, #0]
 8014b1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8014b20:	6029      	str	r1, [r5, #0]
 8014b22:	061d      	lsls	r5, r3, #24
 8014b24:	d514      	bpl.n	8014b50 <_printf_i+0x1ac>
 8014b26:	07df      	lsls	r7, r3, #31
 8014b28:	bf44      	itt	mi
 8014b2a:	f043 0320 	orrmi.w	r3, r3, #32
 8014b2e:	6023      	strmi	r3, [r4, #0]
 8014b30:	b91e      	cbnz	r6, 8014b3a <_printf_i+0x196>
 8014b32:	6823      	ldr	r3, [r4, #0]
 8014b34:	f023 0320 	bic.w	r3, r3, #32
 8014b38:	6023      	str	r3, [r4, #0]
 8014b3a:	2310      	movs	r3, #16
 8014b3c:	e7b0      	b.n	8014aa0 <_printf_i+0xfc>
 8014b3e:	6823      	ldr	r3, [r4, #0]
 8014b40:	f043 0320 	orr.w	r3, r3, #32
 8014b44:	6023      	str	r3, [r4, #0]
 8014b46:	2378      	movs	r3, #120	; 0x78
 8014b48:	4828      	ldr	r0, [pc, #160]	; (8014bec <_printf_i+0x248>)
 8014b4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014b4e:	e7e3      	b.n	8014b18 <_printf_i+0x174>
 8014b50:	0659      	lsls	r1, r3, #25
 8014b52:	bf48      	it	mi
 8014b54:	b2b6      	uxthmi	r6, r6
 8014b56:	e7e6      	b.n	8014b26 <_printf_i+0x182>
 8014b58:	4615      	mov	r5, r2
 8014b5a:	e7bb      	b.n	8014ad4 <_printf_i+0x130>
 8014b5c:	682b      	ldr	r3, [r5, #0]
 8014b5e:	6826      	ldr	r6, [r4, #0]
 8014b60:	6961      	ldr	r1, [r4, #20]
 8014b62:	1d18      	adds	r0, r3, #4
 8014b64:	6028      	str	r0, [r5, #0]
 8014b66:	0635      	lsls	r5, r6, #24
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	d501      	bpl.n	8014b70 <_printf_i+0x1cc>
 8014b6c:	6019      	str	r1, [r3, #0]
 8014b6e:	e002      	b.n	8014b76 <_printf_i+0x1d2>
 8014b70:	0670      	lsls	r0, r6, #25
 8014b72:	d5fb      	bpl.n	8014b6c <_printf_i+0x1c8>
 8014b74:	8019      	strh	r1, [r3, #0]
 8014b76:	2300      	movs	r3, #0
 8014b78:	6123      	str	r3, [r4, #16]
 8014b7a:	4615      	mov	r5, r2
 8014b7c:	e7ba      	b.n	8014af4 <_printf_i+0x150>
 8014b7e:	682b      	ldr	r3, [r5, #0]
 8014b80:	1d1a      	adds	r2, r3, #4
 8014b82:	602a      	str	r2, [r5, #0]
 8014b84:	681d      	ldr	r5, [r3, #0]
 8014b86:	6862      	ldr	r2, [r4, #4]
 8014b88:	2100      	movs	r1, #0
 8014b8a:	4628      	mov	r0, r5
 8014b8c:	f7eb fb40 	bl	8000210 <memchr>
 8014b90:	b108      	cbz	r0, 8014b96 <_printf_i+0x1f2>
 8014b92:	1b40      	subs	r0, r0, r5
 8014b94:	6060      	str	r0, [r4, #4]
 8014b96:	6863      	ldr	r3, [r4, #4]
 8014b98:	6123      	str	r3, [r4, #16]
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014ba0:	e7a8      	b.n	8014af4 <_printf_i+0x150>
 8014ba2:	6923      	ldr	r3, [r4, #16]
 8014ba4:	462a      	mov	r2, r5
 8014ba6:	4649      	mov	r1, r9
 8014ba8:	4640      	mov	r0, r8
 8014baa:	47d0      	blx	sl
 8014bac:	3001      	adds	r0, #1
 8014bae:	d0ab      	beq.n	8014b08 <_printf_i+0x164>
 8014bb0:	6823      	ldr	r3, [r4, #0]
 8014bb2:	079b      	lsls	r3, r3, #30
 8014bb4:	d413      	bmi.n	8014bde <_printf_i+0x23a>
 8014bb6:	68e0      	ldr	r0, [r4, #12]
 8014bb8:	9b03      	ldr	r3, [sp, #12]
 8014bba:	4298      	cmp	r0, r3
 8014bbc:	bfb8      	it	lt
 8014bbe:	4618      	movlt	r0, r3
 8014bc0:	e7a4      	b.n	8014b0c <_printf_i+0x168>
 8014bc2:	2301      	movs	r3, #1
 8014bc4:	4632      	mov	r2, r6
 8014bc6:	4649      	mov	r1, r9
 8014bc8:	4640      	mov	r0, r8
 8014bca:	47d0      	blx	sl
 8014bcc:	3001      	adds	r0, #1
 8014bce:	d09b      	beq.n	8014b08 <_printf_i+0x164>
 8014bd0:	3501      	adds	r5, #1
 8014bd2:	68e3      	ldr	r3, [r4, #12]
 8014bd4:	9903      	ldr	r1, [sp, #12]
 8014bd6:	1a5b      	subs	r3, r3, r1
 8014bd8:	42ab      	cmp	r3, r5
 8014bda:	dcf2      	bgt.n	8014bc2 <_printf_i+0x21e>
 8014bdc:	e7eb      	b.n	8014bb6 <_printf_i+0x212>
 8014bde:	2500      	movs	r5, #0
 8014be0:	f104 0619 	add.w	r6, r4, #25
 8014be4:	e7f5      	b.n	8014bd2 <_printf_i+0x22e>
 8014be6:	bf00      	nop
 8014be8:	0801a8e1 	.word	0x0801a8e1
 8014bec:	0801a8f2 	.word	0x0801a8f2

08014bf0 <_sbrk_r>:
 8014bf0:	b538      	push	{r3, r4, r5, lr}
 8014bf2:	4d06      	ldr	r5, [pc, #24]	; (8014c0c <_sbrk_r+0x1c>)
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	4604      	mov	r4, r0
 8014bf8:	4608      	mov	r0, r1
 8014bfa:	602b      	str	r3, [r5, #0]
 8014bfc:	f7ed fc56 	bl	80024ac <_sbrk>
 8014c00:	1c43      	adds	r3, r0, #1
 8014c02:	d102      	bne.n	8014c0a <_sbrk_r+0x1a>
 8014c04:	682b      	ldr	r3, [r5, #0]
 8014c06:	b103      	cbz	r3, 8014c0a <_sbrk_r+0x1a>
 8014c08:	6023      	str	r3, [r4, #0]
 8014c0a:	bd38      	pop	{r3, r4, r5, pc}
 8014c0c:	2000b050 	.word	0x2000b050

08014c10 <__sread>:
 8014c10:	b510      	push	{r4, lr}
 8014c12:	460c      	mov	r4, r1
 8014c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c18:	f000 fa9e 	bl	8015158 <_read_r>
 8014c1c:	2800      	cmp	r0, #0
 8014c1e:	bfab      	itete	ge
 8014c20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014c22:	89a3      	ldrhlt	r3, [r4, #12]
 8014c24:	181b      	addge	r3, r3, r0
 8014c26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014c2a:	bfac      	ite	ge
 8014c2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8014c2e:	81a3      	strhlt	r3, [r4, #12]
 8014c30:	bd10      	pop	{r4, pc}

08014c32 <__swrite>:
 8014c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c36:	461f      	mov	r7, r3
 8014c38:	898b      	ldrh	r3, [r1, #12]
 8014c3a:	05db      	lsls	r3, r3, #23
 8014c3c:	4605      	mov	r5, r0
 8014c3e:	460c      	mov	r4, r1
 8014c40:	4616      	mov	r6, r2
 8014c42:	d505      	bpl.n	8014c50 <__swrite+0x1e>
 8014c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c48:	2302      	movs	r3, #2
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	f000 f9d0 	bl	8014ff0 <_lseek_r>
 8014c50:	89a3      	ldrh	r3, [r4, #12]
 8014c52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014c5a:	81a3      	strh	r3, [r4, #12]
 8014c5c:	4632      	mov	r2, r6
 8014c5e:	463b      	mov	r3, r7
 8014c60:	4628      	mov	r0, r5
 8014c62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c66:	f000 b869 	b.w	8014d3c <_write_r>

08014c6a <__sseek>:
 8014c6a:	b510      	push	{r4, lr}
 8014c6c:	460c      	mov	r4, r1
 8014c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c72:	f000 f9bd 	bl	8014ff0 <_lseek_r>
 8014c76:	1c43      	adds	r3, r0, #1
 8014c78:	89a3      	ldrh	r3, [r4, #12]
 8014c7a:	bf15      	itete	ne
 8014c7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8014c7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014c82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014c86:	81a3      	strheq	r3, [r4, #12]
 8014c88:	bf18      	it	ne
 8014c8a:	81a3      	strhne	r3, [r4, #12]
 8014c8c:	bd10      	pop	{r4, pc}

08014c8e <__sclose>:
 8014c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c92:	f000 b8db 	b.w	8014e4c <_close_r>
	...

08014c98 <__swbuf_r>:
 8014c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c9a:	460e      	mov	r6, r1
 8014c9c:	4614      	mov	r4, r2
 8014c9e:	4605      	mov	r5, r0
 8014ca0:	b118      	cbz	r0, 8014caa <__swbuf_r+0x12>
 8014ca2:	6983      	ldr	r3, [r0, #24]
 8014ca4:	b90b      	cbnz	r3, 8014caa <__swbuf_r+0x12>
 8014ca6:	f7ff f9bf 	bl	8014028 <__sinit>
 8014caa:	4b21      	ldr	r3, [pc, #132]	; (8014d30 <__swbuf_r+0x98>)
 8014cac:	429c      	cmp	r4, r3
 8014cae:	d12b      	bne.n	8014d08 <__swbuf_r+0x70>
 8014cb0:	686c      	ldr	r4, [r5, #4]
 8014cb2:	69a3      	ldr	r3, [r4, #24]
 8014cb4:	60a3      	str	r3, [r4, #8]
 8014cb6:	89a3      	ldrh	r3, [r4, #12]
 8014cb8:	071a      	lsls	r2, r3, #28
 8014cba:	d52f      	bpl.n	8014d1c <__swbuf_r+0x84>
 8014cbc:	6923      	ldr	r3, [r4, #16]
 8014cbe:	b36b      	cbz	r3, 8014d1c <__swbuf_r+0x84>
 8014cc0:	6923      	ldr	r3, [r4, #16]
 8014cc2:	6820      	ldr	r0, [r4, #0]
 8014cc4:	1ac0      	subs	r0, r0, r3
 8014cc6:	6963      	ldr	r3, [r4, #20]
 8014cc8:	b2f6      	uxtb	r6, r6
 8014cca:	4283      	cmp	r3, r0
 8014ccc:	4637      	mov	r7, r6
 8014cce:	dc04      	bgt.n	8014cda <__swbuf_r+0x42>
 8014cd0:	4621      	mov	r1, r4
 8014cd2:	4628      	mov	r0, r5
 8014cd4:	f000 f950 	bl	8014f78 <_fflush_r>
 8014cd8:	bb30      	cbnz	r0, 8014d28 <__swbuf_r+0x90>
 8014cda:	68a3      	ldr	r3, [r4, #8]
 8014cdc:	3b01      	subs	r3, #1
 8014cde:	60a3      	str	r3, [r4, #8]
 8014ce0:	6823      	ldr	r3, [r4, #0]
 8014ce2:	1c5a      	adds	r2, r3, #1
 8014ce4:	6022      	str	r2, [r4, #0]
 8014ce6:	701e      	strb	r6, [r3, #0]
 8014ce8:	6963      	ldr	r3, [r4, #20]
 8014cea:	3001      	adds	r0, #1
 8014cec:	4283      	cmp	r3, r0
 8014cee:	d004      	beq.n	8014cfa <__swbuf_r+0x62>
 8014cf0:	89a3      	ldrh	r3, [r4, #12]
 8014cf2:	07db      	lsls	r3, r3, #31
 8014cf4:	d506      	bpl.n	8014d04 <__swbuf_r+0x6c>
 8014cf6:	2e0a      	cmp	r6, #10
 8014cf8:	d104      	bne.n	8014d04 <__swbuf_r+0x6c>
 8014cfa:	4621      	mov	r1, r4
 8014cfc:	4628      	mov	r0, r5
 8014cfe:	f000 f93b 	bl	8014f78 <_fflush_r>
 8014d02:	b988      	cbnz	r0, 8014d28 <__swbuf_r+0x90>
 8014d04:	4638      	mov	r0, r7
 8014d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d08:	4b0a      	ldr	r3, [pc, #40]	; (8014d34 <__swbuf_r+0x9c>)
 8014d0a:	429c      	cmp	r4, r3
 8014d0c:	d101      	bne.n	8014d12 <__swbuf_r+0x7a>
 8014d0e:	68ac      	ldr	r4, [r5, #8]
 8014d10:	e7cf      	b.n	8014cb2 <__swbuf_r+0x1a>
 8014d12:	4b09      	ldr	r3, [pc, #36]	; (8014d38 <__swbuf_r+0xa0>)
 8014d14:	429c      	cmp	r4, r3
 8014d16:	bf08      	it	eq
 8014d18:	68ec      	ldreq	r4, [r5, #12]
 8014d1a:	e7ca      	b.n	8014cb2 <__swbuf_r+0x1a>
 8014d1c:	4621      	mov	r1, r4
 8014d1e:	4628      	mov	r0, r5
 8014d20:	f000 f81e 	bl	8014d60 <__swsetup_r>
 8014d24:	2800      	cmp	r0, #0
 8014d26:	d0cb      	beq.n	8014cc0 <__swbuf_r+0x28>
 8014d28:	f04f 37ff 	mov.w	r7, #4294967295
 8014d2c:	e7ea      	b.n	8014d04 <__swbuf_r+0x6c>
 8014d2e:	bf00      	nop
 8014d30:	0801a890 	.word	0x0801a890
 8014d34:	0801a8b0 	.word	0x0801a8b0
 8014d38:	0801a870 	.word	0x0801a870

08014d3c <_write_r>:
 8014d3c:	b538      	push	{r3, r4, r5, lr}
 8014d3e:	4d07      	ldr	r5, [pc, #28]	; (8014d5c <_write_r+0x20>)
 8014d40:	4604      	mov	r4, r0
 8014d42:	4608      	mov	r0, r1
 8014d44:	4611      	mov	r1, r2
 8014d46:	2200      	movs	r2, #0
 8014d48:	602a      	str	r2, [r5, #0]
 8014d4a:	461a      	mov	r2, r3
 8014d4c:	f7eb fcc3 	bl	80006d6 <_write>
 8014d50:	1c43      	adds	r3, r0, #1
 8014d52:	d102      	bne.n	8014d5a <_write_r+0x1e>
 8014d54:	682b      	ldr	r3, [r5, #0]
 8014d56:	b103      	cbz	r3, 8014d5a <_write_r+0x1e>
 8014d58:	6023      	str	r3, [r4, #0]
 8014d5a:	bd38      	pop	{r3, r4, r5, pc}
 8014d5c:	2000b050 	.word	0x2000b050

08014d60 <__swsetup_r>:
 8014d60:	4b32      	ldr	r3, [pc, #200]	; (8014e2c <__swsetup_r+0xcc>)
 8014d62:	b570      	push	{r4, r5, r6, lr}
 8014d64:	681d      	ldr	r5, [r3, #0]
 8014d66:	4606      	mov	r6, r0
 8014d68:	460c      	mov	r4, r1
 8014d6a:	b125      	cbz	r5, 8014d76 <__swsetup_r+0x16>
 8014d6c:	69ab      	ldr	r3, [r5, #24]
 8014d6e:	b913      	cbnz	r3, 8014d76 <__swsetup_r+0x16>
 8014d70:	4628      	mov	r0, r5
 8014d72:	f7ff f959 	bl	8014028 <__sinit>
 8014d76:	4b2e      	ldr	r3, [pc, #184]	; (8014e30 <__swsetup_r+0xd0>)
 8014d78:	429c      	cmp	r4, r3
 8014d7a:	d10f      	bne.n	8014d9c <__swsetup_r+0x3c>
 8014d7c:	686c      	ldr	r4, [r5, #4]
 8014d7e:	89a3      	ldrh	r3, [r4, #12]
 8014d80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014d84:	0719      	lsls	r1, r3, #28
 8014d86:	d42c      	bmi.n	8014de2 <__swsetup_r+0x82>
 8014d88:	06dd      	lsls	r5, r3, #27
 8014d8a:	d411      	bmi.n	8014db0 <__swsetup_r+0x50>
 8014d8c:	2309      	movs	r3, #9
 8014d8e:	6033      	str	r3, [r6, #0]
 8014d90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014d94:	81a3      	strh	r3, [r4, #12]
 8014d96:	f04f 30ff 	mov.w	r0, #4294967295
 8014d9a:	e03e      	b.n	8014e1a <__swsetup_r+0xba>
 8014d9c:	4b25      	ldr	r3, [pc, #148]	; (8014e34 <__swsetup_r+0xd4>)
 8014d9e:	429c      	cmp	r4, r3
 8014da0:	d101      	bne.n	8014da6 <__swsetup_r+0x46>
 8014da2:	68ac      	ldr	r4, [r5, #8]
 8014da4:	e7eb      	b.n	8014d7e <__swsetup_r+0x1e>
 8014da6:	4b24      	ldr	r3, [pc, #144]	; (8014e38 <__swsetup_r+0xd8>)
 8014da8:	429c      	cmp	r4, r3
 8014daa:	bf08      	it	eq
 8014dac:	68ec      	ldreq	r4, [r5, #12]
 8014dae:	e7e6      	b.n	8014d7e <__swsetup_r+0x1e>
 8014db0:	0758      	lsls	r0, r3, #29
 8014db2:	d512      	bpl.n	8014dda <__swsetup_r+0x7a>
 8014db4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014db6:	b141      	cbz	r1, 8014dca <__swsetup_r+0x6a>
 8014db8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014dbc:	4299      	cmp	r1, r3
 8014dbe:	d002      	beq.n	8014dc6 <__swsetup_r+0x66>
 8014dc0:	4630      	mov	r0, r6
 8014dc2:	f7ff f9eb 	bl	801419c <_free_r>
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	6363      	str	r3, [r4, #52]	; 0x34
 8014dca:	89a3      	ldrh	r3, [r4, #12]
 8014dcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014dd0:	81a3      	strh	r3, [r4, #12]
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	6063      	str	r3, [r4, #4]
 8014dd6:	6923      	ldr	r3, [r4, #16]
 8014dd8:	6023      	str	r3, [r4, #0]
 8014dda:	89a3      	ldrh	r3, [r4, #12]
 8014ddc:	f043 0308 	orr.w	r3, r3, #8
 8014de0:	81a3      	strh	r3, [r4, #12]
 8014de2:	6923      	ldr	r3, [r4, #16]
 8014de4:	b94b      	cbnz	r3, 8014dfa <__swsetup_r+0x9a>
 8014de6:	89a3      	ldrh	r3, [r4, #12]
 8014de8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014df0:	d003      	beq.n	8014dfa <__swsetup_r+0x9a>
 8014df2:	4621      	mov	r1, r4
 8014df4:	4630      	mov	r0, r6
 8014df6:	f000 f933 	bl	8015060 <__smakebuf_r>
 8014dfa:	89a0      	ldrh	r0, [r4, #12]
 8014dfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014e00:	f010 0301 	ands.w	r3, r0, #1
 8014e04:	d00a      	beq.n	8014e1c <__swsetup_r+0xbc>
 8014e06:	2300      	movs	r3, #0
 8014e08:	60a3      	str	r3, [r4, #8]
 8014e0a:	6963      	ldr	r3, [r4, #20]
 8014e0c:	425b      	negs	r3, r3
 8014e0e:	61a3      	str	r3, [r4, #24]
 8014e10:	6923      	ldr	r3, [r4, #16]
 8014e12:	b943      	cbnz	r3, 8014e26 <__swsetup_r+0xc6>
 8014e14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014e18:	d1ba      	bne.n	8014d90 <__swsetup_r+0x30>
 8014e1a:	bd70      	pop	{r4, r5, r6, pc}
 8014e1c:	0781      	lsls	r1, r0, #30
 8014e1e:	bf58      	it	pl
 8014e20:	6963      	ldrpl	r3, [r4, #20]
 8014e22:	60a3      	str	r3, [r4, #8]
 8014e24:	e7f4      	b.n	8014e10 <__swsetup_r+0xb0>
 8014e26:	2000      	movs	r0, #0
 8014e28:	e7f7      	b.n	8014e1a <__swsetup_r+0xba>
 8014e2a:	bf00      	nop
 8014e2c:	20000048 	.word	0x20000048
 8014e30:	0801a890 	.word	0x0801a890
 8014e34:	0801a8b0 	.word	0x0801a8b0
 8014e38:	0801a870 	.word	0x0801a870

08014e3c <abort>:
 8014e3c:	b508      	push	{r3, lr}
 8014e3e:	2006      	movs	r0, #6
 8014e40:	f000 f9c4 	bl	80151cc <raise>
 8014e44:	2001      	movs	r0, #1
 8014e46:	f7ed fad5 	bl	80023f4 <_exit>
	...

08014e4c <_close_r>:
 8014e4c:	b538      	push	{r3, r4, r5, lr}
 8014e4e:	4d06      	ldr	r5, [pc, #24]	; (8014e68 <_close_r+0x1c>)
 8014e50:	2300      	movs	r3, #0
 8014e52:	4604      	mov	r4, r0
 8014e54:	4608      	mov	r0, r1
 8014e56:	602b      	str	r3, [r5, #0]
 8014e58:	f7ed faf3 	bl	8002442 <_close>
 8014e5c:	1c43      	adds	r3, r0, #1
 8014e5e:	d102      	bne.n	8014e66 <_close_r+0x1a>
 8014e60:	682b      	ldr	r3, [r5, #0]
 8014e62:	b103      	cbz	r3, 8014e66 <_close_r+0x1a>
 8014e64:	6023      	str	r3, [r4, #0]
 8014e66:	bd38      	pop	{r3, r4, r5, pc}
 8014e68:	2000b050 	.word	0x2000b050

08014e6c <__sflush_r>:
 8014e6c:	898a      	ldrh	r2, [r1, #12]
 8014e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e72:	4605      	mov	r5, r0
 8014e74:	0710      	lsls	r0, r2, #28
 8014e76:	460c      	mov	r4, r1
 8014e78:	d458      	bmi.n	8014f2c <__sflush_r+0xc0>
 8014e7a:	684b      	ldr	r3, [r1, #4]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	dc05      	bgt.n	8014e8c <__sflush_r+0x20>
 8014e80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	dc02      	bgt.n	8014e8c <__sflush_r+0x20>
 8014e86:	2000      	movs	r0, #0
 8014e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014e8e:	2e00      	cmp	r6, #0
 8014e90:	d0f9      	beq.n	8014e86 <__sflush_r+0x1a>
 8014e92:	2300      	movs	r3, #0
 8014e94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014e98:	682f      	ldr	r7, [r5, #0]
 8014e9a:	602b      	str	r3, [r5, #0]
 8014e9c:	d032      	beq.n	8014f04 <__sflush_r+0x98>
 8014e9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014ea0:	89a3      	ldrh	r3, [r4, #12]
 8014ea2:	075a      	lsls	r2, r3, #29
 8014ea4:	d505      	bpl.n	8014eb2 <__sflush_r+0x46>
 8014ea6:	6863      	ldr	r3, [r4, #4]
 8014ea8:	1ac0      	subs	r0, r0, r3
 8014eaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014eac:	b10b      	cbz	r3, 8014eb2 <__sflush_r+0x46>
 8014eae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014eb0:	1ac0      	subs	r0, r0, r3
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	4602      	mov	r2, r0
 8014eb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014eb8:	6a21      	ldr	r1, [r4, #32]
 8014eba:	4628      	mov	r0, r5
 8014ebc:	47b0      	blx	r6
 8014ebe:	1c43      	adds	r3, r0, #1
 8014ec0:	89a3      	ldrh	r3, [r4, #12]
 8014ec2:	d106      	bne.n	8014ed2 <__sflush_r+0x66>
 8014ec4:	6829      	ldr	r1, [r5, #0]
 8014ec6:	291d      	cmp	r1, #29
 8014ec8:	d82c      	bhi.n	8014f24 <__sflush_r+0xb8>
 8014eca:	4a2a      	ldr	r2, [pc, #168]	; (8014f74 <__sflush_r+0x108>)
 8014ecc:	40ca      	lsrs	r2, r1
 8014ece:	07d6      	lsls	r6, r2, #31
 8014ed0:	d528      	bpl.n	8014f24 <__sflush_r+0xb8>
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	6062      	str	r2, [r4, #4]
 8014ed6:	04d9      	lsls	r1, r3, #19
 8014ed8:	6922      	ldr	r2, [r4, #16]
 8014eda:	6022      	str	r2, [r4, #0]
 8014edc:	d504      	bpl.n	8014ee8 <__sflush_r+0x7c>
 8014ede:	1c42      	adds	r2, r0, #1
 8014ee0:	d101      	bne.n	8014ee6 <__sflush_r+0x7a>
 8014ee2:	682b      	ldr	r3, [r5, #0]
 8014ee4:	b903      	cbnz	r3, 8014ee8 <__sflush_r+0x7c>
 8014ee6:	6560      	str	r0, [r4, #84]	; 0x54
 8014ee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014eea:	602f      	str	r7, [r5, #0]
 8014eec:	2900      	cmp	r1, #0
 8014eee:	d0ca      	beq.n	8014e86 <__sflush_r+0x1a>
 8014ef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014ef4:	4299      	cmp	r1, r3
 8014ef6:	d002      	beq.n	8014efe <__sflush_r+0x92>
 8014ef8:	4628      	mov	r0, r5
 8014efa:	f7ff f94f 	bl	801419c <_free_r>
 8014efe:	2000      	movs	r0, #0
 8014f00:	6360      	str	r0, [r4, #52]	; 0x34
 8014f02:	e7c1      	b.n	8014e88 <__sflush_r+0x1c>
 8014f04:	6a21      	ldr	r1, [r4, #32]
 8014f06:	2301      	movs	r3, #1
 8014f08:	4628      	mov	r0, r5
 8014f0a:	47b0      	blx	r6
 8014f0c:	1c41      	adds	r1, r0, #1
 8014f0e:	d1c7      	bne.n	8014ea0 <__sflush_r+0x34>
 8014f10:	682b      	ldr	r3, [r5, #0]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d0c4      	beq.n	8014ea0 <__sflush_r+0x34>
 8014f16:	2b1d      	cmp	r3, #29
 8014f18:	d001      	beq.n	8014f1e <__sflush_r+0xb2>
 8014f1a:	2b16      	cmp	r3, #22
 8014f1c:	d101      	bne.n	8014f22 <__sflush_r+0xb6>
 8014f1e:	602f      	str	r7, [r5, #0]
 8014f20:	e7b1      	b.n	8014e86 <__sflush_r+0x1a>
 8014f22:	89a3      	ldrh	r3, [r4, #12]
 8014f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f28:	81a3      	strh	r3, [r4, #12]
 8014f2a:	e7ad      	b.n	8014e88 <__sflush_r+0x1c>
 8014f2c:	690f      	ldr	r7, [r1, #16]
 8014f2e:	2f00      	cmp	r7, #0
 8014f30:	d0a9      	beq.n	8014e86 <__sflush_r+0x1a>
 8014f32:	0793      	lsls	r3, r2, #30
 8014f34:	680e      	ldr	r6, [r1, #0]
 8014f36:	bf08      	it	eq
 8014f38:	694b      	ldreq	r3, [r1, #20]
 8014f3a:	600f      	str	r7, [r1, #0]
 8014f3c:	bf18      	it	ne
 8014f3e:	2300      	movne	r3, #0
 8014f40:	eba6 0807 	sub.w	r8, r6, r7
 8014f44:	608b      	str	r3, [r1, #8]
 8014f46:	f1b8 0f00 	cmp.w	r8, #0
 8014f4a:	dd9c      	ble.n	8014e86 <__sflush_r+0x1a>
 8014f4c:	6a21      	ldr	r1, [r4, #32]
 8014f4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014f50:	4643      	mov	r3, r8
 8014f52:	463a      	mov	r2, r7
 8014f54:	4628      	mov	r0, r5
 8014f56:	47b0      	blx	r6
 8014f58:	2800      	cmp	r0, #0
 8014f5a:	dc06      	bgt.n	8014f6a <__sflush_r+0xfe>
 8014f5c:	89a3      	ldrh	r3, [r4, #12]
 8014f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f62:	81a3      	strh	r3, [r4, #12]
 8014f64:	f04f 30ff 	mov.w	r0, #4294967295
 8014f68:	e78e      	b.n	8014e88 <__sflush_r+0x1c>
 8014f6a:	4407      	add	r7, r0
 8014f6c:	eba8 0800 	sub.w	r8, r8, r0
 8014f70:	e7e9      	b.n	8014f46 <__sflush_r+0xda>
 8014f72:	bf00      	nop
 8014f74:	20400001 	.word	0x20400001

08014f78 <_fflush_r>:
 8014f78:	b538      	push	{r3, r4, r5, lr}
 8014f7a:	690b      	ldr	r3, [r1, #16]
 8014f7c:	4605      	mov	r5, r0
 8014f7e:	460c      	mov	r4, r1
 8014f80:	b913      	cbnz	r3, 8014f88 <_fflush_r+0x10>
 8014f82:	2500      	movs	r5, #0
 8014f84:	4628      	mov	r0, r5
 8014f86:	bd38      	pop	{r3, r4, r5, pc}
 8014f88:	b118      	cbz	r0, 8014f92 <_fflush_r+0x1a>
 8014f8a:	6983      	ldr	r3, [r0, #24]
 8014f8c:	b90b      	cbnz	r3, 8014f92 <_fflush_r+0x1a>
 8014f8e:	f7ff f84b 	bl	8014028 <__sinit>
 8014f92:	4b14      	ldr	r3, [pc, #80]	; (8014fe4 <_fflush_r+0x6c>)
 8014f94:	429c      	cmp	r4, r3
 8014f96:	d11b      	bne.n	8014fd0 <_fflush_r+0x58>
 8014f98:	686c      	ldr	r4, [r5, #4]
 8014f9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d0ef      	beq.n	8014f82 <_fflush_r+0xa>
 8014fa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014fa4:	07d0      	lsls	r0, r2, #31
 8014fa6:	d404      	bmi.n	8014fb2 <_fflush_r+0x3a>
 8014fa8:	0599      	lsls	r1, r3, #22
 8014faa:	d402      	bmi.n	8014fb2 <_fflush_r+0x3a>
 8014fac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014fae:	f7ff f8eb 	bl	8014188 <__retarget_lock_acquire_recursive>
 8014fb2:	4628      	mov	r0, r5
 8014fb4:	4621      	mov	r1, r4
 8014fb6:	f7ff ff59 	bl	8014e6c <__sflush_r>
 8014fba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014fbc:	07da      	lsls	r2, r3, #31
 8014fbe:	4605      	mov	r5, r0
 8014fc0:	d4e0      	bmi.n	8014f84 <_fflush_r+0xc>
 8014fc2:	89a3      	ldrh	r3, [r4, #12]
 8014fc4:	059b      	lsls	r3, r3, #22
 8014fc6:	d4dd      	bmi.n	8014f84 <_fflush_r+0xc>
 8014fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014fca:	f7ff f8de 	bl	801418a <__retarget_lock_release_recursive>
 8014fce:	e7d9      	b.n	8014f84 <_fflush_r+0xc>
 8014fd0:	4b05      	ldr	r3, [pc, #20]	; (8014fe8 <_fflush_r+0x70>)
 8014fd2:	429c      	cmp	r4, r3
 8014fd4:	d101      	bne.n	8014fda <_fflush_r+0x62>
 8014fd6:	68ac      	ldr	r4, [r5, #8]
 8014fd8:	e7df      	b.n	8014f9a <_fflush_r+0x22>
 8014fda:	4b04      	ldr	r3, [pc, #16]	; (8014fec <_fflush_r+0x74>)
 8014fdc:	429c      	cmp	r4, r3
 8014fde:	bf08      	it	eq
 8014fe0:	68ec      	ldreq	r4, [r5, #12]
 8014fe2:	e7da      	b.n	8014f9a <_fflush_r+0x22>
 8014fe4:	0801a890 	.word	0x0801a890
 8014fe8:	0801a8b0 	.word	0x0801a8b0
 8014fec:	0801a870 	.word	0x0801a870

08014ff0 <_lseek_r>:
 8014ff0:	b538      	push	{r3, r4, r5, lr}
 8014ff2:	4d07      	ldr	r5, [pc, #28]	; (8015010 <_lseek_r+0x20>)
 8014ff4:	4604      	mov	r4, r0
 8014ff6:	4608      	mov	r0, r1
 8014ff8:	4611      	mov	r1, r2
 8014ffa:	2200      	movs	r2, #0
 8014ffc:	602a      	str	r2, [r5, #0]
 8014ffe:	461a      	mov	r2, r3
 8015000:	f7ed fa46 	bl	8002490 <_lseek>
 8015004:	1c43      	adds	r3, r0, #1
 8015006:	d102      	bne.n	801500e <_lseek_r+0x1e>
 8015008:	682b      	ldr	r3, [r5, #0]
 801500a:	b103      	cbz	r3, 801500e <_lseek_r+0x1e>
 801500c:	6023      	str	r3, [r4, #0]
 801500e:	bd38      	pop	{r3, r4, r5, pc}
 8015010:	2000b050 	.word	0x2000b050

08015014 <__swhatbuf_r>:
 8015014:	b570      	push	{r4, r5, r6, lr}
 8015016:	460e      	mov	r6, r1
 8015018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801501c:	2900      	cmp	r1, #0
 801501e:	b096      	sub	sp, #88	; 0x58
 8015020:	4614      	mov	r4, r2
 8015022:	461d      	mov	r5, r3
 8015024:	da08      	bge.n	8015038 <__swhatbuf_r+0x24>
 8015026:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801502a:	2200      	movs	r2, #0
 801502c:	602a      	str	r2, [r5, #0]
 801502e:	061a      	lsls	r2, r3, #24
 8015030:	d410      	bmi.n	8015054 <__swhatbuf_r+0x40>
 8015032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015036:	e00e      	b.n	8015056 <__swhatbuf_r+0x42>
 8015038:	466a      	mov	r2, sp
 801503a:	f000 f8e3 	bl	8015204 <_fstat_r>
 801503e:	2800      	cmp	r0, #0
 8015040:	dbf1      	blt.n	8015026 <__swhatbuf_r+0x12>
 8015042:	9a01      	ldr	r2, [sp, #4]
 8015044:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015048:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801504c:	425a      	negs	r2, r3
 801504e:	415a      	adcs	r2, r3
 8015050:	602a      	str	r2, [r5, #0]
 8015052:	e7ee      	b.n	8015032 <__swhatbuf_r+0x1e>
 8015054:	2340      	movs	r3, #64	; 0x40
 8015056:	2000      	movs	r0, #0
 8015058:	6023      	str	r3, [r4, #0]
 801505a:	b016      	add	sp, #88	; 0x58
 801505c:	bd70      	pop	{r4, r5, r6, pc}
	...

08015060 <__smakebuf_r>:
 8015060:	898b      	ldrh	r3, [r1, #12]
 8015062:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015064:	079d      	lsls	r5, r3, #30
 8015066:	4606      	mov	r6, r0
 8015068:	460c      	mov	r4, r1
 801506a:	d507      	bpl.n	801507c <__smakebuf_r+0x1c>
 801506c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015070:	6023      	str	r3, [r4, #0]
 8015072:	6123      	str	r3, [r4, #16]
 8015074:	2301      	movs	r3, #1
 8015076:	6163      	str	r3, [r4, #20]
 8015078:	b002      	add	sp, #8
 801507a:	bd70      	pop	{r4, r5, r6, pc}
 801507c:	ab01      	add	r3, sp, #4
 801507e:	466a      	mov	r2, sp
 8015080:	f7ff ffc8 	bl	8015014 <__swhatbuf_r>
 8015084:	9900      	ldr	r1, [sp, #0]
 8015086:	4605      	mov	r5, r0
 8015088:	4630      	mov	r0, r6
 801508a:	f7ff f8f3 	bl	8014274 <_malloc_r>
 801508e:	b948      	cbnz	r0, 80150a4 <__smakebuf_r+0x44>
 8015090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015094:	059a      	lsls	r2, r3, #22
 8015096:	d4ef      	bmi.n	8015078 <__smakebuf_r+0x18>
 8015098:	f023 0303 	bic.w	r3, r3, #3
 801509c:	f043 0302 	orr.w	r3, r3, #2
 80150a0:	81a3      	strh	r3, [r4, #12]
 80150a2:	e7e3      	b.n	801506c <__smakebuf_r+0xc>
 80150a4:	4b0d      	ldr	r3, [pc, #52]	; (80150dc <__smakebuf_r+0x7c>)
 80150a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80150a8:	89a3      	ldrh	r3, [r4, #12]
 80150aa:	6020      	str	r0, [r4, #0]
 80150ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80150b0:	81a3      	strh	r3, [r4, #12]
 80150b2:	9b00      	ldr	r3, [sp, #0]
 80150b4:	6163      	str	r3, [r4, #20]
 80150b6:	9b01      	ldr	r3, [sp, #4]
 80150b8:	6120      	str	r0, [r4, #16]
 80150ba:	b15b      	cbz	r3, 80150d4 <__smakebuf_r+0x74>
 80150bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80150c0:	4630      	mov	r0, r6
 80150c2:	f000 f8b1 	bl	8015228 <_isatty_r>
 80150c6:	b128      	cbz	r0, 80150d4 <__smakebuf_r+0x74>
 80150c8:	89a3      	ldrh	r3, [r4, #12]
 80150ca:	f023 0303 	bic.w	r3, r3, #3
 80150ce:	f043 0301 	orr.w	r3, r3, #1
 80150d2:	81a3      	strh	r3, [r4, #12]
 80150d4:	89a0      	ldrh	r0, [r4, #12]
 80150d6:	4305      	orrs	r5, r0
 80150d8:	81a5      	strh	r5, [r4, #12]
 80150da:	e7cd      	b.n	8015078 <__smakebuf_r+0x18>
 80150dc:	08013fc1 	.word	0x08013fc1

080150e0 <__malloc_lock>:
 80150e0:	4801      	ldr	r0, [pc, #4]	; (80150e8 <__malloc_lock+0x8>)
 80150e2:	f7ff b851 	b.w	8014188 <__retarget_lock_acquire_recursive>
 80150e6:	bf00      	nop
 80150e8:	2000b054 	.word	0x2000b054

080150ec <__malloc_unlock>:
 80150ec:	4801      	ldr	r0, [pc, #4]	; (80150f4 <__malloc_unlock+0x8>)
 80150ee:	f7ff b84c 	b.w	801418a <__retarget_lock_release_recursive>
 80150f2:	bf00      	nop
 80150f4:	2000b054 	.word	0x2000b054

080150f8 <_realloc_r>:
 80150f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150fc:	4680      	mov	r8, r0
 80150fe:	4614      	mov	r4, r2
 8015100:	460e      	mov	r6, r1
 8015102:	b921      	cbnz	r1, 801510e <_realloc_r+0x16>
 8015104:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015108:	4611      	mov	r1, r2
 801510a:	f7ff b8b3 	b.w	8014274 <_malloc_r>
 801510e:	b92a      	cbnz	r2, 801511c <_realloc_r+0x24>
 8015110:	f7ff f844 	bl	801419c <_free_r>
 8015114:	4625      	mov	r5, r4
 8015116:	4628      	mov	r0, r5
 8015118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801511c:	f000 f894 	bl	8015248 <_malloc_usable_size_r>
 8015120:	4284      	cmp	r4, r0
 8015122:	4607      	mov	r7, r0
 8015124:	d802      	bhi.n	801512c <_realloc_r+0x34>
 8015126:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801512a:	d812      	bhi.n	8015152 <_realloc_r+0x5a>
 801512c:	4621      	mov	r1, r4
 801512e:	4640      	mov	r0, r8
 8015130:	f7ff f8a0 	bl	8014274 <_malloc_r>
 8015134:	4605      	mov	r5, r0
 8015136:	2800      	cmp	r0, #0
 8015138:	d0ed      	beq.n	8015116 <_realloc_r+0x1e>
 801513a:	42bc      	cmp	r4, r7
 801513c:	4622      	mov	r2, r4
 801513e:	4631      	mov	r1, r6
 8015140:	bf28      	it	cs
 8015142:	463a      	movcs	r2, r7
 8015144:	f7fe fe54 	bl	8013df0 <memcpy>
 8015148:	4631      	mov	r1, r6
 801514a:	4640      	mov	r0, r8
 801514c:	f7ff f826 	bl	801419c <_free_r>
 8015150:	e7e1      	b.n	8015116 <_realloc_r+0x1e>
 8015152:	4635      	mov	r5, r6
 8015154:	e7df      	b.n	8015116 <_realloc_r+0x1e>
	...

08015158 <_read_r>:
 8015158:	b538      	push	{r3, r4, r5, lr}
 801515a:	4d07      	ldr	r5, [pc, #28]	; (8015178 <_read_r+0x20>)
 801515c:	4604      	mov	r4, r0
 801515e:	4608      	mov	r0, r1
 8015160:	4611      	mov	r1, r2
 8015162:	2200      	movs	r2, #0
 8015164:	602a      	str	r2, [r5, #0]
 8015166:	461a      	mov	r2, r3
 8015168:	f7ed f94e 	bl	8002408 <_read>
 801516c:	1c43      	adds	r3, r0, #1
 801516e:	d102      	bne.n	8015176 <_read_r+0x1e>
 8015170:	682b      	ldr	r3, [r5, #0]
 8015172:	b103      	cbz	r3, 8015176 <_read_r+0x1e>
 8015174:	6023      	str	r3, [r4, #0]
 8015176:	bd38      	pop	{r3, r4, r5, pc}
 8015178:	2000b050 	.word	0x2000b050

0801517c <_raise_r>:
 801517c:	291f      	cmp	r1, #31
 801517e:	b538      	push	{r3, r4, r5, lr}
 8015180:	4604      	mov	r4, r0
 8015182:	460d      	mov	r5, r1
 8015184:	d904      	bls.n	8015190 <_raise_r+0x14>
 8015186:	2316      	movs	r3, #22
 8015188:	6003      	str	r3, [r0, #0]
 801518a:	f04f 30ff 	mov.w	r0, #4294967295
 801518e:	bd38      	pop	{r3, r4, r5, pc}
 8015190:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015192:	b112      	cbz	r2, 801519a <_raise_r+0x1e>
 8015194:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015198:	b94b      	cbnz	r3, 80151ae <_raise_r+0x32>
 801519a:	4620      	mov	r0, r4
 801519c:	f000 f830 	bl	8015200 <_getpid_r>
 80151a0:	462a      	mov	r2, r5
 80151a2:	4601      	mov	r1, r0
 80151a4:	4620      	mov	r0, r4
 80151a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80151aa:	f000 b817 	b.w	80151dc <_kill_r>
 80151ae:	2b01      	cmp	r3, #1
 80151b0:	d00a      	beq.n	80151c8 <_raise_r+0x4c>
 80151b2:	1c59      	adds	r1, r3, #1
 80151b4:	d103      	bne.n	80151be <_raise_r+0x42>
 80151b6:	2316      	movs	r3, #22
 80151b8:	6003      	str	r3, [r0, #0]
 80151ba:	2001      	movs	r0, #1
 80151bc:	e7e7      	b.n	801518e <_raise_r+0x12>
 80151be:	2400      	movs	r4, #0
 80151c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80151c4:	4628      	mov	r0, r5
 80151c6:	4798      	blx	r3
 80151c8:	2000      	movs	r0, #0
 80151ca:	e7e0      	b.n	801518e <_raise_r+0x12>

080151cc <raise>:
 80151cc:	4b02      	ldr	r3, [pc, #8]	; (80151d8 <raise+0xc>)
 80151ce:	4601      	mov	r1, r0
 80151d0:	6818      	ldr	r0, [r3, #0]
 80151d2:	f7ff bfd3 	b.w	801517c <_raise_r>
 80151d6:	bf00      	nop
 80151d8:	20000048 	.word	0x20000048

080151dc <_kill_r>:
 80151dc:	b538      	push	{r3, r4, r5, lr}
 80151de:	4d07      	ldr	r5, [pc, #28]	; (80151fc <_kill_r+0x20>)
 80151e0:	2300      	movs	r3, #0
 80151e2:	4604      	mov	r4, r0
 80151e4:	4608      	mov	r0, r1
 80151e6:	4611      	mov	r1, r2
 80151e8:	602b      	str	r3, [r5, #0]
 80151ea:	f7ed f8f1 	bl	80023d0 <_kill>
 80151ee:	1c43      	adds	r3, r0, #1
 80151f0:	d102      	bne.n	80151f8 <_kill_r+0x1c>
 80151f2:	682b      	ldr	r3, [r5, #0]
 80151f4:	b103      	cbz	r3, 80151f8 <_kill_r+0x1c>
 80151f6:	6023      	str	r3, [r4, #0]
 80151f8:	bd38      	pop	{r3, r4, r5, pc}
 80151fa:	bf00      	nop
 80151fc:	2000b050 	.word	0x2000b050

08015200 <_getpid_r>:
 8015200:	f7ed b8de 	b.w	80023c0 <_getpid>

08015204 <_fstat_r>:
 8015204:	b538      	push	{r3, r4, r5, lr}
 8015206:	4d07      	ldr	r5, [pc, #28]	; (8015224 <_fstat_r+0x20>)
 8015208:	2300      	movs	r3, #0
 801520a:	4604      	mov	r4, r0
 801520c:	4608      	mov	r0, r1
 801520e:	4611      	mov	r1, r2
 8015210:	602b      	str	r3, [r5, #0]
 8015212:	f7ed f922 	bl	800245a <_fstat>
 8015216:	1c43      	adds	r3, r0, #1
 8015218:	d102      	bne.n	8015220 <_fstat_r+0x1c>
 801521a:	682b      	ldr	r3, [r5, #0]
 801521c:	b103      	cbz	r3, 8015220 <_fstat_r+0x1c>
 801521e:	6023      	str	r3, [r4, #0]
 8015220:	bd38      	pop	{r3, r4, r5, pc}
 8015222:	bf00      	nop
 8015224:	2000b050 	.word	0x2000b050

08015228 <_isatty_r>:
 8015228:	b538      	push	{r3, r4, r5, lr}
 801522a:	4d06      	ldr	r5, [pc, #24]	; (8015244 <_isatty_r+0x1c>)
 801522c:	2300      	movs	r3, #0
 801522e:	4604      	mov	r4, r0
 8015230:	4608      	mov	r0, r1
 8015232:	602b      	str	r3, [r5, #0]
 8015234:	f7ed f921 	bl	800247a <_isatty>
 8015238:	1c43      	adds	r3, r0, #1
 801523a:	d102      	bne.n	8015242 <_isatty_r+0x1a>
 801523c:	682b      	ldr	r3, [r5, #0]
 801523e:	b103      	cbz	r3, 8015242 <_isatty_r+0x1a>
 8015240:	6023      	str	r3, [r4, #0]
 8015242:	bd38      	pop	{r3, r4, r5, pc}
 8015244:	2000b050 	.word	0x2000b050

08015248 <_malloc_usable_size_r>:
 8015248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801524c:	1f18      	subs	r0, r3, #4
 801524e:	2b00      	cmp	r3, #0
 8015250:	bfbc      	itt	lt
 8015252:	580b      	ldrlt	r3, [r1, r0]
 8015254:	18c0      	addlt	r0, r0, r3
 8015256:	4770      	bx	lr

08015258 <_init>:
 8015258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801525a:	bf00      	nop
 801525c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801525e:	bc08      	pop	{r3}
 8015260:	469e      	mov	lr, r3
 8015262:	4770      	bx	lr

08015264 <_fini>:
 8015264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015266:	bf00      	nop
 8015268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801526a:	bc08      	pop	{r3}
 801526c:	469e      	mov	lr, r3
 801526e:	4770      	bx	lr
